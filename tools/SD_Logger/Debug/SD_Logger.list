
SD_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008940  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08008c30  08008c30  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c30  08008c30  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c34  08008c34  00018c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003390  20000088  08008cbc  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003418  08008cbc  00023418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168eb  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c77  00000000  00000000  000369db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0003a658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1c  00000000  00000000  0003ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c069  00000000  00000000  0003c934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ccc  00000000  00000000  0005899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009279c  00000000  00000000  00072669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b98  00000000  00000000  00104e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0010a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a38 	.word	0x08008a38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08008a38 	.word	0x08008a38

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2140      	movs	r1, #64	; 0x40
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <SELECT+0x18>)
 800016a:	f001 fe9f 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800016e:	2001      	movs	r0, #1
 8000170:	f001 f988 	bl	8001484 <HAL_Delay>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	2140      	movs	r1, #64	; 0x40
 8000184:	4803      	ldr	r0, [pc, #12]	; (8000194 <DESELECT+0x18>)
 8000186:	f001 fe91 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f001 f97a 	bl	8001484 <HAL_Delay>
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010c00 	.word	0x40010c00

08000198 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001a2:	bf00      	nop
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <SPI_TxByte+0x30>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	689b      	ldr	r3, [r3, #8]
 80001aa:	f003 0302 	and.w	r3, r3, #2
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	d1f8      	bne.n	80001a4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80001b2:	1df9      	adds	r1, r7, #7
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	2201      	movs	r2, #1
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <SPI_TxByte+0x30>)
 80001ba:	f002 fb23 	bl	8002804 <HAL_SPI_Transmit>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	20000374 	.word	0x20000374

080001cc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001d8:	bf00      	nop
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <SPI_TxBuffer+0x30>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	f003 0302 	and.w	r3, r3, #2
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	d1f8      	bne.n	80001da <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001e8:	887a      	ldrh	r2, [r7, #2]
 80001ea:	2364      	movs	r3, #100	; 0x64
 80001ec:	6879      	ldr	r1, [r7, #4]
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <SPI_TxBuffer+0x30>)
 80001f0:	f002 fb08 	bl	8002804 <HAL_SPI_Transmit>
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000374 	.word	0x20000374

08000200 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000206:	23ff      	movs	r3, #255	; 0xff
 8000208:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800020a:	bf00      	nop
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <SPI_RxByte+0x34>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	f003 0302 	and.w	r3, r3, #2
 8000216:	2b02      	cmp	r3, #2
 8000218:	d1f8      	bne.n	800020c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800021a:	1dba      	adds	r2, r7, #6
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	2364      	movs	r3, #100	; 0x64
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2301      	movs	r3, #1
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <SPI_RxByte+0x34>)
 8000226:	f002 fc30 	bl	8002a8a <HAL_SPI_TransmitReceive>

	return data;
 800022a:	79bb      	ldrb	r3, [r7, #6]
}
 800022c:	4618      	mov	r0, r3
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000374 	.word	0x20000374

08000238 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000240:	f7ff ffde 	bl	8000200 <SPI_RxByte>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	701a      	strb	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <SD_ReadyWait+0x30>)
 800025c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000260:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000262:	f7ff ffcd 	bl	8000200 <SPI_RxByte>
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2bff      	cmp	r3, #255	; 0xff
 800026e:	d003      	beq.n	8000278 <SD_ReadyWait+0x24>
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <SD_ReadyWait+0x30>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d1f4      	bne.n	8000262 <SD_ReadyWait+0xe>

	return res;
 8000278:	79fb      	ldrb	r3, [r7, #7]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000a6 	.word	0x200000a6

08000288 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800028e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000292:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000294:	f7ff ff72 	bl	800017c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	e005      	b.n	80002aa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800029e:	20ff      	movs	r0, #255	; 0xff
 80002a0:	f7ff ff7a 	bl	8000198 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	2b09      	cmp	r3, #9
 80002ae:	ddf6      	ble.n	800029e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80002b0:	f7ff ff56 	bl	8000160 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002b4:	2340      	movs	r3, #64	; 0x40
 80002b6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002c8:	2395      	movs	r3, #149	; 0x95
 80002ca:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002cc:	463b      	mov	r3, r7
 80002ce:	2106      	movs	r1, #6
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff7b 	bl	80001cc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002d6:	e002      	b.n	80002de <SD_PowerOn+0x56>
	{
		cnt--;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3b01      	subs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002de:	f7ff ff8f 	bl	8000200 <SPI_RxByte>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d002      	beq.n	80002ee <SD_PowerOn+0x66>
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f4      	bne.n	80002d8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002ee:	f7ff ff45 	bl	800017c <DESELECT>
	SPI_TxByte(0XFF);
 80002f2:	20ff      	movs	r0, #255	; 0xff
 80002f4:	f7ff ff50 	bl	8000198 <SPI_TxByte>

	PowerFlag = 1;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <SD_PowerOn+0x80>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200000a9 	.word	0x200000a9

0800030c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <SD_PowerOff+0x14>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	200000a9 	.word	0x200000a9

08000324 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000328:	4b02      	ldr	r3, [pc, #8]	; (8000334 <SD_CheckPower+0x10>)
 800032a:	781b      	ldrb	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	200000a9 	.word	0x200000a9

08000338 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SD_RxDataBlock+0x58>)
 8000344:	22c8      	movs	r2, #200	; 0xc8
 8000346:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000348:	f7ff ff5a 	bl	8000200 <SPI_RxByte>
 800034c:	4603      	mov	r3, r0
 800034e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	2bff      	cmp	r3, #255	; 0xff
 8000354:	d103      	bne.n	800035e <SD_RxDataBlock+0x26>
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <SD_RxDataBlock+0x58>)
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f4      	bne.n	8000348 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	d001      	beq.n	8000368 <SD_RxDataBlock+0x30>
 8000364:	2300      	movs	r3, #0
 8000366:	e00f      	b.n	8000388 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	607a      	str	r2, [r7, #4]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff62 	bl	8000238 <SPI_RxBytePtr>
	} while(len--);
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	603a      	str	r2, [r7, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f4      	bne.n	8000368 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800037e:	f7ff ff3f 	bl	8000200 <SPI_RxByte>
	SPI_RxByte();
 8000382:	f7ff ff3d 	bl	8000200 <SPI_RxByte>

	return TRUE;
 8000386:	2301      	movs	r3, #1
}
 8000388:	4618      	mov	r0, r3
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000a4 	.word	0x200000a4

08000394 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80003a4:	f7ff ff56 	bl	8000254 <SD_ReadyWait>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2bff      	cmp	r3, #255	; 0xff
 80003ac:	d001      	beq.n	80003b2 <SD_TxDataBlock+0x1e>
 80003ae:	2300      	movs	r3, #0
 80003b0:	e02f      	b.n	8000412 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80003b2:	78fb      	ldrb	r3, [r7, #3]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff feef 	bl	8000198 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003ba:	78fb      	ldrb	r3, [r7, #3]
 80003bc:	2bfd      	cmp	r3, #253	; 0xfd
 80003be:	d020      	beq.n	8000402 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ff01 	bl	80001cc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003ca:	f7ff ff19 	bl	8000200 <SPI_RxByte>
		SPI_RxByte();
 80003ce:	f7ff ff17 	bl	8000200 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003d2:	e00b      	b.n	80003ec <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003d4:	f7ff ff14 	bl	8000200 <SPI_RxByte>
 80003d8:	4603      	mov	r3, r0
 80003da:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	f003 031f 	and.w	r3, r3, #31
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d006      	beq.n	80003f4 <SD_TxDataBlock+0x60>
			i++;
 80003e6:	7bbb      	ldrb	r3, [r7, #14]
 80003e8:	3301      	adds	r3, #1
 80003ea:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003ec:	7bbb      	ldrb	r3, [r7, #14]
 80003ee:	2b40      	cmp	r3, #64	; 0x40
 80003f0:	d9f0      	bls.n	80003d4 <SD_TxDataBlock+0x40>
 80003f2:	e000      	b.n	80003f6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003f4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003f6:	bf00      	nop
 80003f8:	f7ff ff02 	bl	8000200 <SPI_RxByte>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0fa      	beq.n	80003f8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	f003 031f 	and.w	r3, r3, #31
 8000408:	2b05      	cmp	r3, #5
 800040a:	d101      	bne.n	8000410 <SD_TxDataBlock+0x7c>
 800040c:	2301      	movs	r3, #1
 800040e:	e000      	b.n	8000412 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	6039      	str	r1, [r7, #0]
 8000424:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000426:	f7ff ff15 	bl	8000254 <SD_ReadyWait>
 800042a:	4603      	mov	r3, r0
 800042c:	2bff      	cmp	r3, #255	; 0xff
 800042e:	d001      	beq.n	8000434 <SD_SendCmd+0x1a>
 8000430:	23ff      	movs	r3, #255	; 0xff
 8000432:	e042      	b.n	80004ba <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff feae 	bl	8000198 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	0e1b      	lsrs	r3, r3, #24
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fea8 	bl	8000198 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	0c1b      	lsrs	r3, r3, #16
 800044c:	b2db      	uxtb	r3, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff fea2 	bl	8000198 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	b2db      	uxtb	r3, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff fe9c 	bl	8000198 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fe97 	bl	8000198 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	2b40      	cmp	r3, #64	; 0x40
 800046e:	d102      	bne.n	8000476 <SD_SendCmd+0x5c>
 8000470:	2395      	movs	r3, #149	; 0x95
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e007      	b.n	8000486 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b48      	cmp	r3, #72	; 0x48
 800047a:	d102      	bne.n	8000482 <SD_SendCmd+0x68>
 800047c:	2387      	movs	r3, #135	; 0x87
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e001      	b.n	8000486 <SD_SendCmd+0x6c>
	else crc = 1;
 8000482:	2301      	movs	r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff fe85 	bl	8000198 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b4c      	cmp	r3, #76	; 0x4c
 8000492:	d101      	bne.n	8000498 <SD_SendCmd+0x7e>
 8000494:	f7ff feb4 	bl	8000200 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000498:	230a      	movs	r3, #10
 800049a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800049c:	f7ff feb0 	bl	8000200 <SPI_RxByte>
 80004a0:	4603      	mov	r3, r0
 80004a2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80004a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da05      	bge.n	80004b8 <SD_SendCmd+0x9e>
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	3b01      	subs	r3, #1
 80004b0:	73bb      	strb	r3, [r7, #14]
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1f1      	bne.n	800049c <SD_SendCmd+0x82>

	return res;
 80004b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SD_disk_initialize+0x14>
 80004d4:	2301      	movs	r3, #1
 80004d6:	e0d1      	b.n	800067c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004d8:	4b6a      	ldr	r3, [pc, #424]	; (8000684 <SD_disk_initialize+0x1c0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <SD_disk_initialize+0x2a>
 80004e6:	4b67      	ldr	r3, [pc, #412]	; (8000684 <SD_disk_initialize+0x1c0>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	e0c6      	b.n	800067c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004ee:	f7ff fecb 	bl	8000288 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004f2:	f7ff fe35 	bl	8000160 <SELECT>

	/* check disk type */
	type = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004fa:	2100      	movs	r1, #0
 80004fc:	2040      	movs	r0, #64	; 0x40
 80004fe:	f7ff ff8c 	bl	800041a <SD_SendCmd>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	f040 80a1 	bne.w	800064c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800050a:	4b5f      	ldr	r3, [pc, #380]	; (8000688 <SD_disk_initialize+0x1c4>)
 800050c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000510:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000512:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000516:	2048      	movs	r0, #72	; 0x48
 8000518:	f7ff ff7f 	bl	800041a <SD_SendCmd>
 800051c:	4603      	mov	r3, r0
 800051e:	2b01      	cmp	r3, #1
 8000520:	d155      	bne.n	80005ce <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	e00c      	b.n	8000542 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000528:	7bfc      	ldrb	r4, [r7, #15]
 800052a:	f7ff fe69 	bl	8000200 <SPI_RxByte>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	f104 0310 	add.w	r3, r4, #16
 8000536:	443b      	add	r3, r7
 8000538:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	3301      	adds	r3, #1
 8000540:	73fb      	strb	r3, [r7, #15]
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d9ef      	bls.n	8000528 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000548:	7abb      	ldrb	r3, [r7, #10]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d17e      	bne.n	800064c <SD_disk_initialize+0x188>
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	2baa      	cmp	r3, #170	; 0xaa
 8000552:	d17b      	bne.n	800064c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000554:	2100      	movs	r1, #0
 8000556:	2077      	movs	r0, #119	; 0x77
 8000558:	f7ff ff5f 	bl	800041a <SD_SendCmd>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d807      	bhi.n	8000572 <SD_disk_initialize+0xae>
 8000562:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000566:	2069      	movs	r0, #105	; 0x69
 8000568:	f7ff ff57 	bl	800041a <SD_SendCmd>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d004      	beq.n	800057c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000572:	4b45      	ldr	r3, [pc, #276]	; (8000688 <SD_disk_initialize+0x1c4>)
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1ec      	bne.n	8000554 <SD_disk_initialize+0x90>
 800057a:	e000      	b.n	800057e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800057c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800057e:	4b42      	ldr	r3, [pc, #264]	; (8000688 <SD_disk_initialize+0x1c4>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d062      	beq.n	800064c <SD_disk_initialize+0x188>
 8000586:	2100      	movs	r1, #0
 8000588:	207a      	movs	r0, #122	; 0x7a
 800058a:	f7ff ff46 	bl	800041a <SD_SendCmd>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d15b      	bne.n	800064c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e00c      	b.n	80005b4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800059a:	7bfc      	ldrb	r4, [r7, #15]
 800059c:	f7ff fe30 	bl	8000200 <SPI_RxByte>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	f104 0310 	add.w	r3, r4, #16
 80005a8:	443b      	add	r3, r7
 80005aa:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	3301      	adds	r3, #1
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d9ef      	bls.n	800059a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005ba:	7a3b      	ldrb	r3, [r7, #8]
 80005bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SD_disk_initialize+0x104>
 80005c4:	230c      	movs	r3, #12
 80005c6:	e000      	b.n	80005ca <SD_disk_initialize+0x106>
 80005c8:	2304      	movs	r3, #4
 80005ca:	73bb      	strb	r3, [r7, #14]
 80005cc:	e03e      	b.n	800064c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ce:	2100      	movs	r1, #0
 80005d0:	2077      	movs	r0, #119	; 0x77
 80005d2:	f7ff ff22 	bl	800041a <SD_SendCmd>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d808      	bhi.n	80005ee <SD_disk_initialize+0x12a>
 80005dc:	2100      	movs	r1, #0
 80005de:	2069      	movs	r0, #105	; 0x69
 80005e0:	f7ff ff1b 	bl	800041a <SD_SendCmd>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d801      	bhi.n	80005ee <SD_disk_initialize+0x12a>
 80005ea:	2302      	movs	r3, #2
 80005ec:	e000      	b.n	80005f0 <SD_disk_initialize+0x12c>
 80005ee:	2301      	movs	r3, #1
 80005f0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	d10e      	bne.n	8000616 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005f8:	2100      	movs	r1, #0
 80005fa:	2077      	movs	r0, #119	; 0x77
 80005fc:	f7ff ff0d 	bl	800041a <SD_SendCmd>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d80e      	bhi.n	8000624 <SD_disk_initialize+0x160>
 8000606:	2100      	movs	r1, #0
 8000608:	2069      	movs	r0, #105	; 0x69
 800060a:	f7ff ff06 	bl	800041a <SD_SendCmd>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d107      	bne.n	8000624 <SD_disk_initialize+0x160>
 8000614:	e00c      	b.n	8000630 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000616:	2100      	movs	r1, #0
 8000618:	2041      	movs	r0, #65	; 0x41
 800061a:	f7ff fefe 	bl	800041a <SD_SendCmd>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <SD_disk_initialize+0x1c4>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1e2      	bne.n	80005f2 <SD_disk_initialize+0x12e>
 800062c:	e000      	b.n	8000630 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800062e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <SD_disk_initialize+0x1c4>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <SD_disk_initialize+0x184>
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	2050      	movs	r0, #80	; 0x50
 800063e:	f7ff feec 	bl	800041a <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SD_disk_initialize+0x188>
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SD_disk_initialize+0x1c8>)
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000652:	f7ff fd93 	bl	800017c <DESELECT>
	SPI_RxByte();
 8000656:	f7ff fdd3 	bl	8000200 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SD_disk_initialize+0x1c0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SD_disk_initialize+0x1c0>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000672:	f7ff fe4b 	bl	800030c <SD_PowerOff>
	}

	return Stat;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_disk_initialize+0x1c0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	200000a4 	.word	0x200000a4
 800068c:	200000a8 	.word	0x200000a8

08000690 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SD_disk_status+0x14>
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <SD_disk_status+0x1a>
	return Stat;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_status+0x24>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <SD_disk_read+0x1c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SD_disk_read+0x20>
 80006d4:	2304      	movs	r3, #4
 80006d6:	e051      	b.n	800077c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SD_disk_read+0xcc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SD_disk_read+0x32>
 80006e6:	2303      	movs	r3, #3
 80006e8:	e048      	b.n	800077c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SD_disk_read+0xd0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <SD_disk_read+0x44>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	607b      	str	r3, [r7, #4]

	SELECT();
 80006fc:	f7ff fd30 	bl	8000160 <SELECT>

	if (count == 1)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2051      	movs	r0, #81	; 0x51
 800070a:	f7ff fe86 	bl	800041a <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d129      	bne.n	8000768 <SD_disk_read+0xb0>
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	f7ff fe0d 	bl	8000338 <SD_RxDataBlock>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <SD_disk_read+0xb0>
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e01e      	b.n	8000768 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2052      	movs	r0, #82	; 0x52
 800072e:	f7ff fe74 	bl	800041a <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d117      	bne.n	8000768 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fdfb 	bl	8000338 <SD_RxDataBlock>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <SD_disk_read+0xa6>
				buff += 512;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ed      	bne.n	8000738 <SD_disk_read+0x80>
 800075c:	e000      	b.n	8000760 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800075e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	204c      	movs	r0, #76	; 0x4c
 8000764:	f7ff fe59 	bl	800041a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000768:	f7ff fd08 	bl	800017c <DESELECT>
	SPI_RxByte();
 800076c:	f7ff fd48 	bl	8000200 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	200000a8 	.word	0x200000a8

0800078c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <SD_disk_write+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SD_disk_write+0x20>
 80007a8:	2304      	movs	r3, #4
 80007aa:	e06b      	b.n	8000884 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SD_disk_write+0x100>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SD_disk_write+0x32>
 80007ba:	2303      	movs	r3, #3
 80007bc:	e062      	b.n	8000884 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <SD_disk_write+0x100>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SD_disk_write+0x44>
 80007cc:	2302      	movs	r3, #2
 80007ce:	e059      	b.n	8000884 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SD_disk_write+0x104>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <SD_disk_write+0x56>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	607b      	str	r3, [r7, #4]

	SELECT();
 80007e2:	f7ff fcbd 	bl	8000160 <SELECT>

	if (count == 1)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	2058      	movs	r0, #88	; 0x58
 80007f0:	f7ff fe13 	bl	800041a <SD_SendCmd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d13a      	bne.n	8000870 <SD_disk_write+0xe4>
 80007fa:	21fe      	movs	r1, #254	; 0xfe
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff fdc9 	bl	8000394 <SD_TxDataBlock>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <SD_disk_write+0xe4>
			count = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e030      	b.n	8000870 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SD_disk_write+0x104>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2077      	movs	r0, #119	; 0x77
 800081e:	f7ff fdfc 	bl	800041a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2057      	movs	r0, #87	; 0x57
 8000826:	f7ff fdf8 	bl	800041a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2059      	movs	r0, #89	; 0x59
 800082e:	f7ff fdf4 	bl	800041a <SD_SendCmd>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000838:	21fc      	movs	r1, #252	; 0xfc
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fdaa 	bl	8000394 <SD_TxDataBlock>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <SD_disk_write+0xd0>
				buff += 512;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800084c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ee      	bne.n	8000838 <SD_disk_write+0xac>
 800085a:	e000      	b.n	800085e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800085c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800085e:	21fd      	movs	r1, #253	; 0xfd
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd97 	bl	8000394 <SD_TxDataBlock>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <SD_disk_write+0xe4>
			{
				count = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000870:	f7ff fc84 	bl	800017c <DESELECT>
	SPI_RxByte();
 8000874:	f7ff fcc4 	bl	8000200 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	200000a8 	.word	0x200000a8

08000894 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	603a      	str	r2, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_ioctl+0x1e>
 80008ae:	2304      	movs	r3, #4
 80008b0:	e115      	b.n	8000ade <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d124      	bne.n	8000908 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d012      	beq.n	80008ec <SD_disk_ioctl+0x58>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	dc1a      	bgt.n	8000900 <SD_disk_ioctl+0x6c>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <SD_disk_ioctl+0x40>
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d006      	beq.n	80008e0 <SD_disk_ioctl+0x4c>
 80008d2:	e015      	b.n	8000900 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008d4:	f7ff fd1a 	bl	800030c <SD_PowerOff>
			res = RES_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008de:	e0fc      	b.n	8000ada <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008e0:	f7ff fcd2 	bl	8000288 <SD_PowerOn>
			res = RES_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ea:	e0f6      	b.n	8000ada <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	1c5c      	adds	r4, r3, #1
 80008f0:	f7ff fd18 	bl	8000324 <SD_CheckPower>
 80008f4:	4603      	mov	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008fe:	e0ec      	b.n	8000ada <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000900:	2304      	movs	r3, #4
 8000902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000906:	e0e8      	b.n	8000ada <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000908:	4b77      	ldr	r3, [pc, #476]	; (8000ae8 <SD_disk_ioctl+0x254>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SD_disk_ioctl+0x86>
 8000916:	2303      	movs	r3, #3
 8000918:	e0e1      	b.n	8000ade <SD_disk_ioctl+0x24a>

		SELECT();
 800091a:	f7ff fc21 	bl	8000160 <SELECT>

		switch (ctrl)
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	2b0d      	cmp	r3, #13
 8000922:	f200 80cb 	bhi.w	8000abc <SD_disk_ioctl+0x228>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <SD_disk_ioctl+0x98>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	08000a27 	.word	0x08000a27
 8000930:	08000965 	.word	0x08000965
 8000934:	08000a17 	.word	0x08000a17
 8000938:	08000abd 	.word	0x08000abd
 800093c:	08000abd 	.word	0x08000abd
 8000940:	08000abd 	.word	0x08000abd
 8000944:	08000abd 	.word	0x08000abd
 8000948:	08000abd 	.word	0x08000abd
 800094c:	08000abd 	.word	0x08000abd
 8000950:	08000abd 	.word	0x08000abd
 8000954:	08000abd 	.word	0x08000abd
 8000958:	08000a39 	.word	0x08000a39
 800095c:	08000a5d 	.word	0x08000a5d
 8000960:	08000a81 	.word	0x08000a81
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000964:	2100      	movs	r1, #0
 8000966:	2049      	movs	r0, #73	; 0x49
 8000968:	f7ff fd57 	bl	800041a <SD_SendCmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 80a8 	bne.w	8000ac4 <SD_disk_ioctl+0x230>
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2110      	movs	r1, #16
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fcdc 	bl	8000338 <SD_RxDataBlock>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 809e 	beq.w	8000ac4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000988:	7b3b      	ldrb	r3, [r7, #12]
 800098a:	099b      	lsrs	r3, r3, #6
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10e      	bne.n	80009b0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b29a      	uxth	r2, r3
 8000996:	7d3b      	ldrb	r3, [r7, #20]
 8000998:	b29b      	uxth	r3, r3
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b29b      	uxth	r3, r3
 800099e:	4413      	add	r3, r2
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80009a6:	8bfb      	ldrh	r3, [r7, #30]
 80009a8:	029a      	lsls	r2, r3, #10
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e02e      	b.n	8000a0e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009b0:	7c7b      	ldrb	r3, [r7, #17]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	7dbb      	ldrb	r3, [r7, #22]
 80009ba:	09db      	lsrs	r3, r3, #7
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	7d7b      	ldrb	r3, [r7, #21]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f003 0306 	and.w	r3, r3, #6
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4413      	add	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3302      	adds	r3, #2
 80009d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009d8:	7d3b      	ldrb	r3, [r7, #20]
 80009da:	099b      	lsrs	r3, r3, #6
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	b29a      	uxth	r2, r3
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	7cbb      	ldrb	r3, [r7, #18]
 80009ee:	029b      	lsls	r3, r3, #10
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a00:	8bfa      	ldrh	r2, [r7, #30]
 8000a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a06:	3b09      	subs	r3, #9
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a14:	e056      	b.n	8000ac4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a24:	e055      	b.n	8000ad2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a26:	f7ff fc15 	bl	8000254 <SD_ReadyWait>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2bff      	cmp	r3, #255	; 0xff
 8000a2e:	d14b      	bne.n	8000ac8 <SD_disk_ioctl+0x234>
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a36:	e047      	b.n	8000ac8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2049      	movs	r0, #73	; 0x49
 8000a3c:	f7ff fced 	bl	800041a <SD_SendCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d142      	bne.n	8000acc <SD_disk_ioctl+0x238>
 8000a46:	2110      	movs	r1, #16
 8000a48:	6a38      	ldr	r0, [r7, #32]
 8000a4a:	f7ff fc75 	bl	8000338 <SD_RxDataBlock>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d03b      	beq.n	8000acc <SD_disk_ioctl+0x238>
 8000a54:	2300      	movs	r3, #0
 8000a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a5a:	e037      	b.n	8000acc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	204a      	movs	r0, #74	; 0x4a
 8000a60:	f7ff fcdb 	bl	800041a <SD_SendCmd>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d132      	bne.n	8000ad0 <SD_disk_ioctl+0x23c>
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	6a38      	ldr	r0, [r7, #32]
 8000a6e:	f7ff fc63 	bl	8000338 <SD_RxDataBlock>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d02b      	beq.n	8000ad0 <SD_disk_ioctl+0x23c>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a7e:	e027      	b.n	8000ad0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a80:	2100      	movs	r1, #0
 8000a82:	207a      	movs	r0, #122	; 0x7a
 8000a84:	f7ff fcc9 	bl	800041a <SD_SendCmd>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d116      	bne.n	8000abc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a94:	e00b      	b.n	8000aae <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a96:	6a3c      	ldr	r4, [r7, #32]
 8000a98:	1c63      	adds	r3, r4, #1
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	f7ff fbb0 	bl	8000200 <SPI_RxByte>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d9ef      	bls.n	8000a96 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000abc:	2304      	movs	r3, #4
 8000abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac2:	e006      	b.n	8000ad2 <SD_disk_ioctl+0x23e>
			break;
 8000ac4:	bf00      	nop
 8000ac6:	e004      	b.n	8000ad2 <SD_disk_ioctl+0x23e>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e002      	b.n	8000ad2 <SD_disk_ioctl+0x23e>
			break;
 8000acc:	bf00      	nop
 8000ace:	e000      	b.n	8000ad2 <SD_disk_ioctl+0x23e>
			break;
 8000ad0:	bf00      	nop
		}

		DESELECT();
 8000ad2:	f7ff fb53 	bl	800017c <DESELECT>
		SPI_RxByte();
 8000ad6:	f7ff fb93 	bl	8000200 <SPI_RxByte>
	}

	return res;
 8000ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	372c      	adds	r7, #44	; 0x2c
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000

08000aec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <vApplicationGetIdleTaskMemory+0x28>)
 8000afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200000ac 	.word	0x200000ac
 8000b18:	2000014c 	.word	0x2000014c

08000b1c <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart */
void send_uart (char *string)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff fb13 	bl	8000150 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);	// transmit in blocking mode
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <send_uart+0x2c>)
 8000b3a:	f002 fa4d 	bl	8002fd8 <HAL_UART_Transmit>

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200003cc 	.word	0x200003cc

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b09a      	sub	sp, #104	; 0x68
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fc35 	bl	80013c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f867 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f941 	bl	8000de0 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000b5e:	f002 fbbb 	bl	80032d8 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000b62:	f000 f8dd 	bl	8000d20 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 f911 	bl	8000d8c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000b6a:	f000 f8a3 	bl	8000cb4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* mount SD card */
  fresult = f_mount(&fs, "", 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4923      	ldr	r1, [pc, #140]	; (8000c00 <main+0xb4>)
 8000b72:	4824      	ldr	r0, [pc, #144]	; (8000c04 <main+0xb8>)
 8000b74:	f003 fd44 	bl	8004600 <f_mount>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <main+0xbc>)
 8000b7e:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <main+0xbc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <main+0x44>
	  send_uart ("error in mounting SD CARD...\n");
 8000b88:	4820      	ldr	r0, [pc, #128]	; (8000c0c <main+0xc0>)
 8000b8a:	f7ff ffc7 	bl	8000b1c <send_uart>
 8000b8e:	e002      	b.n	8000b96 <main+0x4a>
  else
	  send_uart ("SD Card mounted successfully...\n");
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <main+0xc4>)
 8000b92:	f7ff ffc3 	bl	8000b1c <send_uart>

  /* generating random file name for testing purposes - WILL BE CHANGED LATER */
  srand( 2 );												// trying to set seed
 8000b96:	2002      	movs	r0, #2
 8000b98:	f006 fdcc 	bl	8007734 <srand>
  int randomNum = rand();
 8000b9c:	f006 fdf8 	bl	8007790 <rand>
 8000ba0:	6678      	str	r0, [r7, #100]	; 0x64
  char fileName[40];
  sprintf(fileName, "file%d.txt", randomNum);				// generates random file name to be loaded onto SD card
 8000ba2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ba6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000ba8:	491a      	ldr	r1, [pc, #104]	; (8000c14 <main+0xc8>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fede 	bl	800796c <siprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <main+0xcc>)
 8000bb2:	f107 0420 	add.w	r4, r7, #32
 8000bb6:	461d      	mov	r5, r3
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f95c 	bl	8004e88 <osThreadCreate>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <main+0xd0>)
 8000bd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDwrite */
  osThreadDef(SDwrite, StartSDwrite, osPriorityLow, 0, 128);
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <main+0xd4>)
 8000bd8:	1d3c      	adds	r4, r7, #4
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDwriteHandle = osThreadCreate(osThread(SDwrite), NULL);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 f94b 	bl	8004e88 <osThreadCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <main+0xd8>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bf8:	f004 f93f 	bl	8004e7a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0xb0>
 8000bfe:	bf00      	nop
 8000c00:	08008a50 	.word	0x08008a50
 8000c04:	200004a0 	.word	0x200004a0
 8000c08:	20002500 	.word	0x20002500
 8000c0c:	08008a54 	.word	0x08008a54
 8000c10:	08008a74 	.word	0x08008a74
 8000c14:	08008a98 	.word	0x08008a98
 8000c18:	08008aac 	.word	0x08008aac
 8000c1c:	20000414 	.word	0x20000414
 8000c20:	08008ad0 	.word	0x08008ad0
 8000c24:	20000418 	.word	0x20000418

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b090      	sub	sp, #64	; 0x40
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	2228      	movs	r2, #40	; 0x28
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 fefb 	bl	8007a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f933 	bl	8001edc <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c7c:	f000 f974 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fba0 	bl	80023e0 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ca6:	f000 f95f 	bl	8000f68 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3740      	adds	r7, #64	; 0x40
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <MX_CAN_Init+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_CAN_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cd2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cd6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cda:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000cde:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_CAN_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_CAN_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_CAN_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_CAN_Init+0x64>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_CAN_Init+0x64>)
 8000d06:	f000 fbe1 	bl	80014cc <HAL_CAN_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d10:	f000 f92a 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000034c 	.word	0x2000034c
 8000d1c:	40006400 	.word	0x40006400

08000d20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d72:	f001 fcc3 	bl	80026fc <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f000 f8f4 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000374 	.word	0x20000374
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART2_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f002 f8b8 	bl	8002f38 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f8cb 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200003cc 	.word	0x200003cc
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000dfa:	f043 0320 	orr.w	r3, r3, #32
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_GPIO_Init+0x8c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <MX_GPIO_Init+0x90>)
 8000e42:	f001 f833 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : chip_select_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin;
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chip_select_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_GPIO_Init+0x90>)
 8000e5e:	f000 fea1 	bl	8001ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010c00 	.word	0x40010c00

08000e74 <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// CAN setup
	HAL_CAN_Start(&hcan);
 8000e7c:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <StartReadCAN+0x84>)
 8000e7e:	f000 fc20 	bl	80016c2 <HAL_CAN_Start>

	/* testing setting values for CAN_DATA */
	CAN_DATA.ID = 0x800;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <StartReadCAN+0x88>)
 8000e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e88:	801a      	strh	r2, [r3, #0]
	CAN_DATA.DATA = 0x8324;
 8000e8a:	491c      	ldr	r1, [pc, #112]	; (8000efc <StartReadCAN+0x88>)
 8000e8c:	f248 3224 	movw	r2, #33572	; 0x8324
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	CAN_DATA.TIME = 28492;
 8000e98:	4918      	ldr	r1, [pc, #96]	; (8000efc <StartReadCAN+0x88>)
 8000e9a:	f646 724c 	movw	r2, #28492	; 0x6f4c
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	CAN_DATA.LENGTH = 8;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <StartReadCAN+0x88>)
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	761a      	strb	r2, [r3, #24]

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f004 f837 	bl	8004f20 <osDelay>

      // check if message is available
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0){
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <StartReadCAN+0x84>)
 8000eb6:	f000 fd69 	bl	800198c <HAL_CAN_GetRxFifoFillLevel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f5      	beq.n	8000eac <StartReadCAN+0x38>

		  // receive message and store header info in CAN_rx_header, and data bytes into CAN_rx_data
		  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <StartReadCAN+0x8c>)
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <StartReadCAN+0x90>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <StartReadCAN+0x84>)
 8000ec8:	f000 fc3f 	bl	800174a <HAL_CAN_GetRxMessage>

		  CAN_DATA.ID = (uint16_t) CAN_rx_header.StdId;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <StartReadCAN+0x90>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <StartReadCAN+0x88>)
 8000ed4:	801a      	strh	r2, [r3, #0]
		  CAN_DATA.TIME = (uint16_t) CAN_rx_header.Timestamp;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <StartReadCAN+0x90>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	4615      	mov	r5, r2
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <StartReadCAN+0x88>)
 8000ee6:	e9c3 4504 	strd	r4, r5, [r3, #16]
		  CAN_DATA.LENGTH = (uint16_t) CAN_rx_header.DLC;
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <StartReadCAN+0x90>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <StartReadCAN+0x88>)
 8000ef2:	761a      	strb	r2, [r3, #24]
	  osDelay(1);
 8000ef4:	e7da      	b.n	8000eac <StartReadCAN+0x38>
 8000ef6:	bf00      	nop
 8000ef8:	2000034c 	.word	0x2000034c
 8000efc:	20000480 	.word	0x20000480
 8000f00:	20000438 	.word	0x20000438
 8000f04:	2000041c 	.word	0x2000041c

08000f08 <StartSDwrite>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDwrite */
void StartSDwrite(void const * argument)
{
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af06      	add	r7, sp, #24
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDwrite */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f004 f805 	bl	8004f20 <osDelay>

    // creating message with CAN data
    sprintf(SD_message, "ID: %#.3x, Data: %#.4x, Timestamp: %d, Length: %d", CAN_DATA.ID, CAN_DATA.DATA, CAN_DATA.TIME, CAN_DATA.LENGTH);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <StartSDwrite+0x4c>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <StartSDwrite+0x4c>)
 8000f1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f22:	490c      	ldr	r1, [pc, #48]	; (8000f54 <StartSDwrite+0x4c>)
 8000f24:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8000f28:	4c0a      	ldr	r4, [pc, #40]	; (8000f54 <StartSDwrite+0x4c>)
 8000f2a:	7e24      	ldrb	r4, [r4, #24]
 8000f2c:	9404      	str	r4, [sp, #16]
 8000f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f32:	e9cd 2300 	strd	r2, r3, [sp]
 8000f36:	462a      	mov	r2, r5
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <StartSDwrite+0x50>)
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <StartSDwrite+0x54>)
 8000f3c:	f006 fd16 	bl	800796c <siprintf>

    // writing CAN line to SD card
    fresult = f_puts(SD_message, &fil);
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <StartSDwrite+0x58>)
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <StartSDwrite+0x54>)
 8000f44:	f003 fe93 	bl	8004c6e <f_puts>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <StartSDwrite+0x5c>)
 8000f4e:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8000f50:	e7de      	b.n	8000f10 <StartSDwrite+0x8>
 8000f52:	bf00      	nop
 8000f54:	20000480 	.word	0x20000480
 8000f58:	08008aec 	.word	0x08008aec
 8000f5c:	20000440 	.word	0x20000440
 8000f60:	200014d4 	.word	0x200014d4
 8000f64:	20002500 	.word	0x20002500

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_MspInit+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_MspInit+0x68>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_MspInit+0x68>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_MspInit+0x68>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <HAL_MspInit+0x68>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x68>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f000 fdce 	bl	8001b52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x6c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_MspInit+0x6c>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1c      	ldr	r2, [pc, #112]	; (8001070 <HAL_CAN_MspInit+0x8c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d131      	bne.n	8001068 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_CAN_MspInit+0x90>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <HAL_CAN_MspInit+0x90>)
 800100a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100e:	61d3      	str	r3, [r2, #28]
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_CAN_MspInit+0x90>)
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_CAN_MspInit+0x90>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_CAN_MspInit+0x90>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_CAN_MspInit+0x90>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <HAL_CAN_MspInit+0x94>)
 800104a:	f000 fdab 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_CAN_MspInit+0x94>)
 8001064:	f000 fd9e 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40006400 	.word	0x40006400
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_SPI_MspInit+0x88>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d12f      	bne.n	80010fc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_SPI_MspInit+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010cc:	23a0      	movs	r3, #160	; 0xa0
 80010ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_SPI_MspInit+0x90>)
 80010e0:	f000 fd60 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_SPI_MspInit+0x90>)
 80010f8:	f000 fd54 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013000 	.word	0x40013000
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x88>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d12f      	bne.n	8001190 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_UART_MspInit+0x8c>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_UART_MspInit+0x8c>)
 8001136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113a:	61d3      	str	r3, [r2, #28]
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_UART_MspInit+0x8c>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_MspInit+0x8c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_UART_MspInit+0x8c>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0x8c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001160:	2304      	movs	r3, #4
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_UART_MspInit+0x90>)
 8001174:	f000 fd16 	bl	8001ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001178:	2308      	movs	r3, #8
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_UART_MspInit+0x90>)
 800118c:	f000 fd0a 	bl	8001ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f93b 	bl	800144c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011d6:	f005 fbe9 	bl	80069ac <xTaskGetSchedulerState>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d001      	beq.n	80011e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011e0:	f005 ff9a 	bl	8007118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return 1;
 80011ec:	2301      	movs	r3, #1
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <_kill>:

int _kill(int pid, int sig)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001200:	f006 fccc 	bl	8007b9c <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	2216      	movs	r2, #22
 8001208:	601a      	str	r2, [r3, #0]
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_exit>:

void _exit (int status)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800121e:	f04f 31ff 	mov.w	r1, #4294967295
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffe7 	bl	80011f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001228:	e7fe      	b.n	8001228 <_exit+0x12>

0800122a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e00a      	b.n	8001252 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123c:	f3af 8000 	nop.w
 8001240:	4601      	mov	r1, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	60ba      	str	r2, [r7, #8]
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf0      	blt.n	800123c <_read+0x12>
  }

  return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e009      	b.n	800128a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	60ba      	str	r2, [r7, #8]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	dbf1      	blt.n	8001276 <_write+0x12>
  }
  return len;
 8001292:	687b      	ldr	r3, [r7, #4]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_close>:

int _close(int file)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <_isatty>:

int _isatty(int file)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f006 fc36 	bl	8007b9c <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20005000 	.word	0x20005000
 800135c:	00000400 	.word	0x00000400
 8001360:	20002504 	.word	0x20002504
 8001364:	20003418 	.word	0x20003418

08001368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001374:	f7ff fff8 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137a:	490c      	ldr	r1, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001390:	4c09      	ldr	r4, [pc, #36]	; (80013b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f006 fc03 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a2:	f7ff fbd3 	bl	8000b4c <main>
  bx lr
 80013a6:	4770      	bx	lr
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013b0:	08008c38 	.word	0x08008c38
  ldr r2, =_sbss
 80013b4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80013b8:	20003418 	.word	0x20003418

080013bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC1_2_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_Init+0x28>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_Init+0x28>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f000 fbb3 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d6:	200f      	movs	r0, #15
 80013d8:	f000 f808 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013dc:	f7ff fdca 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40022000 	.word	0x40022000

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fbbd 	bl	8001b8a <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 fb93 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000004 	.word	0x20000004
 8001444:	2000000c 	.word	0x2000000c
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x1c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x20>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_IncTick+0x20>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	2000000c 	.word	0x2000000c
 800146c:	20002508 	.word	0x20002508

08001470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_GetTick+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20002508 	.word	0x20002508

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fff0 	bl	8001470 <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffe0 	bl	8001470 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c

080014cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0ed      	b.n	80016ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fd7a 	bl	8000fe4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ffb6 	bl	8001470 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ffb2 	bl	8001470 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0c5      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0e5      	beq.n	8001508 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0202 	bic.w	r2, r2, #2
 800154a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154c:	f7ff ff90 	bl	8001470 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001552:	e012      	b.n	800157a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001554:	f7ff ff8c 	bl	8001470 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e09f      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e1b      	ldrb	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7e5b      	ldrb	r3, [r3, #25]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e007      	b.n	80015dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e9b      	ldrb	r3, [r3, #26]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0220 	bic.w	r2, r2, #32
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7edb      	ldrb	r3, [r3, #27]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0210 	bic.w	r2, r2, #16
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0210 	orr.w	r2, r2, #16
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f1b      	ldrb	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0204 	orr.w	r2, r2, #4
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	ea42 0103 	orr.w	r1, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d12e      	bne.n	8001734 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ee:	f7ff febf 	bl	8001470 <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016f4:	e012      	b.n	800171c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f6:	f7ff febb 	bl	8001470 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b0a      	cmp	r3, #10
 8001702:	d90b      	bls.n	800171c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2205      	movs	r2, #5
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e012      	b.n	8001742 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1e5      	bne.n	80016f6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e006      	b.n	8001742 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800174a:	b480      	push	{r7}
 800174c:	b087      	sub	sp, #28
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d003      	beq.n	800176e <HAL_CAN_GetRxMessage+0x24>
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b02      	cmp	r3, #2
 800176a:	f040 8103 	bne.w	8001974 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10e      	bne.n	8001792 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0f7      	b.n	8001982 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0e8      	b.n	8001982 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	331b      	adds	r3, #27
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0204 	and.w	r2, r3, #4
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	331b      	adds	r3, #27
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0d5b      	lsrs	r3, r3, #21
 80017de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e00b      	b.n	8001800 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	331b      	adds	r3, #27
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0202 	and.w	r2, r3, #2
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	331b      	adds	r3, #27
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2208      	movs	r2, #8
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	e00b      	b.n	800184e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	331b      	adds	r3, #27
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 020f 	and.w	r2, r3, #15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b2da      	uxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	331b      	adds	r3, #27
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0c1b      	lsrs	r3, r3, #16
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0a1a      	lsrs	r2, r3, #8
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0c1a      	lsrs	r2, r3, #16
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	3302      	adds	r3, #2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0e1a      	lsrs	r2, r3, #24
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	3303      	adds	r3, #3
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3304      	adds	r3, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0a1a      	lsrs	r2, r3, #8
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3305      	adds	r3, #5
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0c1a      	lsrs	r2, r3, #16
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3306      	adds	r3, #6
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0e1a      	lsrs	r2, r3, #24
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3307      	adds	r3, #7
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	e007      	b.n	8001970 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	e006      	b.n	8001982 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d002      	beq.n	80019ae <HAL_CAN_GetRxFifoFillLevel+0x22>
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d10f      	bne.n	80019ce <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e005      	b.n	80019ce <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff90 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff49 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff5e 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff90 	bl	8001a94 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff5f 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffb0 	bl	8001af8 <SysTick_Config>
 8001b98:	4603      	mov	r3, r0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e169      	b.n	8001e8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	f040 8158 	bne.w	8001e86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a9a      	ldr	r2, [pc, #616]	; (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d05e      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001be0:	4a98      	ldr	r2, [pc, #608]	; (8001e44 <HAL_GPIO_Init+0x2a0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d875      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001be6:	4a98      	ldr	r2, [pc, #608]	; (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d058      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bec:	4a96      	ldr	r2, [pc, #600]	; (8001e48 <HAL_GPIO_Init+0x2a4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d86f      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a96      	ldr	r2, [pc, #600]	; (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d052      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001bf8:	4a94      	ldr	r2, [pc, #592]	; (8001e4c <HAL_GPIO_Init+0x2a8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d869      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a94      	ldr	r2, [pc, #592]	; (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04c      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c04:	4a92      	ldr	r2, [pc, #584]	; (8001e50 <HAL_GPIO_Init+0x2ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d863      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c0a:	4a92      	ldr	r2, [pc, #584]	; (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d046      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
 8001c10:	4a90      	ldr	r2, [pc, #576]	; (8001e54 <HAL_GPIO_Init+0x2b0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d85d      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d82a      	bhi.n	8001c70 <HAL_GPIO_Init+0xcc>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d859      	bhi.n	8001cd2 <HAL_GPIO_Init+0x12e>
 8001c1e:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <HAL_GPIO_Init+0x80>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c79 	.word	0x08001c79
 8001c2c:	08001c8b 	.word	0x08001c8b
 8001c30:	08001ccd 	.word	0x08001ccd
 8001c34:	08001cd3 	.word	0x08001cd3
 8001c38:	08001cd3 	.word	0x08001cd3
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cd3 	.word	0x08001cd3
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001cd3 	.word	0x08001cd3
 8001c4c:	08001cd3 	.word	0x08001cd3
 8001c50:	08001cd3 	.word	0x08001cd3
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001cd3 	.word	0x08001cd3
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001cd3 	.word	0x08001cd3
 8001c64:	08001cd3 	.word	0x08001cd3
 8001c68:	08001c81 	.word	0x08001c81
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	4a79      	ldr	r2, [pc, #484]	; (8001e58 <HAL_GPIO_Init+0x2b4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c76:	e02c      	b.n	8001cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e029      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	3304      	adds	r3, #4
 8001c86:	623b      	str	r3, [r7, #32]
          break;
 8001c88:	e024      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e01f      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e01a      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	623b      	str	r3, [r7, #32]
          break;
 8001caa:	e013      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	611a      	str	r2, [r3, #16]
          break;
 8001cbe:	e009      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	615a      	str	r2, [r3, #20]
          break;
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x130>
          break;
 8001cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d801      	bhi.n	8001cde <HAL_GPIO_Init+0x13a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_Init+0x13e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d802      	bhi.n	8001cf0 <HAL_GPIO_Init+0x14c>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x152>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	6a39      	ldr	r1, [r7, #32]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80b1 	beq.w	8001e86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a4c      	ldr	r2, [pc, #304]	; (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x2b8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a40      	ldr	r2, [pc, #256]	; (8001e64 <HAL_GPIO_Init+0x2c0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1ec>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a3f      	ldr	r2, [pc, #252]	; (8001e68 <HAL_GPIO_Init+0x2c4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1e8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a3e      	ldr	r2, [pc, #248]	; (8001e6c <HAL_GPIO_Init+0x2c8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1e4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3d      	ldr	r2, [pc, #244]	; (8001e70 <HAL_GPIO_Init+0x2cc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1e0>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e006      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d84:	2304      	movs	r3, #4
 8001d86:	e004      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_GPIO_Init+0x1ee>
 8001d90:	2300      	movs	r3, #0
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001da2:	492f      	ldr	r1, [pc, #188]	; (8001e60 <HAL_GPIO_Init+0x2bc>)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	492c      	ldr	r1, [pc, #176]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4928      	ldr	r1, [pc, #160]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4922      	ldr	r1, [pc, #136]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60cb      	str	r3, [r1, #12]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	491e      	ldr	r1, [pc, #120]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	4918      	ldr	r1, [pc, #96]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1a:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4914      	ldr	r1, [pc, #80]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d021      	beq.n	8001e78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e021      	b.n	8001e86 <HAL_GPIO_Init+0x2e2>
 8001e42:	bf00      	nop
 8001e44:	10320000 	.word	0x10320000
 8001e48:	10310000 	.word	0x10310000
 8001e4c:	10220000 	.word	0x10220000
 8001e50:	10210000 	.word	0x10210000
 8001e54:	10120000 	.word	0x10120000
 8001e58:	10110000 	.word	0x10110000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	40011000 	.word	0x40011000
 8001e70:	40011400 	.word	0x40011400
 8001e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4909      	ldr	r1, [pc, #36]	; (8001ea8 <HAL_GPIO_Init+0x304>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f ae8e 	bne.w	8001bb8 <HAL_GPIO_Init+0x14>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	372c      	adds	r7, #44	; 0x2c
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e272      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b92      	ldr	r3, [pc, #584]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f08:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
 8001f14:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x12c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e24c      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x76>
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x98>
 8001f5a:	4b7b      	ldr	r3, [pc, #492]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a77      	ldr	r2, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xbc>
 8001f7e:	4b72      	ldr	r3, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a71      	ldr	r2, [pc, #452]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd4>
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a67      	ldr	r2, [pc, #412]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa5a 	bl	8001470 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fa56 	bl	8001470 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e200      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe4>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fa46 	bl	8001470 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fa42 	bl	8001470 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ec      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x10c>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d063      	beq.n	80020de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002022:	4b49      	ldr	r3, [pc, #292]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1c0      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4939      	ldr	r1, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x270>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff f9fb 	bl	8001470 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff f9f7 	bl	8001470 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1a1      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4927      	ldr	r1, [pc, #156]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x270>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f9da 	bl	8001470 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f9d6 	bl	8001470 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e180      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03a      	beq.n	8002160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f9ba 	bl	8001470 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff f9b6 	bl	8001470 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e160      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCC_OscConfig+0x26c>)
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 face 	bl	80026c0 <RCC_Delay>
 8002124:	e01c      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212c:	f7ff f9a0 	bl	8001470 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00f      	b.n	8002154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff f99c 	bl	8001470 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d908      	bls.n	8002154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e146      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	42420000 	.word	0x42420000
 8002150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1e9      	bne.n	8002134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80a6 	beq.w	80022ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	4a87      	ldr	r2, [pc, #540]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	61d3      	str	r3, [r2, #28]
 800218a:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_RCC_OscConfig+0x4c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d118      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <HAL_RCC_OscConfig+0x4c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7e      	ldr	r2, [pc, #504]	; (80023a4 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b2:	f7ff f95d 	bl	8001470 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7ff f959 	bl	8001470 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e103      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021cc:	4b75      	ldr	r3, [pc, #468]	; (80023a4 <HAL_RCC_OscConfig+0x4c8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x312>
 80021e0:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e02d      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x334>
 80021f6:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a69      	ldr	r2, [pc, #420]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4a66      	ldr	r2, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	6213      	str	r3, [r2, #32]
 800220e:	e01c      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d10c      	bne.n	8002232 <HAL_RCC_OscConfig+0x356>
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a60      	ldr	r2, [pc, #384]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4a5d      	ldr	r2, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6213      	str	r3, [r2, #32]
 8002230:	e00b      	b.n	800224a <HAL_RCC_OscConfig+0x36e>
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d015      	beq.n	800227e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff f90d 	bl	8001470 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff f909 	bl	8001470 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0b1      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ee      	beq.n	800225a <HAL_RCC_OscConfig+0x37e>
 800227c:	e014      	b.n	80022a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7ff f8f7 	bl	8001470 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f8f3 	bl	8001470 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229c:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ee      	bne.n	8002286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d105      	bne.n	80022ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8087 	beq.w	80023d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d061      	beq.n	8002394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d146      	bne.n	8002366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f8c7 	bl	8001470 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff f8c3 	bl	8001470 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e06d      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4921      	ldr	r1, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a19      	ldr	r1, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	430b      	orrs	r3, r1
 8002332:	491b      	ldr	r1, [pc, #108]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f897 	bl	8001470 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff f893 	bl	8001470 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e03d      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x46a>
 8002364:	e035      	b.n	80023d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff f880 	bl	8001470 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7ff f87c 	bl	8001470 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e026      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
 8002392:	e01e      	b.n	80023d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e019      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40007000 	.word	0x40007000
 80023a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_OscConfig+0x500>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d0      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d910      	bls.n	8002424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4965      	ldr	r1, [pc, #404]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b8      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a52      	ldr	r2, [pc, #328]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800245e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	494d      	ldr	r1, [pc, #308]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d040      	beq.n	8002500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e073      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06b      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4936      	ldr	r1, [pc, #216]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe ffce 	bl	8001470 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe ffca 	bl	8001470 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e053      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d210      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4922      	ldr	r1, [pc, #136]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e032      	b.n	8002596 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4916      	ldr	r1, [pc, #88]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	490e      	ldr	r1, [pc, #56]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800256e:	f000 f821 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002572:	4602      	mov	r2, r0
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	490a      	ldr	r1, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	5ccb      	ldrb	r3, [r1, r3]
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1cc>)
 8002588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1d0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe ff2c 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08008b28 	.word	0x08008b28
 80025ac:	20000004 	.word	0x20000004
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_GetSysClockFreq+0x94>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x30>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x36>
 80025e2:	e027      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_GetSysClockFreq+0x98>)
 80025e6:	613b      	str	r3, [r7, #16]
      break;
 80025e8:	e027      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f4:	5cd3      	ldrb	r3, [r2, r3]
 80025f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_GetSysClockFreq+0x94>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0c5b      	lsrs	r3, r3, #17
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_RCC_GetSysClockFreq+0xa0>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_RCC_GetSysClockFreq+0x98>)
 8002616:	fb03 f202 	mul.w	r2, r3, r2
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e004      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	613b      	str	r3, [r7, #16]
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetSysClockFreq+0x98>)
 8002636:	613b      	str	r3, [r7, #16]
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	693b      	ldr	r3, [r7, #16]
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	007a1200 	.word	0x007a1200
 8002650:	08008b40 	.word	0x08008b40
 8002654:	08008b50 	.word	0x08008b50
 8002658:	003d0900 	.word	0x003d0900

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_RCC_GetHCLKFreq+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	20000004 	.word	0x20000004

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002674:	f7ff fff2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	08008b38 	.word	0x08008b38

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800269c:	f7ff ffde 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0adb      	lsrs	r3, r3, #11
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08008b38 	.word	0x08008b38

080026c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <RCC_Delay+0x34>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <RCC_Delay+0x38>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026dc:	bf00      	nop
  }
  while (Delay --);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	60fa      	str	r2, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <RCC_Delay+0x1c>
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	20000004 	.word	0x20000004
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e076      	b.n	80027fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271e:	d009      	beq.n	8002734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
 8002726:	e005      	b.n	8002734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fc94 	bl	800107c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	ea42 0103 	orr.w	r1, r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	0c1a      	lsrs	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f002 0204 	and.w	r2, r2, #4
 80027da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_SPI_Transmit+0x22>
 8002822:	2302      	movs	r3, #2
 8002824:	e12d      	b.n	8002a82 <HAL_SPI_Transmit+0x27e>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282e:	f7fe fe1f 	bl	8001470 <HAL_GetTick>
 8002832:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002844:	2302      	movs	r3, #2
 8002846:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002848:	e116      	b.n	8002a78 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_SPI_Transmit+0x52>
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800285a:	e10d      	b.n	8002a78 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2203      	movs	r2, #3
 8002860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a2:	d10f      	bne.n	80028c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d007      	beq.n	80028e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ea:	d14f      	bne.n	800298c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_SPI_Transmit+0xf6>
 80028f4:	8afb      	ldrh	r3, [r7, #22]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d142      	bne.n	8002980 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	1c9a      	adds	r2, r3, #2
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800291e:	e02f      	b.n	8002980 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d112      	bne.n	8002954 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	1c9a      	adds	r2, r3, #2
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	86da      	strh	r2, [r3, #54]	; 0x36
 8002952:	e015      	b.n	8002980 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002954:	f7fe fd8c 	bl	8001470 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d803      	bhi.n	800296c <HAL_SPI_Transmit+0x168>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d102      	bne.n	8002972 <HAL_SPI_Transmit+0x16e>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800297e:	e07b      	b.n	8002a78 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ca      	bne.n	8002920 <HAL_SPI_Transmit+0x11c>
 800298a:	e050      	b.n	8002a2e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_Transmit+0x196>
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d144      	bne.n	8002a24 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	330c      	adds	r3, #12
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029c0:	e030      	b.n	8002a24 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d113      	bne.n	80029f8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80029f6:	e015      	b.n	8002a24 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029f8:	f7fe fd3a 	bl	8001470 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d803      	bhi.n	8002a10 <HAL_SPI_Transmit+0x20c>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <HAL_SPI_Transmit+0x212>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002a22:	e029      	b.n	8002a78 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1c9      	bne.n	80029c2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fa62 	bl	8002efc <SPI_EndRxTxTransaction>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e003      	b.n	8002a78 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b08c      	sub	sp, #48	; 0x30
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_SPI_TransmitReceive+0x26>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e198      	b.n	8002de2 <HAL_SPI_TransmitReceive+0x358>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab8:	f7fe fcda 	bl	8001470 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00f      	beq.n	8002afa <HAL_SPI_TransmitReceive+0x70>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae0:	d107      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x68>
 8002aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d003      	beq.n	8002afa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002af8:	e16d      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x82>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_TransmitReceive+0x82>
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b12:	e160      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d003      	beq.n	8002b28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2205      	movs	r2, #5
 8002b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d007      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b84:	d17c      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x10a>
 8002b8e:	8b7b      	ldrh	r3, [r7, #26]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d16a      	bne.n	8002c6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb8:	e057      	b.n	8002c6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d11b      	bne.n	8002c00 <HAL_SPI_TransmitReceive+0x176>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_SPI_TransmitReceive+0x176>
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d113      	bne.n	8002c00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d119      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x1b8>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d014      	beq.n	8002c42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	b292      	uxth	r2, r2
 8002c24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c42:	f7fe fc15 	bl	8001470 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d80b      	bhi.n	8002c6a <HAL_SPI_TransmitReceive+0x1e0>
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d007      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c68:	e0b5      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1a2      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x130>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d19d      	bne.n	8002bba <HAL_SPI_TransmitReceive+0x130>
 8002c7e:	e080      	b.n	8002d82 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x204>
 8002c88:	8b7b      	ldrh	r3, [r7, #26]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d16f      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb4:	e05b      	b.n	8002d6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d11c      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x274>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d017      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x274>
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d114      	bne.n	8002cfe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d119      	bne.n	8002d40 <HAL_SPI_TransmitReceive+0x2b6>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d014      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d40:	f7fe fb96 	bl	8001470 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d803      	bhi.n	8002d58 <HAL_SPI_TransmitReceive+0x2ce>
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x2d4>
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002d6c:	e033      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d19e      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x22c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d199      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f8b8 	bl	8002efc <SPI_EndRxTxTransaction>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d9e:	e01a      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dcc:	e003      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3730      	adds	r7, #48	; 0x30
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dfc:	f7fe fb38 	bl	8001470 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e0c:	f7fe fb30 	bl	8001470 <HAL_GetTick>
 8002e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	0d1b      	lsrs	r3, r3, #20
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	fb02 f303 	mul.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e22:	e054      	b.n	8002ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d050      	beq.n	8002ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e2c:	f7fe fb20 	bl	8001470 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d902      	bls.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13d      	bne.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e5a:	d111      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d004      	beq.n	8002e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6e:	d107      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e88:	d10f      	bne.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e017      	b.n	8002eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d19b      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000004 	.word	0x20000004

08002efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff6a 	bl	8002dec <SPI_WaitFlagStateUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e000      	b.n	8002f30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e042      	b.n	8002fd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe f8d6 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f91d 	bl	80031bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d16d      	bne.n	80030d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2c>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e066      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	; 0x21
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003016:	f7fe fa2b 	bl	8001470 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800304c:	e02a      	b.n	80030a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f840 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e036      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cf      	bne.n	800304e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f810 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b090      	sub	sp, #64	; 0x40
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	e050      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d04c      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
 80030fe:	f7fe f9b7 	bl	8001470 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800310a:	429a      	cmp	r2, r3
 800310c:	d241      	bcs.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312e:	637a      	str	r2, [r7, #52]	; 0x34
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	613b      	str	r3, [r7, #16]
   return(result);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003162:	623a      	str	r2, [r7, #32]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d09f      	beq.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3740      	adds	r7, #64	; 0x40
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f6:	f023 030c 	bic.w	r3, r3, #12
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <UART_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7ff fa38 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	e002      	b.n	8003232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7ff fa20 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	0119      	lsls	r1, r3, #4
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <UART_SetConfig+0x118>)
 800326a:	fba3 0302 	umull	r0, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2064      	movs	r0, #100	; 0x64
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	4419      	add	r1, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	440a      	add	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40013800 	.word	0x40013800
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <MX_FATFS_Init+0x18>)
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_FATFS_Init+0x1c>)
 80032e0:	f001 fd48 	bl	8004d74 <FATFS_LinkDriver>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <MX_FATFS_Init+0x20>)
 80032ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20002510 	.word	0x20002510
 80032f4:	20000010 	.word	0x20000010
 80032f8:	2000250c 	.word	0x2000250c

080032fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f8db 	bl	80004c4 <SD_disk_initialize>
 800330e:	4603      	mov	r3, r0
 8003310:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f9b2 	bl	8000690 <SD_disk_status>
 800332c:	4603      	mov	r3, r0
 800332e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003348:	7bf8      	ldrb	r0, [r7, #15]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	f7fd f9b2 	bl	80006b8 <SD_disk_read>
 8003354:	4603      	mov	r3, r0
 8003356:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003370:	7bf8      	ldrb	r0, [r7, #15]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	f7fd fa08 	bl	800078c <SD_disk_write>
 800337c:	4603      	mov	r3, r0
 800337e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	603a      	str	r2, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
 8003394:	460b      	mov	r3, r1
 8003396:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	79b9      	ldrb	r1, [r7, #6]
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fa78 	bl	8000894 <SD_disk_ioctl>
 80033a4:	4603      	mov	r3, r0
 80033a6:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <disk_status+0x30>)
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	79fa      	ldrb	r2, [r7, #7]
 80033c8:	4905      	ldr	r1, [pc, #20]	; (80033e0 <disk_status+0x30>)
 80033ca:	440a      	add	r2, r1
 80033cc:	7a12      	ldrb	r2, [r2, #8]
 80033ce:	4610      	mov	r0, r2
 80033d0:	4798      	blx	r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20002534 	.word	0x20002534

080033e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <disk_initialize+0x48>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d111      	bne.n	8003420 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	; (800342c <disk_initialize+0x48>)
 8003400:	2101      	movs	r1, #1
 8003402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <disk_initialize+0x48>)
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	79fa      	ldrb	r2, [r7, #7]
 8003412:	4906      	ldr	r1, [pc, #24]	; (800342c <disk_initialize+0x48>)
 8003414:	440a      	add	r2, r1
 8003416:	7a12      	ldrb	r2, [r2, #8]
 8003418:	4610      	mov	r0, r2
 800341a:	4798      	blx	r3
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20002534 	.word	0x20002534

08003430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <disk_read+0x3c>)
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	689c      	ldr	r4, [r3, #8]
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4a07      	ldr	r2, [pc, #28]	; (800346c <disk_read+0x3c>)
 8003450:	4413      	add	r3, r2
 8003452:	7a18      	ldrb	r0, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	47a0      	blx	r4
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003460:	7dfb      	ldrb	r3, [r7, #23]
}
 8003462:	4618      	mov	r0, r3
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	20002534 	.word	0x20002534

08003470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <disk_write+0x3c>)
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68dc      	ldr	r4, [r3, #12]
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <disk_write+0x3c>)
 8003490:	4413      	add	r3, r2
 8003492:	7a18      	ldrb	r0, [r3, #8]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	47a0      	blx	r4
 800349c:	4603      	mov	r3, r0
 800349e:	75fb      	strb	r3, [r7, #23]
  return res;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20002534 	.word	0x20002534

080034b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	603a      	str	r2, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	460b      	mov	r3, r1
 80034be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <disk_ioctl+0x38>)
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	79fa      	ldrb	r2, [r7, #7]
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <disk_ioctl+0x38>)
 80034d0:	440a      	add	r2, r1
 80034d2:	7a10      	ldrb	r0, [r2, #8]
 80034d4:	79b9      	ldrb	r1, [r7, #6]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20002534 	.word	0x20002534

080034ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003500:	e007      	b.n	8003512 <mem_cpy+0x26>
		*d++ = *s++;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	1c53      	adds	r3, r2, #1
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1c59      	adds	r1, r3, #1
 800350c:	6179      	str	r1, [r7, #20]
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f2      	bne.n	8003502 <mem_cpy+0x16>
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fc56 	bl	8004dea <ff_req_grant>
 800353e:	4603      	mov	r3, r0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <unlock_fs+0x38>
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d00f      	beq.n	8003580 <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	2b0b      	cmp	r3, #11
 8003564:	d00c      	beq.n	8003580 <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	2b09      	cmp	r3, #9
 800356a:	d009      	beq.n	8003580 <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d006      	beq.n	8003580 <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fc4a 	bl	8004e14 <ff_rel_grant>
	}
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e016      	b.n	80035c4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003596:	4910      	ldr	r1, [pc, #64]	; (80035d8 <clear_lock+0x50>)
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d108      	bne.n	80035be <clear_lock+0x36>
 80035ac:	490a      	ldr	r1, [pc, #40]	; (80035d8 <clear_lock+0x50>)
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d9e5      	bls.n	8003596 <clear_lock+0xe>
	}
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	2000251c 	.word	0x2000251c

080035dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ee:	791b      	ldrb	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d040      	beq.n	8003676 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003604:	7858      	ldrb	r0, [r3, #1]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	2301      	movs	r3, #1
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	f7ff ff30 	bl	8003470 <disk_write>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <sync_window+0x40>
			res = FR_DISK_ERR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e02c      	b.n	8003676 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003622:	2200      	movs	r2, #0
 8003624:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	429a      	cmp	r2, r3
 800363c:	d21b      	bcs.n	8003676 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003644:	78db      	ldrb	r3, [r3, #3]
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e012      	b.n	8003670 <sync_window+0x94>
					wsect += fs->fsize;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4413      	add	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365e:	7858      	ldrb	r0, [r3, #1]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	2301      	movs	r3, #1
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	f7ff ff03 	bl	8003470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3b01      	subs	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d8e9      	bhi.n	800364a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d01e      	beq.n	80036da <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff9d 	bl	80035dc <sync_window>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d116      	bne.n	80036da <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b2:	7858      	ldrb	r0, [r3, #1]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	2301      	movs	r3, #1
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	f7ff feb9 	bl	8003430 <disk_read>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80036c4:	f04f 33ff 	mov.w	r3, #4294967295
 80036c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	461a      	mov	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	3b02      	subs	r3, #2
 80036f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	3b02      	subs	r3, #2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d301      	bcc.n	8003708 <clust2sect+0x24>
 8003704:	2300      	movs	r3, #0
 8003706:	e00c      	b.n	8003722 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	461a      	mov	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	fb03 f202 	mul.w	r2, r3, r2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	4413      	add	r3, r2
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d906      	bls.n	800374a <get_fat+0x1e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <get_fat+0x24>
		val = 1;	/* Internal error */
 800374a:	2301      	movs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e0e4      	b.n	800391a <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b03      	cmp	r3, #3
 8003760:	f000 8098 	beq.w	8003894 <get_fat+0x168>
 8003764:	2b03      	cmp	r3, #3
 8003766:	f300 80ce 	bgt.w	8003906 <get_fat+0x1da>
 800376a:	2b01      	cmp	r3, #1
 800376c:	d002      	beq.n	8003774 <get_fat+0x48>
 800376e:	2b02      	cmp	r3, #2
 8003770:	d05f      	beq.n	8003832 <get_fat+0x106>
 8003772:	e0c8      	b.n	8003906 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	895b      	ldrh	r3, [r3, #10]
 8003792:	4619      	mov	r1, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	fbb3 f3f1 	udiv	r3, r3, r1
 800379a:	4413      	add	r3, r2
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ff6e 	bl	8003680 <move_window>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80b0 	bne.w	800390c <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	60fa      	str	r2, [r7, #12]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037b8:	8952      	ldrh	r2, [r2, #10]
 80037ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80037be:	fb01 f202 	mul.w	r2, r1, r2
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d8:	895b      	ldrh	r3, [r3, #10]
 80037da:	4619      	mov	r1, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e2:	4413      	add	r3, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff4a 	bl	8003680 <move_window>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 808e 	bne.w	8003910 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fa:	895b      	ldrh	r3, [r3, #10]
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	fbb3 f1f2 	udiv	r1, r3, r2
 8003804:	fb01 f202 	mul.w	r2, r1, r2
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <get_fat+0xfc>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	e002      	b.n	800382e <get_fat+0x102>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	617b      	str	r3, [r7, #20]
			break;
 8003830:	e073      	b.n	800391a <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003840:	895b      	ldrh	r3, [r3, #10]
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	4619      	mov	r1, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	fbb3 f3f1 	udiv	r3, r3, r1
 800384e:	4413      	add	r3, r2
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff14 	bl	8003680 <move_window>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d15a      	bne.n	8003914 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003868:	8952      	ldrh	r2, [r2, #10]
 800386a:	fbb3 f1f2 	udiv	r1, r3, r2
 800386e:	fb01 f202 	mul.w	r2, r1, r2
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	b21a      	sxth	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b21b      	sxth	r3, r3
 800388a:	4313      	orrs	r3, r2
 800388c:	b21b      	sxth	r3, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	617b      	str	r3, [r7, #20]
			break;
 8003892:	e042      	b.n	800391a <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800389a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a2:	895b      	ldrh	r3, [r3, #10]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4619      	mov	r1, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b0:	4413      	add	r3, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fee3 	bl	8003680 <move_window>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d12b      	bne.n	8003918 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038ca:	8952      	ldrh	r2, [r2, #10]
 80038cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038d0:	fb01 f202 	mul.w	r2, r1, r2
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3303      	adds	r3, #3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	061a      	lsls	r2, r3, #24
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3302      	adds	r3, #2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	4313      	orrs	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	3201      	adds	r2, #1
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	0212      	lsls	r2, r2, #8
 80038f6:	4313      	orrs	r3, r2
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003902:	617b      	str	r3, [r7, #20]
			break;
 8003904:	e009      	b.n	800391a <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e006      	b.n	800391a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800390c:	bf00      	nop
 800390e:	e004      	b.n	800391a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003910:	bf00      	nop
 8003912:	e002      	b.n	800391a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003918:	bf00      	nop
		}
	}

	return val;
 800391a:	697b      	ldr	r3, [r7, #20]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d906      	bls.n	8003944 <put_fat+0x20>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <put_fat+0x26>
		res = FR_INT_ERR;
 8003944:	2302      	movs	r3, #2
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e13a      	b.n	8003bc0 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b03      	cmp	r3, #3
 8003954:	f000 80d0 	beq.w	8003af8 <put_fat+0x1d4>
 8003958:	2b03      	cmp	r3, #3
 800395a:	f300 8127 	bgt.w	8003bac <put_fat+0x288>
 800395e:	2b01      	cmp	r3, #1
 8003960:	d003      	beq.n	800396a <put_fat+0x46>
 8003962:	2b02      	cmp	r3, #2
 8003964:	f000 808f 	beq.w	8003a86 <put_fat+0x162>
 8003968:	e120      	b.n	8003bac <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4413      	add	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003986:	895b      	ldrh	r3, [r3, #10]
 8003988:	4619      	mov	r1, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003990:	4413      	add	r3, r2
 8003992:	4619      	mov	r1, r3
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f7ff fe73 	bl	8003680 <move_window>
 800399a:	4603      	mov	r3, r0
 800399c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800399e:	7ffb      	ldrb	r3, [r7, #31]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 8106 	bne.w	8003bb2 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	617a      	str	r2, [r7, #20]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80039b2:	8952      	ldrh	r2, [r2, #10]
 80039b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039b8:	fb01 f202 	mul.w	r2, r1, r2
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <put_fat+0xc6>
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e001      	b.n	80039ee <put_fat+0xca>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f8:	2201      	movs	r2, #1
 80039fa:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	895b      	ldrh	r3, [r3, #10]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a14:	4413      	add	r3, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff fe31 	bl	8003680 <move_window>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a22:	7ffb      	ldrb	r3, [r7, #31]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 80c6 	bne.w	8003bb6 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a30:	895b      	ldrh	r3, [r3, #10]
 8003a32:	461a      	mov	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a3a:	fb01 f202 	mul.w	r2, r1, r2
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <put_fat+0x134>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e00e      	b.n	8003a76 <put_fat+0x152>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	f023 030f 	bic.w	r3, r3, #15
 8003a62:	b25a      	sxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b25b      	sxtb	r3, r3
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	b25b      	sxtb	r3, r3
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a80:	2201      	movs	r2, #1
 8003a82:	711a      	strb	r2, [r3, #4]
			break;
 8003a84:	e09c      	b.n	8003bc0 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a94:	895b      	ldrh	r3, [r3, #10]
 8003a96:	085b      	lsrs	r3, r3, #1
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff fdea 	bl	8003680 <move_window>
 8003aac:	4603      	mov	r3, r0
 8003aae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 8081 	bne.w	8003bba <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ac2:	8952      	ldrh	r2, [r2, #10]
 8003ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ac8:	fb01 f202 	mul.w	r2, r1, r2
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af2:	2201      	movs	r2, #1
 8003af4:	711a      	strb	r2, [r3, #4]
			break;
 8003af6:	e063      	b.n	8003bc0 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b06:	895b      	ldrh	r3, [r3, #10]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b14:	4413      	add	r3, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fdb1 	bl	8003680 <move_window>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d14a      	bne.n	8003bbe <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b32:	8952      	ldrh	r2, [r2, #10]
 8003b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b38:	fb01 f202 	mul.w	r2, r1, r2
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	3303      	adds	r3, #3
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	061a      	lsls	r2, r3, #24
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	3302      	adds	r3, #2
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	4313      	orrs	r3, r2
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	3201      	adds	r2, #1
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	0212      	lsls	r2, r2, #8
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0c1a      	lsrs	r2, r3, #16
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	3302      	adds	r3, #2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0e1a      	lsrs	r2, r3, #24
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3303      	adds	r3, #3
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	711a      	strb	r2, [r3, #4]
			break;
 8003baa:	e009      	b.n	8003bc0 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003bac:	2302      	movs	r3, #2
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e006      	b.n	8003bc0 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <put_fat+0x29c>
			if (res != FR_OK) break;
 8003bbe:	bf00      	nop
		}
	}

	return res;
 8003bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d111      	bne.n	8003bfe <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d006      	beq.n	8003bf8 <create_chain+0x2e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d31d      	bcc.n	8003c34 <create_chain+0x6a>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	e01a      	b.n	8003c34 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fd93 	bl	800372c <get_fat>
 8003c06:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d801      	bhi.n	8003c12 <create_chain+0x48>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c18:	d101      	bne.n	8003c1e <create_chain+0x54>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	e079      	b.n	8003d12 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d201      	bcs.n	8003c30 <create_chain+0x66>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	e070      	b.n	8003d12 <create_chain+0x148>
		scl = clst;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d307      	bcc.n	8003c5c <create_chain+0x92>
			ncl = 2;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d901      	bls.n	8003c5c <create_chain+0x92>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e05a      	b.n	8003d12 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fd64 	bl	800372c <get_fat>
 8003c64:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c72:	d002      	beq.n	8003c7a <create_chain+0xb0>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <create_chain+0xb4>
			return cs;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	e049      	b.n	8003d12 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d1d8      	bne.n	8003c38 <create_chain+0x6e>
 8003c86:	2300      	movs	r3, #0
 8003c88:	e043      	b.n	8003d12 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8003c8a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003c8c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fe46 	bl	8003924 <put_fat>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <create_chain+0xec>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fe39 	bl	8003924 <put_fat>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d121      	bne.n	8003d00 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd4:	d01c      	beq.n	8003d10 <create_chain+0x146>
			fs->free_clust--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ce6:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cee:	795b      	ldrb	r3, [r3, #5]
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfc:	715a      	strb	r2, [r3, #5]
 8003cfe:	e007      	b.n	8003d10 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <create_chain+0x142>
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e000      	b.n	8003d0e <create_chain+0x144>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003d10:	697b      	ldr	r3, [r7, #20]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	895b      	ldrh	r3, [r3, #10]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d52:	7892      	ldrb	r2, [r2, #2]
 8003d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	613a      	str	r2, [r7, #16]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <clmt_clust+0x54>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e010      	b.n	8003d90 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d307      	bcc.n	8003d86 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3304      	adds	r3, #4
 8003d82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d84:	e7e9      	b.n	8003d5a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8003d86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4413      	add	r3, r2
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b087      	sub	sp, #28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d031      	beq.n	8003e14 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e002      	b.n	8003dbe <get_ldnumber+0x24>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b1f      	cmp	r3, #31
 8003dc4:	d903      	bls.n	8003dce <get_ldnumber+0x34>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b3a      	cmp	r3, #58	; 0x3a
 8003dcc:	d1f4      	bne.n	8003db8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b3a      	cmp	r3, #58	; 0x3a
 8003dd4:	d11c      	bne.n	8003e10 <get_ldnumber+0x76>
			tp = *path;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	60fa      	str	r2, [r7, #12]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	3b30      	subs	r3, #48	; 0x30
 8003de6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b09      	cmp	r3, #9
 8003dec:	d80e      	bhi.n	8003e0c <get_ldnumber+0x72>
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10a      	bne.n	8003e0c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <get_ldnumber+0x72>
					vol = (int)i;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	e002      	b.n	8003e16 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003e14:	693b      	ldr	r3, [r7, #16]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	2200      	movs	r2, #0
 8003e32:	711a      	strb	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fc1b 	bl	8003680 <move_window>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <check_fs+0x34>
		return 3;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e04a      	b.n	8003eea <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <check_fs+0xd4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d001      	beq.n	8003e78 <check_fs+0x58>
		return 2;
 8003e74:	2302      	movs	r3, #2
 8003e76:	e038      	b.n	8003eea <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3336      	adds	r3, #54	; 0x36
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	061a      	lsls	r2, r3, #24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3336      	adds	r3, #54	; 0x36
 8003e86:	3302      	adds	r3, #2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	3236      	adds	r2, #54	; 0x36
 8003e92:	3201      	adds	r2, #1
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	0212      	lsls	r2, r2, #8
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <check_fs+0xd8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <check_fs+0x90>
		return 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e01c      	b.n	8003eea <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3352      	adds	r3, #82	; 0x52
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3352      	adds	r3, #82	; 0x52
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	3252      	adds	r2, #82	; 0x52
 8003eca:	3201      	adds	r2, #1
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	0212      	lsls	r2, r2, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ede:	4a06      	ldr	r2, [pc, #24]	; (8003ef8 <check_fs+0xd8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <check_fs+0xc8>
		return 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <check_fs+0xca>

	return 1;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	ffffaa55 	.word	0xffffaa55
 8003ef8:	00544146 	.word	0x00544146

08003efc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b096      	sub	sp, #88	; 0x58
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f7ff ff42 	bl	8003d9a <get_ldnumber>
 8003f16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da01      	bge.n	8003f22 <find_volume+0x26>
 8003f1e:	230b      	movs	r3, #11
 8003f20:	e319      	b.n	8004556 <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003f22:	4a9c      	ldr	r2, [pc, #624]	; (8004194 <find_volume+0x298>)
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <find_volume+0x3a>
 8003f32:	230c      	movs	r3, #12
 8003f34:	e30f      	b.n	8004556 <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 8003f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f38:	f7ff faf6 	bl	8003528 <lock_fs>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <find_volume+0x4a>
 8003f42:	230f      	movs	r3, #15
 8003f44:	e307      	b.n	8004556 <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01c      	beq.n	8003f92 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fa25 	bl	80033b0 <disk_status>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10c      	bne.n	8003f92 <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <find_volume+0x92>
 8003f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8003f8a:	230a      	movs	r3, #10
 8003f8c:	e2e3      	b.n	8004556 <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e2e1      	b.n	8004556 <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fa17 	bl	80033e4 <disk_initialize>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e2c4      	b.n	8004556 <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <find_volume+0xe6>
 8003fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8003fde:	230a      	movs	r3, #10
 8003fe0:	e2b9      	b.n	8004556 <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	7858      	ldrb	r0, [r3, #1]
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	330a      	adds	r3, #10
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	f7ff fa5b 	bl	80034b0 <disk_ioctl>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	895b      	ldrh	r3, [r3, #10]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d306      	bcc.n	800401c <find_volume+0x120>
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	895b      	ldrh	r3, [r3, #10]
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	d901      	bls.n	8004020 <find_volume+0x124>
 800401c:	2301      	movs	r3, #1
 800401e:	e29a      	b.n	8004556 <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004024:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004028:	f7ff fefa 	bl	8003e20 <check_fs>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004036:	2b01      	cmp	r3, #1
 8004038:	d153      	bne.n	80040e2 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800403a:	2300      	movs	r3, #0
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
 800403e:	e028      	b.n	8004092 <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8004040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800404a:	4413      	add	r3, r2
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	3304      	adds	r3, #4
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d012      	beq.n	800407e <find_volume+0x182>
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	330b      	adds	r3, #11
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	061a      	lsls	r2, r3, #24
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	330a      	adds	r3, #10
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	041b      	lsls	r3, r3, #16
 8004068:	4313      	orrs	r3, r2
 800406a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406c:	3209      	adds	r2, #9
 800406e:	7812      	ldrb	r2, [r2, #0]
 8004070:	0212      	lsls	r2, r2, #8
 8004072:	4313      	orrs	r3, r2
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	3208      	adds	r2, #8
 8004078:	7812      	ldrb	r2, [r2, #0]
 800407a:	431a      	orrs	r2, r3
 800407c:	e000      	b.n	8004080 <find_volume+0x184>
 800407e:	2200      	movs	r2, #0
 8004080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3358      	adds	r3, #88	; 0x58
 8004086:	443b      	add	r3, r7
 8004088:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800408c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408e:	3301      	adds	r3, #1
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	2b03      	cmp	r3, #3
 8004096:	d9d3      	bls.n	8004040 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <find_volume+0x1ac>
 80040a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a4:	3b01      	subs	r3, #1
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80040a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	3358      	adds	r3, #88	; 0x58
 80040ae:	443b      	add	r3, r7
 80040b0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80040b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <find_volume+0x1cc>
 80040bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040c0:	f7ff feae 	bl	8003e20 <check_fs>
 80040c4:	4603      	mov	r3, r0
 80040c6:	e000      	b.n	80040ca <find_volume+0x1ce>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80040ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <find_volume+0x1e6>
 80040d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d8:	3301      	adds	r3, #1
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
 80040dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d9e2      	bls.n	80040a8 <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80040e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d101      	bne.n	80040ee <find_volume+0x1f2>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e233      	b.n	8004556 <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80040ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <find_volume+0x1fe>
 80040f6:	230d      	movs	r3, #13
 80040f8:	e22d      	b.n	8004556 <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	7b1b      	ldrb	r3, [r3, #12]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	b21a      	sxth	r2, r3
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	7adb      	ldrb	r3, [r3, #11]
 8004106:	b21b      	sxth	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b21a      	sxth	r2, r3
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	895b      	ldrh	r3, [r3, #10]
 8004114:	b21b      	sxth	r3, r3
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 800411a:	230d      	movs	r3, #13
 800411c:	e21b      	b.n	8004556 <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	7ddb      	ldrb	r3, [r3, #23]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	b21a      	sxth	r2, r3
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	7d9b      	ldrb	r3, [r3, #22]
 800412a:	b21b      	sxth	r3, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	b21b      	sxth	r3, r3
 8004130:	b29b      	uxth	r3, r3
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d112      	bne.n	8004160 <find_volume+0x264>
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004140:	061a      	lsls	r2, r3, #24
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	4313      	orrs	r3, r2
 800414c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800414e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004152:	0212      	lsls	r2, r2, #8
 8004154:	4313      	orrs	r3, r2
 8004156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004158:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800415c:	4313      	orrs	r3, r2
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	461a      	mov	r2, r3
 8004168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416a:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	7c1a      	ldrb	r2, [r3, #16]
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004176:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	78db      	ldrb	r3, [r3, #3]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d009      	beq.n	8004198 <find_volume+0x29c>
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	78db      	ldrb	r3, [r3, #3]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d003      	beq.n	8004198 <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 8004190:	230d      	movs	r3, #13
 8004192:	e1e0      	b.n	8004556 <find_volume+0x65a>
 8004194:	20002514 	.word	0x20002514
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419e:	78db      	ldrb	r3, [r3, #3]
 80041a0:	461a      	mov	r2, r3
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	7b5a      	ldrb	r2, [r3, #13]
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041bc:	789b      	ldrb	r3, [r3, #2]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <find_volume+0x2e0>
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	789b      	ldrb	r3, [r3, #2]
 80041ca:	461a      	mov	r2, r3
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	789b      	ldrb	r3, [r3, #2]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 80041dc:	230d      	movs	r3, #13
 80041de:	e1ba      	b.n	8004556 <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	7c9b      	ldrb	r3, [r3, #18]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	b21a      	sxth	r2, r3
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	7c5b      	ldrb	r3, [r3, #17]
 80041ec:	b21b      	sxth	r3, r3
 80041ee:	4313      	orrs	r3, r2
 80041f0:	b21b      	sxth	r3, r3
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004202:	891b      	ldrh	r3, [r3, #8]
 8004204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800420a:	8952      	ldrh	r2, [r2, #10]
 800420c:	0952      	lsrs	r2, r2, #5
 800420e:	b292      	uxth	r2, r2
 8004210:	fbb3 f1f2 	udiv	r1, r3, r2
 8004214:	fb01 f202 	mul.w	r2, r1, r2
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 8004220:	230d      	movs	r3, #13
 8004222:	e198      	b.n	8004556 <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	7d1b      	ldrb	r3, [r3, #20]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	b21a      	sxth	r2, r3
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	7cdb      	ldrb	r3, [r3, #19]
 8004230:	b21b      	sxth	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	b21b      	sxth	r3, r3
 8004236:	b29b      	uxth	r3, r3
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	2b00      	cmp	r3, #0
 800423e:	d112      	bne.n	8004266 <find_volume+0x36a>
 8004240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004242:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004246:	061a      	lsls	r2, r3, #24
 8004248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	4313      	orrs	r3, r2
 8004252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004254:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004258:	0212      	lsls	r2, r2, #8
 800425a:	4313      	orrs	r3, r2
 800425c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004262:	4313      	orrs	r3, r2
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	7bdb      	ldrb	r3, [r3, #15]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	b21a      	sxth	r2, r3
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	7b9b      	ldrb	r3, [r3, #14]
 8004272:	b21b      	sxth	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b21b      	sxth	r3, r3
 8004278:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800427a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <find_volume+0x388>
 8004280:	230d      	movs	r3, #13
 8004282:	e168      	b.n	8004556 <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004284:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	4413      	add	r3, r2
 800428a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004290:	8911      	ldrh	r1, [r2, #8]
 8004292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004294:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004298:	8952      	ldrh	r2, [r2, #10]
 800429a:	0952      	lsrs	r2, r2, #5
 800429c:	b292      	uxth	r2, r2
 800429e:	fbb1 f2f2 	udiv	r2, r1, r2
 80042a2:	b292      	uxth	r2, r2
 80042a4:	4413      	add	r3, r2
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80042a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d201      	bcs.n	80042b4 <find_volume+0x3b8>
 80042b0:	230d      	movs	r3, #13
 80042b2:	e150      	b.n	8004556 <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80042b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042c0:	7892      	ldrb	r2, [r2, #2]
 80042c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <find_volume+0x3d6>
 80042ce:	230d      	movs	r3, #13
 80042d0:	e141      	b.n	8004556 <find_volume+0x65a>
	fmt = FS_FAT12;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80042de:	4293      	cmp	r3, r2
 80042e0:	d902      	bls.n	80042e8 <find_volume+0x3ec>
 80042e2:	2302      	movs	r3, #2
 80042e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d902      	bls.n	80042f8 <find_volume+0x3fc>
 80042f2:	2303      	movs	r3, #3
 80042f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	3302      	adds	r3, #2
 80042fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004302:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430a:	461a      	mov	r2, r3
 800430c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430e:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004310:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004314:	4413      	add	r3, r2
 8004316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800431c:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 800431e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	4413      	add	r3, r2
 8004324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800432a:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 800432c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004330:	2b03      	cmp	r3, #3
 8004332:	d124      	bne.n	800437e <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433a:	891b      	ldrh	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <find_volume+0x448>
 8004340:	230d      	movs	r3, #13
 8004342:	e108      	b.n	8004556 <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800434a:	061a      	lsls	r2, r3, #24
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	4313      	orrs	r3, r2
 8004356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004358:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800435c:	0212      	lsls	r2, r2, #8
 800435e:	4313      	orrs	r3, r2
 8004360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004362:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004366:	4313      	orrs	r3, r2
 8004368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800436a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800436e:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	647b      	str	r3, [r7, #68]	; 0x44
 800437c:	e02b      	b.n	80043d6 <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004384:	891b      	ldrh	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <find_volume+0x492>
 800438a:	230d      	movs	r3, #13
 800438c:	e0e3      	b.n	8004556 <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004398:	4413      	add	r3, r2
 800439a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800439c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a0:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80043a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d105      	bne.n	80043b6 <find_volume+0x4ba>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	e00e      	b.n	80043d4 <find_volume+0x4d8>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	085a      	lsrs	r2, r3, #1
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e4:	895b      	ldrh	r3, [r3, #10]
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ea:	440b      	add	r3, r1
 80043ec:	3b01      	subs	r3, #1
 80043ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043f0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80043f4:	8949      	ldrh	r1, [r1, #10]
 80043f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d201      	bcs.n	8004402 <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 80043fe:	230d      	movs	r3, #13
 8004400:	e0a9      	b.n	8004556 <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	6153      	str	r3, [r2, #20]
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800441a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800441e:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800442a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800442e:	2b03      	cmp	r3, #3
 8004430:	d17a      	bne.n	8004528 <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	b21a      	sxth	r2, r3
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004442:	b21b      	sxth	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b21b      	sxth	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d16d      	bne.n	8004528 <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	3301      	adds	r3, #1
 8004450:	4619      	mov	r1, r3
 8004452:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004454:	f7ff f914 	bl	8003680 <move_window>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d164      	bne.n	8004528 <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004464:	2200      	movs	r2, #0
 8004466:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	b21a      	sxth	r2, r3
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004478:	b21b      	sxth	r3, r3
 800447a:	4313      	orrs	r3, r2
 800447c:	b21b      	sxth	r3, r3
 800447e:	4a38      	ldr	r2, [pc, #224]	; (8004560 <find_volume+0x664>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d151      	bne.n	8004528 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	78db      	ldrb	r3, [r3, #3]
 8004488:	061a      	lsls	r2, r3, #24
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	041b      	lsls	r3, r3, #16
 8004490:	4313      	orrs	r3, r2
 8004492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004494:	7852      	ldrb	r2, [r2, #1]
 8004496:	0212      	lsls	r2, r2, #8
 8004498:	4313      	orrs	r3, r2
 800449a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	4a30      	ldr	r2, [pc, #192]	; (8004564 <find_volume+0x668>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d140      	bne.n	8004528 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80044ac:	061a      	lsls	r2, r3, #24
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	4313      	orrs	r3, r2
 80044b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ba:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80044be:	0212      	lsls	r2, r2, #8
 80044c0:	4313      	orrs	r3, r2
 80044c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80044c8:	4313      	orrs	r3, r2
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <find_volume+0x66c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d12b      	bne.n	8004528 <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80044d6:	061a      	lsls	r2, r3, #24
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	4313      	orrs	r3, r2
 80044e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80044e8:	0212      	lsls	r2, r2, #8
 80044ea:	4313      	orrs	r3, r2
 80044ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ee:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fa:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004502:	061a      	lsls	r2, r3, #24
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	4313      	orrs	r3, r2
 800450e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004510:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004514:	0212      	lsls	r2, r2, #8
 8004516:	4313      	orrs	r3, r2
 8004518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800451e:	4313      	orrs	r3, r2
 8004520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452e:	461a      	mov	r2, r3
 8004530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004534:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <find_volume+0x670>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <find_volume+0x670>)
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <find_volume+0x670>)
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454c:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800454e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004550:	f7ff f81a 	bl	8003588 <clear_lock>
#endif

	return FR_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3758      	adds	r7, #88	; 0x58
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	ffffaa55 	.word	0xffffaa55
 8004564:	41615252 	.word	0x41615252
 8004568:	61417272 	.word	0x61417272
 800456c:	20002518 	.word	0x20002518

08004570 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02a      	beq.n	80045d8 <validate+0x68>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d024      	beq.n	80045d8 <validate+0x68>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <validate+0x68>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ac:	88da      	ldrh	r2, [r3, #6]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	889b      	ldrh	r3, [r3, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d10e      	bne.n	80045d8 <validate+0x68>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fef1 	bl	80033b0 <disk_status>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <validate+0x6c>
		return FR_INVALID_OBJECT;
 80045d8:	2309      	movs	r3, #9
 80045da:	e00c      	b.n	80045f6 <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe ff9f 	bl	8003528 <lock_fs>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <validate+0x84>
 80045f0:	230f      	movs	r3, #15
 80045f2:	e000      	b.n	80045f6 <validate+0x86>

	return FR_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fbbf 	bl	8003d9a <get_ldnumber>
 800461c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	da01      	bge.n	8004628 <f_mount+0x28>
 8004624:	230b      	movs	r3, #11
 8004626:	e050      	b.n	80046ca <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <f_mount+0xd4>)
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f7fe ffa5 	bl	8003588 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fbc3 	bl	8004dd2 <ff_del_syncobj>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <f_mount+0x56>
 8004652:	2302      	movs	r3, #2
 8004654:	e039      	b.n	80046ca <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d013      	beq.n	800468e <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	b2da      	uxtb	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	330c      	adds	r3, #12
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f000 fb87 	bl	8004d92 <ff_cre_syncobj>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <f_mount+0x8e>
 800468a:	2302      	movs	r3, #2
 800468c:	e01d      	b.n	80046ca <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4910      	ldr	r1, [pc, #64]	; (80046d4 <f_mount+0xd4>)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <f_mount+0xa4>
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d001      	beq.n	80046a8 <f_mount+0xa8>
 80046a4:	2300      	movs	r3, #0
 80046a6:	e010      	b.n	80046ca <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80046a8:	f107 0108 	add.w	r1, r7, #8
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	2200      	movs	r2, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fc22 	bl	8003efc <find_volume>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	7dfa      	ldrb	r2, [r7, #23]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe ff40 	bl	8003548 <unlock_fs>
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20002514 	.word	0x20002514

080046d8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ff3d 	bl	8004570 <validate>
 80046f6:	4603      	mov	r3, r0
 80046f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <f_write+0x3e>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	7dfa      	ldrb	r2, [r7, #23]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe ff1b 	bl	8003548 <unlock_fs>
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	e26a      	b.n	8004bec <f_write+0x514>
	if (fp->err)							/* Check error */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	79db      	ldrb	r3, [r3, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	79db      	ldrb	r3, [r3, #7]
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f7fe ff07 	bl	8003548 <unlock_fs>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004740:	79db      	ldrb	r3, [r3, #7]
 8004742:	e253      	b.n	8004bec <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	799b      	ldrb	r3, [r3, #6]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2107      	movs	r1, #7
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fef2 	bl	8003548 <unlock_fs>
 8004764:	2307      	movs	r3, #7
 8004766:	e241      	b.n	8004bec <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	f080 8209 	bcs.w	8004b94 <f_write+0x4bc>
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8004786:	e205      	b.n	8004b94 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479c:	8952      	ldrh	r2, [r2, #10]
 800479e:	fbb3 f1f2 	udiv	r1, r3, r2
 80047a2:	fb01 f202 	mul.w	r2, r1, r2
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8199 	bne.w	8004ae0 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c2:	8952      	ldrh	r2, [r2, #10]
 80047c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d6:	789b      	ldrb	r3, [r3, #2]
 80047d8:	3b01      	subs	r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80047e0:	7dbb      	ldrb	r3, [r7, #22]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d16f      	bne.n	80048c6 <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d111      	bne.n	8004816 <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d126      	bne.n	8004850 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f9dc 	bl	8003bca <create_chain>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24
 8004814:	e01c      	b.n	8004850 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fa74 	bl	8003d1a <clmt_clust>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24
 8004834:	e00c      	b.n	8004850 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7ff f9be 	bl	8003bca <create_chain>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 81a3 	beq.w	8004b9e <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <f_write+0x1a4>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	2202      	movs	r2, #2
 8004866:	71da      	strb	r2, [r3, #7]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fe68 	bl	8003548 <unlock_fs>
 8004878:	2302      	movs	r3, #2
 800487a:	e1b7      	b.n	8004bec <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d10e      	bne.n	80048a2 <f_write+0x1ca>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	2201      	movs	r2, #1
 800488c:	71da      	strb	r2, [r3, #7]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fe55 	bl	8003548 <unlock_fs>
 800489e:	2301      	movs	r3, #1
 80048a0:	e1a4      	b.n	8004bec <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	461a      	mov	r2, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d105      	bne.n	80048c6 <f_write+0x1ee>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c0:	461a      	mov	r2, r3
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	799b      	ldrb	r3, [r3, #6]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02b      	beq.n	800492e <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	7858      	ldrb	r0, [r3, #1]
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	2301      	movs	r3, #1
 80048f0:	f7fe fdbe 	bl	8003470 <disk_write>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004900:	2201      	movs	r2, #1
 8004902:	71da      	strb	r2, [r3, #7]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fe1a 	bl	8003548 <unlock_fs>
 8004914:	2301      	movs	r3, #1
 8004916:	e169      	b.n	8004bec <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	799b      	ldrb	r3, [r3, #6]
 8004920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004924:	b2da      	uxtb	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492c:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fe fecf 	bl	80036e4 <clust2sect>
 8004946:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <f_write+0x294>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	2202      	movs	r2, #2
 8004956:	71da      	strb	r2, [r3, #7]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fdf0 	bl	8003548 <unlock_fs>
 8004968:	2302      	movs	r3, #2
 800496a:	e13f      	b.n	8004bec <f_write+0x514>
			sect += csect;
 800496c:	7dbb      	ldrb	r3, [r7, #22]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	895b      	ldrh	r3, [r3, #10]
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	fbb3 f3f2 	udiv	r3, r3, r2
 800498a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d071      	beq.n	8004a76 <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004992:	7dba      	ldrb	r2, [r7, #22]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	4413      	add	r3, r2
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049a4:	7892      	ldrb	r2, [r2, #2]
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d90a      	bls.n	80049c0 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b6:	789b      	ldrb	r3, [r3, #2]
 80049b8:	461a      	mov	r2, r3
 80049ba:	7dbb      	ldrb	r3, [r7, #22]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	7858      	ldrb	r0, [r3, #1]
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	f7fe fd4c 	bl	8003470 <disk_write>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e4:	2201      	movs	r2, #1
 80049e6:	71da      	strb	r2, [r3, #7]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fda8 	bl	8003548 <unlock_fs>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0f7      	b.n	8004bec <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a02:	699a      	ldr	r2, [r3, #24]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d926      	bls.n	8004a5c <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a28:	8952      	ldrh	r2, [r2, #10]
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	18d1      	adds	r1, r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3e:	895b      	ldrh	r3, [r3, #10]
 8004a40:	461a      	mov	r2, r3
 8004a42:	f7fe fd53 	bl	80034ec <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4c:	799b      	ldrb	r3, [r3, #6]
 8004a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5a:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	895b      	ldrh	r3, [r3, #10]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	623b      	str	r3, [r7, #32]
				continue;
 8004a74:	e076      	b.n	8004b64 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d027      	beq.n	8004ad4 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d21d      	bcs.n	8004ad4 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa4:	7858      	ldrb	r0, [r3, #1]
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	f7fe fcc0 	bl	8003430 <disk_read>
 8004ab0:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abc:	2201      	movs	r2, #1
 8004abe:	71da      	strb	r2, [r3, #7]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fd3c 	bl	8003548 <unlock_fs>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e08b      	b.n	8004bec <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ada:	461a      	mov	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aec:	895b      	ldrh	r3, [r3, #10]
 8004aee:	4618      	mov	r0, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b04:	8952      	ldrh	r2, [r2, #10]
 8004b06:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b0a:	fb01 f202 	mul.w	r2, r1, r2
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	1ac3      	subs	r3, r0, r3
 8004b12:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d901      	bls.n	8004b20 <f_write+0x448>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b34:	8952      	ldrh	r2, [r2, #10]
 8004b36:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b3a:	fb01 f202 	mul.w	r2, r1, r2
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	69b9      	ldr	r1, [r7, #24]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fccf 	bl	80034ec <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b54:	799b      	ldrb	r3, [r3, #6]
 8004b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b62:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	4413      	add	r3, r2
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b7e:	6093      	str	r3, [r2, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	441a      	add	r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f47f adf6 	bne.w	8004788 <f_write+0xb0>
 8004b9c:	e000      	b.n	8004ba0 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004b9e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d907      	bls.n	8004bc4 <f_write+0x4ec>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bc2:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bca:	799b      	ldrb	r3, [r3, #6]
 8004bcc:	f043 0320 	orr.w	r3, r3, #32
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fe fcaf 	bl	8003548 <unlock_fs>
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	; 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	2b0a      	cmp	r3, #10
 8004c04:	d103      	bne.n	8004c0e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8004c06:	210d      	movs	r1, #13
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fff3 	bl	8004bf4 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db25      	blt.n	8004c66 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	60fa      	str	r2, [r7, #12]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b3c      	cmp	r3, #60	; 0x3c
 8004c2c:	dd12      	ble.n	8004c54 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 010c 	add.w	r1, r3, #12
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	f7ff fd4b 	bl	80046d8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d101      	bne.n	8004c4e <putc_bfd+0x5a>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e001      	b.n	8004c52 <putc_bfd+0x5e>
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	e000      	b.n	8004c68 <putc_bfd+0x74>
	if (i < 0) return;
 8004c66:	bf00      	nop
}
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8004c6e:	b590      	push	{r4, r7, lr}
 8004c70:	b097      	sub	sp, #92	; 0x5c
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8004c84:	e009      	b.n	8004c9a <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	f107 030c 	add.w	r3, r7, #12
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff ffad 	bl	8004bf4 <putc_bfd>
	while (*str)			/* Put the string */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f1      	bne.n	8004c86 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db15      	blt.n	8004cd4 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	461c      	mov	r4, r3
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	f103 010c 	add.w	r1, r3, #12
 8004cba:	4613      	mov	r3, r2
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	f7ff fd0b 	bl	80046d8 <f_write>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d105      	bne.n	8004cd4 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d101      	bne.n	8004cd4 <f_puts+0x66>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	e001      	b.n	8004cd8 <f_puts+0x6a>
	return EOF;
 8004cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	375c      	adds	r7, #92	; 0x5c
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd90      	pop	{r4, r7, pc}

08004ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004cf8:	7a5b      	ldrb	r3, [r3, #9]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d831      	bhi.n	8004d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d02:	7a5b      	ldrb	r3, [r3, #9]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d10:	7a5b      	ldrb	r3, [r3, #9]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d20:	7a5b      	ldrb	r3, [r3, #9]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d30:	7a5b      	ldrb	r3, [r3, #9]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	b2d1      	uxtb	r1, r2
 8004d38:	4a0d      	ldr	r2, [pc, #52]	; (8004d70 <FATFS_LinkDriverEx+0x90>)
 8004d3a:	7251      	strb	r1, [r2, #9]
 8004d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004d3e:	7dbb      	ldrb	r3, [r7, #22]
 8004d40:	3330      	adds	r3, #48	; 0x30
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	223a      	movs	r2, #58	; 0x3a
 8004d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3302      	adds	r3, #2
 8004d54:	222f      	movs	r2, #47	; 0x2f
 8004d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	20002534 	.word	0x20002534

08004d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ffac 	bl	8004ce0 <FATFS_LinkDriverEx>
 8004d88:	4603      	mov	r3, r0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4603      	mov	r3, r0
 8004d9a:	6039      	str	r1, [r7, #0]
 8004d9c:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8004da6:	f107 030c 	add.w	r3, r7, #12
 8004daa:	2101      	movs	r1, #1
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f8cb 	bl	8004f48 <osSemaphoreCreate>
 8004db2:	4602      	mov	r2, r0
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	617b      	str	r3, [r7, #20]
  
  return ret;
 8004dc8:	697b      	ldr	r3, [r7, #20]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f96a 	bl	80050b4 <osSemaphoreDelete>
  return 1;
 8004de0:	2301      	movs	r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8004df6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8d6 	bl	8004fac <osSemaphoreWait>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <ff_req_grant+0x20>
  {
    ret = 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f913 	bl	8005048 <osSemaphoreRelease>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e3c:	2b84      	cmp	r3, #132	; 0x84
 8004e3e:	d005      	beq.n	8004e4c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	3303      	adds	r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5e:	f3ef 8305 	mrs	r3, IPSR
 8004e62:	607b      	str	r3, [r7, #4]
  return(result);
 8004e64:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e7e:	f001 f979 	bl	8006174 <vTaskStartScheduler>
  
  return osOK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af04      	add	r7, sp, #16
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <osThreadCreate+0x54>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01c      	beq.n	8004edc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685c      	ldr	r4, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691e      	ldr	r6, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ffb8 	bl	8004e2a <makeFreeRtosPriority>
 8004eba:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ec4:	9202      	str	r2, [sp, #8]
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	9100      	str	r1, [sp, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 ff79 	bl	8005dc8 <xTaskCreateStatic>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e01c      	b.n	8004f16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685c      	ldr	r4, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ee8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ff9a 	bl	8004e2a <makeFreeRtosPriority>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	9200      	str	r2, [sp, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4632      	mov	r2, r6
 8004f04:	4629      	mov	r1, r5
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 ffba 	bl	8005e80 <xTaskCreate>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <osDelay+0x16>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	e000      	b.n	8004f38 <osDelay+0x18>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 f8e7 	bl	800610c <vTaskDelay>
  
  return osOK;
 8004f3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10a      	bne.n	8004f76 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2203      	movs	r2, #3
 8004f66:	9200      	str	r2, [sp, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f000 f9cb 	bl	8005308 <xQueueGenericCreateStatic>
 8004f72:	4603      	mov	r3, r0
 8004f74:	e016      	b.n	8004fa4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e014      	b.n	8004fa4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d110      	bne.n	8004fa2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004f80:	2203      	movs	r2, #3
 8004f82:	2100      	movs	r1, #0
 8004f84:	2001      	movs	r0, #1
 8004f86:	f000 fa36 	bl	80053f6 <xQueueGenericCreate>
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <osSemaphoreCreate+0x56>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2200      	movs	r2, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa89 	bl	80054b0 <xQueueGenericSend>
      return sema;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	e000      	b.n	8004fa4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004fa2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	e03a      	b.n	800503a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d103      	bne.n	8004fd8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e009      	b.n	8004fec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <osSemaphoreWait+0x40>
      ticks = 1;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004fec:	f7ff ff34 	bl	8004e58 <inHandlerMode>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d017      	beq.n	8005026 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ff6:	f107 0308 	add.w	r3, r7, #8
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fcee 	bl	80059e0 <xQueueReceiveFromISR>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d001      	beq.n	800500e <osSemaphoreWait+0x62>
      return osErrorOS;
 800500a:	23ff      	movs	r3, #255	; 0xff
 800500c:	e015      	b.n	800503a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d011      	beq.n	8005038 <osSemaphoreWait+0x8c>
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <osSemaphoreWait+0x98>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	e008      	b.n	8005038 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fbcd 	bl	80057c8 <xQueueSemaphoreTake>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d001      	beq.n	8005038 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005034:	23ff      	movs	r3, #255	; 0xff
 8005036:	e000      	b.n	800503a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005058:	f7ff fefe 	bl	8004e58 <inHandlerMode>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fb1f 	bl	80056ac <xQueueGiveFromISR>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005074:	23ff      	movs	r3, #255	; 0xff
 8005076:	e017      	b.n	80050a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d013      	beq.n	80050a6 <osSemaphoreRelease+0x5e>
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <osSemaphoreRelease+0x68>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	e00a      	b.n	80050a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005090:	2300      	movs	r3, #0
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fa0a 	bl	80054b0 <xQueueGenericSend>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80050a2:	23ff      	movs	r3, #255	; 0xff
 80050a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80050bc:	f7ff fecc 	bl	8004e58 <inHandlerMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <osSemaphoreDelete+0x16>
    return osErrorISR;
 80050c6:	2382      	movs	r3, #130	; 0x82
 80050c8:	e003      	b.n	80050d2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fd08 	bl	8005ae0 <vQueueDelete>

  return osOK; 
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 32ff 	mov.w	r2, #4294967295
 80050f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f103 0208 	add.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr

08005130 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	601a      	str	r2, [r3, #0]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d103      	bne.n	8005196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e00c      	b.n	80051b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3308      	adds	r3, #8
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e002      	b.n	80051a4 <vListInsert+0x2e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d2f6      	bcs.n	800519e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6892      	ldr	r2, [r2, #8]
 80051fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6852      	ldr	r2, [r2, #4]
 8005206:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d103      	bne.n	800521a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1e5a      	subs	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005262:	f001 fedb 	bl	800701c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	3b01      	subs	r3, #1
 8005294:	68f9      	ldr	r1, [r7, #12]
 8005296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	441a      	add	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	22ff      	movs	r2, #255	; 0xff
 80052a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	22ff      	movs	r2, #255	; 0xff
 80052ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d114      	bne.n	80052e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3310      	adds	r3, #16
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 f9ad 	bl	8006624 <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d012      	beq.n	80052f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <xQueueGenericReset+0xcc>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	e009      	b.n	80052f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3310      	adds	r3, #16
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fef7 	bl	80050da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3324      	adds	r3, #36	; 0x24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fef2 	bl	80050da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052f6:	f001 fec1 	bl	800707c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052fa:	2301      	movs	r3, #1
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	e000ed04 	.word	0xe000ed04

08005308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08e      	sub	sp, #56	; 0x38
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <xQueueGenericCreateStatic+0x52>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <xQueueGenericCreateStatic+0x56>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueGenericCreateStatic+0x58>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	623b      	str	r3, [r7, #32]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <xQueueGenericCreateStatic+0x7e>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <xQueueGenericCreateStatic+0x82>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueGenericCreateStatic+0x84>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61fb      	str	r3, [r7, #28]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053a6:	2348      	movs	r3, #72	; 0x48
 80053a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b48      	cmp	r3, #72	; 0x48
 80053ae:	d00a      	beq.n	80053c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	61bb      	str	r3, [r7, #24]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f843 	bl	8005472 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3730      	adds	r7, #48	; 0x30
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b08a      	sub	sp, #40	; 0x28
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	4613      	mov	r3, r2
 8005402:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xQueueGenericCreate+0x2a>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	613b      	str	r3, [r7, #16]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	e004      	b.n	8005436 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	fb02 f303 	mul.w	r3, r2, r3
 8005434:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3348      	adds	r3, #72	; 0x48
 800543a:	4618      	mov	r0, r3
 800543c:	f001 feee 	bl	800721c <pvPortMalloc>
 8005440:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00f      	beq.n	8005468 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	3348      	adds	r3, #72	; 0x48
 800544c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005456:	79fa      	ldrb	r2, [r7, #7]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f805 	bl	8005472 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005468:	69bb      	ldr	r3, [r7, #24]
	}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d103      	bne.n	800548e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e002      	b.n	8005494 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054a0:	2101      	movs	r1, #1
 80054a2:	69b8      	ldr	r0, [r7, #24]
 80054a4:	f7ff fec8 	bl	8005238 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08e      	sub	sp, #56	; 0x38
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054be:	2300      	movs	r3, #0
 80054c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericSend+0x32>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d103      	bne.n	80054f0 <xQueueGenericSend+0x40>
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <xQueueGenericSend+0x44>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <xQueueGenericSend+0x46>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <xQueueGenericSend+0x60>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d103      	bne.n	800551e <xQueueGenericSend+0x6e>
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <xQueueGenericSend+0x72>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <xQueueGenericSend+0x74>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10a      	bne.n	800553e <xQueueGenericSend+0x8e>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	623b      	str	r3, [r7, #32]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800553e:	f001 fa35 	bl	80069ac <xTaskGetSchedulerState>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <xQueueGenericSend+0x9e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <xQueueGenericSend+0xa2>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <xQueueGenericSend+0xa4>
 8005552:	2300      	movs	r3, #0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGenericSend+0xbe>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	61fb      	str	r3, [r7, #28]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800556e:	f001 fd55 	bl	800701c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <xQueueGenericSend+0xd4>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d129      	bne.n	80055d8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800558a:	f000 fae3 	bl	8005b54 <prvCopyDataToQueue>
 800558e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	3324      	adds	r3, #36	; 0x24
 800559c:	4618      	mov	r0, r3
 800559e:	f001 f841 	bl	8006624 <xTaskRemoveFromEventList>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d013      	beq.n	80055d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055a8:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <xQueueGenericSend+0x1f8>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	e00a      	b.n	80055d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055c0:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <xQueueGenericSend+0x1f8>)
 80055c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055d0:	f001 fd54 	bl	800707c <vPortExitCritical>
				return pdPASS;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e063      	b.n	80056a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055de:	f001 fd4d 	bl	800707c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e05c      	b.n	80056a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 f879 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055fa:	f001 fd3f 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fe:	f000 fe23 	bl	8006248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005602:	f001 fd0b 	bl	800701c <vPortEnterCritical>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560c:	b25b      	sxtb	r3, r3
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d103      	bne.n	800561c <xQueueGenericSend+0x16c>
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005622:	b25b      	sxtb	r3, r3
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d103      	bne.n	8005632 <xQueueGenericSend+0x182>
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005632:	f001 fd23 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005636:	1d3a      	adds	r2, r7, #4
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f868 	bl	8006714 <xTaskCheckForTimeOut>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d124      	bne.n	8005694 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800564a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564c:	f000 fb7a 	bl	8005d44 <prvIsQueueFull>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d018      	beq.n	8005688 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	3310      	adds	r3, #16
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 ffbc 	bl	80065dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005666:	f000 fb05 	bl	8005c74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800566a:	f000 fdfb 	bl	8006264 <xTaskResumeAll>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	f47f af7c 	bne.w	800556e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <xQueueGenericSend+0x1f8>)
 8005678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	e772      	b.n	800556e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800568a:	f000 faf3 	bl	8005c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800568e:	f000 fde9 	bl	8006264 <xTaskResumeAll>
 8005692:	e76c      	b.n	800556e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005696:	f000 faed 	bl	8005c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800569a:	f000 fde3 	bl	8006264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800569e:	2300      	movs	r3, #0
		}
	}
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3738      	adds	r7, #56	; 0x38
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	; 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	623b      	str	r3, [r7, #32]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <xQueueGiveFromISR+0x48>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	61fb      	str	r3, [r7, #28]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <xQueueGiveFromISR+0x58>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <xQueueGiveFromISR+0x5c>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <xQueueGiveFromISR+0x5e>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xQueueGiveFromISR+0x78>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	61bb      	str	r3, [r7, #24]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005724:	f001 fd3c 	bl	80071a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005728:	f3ef 8211 	mrs	r2, BASEPRI
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	617a      	str	r2, [r7, #20]
 800573e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005740:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005750:	429a      	cmp	r2, r3
 8005752:	d22b      	bcs.n	80057ac <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800575a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d112      	bne.n	8005796 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d016      	beq.n	80057a6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	3324      	adds	r3, #36	; 0x24
 800577c:	4618      	mov	r0, r3
 800577e:	f000 ff51 	bl	8006624 <xTaskRemoveFromEventList>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e007      	b.n	80057a6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800579a:	3301      	adds	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	b25a      	sxtb	r2, r3
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
 80057aa:	e001      	b.n	80057b0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3738      	adds	r7, #56	; 0x38
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08e      	sub	sp, #56	; 0x38
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	623b      	str	r3, [r7, #32]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	61fb      	str	r3, [r7, #28]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005818:	f001 f8c8 	bl	80069ac <xTaskGetSchedulerState>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <xQueueSemaphoreTake+0x60>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueSemaphoreTake+0x64>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueSemaphoreTake+0x66>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	61bb      	str	r3, [r7, #24]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005848:	f001 fbe8 	bl	800701c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d024      	beq.n	80058a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005868:	f001 fa6a 	bl	8006d40 <pvTaskIncrementMutexHeldCount>
 800586c:	4602      	mov	r2, r0
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	3310      	adds	r3, #16
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fed0 	bl	8006624 <xTaskRemoveFromEventList>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800588a:	4b54      	ldr	r3, [pc, #336]	; (80059dc <xQueueSemaphoreTake+0x214>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800589a:	f001 fbef 	bl	800707c <vPortExitCritical>
				return pdPASS;
 800589e:	2301      	movs	r3, #1
 80058a0:	e097      	b.n	80059d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d111      	bne.n	80058cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	617b      	str	r3, [r7, #20]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058c4:	f001 fbda 	bl	800707c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e082      	b.n	80059d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 ff06 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e0:	f001 fbcc 	bl	800707c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e4:	f000 fcb0 	bl	8006248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058e8:	f001 fb98 	bl	800701c <vPortEnterCritical>
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f2:	b25b      	sxtb	r3, r3
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d103      	bne.n	8005902 <xQueueSemaphoreTake+0x13a>
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005908:	b25b      	sxtb	r3, r3
 800590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590e:	d103      	bne.n	8005918 <xQueueSemaphoreTake+0x150>
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005918:	f001 fbb0 	bl	800707c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800591c:	463a      	mov	r2, r7
 800591e:	f107 030c 	add.w	r3, r7, #12
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fef5 	bl	8006714 <xTaskCheckForTimeOut>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d132      	bne.n	8005996 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005932:	f000 f9f1 	bl	8005d18 <prvIsQueueEmpty>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d026      	beq.n	800598a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005944:	f001 fb6a 	bl	800701c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f84b 	bl	80069e8 <xTaskPriorityInherit>
 8005952:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005954:	f001 fb92 	bl	800707c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fe3b 	bl	80065dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005968:	f000 f984 	bl	8005c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800596c:	f000 fc7a 	bl	8006264 <xTaskResumeAll>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f47f af68 	bne.w	8005848 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005978:	4b18      	ldr	r3, [pc, #96]	; (80059dc <xQueueSemaphoreTake+0x214>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	e75e      	b.n	8005848 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800598a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800598c:	f000 f972 	bl	8005c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005990:	f000 fc68 	bl	8006264 <xTaskResumeAll>
 8005994:	e758      	b.n	8005848 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005998:	f000 f96c 	bl	8005c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800599c:	f000 fc62 	bl	8006264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a2:	f000 f9b9 	bl	8005d18 <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f af4d 	beq.w	8005848 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80059b4:	f001 fb32 	bl	800701c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ba:	f000 f8b4 	bl	8005b26 <prvGetDisinheritPriorityAfterTimeout>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f91a 	bl	8006c00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059cc:	f001 fb56 	bl	800707c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3738      	adds	r7, #56	; 0x38
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08e      	sub	sp, #56	; 0x38
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	623b      	str	r3, [r7, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <xQueueReceiveFromISR+0x3a>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <xQueueReceiveFromISR+0x3e>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueReceiveFromISR+0x40>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61fb      	str	r3, [r7, #28]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a3a:	f001 fbb1 	bl	80071a0 <vPortValidateInterruptPriority>
	__asm volatile
 8005a3e:	f3ef 8211 	mrs	r2, BASEPRI
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	61ba      	str	r2, [r7, #24]
 8005a54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d02f      	beq.n	8005ac6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a74:	f000 f8d8 	bl	8005c28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	1e5a      	subs	r2, r3, #1
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d112      	bne.n	8005ab0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	3310      	adds	r3, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fdc4 	bl	8006624 <xTaskRemoveFromEventList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e007      	b.n	8005ac0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	b25a      	sxtb	r2, r3
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	e001      	b.n	8005aca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f383 8811 	msr	BASEPRI, r3
}
 8005ad4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3738      	adds	r7, #56	; 0x38
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <vQueueDelete+0x28>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60bb      	str	r3, [r7, #8]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f933 	bl	8005d74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f001 fc43 	bl	80073a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d006      	beq.n	8005b44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1c3 0307 	rsb	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e001      	b.n	8005b48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b48:	68fb      	ldr	r3, [r7, #12]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d14d      	bne.n	8005c16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 ffb8 	bl	8006af4 <xTaskPriorityDisinherit>
 8005b84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e043      	b.n	8005c16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d119      	bne.n	8005bc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6898      	ldr	r0, [r3, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f002 f828 	bl	8007bf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	441a      	add	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d32b      	bcc.n	8005c16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
 8005bc6:	e026      	b.n	8005c16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68d8      	ldr	r0, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	f002 f80e 	bl	8007bf4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	425b      	negs	r3, r3
 8005be2:	441a      	add	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d207      	bcs.n	8005c04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d105      	bne.n	8005c16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c1e:	697b      	ldr	r3, [r7, #20]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d018      	beq.n	8005c6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	441a      	add	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d303      	bcc.n	8005c5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68d9      	ldr	r1, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	461a      	mov	r2, r3
 8005c66:	6838      	ldr	r0, [r7, #0]
 8005c68:	f001 ffc4 	bl	8007bf4 <memcpy>
	}
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c7c:	f001 f9ce 	bl	800701c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c88:	e011      	b.n	8005cae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d012      	beq.n	8005cb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3324      	adds	r3, #36	; 0x24
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fcc4 	bl	8006624 <xTaskRemoveFromEventList>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ca2:	f000 fd99 	bl	80067d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	dce9      	bgt.n	8005c8a <prvUnlockQueue+0x16>
 8005cb6:	e000      	b.n	8005cba <prvUnlockQueue+0x46>
					break;
 8005cb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	22ff      	movs	r2, #255	; 0xff
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cc2:	f001 f9db 	bl	800707c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cc6:	f001 f9a9 	bl	800701c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cd2:	e011      	b.n	8005cf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3310      	adds	r3, #16
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fc9f 	bl	8006624 <xTaskRemoveFromEventList>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cec:	f000 fd74 	bl	80067d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dce9      	bgt.n	8005cd4 <prvUnlockQueue+0x60>
 8005d00:	e000      	b.n	8005d04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d0c:	f001 f9b6 	bl	800707c <vPortExitCritical>
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d20:	f001 f97c 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e001      	b.n	8005d36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d36:	f001 f9a1 	bl	800707c <vPortExitCritical>

	return xReturn;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d4c:	f001 f966 	bl	800701c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d102      	bne.n	8005d62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e001      	b.n	8005d66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f001 f989 	bl	800707c <vPortExitCritical>

	return xReturn;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e016      	b.n	8005db0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005d82:	4a10      	ldr	r2, [pc, #64]	; (8005dc4 <vQueueUnregisterQueue+0x50>)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d10b      	bne.n	8005daa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005d92:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <vQueueUnregisterQueue+0x50>)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2100      	movs	r1, #0
 8005d98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005d9c:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <vQueueUnregisterQueue+0x50>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
				break;
 8005da8:	e006      	b.n	8005db8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3301      	adds	r3, #1
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b07      	cmp	r3, #7
 8005db4:	d9e5      	bls.n	8005d82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20002540 	.word	0x20002540

08005dc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08e      	sub	sp, #56	; 0x38
 8005dcc:	af04      	add	r7, sp, #16
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	623b      	str	r3, [r7, #32]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xTaskCreateStatic+0x46>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	61fb      	str	r3, [r7, #28]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e0e:	23a0      	movs	r3, #160	; 0xa0
 8005e10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2ba0      	cmp	r3, #160	; 0xa0
 8005e16:	d00a      	beq.n	8005e2e <xTaskCreateStatic+0x66>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	61bb      	str	r3, [r7, #24]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01e      	beq.n	8005e72 <xTaskCreateStatic+0xaa>
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01b      	beq.n	8005e72 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f851 	bl	8005f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e6c:	f000 f8e4 	bl	8006038 <prvAddNewTaskToReadyList>
 8005e70:	e001      	b.n	8005e76 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e76:	697b      	ldr	r3, [r7, #20]
	}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3728      	adds	r7, #40	; 0x28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08c      	sub	sp, #48	; 0x30
 8005e84:	af04      	add	r7, sp, #16
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e90:	88fb      	ldrh	r3, [r7, #6]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f9c1 	bl	800721c <pvPortMalloc>
 8005e9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ea2:	20a0      	movs	r0, #160	; 0xa0
 8005ea4:	f001 f9ba 	bl	800721c <pvPortMalloc>
 8005ea8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8005eb6:	e005      	b.n	8005ec4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005eb8:	6978      	ldr	r0, [r7, #20]
 8005eba:	f001 fa73 	bl	80073a4 <vPortFree>
 8005ebe:	e001      	b.n	8005ec4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d017      	beq.n	8005efa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9303      	str	r3, [sp, #12]
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f80f 	bl	8005f0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eee:	69f8      	ldr	r0, [r7, #28]
 8005ef0:	f000 f8a2 	bl	8006038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e002      	b.n	8005f00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005efa:	f04f 33ff 	mov.w	r3, #4294967295
 8005efe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f00:	69bb      	ldr	r3, [r7, #24]
	}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	3b01      	subs	r3, #1
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	617b      	str	r3, [r7, #20]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	e012      	b.n	8005f80 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	7819      	ldrb	r1, [r3, #0]
 8005f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	3334      	adds	r3, #52	; 0x34
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b0f      	cmp	r3, #15
 8005f84:	d9e9      	bls.n	8005f5a <prvInitialiseNewTask+0x4e>
 8005f86:	e000      	b.n	8005f8a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005f88:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	2b06      	cmp	r3, #6
 8005f96:	d901      	bls.n	8005f9c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f98:	2306      	movs	r3, #6
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fa6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	2200      	movs	r2, #0
 8005fac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff f8b0 	bl	8005118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	3318      	adds	r3, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff f8ab 	bl	8005118 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f1c3 0207 	rsb	r2, r3, #7
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	334c      	adds	r3, #76	; 0x4c
 8005fec:	224c      	movs	r2, #76	; 0x4c
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f001 fd1e 	bl	8007a32 <memset>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <prvInitialiseNewTask+0x120>)
 8005ffa:	651a      	str	r2, [r3, #80]	; 0x50
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <prvInitialiseNewTask+0x124>)
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <prvInitialiseNewTask+0x128>)
 8006006:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	69b8      	ldr	r0, [r7, #24]
 800600e:	f000 ff11 	bl	8006e34 <pxPortInitialiseStack>
 8006012:	4602      	mov	r2, r0
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006024:	bf00      	nop
 8006026:	3720      	adds	r7, #32
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	200032d4 	.word	0x200032d4
 8006030:	2000333c 	.word	0x2000333c
 8006034:	200033a4 	.word	0x200033a4

08006038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006040:	f000 ffec 	bl	800701c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006044:	4b2a      	ldr	r3, [pc, #168]	; (80060f0 <prvAddNewTaskToReadyList+0xb8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <prvAddNewTaskToReadyList+0xb8>)
 800604c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800604e:	4b29      	ldr	r3, [pc, #164]	; (80060f4 <prvAddNewTaskToReadyList+0xbc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006056:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <prvAddNewTaskToReadyList+0xbc>)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800605c:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <prvAddNewTaskToReadyList+0xb8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d110      	bne.n	8006086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006064:	f000 fbdc 	bl	8006820 <prvInitialiseTaskLists>
 8006068:	e00d      	b.n	8006086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800606a:	4b23      	ldr	r3, [pc, #140]	; (80060f8 <prvAddNewTaskToReadyList+0xc0>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006072:	4b20      	ldr	r3, [pc, #128]	; (80060f4 <prvAddNewTaskToReadyList+0xbc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	429a      	cmp	r2, r3
 800607e:	d802      	bhi.n	8006086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006080:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <prvAddNewTaskToReadyList+0xbc>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <prvAddNewTaskToReadyList+0xc4>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <prvAddNewTaskToReadyList+0xc4>)
 800608e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	2201      	movs	r2, #1
 8006096:	409a      	lsls	r2, r3
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4313      	orrs	r3, r2
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <prvAddNewTaskToReadyList+0xc8>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <prvAddNewTaskToReadyList+0xcc>)
 80060b0:	441a      	add	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f7ff f839 	bl	8005130 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060be:	f000 ffdd 	bl	800707c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <prvAddNewTaskToReadyList+0xc0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00e      	beq.n	80060e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <prvAddNewTaskToReadyList+0xbc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d207      	bcs.n	80060e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <prvAddNewTaskToReadyList+0xd0>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20002680 	.word	0x20002680
 80060f4:	20002580 	.word	0x20002580
 80060f8:	2000268c 	.word	0x2000268c
 80060fc:	2000269c 	.word	0x2000269c
 8006100:	20002688 	.word	0x20002688
 8006104:	20002584 	.word	0x20002584
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d017      	beq.n	800614e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800611e:	4b13      	ldr	r3, [pc, #76]	; (800616c <vTaskDelay+0x60>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <vTaskDelay+0x30>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60bb      	str	r3, [r7, #8]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800613c:	f000 f884 	bl	8006248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006140:	2100      	movs	r1, #0
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fe10 	bl	8006d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006148:	f000 f88c 	bl	8006264 <xTaskResumeAll>
 800614c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d107      	bne.n	8006164 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006154:	4b06      	ldr	r3, [pc, #24]	; (8006170 <vTaskDelay+0x64>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	200026a8 	.word	0x200026a8
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006182:	463a      	mov	r2, r7
 8006184:	1d39      	adds	r1, r7, #4
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	4618      	mov	r0, r3
 800618c:	f7fa fcae 	bl	8000aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	9202      	str	r2, [sp, #8]
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	2300      	movs	r3, #0
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2300      	movs	r3, #0
 80061a0:	460a      	mov	r2, r1
 80061a2:	4921      	ldr	r1, [pc, #132]	; (8006228 <vTaskStartScheduler+0xb4>)
 80061a4:	4821      	ldr	r0, [pc, #132]	; (800622c <vTaskStartScheduler+0xb8>)
 80061a6:	f7ff fe0f 	bl	8005dc8 <xTaskCreateStatic>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <vTaskStartScheduler+0xbc>)
 80061ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061b0:	4b1f      	ldr	r3, [pc, #124]	; (8006230 <vTaskStartScheduler+0xbc>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b8:	2301      	movs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e001      	b.n	80061c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d11b      	bne.n	8006200 <vTaskStartScheduler+0x8c>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	613b      	str	r3, [r7, #16]
}
 80061da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061dc:	4b15      	ldr	r3, [pc, #84]	; (8006234 <vTaskStartScheduler+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	334c      	adds	r3, #76	; 0x4c
 80061e2:	4a15      	ldr	r2, [pc, #84]	; (8006238 <vTaskStartScheduler+0xc4>)
 80061e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <vTaskStartScheduler+0xc8>)
 80061e8:	f04f 32ff 	mov.w	r2, #4294967295
 80061ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <vTaskStartScheduler+0xcc>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80061f4:	4b13      	ldr	r3, [pc, #76]	; (8006244 <vTaskStartScheduler+0xd0>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061fa:	f000 fe9d 	bl	8006f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061fe:	e00e      	b.n	800621e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d10a      	bne.n	800621e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <vTaskStartScheduler+0xa8>
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	08008b20 	.word	0x08008b20
 800622c:	080067f1 	.word	0x080067f1
 8006230:	200026a4 	.word	0x200026a4
 8006234:	20002580 	.word	0x20002580
 8006238:	20000080 	.word	0x20000080
 800623c:	200026a0 	.word	0x200026a0
 8006240:	2000268c 	.word	0x2000268c
 8006244:	20002684 	.word	0x20002684

08006248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <vTaskSuspendAll+0x18>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	4a03      	ldr	r2, [pc, #12]	; (8006260 <vTaskSuspendAll+0x18>)
 8006254:	6013      	str	r3, [r2, #0]
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	200026a8 	.word	0x200026a8

08006264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <xTaskResumeAll+0x114>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <xTaskResumeAll+0x2c>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	603b      	str	r3, [r7, #0]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006290:	f000 fec4 	bl	800701c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006294:	4b38      	ldr	r3, [pc, #224]	; (8006378 <xTaskResumeAll+0x114>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3b01      	subs	r3, #1
 800629a:	4a37      	ldr	r2, [pc, #220]	; (8006378 <xTaskResumeAll+0x114>)
 800629c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629e:	4b36      	ldr	r3, [pc, #216]	; (8006378 <xTaskResumeAll+0x114>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d161      	bne.n	800636a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062a6:	4b35      	ldr	r3, [pc, #212]	; (800637c <xTaskResumeAll+0x118>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d05d      	beq.n	800636a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ae:	e02e      	b.n	800630e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80062b0:	4b33      	ldr	r3, [pc, #204]	; (8006380 <xTaskResumeAll+0x11c>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3318      	adds	r3, #24
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe ff92 	bl	80051e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe ff8d 	bl	80051e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	2201      	movs	r2, #1
 80062d2:	409a      	lsls	r2, r3
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <xTaskResumeAll+0x120>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4313      	orrs	r3, r2
 80062da:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <xTaskResumeAll+0x120>)
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4a27      	ldr	r2, [pc, #156]	; (8006388 <xTaskResumeAll+0x124>)
 80062ec:	441a      	add	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f7fe ff1b 	bl	8005130 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fe:	4b23      	ldr	r3, [pc, #140]	; (800638c <xTaskResumeAll+0x128>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	429a      	cmp	r2, r3
 8006306:	d302      	bcc.n	800630e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006308:	4b21      	ldr	r3, [pc, #132]	; (8006390 <xTaskResumeAll+0x12c>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <xTaskResumeAll+0x11c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1cc      	bne.n	80062b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800631c:	f000 fb22 	bl	8006964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006320:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <xTaskResumeAll+0x130>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800632c:	f000 f836 	bl	800639c <xTaskIncrementTick>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006336:	4b16      	ldr	r3, [pc, #88]	; (8006390 <xTaskResumeAll+0x12c>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3b01      	subs	r3, #1
 8006340:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f1      	bne.n	800632c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006348:	4b12      	ldr	r3, [pc, #72]	; (8006394 <xTaskResumeAll+0x130>)
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTaskResumeAll+0x12c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800635a:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <xTaskResumeAll+0x134>)
 800635c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800636a:	f000 fe87 	bl	800707c <vPortExitCritical>

	return xAlreadyYielded;
 800636e:	68bb      	ldr	r3, [r7, #8]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200026a8 	.word	0x200026a8
 800637c:	20002680 	.word	0x20002680
 8006380:	20002640 	.word	0x20002640
 8006384:	20002688 	.word	0x20002688
 8006388:	20002584 	.word	0x20002584
 800638c:	20002580 	.word	0x20002580
 8006390:	20002694 	.word	0x20002694
 8006394:	20002690 	.word	0x20002690
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	4b51      	ldr	r3, [pc, #324]	; (80064ec <xTaskIncrementTick+0x150>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 808d 	bne.w	80064ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063b0:	4b4f      	ldr	r3, [pc, #316]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063b8:	4a4d      	ldr	r2, [pc, #308]	; (80064f0 <xTaskIncrementTick+0x154>)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d120      	bne.n	8006406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063c4:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <xTaskIncrementTick+0x158>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	603b      	str	r3, [r7, #0]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <xTaskIncrementTick+0x46>
 80063e4:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <xTaskIncrementTick+0x158>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <xTaskIncrementTick+0x15c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a41      	ldr	r2, [pc, #260]	; (80064f4 <xTaskIncrementTick+0x158>)
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4a41      	ldr	r2, [pc, #260]	; (80064f8 <xTaskIncrementTick+0x15c>)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	4b40      	ldr	r3, [pc, #256]	; (80064fc <xTaskIncrementTick+0x160>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <xTaskIncrementTick+0x160>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	f000 faaf 	bl	8006964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <xTaskIncrementTick+0x164>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	429a      	cmp	r2, r3
 800640e:	d34d      	bcc.n	80064ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006410:	4b38      	ldr	r3, [pc, #224]	; (80064f4 <xTaskIncrementTick+0x158>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xTaskIncrementTick+0x82>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xTaskIncrementTick+0x84>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006424:	4b36      	ldr	r3, [pc, #216]	; (8006500 <xTaskIncrementTick+0x164>)
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	601a      	str	r2, [r3, #0]
					break;
 800642c:	e03e      	b.n	80064ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <xTaskIncrementTick+0x158>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d203      	bcs.n	800644e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006446:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <xTaskIncrementTick+0x164>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6013      	str	r3, [r2, #0]
						break;
 800644c:	e02e      	b.n	80064ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3304      	adds	r3, #4
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fec7 	bl	80051e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe febe 	bl	80051e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	2201      	movs	r2, #1
 8006470:	409a      	lsls	r2, r3
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <xTaskIncrementTick+0x168>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	4a22      	ldr	r2, [pc, #136]	; (8006504 <xTaskIncrementTick+0x168>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <xTaskIncrementTick+0x16c>)
 800648a:	441a      	add	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe fe4c 	bl	8005130 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4b1b      	ldr	r3, [pc, #108]	; (800650c <xTaskIncrementTick+0x170>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3b4      	bcc.n	8006410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064aa:	e7b1      	b.n	8006410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064ac:	4b17      	ldr	r3, [pc, #92]	; (800650c <xTaskIncrementTick+0x170>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	4915      	ldr	r1, [pc, #84]	; (8006508 <xTaskIncrementTick+0x16c>)
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d907      	bls.n	80064d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e004      	b.n	80064d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <xTaskIncrementTick+0x174>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <xTaskIncrementTick+0x174>)
 80064d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <xTaskIncrementTick+0x178>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064e0:	697b      	ldr	r3, [r7, #20]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200026a8 	.word	0x200026a8
 80064f0:	20002684 	.word	0x20002684
 80064f4:	20002638 	.word	0x20002638
 80064f8:	2000263c 	.word	0x2000263c
 80064fc:	20002698 	.word	0x20002698
 8006500:	200026a0 	.word	0x200026a0
 8006504:	20002688 	.word	0x20002688
 8006508:	20002584 	.word	0x20002584
 800650c:	20002580 	.word	0x20002580
 8006510:	20002690 	.word	0x20002690
 8006514:	20002694 	.word	0x20002694

08006518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800651e:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <vTaskSwitchContext+0xac>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006526:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <vTaskSwitchContext+0xb0>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800652c:	e044      	b.n	80065b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800652e:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <vTaskSwitchContext+0xb0>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006534:	4b25      	ldr	r3, [pc, #148]	; (80065cc <vTaskSwitchContext+0xb4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	fab3 f383 	clz	r3, r3
 8006540:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	f1c3 031f 	rsb	r3, r3, #31
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	4921      	ldr	r1, [pc, #132]	; (80065d0 <vTaskSwitchContext+0xb8>)
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <vTaskSwitchContext+0x5c>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <vTaskSwitchContext+0x5a>
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4613      	mov	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <vTaskSwitchContext+0xb8>)
 8006580:	4413      	add	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	605a      	str	r2, [r3, #4]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3308      	adds	r3, #8
 8006596:	429a      	cmp	r2, r3
 8006598:	d104      	bne.n	80065a4 <vTaskSwitchContext+0x8c>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <vTaskSwitchContext+0xbc>)
 80065ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <vTaskSwitchContext+0xbc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	334c      	adds	r3, #76	; 0x4c
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <vTaskSwitchContext+0xc0>)
 80065b6:	6013      	str	r3, [r2, #0]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	200026a8 	.word	0x200026a8
 80065c8:	20002694 	.word	0x20002694
 80065cc:	20002688 	.word	0x20002688
 80065d0:	20002584 	.word	0x20002584
 80065d4:	20002580 	.word	0x20002580
 80065d8:	20000080 	.word	0x20000080

080065dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10a      	bne.n	8006602 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <vTaskPlaceOnEventList+0x44>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3318      	adds	r3, #24
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fe fdb3 	bl	8005176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006610:	2101      	movs	r1, #1
 8006612:	6838      	ldr	r0, [r7, #0]
 8006614:	f000 fba8 	bl	8006d68 <prvAddCurrentTaskToDelayedList>
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20002580 	.word	0x20002580

08006624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	3318      	adds	r3, #24
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fdc6 	bl	80051e6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <xTaskRemoveFromEventList+0xac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11c      	bne.n	800669c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe fdbd 	bl	80051e6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	2201      	movs	r2, #1
 8006672:	409a      	lsls	r2, r3
 8006674:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <xTaskRemoveFromEventList+0xb0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4313      	orrs	r3, r2
 800667a:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <xTaskRemoveFromEventList+0xb0>)
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <xTaskRemoveFromEventList+0xb4>)
 800668c:	441a      	add	r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fe fd4b 	bl	8005130 <vListInsertEnd>
 800669a:	e005      	b.n	80066a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3318      	adds	r3, #24
 80066a0:	4619      	mov	r1, r3
 80066a2:	480e      	ldr	r0, [pc, #56]	; (80066dc <xTaskRemoveFromEventList+0xb8>)
 80066a4:	f7fe fd44 	bl	8005130 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <xTaskRemoveFromEventList+0xbc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d905      	bls.n	80066c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <xTaskRemoveFromEventList+0xc0>)
 80066bc:	2201      	movs	r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e001      	b.n	80066c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066c6:	697b      	ldr	r3, [r7, #20]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200026a8 	.word	0x200026a8
 80066d4:	20002688 	.word	0x20002688
 80066d8:	20002584 	.word	0x20002584
 80066dc:	20002640 	.word	0x20002640
 80066e0:	20002580 	.word	0x20002580
 80066e4:	20002694 	.word	0x20002694

080066e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <vTaskInternalSetTimeOutState+0x24>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <vTaskInternalSetTimeOutState+0x28>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	20002698 	.word	0x20002698
 8006710:	20002684 	.word	0x20002684

08006714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	613b      	str	r3, [r7, #16]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006756:	f000 fc61 	bl	800701c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <xTaskCheckForTimeOut+0xbc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e023      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <xTaskCheckForTimeOut+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d007      	beq.n	8006796 <xTaskCheckForTimeOut+0x82>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e015      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d20b      	bcs.n	80067b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff9b 	bl	80066e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e004      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f000 fc5b 	bl	800707c <vPortExitCritical>

	return xReturn;
 80067c6:	69fb      	ldr	r3, [r7, #28]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20002684 	.word	0x20002684
 80067d4:	20002698 	.word	0x20002698

080067d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <vTaskMissedYield+0x14>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20002694 	.word	0x20002694

080067f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f8:	f000 f852 	bl	80068a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <prvIdleTask+0x28>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d9f9      	bls.n	80067f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <prvIdleTask+0x2c>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006814:	e7f0      	b.n	80067f8 <prvIdleTask+0x8>
 8006816:	bf00      	nop
 8006818:	20002584 	.word	0x20002584
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	e00c      	b.n	8006846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <prvInitialiseTaskLists+0x60>)
 8006838:	4413      	add	r3, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fc4d 	bl	80050da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3301      	adds	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b06      	cmp	r3, #6
 800684a:	d9ef      	bls.n	800682c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800684c:	480d      	ldr	r0, [pc, #52]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800684e:	f7fe fc44 	bl	80050da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006852:	480d      	ldr	r0, [pc, #52]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006854:	f7fe fc41 	bl	80050da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006858:	480c      	ldr	r0, [pc, #48]	; (800688c <prvInitialiseTaskLists+0x6c>)
 800685a:	f7fe fc3e 	bl	80050da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800685e:	480c      	ldr	r0, [pc, #48]	; (8006890 <prvInitialiseTaskLists+0x70>)
 8006860:	f7fe fc3b 	bl	80050da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006864:	480b      	ldr	r0, [pc, #44]	; (8006894 <prvInitialiseTaskLists+0x74>)
 8006866:	f7fe fc38 	bl	80050da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvInitialiseTaskLists+0x78>)
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800686e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvInitialiseTaskLists+0x7c>)
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20002584 	.word	0x20002584
 8006884:	20002610 	.word	0x20002610
 8006888:	20002624 	.word	0x20002624
 800688c:	20002640 	.word	0x20002640
 8006890:	20002654 	.word	0x20002654
 8006894:	2000266c 	.word	0x2000266c
 8006898:	20002638 	.word	0x20002638
 800689c:	2000263c 	.word	0x2000263c

080068a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a6:	e019      	b.n	80068dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068a8:	f000 fbb8 	bl	800701c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <prvCheckTasksWaitingTermination+0x50>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fc94 	bl	80051e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068d2:	f000 fbd3 	bl	800707c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f810 	bl	80068fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e1      	bne.n	80068a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20002654 	.word	0x20002654
 80068f4:	20002680 	.word	0x20002680
 80068f8:	20002668 	.word	0x20002668

080068fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	334c      	adds	r3, #76	; 0x4c
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f8ab 	bl	8007a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006914:	2b00      	cmp	r3, #0
 8006916:	d108      	bne.n	800692a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fd41 	bl	80073a4 <vPortFree>
				vPortFree( pxTCB );
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fd3e 	bl	80073a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006928:	e018      	b.n	800695c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006930:	2b01      	cmp	r3, #1
 8006932:	d103      	bne.n	800693c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fd35 	bl	80073a4 <vPortFree>
	}
 800693a:	e00f      	b.n	800695c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006942:	2b02      	cmp	r3, #2
 8006944:	d00a      	beq.n	800695c <prvDeleteTCB+0x60>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
}
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <prvDeleteTCB+0x5e>
	}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800696a:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <prvResetNextTaskUnblockTime+0x40>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <prvResetNextTaskUnblockTime+0x14>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <prvResetNextTaskUnblockTime+0x16>
 8006978:	2300      	movs	r3, #0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <prvResetNextTaskUnblockTime+0x44>)
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006986:	e008      	b.n	800699a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <prvResetNextTaskUnblockTime+0x40>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4a04      	ldr	r2, [pc, #16]	; (80069a8 <prvResetNextTaskUnblockTime+0x44>)
 8006998:	6013      	str	r3, [r2, #0]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	20002638 	.word	0x20002638
 80069a8:	200026a0 	.word	0x200026a0

080069ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <xTaskGetSchedulerState+0x34>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d102      	bne.n	80069c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ba:	2301      	movs	r3, #1
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e008      	b.n	80069d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <xTaskGetSchedulerState+0x38>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069c8:	2302      	movs	r3, #2
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	e001      	b.n	80069d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069d2:	687b      	ldr	r3, [r7, #4]
	}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	2000268c 	.word	0x2000268c
 80069e4:	200026a8 	.word	0x200026a8

080069e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d06e      	beq.n	8006adc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	4b39      	ldr	r3, [pc, #228]	; (8006ae8 <xTaskPriorityInherit+0x100>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d25e      	bcs.n	8006aca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db06      	blt.n	8006a22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	4b34      	ldr	r3, [pc, #208]	; (8006ae8 <xTaskPriorityInherit+0x100>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	f1c3 0207 	rsb	r2, r3, #7
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6959      	ldr	r1, [r3, #20]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4a2e      	ldr	r2, [pc, #184]	; (8006aec <xTaskPriorityInherit+0x104>)
 8006a34:	4413      	add	r3, r2
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d101      	bne.n	8006a3e <xTaskPriorityInherit+0x56>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <xTaskPriorityInherit+0x58>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d03a      	beq.n	8006aba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fbcc 	bl	80051e6 <uxListRemove>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d115      	bne.n	8006a80 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a58:	4924      	ldr	r1, [pc, #144]	; (8006aec <xTaskPriorityInherit+0x104>)
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <xTaskPriorityInherit+0x98>
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	fa02 f303 	lsl.w	r3, r2, r3
 8006a74:	43da      	mvns	r2, r3
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <xTaskPriorityInherit+0x108>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <xTaskPriorityInherit+0x108>)
 8006a7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a80:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <xTaskPriorityInherit+0x100>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	2201      	movs	r2, #1
 8006a90:	409a      	lsls	r2, r3
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <xTaskPriorityInherit+0x108>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <xTaskPriorityInherit+0x108>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a10      	ldr	r2, [pc, #64]	; (8006aec <xTaskPriorityInherit+0x104>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fe fb3c 	bl	8005130 <vListInsertEnd>
 8006ab8:	e004      	b.n	8006ac4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <xTaskPriorityInherit+0x100>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e008      	b.n	8006adc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <xTaskPriorityInherit+0x100>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d201      	bcs.n	8006adc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006adc:	68fb      	ldr	r3, [r7, #12]
	}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20002580 	.word	0x20002580
 8006aec:	20002584 	.word	0x20002584
 8006af0:	20002688 	.word	0x20002688

08006af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06e      	beq.n	8006be8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b0a:	4b3a      	ldr	r3, [pc, #232]	; (8006bf4 <xTaskPriorityDisinherit+0x100>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d00a      	beq.n	8006b2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10a      	bne.n	8006b48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60bb      	str	r3, [r7, #8]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d044      	beq.n	8006be8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d140      	bne.n	8006be8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3304      	adds	r3, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fb3b 	bl	80051e6 <uxListRemove>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d115      	bne.n	8006ba2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7a:	491f      	ldr	r1, [pc, #124]	; (8006bf8 <xTaskPriorityDisinherit+0x104>)
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10a      	bne.n	8006ba2 <xTaskPriorityDisinherit+0xae>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	2201      	movs	r2, #1
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	43da      	mvns	r2, r3
 8006b98:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <xTaskPriorityDisinherit+0x108>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	4a17      	ldr	r2, [pc, #92]	; (8006bfc <xTaskPriorityDisinherit+0x108>)
 8006ba0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	f1c3 0207 	rsb	r2, r3, #7
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	2201      	movs	r2, #1
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <xTaskPriorityDisinherit+0x108>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	4a0d      	ldr	r2, [pc, #52]	; (8006bfc <xTaskPriorityDisinherit+0x108>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <xTaskPriorityDisinherit+0x104>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe faa6 	bl	8005130 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be8:	697b      	ldr	r3, [r7, #20]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20002580 	.word	0x20002580
 8006bf8:	20002584 	.word	0x20002584
 8006bfc:	20002688 	.word	0x20002688

08006c00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f000 8088 	beq.w	8006d2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60fb      	str	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d902      	bls.n	8006c48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	e002      	b.n	8006c4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d068      	beq.n	8006d2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d163      	bne.n	8006d2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c62:	4b34      	ldr	r3, [pc, #208]	; (8006d34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d10a      	bne.n	8006c82 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60bb      	str	r3, [r7, #8]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	db04      	blt.n	8006ca0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	f1c3 0207 	rsb	r2, r3, #7
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	6959      	ldr	r1, [r3, #20]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cb0:	4413      	add	r3, r2
 8006cb2:	4299      	cmp	r1, r3
 8006cb4:	d101      	bne.n	8006cba <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d034      	beq.n	8006d2a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe fa8e 	bl	80051e6 <uxListRemove>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d115      	bne.n	8006cfc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4918      	ldr	r1, [pc, #96]	; (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	440b      	add	r3, r1
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	2201      	movs	r2, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	43da      	mvns	r2, r3
 8006cf2:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006cfa:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	2201      	movs	r2, #1
 8006d02:	409a      	lsls	r2, r3
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d1c:	441a      	add	r2, r3
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7fe fa03 	bl	8005130 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d2a:	bf00      	nop
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20002580 	.word	0x20002580
 8006d38:	20002584 	.word	0x20002584
 8006d3c:	20002688 	.word	0x20002688

08006d40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d52:	3201      	adds	r2, #1
 8006d54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d58:	681b      	ldr	r3, [r3, #0]
	}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20002580 	.word	0x20002580

08006d68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d72:	4b29      	ldr	r3, [pc, #164]	; (8006e18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d78:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fa31 	bl	80051e6 <uxListRemove>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006d8a:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	2201      	movs	r2, #1
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43da      	mvns	r2, r3
 8006d98:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	4a20      	ldr	r2, [pc, #128]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006da0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d10a      	bne.n	8006dc0 <prvAddCurrentTaskToDelayedList+0x58>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	481a      	ldr	r0, [pc, #104]	; (8006e24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006dba:	f7fe f9b9 	bl	8005130 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dbe:	e026      	b.n	8006e0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dc8:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d209      	bcs.n	8006dec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dd8:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f7fe f9c6 	bl	8005176 <vListInsert>
}
 8006dea:	e010      	b.n	8006e0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f7fe f9bc 	bl	8005176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d202      	bcs.n	8006e0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6013      	str	r3, [r2, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20002684 	.word	0x20002684
 8006e1c:	20002580 	.word	0x20002580
 8006e20:	20002688 	.word	0x20002688
 8006e24:	2000266c 	.word	0x2000266c
 8006e28:	2000263c 	.word	0x2000263c
 8006e2c:	20002638 	.word	0x20002638
 8006e30:	200026a0 	.word	0x200026a0

08006e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3b04      	subs	r3, #4
 8006e44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3b04      	subs	r3, #4
 8006e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <pxPortInitialiseStack+0x54>)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3b14      	subs	r3, #20
 8006e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3b20      	subs	r3, #32
 8006e7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	08006e8d 	.word	0x08006e8d

08006e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <prvTaskExitError+0x54>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d00a      	beq.n	8006eb6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <prvTaskExitError+0x28>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eca:	bf00      	nop
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0fc      	beq.n	8006ecc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000024 	.word	0x20000024
	...

08006ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f0e:	4770      	bx	lr

08006f10 <pxCurrentTCBConst2>:
 8006f10:	20002580 	.word	0x20002580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f18:	4806      	ldr	r0, [pc, #24]	; (8006f34 <prvPortStartFirstTask+0x1c>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f380 8808 	msr	MSP, r0
 8006f22:	b662      	cpsie	i
 8006f24:	b661      	cpsie	f
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	df00      	svc	0
 8006f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed08 	.word	0xe000ed08

08006f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f3e:	4b32      	ldr	r3, [pc, #200]	; (8007008 <xPortStartScheduler+0xd0>)
 8006f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4b2a      	ldr	r3, [pc, #168]	; (800700c <xPortStartScheduler+0xd4>)
 8006f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f66:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f68:	2207      	movs	r2, #7
 8006f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6c:	e009      	b.n	8006f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f6e:	4b28      	ldr	r3, [pc, #160]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d0ef      	beq.n	8006f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f8e:	4b20      	ldr	r3, [pc, #128]	; (8007010 <xPortStartScheduler+0xd8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f1c3 0307 	rsb	r3, r3, #7
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d00a      	beq.n	8006fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60bb      	str	r3, [r7, #8]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fb0:	4b17      	ldr	r3, [pc, #92]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fba:	4b15      	ldr	r3, [pc, #84]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fc2:	4a13      	ldr	r2, [pc, #76]	; (8007010 <xPortStartScheduler+0xd8>)
 8006fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fce:	4b11      	ldr	r3, [pc, #68]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a10      	ldr	r2, [pc, #64]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <xPortStartScheduler+0xdc>)
 8006fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fe6:	f000 f8b9 	bl	800715c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <xPortStartScheduler+0xe0>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ff0:	f7ff ff92 	bl	8006f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ff4:	f7ff fa90 	bl	8006518 <vTaskSwitchContext>
	prvTaskExitError();
 8006ff8:	f7ff ff48 	bl	8006e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	e000e400 	.word	0xe000e400
 800700c:	200026ac 	.word	0x200026ac
 8007010:	200026b0 	.word	0x200026b0
 8007014:	e000ed20 	.word	0xe000ed20
 8007018:	20000024 	.word	0x20000024

0800701c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	607b      	str	r3, [r7, #4]
}
 8007034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007036:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <vPortEnterCritical+0x58>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <vPortEnterCritical+0x58>)
 800703e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <vPortEnterCritical+0x58>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d10f      	bne.n	8007068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <vPortEnterCritical+0x5c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <vPortEnterCritical+0x4c>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	603b      	str	r3, [r7, #0]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <vPortEnterCritical+0x4a>
	}
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000024 	.word	0x20000024
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007082:	4b11      	ldr	r3, [pc, #68]	; (80070c8 <vPortExitCritical+0x4c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <vPortExitCritical+0x24>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	607b      	str	r3, [r7, #4]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <vPortExitCritical+0x4c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <vPortExitCritical+0x4c>)
 80070a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <vPortExitCritical+0x4c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <vPortExitCritical+0x42>
 80070b2:	2300      	movs	r3, #0
 80070b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f383 8811 	msr	BASEPRI, r3
}
 80070bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr
 80070c8:	20000024 	.word	0x20000024
 80070cc:	00000000 	.word	0x00000000

080070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070d0:	f3ef 8009 	mrs	r0, PSP
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <pxCurrentTCBConst>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80070e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070ea:	f380 8811 	msr	BASEPRI, r0
 80070ee:	f7ff fa13 	bl	8006518 <vTaskSwitchContext>
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007106:	f380 8809 	msr	PSP, r0
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	4770      	bx	lr

08007110 <pxCurrentTCBConst>:
 8007110:	20002580 	.word	0x20002580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007132:	f7ff f933 	bl	800639c <xTaskIncrementTick>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <xPortSysTickHandler+0x40>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <vPortSetupTimerInterrupt+0x30>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <vPortSetupTimerInterrupt+0x34>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <vPortSetupTimerInterrupt+0x38>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a09      	ldr	r2, [pc, #36]	; (8007198 <vPortSetupTimerInterrupt+0x3c>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <vPortSetupTimerInterrupt+0x40>)
 800717a:	3b01      	subs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <vPortSetupTimerInterrupt+0x30>)
 8007180:	2207      	movs	r2, #7
 8007182:	601a      	str	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr
 800718c:	e000e010 	.word	0xe000e010
 8007190:	e000e018 	.word	0xe000e018
 8007194:	20000004 	.word	0x20000004
 8007198:	10624dd3 	.word	0x10624dd3
 800719c:	e000e014 	.word	0xe000e014

080071a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b0f      	cmp	r3, #15
 80071b0:	d914      	bls.n	80071dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <vPortValidateInterruptPriority+0x6c>)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <vPortValidateInterruptPriority+0x70>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	7afa      	ldrb	r2, [r7, #11]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d20a      	bcs.n	80071dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	607b      	str	r3, [r7, #4]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <vPortValidateInterruptPriority+0x74>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80071e4:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <vPortValidateInterruptPriority+0x78>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d90a      	bls.n	8007202 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	603b      	str	r3, [r7, #0]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <vPortValidateInterruptPriority+0x60>
	}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	e000e3f0 	.word	0xe000e3f0
 8007210:	200026ac 	.word	0x200026ac
 8007214:	e000ed0c 	.word	0xe000ed0c
 8007218:	200026b0 	.word	0x200026b0

0800721c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007228:	f7ff f80e 	bl	8006248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800722c:	4b58      	ldr	r3, [pc, #352]	; (8007390 <pvPortMalloc+0x174>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007234:	f000 f910 	bl	8007458 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007238:	4b56      	ldr	r3, [pc, #344]	; (8007394 <pvPortMalloc+0x178>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4013      	ands	r3, r2
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 808e 	bne.w	8007362 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01d      	beq.n	8007288 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800724c:	2208      	movs	r2, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d014      	beq.n	8007288 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00a      	beq.n	8007288 <pvPortMalloc+0x6c>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	617b      	str	r3, [r7, #20]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d069      	beq.n	8007362 <pvPortMalloc+0x146>
 800728e:	4b42      	ldr	r3, [pc, #264]	; (8007398 <pvPortMalloc+0x17c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d864      	bhi.n	8007362 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007298:	4b40      	ldr	r3, [pc, #256]	; (800739c <pvPortMalloc+0x180>)
 800729a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800729c:	4b3f      	ldr	r3, [pc, #252]	; (800739c <pvPortMalloc+0x180>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072a2:	e004      	b.n	80072ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d903      	bls.n	80072c0 <pvPortMalloc+0xa4>
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f1      	bne.n	80072a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072c0:	4b33      	ldr	r3, [pc, #204]	; (8007390 <pvPortMalloc+0x174>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d04b      	beq.n	8007362 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2208      	movs	r2, #8
 80072d0:	4413      	add	r3, r2
 80072d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	2308      	movs	r3, #8
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d91f      	bls.n	800732c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <pvPortMalloc+0xf8>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	613b      	str	r3, [r7, #16]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007326:	69b8      	ldr	r0, [r7, #24]
 8007328:	f000 f8f8 	bl	800751c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800732c:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <pvPortMalloc+0x17c>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	4a18      	ldr	r2, [pc, #96]	; (8007398 <pvPortMalloc+0x17c>)
 8007338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800733a:	4b17      	ldr	r3, [pc, #92]	; (8007398 <pvPortMalloc+0x17c>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <pvPortMalloc+0x184>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d203      	bcs.n	800734e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007346:	4b14      	ldr	r3, [pc, #80]	; (8007398 <pvPortMalloc+0x17c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <pvPortMalloc+0x184>)
 800734c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	4b10      	ldr	r3, [pc, #64]	; (8007394 <pvPortMalloc+0x178>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	431a      	orrs	r2, r3
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007362:	f7fe ff7f 	bl	8006264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <pvPortMalloc+0x16a>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	60fb      	str	r3, [r7, #12]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <pvPortMalloc+0x168>
	return pvReturn;
 8007386:	69fb      	ldr	r3, [r7, #28]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	; 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200032bc 	.word	0x200032bc
 8007394:	200032c8 	.word	0x200032c8
 8007398:	200032c0 	.word	0x200032c0
 800739c:	200032b4 	.word	0x200032b4
 80073a0:	200032c4 	.word	0x200032c4

080073a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d048      	beq.n	8007448 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073b6:	2308      	movs	r3, #8
 80073b8:	425b      	negs	r3, r3
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	4b21      	ldr	r3, [pc, #132]	; (8007450 <vPortFree+0xac>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <vPortFree+0x44>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	60fb      	str	r3, [r7, #12]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <vPortFree+0x62>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	60bb      	str	r3, [r7, #8]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <vPortFree+0xac>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d115      	bne.n	8007448 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <vPortFree+0xac>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	43db      	mvns	r3, r3
 8007426:	401a      	ands	r2, r3
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800742c:	f7fe ff0c 	bl	8006248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <vPortFree+0xb0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4413      	add	r3, r2
 800743a:	4a06      	ldr	r2, [pc, #24]	; (8007454 <vPortFree+0xb0>)
 800743c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800743e:	6938      	ldr	r0, [r7, #16]
 8007440:	f000 f86c 	bl	800751c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007444:	f7fe ff0e 	bl	8006264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	200032c8 	.word	0x200032c8
 8007454:	200032c0 	.word	0x200032c0

08007458 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800745e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007462:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007464:	4b27      	ldr	r3, [pc, #156]	; (8007504 <prvHeapInit+0xac>)
 8007466:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00c      	beq.n	800748c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3307      	adds	r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <prvHeapInit+0xac>)
 8007488:	4413      	add	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007490:	4a1d      	ldr	r2, [pc, #116]	; (8007508 <prvHeapInit+0xb0>)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <prvHeapInit+0xb0>)
 8007498:	2200      	movs	r2, #0
 800749a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074a4:	2208      	movs	r2, #8
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0307 	bic.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <prvHeapInit+0xb4>)
 80074b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80074ba:	4b14      	ldr	r3, [pc, #80]	; (800750c <prvHeapInit+0xb4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <prvHeapInit+0xb4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074d8:	4b0c      	ldr	r3, [pc, #48]	; (800750c <prvHeapInit+0xb4>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <prvHeapInit+0xb8>)
 80074e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4a09      	ldr	r2, [pc, #36]	; (8007514 <prvHeapInit+0xbc>)
 80074ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <prvHeapInit+0xc0>)
 80074f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074f6:	601a      	str	r2, [r3, #0]
}
 80074f8:	bf00      	nop
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	200026b4 	.word	0x200026b4
 8007508:	200032b4 	.word	0x200032b4
 800750c:	200032bc 	.word	0x200032bc
 8007510:	200032c4 	.word	0x200032c4
 8007514:	200032c0 	.word	0x200032c0
 8007518:	200032c8 	.word	0x200032c8

0800751c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007524:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <prvInsertBlockIntoFreeList+0xa8>)
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e002      	b.n	8007530 <prvInsertBlockIntoFreeList+0x14>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d8f7      	bhi.n	800752a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4413      	add	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d108      	bne.n	800755e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	441a      	add	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	441a      	add	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d118      	bne.n	80075a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <prvInsertBlockIntoFreeList+0xac>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d00d      	beq.n	800759a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	441a      	add	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e008      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <prvInsertBlockIntoFreeList+0xac>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e003      	b.n	80075ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d002      	beq.n	80075ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	200032b4 	.word	0x200032b4
 80075c8:	200032bc 	.word	0x200032bc

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 b823 	b.w	800761c <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	20000080 	.word	0x20000080

080075dc <sbrk_aligned>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4e0e      	ldr	r6, [pc, #56]	; (8007618 <sbrk_aligned+0x3c>)
 80075e0:	460c      	mov	r4, r1
 80075e2:	6831      	ldr	r1, [r6, #0]
 80075e4:	4605      	mov	r5, r0
 80075e6:	b911      	cbnz	r1, 80075ee <sbrk_aligned+0x12>
 80075e8:	f000 fab6 	bl	8007b58 <_sbrk_r>
 80075ec:	6030      	str	r0, [r6, #0]
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 fab1 	bl	8007b58 <_sbrk_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d00a      	beq.n	8007610 <sbrk_aligned+0x34>
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d007      	beq.n	8007614 <sbrk_aligned+0x38>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4628      	mov	r0, r5
 8007608:	f000 faa6 	bl	8007b58 <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d101      	bne.n	8007614 <sbrk_aligned+0x38>
 8007610:	f04f 34ff 	mov.w	r4, #4294967295
 8007614:	4620      	mov	r0, r4
 8007616:	bd70      	pop	{r4, r5, r6, pc}
 8007618:	200032d0 	.word	0x200032d0

0800761c <_malloc_r>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	1ccd      	adds	r5, r1, #3
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	2d00      	cmp	r5, #0
 8007630:	4607      	mov	r7, r0
 8007632:	db01      	blt.n	8007638 <_malloc_r+0x1c>
 8007634:	42a9      	cmp	r1, r5
 8007636:	d905      	bls.n	8007644 <_malloc_r+0x28>
 8007638:	230c      	movs	r3, #12
 800763a:	2600      	movs	r6, #0
 800763c:	603b      	str	r3, [r7, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007718 <_malloc_r+0xfc>
 8007648:	f000 f868 	bl	800771c <__malloc_lock>
 800764c:	f8d8 3000 	ldr.w	r3, [r8]
 8007650:	461c      	mov	r4, r3
 8007652:	bb5c      	cbnz	r4, 80076ac <_malloc_r+0x90>
 8007654:	4629      	mov	r1, r5
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ffc0 	bl	80075dc <sbrk_aligned>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	4604      	mov	r4, r0
 8007660:	d155      	bne.n	800770e <_malloc_r+0xf2>
 8007662:	f8d8 4000 	ldr.w	r4, [r8]
 8007666:	4626      	mov	r6, r4
 8007668:	2e00      	cmp	r6, #0
 800766a:	d145      	bne.n	80076f8 <_malloc_r+0xdc>
 800766c:	2c00      	cmp	r4, #0
 800766e:	d048      	beq.n	8007702 <_malloc_r+0xe6>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	4631      	mov	r1, r6
 8007674:	4638      	mov	r0, r7
 8007676:	eb04 0903 	add.w	r9, r4, r3
 800767a:	f000 fa6d 	bl	8007b58 <_sbrk_r>
 800767e:	4581      	cmp	r9, r0
 8007680:	d13f      	bne.n	8007702 <_malloc_r+0xe6>
 8007682:	6821      	ldr	r1, [r4, #0]
 8007684:	4638      	mov	r0, r7
 8007686:	1a6d      	subs	r5, r5, r1
 8007688:	4629      	mov	r1, r5
 800768a:	f7ff ffa7 	bl	80075dc <sbrk_aligned>
 800768e:	3001      	adds	r0, #1
 8007690:	d037      	beq.n	8007702 <_malloc_r+0xe6>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	442b      	add	r3, r5
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	f8d8 3000 	ldr.w	r3, [r8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d038      	beq.n	8007712 <_malloc_r+0xf6>
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	42a2      	cmp	r2, r4
 80076a4:	d12b      	bne.n	80076fe <_malloc_r+0xe2>
 80076a6:	2200      	movs	r2, #0
 80076a8:	605a      	str	r2, [r3, #4]
 80076aa:	e00f      	b.n	80076cc <_malloc_r+0xb0>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	1b52      	subs	r2, r2, r5
 80076b0:	d41f      	bmi.n	80076f2 <_malloc_r+0xd6>
 80076b2:	2a0b      	cmp	r2, #11
 80076b4:	d917      	bls.n	80076e6 <_malloc_r+0xca>
 80076b6:	1961      	adds	r1, r4, r5
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	6025      	str	r5, [r4, #0]
 80076bc:	bf18      	it	ne
 80076be:	6059      	strne	r1, [r3, #4]
 80076c0:	6863      	ldr	r3, [r4, #4]
 80076c2:	bf08      	it	eq
 80076c4:	f8c8 1000 	streq.w	r1, [r8]
 80076c8:	5162      	str	r2, [r4, r5]
 80076ca:	604b      	str	r3, [r1, #4]
 80076cc:	4638      	mov	r0, r7
 80076ce:	f104 060b 	add.w	r6, r4, #11
 80076d2:	f000 f829 	bl	8007728 <__malloc_unlock>
 80076d6:	f026 0607 	bic.w	r6, r6, #7
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	1af2      	subs	r2, r6, r3
 80076de:	d0ae      	beq.n	800763e <_malloc_r+0x22>
 80076e0:	1b9b      	subs	r3, r3, r6
 80076e2:	50a3      	str	r3, [r4, r2]
 80076e4:	e7ab      	b.n	800763e <_malloc_r+0x22>
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	6862      	ldr	r2, [r4, #4]
 80076ea:	d1dd      	bne.n	80076a8 <_malloc_r+0x8c>
 80076ec:	f8c8 2000 	str.w	r2, [r8]
 80076f0:	e7ec      	b.n	80076cc <_malloc_r+0xb0>
 80076f2:	4623      	mov	r3, r4
 80076f4:	6864      	ldr	r4, [r4, #4]
 80076f6:	e7ac      	b.n	8007652 <_malloc_r+0x36>
 80076f8:	4634      	mov	r4, r6
 80076fa:	6876      	ldr	r6, [r6, #4]
 80076fc:	e7b4      	b.n	8007668 <_malloc_r+0x4c>
 80076fe:	4613      	mov	r3, r2
 8007700:	e7cc      	b.n	800769c <_malloc_r+0x80>
 8007702:	230c      	movs	r3, #12
 8007704:	4638      	mov	r0, r7
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	f000 f80e 	bl	8007728 <__malloc_unlock>
 800770c:	e797      	b.n	800763e <_malloc_r+0x22>
 800770e:	6025      	str	r5, [r4, #0]
 8007710:	e7dc      	b.n	80076cc <_malloc_r+0xb0>
 8007712:	605b      	str	r3, [r3, #4]
 8007714:	deff      	udf	#255	; 0xff
 8007716:	bf00      	nop
 8007718:	200032cc 	.word	0x200032cc

0800771c <__malloc_lock>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__malloc_lock+0x8>)
 800771e:	f000 ba67 	b.w	8007bf0 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	20003414 	.word	0x20003414

08007728 <__malloc_unlock>:
 8007728:	4801      	ldr	r0, [pc, #4]	; (8007730 <__malloc_unlock+0x8>)
 800772a:	f000 ba62 	b.w	8007bf2 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	20003414 	.word	0x20003414

08007734 <srand>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <srand+0x44>)
 8007738:	4604      	mov	r4, r0
 800773a:	681d      	ldr	r5, [r3, #0]
 800773c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800773e:	b9b3      	cbnz	r3, 800776e <srand+0x3a>
 8007740:	2018      	movs	r0, #24
 8007742:	f7ff ff43 	bl	80075cc <malloc>
 8007746:	4602      	mov	r2, r0
 8007748:	6328      	str	r0, [r5, #48]	; 0x30
 800774a:	b920      	cbnz	r0, 8007756 <srand+0x22>
 800774c:	2146      	movs	r1, #70	; 0x46
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <srand+0x48>)
 8007750:	480b      	ldr	r0, [pc, #44]	; (8007780 <srand+0x4c>)
 8007752:	f000 fa5d 	bl	8007c10 <__assert_func>
 8007756:	490b      	ldr	r1, [pc, #44]	; (8007784 <srand+0x50>)
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <srand+0x54>)
 800775a:	e9c0 1300 	strd	r1, r3, [r0]
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <srand+0x58>)
 8007760:	2100      	movs	r1, #0
 8007762:	6083      	str	r3, [r0, #8]
 8007764:	230b      	movs	r3, #11
 8007766:	8183      	strh	r3, [r0, #12]
 8007768:	2001      	movs	r0, #1
 800776a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800776e:	2200      	movs	r2, #0
 8007770:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007772:	611c      	str	r4, [r3, #16]
 8007774:	615a      	str	r2, [r3, #20]
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	20000080 	.word	0x20000080
 800777c:	08008b52 	.word	0x08008b52
 8007780:	08008b69 	.word	0x08008b69
 8007784:	abcd330e 	.word	0xabcd330e
 8007788:	e66d1234 	.word	0xe66d1234
 800778c:	0005deec 	.word	0x0005deec

08007790 <rand>:
 8007790:	4b16      	ldr	r3, [pc, #88]	; (80077ec <rand+0x5c>)
 8007792:	b510      	push	{r4, lr}
 8007794:	681c      	ldr	r4, [r3, #0]
 8007796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007798:	b9b3      	cbnz	r3, 80077c8 <rand+0x38>
 800779a:	2018      	movs	r0, #24
 800779c:	f7ff ff16 	bl	80075cc <malloc>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6320      	str	r0, [r4, #48]	; 0x30
 80077a4:	b920      	cbnz	r0, 80077b0 <rand+0x20>
 80077a6:	2152      	movs	r1, #82	; 0x52
 80077a8:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <rand+0x60>)
 80077aa:	4812      	ldr	r0, [pc, #72]	; (80077f4 <rand+0x64>)
 80077ac:	f000 fa30 	bl	8007c10 <__assert_func>
 80077b0:	4911      	ldr	r1, [pc, #68]	; (80077f8 <rand+0x68>)
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <rand+0x6c>)
 80077b4:	e9c0 1300 	strd	r1, r3, [r0]
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <rand+0x70>)
 80077ba:	2100      	movs	r1, #0
 80077bc:	6083      	str	r3, [r0, #8]
 80077be:	230b      	movs	r3, #11
 80077c0:	8183      	strh	r3, [r0, #12]
 80077c2:	2001      	movs	r0, #1
 80077c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80077c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80077ca:	480e      	ldr	r0, [pc, #56]	; (8007804 <rand+0x74>)
 80077cc:	690b      	ldr	r3, [r1, #16]
 80077ce:	694c      	ldr	r4, [r1, #20]
 80077d0:	4358      	muls	r0, r3
 80077d2:	4a0d      	ldr	r2, [pc, #52]	; (8007808 <rand+0x78>)
 80077d4:	fb02 0004 	mla	r0, r2, r4, r0
 80077d8:	fba3 3202 	umull	r3, r2, r3, r2
 80077dc:	3301      	adds	r3, #1
 80077de:	eb40 0002 	adc.w	r0, r0, r2
 80077e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80077e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80077ea:	bd10      	pop	{r4, pc}
 80077ec:	20000080 	.word	0x20000080
 80077f0:	08008b52 	.word	0x08008b52
 80077f4:	08008b69 	.word	0x08008b69
 80077f8:	abcd330e 	.word	0xabcd330e
 80077fc:	e66d1234 	.word	0xe66d1234
 8007800:	0005deec 	.word	0x0005deec
 8007804:	5851f42d 	.word	0x5851f42d
 8007808:	4c957f2d 	.word	0x4c957f2d

0800780c <std>:
 800780c:	2300      	movs	r3, #0
 800780e:	b510      	push	{r4, lr}
 8007810:	4604      	mov	r4, r0
 8007812:	e9c0 3300 	strd	r3, r3, [r0]
 8007816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800781a:	6083      	str	r3, [r0, #8]
 800781c:	8181      	strh	r1, [r0, #12]
 800781e:	6643      	str	r3, [r0, #100]	; 0x64
 8007820:	81c2      	strh	r2, [r0, #14]
 8007822:	6183      	str	r3, [r0, #24]
 8007824:	4619      	mov	r1, r3
 8007826:	2208      	movs	r2, #8
 8007828:	305c      	adds	r0, #92	; 0x5c
 800782a:	f000 f902 	bl	8007a32 <memset>
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <std+0x38>)
 8007830:	6224      	str	r4, [r4, #32]
 8007832:	6263      	str	r3, [r4, #36]	; 0x24
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <std+0x3c>)
 8007836:	62a3      	str	r3, [r4, #40]	; 0x28
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <std+0x40>)
 800783a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <std+0x44>)
 800783e:	6323      	str	r3, [r4, #48]	; 0x30
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	080079ad 	.word	0x080079ad
 8007848:	080079cf 	.word	0x080079cf
 800784c:	08007a07 	.word	0x08007a07
 8007850:	08007a2b 	.word	0x08007a2b

08007854 <stdio_exit_handler>:
 8007854:	4a02      	ldr	r2, [pc, #8]	; (8007860 <stdio_exit_handler+0xc>)
 8007856:	4903      	ldr	r1, [pc, #12]	; (8007864 <stdio_exit_handler+0x10>)
 8007858:	4803      	ldr	r0, [pc, #12]	; (8007868 <stdio_exit_handler+0x14>)
 800785a:	f000 b869 	b.w	8007930 <_fwalk_sglue>
 800785e:	bf00      	nop
 8007860:	20000028 	.word	0x20000028
 8007864:	080083b9 	.word	0x080083b9
 8007868:	20000034 	.word	0x20000034

0800786c <cleanup_stdio>:
 800786c:	6841      	ldr	r1, [r0, #4]
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <cleanup_stdio+0x34>)
 8007870:	b510      	push	{r4, lr}
 8007872:	4299      	cmp	r1, r3
 8007874:	4604      	mov	r4, r0
 8007876:	d001      	beq.n	800787c <cleanup_stdio+0x10>
 8007878:	f000 fd9e 	bl	80083b8 <_fflush_r>
 800787c:	68a1      	ldr	r1, [r4, #8]
 800787e:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <cleanup_stdio+0x38>)
 8007880:	4299      	cmp	r1, r3
 8007882:	d002      	beq.n	800788a <cleanup_stdio+0x1e>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fd97 	bl	80083b8 <_fflush_r>
 800788a:	68e1      	ldr	r1, [r4, #12]
 800788c:	4b06      	ldr	r3, [pc, #24]	; (80078a8 <cleanup_stdio+0x3c>)
 800788e:	4299      	cmp	r1, r3
 8007890:	d004      	beq.n	800789c <cleanup_stdio+0x30>
 8007892:	4620      	mov	r0, r4
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007898:	f000 bd8e 	b.w	80083b8 <_fflush_r>
 800789c:	bd10      	pop	{r4, pc}
 800789e:	bf00      	nop
 80078a0:	200032d4 	.word	0x200032d4
 80078a4:	2000333c 	.word	0x2000333c
 80078a8:	200033a4 	.word	0x200033a4

080078ac <global_stdio_init.part.0>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <global_stdio_init.part.0+0x30>)
 80078b0:	4c0b      	ldr	r4, [pc, #44]	; (80078e0 <global_stdio_init.part.0+0x34>)
 80078b2:	4a0c      	ldr	r2, [pc, #48]	; (80078e4 <global_stdio_init.part.0+0x38>)
 80078b4:	4620      	mov	r0, r4
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	2104      	movs	r1, #4
 80078ba:	2200      	movs	r2, #0
 80078bc:	f7ff ffa6 	bl	800780c <std>
 80078c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078c4:	2201      	movs	r2, #1
 80078c6:	2109      	movs	r1, #9
 80078c8:	f7ff ffa0 	bl	800780c <std>
 80078cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078d0:	2202      	movs	r2, #2
 80078d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d6:	2112      	movs	r1, #18
 80078d8:	f7ff bf98 	b.w	800780c <std>
 80078dc:	2000340c 	.word	0x2000340c
 80078e0:	200032d4 	.word	0x200032d4
 80078e4:	08007855 	.word	0x08007855

080078e8 <__sfp_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sfp_lock_acquire+0x8>)
 80078ea:	f000 b981 	b.w	8007bf0 <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20003415 	.word	0x20003415

080078f4 <__sfp_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sfp_lock_release+0x8>)
 80078f6:	f000 b97c 	b.w	8007bf2 <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20003415 	.word	0x20003415

08007900 <__sinit>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	f7ff fff0 	bl	80078e8 <__sfp_lock_acquire>
 8007908:	6a23      	ldr	r3, [r4, #32]
 800790a:	b11b      	cbz	r3, 8007914 <__sinit+0x14>
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f7ff bff0 	b.w	80078f4 <__sfp_lock_release>
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <__sinit+0x28>)
 8007916:	6223      	str	r3, [r4, #32]
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <__sinit+0x2c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f5      	bne.n	800790c <__sinit+0xc>
 8007920:	f7ff ffc4 	bl	80078ac <global_stdio_init.part.0>
 8007924:	e7f2      	b.n	800790c <__sinit+0xc>
 8007926:	bf00      	nop
 8007928:	0800786d 	.word	0x0800786d
 800792c:	2000340c 	.word	0x2000340c

08007930 <_fwalk_sglue>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4688      	mov	r8, r1
 8007938:	4614      	mov	r4, r2
 800793a:	2600      	movs	r6, #0
 800793c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007940:	f1b9 0901 	subs.w	r9, r9, #1
 8007944:	d505      	bpl.n	8007952 <_fwalk_sglue+0x22>
 8007946:	6824      	ldr	r4, [r4, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d1f7      	bne.n	800793c <_fwalk_sglue+0xc>
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d907      	bls.n	8007968 <_fwalk_sglue+0x38>
 8007958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	d003      	beq.n	8007968 <_fwalk_sglue+0x38>
 8007960:	4629      	mov	r1, r5
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	4306      	orrs	r6, r0
 8007968:	3568      	adds	r5, #104	; 0x68
 800796a:	e7e9      	b.n	8007940 <_fwalk_sglue+0x10>

0800796c <siprintf>:
 800796c:	b40e      	push	{r1, r2, r3}
 800796e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007972:	b500      	push	{lr}
 8007974:	b09c      	sub	sp, #112	; 0x70
 8007976:	ab1d      	add	r3, sp, #116	; 0x74
 8007978:	9002      	str	r0, [sp, #8]
 800797a:	9006      	str	r0, [sp, #24]
 800797c:	9107      	str	r1, [sp, #28]
 800797e:	9104      	str	r1, [sp, #16]
 8007980:	4808      	ldr	r0, [pc, #32]	; (80079a4 <siprintf+0x38>)
 8007982:	4909      	ldr	r1, [pc, #36]	; (80079a8 <siprintf+0x3c>)
 8007984:	f853 2b04 	ldr.w	r2, [r3], #4
 8007988:	9105      	str	r1, [sp, #20]
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	a902      	add	r1, sp, #8
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	f000 f9fe 	bl	8007d90 <_svfiprintf_r>
 8007994:	2200      	movs	r2, #0
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	b01c      	add	sp, #112	; 0x70
 800799c:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a0:	b003      	add	sp, #12
 80079a2:	4770      	bx	lr
 80079a4:	20000080 	.word	0x20000080
 80079a8:	ffff0208 	.word	0xffff0208

080079ac <__sread>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	460c      	mov	r4, r1
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	f000 f8be 	bl	8007b34 <_read_r>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	bfab      	itete	ge
 80079bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079be:	89a3      	ldrhlt	r3, [r4, #12]
 80079c0:	181b      	addge	r3, r3, r0
 80079c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079c6:	bfac      	ite	ge
 80079c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079ca:	81a3      	strhlt	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__swrite>:
 80079ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	461f      	mov	r7, r3
 80079d4:	898b      	ldrh	r3, [r1, #12]
 80079d6:	4605      	mov	r5, r0
 80079d8:	05db      	lsls	r3, r3, #23
 80079da:	460c      	mov	r4, r1
 80079dc:	4616      	mov	r6, r2
 80079de:	d505      	bpl.n	80079ec <__swrite+0x1e>
 80079e0:	2302      	movs	r3, #2
 80079e2:	2200      	movs	r2, #0
 80079e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e8:	f000 f892 	bl	8007b10 <_lseek_r>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	4632      	mov	r2, r6
 80079f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	4628      	mov	r0, r5
 80079f8:	463b      	mov	r3, r7
 80079fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a02:	f000 b8b9 	b.w	8007b78 <_write_r>

08007a06 <__sseek>:
 8007a06:	b510      	push	{r4, lr}
 8007a08:	460c      	mov	r4, r1
 8007a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0e:	f000 f87f 	bl	8007b10 <_lseek_r>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	bf15      	itete	ne
 8007a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a22:	81a3      	strheq	r3, [r4, #12]
 8007a24:	bf18      	it	ne
 8007a26:	81a3      	strhne	r3, [r4, #12]
 8007a28:	bd10      	pop	{r4, pc}

08007a2a <__sclose>:
 8007a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2e:	f000 b809 	b.w	8007a44 <_close_r>

08007a32 <memset>:
 8007a32:	4603      	mov	r3, r0
 8007a34:	4402      	add	r2, r0
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d100      	bne.n	8007a3c <memset+0xa>
 8007a3a:	4770      	bx	lr
 8007a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a40:	e7f9      	b.n	8007a36 <memset+0x4>
	...

08007a44 <_close_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	2300      	movs	r3, #0
 8007a48:	4d05      	ldr	r5, [pc, #20]	; (8007a60 <_close_r+0x1c>)
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7f9 fc24 	bl	800129c <_close>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_close_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_close_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20003410 	.word	0x20003410

08007a64 <_reclaim_reent>:
 8007a64:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <_reclaim_reent+0xa8>)
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4283      	cmp	r3, r0
 8007a6e:	d04b      	beq.n	8007b08 <_reclaim_reent+0xa4>
 8007a70:	69c3      	ldr	r3, [r0, #28]
 8007a72:	b143      	cbz	r3, 8007a86 <_reclaim_reent+0x22>
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d144      	bne.n	8007b04 <_reclaim_reent+0xa0>
 8007a7a:	69e3      	ldr	r3, [r4, #28]
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	b111      	cbz	r1, 8007a86 <_reclaim_reent+0x22>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f8e3 	bl	8007c4c <_free_r>
 8007a86:	6961      	ldr	r1, [r4, #20]
 8007a88:	b111      	cbz	r1, 8007a90 <_reclaim_reent+0x2c>
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 f8de 	bl	8007c4c <_free_r>
 8007a90:	69e1      	ldr	r1, [r4, #28]
 8007a92:	b111      	cbz	r1, 8007a9a <_reclaim_reent+0x36>
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 f8d9 	bl	8007c4c <_free_r>
 8007a9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007a9c:	b111      	cbz	r1, 8007aa4 <_reclaim_reent+0x40>
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f8d4 	bl	8007c4c <_free_r>
 8007aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa6:	b111      	cbz	r1, 8007aae <_reclaim_reent+0x4a>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 f8cf 	bl	8007c4c <_free_r>
 8007aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ab0:	b111      	cbz	r1, 8007ab8 <_reclaim_reent+0x54>
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f8ca 	bl	8007c4c <_free_r>
 8007ab8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007aba:	b111      	cbz	r1, 8007ac2 <_reclaim_reent+0x5e>
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 f8c5 	bl	8007c4c <_free_r>
 8007ac2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007ac4:	b111      	cbz	r1, 8007acc <_reclaim_reent+0x68>
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f000 f8c0 	bl	8007c4c <_free_r>
 8007acc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ace:	b111      	cbz	r1, 8007ad6 <_reclaim_reent+0x72>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f000 f8bb 	bl	8007c4c <_free_r>
 8007ad6:	6a23      	ldr	r3, [r4, #32]
 8007ad8:	b1b3      	cbz	r3, 8007b08 <_reclaim_reent+0xa4>
 8007ada:	4620      	mov	r0, r4
 8007adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ae0:	4718      	bx	r3
 8007ae2:	5949      	ldr	r1, [r1, r5]
 8007ae4:	b941      	cbnz	r1, 8007af8 <_reclaim_reent+0x94>
 8007ae6:	3504      	adds	r5, #4
 8007ae8:	69e3      	ldr	r3, [r4, #28]
 8007aea:	2d80      	cmp	r5, #128	; 0x80
 8007aec:	68d9      	ldr	r1, [r3, #12]
 8007aee:	d1f8      	bne.n	8007ae2 <_reclaim_reent+0x7e>
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 f8ab 	bl	8007c4c <_free_r>
 8007af6:	e7c0      	b.n	8007a7a <_reclaim_reent+0x16>
 8007af8:	680e      	ldr	r6, [r1, #0]
 8007afa:	4620      	mov	r0, r4
 8007afc:	f000 f8a6 	bl	8007c4c <_free_r>
 8007b00:	4631      	mov	r1, r6
 8007b02:	e7ef      	b.n	8007ae4 <_reclaim_reent+0x80>
 8007b04:	2500      	movs	r5, #0
 8007b06:	e7ef      	b.n	8007ae8 <_reclaim_reent+0x84>
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000080 	.word	0x20000080

08007b10 <_lseek_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4d05      	ldr	r5, [pc, #20]	; (8007b30 <_lseek_r+0x20>)
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7f9 fbe0 	bl	80012e4 <_lseek>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_lseek_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_lseek_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20003410 	.word	0x20003410

08007b34 <_read_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4d05      	ldr	r5, [pc, #20]	; (8007b54 <_read_r+0x20>)
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7f9 fb71 	bl	800122a <_read>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_read_r+0x1e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_read_r+0x1e>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20003410 	.word	0x20003410

08007b58 <_sbrk_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4d05      	ldr	r5, [pc, #20]	; (8007b74 <_sbrk_r+0x1c>)
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	602b      	str	r3, [r5, #0]
 8007b64:	f7f9 fbca 	bl	80012fc <_sbrk>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_sbrk_r+0x1a>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_sbrk_r+0x1a>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20003410 	.word	0x20003410

08007b78 <_write_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	2200      	movs	r2, #0
 8007b82:	4d05      	ldr	r5, [pc, #20]	; (8007b98 <_write_r+0x20>)
 8007b84:	602a      	str	r2, [r5, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f7f9 fb6c 	bl	8001264 <_write>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_write_r+0x1e>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_write_r+0x1e>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20003410 	.word	0x20003410

08007b9c <__errno>:
 8007b9c:	4b01      	ldr	r3, [pc, #4]	; (8007ba4 <__errno+0x8>)
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000080 	.word	0x20000080

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	2600      	movs	r6, #0
 8007bac:	4d0c      	ldr	r5, [pc, #48]	; (8007be0 <__libc_init_array+0x38>)
 8007bae:	4c0d      	ldr	r4, [pc, #52]	; (8007be4 <__libc_init_array+0x3c>)
 8007bb0:	1b64      	subs	r4, r4, r5
 8007bb2:	10a4      	asrs	r4, r4, #2
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	f000 ff3e 	bl	8008a38 <_init>
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	4d0a      	ldr	r5, [pc, #40]	; (8007be8 <__libc_init_array+0x40>)
 8007bc0:	4c0a      	ldr	r4, [pc, #40]	; (8007bec <__libc_init_array+0x44>)
 8007bc2:	1b64      	subs	r4, r4, r5
 8007bc4:	10a4      	asrs	r4, r4, #2
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	08008c30 	.word	0x08008c30
 8007be4:	08008c30 	.word	0x08008c30
 8007be8:	08008c30 	.word	0x08008c30
 8007bec:	08008c34 	.word	0x08008c34

08007bf0 <__retarget_lock_acquire_recursive>:
 8007bf0:	4770      	bx	lr

08007bf2 <__retarget_lock_release_recursive>:
 8007bf2:	4770      	bx	lr

08007bf4 <memcpy>:
 8007bf4:	440a      	add	r2, r1
 8007bf6:	4291      	cmp	r1, r2
 8007bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bfc:	d100      	bne.n	8007c00 <memcpy+0xc>
 8007bfe:	4770      	bx	lr
 8007c00:	b510      	push	{r4, lr}
 8007c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c06:	4291      	cmp	r1, r2
 8007c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c0c:	d1f9      	bne.n	8007c02 <memcpy+0xe>
 8007c0e:	bd10      	pop	{r4, pc}

08007c10 <__assert_func>:
 8007c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c12:	4614      	mov	r4, r2
 8007c14:	461a      	mov	r2, r3
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <__assert_func+0x2c>)
 8007c18:	4605      	mov	r5, r0
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68d8      	ldr	r0, [r3, #12]
 8007c1e:	b14c      	cbz	r4, 8007c34 <__assert_func+0x24>
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <__assert_func+0x30>)
 8007c22:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c26:	9100      	str	r1, [sp, #0]
 8007c28:	462b      	mov	r3, r5
 8007c2a:	4906      	ldr	r1, [pc, #24]	; (8007c44 <__assert_func+0x34>)
 8007c2c:	f000 fbec 	bl	8008408 <fiprintf>
 8007c30:	f000 fc24 	bl	800847c <abort>
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <__assert_func+0x38>)
 8007c36:	461c      	mov	r4, r3
 8007c38:	e7f3      	b.n	8007c22 <__assert_func+0x12>
 8007c3a:	bf00      	nop
 8007c3c:	20000080 	.word	0x20000080
 8007c40:	08008bc1 	.word	0x08008bc1
 8007c44:	08008bce 	.word	0x08008bce
 8007c48:	08008bfc 	.word	0x08008bfc

08007c4c <_free_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4605      	mov	r5, r0
 8007c50:	2900      	cmp	r1, #0
 8007c52:	d040      	beq.n	8007cd6 <_free_r+0x8a>
 8007c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c58:	1f0c      	subs	r4, r1, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfb8      	it	lt
 8007c5e:	18e4      	addlt	r4, r4, r3
 8007c60:	f7ff fd5c 	bl	800771c <__malloc_lock>
 8007c64:	4a1c      	ldr	r2, [pc, #112]	; (8007cd8 <_free_r+0x8c>)
 8007c66:	6813      	ldr	r3, [r2, #0]
 8007c68:	b933      	cbnz	r3, 8007c78 <_free_r+0x2c>
 8007c6a:	6063      	str	r3, [r4, #4]
 8007c6c:	6014      	str	r4, [r2, #0]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c74:	f7ff bd58 	b.w	8007728 <__malloc_unlock>
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	d908      	bls.n	8007c8e <_free_r+0x42>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	1821      	adds	r1, r4, r0
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf01      	itttt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	1809      	addeq	r1, r1, r0
 8007c8a:	6021      	streq	r1, [r4, #0]
 8007c8c:	e7ed      	b.n	8007c6a <_free_r+0x1e>
 8007c8e:	461a      	mov	r2, r3
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	b10b      	cbz	r3, 8007c98 <_free_r+0x4c>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d9fa      	bls.n	8007c8e <_free_r+0x42>
 8007c98:	6811      	ldr	r1, [r2, #0]
 8007c9a:	1850      	adds	r0, r2, r1
 8007c9c:	42a0      	cmp	r0, r4
 8007c9e:	d10b      	bne.n	8007cb8 <_free_r+0x6c>
 8007ca0:	6820      	ldr	r0, [r4, #0]
 8007ca2:	4401      	add	r1, r0
 8007ca4:	1850      	adds	r0, r2, r1
 8007ca6:	4283      	cmp	r3, r0
 8007ca8:	6011      	str	r1, [r2, #0]
 8007caa:	d1e0      	bne.n	8007c6e <_free_r+0x22>
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4408      	add	r0, r1
 8007cb2:	6010      	str	r0, [r2, #0]
 8007cb4:	6053      	str	r3, [r2, #4]
 8007cb6:	e7da      	b.n	8007c6e <_free_r+0x22>
 8007cb8:	d902      	bls.n	8007cc0 <_free_r+0x74>
 8007cba:	230c      	movs	r3, #12
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	e7d6      	b.n	8007c6e <_free_r+0x22>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	1821      	adds	r1, r4, r0
 8007cc4:	428b      	cmp	r3, r1
 8007cc6:	bf01      	itttt	eq
 8007cc8:	6819      	ldreq	r1, [r3, #0]
 8007cca:	685b      	ldreq	r3, [r3, #4]
 8007ccc:	1809      	addeq	r1, r1, r0
 8007cce:	6021      	streq	r1, [r4, #0]
 8007cd0:	6063      	str	r3, [r4, #4]
 8007cd2:	6054      	str	r4, [r2, #4]
 8007cd4:	e7cb      	b.n	8007c6e <_free_r+0x22>
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	200032cc 	.word	0x200032cc

08007cdc <__ssputs_r>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	461f      	mov	r7, r3
 8007ce2:	688e      	ldr	r6, [r1, #8]
 8007ce4:	4682      	mov	sl, r0
 8007ce6:	42be      	cmp	r6, r7
 8007ce8:	460c      	mov	r4, r1
 8007cea:	4690      	mov	r8, r2
 8007cec:	680b      	ldr	r3, [r1, #0]
 8007cee:	d82c      	bhi.n	8007d4a <__ssputs_r+0x6e>
 8007cf0:	898a      	ldrh	r2, [r1, #12]
 8007cf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cf6:	d026      	beq.n	8007d46 <__ssputs_r+0x6a>
 8007cf8:	6965      	ldr	r5, [r4, #20]
 8007cfa:	6909      	ldr	r1, [r1, #16]
 8007cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d00:	eba3 0901 	sub.w	r9, r3, r1
 8007d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d08:	1c7b      	adds	r3, r7, #1
 8007d0a:	444b      	add	r3, r9
 8007d0c:	106d      	asrs	r5, r5, #1
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	bf38      	it	cc
 8007d12:	461d      	movcc	r5, r3
 8007d14:	0553      	lsls	r3, r2, #21
 8007d16:	d527      	bpl.n	8007d68 <__ssputs_r+0x8c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7ff fc7f 	bl	800761c <_malloc_r>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	b360      	cbz	r0, 8007d7c <__ssputs_r+0xa0>
 8007d22:	464a      	mov	r2, r9
 8007d24:	6921      	ldr	r1, [r4, #16]
 8007d26:	f7ff ff65 	bl	8007bf4 <memcpy>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	6126      	str	r6, [r4, #16]
 8007d38:	444e      	add	r6, r9
 8007d3a:	6026      	str	r6, [r4, #0]
 8007d3c:	463e      	mov	r6, r7
 8007d3e:	6165      	str	r5, [r4, #20]
 8007d40:	eba5 0509 	sub.w	r5, r5, r9
 8007d44:	60a5      	str	r5, [r4, #8]
 8007d46:	42be      	cmp	r6, r7
 8007d48:	d900      	bls.n	8007d4c <__ssputs_r+0x70>
 8007d4a:	463e      	mov	r6, r7
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	4641      	mov	r1, r8
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	f000 fb6b 	bl	800842c <memmove>
 8007d56:	2000      	movs	r0, #0
 8007d58:	68a3      	ldr	r3, [r4, #8]
 8007d5a:	1b9b      	subs	r3, r3, r6
 8007d5c:	60a3      	str	r3, [r4, #8]
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	4433      	add	r3, r6
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	462a      	mov	r2, r5
 8007d6a:	f000 fb8e 	bl	800848a <_realloc_r>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1e0      	bne.n	8007d36 <__ssputs_r+0x5a>
 8007d74:	4650      	mov	r0, sl
 8007d76:	6921      	ldr	r1, [r4, #16]
 8007d78:	f7ff ff68 	bl	8007c4c <_free_r>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	f8ca 3000 	str.w	r3, [sl]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	e7e9      	b.n	8007d64 <__ssputs_r+0x88>

08007d90 <_svfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4698      	mov	r8, r3
 8007d96:	898b      	ldrh	r3, [r1, #12]
 8007d98:	4607      	mov	r7, r0
 8007d9a:	061b      	lsls	r3, r3, #24
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	4614      	mov	r4, r2
 8007da0:	b09d      	sub	sp, #116	; 0x74
 8007da2:	d50e      	bpl.n	8007dc2 <_svfiprintf_r+0x32>
 8007da4:	690b      	ldr	r3, [r1, #16]
 8007da6:	b963      	cbnz	r3, 8007dc2 <_svfiprintf_r+0x32>
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	f7ff fc37 	bl	800761c <_malloc_r>
 8007dae:	6028      	str	r0, [r5, #0]
 8007db0:	6128      	str	r0, [r5, #16]
 8007db2:	b920      	cbnz	r0, 8007dbe <_svfiprintf_r+0x2e>
 8007db4:	230c      	movs	r3, #12
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	e0d0      	b.n	8007f60 <_svfiprintf_r+0x1d0>
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	616b      	str	r3, [r5, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dcc:	2330      	movs	r3, #48	; 0x30
 8007dce:	f04f 0901 	mov.w	r9, #1
 8007dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007f78 <_svfiprintf_r+0x1e8>
 8007dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dde:	4623      	mov	r3, r4
 8007de0:	469a      	mov	sl, r3
 8007de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de6:	b10a      	cbz	r2, 8007dec <_svfiprintf_r+0x5c>
 8007de8:	2a25      	cmp	r2, #37	; 0x25
 8007dea:	d1f9      	bne.n	8007de0 <_svfiprintf_r+0x50>
 8007dec:	ebba 0b04 	subs.w	fp, sl, r4
 8007df0:	d00b      	beq.n	8007e0a <_svfiprintf_r+0x7a>
 8007df2:	465b      	mov	r3, fp
 8007df4:	4622      	mov	r2, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff6f 	bl	8007cdc <__ssputs_r>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	f000 80a9 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e06:	445a      	add	r2, fp
 8007e08:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a1 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e1e:	f10a 0a01 	add.w	sl, sl, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2c:	4654      	mov	r4, sl
 8007e2e:	2205      	movs	r2, #5
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	4850      	ldr	r0, [pc, #320]	; (8007f78 <_svfiprintf_r+0x1e8>)
 8007e36:	f000 fb13 	bl	8008460 <memchr>
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	b9d8      	cbnz	r0, 8007e76 <_svfiprintf_r+0xe6>
 8007e3e:	06d0      	lsls	r0, r2, #27
 8007e40:	bf44      	itt	mi
 8007e42:	2320      	movmi	r3, #32
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e48:	0711      	lsls	r1, r2, #28
 8007e4a:	bf44      	itt	mi
 8007e4c:	232b      	movmi	r3, #43	; 0x2b
 8007e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b2a      	cmp	r3, #42	; 0x2a
 8007e58:	d015      	beq.n	8007e86 <_svfiprintf_r+0xf6>
 8007e5a:	4654      	mov	r4, sl
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f04f 0c0a 	mov.w	ip, #10
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	4621      	mov	r1, r4
 8007e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6a:	3b30      	subs	r3, #48	; 0x30
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d94d      	bls.n	8007f0c <_svfiprintf_r+0x17c>
 8007e70:	b1b0      	cbz	r0, 8007ea0 <_svfiprintf_r+0x110>
 8007e72:	9207      	str	r2, [sp, #28]
 8007e74:	e014      	b.n	8007ea0 <_svfiprintf_r+0x110>
 8007e76:	eba0 0308 	sub.w	r3, r0, r8
 8007e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	46a2      	mov	sl, r4
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	e7d2      	b.n	8007e2c <_svfiprintf_r+0x9c>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	9103      	str	r1, [sp, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbb      	ittet	lt
 8007e92:	425b      	neglt	r3, r3
 8007e94:	f042 0202 	orrlt.w	r2, r2, #2
 8007e98:	9307      	strge	r3, [sp, #28]
 8007e9a:	9307      	strlt	r3, [sp, #28]
 8007e9c:	bfb8      	it	lt
 8007e9e:	9204      	strlt	r2, [sp, #16]
 8007ea0:	7823      	ldrb	r3, [r4, #0]
 8007ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea4:	d10c      	bne.n	8007ec0 <_svfiprintf_r+0x130>
 8007ea6:	7863      	ldrb	r3, [r4, #1]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d134      	bne.n	8007f16 <_svfiprintf_r+0x186>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3402      	adds	r4, #2
 8007eb0:	1d1a      	adds	r2, r3, #4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	9203      	str	r2, [sp, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bfb8      	it	lt
 8007eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007f7c <_svfiprintf_r+0x1ec>
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	7821      	ldrb	r1, [r4, #0]
 8007eca:	f000 fac9 	bl	8008460 <memchr>
 8007ece:	b138      	cbz	r0, 8007ee0 <_svfiprintf_r+0x150>
 8007ed0:	2240      	movs	r2, #64	; 0x40
 8007ed2:	9b04      	ldr	r3, [sp, #16]
 8007ed4:	eba0 000a 	sub.w	r0, r0, sl
 8007ed8:	4082      	lsls	r2, r0
 8007eda:	4313      	orrs	r3, r2
 8007edc:	3401      	adds	r4, #1
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	2206      	movs	r2, #6
 8007ee6:	4826      	ldr	r0, [pc, #152]	; (8007f80 <_svfiprintf_r+0x1f0>)
 8007ee8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eec:	f000 fab8 	bl	8008460 <memchr>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d038      	beq.n	8007f66 <_svfiprintf_r+0x1d6>
 8007ef4:	4b23      	ldr	r3, [pc, #140]	; (8007f84 <_svfiprintf_r+0x1f4>)
 8007ef6:	bb1b      	cbnz	r3, 8007f40 <_svfiprintf_r+0x1b0>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	3307      	adds	r3, #7
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	3308      	adds	r3, #8
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	4433      	add	r3, r6
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	e768      	b.n	8007dde <_svfiprintf_r+0x4e>
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	2001      	movs	r0, #1
 8007f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f14:	e7a6      	b.n	8007e64 <_svfiprintf_r+0xd4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	f04f 0c0a 	mov.w	ip, #10
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	3401      	adds	r4, #1
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f28:	3a30      	subs	r2, #48	; 0x30
 8007f2a:	2a09      	cmp	r2, #9
 8007f2c:	d903      	bls.n	8007f36 <_svfiprintf_r+0x1a6>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0c6      	beq.n	8007ec0 <_svfiprintf_r+0x130>
 8007f32:	9105      	str	r1, [sp, #20]
 8007f34:	e7c4      	b.n	8007ec0 <_svfiprintf_r+0x130>
 8007f36:	4604      	mov	r4, r0
 8007f38:	2301      	movs	r3, #1
 8007f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3e:	e7f0      	b.n	8007f22 <_svfiprintf_r+0x192>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4638      	mov	r0, r7
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <_svfiprintf_r+0x1f8>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	f3af 8000 	nop.w
 8007f50:	1c42      	adds	r2, r0, #1
 8007f52:	4606      	mov	r6, r0
 8007f54:	d1d6      	bne.n	8007f04 <_svfiprintf_r+0x174>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	065b      	lsls	r3, r3, #25
 8007f5a:	f53f af2d 	bmi.w	8007db8 <_svfiprintf_r+0x28>
 8007f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f60:	b01d      	add	sp, #116	; 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <_svfiprintf_r+0x1f8>)
 8007f70:	a904      	add	r1, sp, #16
 8007f72:	f000 f87d 	bl	8008070 <_printf_i>
 8007f76:	e7eb      	b.n	8007f50 <_svfiprintf_r+0x1c0>
 8007f78:	08008bfd 	.word	0x08008bfd
 8007f7c:	08008c03 	.word	0x08008c03
 8007f80:	08008c07 	.word	0x08008c07
 8007f84:	00000000 	.word	0x00000000
 8007f88:	08007cdd 	.word	0x08007cdd

08007f8c <_printf_common>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	4616      	mov	r6, r2
 8007f92:	4699      	mov	r9, r3
 8007f94:	688a      	ldr	r2, [r1, #8]
 8007f96:	690b      	ldr	r3, [r1, #16]
 8007f98:	4607      	mov	r7, r0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bfb8      	it	lt
 8007f9e:	4613      	movlt	r3, r2
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fac:	b10a      	cbz	r2, 8007fb2 <_printf_common+0x26>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	0699      	lsls	r1, r3, #26
 8007fb6:	bf42      	ittt	mi
 8007fb8:	6833      	ldrmi	r3, [r6, #0]
 8007fba:	3302      	addmi	r3, #2
 8007fbc:	6033      	strmi	r3, [r6, #0]
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	f015 0506 	ands.w	r5, r5, #6
 8007fc4:	d106      	bne.n	8007fd4 <_printf_common+0x48>
 8007fc6:	f104 0a19 	add.w	sl, r4, #25
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	6832      	ldr	r2, [r6, #0]
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc2b      	bgt.n	800802c <_printf_common+0xa0>
 8007fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd8:	1e13      	subs	r3, r2, #0
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	0692      	lsls	r2, r2, #26
 8007fe2:	d430      	bmi.n	8008046 <_printf_common+0xba>
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d023      	beq.n	800803a <_printf_common+0xae>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	6922      	ldr	r2, [r4, #16]
 8007ff6:	f003 0306 	and.w	r3, r3, #6
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	bf14      	ite	ne
 8007ffe:	2500      	movne	r5, #0
 8008000:	6833      	ldreq	r3, [r6, #0]
 8008002:	f04f 0600 	mov.w	r6, #0
 8008006:	bf08      	it	eq
 8008008:	68e5      	ldreq	r5, [r4, #12]
 800800a:	f104 041a 	add.w	r4, r4, #26
 800800e:	bf08      	it	eq
 8008010:	1aed      	subeq	r5, r5, r3
 8008012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008016:	bf08      	it	eq
 8008018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800801c:	4293      	cmp	r3, r2
 800801e:	bfc4      	itt	gt
 8008020:	1a9b      	subgt	r3, r3, r2
 8008022:	18ed      	addgt	r5, r5, r3
 8008024:	42b5      	cmp	r5, r6
 8008026:	d11a      	bne.n	800805e <_printf_common+0xd2>
 8008028:	2000      	movs	r0, #0
 800802a:	e008      	b.n	800803e <_printf_common+0xb2>
 800802c:	2301      	movs	r3, #1
 800802e:	4652      	mov	r2, sl
 8008030:	4649      	mov	r1, r9
 8008032:	4638      	mov	r0, r7
 8008034:	47c0      	blx	r8
 8008036:	3001      	adds	r0, #1
 8008038:	d103      	bne.n	8008042 <_printf_common+0xb6>
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	3501      	adds	r5, #1
 8008044:	e7c1      	b.n	8007fca <_printf_common+0x3e>
 8008046:	2030      	movs	r0, #48	; 0x30
 8008048:	18e1      	adds	r1, r4, r3
 800804a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008054:	4422      	add	r2, r4
 8008056:	3302      	adds	r3, #2
 8008058:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800805c:	e7c2      	b.n	8007fe4 <_printf_common+0x58>
 800805e:	2301      	movs	r3, #1
 8008060:	4622      	mov	r2, r4
 8008062:	4649      	mov	r1, r9
 8008064:	4638      	mov	r0, r7
 8008066:	47c0      	blx	r8
 8008068:	3001      	adds	r0, #1
 800806a:	d0e6      	beq.n	800803a <_printf_common+0xae>
 800806c:	3601      	adds	r6, #1
 800806e:	e7d9      	b.n	8008024 <_printf_common+0x98>

08008070 <_printf_i>:
 8008070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	7e0f      	ldrb	r7, [r1, #24]
 8008076:	4691      	mov	r9, r2
 8008078:	2f78      	cmp	r7, #120	; 0x78
 800807a:	4680      	mov	r8, r0
 800807c:	460c      	mov	r4, r1
 800807e:	469a      	mov	sl, r3
 8008080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008086:	d807      	bhi.n	8008098 <_printf_i+0x28>
 8008088:	2f62      	cmp	r7, #98	; 0x62
 800808a:	d80a      	bhi.n	80080a2 <_printf_i+0x32>
 800808c:	2f00      	cmp	r7, #0
 800808e:	f000 80d5 	beq.w	800823c <_printf_i+0x1cc>
 8008092:	2f58      	cmp	r7, #88	; 0x58
 8008094:	f000 80c1 	beq.w	800821a <_printf_i+0x1aa>
 8008098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800809c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080a0:	e03a      	b.n	8008118 <_printf_i+0xa8>
 80080a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080a6:	2b15      	cmp	r3, #21
 80080a8:	d8f6      	bhi.n	8008098 <_printf_i+0x28>
 80080aa:	a101      	add	r1, pc, #4	; (adr r1, 80080b0 <_printf_i+0x40>)
 80080ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b0:	08008109 	.word	0x08008109
 80080b4:	0800811d 	.word	0x0800811d
 80080b8:	08008099 	.word	0x08008099
 80080bc:	08008099 	.word	0x08008099
 80080c0:	08008099 	.word	0x08008099
 80080c4:	08008099 	.word	0x08008099
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	08008099 	.word	0x08008099
 80080d0:	08008099 	.word	0x08008099
 80080d4:	08008099 	.word	0x08008099
 80080d8:	08008099 	.word	0x08008099
 80080dc:	08008223 	.word	0x08008223
 80080e0:	08008149 	.word	0x08008149
 80080e4:	080081dd 	.word	0x080081dd
 80080e8:	08008099 	.word	0x08008099
 80080ec:	08008099 	.word	0x08008099
 80080f0:	08008245 	.word	0x08008245
 80080f4:	08008099 	.word	0x08008099
 80080f8:	08008149 	.word	0x08008149
 80080fc:	08008099 	.word	0x08008099
 8008100:	08008099 	.word	0x08008099
 8008104:	080081e5 	.word	0x080081e5
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	1d1a      	adds	r2, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	602a      	str	r2, [r5, #0]
 8008110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008118:	2301      	movs	r3, #1
 800811a:	e0a0      	b.n	800825e <_printf_i+0x1ee>
 800811c:	6820      	ldr	r0, [r4, #0]
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	0607      	lsls	r7, r0, #24
 8008122:	f103 0104 	add.w	r1, r3, #4
 8008126:	6029      	str	r1, [r5, #0]
 8008128:	d501      	bpl.n	800812e <_printf_i+0xbe>
 800812a:	681e      	ldr	r6, [r3, #0]
 800812c:	e003      	b.n	8008136 <_printf_i+0xc6>
 800812e:	0646      	lsls	r6, r0, #25
 8008130:	d5fb      	bpl.n	800812a <_printf_i+0xba>
 8008132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008136:	2e00      	cmp	r6, #0
 8008138:	da03      	bge.n	8008142 <_printf_i+0xd2>
 800813a:	232d      	movs	r3, #45	; 0x2d
 800813c:	4276      	negs	r6, r6
 800813e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008142:	230a      	movs	r3, #10
 8008144:	4859      	ldr	r0, [pc, #356]	; (80082ac <_printf_i+0x23c>)
 8008146:	e012      	b.n	800816e <_printf_i+0xfe>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6820      	ldr	r0, [r4, #0]
 800814c:	1d19      	adds	r1, r3, #4
 800814e:	6029      	str	r1, [r5, #0]
 8008150:	0605      	lsls	r5, r0, #24
 8008152:	d501      	bpl.n	8008158 <_printf_i+0xe8>
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	e002      	b.n	800815e <_printf_i+0xee>
 8008158:	0641      	lsls	r1, r0, #25
 800815a:	d5fb      	bpl.n	8008154 <_printf_i+0xe4>
 800815c:	881e      	ldrh	r6, [r3, #0]
 800815e:	2f6f      	cmp	r7, #111	; 0x6f
 8008160:	bf0c      	ite	eq
 8008162:	2308      	moveq	r3, #8
 8008164:	230a      	movne	r3, #10
 8008166:	4851      	ldr	r0, [pc, #324]	; (80082ac <_printf_i+0x23c>)
 8008168:	2100      	movs	r1, #0
 800816a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816e:	6865      	ldr	r5, [r4, #4]
 8008170:	2d00      	cmp	r5, #0
 8008172:	bfa8      	it	ge
 8008174:	6821      	ldrge	r1, [r4, #0]
 8008176:	60a5      	str	r5, [r4, #8]
 8008178:	bfa4      	itt	ge
 800817a:	f021 0104 	bicge.w	r1, r1, #4
 800817e:	6021      	strge	r1, [r4, #0]
 8008180:	b90e      	cbnz	r6, 8008186 <_printf_i+0x116>
 8008182:	2d00      	cmp	r5, #0
 8008184:	d04b      	beq.n	800821e <_printf_i+0x1ae>
 8008186:	4615      	mov	r5, r2
 8008188:	fbb6 f1f3 	udiv	r1, r6, r3
 800818c:	fb03 6711 	mls	r7, r3, r1, r6
 8008190:	5dc7      	ldrb	r7, [r0, r7]
 8008192:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008196:	4637      	mov	r7, r6
 8008198:	42bb      	cmp	r3, r7
 800819a:	460e      	mov	r6, r1
 800819c:	d9f4      	bls.n	8008188 <_printf_i+0x118>
 800819e:	2b08      	cmp	r3, #8
 80081a0:	d10b      	bne.n	80081ba <_printf_i+0x14a>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	07de      	lsls	r6, r3, #31
 80081a6:	d508      	bpl.n	80081ba <_printf_i+0x14a>
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	6861      	ldr	r1, [r4, #4]
 80081ac:	4299      	cmp	r1, r3
 80081ae:	bfde      	ittt	le
 80081b0:	2330      	movle	r3, #48	; 0x30
 80081b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081ba:	1b52      	subs	r2, r2, r5
 80081bc:	6122      	str	r2, [r4, #16]
 80081be:	464b      	mov	r3, r9
 80081c0:	4621      	mov	r1, r4
 80081c2:	4640      	mov	r0, r8
 80081c4:	f8cd a000 	str.w	sl, [sp]
 80081c8:	aa03      	add	r2, sp, #12
 80081ca:	f7ff fedf 	bl	8007f8c <_printf_common>
 80081ce:	3001      	adds	r0, #1
 80081d0:	d14a      	bne.n	8008268 <_printf_i+0x1f8>
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	b004      	add	sp, #16
 80081d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	f043 0320 	orr.w	r3, r3, #32
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	2778      	movs	r7, #120	; 0x78
 80081e6:	4832      	ldr	r0, [pc, #200]	; (80082b0 <_printf_i+0x240>)
 80081e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	6829      	ldr	r1, [r5, #0]
 80081f0:	061f      	lsls	r7, r3, #24
 80081f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80081f6:	d402      	bmi.n	80081fe <_printf_i+0x18e>
 80081f8:	065f      	lsls	r7, r3, #25
 80081fa:	bf48      	it	mi
 80081fc:	b2b6      	uxthmi	r6, r6
 80081fe:	07df      	lsls	r7, r3, #31
 8008200:	bf48      	it	mi
 8008202:	f043 0320 	orrmi.w	r3, r3, #32
 8008206:	6029      	str	r1, [r5, #0]
 8008208:	bf48      	it	mi
 800820a:	6023      	strmi	r3, [r4, #0]
 800820c:	b91e      	cbnz	r6, 8008216 <_printf_i+0x1a6>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	f023 0320 	bic.w	r3, r3, #32
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	2310      	movs	r3, #16
 8008218:	e7a6      	b.n	8008168 <_printf_i+0xf8>
 800821a:	4824      	ldr	r0, [pc, #144]	; (80082ac <_printf_i+0x23c>)
 800821c:	e7e4      	b.n	80081e8 <_printf_i+0x178>
 800821e:	4615      	mov	r5, r2
 8008220:	e7bd      	b.n	800819e <_printf_i+0x12e>
 8008222:	682b      	ldr	r3, [r5, #0]
 8008224:	6826      	ldr	r6, [r4, #0]
 8008226:	1d18      	adds	r0, r3, #4
 8008228:	6961      	ldr	r1, [r4, #20]
 800822a:	6028      	str	r0, [r5, #0]
 800822c:	0635      	lsls	r5, r6, #24
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	d501      	bpl.n	8008236 <_printf_i+0x1c6>
 8008232:	6019      	str	r1, [r3, #0]
 8008234:	e002      	b.n	800823c <_printf_i+0x1cc>
 8008236:	0670      	lsls	r0, r6, #25
 8008238:	d5fb      	bpl.n	8008232 <_printf_i+0x1c2>
 800823a:	8019      	strh	r1, [r3, #0]
 800823c:	2300      	movs	r3, #0
 800823e:	4615      	mov	r5, r2
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	e7bc      	b.n	80081be <_printf_i+0x14e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	2100      	movs	r1, #0
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	602a      	str	r2, [r5, #0]
 800824c:	681d      	ldr	r5, [r3, #0]
 800824e:	6862      	ldr	r2, [r4, #4]
 8008250:	4628      	mov	r0, r5
 8008252:	f000 f905 	bl	8008460 <memchr>
 8008256:	b108      	cbz	r0, 800825c <_printf_i+0x1ec>
 8008258:	1b40      	subs	r0, r0, r5
 800825a:	6060      	str	r0, [r4, #4]
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	2300      	movs	r3, #0
 8008262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008266:	e7aa      	b.n	80081be <_printf_i+0x14e>
 8008268:	462a      	mov	r2, r5
 800826a:	4649      	mov	r1, r9
 800826c:	4640      	mov	r0, r8
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	47d0      	blx	sl
 8008272:	3001      	adds	r0, #1
 8008274:	d0ad      	beq.n	80081d2 <_printf_i+0x162>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	079b      	lsls	r3, r3, #30
 800827a:	d413      	bmi.n	80082a4 <_printf_i+0x234>
 800827c:	68e0      	ldr	r0, [r4, #12]
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	4298      	cmp	r0, r3
 8008282:	bfb8      	it	lt
 8008284:	4618      	movlt	r0, r3
 8008286:	e7a6      	b.n	80081d6 <_printf_i+0x166>
 8008288:	2301      	movs	r3, #1
 800828a:	4632      	mov	r2, r6
 800828c:	4649      	mov	r1, r9
 800828e:	4640      	mov	r0, r8
 8008290:	47d0      	blx	sl
 8008292:	3001      	adds	r0, #1
 8008294:	d09d      	beq.n	80081d2 <_printf_i+0x162>
 8008296:	3501      	adds	r5, #1
 8008298:	68e3      	ldr	r3, [r4, #12]
 800829a:	9903      	ldr	r1, [sp, #12]
 800829c:	1a5b      	subs	r3, r3, r1
 800829e:	42ab      	cmp	r3, r5
 80082a0:	dcf2      	bgt.n	8008288 <_printf_i+0x218>
 80082a2:	e7eb      	b.n	800827c <_printf_i+0x20c>
 80082a4:	2500      	movs	r5, #0
 80082a6:	f104 0619 	add.w	r6, r4, #25
 80082aa:	e7f5      	b.n	8008298 <_printf_i+0x228>
 80082ac:	08008c0e 	.word	0x08008c0e
 80082b0:	08008c1f 	.word	0x08008c1f

080082b4 <__sflush_r>:
 80082b4:	898a      	ldrh	r2, [r1, #12]
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	4605      	mov	r5, r0
 80082ba:	0710      	lsls	r0, r2, #28
 80082bc:	460c      	mov	r4, r1
 80082be:	d457      	bmi.n	8008370 <__sflush_r+0xbc>
 80082c0:	684b      	ldr	r3, [r1, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dc04      	bgt.n	80082d0 <__sflush_r+0x1c>
 80082c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dc01      	bgt.n	80082d0 <__sflush_r+0x1c>
 80082cc:	2000      	movs	r0, #0
 80082ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0fa      	beq.n	80082cc <__sflush_r+0x18>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082dc:	682f      	ldr	r7, [r5, #0]
 80082de:	6a21      	ldr	r1, [r4, #32]
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	d032      	beq.n	800834a <__sflush_r+0x96>
 80082e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	075a      	lsls	r2, r3, #29
 80082ea:	d505      	bpl.n	80082f8 <__sflush_r+0x44>
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	1ac0      	subs	r0, r0, r3
 80082f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f2:	b10b      	cbz	r3, 80082f8 <__sflush_r+0x44>
 80082f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f6:	1ac0      	subs	r0, r0, r3
 80082f8:	2300      	movs	r3, #0
 80082fa:	4602      	mov	r2, r0
 80082fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082fe:	4628      	mov	r0, r5
 8008300:	6a21      	ldr	r1, [r4, #32]
 8008302:	47b0      	blx	r6
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	d106      	bne.n	8008318 <__sflush_r+0x64>
 800830a:	6829      	ldr	r1, [r5, #0]
 800830c:	291d      	cmp	r1, #29
 800830e:	d82b      	bhi.n	8008368 <__sflush_r+0xb4>
 8008310:	4a28      	ldr	r2, [pc, #160]	; (80083b4 <__sflush_r+0x100>)
 8008312:	410a      	asrs	r2, r1
 8008314:	07d6      	lsls	r6, r2, #31
 8008316:	d427      	bmi.n	8008368 <__sflush_r+0xb4>
 8008318:	2200      	movs	r2, #0
 800831a:	6062      	str	r2, [r4, #4]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	04d9      	lsls	r1, r3, #19
 8008320:	6022      	str	r2, [r4, #0]
 8008322:	d504      	bpl.n	800832e <__sflush_r+0x7a>
 8008324:	1c42      	adds	r2, r0, #1
 8008326:	d101      	bne.n	800832c <__sflush_r+0x78>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b903      	cbnz	r3, 800832e <__sflush_r+0x7a>
 800832c:	6560      	str	r0, [r4, #84]	; 0x54
 800832e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008330:	602f      	str	r7, [r5, #0]
 8008332:	2900      	cmp	r1, #0
 8008334:	d0ca      	beq.n	80082cc <__sflush_r+0x18>
 8008336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833a:	4299      	cmp	r1, r3
 800833c:	d002      	beq.n	8008344 <__sflush_r+0x90>
 800833e:	4628      	mov	r0, r5
 8008340:	f7ff fc84 	bl	8007c4c <_free_r>
 8008344:	2000      	movs	r0, #0
 8008346:	6360      	str	r0, [r4, #52]	; 0x34
 8008348:	e7c1      	b.n	80082ce <__sflush_r+0x1a>
 800834a:	2301      	movs	r3, #1
 800834c:	4628      	mov	r0, r5
 800834e:	47b0      	blx	r6
 8008350:	1c41      	adds	r1, r0, #1
 8008352:	d1c8      	bne.n	80082e6 <__sflush_r+0x32>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c5      	beq.n	80082e6 <__sflush_r+0x32>
 800835a:	2b1d      	cmp	r3, #29
 800835c:	d001      	beq.n	8008362 <__sflush_r+0xae>
 800835e:	2b16      	cmp	r3, #22
 8008360:	d101      	bne.n	8008366 <__sflush_r+0xb2>
 8008362:	602f      	str	r7, [r5, #0]
 8008364:	e7b2      	b.n	80082cc <__sflush_r+0x18>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	e7ae      	b.n	80082ce <__sflush_r+0x1a>
 8008370:	690f      	ldr	r7, [r1, #16]
 8008372:	2f00      	cmp	r7, #0
 8008374:	d0aa      	beq.n	80082cc <__sflush_r+0x18>
 8008376:	0793      	lsls	r3, r2, #30
 8008378:	bf18      	it	ne
 800837a:	2300      	movne	r3, #0
 800837c:	680e      	ldr	r6, [r1, #0]
 800837e:	bf08      	it	eq
 8008380:	694b      	ldreq	r3, [r1, #20]
 8008382:	1bf6      	subs	r6, r6, r7
 8008384:	600f      	str	r7, [r1, #0]
 8008386:	608b      	str	r3, [r1, #8]
 8008388:	2e00      	cmp	r6, #0
 800838a:	dd9f      	ble.n	80082cc <__sflush_r+0x18>
 800838c:	4633      	mov	r3, r6
 800838e:	463a      	mov	r2, r7
 8008390:	4628      	mov	r0, r5
 8008392:	6a21      	ldr	r1, [r4, #32]
 8008394:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008398:	47e0      	blx	ip
 800839a:	2800      	cmp	r0, #0
 800839c:	dc06      	bgt.n	80083ac <__sflush_r+0xf8>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	e790      	b.n	80082ce <__sflush_r+0x1a>
 80083ac:	4407      	add	r7, r0
 80083ae:	1a36      	subs	r6, r6, r0
 80083b0:	e7ea      	b.n	8008388 <__sflush_r+0xd4>
 80083b2:	bf00      	nop
 80083b4:	dfbffffe 	.word	0xdfbffffe

080083b8 <_fflush_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b913      	cbnz	r3, 80083c8 <_fflush_r+0x10>
 80083c2:	2500      	movs	r5, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	b118      	cbz	r0, 80083d2 <_fflush_r+0x1a>
 80083ca:	6a03      	ldr	r3, [r0, #32]
 80083cc:	b90b      	cbnz	r3, 80083d2 <_fflush_r+0x1a>
 80083ce:	f7ff fa97 	bl	8007900 <__sinit>
 80083d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0f3      	beq.n	80083c2 <_fflush_r+0xa>
 80083da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083dc:	07d0      	lsls	r0, r2, #31
 80083de:	d404      	bmi.n	80083ea <_fflush_r+0x32>
 80083e0:	0599      	lsls	r1, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_fflush_r+0x32>
 80083e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e6:	f7ff fc03 	bl	8007bf0 <__retarget_lock_acquire_recursive>
 80083ea:	4628      	mov	r0, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7ff ff61 	bl	80082b4 <__sflush_r>
 80083f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f4:	4605      	mov	r5, r0
 80083f6:	07da      	lsls	r2, r3, #31
 80083f8:	d4e4      	bmi.n	80083c4 <_fflush_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	059b      	lsls	r3, r3, #22
 80083fe:	d4e1      	bmi.n	80083c4 <_fflush_r+0xc>
 8008400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008402:	f7ff fbf6 	bl	8007bf2 <__retarget_lock_release_recursive>
 8008406:	e7dd      	b.n	80083c4 <_fflush_r+0xc>

08008408 <fiprintf>:
 8008408:	b40e      	push	{r1, r2, r3}
 800840a:	b503      	push	{r0, r1, lr}
 800840c:	4601      	mov	r1, r0
 800840e:	ab03      	add	r3, sp, #12
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <fiprintf+0x20>)
 8008412:	f853 2b04 	ldr.w	r2, [r3], #4
 8008416:	6800      	ldr	r0, [r0, #0]
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	f000 f88d 	bl	8008538 <_vfiprintf_r>
 800841e:	b002      	add	sp, #8
 8008420:	f85d eb04 	ldr.w	lr, [sp], #4
 8008424:	b003      	add	sp, #12
 8008426:	4770      	bx	lr
 8008428:	20000080 	.word	0x20000080

0800842c <memmove>:
 800842c:	4288      	cmp	r0, r1
 800842e:	b510      	push	{r4, lr}
 8008430:	eb01 0402 	add.w	r4, r1, r2
 8008434:	d902      	bls.n	800843c <memmove+0x10>
 8008436:	4284      	cmp	r4, r0
 8008438:	4623      	mov	r3, r4
 800843a:	d807      	bhi.n	800844c <memmove+0x20>
 800843c:	1e43      	subs	r3, r0, #1
 800843e:	42a1      	cmp	r1, r4
 8008440:	d008      	beq.n	8008454 <memmove+0x28>
 8008442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800844a:	e7f8      	b.n	800843e <memmove+0x12>
 800844c:	4601      	mov	r1, r0
 800844e:	4402      	add	r2, r0
 8008450:	428a      	cmp	r2, r1
 8008452:	d100      	bne.n	8008456 <memmove+0x2a>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800845a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800845e:	e7f7      	b.n	8008450 <memmove+0x24>

08008460 <memchr>:
 8008460:	4603      	mov	r3, r0
 8008462:	b510      	push	{r4, lr}
 8008464:	b2c9      	uxtb	r1, r1
 8008466:	4402      	add	r2, r0
 8008468:	4293      	cmp	r3, r2
 800846a:	4618      	mov	r0, r3
 800846c:	d101      	bne.n	8008472 <memchr+0x12>
 800846e:	2000      	movs	r0, #0
 8008470:	e003      	b.n	800847a <memchr+0x1a>
 8008472:	7804      	ldrb	r4, [r0, #0]
 8008474:	3301      	adds	r3, #1
 8008476:	428c      	cmp	r4, r1
 8008478:	d1f6      	bne.n	8008468 <memchr+0x8>
 800847a:	bd10      	pop	{r4, pc}

0800847c <abort>:
 800847c:	2006      	movs	r0, #6
 800847e:	b508      	push	{r3, lr}
 8008480:	f000 fa32 	bl	80088e8 <raise>
 8008484:	2001      	movs	r0, #1
 8008486:	f7f8 fec6 	bl	8001216 <_exit>

0800848a <_realloc_r>:
 800848a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848e:	4680      	mov	r8, r0
 8008490:	4614      	mov	r4, r2
 8008492:	460e      	mov	r6, r1
 8008494:	b921      	cbnz	r1, 80084a0 <_realloc_r+0x16>
 8008496:	4611      	mov	r1, r2
 8008498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800849c:	f7ff b8be 	b.w	800761c <_malloc_r>
 80084a0:	b92a      	cbnz	r2, 80084ae <_realloc_r+0x24>
 80084a2:	f7ff fbd3 	bl	8007c4c <_free_r>
 80084a6:	4625      	mov	r5, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ae:	f000 fa37 	bl	8008920 <_malloc_usable_size_r>
 80084b2:	4284      	cmp	r4, r0
 80084b4:	4607      	mov	r7, r0
 80084b6:	d802      	bhi.n	80084be <_realloc_r+0x34>
 80084b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084bc:	d812      	bhi.n	80084e4 <_realloc_r+0x5a>
 80084be:	4621      	mov	r1, r4
 80084c0:	4640      	mov	r0, r8
 80084c2:	f7ff f8ab 	bl	800761c <_malloc_r>
 80084c6:	4605      	mov	r5, r0
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d0ed      	beq.n	80084a8 <_realloc_r+0x1e>
 80084cc:	42bc      	cmp	r4, r7
 80084ce:	4622      	mov	r2, r4
 80084d0:	4631      	mov	r1, r6
 80084d2:	bf28      	it	cs
 80084d4:	463a      	movcs	r2, r7
 80084d6:	f7ff fb8d 	bl	8007bf4 <memcpy>
 80084da:	4631      	mov	r1, r6
 80084dc:	4640      	mov	r0, r8
 80084de:	f7ff fbb5 	bl	8007c4c <_free_r>
 80084e2:	e7e1      	b.n	80084a8 <_realloc_r+0x1e>
 80084e4:	4635      	mov	r5, r6
 80084e6:	e7df      	b.n	80084a8 <_realloc_r+0x1e>

080084e8 <__sfputc_r>:
 80084e8:	6893      	ldr	r3, [r2, #8]
 80084ea:	b410      	push	{r4}
 80084ec:	3b01      	subs	r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	da07      	bge.n	8008504 <__sfputc_r+0x1c>
 80084f4:	6994      	ldr	r4, [r2, #24]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	db01      	blt.n	80084fe <__sfputc_r+0x16>
 80084fa:	290a      	cmp	r1, #10
 80084fc:	d102      	bne.n	8008504 <__sfputc_r+0x1c>
 80084fe:	bc10      	pop	{r4}
 8008500:	f000 b934 	b.w	800876c <__swbuf_r>
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	1c58      	adds	r0, r3, #1
 8008508:	6010      	str	r0, [r2, #0]
 800850a:	7019      	strb	r1, [r3, #0]
 800850c:	4608      	mov	r0, r1
 800850e:	bc10      	pop	{r4}
 8008510:	4770      	bx	lr

08008512 <__sfputs_r>:
 8008512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	4614      	mov	r4, r2
 800851a:	18d5      	adds	r5, r2, r3
 800851c:	42ac      	cmp	r4, r5
 800851e:	d101      	bne.n	8008524 <__sfputs_r+0x12>
 8008520:	2000      	movs	r0, #0
 8008522:	e007      	b.n	8008534 <__sfputs_r+0x22>
 8008524:	463a      	mov	r2, r7
 8008526:	4630      	mov	r0, r6
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	f7ff ffdc 	bl	80084e8 <__sfputc_r>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d1f3      	bne.n	800851c <__sfputs_r+0xa>
 8008534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008538 <_vfiprintf_r>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	460d      	mov	r5, r1
 800853e:	4614      	mov	r4, r2
 8008540:	4698      	mov	r8, r3
 8008542:	4606      	mov	r6, r0
 8008544:	b09d      	sub	sp, #116	; 0x74
 8008546:	b118      	cbz	r0, 8008550 <_vfiprintf_r+0x18>
 8008548:	6a03      	ldr	r3, [r0, #32]
 800854a:	b90b      	cbnz	r3, 8008550 <_vfiprintf_r+0x18>
 800854c:	f7ff f9d8 	bl	8007900 <__sinit>
 8008550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x2a>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f7ff fb47 	bl	8007bf0 <__retarget_lock_acquire_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	071b      	lsls	r3, r3, #28
 8008566:	d501      	bpl.n	800856c <_vfiprintf_r+0x34>
 8008568:	692b      	ldr	r3, [r5, #16]
 800856a:	b99b      	cbnz	r3, 8008594 <_vfiprintf_r+0x5c>
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f93a 	bl	80087e8 <__swsetup_r>
 8008574:	b170      	cbz	r0, 8008594 <_vfiprintf_r+0x5c>
 8008576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008578:	07dc      	lsls	r4, r3, #31
 800857a:	d504      	bpl.n	8008586 <_vfiprintf_r+0x4e>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	b01d      	add	sp, #116	; 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d4f7      	bmi.n	800857c <_vfiprintf_r+0x44>
 800858c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800858e:	f7ff fb30 	bl	8007bf2 <__retarget_lock_release_recursive>
 8008592:	e7f3      	b.n	800857c <_vfiprintf_r+0x44>
 8008594:	2300      	movs	r3, #0
 8008596:	9309      	str	r3, [sp, #36]	; 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800859e:	2330      	movs	r3, #48	; 0x30
 80085a0:	f04f 0901 	mov.w	r9, #1
 80085a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008758 <_vfiprintf_r+0x220>
 80085ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085b0:	4623      	mov	r3, r4
 80085b2:	469a      	mov	sl, r3
 80085b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b8:	b10a      	cbz	r2, 80085be <_vfiprintf_r+0x86>
 80085ba:	2a25      	cmp	r2, #37	; 0x25
 80085bc:	d1f9      	bne.n	80085b2 <_vfiprintf_r+0x7a>
 80085be:	ebba 0b04 	subs.w	fp, sl, r4
 80085c2:	d00b      	beq.n	80085dc <_vfiprintf_r+0xa4>
 80085c4:	465b      	mov	r3, fp
 80085c6:	4622      	mov	r2, r4
 80085c8:	4629      	mov	r1, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffa1 	bl	8008512 <__sfputs_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	f000 80a9 	beq.w	8008728 <_vfiprintf_r+0x1f0>
 80085d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085d8:	445a      	add	r2, fp
 80085da:	9209      	str	r2, [sp, #36]	; 0x24
 80085dc:	f89a 3000 	ldrb.w	r3, [sl]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80a1 	beq.w	8008728 <_vfiprintf_r+0x1f0>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085f0:	f10a 0a01 	add.w	sl, sl, #1
 80085f4:	9304      	str	r3, [sp, #16]
 80085f6:	9307      	str	r3, [sp, #28]
 80085f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085fc:	931a      	str	r3, [sp, #104]	; 0x68
 80085fe:	4654      	mov	r4, sl
 8008600:	2205      	movs	r2, #5
 8008602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008606:	4854      	ldr	r0, [pc, #336]	; (8008758 <_vfiprintf_r+0x220>)
 8008608:	f7ff ff2a 	bl	8008460 <memchr>
 800860c:	9a04      	ldr	r2, [sp, #16]
 800860e:	b9d8      	cbnz	r0, 8008648 <_vfiprintf_r+0x110>
 8008610:	06d1      	lsls	r1, r2, #27
 8008612:	bf44      	itt	mi
 8008614:	2320      	movmi	r3, #32
 8008616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800861a:	0713      	lsls	r3, r2, #28
 800861c:	bf44      	itt	mi
 800861e:	232b      	movmi	r3, #43	; 0x2b
 8008620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008624:	f89a 3000 	ldrb.w	r3, [sl]
 8008628:	2b2a      	cmp	r3, #42	; 0x2a
 800862a:	d015      	beq.n	8008658 <_vfiprintf_r+0x120>
 800862c:	4654      	mov	r4, sl
 800862e:	2000      	movs	r0, #0
 8008630:	f04f 0c0a 	mov.w	ip, #10
 8008634:	9a07      	ldr	r2, [sp, #28]
 8008636:	4621      	mov	r1, r4
 8008638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800863c:	3b30      	subs	r3, #48	; 0x30
 800863e:	2b09      	cmp	r3, #9
 8008640:	d94d      	bls.n	80086de <_vfiprintf_r+0x1a6>
 8008642:	b1b0      	cbz	r0, 8008672 <_vfiprintf_r+0x13a>
 8008644:	9207      	str	r2, [sp, #28]
 8008646:	e014      	b.n	8008672 <_vfiprintf_r+0x13a>
 8008648:	eba0 0308 	sub.w	r3, r0, r8
 800864c:	fa09 f303 	lsl.w	r3, r9, r3
 8008650:	4313      	orrs	r3, r2
 8008652:	46a2      	mov	sl, r4
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	e7d2      	b.n	80085fe <_vfiprintf_r+0xc6>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d19      	adds	r1, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9103      	str	r1, [sp, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbb      	ittet	lt
 8008664:	425b      	neglt	r3, r3
 8008666:	f042 0202 	orrlt.w	r2, r2, #2
 800866a:	9307      	strge	r3, [sp, #28]
 800866c:	9307      	strlt	r3, [sp, #28]
 800866e:	bfb8      	it	lt
 8008670:	9204      	strlt	r2, [sp, #16]
 8008672:	7823      	ldrb	r3, [r4, #0]
 8008674:	2b2e      	cmp	r3, #46	; 0x2e
 8008676:	d10c      	bne.n	8008692 <_vfiprintf_r+0x15a>
 8008678:	7863      	ldrb	r3, [r4, #1]
 800867a:	2b2a      	cmp	r3, #42	; 0x2a
 800867c:	d134      	bne.n	80086e8 <_vfiprintf_r+0x1b0>
 800867e:	9b03      	ldr	r3, [sp, #12]
 8008680:	3402      	adds	r4, #2
 8008682:	1d1a      	adds	r2, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9203      	str	r2, [sp, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfb8      	it	lt
 800868c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800875c <_vfiprintf_r+0x224>
 8008696:	2203      	movs	r2, #3
 8008698:	4650      	mov	r0, sl
 800869a:	7821      	ldrb	r1, [r4, #0]
 800869c:	f7ff fee0 	bl	8008460 <memchr>
 80086a0:	b138      	cbz	r0, 80086b2 <_vfiprintf_r+0x17a>
 80086a2:	2240      	movs	r2, #64	; 0x40
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	eba0 000a 	sub.w	r0, r0, sl
 80086aa:	4082      	lsls	r2, r0
 80086ac:	4313      	orrs	r3, r2
 80086ae:	3401      	adds	r4, #1
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b6:	2206      	movs	r2, #6
 80086b8:	4829      	ldr	r0, [pc, #164]	; (8008760 <_vfiprintf_r+0x228>)
 80086ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086be:	f7ff fecf 	bl	8008460 <memchr>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d03f      	beq.n	8008746 <_vfiprintf_r+0x20e>
 80086c6:	4b27      	ldr	r3, [pc, #156]	; (8008764 <_vfiprintf_r+0x22c>)
 80086c8:	bb1b      	cbnz	r3, 8008712 <_vfiprintf_r+0x1da>
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	3307      	adds	r3, #7
 80086ce:	f023 0307 	bic.w	r3, r3, #7
 80086d2:	3308      	adds	r3, #8
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	443b      	add	r3, r7
 80086da:	9309      	str	r3, [sp, #36]	; 0x24
 80086dc:	e768      	b.n	80085b0 <_vfiprintf_r+0x78>
 80086de:	460c      	mov	r4, r1
 80086e0:	2001      	movs	r0, #1
 80086e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086e6:	e7a6      	b.n	8008636 <_vfiprintf_r+0xfe>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f04f 0c0a 	mov.w	ip, #10
 80086ee:	4619      	mov	r1, r3
 80086f0:	3401      	adds	r4, #1
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	4620      	mov	r0, r4
 80086f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086fa:	3a30      	subs	r2, #48	; 0x30
 80086fc:	2a09      	cmp	r2, #9
 80086fe:	d903      	bls.n	8008708 <_vfiprintf_r+0x1d0>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0c6      	beq.n	8008692 <_vfiprintf_r+0x15a>
 8008704:	9105      	str	r1, [sp, #20]
 8008706:	e7c4      	b.n	8008692 <_vfiprintf_r+0x15a>
 8008708:	4604      	mov	r4, r0
 800870a:	2301      	movs	r3, #1
 800870c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008710:	e7f0      	b.n	80086f4 <_vfiprintf_r+0x1bc>
 8008712:	ab03      	add	r3, sp, #12
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	462a      	mov	r2, r5
 8008718:	4630      	mov	r0, r6
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <_vfiprintf_r+0x230>)
 800871c:	a904      	add	r1, sp, #16
 800871e:	f3af 8000 	nop.w
 8008722:	4607      	mov	r7, r0
 8008724:	1c78      	adds	r0, r7, #1
 8008726:	d1d6      	bne.n	80086d6 <_vfiprintf_r+0x19e>
 8008728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800872a:	07d9      	lsls	r1, r3, #31
 800872c:	d405      	bmi.n	800873a <_vfiprintf_r+0x202>
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d402      	bmi.n	800873a <_vfiprintf_r+0x202>
 8008734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008736:	f7ff fa5c 	bl	8007bf2 <__retarget_lock_release_recursive>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	065b      	lsls	r3, r3, #25
 800873e:	f53f af1d 	bmi.w	800857c <_vfiprintf_r+0x44>
 8008742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008744:	e71c      	b.n	8008580 <_vfiprintf_r+0x48>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4630      	mov	r0, r6
 800874e:	4b06      	ldr	r3, [pc, #24]	; (8008768 <_vfiprintf_r+0x230>)
 8008750:	a904      	add	r1, sp, #16
 8008752:	f7ff fc8d 	bl	8008070 <_printf_i>
 8008756:	e7e4      	b.n	8008722 <_vfiprintf_r+0x1ea>
 8008758:	08008bfd 	.word	0x08008bfd
 800875c:	08008c03 	.word	0x08008c03
 8008760:	08008c07 	.word	0x08008c07
 8008764:	00000000 	.word	0x00000000
 8008768:	08008513 	.word	0x08008513

0800876c <__swbuf_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	460e      	mov	r6, r1
 8008770:	4614      	mov	r4, r2
 8008772:	4605      	mov	r5, r0
 8008774:	b118      	cbz	r0, 800877e <__swbuf_r+0x12>
 8008776:	6a03      	ldr	r3, [r0, #32]
 8008778:	b90b      	cbnz	r3, 800877e <__swbuf_r+0x12>
 800877a:	f7ff f8c1 	bl	8007900 <__sinit>
 800877e:	69a3      	ldr	r3, [r4, #24]
 8008780:	60a3      	str	r3, [r4, #8]
 8008782:	89a3      	ldrh	r3, [r4, #12]
 8008784:	071a      	lsls	r2, r3, #28
 8008786:	d525      	bpl.n	80087d4 <__swbuf_r+0x68>
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	b31b      	cbz	r3, 80087d4 <__swbuf_r+0x68>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	6922      	ldr	r2, [r4, #16]
 8008790:	b2f6      	uxtb	r6, r6
 8008792:	1a98      	subs	r0, r3, r2
 8008794:	6963      	ldr	r3, [r4, #20]
 8008796:	4637      	mov	r7, r6
 8008798:	4283      	cmp	r3, r0
 800879a:	dc04      	bgt.n	80087a6 <__swbuf_r+0x3a>
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f7ff fe0a 	bl	80083b8 <_fflush_r>
 80087a4:	b9e0      	cbnz	r0, 80087e0 <__swbuf_r+0x74>
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	6022      	str	r2, [r4, #0]
 80087b2:	701e      	strb	r6, [r3, #0]
 80087b4:	6962      	ldr	r2, [r4, #20]
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d004      	beq.n	80087c6 <__swbuf_r+0x5a>
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	07db      	lsls	r3, r3, #31
 80087c0:	d506      	bpl.n	80087d0 <__swbuf_r+0x64>
 80087c2:	2e0a      	cmp	r6, #10
 80087c4:	d104      	bne.n	80087d0 <__swbuf_r+0x64>
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fdf5 	bl	80083b8 <_fflush_r>
 80087ce:	b938      	cbnz	r0, 80087e0 <__swbuf_r+0x74>
 80087d0:	4638      	mov	r0, r7
 80087d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f806 	bl	80087e8 <__swsetup_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d0d5      	beq.n	800878c <__swbuf_r+0x20>
 80087e0:	f04f 37ff 	mov.w	r7, #4294967295
 80087e4:	e7f4      	b.n	80087d0 <__swbuf_r+0x64>
	...

080087e8 <__swsetup_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <__swsetup_r+0xac>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	460c      	mov	r4, r1
 80087f2:	b118      	cbz	r0, 80087fc <__swsetup_r+0x14>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swsetup_r+0x14>
 80087f8:	f7ff f882 	bl	8007900 <__sinit>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008802:	0718      	lsls	r0, r3, #28
 8008804:	d422      	bmi.n	800884c <__swsetup_r+0x64>
 8008806:	06d9      	lsls	r1, r3, #27
 8008808:	d407      	bmi.n	800881a <__swsetup_r+0x32>
 800880a:	2309      	movs	r3, #9
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	e034      	b.n	8008884 <__swsetup_r+0x9c>
 800881a:	0758      	lsls	r0, r3, #29
 800881c:	d512      	bpl.n	8008844 <__swsetup_r+0x5c>
 800881e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008820:	b141      	cbz	r1, 8008834 <__swsetup_r+0x4c>
 8008822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008826:	4299      	cmp	r1, r3
 8008828:	d002      	beq.n	8008830 <__swsetup_r+0x48>
 800882a:	4628      	mov	r0, r5
 800882c:	f7ff fa0e 	bl	8007c4c <_free_r>
 8008830:	2300      	movs	r3, #0
 8008832:	6363      	str	r3, [r4, #52]	; 0x34
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	2300      	movs	r3, #0
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f043 0308 	orr.w	r3, r3, #8
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b94b      	cbnz	r3, 8008864 <__swsetup_r+0x7c>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885a:	d003      	beq.n	8008864 <__swsetup_r+0x7c>
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f88b 	bl	800897a <__smakebuf_r>
 8008864:	89a0      	ldrh	r0, [r4, #12]
 8008866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800886a:	f010 0301 	ands.w	r3, r0, #1
 800886e:	d00a      	beq.n	8008886 <__swsetup_r+0x9e>
 8008870:	2300      	movs	r3, #0
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	425b      	negs	r3, r3
 8008878:	61a3      	str	r3, [r4, #24]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b943      	cbnz	r3, 8008890 <__swsetup_r+0xa8>
 800887e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008882:	d1c4      	bne.n	800880e <__swsetup_r+0x26>
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	0781      	lsls	r1, r0, #30
 8008888:	bf58      	it	pl
 800888a:	6963      	ldrpl	r3, [r4, #20]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	e7f4      	b.n	800887a <__swsetup_r+0x92>
 8008890:	2000      	movs	r0, #0
 8008892:	e7f7      	b.n	8008884 <__swsetup_r+0x9c>
 8008894:	20000080 	.word	0x20000080

08008898 <_raise_r>:
 8008898:	291f      	cmp	r1, #31
 800889a:	b538      	push	{r3, r4, r5, lr}
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	d904      	bls.n	80088ac <_raise_r+0x14>
 80088a2:	2316      	movs	r3, #22
 80088a4:	6003      	str	r3, [r0, #0]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80088ae:	b112      	cbz	r2, 80088b6 <_raise_r+0x1e>
 80088b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b4:	b94b      	cbnz	r3, 80088ca <_raise_r+0x32>
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f830 	bl	800891c <_getpid_r>
 80088bc:	462a      	mov	r2, r5
 80088be:	4601      	mov	r1, r0
 80088c0:	4620      	mov	r0, r4
 80088c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c6:	f000 b817 	b.w	80088f8 <_kill_r>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d00a      	beq.n	80088e4 <_raise_r+0x4c>
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	d103      	bne.n	80088da <_raise_r+0x42>
 80088d2:	2316      	movs	r3, #22
 80088d4:	6003      	str	r3, [r0, #0]
 80088d6:	2001      	movs	r0, #1
 80088d8:	e7e7      	b.n	80088aa <_raise_r+0x12>
 80088da:	2400      	movs	r4, #0
 80088dc:	4628      	mov	r0, r5
 80088de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088e2:	4798      	blx	r3
 80088e4:	2000      	movs	r0, #0
 80088e6:	e7e0      	b.n	80088aa <_raise_r+0x12>

080088e8 <raise>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <raise+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f7ff bfd3 	b.w	8008898 <_raise_r>
 80088f2:	bf00      	nop
 80088f4:	20000080 	.word	0x20000080

080088f8 <_kill_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	2300      	movs	r3, #0
 80088fc:	4d06      	ldr	r5, [pc, #24]	; (8008918 <_kill_r+0x20>)
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	f7f8 fc76 	bl	80011f6 <_kill>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d102      	bne.n	8008914 <_kill_r+0x1c>
 800890e:	682b      	ldr	r3, [r5, #0]
 8008910:	b103      	cbz	r3, 8008914 <_kill_r+0x1c>
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	20003410 	.word	0x20003410

0800891c <_getpid_r>:
 800891c:	f7f8 bc64 	b.w	80011e8 <_getpid>

08008920 <_malloc_usable_size_r>:
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f18      	subs	r0, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfbc      	itt	lt
 800892a:	580b      	ldrlt	r3, [r1, r0]
 800892c:	18c0      	addlt	r0, r0, r3
 800892e:	4770      	bx	lr

08008930 <__swhatbuf_r>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	460c      	mov	r4, r1
 8008934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008938:	4615      	mov	r5, r2
 800893a:	2900      	cmp	r1, #0
 800893c:	461e      	mov	r6, r3
 800893e:	b096      	sub	sp, #88	; 0x58
 8008940:	da0c      	bge.n	800895c <__swhatbuf_r+0x2c>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	2100      	movs	r1, #0
 8008946:	f013 0f80 	tst.w	r3, #128	; 0x80
 800894a:	bf0c      	ite	eq
 800894c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008950:	2340      	movne	r3, #64	; 0x40
 8008952:	2000      	movs	r0, #0
 8008954:	6031      	str	r1, [r6, #0]
 8008956:	602b      	str	r3, [r5, #0]
 8008958:	b016      	add	sp, #88	; 0x58
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	466a      	mov	r2, sp
 800895e:	f000 f849 	bl	80089f4 <_fstat_r>
 8008962:	2800      	cmp	r0, #0
 8008964:	dbed      	blt.n	8008942 <__swhatbuf_r+0x12>
 8008966:	9901      	ldr	r1, [sp, #4]
 8008968:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800896c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008970:	4259      	negs	r1, r3
 8008972:	4159      	adcs	r1, r3
 8008974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008978:	e7eb      	b.n	8008952 <__swhatbuf_r+0x22>

0800897a <__smakebuf_r>:
 800897a:	898b      	ldrh	r3, [r1, #12]
 800897c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800897e:	079d      	lsls	r5, r3, #30
 8008980:	4606      	mov	r6, r0
 8008982:	460c      	mov	r4, r1
 8008984:	d507      	bpl.n	8008996 <__smakebuf_r+0x1c>
 8008986:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800898a:	6023      	str	r3, [r4, #0]
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	2301      	movs	r3, #1
 8008990:	6163      	str	r3, [r4, #20]
 8008992:	b002      	add	sp, #8
 8008994:	bd70      	pop	{r4, r5, r6, pc}
 8008996:	466a      	mov	r2, sp
 8008998:	ab01      	add	r3, sp, #4
 800899a:	f7ff ffc9 	bl	8008930 <__swhatbuf_r>
 800899e:	9900      	ldr	r1, [sp, #0]
 80089a0:	4605      	mov	r5, r0
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7fe fe3a 	bl	800761c <_malloc_r>
 80089a8:	b948      	cbnz	r0, 80089be <__smakebuf_r+0x44>
 80089aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ae:	059a      	lsls	r2, r3, #22
 80089b0:	d4ef      	bmi.n	8008992 <__smakebuf_r+0x18>
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	f043 0302 	orr.w	r3, r3, #2
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	e7e3      	b.n	8008986 <__smakebuf_r+0xc>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	6020      	str	r0, [r4, #0]
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	9b00      	ldr	r3, [sp, #0]
 80089ca:	6120      	str	r0, [r4, #16]
 80089cc:	6163      	str	r3, [r4, #20]
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	b15b      	cbz	r3, 80089ea <__smakebuf_r+0x70>
 80089d2:	4630      	mov	r0, r6
 80089d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089d8:	f000 f81e 	bl	8008a18 <_isatty_r>
 80089dc:	b128      	cbz	r0, 80089ea <__smakebuf_r+0x70>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	431d      	orrs	r5, r3
 80089ee:	81a5      	strh	r5, [r4, #12]
 80089f0:	e7cf      	b.n	8008992 <__smakebuf_r+0x18>
	...

080089f4 <_fstat_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	2300      	movs	r3, #0
 80089f8:	4d06      	ldr	r5, [pc, #24]	; (8008a14 <_fstat_r+0x20>)
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	4611      	mov	r1, r2
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f7f8 fc56 	bl	80012b2 <_fstat>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d102      	bne.n	8008a10 <_fstat_r+0x1c>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	b103      	cbz	r3, 8008a10 <_fstat_r+0x1c>
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	20003410 	.word	0x20003410

08008a18 <_isatty_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4d05      	ldr	r5, [pc, #20]	; (8008a34 <_isatty_r+0x1c>)
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f8 fc54 	bl	80012d0 <_isatty>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_isatty_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_isatty_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20003410 	.word	0x20003410

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
