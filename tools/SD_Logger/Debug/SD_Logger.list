
SD_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008480  08008480  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08008480  08008480  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008480  08008480  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002738  20000080  08008508  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027b8  08008508  000227b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e910  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002926  00000000  00000000  0002e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00031328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab6  00000000  00000000  00032130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e02  00000000  00000000  00032be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012dfd  00000000  00000000  0004c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089b6d  00000000  00000000  0005f7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043c8  00000000  00000000  000e9354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ed71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d38 	.word	0x08007d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08007d38 	.word	0x08007d38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2140      	movs	r1, #64	; 0x40
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <SELECT+0x18>)
 8000166:	f001 fd01 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800016a:	2001      	movs	r0, #1
 800016c:	f001 f932 	bl	80013d4 <HAL_Delay>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40010c00 	.word	0x40010c00

08000178 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2140      	movs	r1, #64	; 0x40
 8000180:	4803      	ldr	r0, [pc, #12]	; (8000190 <DESELECT+0x18>)
 8000182:	f001 fcf3 	bl	8001b6c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f001 f924 	bl	80013d4 <HAL_Delay>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010c00 	.word	0x40010c00

08000194 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800019e:	bf00      	nop
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <SPI_TxByte+0x30>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	689b      	ldr	r3, [r3, #8]
 80001a6:	f003 0302 	and.w	r3, r3, #2
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d1f8      	bne.n	80001a0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80001ae:	1df9      	adds	r1, r7, #7
 80001b0:	2364      	movs	r3, #100	; 0x64
 80001b2:	2201      	movs	r2, #1
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <SPI_TxByte+0x30>)
 80001b6:	f002 f985 	bl	80024c4 <HAL_SPI_Transmit>
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	200000cc 	.word	0x200000cc

080001c8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001d4:	bf00      	nop
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <SPI_TxBuffer+0x30>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	f003 0302 	and.w	r3, r3, #2
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d1f8      	bne.n	80001d6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001e4:	887a      	ldrh	r2, [r7, #2]
 80001e6:	2364      	movs	r3, #100	; 0x64
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	4803      	ldr	r0, [pc, #12]	; (80001f8 <SPI_TxBuffer+0x30>)
 80001ec:	f002 f96a 	bl	80024c4 <HAL_SPI_Transmit>
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	200000cc 	.word	0x200000cc

080001fc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000202:	23ff      	movs	r3, #255	; 0xff
 8000204:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000206:	bf00      	nop
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <SPI_RxByte+0x34>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b02      	cmp	r3, #2
 8000214:	d1f8      	bne.n	8000208 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000216:	1dba      	adds	r2, r7, #6
 8000218:	1df9      	adds	r1, r7, #7
 800021a:	2364      	movs	r3, #100	; 0x64
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2301      	movs	r3, #1
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <SPI_RxByte+0x34>)
 8000222:	f002 fa92 	bl	800274a <HAL_SPI_TransmitReceive>

	return data;
 8000226:	79bb      	ldrb	r3, [r7, #6]
}
 8000228:	4618      	mov	r0, r3
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200000cc 	.word	0x200000cc

08000234 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800023c:	f7ff ffde 	bl	80001fc <SPI_RxByte>
 8000240:	4603      	mov	r3, r0
 8000242:	461a      	mov	r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	701a      	strb	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <SD_ReadyWait+0x30>)
 8000258:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800025c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800025e:	f7ff ffcd 	bl	80001fc <SPI_RxByte>
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	2bff      	cmp	r3, #255	; 0xff
 800026a:	d003      	beq.n	8000274 <SD_ReadyWait+0x24>
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SD_ReadyWait+0x30>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f4      	bne.n	800025e <SD_ReadyWait+0xe>

	return res;
 8000274:	79fb      	ldrb	r3, [r7, #7]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000009e 	.word	0x2000009e

08000284 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800028a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800028e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000290:	f7ff ff72 	bl	8000178 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	e005      	b.n	80002a6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800029a:	20ff      	movs	r0, #255	; 0xff
 800029c:	f7ff ff7a 	bl	8000194 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2b09      	cmp	r3, #9
 80002aa:	ddf6      	ble.n	800029a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80002ac:	f7ff ff56 	bl	800015c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002b0:	2340      	movs	r3, #64	; 0x40
 80002b2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002bc:	2300      	movs	r3, #0
 80002be:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002c4:	2395      	movs	r3, #149	; 0x95
 80002c6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002c8:	463b      	mov	r3, r7
 80002ca:	2106      	movs	r1, #6
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff7b 	bl	80001c8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002d2:	e002      	b.n	80002da <SD_PowerOn+0x56>
	{
		cnt--;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002da:	f7ff ff8f 	bl	80001fc <SPI_RxByte>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d002      	beq.n	80002ea <SD_PowerOn+0x66>
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f4      	bne.n	80002d4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002ea:	f7ff ff45 	bl	8000178 <DESELECT>
	SPI_TxByte(0XFF);
 80002ee:	20ff      	movs	r0, #255	; 0xff
 80002f0:	f7ff ff50 	bl	8000194 <SPI_TxByte>

	PowerFlag = 1;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <SD_PowerOn+0x80>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	3710      	adds	r7, #16
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000a1 	.word	0x200000a1

08000308 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <SD_PowerOff+0x14>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	200000a1 	.word	0x200000a1

08000320 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000324:	4b02      	ldr	r3, [pc, #8]	; (8000330 <SD_CheckPower+0x10>)
 8000326:	781b      	ldrb	r3, [r3, #0]
}
 8000328:	4618      	mov	r0, r3
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	200000a1 	.word	0x200000a1

08000334 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <SD_RxDataBlock+0x58>)
 8000340:	22c8      	movs	r2, #200	; 0xc8
 8000342:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000344:	f7ff ff5a 	bl	80001fc <SPI_RxByte>
 8000348:	4603      	mov	r3, r0
 800034a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	2bff      	cmp	r3, #255	; 0xff
 8000350:	d103      	bne.n	800035a <SD_RxDataBlock+0x26>
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <SD_RxDataBlock+0x58>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1f4      	bne.n	8000344 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2bfe      	cmp	r3, #254	; 0xfe
 800035e:	d001      	beq.n	8000364 <SD_RxDataBlock+0x30>
 8000360:	2300      	movs	r3, #0
 8000362:	e00f      	b.n	8000384 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	607a      	str	r2, [r7, #4]
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff62 	bl	8000234 <SPI_RxBytePtr>
	} while(len--);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	603a      	str	r2, [r7, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f4      	bne.n	8000364 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800037a:	f7ff ff3f 	bl	80001fc <SPI_RxByte>
	SPI_RxByte();
 800037e:	f7ff ff3d 	bl	80001fc <SPI_RxByte>

	return TRUE;
 8000382:	2301      	movs	r3, #1
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	2000009c 	.word	0x2000009c

08000390 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80003a0:	f7ff ff56 	bl	8000250 <SD_ReadyWait>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2bff      	cmp	r3, #255	; 0xff
 80003a8:	d001      	beq.n	80003ae <SD_TxDataBlock+0x1e>
 80003aa:	2300      	movs	r3, #0
 80003ac:	e02f      	b.n	800040e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff feef 	bl	8000194 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003b6:	78fb      	ldrb	r3, [r7, #3]
 80003b8:	2bfd      	cmp	r3, #253	; 0xfd
 80003ba:	d020      	beq.n	80003fe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff01 	bl	80001c8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003c6:	f7ff ff19 	bl	80001fc <SPI_RxByte>
		SPI_RxByte();
 80003ca:	f7ff ff17 	bl	80001fc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003ce:	e00b      	b.n	80003e8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003d0:	f7ff ff14 	bl	80001fc <SPI_RxByte>
 80003d4:	4603      	mov	r3, r0
 80003d6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	f003 031f 	and.w	r3, r3, #31
 80003de:	2b05      	cmp	r3, #5
 80003e0:	d006      	beq.n	80003f0 <SD_TxDataBlock+0x60>
			i++;
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	3301      	adds	r3, #1
 80003e6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003e8:	7bbb      	ldrb	r3, [r7, #14]
 80003ea:	2b40      	cmp	r3, #64	; 0x40
 80003ec:	d9f0      	bls.n	80003d0 <SD_TxDataBlock+0x40>
 80003ee:	e000      	b.n	80003f2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003f0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003f2:	bf00      	nop
 80003f4:	f7ff ff02 	bl	80001fc <SPI_RxByte>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d0fa      	beq.n	80003f4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	f003 031f 	and.w	r3, r3, #31
 8000404:	2b05      	cmp	r3, #5
 8000406:	d101      	bne.n	800040c <SD_TxDataBlock+0x7c>
 8000408:	2301      	movs	r3, #1
 800040a:	e000      	b.n	800040e <SD_TxDataBlock+0x7e>

	return FALSE;
 800040c:	2300      	movs	r3, #0
}
 800040e:	4618      	mov	r0, r3
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	6039      	str	r1, [r7, #0]
 8000420:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000422:	f7ff ff15 	bl	8000250 <SD_ReadyWait>
 8000426:	4603      	mov	r3, r0
 8000428:	2bff      	cmp	r3, #255	; 0xff
 800042a:	d001      	beq.n	8000430 <SD_SendCmd+0x1a>
 800042c:	23ff      	movs	r3, #255	; 0xff
 800042e:	e042      	b.n	80004b6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff feae 	bl	8000194 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	0e1b      	lsrs	r3, r3, #24
 800043c:	b2db      	uxtb	r3, r3
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fea8 	bl	8000194 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	b2db      	uxtb	r3, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fea2 	bl	8000194 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	0a1b      	lsrs	r3, r3, #8
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fe9c 	bl	8000194 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe97 	bl	8000194 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b40      	cmp	r3, #64	; 0x40
 800046a:	d102      	bne.n	8000472 <SD_SendCmd+0x5c>
 800046c:	2395      	movs	r3, #149	; 0x95
 800046e:	73fb      	strb	r3, [r7, #15]
 8000470:	e007      	b.n	8000482 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b48      	cmp	r3, #72	; 0x48
 8000476:	d102      	bne.n	800047e <SD_SendCmd+0x68>
 8000478:	2387      	movs	r3, #135	; 0x87
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e001      	b.n	8000482 <SD_SendCmd+0x6c>
	else crc = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe85 	bl	8000194 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b4c      	cmp	r3, #76	; 0x4c
 800048e:	d101      	bne.n	8000494 <SD_SendCmd+0x7e>
 8000490:	f7ff feb4 	bl	80001fc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000494:	230a      	movs	r3, #10
 8000496:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000498:	f7ff feb0 	bl	80001fc <SPI_RxByte>
 800049c:	4603      	mov	r3, r0
 800049e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80004a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	da05      	bge.n	80004b4 <SD_SendCmd+0x9e>
 80004a8:	7bbb      	ldrb	r3, [r7, #14]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	7bbb      	ldrb	r3, [r7, #14]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d1f1      	bne.n	8000498 <SD_SendCmd+0x82>

	return res;
 80004b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3710      	adds	r7, #16
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <SD_disk_initialize+0x14>
 80004d0:	2301      	movs	r3, #1
 80004d2:	e0d1      	b.n	8000678 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004d4:	4b6a      	ldr	r3, [pc, #424]	; (8000680 <SD_disk_initialize+0x1c0>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <SD_disk_initialize+0x2a>
 80004e2:	4b67      	ldr	r3, [pc, #412]	; (8000680 <SD_disk_initialize+0x1c0>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	e0c6      	b.n	8000678 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004ea:	f7ff fecb 	bl	8000284 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004ee:	f7ff fe35 	bl	800015c <SELECT>

	/* check disk type */
	type = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004f6:	2100      	movs	r1, #0
 80004f8:	2040      	movs	r0, #64	; 0x40
 80004fa:	f7ff ff8c 	bl	8000416 <SD_SendCmd>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	f040 80a1 	bne.w	8000648 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000506:	4b5f      	ldr	r3, [pc, #380]	; (8000684 <SD_disk_initialize+0x1c4>)
 8000508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800050e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000512:	2048      	movs	r0, #72	; 0x48
 8000514:	f7ff ff7f 	bl	8000416 <SD_SendCmd>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d155      	bne.n	80005ca <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e00c      	b.n	800053e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000524:	7bfc      	ldrb	r4, [r7, #15]
 8000526:	f7ff fe69 	bl	80001fc <SPI_RxByte>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	f104 0310 	add.w	r3, r4, #16
 8000532:	443b      	add	r3, r7
 8000534:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	3301      	adds	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d9ef      	bls.n	8000524 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d17e      	bne.n	8000648 <SD_disk_initialize+0x188>
 800054a:	7afb      	ldrb	r3, [r7, #11]
 800054c:	2baa      	cmp	r3, #170	; 0xaa
 800054e:	d17b      	bne.n	8000648 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000550:	2100      	movs	r1, #0
 8000552:	2077      	movs	r0, #119	; 0x77
 8000554:	f7ff ff5f 	bl	8000416 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d807      	bhi.n	800056e <SD_disk_initialize+0xae>
 800055e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000562:	2069      	movs	r0, #105	; 0x69
 8000564:	f7ff ff57 	bl	8000416 <SD_SendCmd>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d004      	beq.n	8000578 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800056e:	4b45      	ldr	r3, [pc, #276]	; (8000684 <SD_disk_initialize+0x1c4>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1ec      	bne.n	8000550 <SD_disk_initialize+0x90>
 8000576:	e000      	b.n	800057a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000578:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800057a:	4b42      	ldr	r3, [pc, #264]	; (8000684 <SD_disk_initialize+0x1c4>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d062      	beq.n	8000648 <SD_disk_initialize+0x188>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	; 0x7a
 8000586:	f7ff ff46 	bl	8000416 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15b      	bne.n	8000648 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe30 	bl	80001fc <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f104 0310 	add.w	r3, r4, #16
 80005a4:	443b      	add	r3, r7
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x104>
 80005c0:	230c      	movs	r3, #12
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x106>
 80005c4:	2304      	movs	r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e03e      	b.n	8000648 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	; 0x77
 80005ce:	f7ff ff22 	bl	8000416 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12a>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	; 0x69
 80005dc:	f7ff ff1b 	bl	8000416 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12a>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x12c>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	; 0x77
 80005f8:	f7ff ff0d 	bl	8000416 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x160>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	; 0x69
 8000606:	f7ff ff06 	bl	8000416 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x160>
 8000610:	e00c      	b.n	800062c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff fefe 	bl	8000416 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <SD_disk_initialize+0x1c4>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1e2      	bne.n	80005ee <SD_disk_initialize+0x12e>
 8000628:	e000      	b.n	800062c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800062a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <SD_disk_initialize+0x1c4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d007      	beq.n	8000644 <SD_disk_initialize+0x184>
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	2050      	movs	r0, #80	; 0x50
 800063a:	f7ff feec 	bl	8000416 <SD_SendCmd>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SD_disk_initialize+0x188>
 8000644:	2300      	movs	r3, #0
 8000646:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000648:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <SD_disk_initialize+0x1c8>)
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800064e:	f7ff fd93 	bl	8000178 <DESELECT>
	SPI_RxByte();
 8000652:	f7ff fdd3 	bl	80001fc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d008      	beq.n	800066e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <SD_disk_initialize+0x1c0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SD_disk_initialize+0x1c0>)
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	e001      	b.n	8000672 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800066e:	f7ff fe4b 	bl	8000308 <SD_PowerOff>
	}

	return Stat;
 8000672:	4b03      	ldr	r3, [pc, #12]	; (8000680 <SD_disk_initialize+0x1c0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	2000009c 	.word	0x2000009c
 8000688:	200000a0 	.word	0x200000a0

0800068c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SD_disk_status+0x14>
 800069c:	2301      	movs	r3, #1
 800069e:	e002      	b.n	80006a6 <SD_disk_status+0x1a>
	return Stat;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <SD_disk_status+0x24>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000000 	.word	0x20000000

080006b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <SD_disk_read+0x1c>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <SD_disk_read+0x20>
 80006d0:	2304      	movs	r3, #4
 80006d2:	e051      	b.n	8000778 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <SD_disk_read+0xcc>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SD_disk_read+0x32>
 80006e2:	2303      	movs	r3, #3
 80006e4:	e048      	b.n	8000778 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SD_disk_read+0xd0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <SD_disk_read+0x44>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	025b      	lsls	r3, r3, #9
 80006f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80006f8:	f7ff fd30 	bl	800015c <SELECT>

	if (count == 1)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d111      	bne.n	8000726 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2051      	movs	r0, #81	; 0x51
 8000706:	f7ff fe86 	bl	8000416 <SD_SendCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d129      	bne.n	8000764 <SD_disk_read+0xb0>
 8000710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000714:	68b8      	ldr	r0, [r7, #8]
 8000716:	f7ff fe0d 	bl	8000334 <SD_RxDataBlock>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d021      	beq.n	8000764 <SD_disk_read+0xb0>
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	e01e      	b.n	8000764 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2052      	movs	r0, #82	; 0x52
 800072a:	f7ff fe74 	bl	8000416 <SD_SendCmd>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d117      	bne.n	8000764 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000738:	68b8      	ldr	r0, [r7, #8]
 800073a:	f7ff fdfb 	bl	8000334 <SD_RxDataBlock>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00a      	beq.n	800075a <SD_disk_read+0xa6>
				buff += 512;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1ed      	bne.n	8000734 <SD_disk_read+0x80>
 8000758:	e000      	b.n	800075c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800075a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	204c      	movs	r0, #76	; 0x4c
 8000760:	f7ff fe59 	bl	8000416 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000764:	f7ff fd08 	bl	8000178 <DESELECT>
	SPI_RxByte();
 8000768:	f7ff fd48 	bl	80001fc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	200000a0 	.word	0x200000a0

08000788 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <SD_disk_write+0x1c>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <SD_disk_write+0x20>
 80007a4:	2304      	movs	r3, #4
 80007a6:	e06b      	b.n	8000880 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007a8:	4b37      	ldr	r3, [pc, #220]	; (8000888 <SD_disk_write+0x100>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SD_disk_write+0x32>
 80007b6:	2303      	movs	r3, #3
 80007b8:	e062      	b.n	8000880 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <SD_disk_write+0x100>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SD_disk_write+0x44>
 80007c8:	2302      	movs	r3, #2
 80007ca:	e059      	b.n	8000880 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <SD_disk_write+0x104>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <SD_disk_write+0x56>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	025b      	lsls	r3, r3, #9
 80007dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80007de:	f7ff fcbd 	bl	800015c <SELECT>

	if (count == 1)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d110      	bne.n	800080a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	2058      	movs	r0, #88	; 0x58
 80007ec:	f7ff fe13 	bl	8000416 <SD_SendCmd>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d13a      	bne.n	800086c <SD_disk_write+0xe4>
 80007f6:	21fe      	movs	r1, #254	; 0xfe
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f7ff fdc9 	bl	8000390 <SD_TxDataBlock>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d033      	beq.n	800086c <SD_disk_write+0xe4>
			count = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	e030      	b.n	800086c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <SD_disk_write+0x104>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d007      	beq.n	8000826 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000816:	2100      	movs	r1, #0
 8000818:	2077      	movs	r0, #119	; 0x77
 800081a:	f7ff fdfc 	bl	8000416 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	2057      	movs	r0, #87	; 0x57
 8000822:	f7ff fdf8 	bl	8000416 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	2059      	movs	r0, #89	; 0x59
 800082a:	f7ff fdf4 	bl	8000416 <SD_SendCmd>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11b      	bne.n	800086c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000834:	21fc      	movs	r1, #252	; 0xfc
 8000836:	68b8      	ldr	r0, [r7, #8]
 8000838:	f7ff fdaa 	bl	8000390 <SD_TxDataBlock>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d00a      	beq.n	8000858 <SD_disk_write+0xd0>
				buff += 512;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000848:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	3b01      	subs	r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ee      	bne.n	8000834 <SD_disk_write+0xac>
 8000856:	e000      	b.n	800085a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000858:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800085a:	21fd      	movs	r1, #253	; 0xfd
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fd97 	bl	8000390 <SD_TxDataBlock>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <SD_disk_write+0xe4>
			{
				count = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800086c:	f7ff fc84 	bl	8000178 <DESELECT>
	SPI_RxByte();
 8000870:	f7ff fcc4 	bl	80001fc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	bf14      	ite	ne
 800087a:	2301      	movne	r3, #1
 800087c:	2300      	moveq	r3, #0
 800087e:	b2db      	uxtb	r3, r3
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000000 	.word	0x20000000
 800088c:	200000a0 	.word	0x200000a0

08000890 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	603a      	str	r2, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	460b      	mov	r3, r1
 800089e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SD_disk_ioctl+0x1e>
 80008aa:	2304      	movs	r3, #4
 80008ac:	e115      	b.n	8000ada <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	2b05      	cmp	r3, #5
 80008b8:	d124      	bne.n	8000904 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d012      	beq.n	80008e8 <SD_disk_ioctl+0x58>
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	dc1a      	bgt.n	80008fc <SD_disk_ioctl+0x6c>
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <SD_disk_ioctl+0x40>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d006      	beq.n	80008dc <SD_disk_ioctl+0x4c>
 80008ce:	e015      	b.n	80008fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008d0:	f7ff fd1a 	bl	8000308 <SD_PowerOff>
			res = RES_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008da:	e0fc      	b.n	8000ad6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008dc:	f7ff fcd2 	bl	8000284 <SD_PowerOn>
			res = RES_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008e6:	e0f6      	b.n	8000ad6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	1c5c      	adds	r4, r3, #1
 80008ec:	f7ff fd18 	bl	8000320 <SD_CheckPower>
 80008f0:	4603      	mov	r3, r0
 80008f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008fa:	e0ec      	b.n	8000ad6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80008fc:	2304      	movs	r3, #4
 80008fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000902:	e0e8      	b.n	8000ad6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000904:	4b77      	ldr	r3, [pc, #476]	; (8000ae4 <SD_disk_ioctl+0x254>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SD_disk_ioctl+0x86>
 8000912:	2303      	movs	r3, #3
 8000914:	e0e1      	b.n	8000ada <SD_disk_ioctl+0x24a>

		SELECT();
 8000916:	f7ff fc21 	bl	800015c <SELECT>

		switch (ctrl)
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b0d      	cmp	r3, #13
 800091e:	f200 80cb 	bhi.w	8000ab8 <SD_disk_ioctl+0x228>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <SD_disk_ioctl+0x98>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000a23 	.word	0x08000a23
 800092c:	08000961 	.word	0x08000961
 8000930:	08000a13 	.word	0x08000a13
 8000934:	08000ab9 	.word	0x08000ab9
 8000938:	08000ab9 	.word	0x08000ab9
 800093c:	08000ab9 	.word	0x08000ab9
 8000940:	08000ab9 	.word	0x08000ab9
 8000944:	08000ab9 	.word	0x08000ab9
 8000948:	08000ab9 	.word	0x08000ab9
 800094c:	08000ab9 	.word	0x08000ab9
 8000950:	08000ab9 	.word	0x08000ab9
 8000954:	08000a35 	.word	0x08000a35
 8000958:	08000a59 	.word	0x08000a59
 800095c:	08000a7d 	.word	0x08000a7d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000960:	2100      	movs	r1, #0
 8000962:	2049      	movs	r0, #73	; 0x49
 8000964:	f7ff fd57 	bl	8000416 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 80a8 	bne.w	8000ac0 <SD_disk_ioctl+0x230>
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2110      	movs	r1, #16
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fcdc 	bl	8000334 <SD_RxDataBlock>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 809e 	beq.w	8000ac0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	099b      	lsrs	r3, r3, #6
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10e      	bne.n	80009ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800098e:	7d7b      	ldrb	r3, [r7, #21]
 8000990:	b29a      	uxth	r2, r3
 8000992:	7d3b      	ldrb	r3, [r7, #20]
 8000994:	b29b      	uxth	r3, r3
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b29b      	uxth	r3, r3
 800099a:	4413      	add	r3, r2
 800099c:	b29b      	uxth	r3, r3
 800099e:	3301      	adds	r3, #1
 80009a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80009a2:	8bfb      	ldrh	r3, [r7, #30]
 80009a4:	029a      	lsls	r2, r3, #10
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	e02e      	b.n	8000a0a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009ac:	7c7b      	ldrb	r3, [r7, #17]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	7dbb      	ldrb	r3, [r7, #22]
 80009b6:	09db      	lsrs	r3, r3, #7
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7d7b      	ldrb	r3, [r7, #21]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0306 	and.w	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	3302      	adds	r3, #2
 80009d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	099b      	lsrs	r3, r3, #6
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	b29a      	uxth	r2, r3
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	7cbb      	ldrb	r3, [r7, #18]
 80009ea:	029b      	lsls	r3, r3, #10
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	3301      	adds	r3, #1
 80009fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009fc:	8bfa      	ldrh	r2, [r7, #30]
 80009fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a02:	3b09      	subs	r3, #9
 8000a04:	409a      	lsls	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a10:	e056      	b.n	8000ac0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a18:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a20:	e055      	b.n	8000ace <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a22:	f7ff fc15 	bl	8000250 <SD_ReadyWait>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2bff      	cmp	r3, #255	; 0xff
 8000a2a:	d14b      	bne.n	8000ac4 <SD_disk_ioctl+0x234>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a32:	e047      	b.n	8000ac4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a34:	2100      	movs	r1, #0
 8000a36:	2049      	movs	r0, #73	; 0x49
 8000a38:	f7ff fced 	bl	8000416 <SD_SendCmd>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d142      	bne.n	8000ac8 <SD_disk_ioctl+0x238>
 8000a42:	2110      	movs	r1, #16
 8000a44:	6a38      	ldr	r0, [r7, #32]
 8000a46:	f7ff fc75 	bl	8000334 <SD_RxDataBlock>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d03b      	beq.n	8000ac8 <SD_disk_ioctl+0x238>
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a56:	e037      	b.n	8000ac8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a58:	2100      	movs	r1, #0
 8000a5a:	204a      	movs	r0, #74	; 0x4a
 8000a5c:	f7ff fcdb 	bl	8000416 <SD_SendCmd>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d132      	bne.n	8000acc <SD_disk_ioctl+0x23c>
 8000a66:	2110      	movs	r1, #16
 8000a68:	6a38      	ldr	r0, [r7, #32]
 8000a6a:	f7ff fc63 	bl	8000334 <SD_RxDataBlock>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d02b      	beq.n	8000acc <SD_disk_ioctl+0x23c>
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a7a:	e027      	b.n	8000acc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	207a      	movs	r0, #122	; 0x7a
 8000a80:	f7ff fcc9 	bl	8000416 <SD_SendCmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d116      	bne.n	8000ab8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a90:	e00b      	b.n	8000aaa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a92:	6a3c      	ldr	r4, [r7, #32]
 8000a94:	1c63      	adds	r3, r4, #1
 8000a96:	623b      	str	r3, [r7, #32]
 8000a98:	f7ff fbb0 	bl	80001fc <SPI_RxByte>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000aaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d9ef      	bls.n	8000a92 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000abe:	e006      	b.n	8000ace <SD_disk_ioctl+0x23e>
			break;
 8000ac0:	bf00      	nop
 8000ac2:	e004      	b.n	8000ace <SD_disk_ioctl+0x23e>
			break;
 8000ac4:	bf00      	nop
 8000ac6:	e002      	b.n	8000ace <SD_disk_ioctl+0x23e>
			break;
 8000ac8:	bf00      	nop
 8000aca:	e000      	b.n	8000ace <SD_disk_ioctl+0x23e>
			break;
 8000acc:	bf00      	nop
		}

		DESELECT();
 8000ace:	f7ff fb53 	bl	8000178 <DESELECT>
		SPI_RxByte();
 8000ad2:	f7ff fb93 	bl	80001fc <SPI_RxByte>
	}

	return res;
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	372c      	adds	r7, #44	; 0x2c
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart */
void send_uart (char *string)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fb2b 	bl	800014c <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);	// transmit in blocking mode
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <send_uart+0x2c>)
 8000b06:	f002 f8c7 	bl	8002c98 <HAL_UART_Transmit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000124 	.word	0x20000124

08000b18 <bufclear>:
	while(*buf++ != '\0') i++;
	return 1;
}

void bufclear(void)	// clear buffer
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e007      	b.n	8000b34 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <bufclear+0x30>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3301      	adds	r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3a:	dbf3      	blt.n	8000b24 <bufclear+0xc>
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20002230 	.word	0x20002230

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b092      	sub	sp, #72	; 0x48
 8000b50:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fbdd 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f889 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f963 	bl	8000e24 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000b5e:	f002 fa1b 	bl	8002f98 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000b62:	f000 f8ff 	bl	8000d64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b66:	f000 f933 	bl	8000dd0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000b6a:	f000 f8c5 	bl	8000cf8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* mount SD card */
  fresult = f_mount(&fs, "", 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4933      	ldr	r1, [pc, #204]	; (8000c40 <main+0xf4>)
 8000b72:	4834      	ldr	r0, [pc, #208]	; (8000c44 <main+0xf8>)
 8000b74:	f004 fee6 	bl	8005944 <f_mount>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <main+0xfc>)
 8000b7e:	701a      	strb	r2, [r3, #0]
  if(fresult != FR_OK)
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <main+0xfc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <main+0x44>
	  send_uart ("error in mounting SD CARD...\n");
 8000b88:	4830      	ldr	r0, [pc, #192]	; (8000c4c <main+0x100>)
 8000b8a:	f7ff ffad 	bl	8000ae8 <send_uart>
 8000b8e:	e002      	b.n	8000b96 <main+0x4a>
  else
	  send_uart ("SD Card mounted successfully...\n");
 8000b90:	482f      	ldr	r0, [pc, #188]	; (8000c50 <main+0x104>)
 8000b92:	f7ff ffa9 	bl	8000ae8 <send_uart>

  /* generating random file name for testing purposes - WILL BE CHANGED LATER */
  srand( 2 );												// trying to set seed
 8000b96:	2002      	movs	r0, #2
 8000b98:	f005 ff8e 	bl	8006ab8 <srand>
  int randomNum = rand();
 8000b9c:	f005 ffba 	bl	8006b14 <rand>
 8000ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
  char fileName[40];
//  sprintf(fileName, "file%d.txt", randomNum);				// generates random file name to be loaded onto SD card
  sprintf(fileName, "testFIXED.txt");				// generates random file name to be loaded onto SD card
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	492b      	ldr	r1, [pc, #172]	; (8000c54 <main+0x108>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 f8b4 	bl	8006d14 <siprintf>
//	  sprintf (buffer, "SD Card free space: \t%lu\r\n", free_space);
//	  send_uart(buffer);


  /* testing setting values for CAN_DATA */
  CAN_DATA.ID = 0x800;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <main+0x10c>)
 8000bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb2:	801a      	strh	r2, [r3, #0]
  CAN_DATA.DATA = 0x8324;
 8000bb4:	4928      	ldr	r1, [pc, #160]	; (8000c58 <main+0x10c>)
 8000bb6:	f248 3224 	movw	r2, #33572	; 0x8324
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
  CAN_DATA.TIME = 28492;
 8000bc2:	4925      	ldr	r1, [pc, #148]	; (8000c58 <main+0x10c>)
 8000bc4:	f646 724c 	movw	r2, #28492	; 0x6f4c
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
  CAN_DATA.LENGTH = 8;
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <main+0x10c>)
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	761a      	strb	r2, [r3, #24]



  /* CAN Setup */
  HAL_CAN_Start(&hcan);
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <main+0x110>)
 8000bd8:	f000 fd1b 	bl	8001612 <HAL_CAN_Start>
//
//	  // writing CAN data to SD card
//
//	  /* open file to write/ create a file if it doesn't exist */
////	  fresult = f_open(&fil, fileName, FA_OPEN_APPEND | FA_READ | FA_WRITE);
  	  fresult = f_open(&fil, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	220a      	movs	r2, #10
 8000be0:	4619      	mov	r1, r3
 8000be2:	481f      	ldr	r0, [pc, #124]	; (8000c60 <main+0x114>)
 8000be4:	f004 fef8 	bl	80059d8 <f_open>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <main+0xfc>)
 8000bee:	701a      	strb	r2, [r3, #0]
//
//	  send_uart("File created \r\n");
//
//
	  // creating message with CAN data
	  sprintf(SD_message, "ID: %#.3x, Data: %#.4x, Timestamp: %d, Length: %d", CAN_DATA.ID, CAN_DATA.DATA, CAN_DATA.TIME, CAN_DATA.LENGTH);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <main+0x10c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <main+0x10c>)
 8000bf8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000bfc:	4916      	ldr	r1, [pc, #88]	; (8000c58 <main+0x10c>)
 8000bfe:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8000c02:	4c15      	ldr	r4, [pc, #84]	; (8000c58 <main+0x10c>)
 8000c04:	7e24      	ldrb	r4, [r4, #24]
 8000c06:	9404      	str	r4, [sp, #16]
 8000c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000c0c:	e9cd 2300 	strd	r2, r3, [sp]
 8000c10:	462a      	mov	r2, r5
 8000c12:	4914      	ldr	r1, [pc, #80]	; (8000c64 <main+0x118>)
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <main+0x11c>)
 8000c16:	f006 f87d 	bl	8006d14 <siprintf>

	  // writing CAN line to SD card and closing file
	  fresult = f_puts(SD_message, &fil);
 8000c1a:	4911      	ldr	r1, [pc, #68]	; (8000c60 <main+0x114>)
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <main+0x11c>)
 8000c1e:	f005 fd7b 	bl	8006718 <f_puts>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <main+0xfc>)
 8000c28:	701a      	strb	r2, [r3, #0]
	  fresult = f_close(&fil);
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <main+0x114>)
 8000c2c:	f005 fd0c 	bl	8006648 <f_close>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <main+0xfc>)
 8000c36:	701a      	strb	r2, [r3, #0]
	  bufclear();
 8000c38:	f7ff ff6e 	bl	8000b18 <bufclear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <main+0xf0>
 8000c3e:	bf00      	nop
 8000c40:	08007d50 	.word	0x08007d50
 8000c44:	200001d0 	.word	0x200001d0
 8000c48:	2000222c 	.word	0x2000222c
 8000c4c:	08007d54 	.word	0x08007d54
 8000c50:	08007d74 	.word	0x08007d74
 8000c54:	08007d98 	.word	0x08007d98
 8000c58:	200001b0 	.word	0x200001b0
 8000c5c:	200000a4 	.word	0x200000a4
 8000c60:	20001200 	.word	0x20001200
 8000c64:	08007da8 	.word	0x08007da8
 8000c68:	2000016c 	.word	0x2000016c

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b090      	sub	sp, #64	; 0x40
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	2228      	movs	r2, #40	; 0x28
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 f8ad 	bl	8006dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000caa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 ff71 	bl	8001b9c <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f8fa 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f9de 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cea:	f000 f8e5 	bl	8000eb8 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3740      	adds	r7, #64	; 0x40
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_CAN_Init+0x64>)
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <MX_CAN_Init+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d16:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d1a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d1e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000d22:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_CAN_Init+0x64>)
 8000d4a:	f000 fb67 	bl	800141c <HAL_CAN_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d54:	f000 f8b0 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000a4 	.word	0x200000a4
 8000d60:	40006400 	.word	0x40006400

08000d64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MX_SPI1_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000db0:	220a      	movs	r2, #10
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_SPI1_Init+0x64>)
 8000db6:	f001 fb01 	bl	80023bc <HAL_SPI_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc0:	f000 f87a 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000cc 	.word	0x200000cc
 8000dcc:	40013000 	.word	0x40013000

08000dd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <MX_USART2_UART_Init+0x50>)
 8000dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_USART2_UART_Init+0x4c>)
 8000e08:	f001 fef6 	bl	8002bf8 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e12:	f000 f851 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000124 	.word	0x20000124
 8000e20:	40004400 	.word	0x40004400

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chip_select_GPIO_Port, chip_select_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2140      	movs	r1, #64	; 0x40
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000e86:	f000 fe71 	bl	8001b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : chip_select_Pin */
  GPIO_InitStruct.Pin = chip_select_Pin;
 8000e8a:	2340      	movs	r3, #64	; 0x40
 8000e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(chip_select_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000ea2:	f000 fcdf 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010c00 	.word	0x40010c00

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	61d3      	str	r3, [r2, #28]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_MspInit+0x60>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_MspInit+0x60>)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000

08000f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_CAN_MspInit+0x8c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d131      	bne.n	8000fac <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f52:	61d3      	str	r3, [r2, #28]
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f56:	69db      	ldr	r3, [r3, #28]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_CAN_MspInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_CAN_MspInit+0x94>)
 8000f8e:	f000 fc69 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_CAN_MspInit+0x94>)
 8000fa8:	f000 fc5c 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40006400 	.word	0x40006400
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d12f      	bne.n	8001040 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_SPI_MspInit+0x90>)
 8001024:	f000 fc1e 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_SPI_MspInit+0x90>)
 800103c:	f000 fc12 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d12f      	bne.n	80010d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	61d3      	str	r3, [r2, #28]
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a4:	2304      	movs	r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4619      	mov	r1, r3
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_UART_MspInit+0x90>)
 80010b8:	f000 fbd4 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010bc:	2308      	movs	r3, #8
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <HAL_UART_MspInit+0x90>)
 80010d0:	f000 fbc8 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010800 	.word	0x40010800

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <NMI_Handler+0x4>

080010ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <MemManage_Handler+0x4>

080010fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <UsageFault_Handler+0x4>

08001106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112e:	f000 f935 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}

08001136 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <_kill>:

int _kill(int pid, int sig)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800114e:	f005 fea3 	bl	8006e98 <__errno>
 8001152:	4603      	mov	r3, r0
 8001154:	2216      	movs	r2, #22
 8001156:	601a      	str	r2, [r3, #0]
  return -1;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_exit>:

void _exit (int status)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe7 	bl	8001144 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001176:	e7fe      	b.n	8001176 <_exit+0x12>

08001178 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	e00a      	b.n	80011a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800118a:	f3af 8000 	nop.w
 800118e:	4601      	mov	r1, r0
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf0      	blt.n	800118a <_read+0x12>
  }

  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	e009      	b.n	80011d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf1      	blt.n	80011c4 <_write+0x12>
  }
  return len;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_close>:

int _close(int file)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001210:	605a      	str	r2, [r3, #4]
  return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <_isatty>:

int _isatty(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001232:	b480      	push	{r7}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
	...

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f005 fe0c 	bl	8006e98 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20005000 	.word	0x20005000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	20002630 	.word	0x20002630
 80012b4:	200027b8 	.word	0x200027b8

080012b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c4:	f7ff fff8 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012ca:	490c      	ldr	r1, [pc, #48]	; (80012fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012e0:	4c09      	ldr	r4, [pc, #36]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ee:	f005 fdd9 	bl	8006ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff fc2b 	bl	8000b4c <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001300:	08008488 	.word	0x08008488
  ldr r2, =_sbss
 8001304:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001308:	200027b8 	.word	0x200027b8

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fa6b 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fdca 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fa75 	bl	800184a <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 fa4b 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000004 	.word	0x20000004
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20002634 	.word	0x20002634

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20002634 	.word	0x20002634

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff fff0 	bl	80013c0 <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffe0 	bl	80013c0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0ed      	b.n	800160a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fd74 	bl	8000f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff ffb6 	bl	80013c0 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001456:	e012      	b.n	800147e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001458:	f7ff ffb2 	bl	80013c0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b0a      	cmp	r3, #10
 8001464:	d90b      	bls.n	800147e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2205      	movs	r2, #5
 8001476:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0c5      	b.n	800160a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0e5      	beq.n	8001458 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0202 	bic.w	r2, r2, #2
 800149a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff ff90 	bl	80013c0 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a2:	e012      	b.n	80014ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014a4:	f7ff ff8c 	bl	80013c0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d90b      	bls.n	80014ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2205      	movs	r2, #5
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e09f      	b.n	800160a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e5      	bne.n	80014a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e1b      	ldrb	r3, [r3, #24]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e007      	b.n	8001502 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7e5b      	ldrb	r3, [r3, #25]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d108      	bne.n	800151c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	e007      	b.n	800152c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800152a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e9b      	ldrb	r3, [r3, #26]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0220 	orr.w	r2, r2, #32
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e007      	b.n	8001556 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0220 	bic.w	r2, r2, #32
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7edb      	ldrb	r3, [r3, #27]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0210 	bic.w	r2, r2, #16
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e007      	b.n	8001580 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0210 	orr.w	r2, r2, #16
 800157e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7f1b      	ldrb	r3, [r3, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e007      	b.n	80015aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0208 	bic.w	r2, r2, #8
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7f5b      	ldrb	r3, [r3, #29]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0204 	orr.w	r2, r2, #4
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0204 	bic.w	r2, r2, #4
 80015d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	431a      	orrs	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	ea42 0103 	orr.w	r1, r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d12e      	bne.n	8001684 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800163e:	f7ff febf 	bl	80013c0 <HAL_GetTick>
 8001642:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001644:	e012      	b.n	800166c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001646:	f7ff febb 	bl	80013c0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b0a      	cmp	r3, #10
 8001652:	d90b      	bls.n	800166c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2205      	movs	r2, #5
 8001664:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e012      	b.n	8001692 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e5      	bne.n	8001646 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e006      	b.n	8001692 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b8:	4013      	ands	r3, r2
 80016ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x44>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <__NVIC_GetPriorityGrouping+0x18>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	f003 0307 	and.w	r3, r3, #7
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff90 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff49 	bl	800169c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff5e 	bl	80016e4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffb0 	bl	80017b8 <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	e169      	b.n	8001b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8158 	bne.w	8001b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4a9a      	ldr	r2, [pc, #616]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d05e      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018a0:	4a98      	ldr	r2, [pc, #608]	; (8001b04 <HAL_GPIO_Init+0x2a0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d875      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018a6:	4a98      	ldr	r2, [pc, #608]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d058      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018ac:	4a96      	ldr	r2, [pc, #600]	; (8001b08 <HAL_GPIO_Init+0x2a4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d86f      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018b2:	4a96      	ldr	r2, [pc, #600]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d052      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018b8:	4a94      	ldr	r2, [pc, #592]	; (8001b0c <HAL_GPIO_Init+0x2a8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d869      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018be:	4a94      	ldr	r2, [pc, #592]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04c      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018c4:	4a92      	ldr	r2, [pc, #584]	; (8001b10 <HAL_GPIO_Init+0x2ac>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d863      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018ca:	4a92      	ldr	r2, [pc, #584]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d046      	beq.n	800195e <HAL_GPIO_Init+0xfa>
 80018d0:	4a90      	ldr	r2, [pc, #576]	; (8001b14 <HAL_GPIO_Init+0x2b0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d85d      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d82a      	bhi.n	8001930 <HAL_GPIO_Init+0xcc>
 80018da:	2b12      	cmp	r3, #18
 80018dc:	d859      	bhi.n	8001992 <HAL_GPIO_Init+0x12e>
 80018de:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <HAL_GPIO_Init+0x80>)
 80018e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e4:	0800195f 	.word	0x0800195f
 80018e8:	08001939 	.word	0x08001939
 80018ec:	0800194b 	.word	0x0800194b
 80018f0:	0800198d 	.word	0x0800198d
 80018f4:	08001993 	.word	0x08001993
 80018f8:	08001993 	.word	0x08001993
 80018fc:	08001993 	.word	0x08001993
 8001900:	08001993 	.word	0x08001993
 8001904:	08001993 	.word	0x08001993
 8001908:	08001993 	.word	0x08001993
 800190c:	08001993 	.word	0x08001993
 8001910:	08001993 	.word	0x08001993
 8001914:	08001993 	.word	0x08001993
 8001918:	08001993 	.word	0x08001993
 800191c:	08001993 	.word	0x08001993
 8001920:	08001993 	.word	0x08001993
 8001924:	08001993 	.word	0x08001993
 8001928:	08001941 	.word	0x08001941
 800192c:	08001955 	.word	0x08001955
 8001930:	4a79      	ldr	r2, [pc, #484]	; (8001b18 <HAL_GPIO_Init+0x2b4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001936:	e02c      	b.n	8001992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e029      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	623b      	str	r3, [r7, #32]
          break;
 8001948:	e024      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	3308      	adds	r3, #8
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e01f      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	330c      	adds	r3, #12
 800195a:	623b      	str	r3, [r7, #32]
          break;
 800195c:	e01a      	b.n	8001994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001966:	2304      	movs	r3, #4
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e013      	b.n	8001994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	611a      	str	r2, [r3, #16]
          break;
 800197e:	e009      	b.n	8001994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001980:	2308      	movs	r3, #8
 8001982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	615a      	str	r2, [r3, #20]
          break;
 800198a:	e003      	b.n	8001994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x130>
          break;
 8001992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d801      	bhi.n	800199e <HAL_GPIO_Init+0x13a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_Init+0x13e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d802      	bhi.n	80019b0 <HAL_GPIO_Init+0x14c>
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x152>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3b08      	subs	r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	210f      	movs	r1, #15
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	fa01 f303 	lsl.w	r3, r1, r3
 80019d0:	431a      	orrs	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80b1 	beq.w	8001b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_GPIO_Init+0x2b8>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_GPIO_Init+0x2bc>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a40      	ldr	r2, [pc, #256]	; (8001b24 <HAL_GPIO_Init+0x2c0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_GPIO_Init+0x1ec>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3f      	ldr	r2, [pc, #252]	; (8001b28 <HAL_GPIO_Init+0x2c4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1e8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3e      	ldr	r2, [pc, #248]	; (8001b2c <HAL_GPIO_Init+0x2c8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <HAL_GPIO_Init+0x2cc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1e0>
 8001a40:	2303      	movs	r3, #3
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a50:	2300      	movs	r3, #0
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a62:	492f      	ldr	r1, [pc, #188]	; (8001b20 <HAL_GPIO_Init+0x2bc>)
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	492c      	ldr	r1, [pc, #176]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4928      	ldr	r1, [pc, #160]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d006      	beq.n	8001ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4922      	ldr	r1, [pc, #136]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	491e      	ldr	r1, [pc, #120]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4918      	ldr	r1, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4914      	ldr	r1, [pc, #80]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_GPIO_Init+0x2d0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e021      	b.n	8001b46 <HAL_GPIO_Init+0x2e2>
 8001b02:	bf00      	nop
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10220000 	.word	0x10220000
 8001b10:	10210000 	.word	0x10210000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f47f ae8e 	bne.w	8001878 <HAL_GPIO_Init+0x14>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	372c      	adds	r7, #44	; 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e24c      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fba2 	bl	80013c0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff fb9e 	bl	80013c0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e200      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fb8e 	bl	80013c0 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fb8a 	bl	80013c0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1ec      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c0      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fb43 	bl	80013c0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fb3f 	bl	80013c0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb22 	bl	80013c0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff fb1e 	bl	80013c0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e180      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fb02 	bl	80013c0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fafe 	bl	80013c0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e160      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 face 	bl	8002380 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff fae8 	bl	80013c0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fae4 	bl	80013c0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e146      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a87      	ldr	r2, [pc, #540]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7ff faa5 	bl	80013c0 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7ff faa1 	bl	80013c0 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e103      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fa55 	bl	80013c0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff fa51 	bl	80013c0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fa3f 	bl	80013c0 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fa3b 	bl	80013c0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09b      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa0f 	bl	80013c0 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fa0b 	bl	80013c0 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4921      	ldr	r1, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f9df 	bl	80013c0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff f9db 	bl	80013c0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e035      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff f9c8 	bl	80013c0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f9c4 	bl	80013c0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e026      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e019      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x500>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7ff f916 	bl	80013c0 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7ff f912 	bl	80013c0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f874 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	08007e24 	.word	0x08007e24
 800226c:	20000004 	.word	0x20000004
 8002270:	20000008 	.word	0x20000008

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	08007e3c 	.word	0x08007e3c
 8002314:	08007e4c 	.word	0x08007e4c
 8002318:	003d0900 	.word	0x003d0900

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	08007e34 	.word	0x08007e34

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800235c:	f7ff ffde 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK2Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08007e34 	.word	0x08007e34

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000004 	.word	0x20000004
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e076      	b.n	80024bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023de:	d009      	beq.n	80023f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fdd6 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	ea42 0103 	orr.w	r1, r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	0c1a      	lsrs	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f002 0204 	and.w	r2, r2, #4
 800249a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_SPI_Transmit+0x22>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e12d      	b.n	8002742 <HAL_SPI_Transmit+0x27e>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ee:	f7fe ff67 	bl	80013c0 <HAL_GetTick>
 80024f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002508:	e116      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_SPI_Transmit+0x52>
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800251a:	e10d      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2203      	movs	r2, #3
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002562:	d10f      	bne.n	8002584 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025aa:	d14f      	bne.n	800264c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_Transmit+0xf6>
 80025b4:	8afb      	ldrh	r3, [r7, #22]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d142      	bne.n	8002640 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025de:	e02f      	b.n	8002640 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d112      	bne.n	8002614 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	86da      	strh	r2, [r3, #54]	; 0x36
 8002612:	e015      	b.n	8002640 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002614:	f7fe fed4 	bl	80013c0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_Transmit+0x168>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Transmit+0x16e>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800263e:	e07b      	b.n	8002738 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ca      	bne.n	80025e0 <HAL_SPI_Transmit+0x11c>
 800264a:	e050      	b.n	80026ee <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Transmit+0x196>
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d144      	bne.n	80026e4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002680:	e030      	b.n	80026e4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d113      	bne.n	80026b8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80026b6:	e015      	b.n	80026e4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b8:	f7fe fe82 	bl	80013c0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d803      	bhi.n	80026d0 <HAL_SPI_Transmit+0x20c>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d102      	bne.n	80026d6 <HAL_SPI_Transmit+0x212>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026e2:	e029      	b.n	8002738 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1c9      	bne.n	8002682 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa62 	bl	8002bbc <SPI_EndRxTxTransaction>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	77fb      	strb	r3, [r7, #31]
 800272e:	e003      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002740:	7ffb      	ldrb	r3, [r7, #31]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08c      	sub	sp, #48	; 0x30
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x26>
 800276c:	2302      	movs	r3, #2
 800276e:	e198      	b.n	8002aa2 <HAL_SPI_TransmitReceive+0x358>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002778:	f7fe fe22 	bl	80013c0 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00f      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a0:	d107      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_SPI_TransmitReceive+0x68>
 80027aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027b8:	e16d      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_TransmitReceive+0x82>
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027d2:	e160      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d003      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2205      	movs	r2, #5
 80027e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d007      	beq.n	800283c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d17c      	bne.n	8002940 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x10a>
 800284e:	8b7b      	ldrh	r3, [r7, #26]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d16a      	bne.n	800292a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002878:	e057      	b.n	800292a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11b      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d113      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d119      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d014      	beq.n	8002902 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	b292      	uxth	r2, r2
 80028e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028fe:	2301      	movs	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002902:	f7fe fd5d 	bl	80013c0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	429a      	cmp	r2, r3
 8002910:	d80b      	bhi.n	800292a <HAL_SPI_TransmitReceive+0x1e0>
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d007      	beq.n	800292a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002928:	e0b5      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1a2      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d19d      	bne.n	800287a <HAL_SPI_TransmitReceive+0x130>
 800293e:	e080      	b.n	8002a42 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_SPI_TransmitReceive+0x204>
 8002948:	8b7b      	ldrh	r3, [r7, #26]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d16f      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002974:	e05b      	b.n	8002a2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d11c      	bne.n	80029be <HAL_SPI_TransmitReceive+0x274>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d017      	beq.n	80029be <HAL_SPI_TransmitReceive+0x274>
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d114      	bne.n	80029be <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d119      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x2b6>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d014      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a00:	f7fe fcde 	bl	80013c0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d803      	bhi.n	8002a18 <HAL_SPI_TransmitReceive+0x2ce>
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d102      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x2d4>
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a2c:	e033      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d19e      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x22c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d199      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8b8 	bl	8002bbc <SPI_EndRxTxTransaction>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a5e:	e01a      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a8c:	e003      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002abc:	f7fe fc80 	bl	80013c0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002acc:	f7fe fc78 	bl	80013c0 <HAL_GetTick>
 8002ad0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ae2:	e054      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aea:	d050      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002aec:	f7fe fc68 	bl	80013c0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d902      	bls.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d111      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	d004      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b48:	d10f      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d19b      	bne.n	8002ae4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000004 	.word	0x20000004

08002bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f7ff ff6a 	bl	8002aac <SPI_WaitFlagStateUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e000      	b.n	8002bf0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e042      	b.n	8002c90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fa18 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f91d 	bl	8002e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d16d      	bne.n	8002d94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_UART_Transmit+0x2c>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e066      	b.n	8002d96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fb73 	bl	80013c0 <HAL_GetTick>
 8002cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	88fa      	ldrh	r2, [r7, #6]
 8002ce6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf0:	d108      	bne.n	8002d04 <HAL_UART_Transmit+0x6c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d104      	bne.n	8002d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e003      	b.n	8002d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d0c:	e02a      	b.n	8002d64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2200      	movs	r2, #0
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f840 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e036      	b.n	8002d96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3302      	adds	r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e007      	b.n	8002d56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1cf      	bne.n	8002d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f810 	bl	8002d9e <UART_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e006      	b.n	8002d96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b090      	sub	sp, #64	; 0x40
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dae:	e050      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d04c      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	f7fe faff 	bl	80013c0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d241      	bcs.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dee:	637a      	str	r2, [r7, #52]	; 0x34
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3314      	adds	r3, #20
 8002e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	613b      	str	r3, [r7, #16]
   return(result);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e22:	623a      	str	r2, [r7, #32]
 8002e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	69f9      	ldr	r1, [r7, #28]
 8002e28:	6a3a      	ldr	r2, [r7, #32]
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e00f      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d09f      	beq.n	8002db0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3740      	adds	r7, #64	; 0x40
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eb6:	f023 030c 	bic.w	r3, r3, #12
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <UART_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7ff fa38 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	e002      	b.n	8002ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff fa20 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009a      	lsls	r2, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <UART_SetConfig+0x118>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	0119      	lsls	r1, r3, #4
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <UART_SetConfig+0x118>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	; 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	; 0x32
 8002f3c:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <UART_SetConfig+0x118>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f48:	4419      	add	r1, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <UART_SetConfig+0x118>)
 8002f62:	fba3 0302 	umull	r0, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2064      	movs	r0, #100	; 0x64
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	; 0x32
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	440a      	add	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40013800 	.word	0x40013800
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002f9c:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <MX_FATFS_Init+0x18>)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_FATFS_Init+0x1c>)
 8002fa0:	f003 fc3e 	bl	8006820 <FATFS_LinkDriver>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <MX_FATFS_Init+0x20>)
 8002faa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000263c 	.word	0x2000263c
 8002fb4:	20000010 	.word	0x20000010
 8002fb8:	20002638 	.word	0x20002638

08002fbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002fc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fa72 	bl	80004c0 <SD_disk_initialize>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fb49 	bl	800068c <SD_disk_status>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003016:	7bf8      	ldrb	r0, [r7, #15]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f7fd fb49 	bl	80006b4 <SD_disk_read>
 8003022:	4603      	mov	r3, r0
 8003024:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800303e:	7bf8      	ldrb	r0, [r7, #15]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	f7fd fb9f 	bl	8000788 <SD_disk_write>
 800304a:	4603      	mov	r3, r0
 800304c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	603a      	str	r2, [r7, #0]
 8003060:	71fb      	strb	r3, [r7, #7]
 8003062:	460b      	mov	r3, r1
 8003064:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	79b9      	ldrb	r1, [r7, #6]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fc0f 	bl	8000890 <SD_disk_ioctl>
 8003072:	4603      	mov	r3, r0
 8003074:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <disk_status+0x30>)
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	79fa      	ldrb	r2, [r7, #7]
 8003098:	4905      	ldr	r1, [pc, #20]	; (80030b0 <disk_status+0x30>)
 800309a:	440a      	add	r2, r1
 800309c:	7a12      	ldrb	r2, [r2, #8]
 800309e:	4610      	mov	r0, r2
 80030a0:	4798      	blx	r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20002660 	.word	0x20002660

080030b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <disk_initialize+0x48>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <disk_initialize+0x48>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <disk_initialize+0x48>)
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	4906      	ldr	r1, [pc, #24]	; (80030fc <disk_initialize+0x48>)
 80030e4:	440a      	add	r2, r1
 80030e6:	7a12      	ldrb	r2, [r2, #8]
 80030e8:	4610      	mov	r0, r2
 80030ea:	4798      	blx	r3
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20002660 	.word	0x20002660

08003100 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <disk_read+0x3c>)
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	689c      	ldr	r4, [r3, #8]
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <disk_read+0x3c>)
 8003120:	4413      	add	r3, r2
 8003122:	7a18      	ldrb	r0, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	47a0      	blx	r4
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
}
 8003132:	4618      	mov	r0, r3
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	bf00      	nop
 800313c:	20002660 	.word	0x20002660

08003140 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	4a0a      	ldr	r2, [pc, #40]	; (800317c <disk_write+0x3c>)
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	68dc      	ldr	r4, [r3, #12]
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <disk_write+0x3c>)
 8003160:	4413      	add	r3, r2
 8003162:	7a18      	ldrb	r0, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	47a0      	blx	r4
 800316c:	4603      	mov	r3, r0
 800316e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003170:	7dfb      	ldrb	r3, [r7, #23]
}
 8003172:	4618      	mov	r0, r3
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}
 800317a:	bf00      	nop
 800317c:	20002660 	.word	0x20002660

08003180 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	603a      	str	r2, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
 800318c:	460b      	mov	r3, r1
 800318e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <disk_ioctl+0x38>)
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	79fa      	ldrb	r2, [r7, #7]
 800319e:	4906      	ldr	r1, [pc, #24]	; (80031b8 <disk_ioctl+0x38>)
 80031a0:	440a      	add	r2, r1
 80031a2:	7a10      	ldrb	r0, [r2, #8]
 80031a4:	79b9      	ldrb	r1, [r7, #6]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4798      	blx	r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20002660 	.word	0x20002660

080031bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80031d0:	e007      	b.n	80031e2 <mem_cpy+0x26>
		*d++ = *s++;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	1c53      	adds	r3, r2, #1
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	6179      	str	r1, [r7, #20]
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f2      	bne.n	80031d2 <mem_cpy+0x16>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003208:	e005      	b.n	8003216 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	617a      	str	r2, [r7, #20]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	1e5a      	subs	r2, r3, #1
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f4      	bne.n	800320a <mem_set+0x12>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003244:	bf00      	nop
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	1e5a      	subs	r2, r3, #1
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <mem_cmp+0x40>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	61fa      	str	r2, [r7, #28]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	61ba      	str	r2, [r7, #24]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	1acb      	subs	r3, r1, r3
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ec      	beq.n	8003246 <mem_cmp+0x1a>
	return r;
 800326c:	697b      	ldr	r3, [r7, #20]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003282:	e002      	b.n	800328a <chk_chr+0x12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3301      	adds	r3, #1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <chk_chr+0x26>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4293      	cmp	r3, r2
 800329c:	d1f2      	bne.n	8003284 <chk_chr+0xc>
	return *str;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	781b      	ldrb	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e03b      	b.n	8003338 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80032c0:	4931      	ldr	r1, [pc, #196]	; (8003388 <chk_lock+0xdc>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02c      	beq.n	800332e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80032d4:	492c      	ldr	r1, [pc, #176]	; (8003388 <chk_lock+0xdc>)
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d120      	bne.n	8003332 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80032f0:	4925      	ldr	r1, [pc, #148]	; (8003388 <chk_lock+0xdc>)
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3304      	adds	r3, #4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003308:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800330a:	429a      	cmp	r2, r3
 800330c:	d111      	bne.n	8003332 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800330e:	491e      	ldr	r1, [pc, #120]	; (8003388 <chk_lock+0xdc>)
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3308      	adds	r3, #8
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003326:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8003328:	429a      	cmp	r2, r3
 800332a:	d102      	bne.n	8003332 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800332c:	e007      	b.n	800333e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d9c0      	bls.n	80032c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d109      	bne.n	8003358 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <chk_lock+0xa4>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d101      	bne.n	8003354 <chk_lock+0xa8>
 8003350:	2300      	movs	r3, #0
 8003352:	e013      	b.n	800337c <chk_lock+0xd0>
 8003354:	2312      	movs	r3, #18
 8003356:	e011      	b.n	800337c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <chk_lock+0xca>
 800335e:	490a      	ldr	r1, [pc, #40]	; (8003388 <chk_lock+0xdc>)
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	330a      	adds	r3, #10
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	d101      	bne.n	800337a <chk_lock+0xce>
 8003376:	2310      	movs	r3, #16
 8003378:	e000      	b.n	800337c <chk_lock+0xd0>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20002648 	.word	0x20002648

0800338c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	e002      	b.n	800339e <enq_lock+0x12>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d809      	bhi.n	80033b8 <enq_lock+0x2c>
 80033a4:	490a      	ldr	r1, [pc, #40]	; (80033d0 <enq_lock+0x44>)
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ef      	bne.n	8003398 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20002648 	.word	0x20002648

080033d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e02e      	b.n	8003442 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80033e4:	4958      	ldr	r1, [pc, #352]	; (8003548 <inc_lock+0x174>)
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d11d      	bne.n	800343c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003400:	4951      	ldr	r1, [pc, #324]	; (8003548 <inc_lock+0x174>)
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3304      	adds	r3, #4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003418:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800341a:	429a      	cmp	r2, r3
 800341c:	d10e      	bne.n	800343c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800341e:	494a      	ldr	r1, [pc, #296]	; (8003548 <inc_lock+0x174>)
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3308      	adds	r3, #8
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003436:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003438:	429a      	cmp	r2, r3
 800343a:	d006      	beq.n	800344a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3301      	adds	r3, #1
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d9cd      	bls.n	80033e4 <inc_lock+0x10>
 8003448:	e000      	b.n	800344c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800344a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d148      	bne.n	80034e4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e002      	b.n	800345e <inc_lock+0x8a>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d809      	bhi.n	8003478 <inc_lock+0xa4>
 8003464:	4938      	ldr	r1, [pc, #224]	; (8003548 <inc_lock+0x174>)
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ef      	bne.n	8003458 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d101      	bne.n	8003482 <inc_lock+0xae>
 800347e:	2300      	movs	r3, #0
 8003480:	e05d      	b.n	800353e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	482f      	ldr	r0, [pc, #188]	; (8003548 <inc_lock+0x174>)
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a0:	6899      	ldr	r1, [r3, #8]
 80034a2:	4829      	ldr	r0, [pc, #164]	; (8003548 <inc_lock+0x174>)
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4403      	add	r3, r0
 80034b0:	3304      	adds	r3, #4
 80034b2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ba:	88d8      	ldrh	r0, [r3, #6]
 80034bc:	4922      	ldr	r1, [pc, #136]	; (8003548 <inc_lock+0x174>)
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3308      	adds	r3, #8
 80034cc:	4602      	mov	r2, r0
 80034ce:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80034d0:	491d      	ldr	r1, [pc, #116]	; (8003548 <inc_lock+0x174>)
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	330a      	adds	r3, #10
 80034e0:	2200      	movs	r2, #0
 80034e2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00c      	beq.n	8003504 <inc_lock+0x130>
 80034ea:	4917      	ldr	r1, [pc, #92]	; (8003548 <inc_lock+0x174>)
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	330a      	adds	r3, #10
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <inc_lock+0x130>
 8003500:	2300      	movs	r3, #0
 8003502:	e01c      	b.n	800353e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <inc_lock+0x14e>
 800350a:	490f      	ldr	r1, [pc, #60]	; (8003548 <inc_lock+0x174>)
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	330a      	adds	r3, #10
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	b299      	uxth	r1, r3
 8003520:	e001      	b.n	8003526 <inc_lock+0x152>
 8003522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003526:	4808      	ldr	r0, [pc, #32]	; (8003548 <inc_lock+0x174>)
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	330a      	adds	r3, #10
 8003536:	460a      	mov	r2, r1
 8003538:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3301      	adds	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	20002648 	.word	0x20002648

0800354c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d82e      	bhi.n	80035be <dec_lock+0x72>
		n = Files[i].ctr;
 8003560:	491b      	ldr	r1, [pc, #108]	; (80035d0 <dec_lock+0x84>)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	330a      	adds	r3, #10
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d101      	bne.n	8003580 <dec_lock+0x34>
 800357c:	2300      	movs	r3, #0
 800357e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003580:	89fb      	ldrh	r3, [r7, #14]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <dec_lock+0x40>
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	3b01      	subs	r3, #1
 800358a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800358c:	4910      	ldr	r1, [pc, #64]	; (80035d0 <dec_lock+0x84>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	330a      	adds	r3, #10
 800359c:	89fa      	ldrh	r2, [r7, #14]
 800359e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80035a0:	89fb      	ldrh	r3, [r7, #14]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <dec_lock+0x6c>
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <dec_lock+0x84>)
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	737b      	strb	r3, [r7, #13]
 80035bc:	e001      	b.n	80035c2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80035be:	2302      	movs	r3, #2
 80035c0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80035c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20002648 	.word	0x20002648

080035d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e016      	b.n	8003610 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80035e2:	4910      	ldr	r1, [pc, #64]	; (8003624 <clear_lock+0x50>)
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d108      	bne.n	800360a <clear_lock+0x36>
 80035f8:	490a      	ldr	r1, [pc, #40]	; (8003624 <clear_lock+0x50>)
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d9e5      	bls.n	80035e2 <clear_lock+0xe>
	}
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20002648 	.word	0x20002648

08003628 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363a:	791b      	ldrb	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d040      	beq.n	80036c2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003650:	7858      	ldrb	r0, [r3, #1]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	2301      	movs	r3, #1
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	f7ff fd72 	bl	8003140 <disk_write>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <sync_window+0x40>
			res = FR_DISK_ERR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e02c      	b.n	80036c2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366e:	2200      	movs	r2, #0
 8003670:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	1ad2      	subs	r2, r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	429a      	cmp	r2, r3
 8003688:	d21b      	bcs.n	80036c2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	e012      	b.n	80036bc <sync_window+0x94>
					wsect += fs->fsize;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036aa:	7858      	ldrb	r0, [r3, #1]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	2301      	movs	r3, #1
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	f7ff fd45 	bl	8003140 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d8e9      	bhi.n	8003696 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d01e      	beq.n	8003726 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff9d 	bl	8003628 <sync_window>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	7858      	ldrb	r0, [r3, #1]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	2301      	movs	r3, #1
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	f7ff fcfb 	bl	8003100 <disk_read>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003720:	461a      	mov	r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff75 	bl	8003628 <sync_window>
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 80ad 	bne.w	80038a4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b03      	cmp	r3, #3
 8003754:	f040 8098 	bne.w	8003888 <sync_fs+0x158>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	795b      	ldrb	r3, [r3, #5]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 8091 	bne.w	8003888 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	895b      	ldrh	r3, [r3, #10]
 8003770:	461a      	mov	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f7ff fd40 	bl	80031f8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2255      	movs	r2, #85	; 0x55
 800377c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	22aa      	movs	r2, #170	; 0xaa
 8003784:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2252      	movs	r2, #82	; 0x52
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2252      	movs	r2, #82	; 0x52
 8003792:	705a      	strb	r2, [r3, #1]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2261      	movs	r2, #97	; 0x61
 8003798:	709a      	strb	r2, [r3, #2]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2241      	movs	r2, #65	; 0x41
 800379e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2272      	movs	r2, #114	; 0x72
 80037a4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2272      	movs	r2, #114	; 0x72
 80037ac:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2241      	movs	r2, #65	; 0x41
 80037b4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2261      	movs	r2, #97	; 0x61
 80037bc:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	b29b      	uxth	r3, r3
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	0e1b      	lsrs	r3, r3, #24
 8003802:	b2da      	uxtb	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	b29b      	uxth	r3, r3
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	b29b      	uxth	r3, r3
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2da      	uxtb	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	0e1b      	lsrs	r3, r3, #24
 800384c:	b2da      	uxtb	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	3301      	adds	r3, #1
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003864:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386c:	7858      	ldrb	r0, [r3, #1]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	2301      	movs	r3, #1
 800387a:	f7ff fc61 	bl	8003140 <disk_write>
			fs->fsi_flag = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003884:	2200      	movs	r2, #0
 8003886:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388e:	785b      	ldrb	r3, [r3, #1]
 8003890:	2200      	movs	r2, #0
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fc73 	bl	8003180 <disk_ioctl>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3b02      	subs	r3, #2
 80038bc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	3b02      	subs	r3, #2
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d301      	bcc.n	80038d2 <clust2sect+0x24>
 80038ce:	2300      	movs	r3, #0
 80038d0:	e00c      	b.n	80038ec <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	789b      	ldrb	r3, [r3, #2]
 80038da:	461a      	mov	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4413      	add	r3, r2
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d906      	bls.n	8003914 <get_fat+0x1e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d302      	bcc.n	800391a <get_fat+0x24>
		val = 1;	/* Internal error */
 8003914:	2301      	movs	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e0e4      	b.n	8003ae4 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b03      	cmp	r3, #3
 800392a:	f000 8098 	beq.w	8003a5e <get_fat+0x168>
 800392e:	2b03      	cmp	r3, #3
 8003930:	f300 80ce 	bgt.w	8003ad0 <get_fat+0x1da>
 8003934:	2b01      	cmp	r3, #1
 8003936:	d002      	beq.n	800393e <get_fat+0x48>
 8003938:	2b02      	cmp	r3, #2
 800393a:	d05f      	beq.n	80039fc <get_fat+0x106>
 800393c:	e0c8      	b.n	8003ad0 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395a:	895b      	ldrh	r3, [r3, #10]
 800395c:	4619      	mov	r1, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	fbb3 f3f1 	udiv	r3, r3, r1
 8003964:	4413      	add	r3, r2
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff feaf 	bl	80036cc <move_window>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 80b0 	bne.w	8003ad6 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	60fa      	str	r2, [r7, #12]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003982:	8952      	ldrh	r2, [r2, #10]
 8003984:	fbb3 f1f2 	udiv	r1, r3, r2
 8003988:	fb01 f202 	mul.w	r2, r1, r2
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	895b      	ldrh	r3, [r3, #10]
 80039a4:	4619      	mov	r1, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ac:	4413      	add	r3, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fe8b 	bl	80036cc <move_window>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f040 808e 	bne.w	8003ada <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c4:	895b      	ldrh	r3, [r3, #10]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80039ce:	fb01 f202 	mul.w	r2, r1, r2
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <get_fat+0xfc>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	e002      	b.n	80039f8 <get_fat+0x102>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	617b      	str	r3, [r7, #20]
			break;
 80039fa:	e073      	b.n	8003ae4 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0a:	895b      	ldrh	r3, [r3, #10]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a18:	4413      	add	r3, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe55 	bl	80036cc <move_window>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d15a      	bne.n	8003ade <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a32:	8952      	ldrh	r2, [r2, #10]
 8003a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a38:	fb01 f202 	mul.w	r2, r1, r2
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b21a      	sxth	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	4313      	orrs	r3, r2
 8003a56:	b21b      	sxth	r3, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	617b      	str	r3, [r7, #20]
			break;
 8003a5c:	e042      	b.n	8003ae4 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6c:	895b      	ldrh	r3, [r3, #10]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	4619      	mov	r1, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe24 	bl	80036cc <move_window>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d12b      	bne.n	8003ae2 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a94:	8952      	ldrh	r2, [r2, #10]
 8003a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a9a:	fb01 f202 	mul.w	r2, r1, r2
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	061a      	lsls	r2, r3, #24
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	3201      	adds	r2, #1
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	0212      	lsls	r2, r2, #8
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003acc:	617b      	str	r3, [r7, #20]
			break;
 8003ace:	e009      	b.n	8003ae4 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e006      	b.n	8003ae4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ad6:	bf00      	nop
 8003ad8:	e004      	b.n	8003ae4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ae2:	bf00      	nop
		}
	}

	return val;
 8003ae4:	697b      	ldr	r3, [r7, #20]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d906      	bls.n	8003b0e <put_fat+0x20>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <put_fat+0x26>
		res = FR_INT_ERR;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e13a      	b.n	8003d8a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	f000 80d0 	beq.w	8003cc2 <put_fat+0x1d4>
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	f300 8127 	bgt.w	8003d76 <put_fat+0x288>
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d003      	beq.n	8003b34 <put_fat+0x46>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	f000 808f 	beq.w	8003c50 <put_fat+0x162>
 8003b32:	e120      	b.n	8003d76 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	085b      	lsrs	r3, r3, #1
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b50:	895b      	ldrh	r3, [r3, #10]
 8003b52:	4619      	mov	r1, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5a:	4413      	add	r3, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fdb4 	bl	80036cc <move_window>
 8003b64:	4603      	mov	r3, r0
 8003b66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b68:	7ffb      	ldrb	r3, [r7, #31]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 8106 	bne.w	8003d7c <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	617a      	str	r2, [r7, #20]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b7c:	8952      	ldrh	r2, [r2, #10]
 8003b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b82:	fb01 f202 	mul.w	r2, r1, r2
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <put_fat+0xc6>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	b25a      	sxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e001      	b.n	8003bb8 <put_fat+0xca>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd4:	895b      	ldrh	r3, [r3, #10]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bde:	4413      	add	r3, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fd72 	bl	80036cc <move_window>
 8003be8:	4603      	mov	r3, r0
 8003bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bec:	7ffb      	ldrb	r3, [r7, #31]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 80c6 	bne.w	8003d80 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfa:	895b      	ldrh	r3, [r3, #10]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c04:	fb01 f202 	mul.w	r2, r1, r2
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <put_fat+0x134>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	e00e      	b.n	8003c40 <put_fat+0x152>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	b25a      	sxtb	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	711a      	strb	r2, [r3, #4]
			break;
 8003c4e:	e09c      	b.n	8003d8a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5e:	895b      	ldrh	r3, [r3, #10]
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fd2b 	bl	80036cc <move_window>
 8003c76:	4603      	mov	r3, r0
 8003c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c7a:	7ffb      	ldrb	r3, [r7, #31]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 8081 	bne.w	8003d84 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c8c:	8952      	ldrh	r2, [r2, #10]
 8003c8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c92:	fb01 f202 	mul.w	r2, r1, r2
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	711a      	strb	r2, [r3, #4]
			break;
 8003cc0:	e063      	b.n	8003d8a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	6a1a      	ldr	r2, [r3, #32]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	895b      	ldrh	r3, [r3, #10]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cde:	4413      	add	r3, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fcf2 	bl	80036cc <move_window>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003cec:	7ffb      	ldrb	r3, [r7, #31]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d14a      	bne.n	8003d88 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cfc:	8952      	ldrh	r2, [r2, #10]
 8003cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d02:	fb01 f202 	mul.w	r2, r1, r2
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3303      	adds	r3, #3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	061a      	lsls	r2, r3, #24
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	3201      	adds	r2, #1
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	0212      	lsls	r2, r2, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0c1a      	lsrs	r2, r3, #16
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3302      	adds	r3, #2
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0e1a      	lsrs	r2, r3, #24
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	3303      	adds	r3, #3
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	2201      	movs	r2, #1
 8003d72:	711a      	strb	r2, [r3, #4]
			break;
 8003d74:	e009      	b.n	8003d8a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8003d76:	2302      	movs	r3, #2
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e006      	b.n	8003d8a <put_fat+0x29c>
			if (res != FR_OK) break;
 8003d7c:	bf00      	nop
 8003d7e:	e004      	b.n	8003d8a <put_fat+0x29c>
			if (res != FR_OK) break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <put_fat+0x29c>
			if (res != FR_OK) break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <put_fat+0x29c>
			if (res != FR_OK) break;
 8003d88:	bf00      	nop
		}
	}

	return res;
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d906      	bls.n	8003db2 <remove_chain+0x1e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <remove_chain+0x24>
		res = FR_INT_ERR;
 8003db2:	2302      	movs	r3, #2
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e049      	b.n	8003e4c <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003dbc:	e03b      	b.n	8003e36 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fd98 	bl	80038f6 <get_fat>
 8003dc6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03b      	beq.n	8003e46 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <remove_chain+0x46>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e038      	b.n	8003e4c <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d102      	bne.n	8003de8 <remove_chain+0x54>
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e031      	b.n	8003e4c <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003de8:	2200      	movs	r2, #0
 8003dea:	6839      	ldr	r1, [r7, #0]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fe7e 	bl	8003aee <put_fat>
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d126      	bne.n	8003e4a <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d013      	beq.n	8003e32 <remove_chain+0x9e>
				fs->free_clust++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	3301      	adds	r3, #1
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e1a:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e22:	795b      	ldrb	r3, [r3, #5]
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e30:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3bc      	bcc.n	8003dbe <remove_chain+0x2a>
 8003e44:	e002      	b.n	8003e4c <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <remove_chain+0xb8>
			if (res != FR_OK) break;
 8003e4a:	bf00      	nop
		}
	}

	return res;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d111      	bne.n	8003e8a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <create_chain+0x2e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d31d      	bcc.n	8003ec0 <create_chain+0x6a>
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	e01a      	b.n	8003ec0 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fd32 	bl	80038f6 <get_fat>
 8003e92:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d801      	bhi.n	8003e9e <create_chain+0x48>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e07f      	b.n	8003f9e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d101      	bne.n	8003eaa <create_chain+0x54>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	e079      	b.n	8003f9e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d201      	bcs.n	8003ebc <create_chain+0x66>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	e070      	b.n	8003f9e <create_chain+0x148>
		scl = clst;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d307      	bcc.n	8003ee8 <create_chain+0x92>
			ncl = 2;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d901      	bls.n	8003ee8 <create_chain+0x92>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e05a      	b.n	8003f9e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003ee8:	6979      	ldr	r1, [r7, #20]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fd03 	bl	80038f6 <get_fat>
 8003ef0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d002      	beq.n	8003f06 <create_chain+0xb0>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <create_chain+0xb4>
			return cs;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	e049      	b.n	8003f9e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d1d8      	bne.n	8003ec4 <create_chain+0x6e>
 8003f12:	2300      	movs	r3, #0
 8003f14:	e043      	b.n	8003f9e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8003f16:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003f18:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fde5 	bl	8003aee <put_fat>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <create_chain+0xec>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fdd8 	bl	8003aee <put_fat>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d121      	bne.n	8003f8c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d01c      	beq.n	8003f9c <create_chain+0x146>
			fs->free_clust--;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f72:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	795b      	ldrb	r3, [r3, #5]
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f88:	715a      	strb	r2, [r3, #5]
 8003f8a:	e007      	b.n	8003f9c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <create_chain+0x142>
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
 8003f96:	e000      	b.n	8003f9a <create_chain+0x144>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003f9c:	697b      	ldr	r3, [r7, #20]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	3304      	adds	r3, #4
 8003fba:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc8:	895b      	ldrh	r3, [r3, #10]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fde:	7892      	ldrb	r2, [r2, #2]
 8003fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	613a      	str	r2, [r7, #16]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <clmt_clust+0x54>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e010      	b.n	800401c <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d307      	bcc.n	8004012 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3304      	adds	r3, #4
 800400e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004010:	e7e9      	b.n	8003fe6 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004012:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d009      	beq.n	8004060 <dir_sdi+0x3a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	429a      	cmp	r2, r3
 800405e:	d301      	bcc.n	8004064 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004060:	2302      	movs	r3, #2
 8004062:	e0aa      	b.n	80041ba <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d110      	bne.n	800408c <dir_sdi+0x66>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d107      	bne.n	800408c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d115      	bne.n	80040be <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409e:	891b      	ldrh	r3, [r3, #8]
 80040a0:	461a      	mov	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d301      	bcc.n	80040ac <dir_sdi+0x86>
			return FR_INT_ERR;
 80040a8:	2302      	movs	r3, #2
 80040aa:	e086      	b.n	80041ba <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e043      	b.n	8004146 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	895b      	ldrh	r3, [r3, #10]
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040de:	789b      	ldrb	r3, [r3, #2]
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80040e6:	e021      	b.n	800412c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fbff 	bl	80038f6 <get_fat>
 80040f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d101      	bne.n	8004106 <dir_sdi+0xe0>
 8004102:	2301      	movs	r3, #1
 8004104:	e059      	b.n	80041ba <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d909      	bls.n	8004120 <dir_sdi+0xfa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	d301      	bcc.n	8004124 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8004120:	2302      	movs	r3, #2
 8004122:	e04a      	b.n	80041ba <dir_sdi+0x194>
			idx -= ic;
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	429a      	cmp	r2, r3
 8004132:	d2d9      	bcs.n	80040e8 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fbb5 	bl	80038ae <clust2sect>
 8004144:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414c:	461a      	mov	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <dir_sdi+0x136>
 8004158:	2302      	movs	r3, #2
 800415a:	e02e      	b.n	80041ba <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004168:	895b      	ldrh	r3, [r3, #10]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	fbb3 f2f2 	udiv	r2, r3, r2
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004180:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	895b      	ldrh	r3, [r3, #10]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	b29b      	uxth	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80041a6:	fb01 f202 	mul.w	r2, r1, r2
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	015b      	lsls	r3, r3, #5
 80041ae:	4403      	add	r3, r0
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80041c2:	b590      	push	{r4, r7, lr}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	88db      	ldrh	r3, [r3, #6]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <dir_next+0x2a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <dir_next+0x2e>
		return FR_NO_FILE;
 80041ec:	2304      	movs	r3, #4
 80041ee:	e12e      	b.n	800444e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	895b      	ldrh	r3, [r3, #10]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	b29b      	uxth	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	fbb3 f1f2 	udiv	r1, r3, r2
 800420a:	fb01 f202 	mul.w	r2, r1, r2
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 80fa 	bne.w	800440a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	3301      	adds	r3, #1
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004226:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004240:	891b      	ldrh	r3, [r3, #8]
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4293      	cmp	r3, r2
 8004248:	f0c0 80df 	bcc.w	800440a <dir_next+0x248>
				return FR_NO_FILE;
 800424c:	2304      	movs	r3, #4
 800424e:	e0fe      	b.n	800444e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425c:	895b      	ldrh	r3, [r3, #10]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	b29b      	uxth	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	fbb3 f3f2 	udiv	r3, r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004276:	7892      	ldrb	r2, [r2, #2]
 8004278:	3a01      	subs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 80c4 	bne.w	800440a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7ff fb2e 	bl	80038f6 <get_fat>
 800429a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d801      	bhi.n	80042a6 <dir_next+0xe4>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0d3      	b.n	800444e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d101      	bne.n	80042b2 <dir_next+0xf0>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0cd      	b.n	800444e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f0c0 808e 	bcc.w	80043e4 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <dir_next+0x110>
 80042ce:	2304      	movs	r3, #4
 80042d0:	e0bd      	b.n	800444e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7ff fdb6 	bl	8003e56 <create_chain>
 80042ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <dir_next+0x134>
 80042f2:	2307      	movs	r3, #7
 80042f4:	e0ab      	b.n	800444e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <dir_next+0x13e>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0a6      	b.n	800444e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d101      	bne.n	800430c <dir_next+0x14a>
 8004308:	2301      	movs	r3, #1
 800430a:	e0a0      	b.n	800444e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff f987 	bl	8003628 <sync_window>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <dir_next+0x162>
 8004320:	2301      	movs	r3, #1
 8004322:	e094      	b.n	800444e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433a:	895b      	ldrh	r3, [r3, #10]
 800433c:	461a      	mov	r2, r3
 800433e:	2100      	movs	r1, #0
 8004340:	f7fe ff5a 	bl	80031f8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	681c      	ldr	r4, [r3, #0]
 8004354:	6979      	ldr	r1, [r7, #20]
 8004356:	4610      	mov	r0, r2
 8004358:	f7ff faa9 	bl	80038ae <clust2sect>
 800435c:	4603      	mov	r3, r0
 800435e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	e021      	b.n	80043ae <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004376:	2201      	movs	r2, #1
 8004378:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff f950 	bl	8003628 <sync_window>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <dir_next+0x1d0>
 800438e:	2301      	movs	r3, #1
 8004390:	e05d      	b.n	800444e <dir_next+0x28c>
						dp->fs->winsect++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800439e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043a0:	3201      	adds	r2, #1
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3301      	adds	r3, #1
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	789b      	ldrb	r3, [r3, #2]
 80043bc:	461a      	mov	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d3d2      	bcc.n	800436a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1acb      	subs	r3, r1, r3
 80043de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	461a      	mov	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fa57 	bl	80038ae <clust2sect>
 8004400:	4602      	mov	r2, r0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004408:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004414:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	895b      	ldrh	r3, [r3, #10]
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	b29b      	uxth	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	fbb3 f1f2 	udiv	r1, r3, r2
 800443a:	fb01 f202 	mul.w	r2, r1, r2
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	015b      	lsls	r3, r3, #5
 8004442:	4403      	add	r3, r0
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bd90      	pop	{r4, r7, pc}

08004456 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004460:	2100      	movs	r1, #0
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fddf 	bl	8004026 <dir_sdi>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d135      	bne.n	80044de <dir_alloc+0x88>
		n = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4619      	mov	r1, r3
 8004488:	4610      	mov	r0, r2
 800448a:	f7ff f91f 	bl	80036cc <move_window>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d121      	bne.n	80044dc <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2be5      	cmp	r3, #229	; 0xe5
 80044a4:	d006      	beq.n	80044b4 <dir_alloc+0x5e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d102      	bne.n	80044c8 <dir_alloc+0x72>
 80044c2:	e00c      	b.n	80044de <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80044c8:	2101      	movs	r1, #1
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fe79 	bl	80041c2 <dir_next>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0cd      	beq.n	8004476 <dir_alloc+0x20>
 80044da:	e000      	b.n	80044de <dir_alloc+0x88>
			if (res != FR_OK) break;
 80044dc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d101      	bne.n	80044e8 <dir_alloc+0x92>
 80044e4:	2307      	movs	r3, #7
 80044e6:	73fb      	strb	r3, [r7, #15]
	return res;
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b085      	sub	sp, #20
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	331b      	adds	r3, #27
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	021b      	lsls	r3, r3, #8
 8004504:	b21a      	sxth	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	331a      	adds	r3, #26
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b21b      	sxth	r3, r3
 800450e:	4313      	orrs	r3, r2
 8004510:	b21b      	sxth	r3, r3
 8004512:	b29b      	uxth	r3, r3
 8004514:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d10f      	bne.n	8004542 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3315      	adds	r3, #21
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	b21a      	sxth	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	b21b      	sxth	r3, r3
 8004534:	4313      	orrs	r3, r2
 8004536:	b21b      	sxth	r3, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

	return cl;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	331a      	adds	r3, #26
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b29b      	uxth	r3, r3
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b29a      	uxth	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	331b      	adds	r3, #27
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	0c1a      	lsrs	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3314      	adds	r3, #20
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b29b      	uxth	r3, r3
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3315      	adds	r3, #21
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
	...

0800459c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ae:	1e5a      	subs	r2, r3, #1
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	2301      	movs	r3, #1
 80045c2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <cmp_lfn+0xd8>)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	b21a      	sxth	r2, r3
 80045d8:	4926      	ldr	r1, [pc, #152]	; (8004674 <cmp_lfn+0xd8>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	440b      	add	r3, r1
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	440b      	add	r3, r1
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b21b      	sxth	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b21b      	sxth	r3, r3
 80045ee:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80045f0:	89fb      	ldrh	r3, [r7, #14]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d019      	beq.n	800462a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045f6:	89bb      	ldrh	r3, [r7, #12]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f002 f95b 	bl	80068b4 <ff_wtoupper>
 80045fe:	4603      	mov	r3, r0
 8004600:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2bfe      	cmp	r3, #254	; 0xfe
 8004606:	d80e      	bhi.n	8004626 <cmp_lfn+0x8a>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	617a      	str	r2, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f002 f94c 	bl	80068b4 <ff_wtoupper>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	89fb      	ldrh	r3, [r7, #14]
 8004622:	4293      	cmp	r3, r2
 8004624:	d008      	beq.n	8004638 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004626:	2300      	movs	r3, #0
 8004628:	e01f      	b.n	800466a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004630:	4293      	cmp	r3, r2
 8004632:	d001      	beq.n	8004638 <cmp_lfn+0x9c>
 8004634:	2300      	movs	r3, #0
 8004636:	e018      	b.n	800466a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3301      	adds	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d9bf      	bls.n	80045c4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <cmp_lfn+0xcc>
 8004650:	89fb      	ldrh	r3, [r7, #14]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <cmp_lfn+0xcc>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <cmp_lfn+0xcc>
		return 0;
 8004664:	2300      	movs	r3, #0
 8004666:	e000      	b.n	800466a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004668:	2301      	movs	r3, #1
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	08007ed0 	.word	0x08007ed0

08004678 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004678:	b480      	push	{r7}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4611      	mov	r1, r2
 8004684:	461a      	mov	r2, r3
 8004686:	460b      	mov	r3, r1
 8004688:	71fb      	strb	r3, [r7, #7]
 800468a:	4613      	mov	r3, r2
 800468c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	330d      	adds	r3, #13
 8004692:	79ba      	ldrb	r2, [r7, #6]
 8004694:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	330b      	adds	r3, #11
 800469a:	220f      	movs	r2, #15
 800469c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	330c      	adds	r3, #12
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	331a      	adds	r3, #26
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	331b      	adds	r3, #27
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	82fb      	strh	r3, [r7, #22]
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80046ce:	8afb      	ldrh	r3, [r7, #22]
 80046d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <fit_lfn+0x70>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	61fa      	str	r2, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80046e8:	4a1c      	ldr	r2, [pc, #112]	; (800475c <fit_lfn+0xe4>)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4413      	add	r3, r2
 80046f6:	8afa      	ldrh	r2, [r7, #22]
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	8afb      	ldrh	r3, [r7, #22]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b299      	uxth	r1, r3
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <fit_lfn+0xe4>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4413      	add	r3, r2
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	4413      	add	r3, r2
 8004710:	b2ca      	uxtb	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004714:	8afb      	ldrh	r3, [r7, #22]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <fit_lfn+0xa8>
 800471a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800471e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	3301      	adds	r3, #1
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d9d0      	bls.n	80046ce <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800472c:	8afb      	ldrh	r3, [r7, #22]
 800472e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004732:	4293      	cmp	r3, r2
 8004734:	d006      	beq.n	8004744 <fit_lfn+0xcc>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <fit_lfn+0xd4>
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	79fa      	ldrb	r2, [r7, #7]
 8004750:	701a      	strb	r2, [r3, #0]
}
 8004752:	bf00      	nop
 8004754:	3724      	adds	r7, #36	; 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	08007ed0 	.word	0x08007ed0

08004760 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08c      	sub	sp, #48	; 0x30
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800476e:	220b      	movs	r2, #11
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7fe fd22 	bl	80031bc <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d92b      	bls.n	80047d6 <gen_numname+0x76>
		sr = seq;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004782:	e022      	b.n	80047ca <gen_numname+0x6a>
			wc = *lfn++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800478e:	2300      	movs	r3, #0
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
 8004792:	e017      	b.n	80047c4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005a      	lsls	r2, r3, #1
 8004798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80047a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <gen_numname+0x5e>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80047b8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80047bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	3301      	adds	r3, #1
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d9e4      	bls.n	8004794 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1d8      	bne.n	8004784 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80047d6:	2307      	movs	r3, #7
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3330      	adds	r3, #48	; 0x30
 80047e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80047ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ee:	2b39      	cmp	r3, #57	; 0x39
 80047f0:	d904      	bls.n	80047fc <gen_numname+0x9c>
 80047f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047f6:	3307      	adds	r3, #7
 80047f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	62ba      	str	r2, [r7, #40]	; 0x28
 8004802:	3330      	adds	r3, #48	; 0x30
 8004804:	443b      	add	r3, r7
 8004806:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800480a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1df      	bne.n	80047da <gen_numname+0x7a>
	ns[i] = '~';
 800481a:	f107 0214 	add.w	r2, r7, #20
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	4413      	add	r3, r2
 8004822:	227e      	movs	r2, #126	; 0x7e
 8004824:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	e002      	b.n	8004832 <gen_numname+0xd2>
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	3301      	adds	r3, #1
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	429a      	cmp	r2, r3
 8004838:	d205      	bcs.n	8004846 <gen_numname+0xe6>
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b20      	cmp	r3, #32
 8004844:	d1f2      	bne.n	800482c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2b07      	cmp	r3, #7
 800484a:	d807      	bhi.n	800485c <gen_numname+0xfc>
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	62ba      	str	r2, [r7, #40]	; 0x28
 8004852:	3330      	adds	r3, #48	; 0x30
 8004854:	443b      	add	r3, r7
 8004856:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800485a:	e000      	b.n	800485e <gen_numname+0xfe>
 800485c:	2120      	movs	r1, #32
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	627a      	str	r2, [r7, #36]	; 0x24
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	460a      	mov	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	2b07      	cmp	r3, #7
 8004870:	d9e9      	bls.n	8004846 <gen_numname+0xe6>
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	3730      	adds	r7, #48	; 0x30
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004888:	230b      	movs	r3, #11
 800488a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	01db      	lsls	r3, r3, #7
 8004894:	4313      	orrs	r3, r2
 8004896:	b2da      	uxtb	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1c59      	adds	r1, r3, #1
 800489c:	6079      	str	r1, [r7, #4]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1ed      	bne.n	800488c <sum_sfn+0x10>
	return sum;
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80048c4:	2100      	movs	r1, #0
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fbad 	bl	8004026 <dir_sdi>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <dir_find+0x1e>
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	e0b8      	b.n	8004a4c <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80048da:	23ff      	movs	r3, #255	; 0xff
 80048dc:	753b      	strb	r3, [r7, #20]
 80048de:	7d3b      	ldrb	r3, [r7, #20]
 80048e0:	757b      	strb	r3, [r7, #21]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ec:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fe fee3 	bl	80036cc <move_window>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f040 8097 	bne.w	8004a40 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004922:	7dbb      	ldrb	r3, [r7, #22]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <dir_find+0x72>
 8004928:	2304      	movs	r3, #4
 800492a:	75fb      	strb	r3, [r7, #23]
 800492c:	e08d      	b.n	8004a4a <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	330b      	adds	r3, #11
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004938:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800493a:	7dbb      	ldrb	r3, [r7, #22]
 800493c:	2be5      	cmp	r3, #229	; 0xe5
 800493e:	d007      	beq.n	8004950 <dir_find+0x94>
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <dir_find+0xa6>
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b0f      	cmp	r3, #15
 800494e:	d008      	beq.n	8004962 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004950:	23ff      	movs	r3, #255	; 0xff
 8004952:	757b      	strb	r3, [r7, #21]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800495e:	849a      	strh	r2, [r3, #36]	; 0x24
 8004960:	e063      	b.n	8004a2a <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b0f      	cmp	r3, #15
 8004966:	d137      	bne.n	80049d8 <dir_find+0x11c>
				if (dp->lfn) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05a      	beq.n	8004a2a <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004974:	7dbb      	ldrb	r3, [r7, #22]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	7b5b      	ldrb	r3, [r3, #13]
 8004982:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004984:	7dbb      	ldrb	r3, [r7, #22]
 8004986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800498a:	75bb      	strb	r3, [r7, #22]
 800498c:	7dbb      	ldrb	r3, [r7, #22]
 800498e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004996:	88da      	ldrh	r2, [r3, #6]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499e:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80049a0:	7dba      	ldrb	r2, [r7, #22]
 80049a2:	7d7b      	ldrb	r3, [r7, #21]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d114      	bne.n	80049d2 <dir_find+0x116>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	330d      	adds	r3, #13
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	7d3a      	ldrb	r2, [r7, #20]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d10e      	bne.n	80049d2 <dir_find+0x116>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	6939      	ldr	r1, [r7, #16]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fdec 	bl	800459c <cmp_lfn>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <dir_find+0x116>
 80049ca:	7d7b      	ldrb	r3, [r7, #21]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e000      	b.n	80049d4 <dir_find+0x118>
 80049d2:	23ff      	movs	r3, #255	; 0xff
 80049d4:	757b      	strb	r3, [r7, #21]
 80049d6:	e028      	b.n	8004a2a <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80049d8:	7d7b      	ldrb	r3, [r7, #21]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <dir_find+0x132>
 80049de:	6938      	ldr	r0, [r7, #16]
 80049e0:	f7ff ff4c 	bl	800487c <sum_sfn>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461a      	mov	r2, r3
 80049e8:	7d3b      	ldrb	r3, [r7, #20]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d02a      	beq.n	8004a44 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	330b      	adds	r3, #11
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <dir_find+0x15e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	220b      	movs	r2, #11
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6938      	ldr	r0, [r7, #16]
 8004a10:	f7fe fc0c 	bl	800322c <mem_cmp>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004a1a:	23ff      	movs	r3, #255	; 0xff
 8004a1c:	757b      	strb	r3, [r7, #21]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a28:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fbc8 	bl	80041c2 <dir_next>
 8004a32:	4603      	mov	r3, r0
 8004a34:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f43f af58 	beq.w	80048ee <dir_find+0x32>
 8004a3e:	e004      	b.n	8004a4a <dir_find+0x18e>
		if (res != FR_OK) break;
 8004a40:	bf00      	nop
 8004a42:	e002      	b.n	8004a4a <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004a44:	bf00      	nop
 8004a46:	e000      	b.n	8004a4a <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004a48:	bf00      	nop

	return res;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	; 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	220c      	movs	r2, #12
 8004a76:	6a39      	ldr	r1, [r7, #32]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe fb9f 	bl	80031bc <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d03b      	beq.n	8004b00 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	330b      	adds	r3, #11
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa0:	e013      	b.n	8004aca <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004aa2:	f107 010c 	add.w	r1, r7, #12
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	6a38      	ldr	r0, [r7, #32]
 8004aac:	f7ff fe58 	bl	8004760 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff03 	bl	80048bc <dir_find>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b63      	cmp	r3, #99	; 0x63
 8004ace:	d9e8      	bls.n	8004aa2 <dir_register+0x4e>
 8004ad0:	e000      	b.n	8004ad4 <dir_register+0x80>
			if (res != FR_OK) break;
 8004ad2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d101      	bne.n	8004ade <dir_register+0x8a>
 8004ada:	2307      	movs	r3, #7
 8004adc:	e0d8      	b.n	8004c90 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d002      	beq.n	8004aec <dir_register+0x98>
 8004ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004aea:	e0d1      	b.n	8004c90 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	330b      	adds	r3, #11
 8004af0:	7dfa      	ldrb	r2, [r7, #23]
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afa:	461a      	mov	r2, r3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0e:	e002      	b.n	8004b16 <dir_register+0xc2>
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	3301      	adds	r3, #1
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	69fa      	ldr	r2, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f5      	bne.n	8004b10 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	3319      	adds	r3, #25
 8004b28:	4a5b      	ldr	r2, [pc, #364]	; (8004c98 <dir_register+0x244>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
 8004b32:	e001      	b.n	8004b38 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fc8b 	bl	8004456 <dir_alloc>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d15b      	bne.n	8004c06 <dir_register+0x1b2>
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	3b01      	subs	r3, #1
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d055      	beq.n	8004c06 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b60:	88db      	ldrh	r3, [r3, #6]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fa5b 	bl	8004026 <dir_sdi>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d143      	bne.n	8004c06 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fe78 	bl	800487c <sum_sfn>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fe fd92 	bl	80036cc <move_window>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d126      	bne.n	8004c04 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bbc:	6a18      	ldr	r0, [r3, #32]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	7efb      	ldrb	r3, [r7, #27]
 8004bcc:	f7ff fd54 	bl	8004678 <fit_lfn>
				dp->fs->wflag = 1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bdc:	2201      	movs	r2, #1
 8004bde:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004be0:	2100      	movs	r1, #0
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff faed 	bl	80041c2 <dir_next>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d107      	bne.n	8004c06 <dir_register+0x1b2>
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1c6      	bne.n	8004b90 <dir_register+0x13c>
 8004c02:	e000      	b.n	8004c06 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004c04:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d13e      	bne.n	8004c8c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fe fd53 	bl	80036cc <move_window>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d12b      	bne.n	8004c8c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe fad9 	bl	80031f8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	6958      	ldr	r0, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	220b      	movs	r2, #11
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f7fe faaf 	bl	80031bc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	330b      	adds	r3, #11
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	330c      	adds	r3, #12
 8004c74:	f002 0218 	and.w	r2, r2, #24
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	2201      	movs	r2, #1
 8004c8a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3730      	adds	r7, #48	; 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	4ec4ec4f 	.word	0x4ec4ec4f

08004c9c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	e002      	b.n	8004cb4 <create_name+0x18>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b2f      	cmp	r3, #47	; 0x2f
 8004cba:	d0f8      	beq.n	8004cae <create_name+0x12>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b5c      	cmp	r3, #92	; 0x5c
 8004cc2:	d0f4      	beq.n	8004cae <create_name+0x12>
	lfn = dp->lfn;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	61ba      	str	r2, [r7, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce6:	2b1f      	cmp	r3, #31
 8004ce8:	d92f      	bls.n	8004d4a <create_name+0xae>
 8004cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cec:	2b2f      	cmp	r3, #47	; 0x2f
 8004cee:	d02c      	beq.n	8004d4a <create_name+0xae>
 8004cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cf2:	2b5c      	cmp	r3, #92	; 0x5c
 8004cf4:	d029      	beq.n	8004d4a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2bfe      	cmp	r3, #254	; 0xfe
 8004cfa:	d901      	bls.n	8004d00 <create_name+0x64>
			return FR_INVALID_NAME;
 8004cfc:	2306      	movs	r3, #6
 8004cfe:	e186      	b.n	800500e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 fd98 	bl	8006840 <ff_convert>
 8004d10:	4603      	mov	r3, r0
 8004d12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <create_name+0x82>
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	e177      	b.n	800500e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d20:	2b7f      	cmp	r3, #127	; 0x7f
 8004d22:	d809      	bhi.n	8004d38 <create_name+0x9c>
 8004d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d26:	4619      	mov	r1, r3
 8004d28:	488e      	ldr	r0, [pc, #568]	; (8004f64 <create_name+0x2c8>)
 8004d2a:	f7fe faa5 	bl	8003278 <chk_chr>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <create_name+0x9c>
			return FR_INVALID_NAME;
 8004d34:	2306      	movs	r3, #6
 8004d36:	e16a      	b.n	800500e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	617a      	str	r2, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d46:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004d48:	e7c5      	b.n	8004cd6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	441a      	add	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004d54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d56:	2b1f      	cmp	r3, #31
 8004d58:	d801      	bhi.n	8004d5e <create_name+0xc2>
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e000      	b.n	8004d60 <create_name+0xc4>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004d64:	e011      	b.n	8004d8a <create_name+0xee>
		w = lfn[di - 1];
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d002      	beq.n	8004d84 <create_name+0xe8>
 8004d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d80:	2b2e      	cmp	r3, #46	; 0x2e
 8004d82:	d106      	bne.n	8004d92 <create_name+0xf6>
		di--;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ea      	bne.n	8004d66 <create_name+0xca>
 8004d90:	e000      	b.n	8004d94 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8004d92:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <create_name+0x102>
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	e137      	b.n	800500e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	2200      	movs	r2, #0
 8004da8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	220b      	movs	r2, #11
 8004db4:	2120      	movs	r1, #32
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fa1e 	bl	80031f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e002      	b.n	8004dc8 <create_name+0x12c>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	d0f5      	beq.n	8004dc2 <create_name+0x126>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	2b2e      	cmp	r3, #46	; 0x2e
 8004de2:	d0ee      	beq.n	8004dc2 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <create_name+0x162>
 8004dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dee:	f043 0303 	orr.w	r3, r3, #3
 8004df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004df6:	e002      	b.n	8004dfe <create_name+0x162>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <create_name+0x17c>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4413      	add	r3, r2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	2b2e      	cmp	r3, #46	; 0x2e
 8004e16:	d1ef      	bne.n	8004df8 <create_name+0x15c>

	b = i = 0; ni = 8;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	623b      	str	r3, [r7, #32]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e22:	2308      	movs	r3, #8
 8004e24:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	61ba      	str	r2, [r7, #24]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8091 	beq.w	8004f60 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d006      	beq.n	8004e52 <create_name+0x1b6>
 8004e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e46:	2b2e      	cmp	r3, #46	; 0x2e
 8004e48:	d10a      	bne.n	8004e60 <create_name+0x1c4>
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d006      	beq.n	8004e60 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8004e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e56:	f043 0303 	orr.w	r3, r3, #3
 8004e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e5e:	e07e      	b.n	8004f5e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d203      	bcs.n	8004e70 <create_name+0x1d4>
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d123      	bne.n	8004eb8 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2b0b      	cmp	r3, #11
 8004e74:	d106      	bne.n	8004e84 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8004e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e7a:	f043 0303 	orr.w	r3, r3, #3
 8004e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e82:	e076      	b.n	8004f72 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d005      	beq.n	8004e98 <create_name+0x1fc>
 8004e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e90:	f043 0303 	orr.w	r3, r3, #3
 8004e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d867      	bhi.n	8004f70 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	61bb      	str	r3, [r7, #24]
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	623b      	str	r3, [r7, #32]
 8004ea8:	230b      	movs	r3, #11
 8004eaa:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004eb6:	e052      	b.n	8004f5e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eba:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebc:	d914      	bls.n	8004ee8 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fcbc 	bl	8006840 <ff_convert>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <create_name+0x240>
 8004ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ed4:	3b80      	subs	r3, #128	; 0x80
 8004ed6:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <create_name+0x2cc>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <create_name+0x262>
 8004eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	481e      	ldr	r0, [pc, #120]	; (8004f6c <create_name+0x2d0>)
 8004ef4:	f7fe f9c0 	bl	8003278 <chk_chr>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004efe:	235f      	movs	r3, #95	; 0x5f
 8004f00:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f06:	f043 0303 	orr.w	r3, r3, #3
 8004f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f0e:	e01b      	b.n	8004f48 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d909      	bls.n	8004f2a <create_name+0x28e>
 8004f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f18:	2b5a      	cmp	r3, #90	; 0x5a
 8004f1a:	d806      	bhi.n	8004f2a <create_name+0x28e>
					b |= 2;
 8004f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f28:	e00e      	b.n	8004f48 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d90b      	bls.n	8004f48 <create_name+0x2ac>
 8004f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f32:	2b7a      	cmp	r3, #122	; 0x7a
 8004f34:	d808      	bhi.n	8004f48 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8004f36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f44:	3b20      	subs	r3, #32
 8004f46:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	6239      	str	r1, [r7, #32]
 8004f56:	4413      	add	r3, r2
 8004f58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004f5e:	e762      	b.n	8004e26 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8004f60:	bf00      	nop
 8004f62:	e006      	b.n	8004f72 <create_name+0x2d6>
 8004f64:	08007ddc 	.word	0x08007ddc
 8004f68:	08007e50 	.word	0x08007e50
 8004f6c:	08007de8 	.word	0x08007de8
			if (si > di) break;			/* No extension */
 8004f70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2be5      	cmp	r3, #229	; 0xe5
 8004f7e:	d105      	bne.n	8004f8c <create_name+0x2f0>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2205      	movs	r2, #5
 8004f8a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d104      	bne.n	8004f9c <create_name+0x300>
 8004f92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d005      	beq.n	8004fb4 <create_name+0x318>
 8004fa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d105      	bne.n	8004fc0 <create_name+0x324>
		cf |= NS_LFN;
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d117      	bne.n	8004ffc <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d105      	bne.n	8004fe4 <create_name+0x348>
 8004fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fdc:	f043 0310 	orr.w	r3, r3, #16
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d105      	bne.n	8004ffc <create_name+0x360>
 8004ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	330b      	adds	r3, #11
 8005006:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800500a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800500c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b2f      	cmp	r3, #47	; 0x2f
 8005028:	d003      	beq.n	8005032 <follow_path+0x1a>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b5c      	cmp	r3, #92	; 0x5c
 8005030:	d102      	bne.n	8005038 <follow_path+0x20>
		path++;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b1f      	cmp	r3, #31
 800504a:	d80c      	bhi.n	8005066 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800504c:	2100      	movs	r1, #0
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fe ffe9 	bl	8004026 <dir_sdi>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	461a      	mov	r2, r3
 8005060:	2300      	movs	r3, #0
 8005062:	6153      	str	r3, [r2, #20]
 8005064:	e049      	b.n	80050fa <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005066:	463b      	mov	r3, r7
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fe16 	bl	8004c9c <create_name>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d13a      	bne.n	80050f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fc1e 	bl	80048bc <dir_find>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	7adb      	ldrb	r3, [r3, #11]
 800508e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d12b      	bne.n	80050f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d126      	bne.n	80050f4 <follow_path+0xdc>
 80050a6:	2305      	movs	r3, #5
 80050a8:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80050aa:	e023      	b.n	80050f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d120      	bne.n	80050f8 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	330b      	adds	r3, #11
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80050ce:	2305      	movs	r3, #5
 80050d0:	73fb      	strb	r3, [r7, #15]
 80050d2:	e012      	b.n	80050fa <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fa07 	bl	80044f2 <ld_clust>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050ee:	e7ba      	b.n	8005066 <follow_path+0x4e>
			if (res != FR_OK) break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <follow_path+0xe2>
				break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050f8:	bf00      	nop
		}
	}

	return res;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d031      	beq.n	800517e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e002      	b.n	8005128 <get_ldnumber+0x24>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	3301      	adds	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b1f      	cmp	r3, #31
 800512e:	d903      	bls.n	8005138 <get_ldnumber+0x34>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b3a      	cmp	r3, #58	; 0x3a
 8005136:	d1f4      	bne.n	8005122 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b3a      	cmp	r3, #58	; 0x3a
 800513e:	d11c      	bne.n	800517a <get_ldnumber+0x76>
			tp = *path;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	3b30      	subs	r3, #48	; 0x30
 8005150:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b09      	cmp	r3, #9
 8005156:	d80e      	bhi.n	8005176 <get_ldnumber+0x72>
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d10a      	bne.n	8005176 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <get_ldnumber+0x72>
					vol = (int)i;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	3301      	adds	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	e002      	b.n	8005180 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800517e:	693b      	ldr	r3, [r7, #16]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
	...

0800518c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519c:	2200      	movs	r2, #0
 800519e:	711a      	strb	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe fa8b 	bl	80036cc <move_window>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <check_fs+0x34>
		return 3;
 80051bc:	2303      	movs	r3, #3
 80051be:	e04a      	b.n	8005256 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80051c6:	3301      	adds	r3, #1
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	b21a      	sxth	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	4313      	orrs	r3, r2
 80051d8:	b21b      	sxth	r3, r3
 80051da:	4a21      	ldr	r2, [pc, #132]	; (8005260 <check_fs+0xd4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d001      	beq.n	80051e4 <check_fs+0x58>
		return 2;
 80051e0:	2302      	movs	r3, #2
 80051e2:	e038      	b.n	8005256 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3336      	adds	r3, #54	; 0x36
 80051e8:	3303      	adds	r3, #3
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	061a      	lsls	r2, r3, #24
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3336      	adds	r3, #54	; 0x36
 80051f2:	3302      	adds	r3, #2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	4313      	orrs	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	3236      	adds	r2, #54	; 0x36
 80051fe:	3201      	adds	r2, #1
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	0212      	lsls	r2, r2, #8
 8005204:	4313      	orrs	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800520c:	4313      	orrs	r3, r2
 800520e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005212:	4a14      	ldr	r2, [pc, #80]	; (8005264 <check_fs+0xd8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <check_fs+0x90>
		return 0;
 8005218:	2300      	movs	r3, #0
 800521a:	e01c      	b.n	8005256 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3352      	adds	r3, #82	; 0x52
 8005220:	3303      	adds	r3, #3
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	061a      	lsls	r2, r3, #24
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3352      	adds	r3, #82	; 0x52
 800522a:	3302      	adds	r3, #2
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	041b      	lsls	r3, r3, #16
 8005230:	4313      	orrs	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	3252      	adds	r2, #82	; 0x52
 8005236:	3201      	adds	r2, #1
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	0212      	lsls	r2, r2, #8
 800523c:	4313      	orrs	r3, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005244:	4313      	orrs	r3, r2
 8005246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800524a:	4a06      	ldr	r2, [pc, #24]	; (8005264 <check_fs+0xd8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <check_fs+0xc8>
		return 0;
 8005250:	2300      	movs	r3, #0
 8005252:	e000      	b.n	8005256 <check_fs+0xca>

	return 1;
 8005254:	2301      	movs	r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	ffffaa55 	.word	0xffffaa55
 8005264:	00544146 	.word	0x00544146

08005268 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b096      	sub	sp, #88	; 0x58
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800527c:	68b8      	ldr	r0, [r7, #8]
 800527e:	f7ff ff41 	bl	8005104 <get_ldnumber>
 8005282:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	da01      	bge.n	800528e <find_volume+0x26>
 800528a:	230b      	movs	r3, #11
 800528c:	e311      	b.n	80058b2 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800528e:	4a98      	ldr	r2, [pc, #608]	; (80054f0 <find_volume+0x288>)
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <find_volume+0x3a>
 800529e:	230c      	movs	r3, #12
 80052a0:	e307      	b.n	80058b2 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fd fedf 	bl	8003080 <disk_status>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80052c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10c      	bne.n	80052ee <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <find_volume+0x82>
 80052da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80052e6:	230a      	movs	r3, #10
 80052e8:	e2e3      	b.n	80058b2 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80052ea:	2300      	movs	r3, #0
 80052ec:	e2e1      	b.n	80058b2 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005302:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fd fed1 	bl	80030b4 <disk_initialize>
 8005312:	4603      	mov	r3, r0
 8005314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005324:	2303      	movs	r3, #3
 8005326:	e2c4      	b.n	80058b2 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d007      	beq.n	800533e <find_volume+0xd6>
 800532e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800533a:	230a      	movs	r3, #10
 800533c:	e2b9      	b.n	80058b2 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005344:	7858      	ldrb	r0, [r3, #1]
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534c:	330a      	adds	r3, #10
 800534e:	461a      	mov	r2, r3
 8005350:	2102      	movs	r1, #2
 8005352:	f7fd ff15 	bl	8003180 <disk_ioctl>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005362:	895b      	ldrh	r3, [r3, #10]
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d306      	bcc.n	8005378 <find_volume+0x110>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005370:	895b      	ldrh	r3, [r3, #10]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d901      	bls.n	800537c <find_volume+0x114>
 8005378:	2301      	movs	r3, #1
 800537a:	e29a      	b.n	80058b2 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005380:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005384:	f7ff ff02 	bl	800518c <check_fs>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800538e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005392:	2b01      	cmp	r3, #1
 8005394:	d153      	bne.n	800543e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005396:	2300      	movs	r3, #0
 8005398:	643b      	str	r3, [r7, #64]	; 0x40
 800539a:	e028      	b.n	80053ee <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800539c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80053a6:	4413      	add	r3, r2
 80053a8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	3304      	adds	r3, #4
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d012      	beq.n	80053da <find_volume+0x172>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	330b      	adds	r3, #11
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	061a      	lsls	r2, r3, #24
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	330a      	adds	r3, #10
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	4313      	orrs	r3, r2
 80053c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c8:	3209      	adds	r2, #9
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	0212      	lsls	r2, r2, #8
 80053ce:	4313      	orrs	r3, r2
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	3208      	adds	r2, #8
 80053d4:	7812      	ldrb	r2, [r2, #0]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	e000      	b.n	80053dc <find_volume+0x174>
 80053da:	2200      	movs	r2, #0
 80053dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	3358      	adds	r3, #88	; 0x58
 80053e2:	443b      	add	r3, r7
 80053e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ea:	3301      	adds	r3, #1
 80053ec:	643b      	str	r3, [r7, #64]	; 0x40
 80053ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d9d3      	bls.n	800539c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80053f4:	2300      	movs	r3, #0
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80053f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <find_volume+0x19c>
 80053fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005400:	3b01      	subs	r3, #1
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	3358      	adds	r3, #88	; 0x58
 800540a:	443b      	add	r3, r7
 800540c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005410:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <find_volume+0x1bc>
 8005418:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800541a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800541c:	f7ff feb6 	bl	800518c <check_fs>
 8005420:	4603      	mov	r3, r0
 8005422:	e000      	b.n	8005426 <find_volume+0x1be>
 8005424:	2302      	movs	r3, #2
 8005426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800542a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <find_volume+0x1d6>
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	3301      	adds	r3, #1
 8005436:	643b      	str	r3, [r7, #64]	; 0x40
 8005438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543a:	2b03      	cmp	r3, #3
 800543c:	d9e2      	bls.n	8005404 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800543e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005442:	2b03      	cmp	r3, #3
 8005444:	d101      	bne.n	800544a <find_volume+0x1e2>
 8005446:	2301      	movs	r3, #1
 8005448:	e233      	b.n	80058b2 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800544a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <find_volume+0x1ee>
 8005452:	230d      	movs	r3, #13
 8005454:	e22d      	b.n	80058b2 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	b21a      	sxth	r2, r3
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	7adb      	ldrb	r3, [r3, #11]
 8005462:	b21b      	sxth	r3, r3
 8005464:	4313      	orrs	r3, r2
 8005466:	b21a      	sxth	r2, r3
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546e:	895b      	ldrh	r3, [r3, #10]
 8005470:	b21b      	sxth	r3, r3
 8005472:	429a      	cmp	r2, r3
 8005474:	d001      	beq.n	800547a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8005476:	230d      	movs	r3, #13
 8005478:	e21b      	b.n	80058b2 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	7ddb      	ldrb	r3, [r3, #23]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	b21a      	sxth	r2, r3
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	7d9b      	ldrb	r3, [r3, #22]
 8005486:	b21b      	sxth	r3, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	b21b      	sxth	r3, r3
 800548c:	b29b      	uxth	r3, r3
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d112      	bne.n	80054bc <find_volume+0x254>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800549c:	061a      	lsls	r2, r3, #24
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	4313      	orrs	r3, r2
 80054a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054aa:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80054ae:	0212      	lsls	r2, r2, #8
 80054b0:	4313      	orrs	r3, r2
 80054b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80054b8:	4313      	orrs	r3, r2
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c2:	461a      	mov	r2, r3
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	7c1a      	ldrb	r2, [r3, #16]
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054da:	78db      	ldrb	r3, [r3, #3]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d009      	beq.n	80054f4 <find_volume+0x28c>
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e6:	78db      	ldrb	r3, [r3, #3]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d003      	beq.n	80054f4 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80054ec:	230d      	movs	r3, #13
 80054ee:	e1e0      	b.n	80058b2 <find_volume+0x64a>
 80054f0:	20002640 	.word	0x20002640
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fa:	78db      	ldrb	r3, [r3, #3]
 80054fc:	461a      	mov	r2, r3
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	7b5a      	ldrb	r2, [r3, #13]
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005510:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005518:	789b      	ldrb	r3, [r3, #2]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <find_volume+0x2d0>
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	461a      	mov	r2, r3
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552e:	789b      	ldrb	r3, [r3, #2]
 8005530:	3b01      	subs	r3, #1
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8005538:	230d      	movs	r3, #13
 800553a:	e1ba      	b.n	80058b2 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	7c9b      	ldrb	r3, [r3, #18]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	b21a      	sxth	r2, r3
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	7c5b      	ldrb	r3, [r3, #17]
 8005548:	b21b      	sxth	r3, r3
 800554a:	4313      	orrs	r3, r2
 800554c:	b21b      	sxth	r3, r3
 800554e:	b29a      	uxth	r2, r3
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555e:	891b      	ldrh	r3, [r3, #8]
 8005560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005566:	8952      	ldrh	r2, [r2, #10]
 8005568:	0952      	lsrs	r2, r2, #5
 800556a:	b292      	uxth	r2, r2
 800556c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005570:	fb01 f202 	mul.w	r2, r1, r2
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800557c:	230d      	movs	r3, #13
 800557e:	e198      	b.n	80058b2 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	7d1b      	ldrb	r3, [r3, #20]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	b21a      	sxth	r2, r3
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	7cdb      	ldrb	r3, [r3, #19]
 800558c:	b21b      	sxth	r3, r3
 800558e:	4313      	orrs	r3, r2
 8005590:	b21b      	sxth	r3, r3
 8005592:	b29b      	uxth	r3, r3
 8005594:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005598:	2b00      	cmp	r3, #0
 800559a:	d112      	bne.n	80055c2 <find_volume+0x35a>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80055a2:	061a      	lsls	r2, r3, #24
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	4313      	orrs	r3, r2
 80055ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80055b4:	0212      	lsls	r2, r2, #8
 80055b6:	4313      	orrs	r3, r2
 80055b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80055be:	4313      	orrs	r3, r2
 80055c0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	7bdb      	ldrb	r3, [r3, #15]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	b21a      	sxth	r2, r3
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	7b9b      	ldrb	r3, [r3, #14]
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	4313      	orrs	r3, r2
 80055d2:	b21b      	sxth	r3, r3
 80055d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80055d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <find_volume+0x378>
 80055dc:	230d      	movs	r3, #13
 80055de:	e168      	b.n	80058b2 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80055e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	4413      	add	r3, r2
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055ec:	8911      	ldrh	r1, [r2, #8]
 80055ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055f4:	8952      	ldrh	r2, [r2, #10]
 80055f6:	0952      	lsrs	r2, r2, #5
 80055f8:	b292      	uxth	r2, r2
 80055fa:	fbb1 f2f2 	udiv	r2, r1, r2
 80055fe:	b292      	uxth	r2, r2
 8005600:	4413      	add	r3, r2
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	429a      	cmp	r2, r3
 800560a:	d201      	bcs.n	8005610 <find_volume+0x3a8>
 800560c:	230d      	movs	r3, #13
 800560e:	e150      	b.n	80058b2 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561c:	7892      	ldrb	r2, [r2, #2]
 800561e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <find_volume+0x3c6>
 800562a:	230d      	movs	r3, #13
 800562c:	e141      	b.n	80058b2 <find_volume+0x64a>
	fmt = FS_FAT12;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f640 72f5 	movw	r2, #4085	; 0xff5
 800563a:	4293      	cmp	r3, r2
 800563c:	d902      	bls.n	8005644 <find_volume+0x3dc>
 800563e:	2302      	movs	r3, #2
 8005640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800564a:	4293      	cmp	r3, r2
 800564c:	d902      	bls.n	8005654 <find_volume+0x3ec>
 800564e:	2303      	movs	r3, #3
 8005650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	3302      	adds	r3, #2
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800565e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005666:	461a      	mov	r2, r3
 8005668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800566c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	4413      	add	r3, r2
 8005672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005678:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800567a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	4413      	add	r3, r2
 8005680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005686:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8005688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800568c:	2b03      	cmp	r3, #3
 800568e:	d124      	bne.n	80056da <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005696:	891b      	ldrh	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <find_volume+0x438>
 800569c:	230d      	movs	r3, #13
 800569e:	e108      	b.n	80058b2 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056a6:	061a      	lsls	r2, r3, #24
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	4313      	orrs	r3, r2
 80056b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80056b8:	0212      	lsls	r2, r2, #8
 80056ba:	4313      	orrs	r3, r2
 80056bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056be:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80056c2:	4313      	orrs	r3, r2
 80056c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056ca:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	e02b      	b.n	8005732 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e0:	891b      	ldrh	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <find_volume+0x482>
 80056e6:	230d      	movs	r3, #13
 80056e8:	e0e3      	b.n	80058b2 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	4413      	add	r3, r2
 80056f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056fc:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80056fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005702:	2b02      	cmp	r3, #2
 8005704:	d105      	bne.n	8005712 <find_volume+0x4aa>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	e00e      	b.n	8005730 <find_volume+0x4c8>
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005718:	695a      	ldr	r2, [r3, #20]
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	085a      	lsrs	r2, r3, #1
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	4619      	mov	r1, r3
 8005744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005746:	440b      	add	r3, r1
 8005748:	3b01      	subs	r3, #1
 800574a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800574c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8005750:	8949      	ldrh	r1, [r1, #10]
 8005752:	fbb3 f3f1 	udiv	r3, r3, r1
 8005756:	429a      	cmp	r2, r3
 8005758:	d201      	bcs.n	800575e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800575a:	230d      	movs	r3, #13
 800575c:	e0a9      	b.n	80058b2 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	461a      	mov	r2, r3
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	6113      	str	r3, [r2, #16]
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800577a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800578a:	2b03      	cmp	r3, #3
 800578c:	d17a      	bne.n	8005884 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	b21a      	sxth	r2, r3
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800579e:	b21b      	sxth	r3, r3
 80057a0:	4313      	orrs	r3, r2
 80057a2:	b21b      	sxth	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d16d      	bne.n	8005884 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80057a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057aa:	3301      	adds	r3, #1
 80057ac:	4619      	mov	r1, r3
 80057ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057b0:	f7fd ff8c 	bl	80036cc <move_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d164      	bne.n	8005884 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	2200      	movs	r2, #0
 80057c2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80057d4:	b21b      	sxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b21b      	sxth	r3, r3
 80057da:	4a38      	ldr	r2, [pc, #224]	; (80058bc <find_volume+0x654>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d151      	bne.n	8005884 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	061a      	lsls	r2, r3, #24
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	789b      	ldrb	r3, [r3, #2]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	4313      	orrs	r3, r2
 80057ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f0:	7852      	ldrb	r2, [r2, #1]
 80057f2:	0212      	lsls	r2, r2, #8
 80057f4:	4313      	orrs	r3, r2
 80057f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f8:	7812      	ldrb	r2, [r2, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	4a30      	ldr	r2, [pc, #192]	; (80058c0 <find_volume+0x658>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d140      	bne.n	8005884 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005808:	061a      	lsls	r2, r3, #24
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	4313      	orrs	r3, r2
 8005814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005816:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800581a:	0212      	lsls	r2, r2, #8
 800581c:	4313      	orrs	r3, r2
 800581e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005820:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005824:	4313      	orrs	r3, r2
 8005826:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <find_volume+0x65c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d12b      	bne.n	8005884 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005832:	061a      	lsls	r2, r3, #24
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	4313      	orrs	r3, r2
 800583e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005840:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005844:	0212      	lsls	r2, r2, #8
 8005846:	4313      	orrs	r3, r2
 8005848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800584e:	4313      	orrs	r3, r2
 8005850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005856:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800585e:	061a      	lsls	r2, r3, #24
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005866:	041b      	lsls	r3, r3, #16
 8005868:	4313      	orrs	r3, r2
 800586a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800586c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005870:	0212      	lsls	r2, r2, #8
 8005872:	4313      	orrs	r3, r2
 8005874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005876:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800587a:	4313      	orrs	r3, r2
 800587c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005882:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588a:	461a      	mov	r2, r3
 800588c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005890:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <find_volume+0x660>)
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	3301      	adds	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <find_volume+0x660>)
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <find_volume+0x660>)
 80058a0:	881a      	ldrh	r2, [r3, #0]
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a8:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80058aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058ac:	f7fd fe92 	bl	80035d4 <clear_lock>
#endif

	return FR_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3758      	adds	r7, #88	; 0x58
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	ffffaa55 	.word	0xffffaa55
 80058c0:	41615252 	.word	0x41615252
 80058c4:	61417272 	.word	0x61417272
 80058c8:	20002644 	.word	0x20002644

080058cc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02a      	beq.n	8005934 <validate+0x68>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d024      	beq.n	8005934 <validate+0x68>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01b      	beq.n	8005934 <validate+0x68>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	88da      	ldrh	r2, [r3, #6]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	889b      	ldrh	r3, [r3, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d10e      	bne.n	8005934 <validate+0x68>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fd fbab 	bl	8003080 <disk_status>
 800592a:	4603      	mov	r3, r0
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005934:	2309      	movs	r3, #9
 8005936:	e000      	b.n	800593a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005956:	f107 0310 	add.w	r3, r7, #16
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fbd2 	bl	8005104 <get_ldnumber>
 8005960:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da01      	bge.n	800596c <f_mount+0x28>
 8005968:	230b      	movs	r3, #11
 800596a:	e02f      	b.n	80059cc <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <f_mount+0x90>)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005974:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800597c:	69b8      	ldr	r0, [r7, #24]
 800597e:	f7fd fe29 	bl	80035d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	490d      	ldr	r1, [pc, #52]	; (80059d4 <f_mount+0x90>)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <f_mount+0x6e>
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d001      	beq.n	80059b6 <f_mount+0x72>
 80059b2:	2300      	movs	r3, #0
 80059b4:	e00a      	b.n	80059cc <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80059b6:	f107 0108 	add.w	r1, r7, #8
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	2200      	movs	r2, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fc51 	bl	8005268 <find_volume>
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20002640 	.word	0x20002640

080059d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059e6:	f843 0c4c 	str.w	r0, [r3, #-76]
 80059ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059ee:	f843 1c50 	str.w	r1, [r3, #-80]
 80059f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059f6:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80059fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059fe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <f_open+0x32>
 8005a06:	2309      	movs	r3, #9
 8005a08:	e311      	b.n	800602e <f_open+0x656>
	fp->fs = 0;			/* Clear file object */
 8005a0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a0e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005a1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a20:	461a      	mov	r2, r3
 8005a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a26:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005a32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a36:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	f107 0118 	add.w	r1, r7, #24
 8005a44:	3910      	subs	r1, #16
 8005a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a4a:	3b1c      	subs	r3, #28
 8005a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fc09 	bl	8005268 <find_volume>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005a5c:	f102 0217 	add.w	r2, r2, #23
 8005a60:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005a62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a66:	f103 0317 	add.w	r3, r3, #23
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 82d9 	bne.w	8006024 <f_open+0x64c>
		INIT_BUF(dj);
 8005a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005a76:	f000 ff4b 	bl	8006910 <ff_memalloc>
 8005a7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a7e:	f103 030c 	add.w	r3, r3, #12
 8005a82:	6018      	str	r0, [r3, #0]
 8005a84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005a88:	f103 030c 	add.w	r3, r3, #12
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <f_open+0xbe>
 8005a92:	2311      	movs	r3, #17
 8005a94:	e2cb      	b.n	800602e <f_open+0x656>
 8005a96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005aa0:	f103 030c 	add.w	r3, r3, #12
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8c2 3fe4 	str.w	r3, [r2, #4068]	; 0xfe4
 8005aaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f107 0318 	add.w	r3, r7, #24
 8005ab4:	3b08      	subs	r3, #8
 8005ab6:	f8c2 3fdc 	str.w	r3, [r2, #4060]	; 0xfdc
		res = follow_path(&dj, path);	/* Follow the file path */
 8005aba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005abe:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005ac2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ac6:	3b1c      	subs	r3, #28
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff faa4 	bl	8005018 <follow_path>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ad6:	f102 0217 	add.w	r2, r2, #23
 8005ada:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005adc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ae0:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 8005ae4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ae8:	f102 0210 	add.w	r2, r2, #16
 8005aec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005aee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005af2:	f103 0317 	add.w	r3, r3, #23
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d126      	bne.n	8005b4a <f_open+0x172>
			if (!dir)	/* Default directory itself */
 8005afc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b00:	f103 0310 	add.w	r3, r3, #16
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <f_open+0x140>
				res = FR_INVALID_NAME;
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b10:	f102 0217 	add.w	r2, r2, #23
 8005b14:	7013      	strb	r3, [r2, #0]
 8005b16:	e018      	b.n	8005b4a <f_open+0x172>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b1c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b34:	3b1c      	subs	r3, #28
 8005b36:	4611      	mov	r1, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fd fbb7 	bl	80032ac <chk_lock>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b44:	f102 0217 	add.w	r2, r2, #23
 8005b48:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b4e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005b52:	f003 031c 	and.w	r3, r3, #28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 813c 	beq.w	8005dd4 <f_open+0x3fc>
			if (res != FR_OK) {					/* No file, create new */
 8005b5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b60:	f103 0317 	add.w	r3, r3, #23
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d02e      	beq.n	8005bc8 <f_open+0x1f0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005b6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005b6e:	f103 0317 	add.w	r3, r3, #23
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d112      	bne.n	8005b9e <f_open+0x1c6>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b78:	f7fd fc08 	bl	800338c <enq_lock>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <f_open+0x1ba>
 8005b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b86:	3b1c      	subs	r3, #28
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe ff63 	bl	8004a54 <dir_register>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	e000      	b.n	8005b94 <f_open+0x1bc>
 8005b92:	2312      	movs	r3, #18
 8005b94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005b98:	f102 0217 	add.w	r2, r2, #23
 8005b9c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ba8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005bb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bb8:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 8005bbc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005bc0:	f102 0210 	add.w	r2, r2, #16
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e01f      	b.n	8005c08 <f_open+0x230>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005bcc:	f103 0310 	add.w	r3, r3, #16
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	330b      	adds	r3, #11
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f003 0311 	and.w	r3, r3, #17
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d006      	beq.n	8005bec <f_open+0x214>
					res = FR_DENIED;
 8005bde:	2307      	movs	r3, #7
 8005be0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005be4:	f102 0217 	add.w	r2, r2, #23
 8005be8:	7013      	strb	r3, [r2, #0]
 8005bea:	e00d      	b.n	8005c08 <f_open+0x230>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005bf0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <f_open+0x230>
						res = FR_EXIST;
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005c02:	f102 0217 	add.w	r2, r2, #23
 8005c06:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005c08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c0c:	f103 0317 	add.w	r3, r3, #23
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 8110 	bne.w	8005e38 <f_open+0x460>
 8005c18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005c1c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8107 	beq.w	8005e38 <f_open+0x460>
				dw = GET_FATTIME();				/* Created time */
 8005c2a:	f7fd f9c7 	bl	8002fbc <get_fattime>
 8005c2e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c32:	f103 0308 	add.w	r3, r3, #8
 8005c36:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005c38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c3c:	f103 0310 	add.w	r3, r3, #16
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330e      	adds	r3, #14
 8005c44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005c48:	f102 0208 	add.w	r2, r2, #8
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c56:	f103 0308 	add.w	r3, r3, #8
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c66:	f103 0310 	add.w	r3, r3, #16
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330f      	adds	r3, #15
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c76:	f103 0308 	add.w	r3, r3, #8
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	0c1a      	lsrs	r2, r3, #16
 8005c7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c82:	f103 0310 	add.w	r3, r3, #16
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3310      	adds	r3, #16
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c92:	f103 0308 	add.w	r3, r3, #8
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0e1a      	lsrs	r2, r3, #24
 8005c9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005c9e:	f103 0310 	add.w	r3, r3, #16
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3311      	adds	r3, #17
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005caa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cae:	f103 0310 	add.w	r3, r3, #16
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330b      	adds	r3, #11
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005cba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cbe:	f103 0310 	add.w	r3, r3, #16
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	331c      	adds	r3, #28
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cce:	f103 0310 	add.w	r3, r3, #16
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	331d      	adds	r3, #29
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cde:	f103 0310 	add.w	r3, r3, #16
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	331e      	adds	r3, #30
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005cee:	f103 0310 	add.w	r3, r3, #16
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	331f      	adds	r3, #31
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005cfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005cfe:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005d02:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d06:	f102 0210 	add.w	r2, r2, #16
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fbf0 	bl	80044f2 <ld_clust>
 8005d12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d16:	f103 0304 	add.w	r3, r3, #4
 8005d1a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d22:	f103 0310 	add.w	r3, r3, #16
 8005d26:	6818      	ldr	r0, [r3, #0]
 8005d28:	f7fe fc11 	bl	800454e <st_clust>
				dj.fs->wflag = 1;
 8005d2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d30:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	2201      	movs	r2, #1
 8005d3a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005d3c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d40:	f103 0304 	add.w	r3, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d076      	beq.n	8005e38 <f_open+0x460>
					dw = dj.fs->winsect;
 8005d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d4e:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d5c:	f102 0208 	add.w	r2, r2, #8
 8005d60:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8005d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d66:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005d6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d6e:	f102 0204 	add.w	r2, r2, #4
 8005d72:	6811      	ldr	r1, [r2, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe f80d 	bl	8003d94 <remove_chain>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005d80:	f102 0217 	add.w	r2, r2, #23
 8005d84:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8005d86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005d8a:	f103 0317 	add.w	r3, r3, #23
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d151      	bne.n	8005e38 <f_open+0x460>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005d98:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	; 0xfc4
 8005d9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005da0:	f103 0304 	add.w	r3, r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dac:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8005dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005db2:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005db6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dba:	f102 0208 	add.w	r2, r2, #8
 8005dbe:	6811      	ldr	r1, [r2, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fd fc83 	bl	80036cc <move_window>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dcc:	f102 0217 	add.w	r2, r2, #23
 8005dd0:	7013      	strb	r3, [r2, #0]
 8005dd2:	e031      	b.n	8005e38 <f_open+0x460>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005dd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005dd8:	f103 0317 	add.w	r3, r3, #23
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d12a      	bne.n	8005e38 <f_open+0x460>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005de2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005de6:	f103 0310 	add.w	r3, r3, #16
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330b      	adds	r3, #11
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d006      	beq.n	8005e06 <f_open+0x42e>
					res = FR_NO_FILE;
 8005df8:	2304      	movs	r3, #4
 8005dfa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005dfe:	f102 0217 	add.w	r2, r2, #23
 8005e02:	7013      	strb	r3, [r2, #0]
 8005e04:	e018      	b.n	8005e38 <f_open+0x460>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e0a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <f_open+0x460>
 8005e16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e1a:	f103 0310 	add.w	r3, r3, #16
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330b      	adds	r3, #11
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <f_open+0x460>
						res = FR_DENIED;
 8005e2c:	2307      	movs	r3, #7
 8005e2e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e32:	f102 0217 	add.w	r2, r2, #23
 8005e36:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8005e38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e3c:	f103 0317 	add.w	r3, r3, #23
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d157      	bne.n	8005ef6 <f_open+0x51e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e4a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <f_open+0x494>
				mode |= FA__WRITTEN;
 8005e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e60:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e64:	f043 0320 	orr.w	r3, r3, #32
 8005e68:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e70:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005e7e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005e82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e86:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8005e88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005e8c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e94:	461a      	mov	r2, r3
 8005e96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e9a:	f103 0310 	add.w	r3, r3, #16
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ea2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ea6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ebe:	3b1c      	subs	r3, #28
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fa86 	bl	80033d4 <inc_lock>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ece:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8005ed8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005edc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <f_open+0x51e>
 8005eea:	2302      	movs	r3, #2
 8005eec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ef0:	f102 0217 	add.w	r2, r2, #23
 8005ef4:	7013      	strb	r3, [r2, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8005ef6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005efa:	f103 030c 	add.w	r3, r3, #12
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	f000 fd12 	bl	8006928 <ff_memfree>

		if (res == FR_OK) {
 8005f04:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f08:	f103 0317 	add.w	r3, r3, #23
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 8088 	bne.w	8006024 <f_open+0x64c>
			fp->flag = mode;					/* File access mode */
 8005f14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f18:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f20:	461a      	mov	r2, r3
 8005f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f26:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005f2a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8005f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f30:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	2200      	movs	r2, #0
 8005f3a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005f3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f40:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005f44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f48:	f102 0210 	add.w	r2, r2, #16
 8005f4c:	6811      	ldr	r1, [r2, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe facf 	bl	80044f2 <ld_clust>
 8005f54:	4602      	mov	r2, r0
 8005f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005f5a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f62:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005f64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f68:	f103 0310 	add.w	r3, r3, #16
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	331f      	adds	r3, #31
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	061a      	lsls	r2, r3, #24
 8005f74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f78:	f103 0310 	add.w	r3, r3, #16
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	331e      	adds	r3, #30
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f8a:	f102 0210 	add.w	r2, r2, #16
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	321d      	adds	r2, #29
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	0212      	lsls	r2, r2, #8
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f9c:	f102 0210 	add.w	r2, r2, #16
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	321c      	adds	r2, #28
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005fac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005fb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fb4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8005fb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8005fc8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fcc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fde:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005fec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ff0:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8005ff4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005ff8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8005ffc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006000:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8006002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006006:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	88da      	ldrh	r2, [r3, #6]
 8006016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800601a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800601e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006022:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006024:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006028:	f103 0317 	add.w	r3, r3, #23
 800602c:	781b      	ldrb	r3, [r3, #0]
}
 800602e:	4618      	mov	r0, r3
 8006030:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b08a      	sub	sp, #40	; 0x28
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fc3a 	bl	80058cc <validate>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <f_write+0x2c>
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	e21e      	b.n	80064a4 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	79db      	ldrb	r3, [r3, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006078:	79db      	ldrb	r3, [r3, #7]
 800607a:	e213      	b.n	80064a4 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006082:	799b      	ldrb	r3, [r3, #6]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800608c:	2307      	movs	r3, #7
 800608e:	e209      	b.n	80064a4 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	441a      	add	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	f080 81d9 	bcs.w	800645c <f_write+0x422>
 80060aa:	2300      	movs	r3, #0
 80060ac:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80060ae:	e1d5      	b.n	800645c <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060c4:	8952      	ldrh	r2, [r2, #10]
 80060c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ca:	fb01 f202 	mul.w	r2, r1, r2
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 8169 	bne.w	80063a8 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060ea:	8952      	ldrh	r2, [r2, #10]
 80060ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fe:	789b      	ldrb	r3, [r3, #2]
 8006100:	3b01      	subs	r3, #1
 8006102:	b2db      	uxtb	r3, r3
 8006104:	4013      	ands	r3, r2
 8006106:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006108:	7dbb      	ldrb	r3, [r7, #22]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d15f      	bne.n	80061ce <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d111      	bne.n	800613e <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d126      	bne.n	8006178 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f7fd fe8e 	bl	8003e56 <create_chain>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24
 800613c:	e01c      	b.n	8006178 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d009      	beq.n	800615e <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7fd ff26 	bl	8003fa6 <clmt_clust>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24
 800615c:	e00c      	b.n	8006178 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fd fe70 	bl	8003e56 <create_chain>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8173 	beq.w	8006466 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	2b01      	cmp	r3, #1
 8006184:	d106      	bne.n	8006194 <f_write+0x15a>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618c:	2202      	movs	r2, #2
 800618e:	71da      	strb	r2, [r3, #7]
 8006190:	2302      	movs	r3, #2
 8006192:	e187      	b.n	80064a4 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619a:	d106      	bne.n	80061aa <f_write+0x170>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a2:	2201      	movs	r2, #1
 80061a4:	71da      	strb	r2, [r3, #7]
 80061a6:	2301      	movs	r3, #1
 80061a8:	e17c      	b.n	80064a4 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <f_write+0x194>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c8:	461a      	mov	r2, r3
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d4:	799b      	ldrb	r3, [r3, #6]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d023      	beq.n	8006226 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ea:	7858      	ldrb	r0, [r3, #1]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	2301      	movs	r3, #1
 80061f8:	f7fc ffa2 	bl	8003140 <disk_write>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006208:	2201      	movs	r2, #1
 800620a:	71da      	strb	r2, [r3, #7]
 800620c:	2301      	movs	r3, #1
 800620e:	e149      	b.n	80064a4 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006216:	799b      	ldrb	r3, [r3, #6]
 8006218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7fd fb38 	bl	80038ae <clust2sect>
 800623e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <f_write+0x21a>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624c:	2202      	movs	r2, #2
 800624e:	71da      	strb	r2, [r3, #7]
 8006250:	2302      	movs	r3, #2
 8006252:	e127      	b.n	80064a4 <f_write+0x46a>
			sect += csect;
 8006254:	7dbb      	ldrb	r3, [r7, #22]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006268:	895b      	ldrh	r3, [r3, #10]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006272:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d069      	beq.n	800634e <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800627a:	7dba      	ldrb	r2, [r7, #22]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800628c:	7892      	ldrb	r2, [r2, #2]
 800628e:	4293      	cmp	r3, r2
 8006290:	d90a      	bls.n	80062a8 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	789b      	ldrb	r3, [r3, #2]
 80062a0:	461a      	mov	r2, r3
 80062a2:	7dbb      	ldrb	r3, [r7, #22]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b4:	7858      	ldrb	r0, [r3, #1]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	f7fc ff40 	bl	8003140 <disk_write>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d006      	beq.n	80062d4 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	2201      	movs	r2, #1
 80062ce:	71da      	strb	r2, [r3, #7]
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0e7      	b.n	80064a4 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d926      	bls.n	8006334 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006300:	8952      	ldrh	r2, [r2, #10]
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	18d1      	adds	r1, r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006316:	895b      	ldrh	r3, [r3, #10]
 8006318:	461a      	mov	r2, r3
 800631a:	f7fc ff4f 	bl	80031bc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006324:	799b      	ldrb	r3, [r3, #6]
 8006326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006340:	895b      	ldrh	r3, [r3, #10]
 8006342:	461a      	mov	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	fb02 f303 	mul.w	r3, r2, r3
 800634a:	623b      	str	r3, [r7, #32]
				continue;
 800634c:	e06e      	b.n	800642c <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d01f      	beq.n	800639c <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	d215      	bcs.n	800639c <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800637c:	7858      	ldrb	r0, [r3, #1]
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	2301      	movs	r3, #1
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	f7fc febc 	bl	8003100 <disk_read>
 8006388:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006394:	2201      	movs	r2, #1
 8006396:	71da      	strb	r2, [r3, #7]
 8006398:	2301      	movs	r3, #1
 800639a:	e083      	b.n	80064a4 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a2:	461a      	mov	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b4:	895b      	ldrh	r3, [r3, #10]
 80063b6:	4618      	mov	r0, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063cc:	8952      	ldrh	r2, [r2, #10]
 80063ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80063d2:	fb01 f202 	mul.w	r2, r1, r2
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	1ac3      	subs	r3, r0, r3
 80063da:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d901      	bls.n	80063e8 <f_write+0x3ae>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063fc:	8952      	ldrh	r2, [r2, #10]
 80063fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006402:	fb01 f202 	mul.w	r2, r1, r2
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	69b9      	ldr	r1, [r7, #24]
 8006410:	4618      	mov	r0, r3
 8006412:	f7fc fed3 	bl	80031bc <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641c:	799b      	ldrb	r3, [r3, #6]
 800641e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	4413      	add	r3, r2
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	4413      	add	r3, r2
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006446:	6093      	str	r3, [r2, #8]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	441a      	add	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f47f ae26 	bne.w	80060b0 <f_write+0x76>
 8006464:	e000      	b.n	8006468 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006466:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	429a      	cmp	r2, r3
 800647a:	d907      	bls.n	800648c <f_write+0x452>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800648a:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006492:	799b      	ldrb	r3, [r3, #6]
 8006494:	f043 0320 	orr.w	r3, r3, #32
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3728      	adds	r7, #40	; 0x28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fa09 	bl	80058cc <validate>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 80bc 	bne.w	800663e <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064cc:	799b      	ldrb	r3, [r3, #6]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80b3 	beq.w	800663e <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064de:	799b      	ldrb	r3, [r3, #6]
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f4:	7858      	ldrb	r0, [r3, #1]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	2301      	movs	r3, #1
 8006502:	f7fc fe1d 	bl	8003140 <disk_write>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800650c:	2301      	movs	r3, #1
 800650e:	e097      	b.n	8006640 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006516:	799b      	ldrb	r3, [r3, #6]
 8006518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651c:	b2da      	uxtb	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006524:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fd f8c7 	bl	80036cc <move_window>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d17a      	bne.n	800663e <f_sync+0x192>
				dir = fp->dir_ptr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	330b      	adds	r3, #11
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	330b      	adds	r3, #11
 800655c:	f042 0220 	orr.w	r2, r2, #32
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	331c      	adds	r3, #28
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	b29b      	uxth	r3, r3
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	b29a      	uxth	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	331d      	adds	r3, #29
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	0c1a      	lsrs	r2, r3, #16
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	331e      	adds	r3, #30
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	701a      	strb	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	0e1a      	lsrs	r2, r3, #24
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	331f      	adds	r3, #31
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6938      	ldr	r0, [r7, #16]
 80065ba:	f7fd ffc8 	bl	800454e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80065be:	f7fc fcfd 	bl	8002fbc <get_fattime>
 80065c2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	3316      	adds	r3, #22
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	0a1b      	lsrs	r3, r3, #8
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3317      	adds	r3, #23
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	0c1a      	lsrs	r2, r3, #16
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3318      	adds	r3, #24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	0e1a      	lsrs	r2, r3, #24
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3319      	adds	r3, #25
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3312      	adds	r3, #18
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3313      	adds	r3, #19
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	799b      	ldrb	r3, [r3, #6]
 800660e:	f023 0320 	bic.w	r3, r3, #32
 8006612:	b2da      	uxtb	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800661a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006628:	2201      	movs	r2, #1
 800662a:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd f87b 	bl	8003730 <sync_fs>
 800663a:	4603      	mov	r3, r0
 800663c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800663e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ff2b 	bl	80064ac <f_sync>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d119      	bne.n	8006694 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff f933 	bl	80058cc <validate>
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d111      	bne.n	8006694 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	4618      	mov	r0, r3
 800667a:	f7fc ff67 	bl	800354c <dec_lock>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	2b0a      	cmp	r3, #10
 80066ae:	d103      	bne.n	80066b8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80066b0:	210d      	movs	r1, #13
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fff3 	bl	800669e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db25      	blt.n	8006710 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	60fa      	str	r2, [r7, #12]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b3c      	cmp	r3, #60	; 0x3c
 80066d6:	dd12      	ble.n	80066fe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f103 010c 	add.w	r1, r3, #12
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	f7ff fca7 	bl	800603a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d101      	bne.n	80066f8 <putc_bfd+0x5a>
 80066f4:	2300      	movs	r3, #0
 80066f6:	e001      	b.n	80066fc <putc_bfd+0x5e>
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	609a      	str	r2, [r3, #8]
 800670e:	e000      	b.n	8006712 <putc_bfd+0x74>
	if (i < 0) return;
 8006710:	bf00      	nop
}
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b097      	sub	sp, #92	; 0x5c
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800672e:	e009      	b.n	8006744 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	f107 030c 	add.w	r3, r7, #12
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff ffad 	bl	800669e <putc_bfd>
	while (*str)			/* Put the string */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	db15      	blt.n	800677e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	461c      	mov	r4, r3
 8006758:	f107 0208 	add.w	r2, r7, #8
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	f103 010c 	add.w	r1, r3, #12
 8006764:	4613      	mov	r3, r2
 8006766:	4622      	mov	r2, r4
 8006768:	f7ff fc67 	bl	800603a <f_write>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <f_puts+0x66>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	e001      	b.n	8006782 <f_puts+0x6a>
	return EOF;
 800677e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006782:	4618      	mov	r0, r3
 8006784:	375c      	adds	r7, #92	; 0x5c
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}
	...

0800678c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80067a2:	4b1e      	ldr	r3, [pc, #120]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067a4:	7a5b      	ldrb	r3, [r3, #9]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d831      	bhi.n	8006810 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067ae:	7a5b      	ldrb	r3, [r3, #9]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	4b19      	ldr	r3, [pc, #100]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067b6:	2100      	movs	r1, #0
 80067b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067bc:	7a5b      	ldrb	r3, [r3, #9]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4a16      	ldr	r2, [pc, #88]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80067ca:	4b14      	ldr	r3, [pc, #80]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067cc:	7a5b      	ldrb	r3, [r3, #9]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067d4:	4413      	add	r3, r2
 80067d6:	79fa      	ldrb	r2, [r7, #7]
 80067d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067dc:	7a5b      	ldrb	r3, [r3, #9]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	b2d1      	uxtb	r1, r2
 80067e4:	4a0d      	ldr	r2, [pc, #52]	; (800681c <FATFS_LinkDriverEx+0x90>)
 80067e6:	7251      	strb	r1, [r2, #9]
 80067e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80067ea:	7dbb      	ldrb	r3, [r7, #22]
 80067ec:	3330      	adds	r3, #48	; 0x30
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3301      	adds	r3, #1
 80067f8:	223a      	movs	r2, #58	; 0x3a
 80067fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3302      	adds	r3, #2
 8006800:	222f      	movs	r2, #47	; 0x2f
 8006802:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	3303      	adds	r3, #3
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	20002660 	.word	0x20002660

08006820 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800682a:	2200      	movs	r2, #0
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ffac 	bl	800678c <FATFS_LinkDriverEx>
 8006834:	4603      	mov	r3, r0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	2b7f      	cmp	r3, #127	; 0x7f
 8006850:	d802      	bhi.n	8006858 <ff_convert+0x18>
		c = chr;
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	81fb      	strh	r3, [r7, #14]
 8006856:	e025      	b.n	80068a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	2bff      	cmp	r3, #255	; 0xff
 8006862:	d805      	bhi.n	8006870 <ff_convert+0x30>
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	3b80      	subs	r3, #128	; 0x80
 8006868:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <ff_convert+0x70>)
 800686a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686e:	e000      	b.n	8006872 <ff_convert+0x32>
 8006870:	2300      	movs	r3, #0
 8006872:	81fb      	strh	r3, [r7, #14]
 8006874:	e016      	b.n	80068a4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8006876:	2300      	movs	r3, #0
 8006878:	81fb      	strh	r3, [r7, #14]
 800687a:	e009      	b.n	8006890 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800687c:	89fb      	ldrh	r3, [r7, #14]
 800687e:	4a0c      	ldr	r2, [pc, #48]	; (80068b0 <ff_convert+0x70>)
 8006880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006884:	88fa      	ldrh	r2, [r7, #6]
 8006886:	429a      	cmp	r2, r3
 8006888:	d006      	beq.n	8006898 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800688a:	89fb      	ldrh	r3, [r7, #14]
 800688c:	3301      	adds	r3, #1
 800688e:	81fb      	strh	r3, [r7, #14]
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	2b7f      	cmp	r3, #127	; 0x7f
 8006894:	d9f2      	bls.n	800687c <ff_convert+0x3c>
 8006896:	e000      	b.n	800689a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006898:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800689a:	89fb      	ldrh	r3, [r7, #14]
 800689c:	3380      	adds	r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80068a4:	89fb      	ldrh	r3, [r7, #14]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr
 80068b0:	08007ee0 	.word	0x08007ee0

080068b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e002      	b.n	80068ca <ff_wtoupper+0x16>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	4a0f      	ldr	r2, [pc, #60]	; (8006908 <ff_wtoupper+0x54>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <ff_wtoupper+0x30>
 80068d6:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <ff_wtoupper+0x54>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d1ef      	bne.n	80068c4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80068e4:	4a08      	ldr	r2, [pc, #32]	; (8006908 <ff_wtoupper+0x54>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <ff_wtoupper+0x46>
 80068f0:	4a06      	ldr	r2, [pc, #24]	; (800690c <ff_wtoupper+0x58>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068f8:	e000      	b.n	80068fc <ff_wtoupper+0x48>
 80068fa:	88fb      	ldrh	r3, [r7, #6]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	bc80      	pop	{r7}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	08007fe0 	.word	0x08007fe0
 800690c:	080081c0 	.word	0x080081c0

08006910 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f811 	bl	8006940 <malloc>
 800691e:	4603      	mov	r3, r0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f80d 	bl	8006950 <free>
}
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <malloc>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <malloc+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f000 b82b 	b.w	80069a0 <_malloc_r>
 800694a:	bf00      	nop
 800694c:	2000007c 	.word	0x2000007c

08006950 <free>:
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <free+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 baeb 	b.w	8006f30 <_free_r>
 800695a:	bf00      	nop
 800695c:	2000007c 	.word	0x2000007c

08006960 <sbrk_aligned>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	4e0e      	ldr	r6, [pc, #56]	; (800699c <sbrk_aligned+0x3c>)
 8006964:	460c      	mov	r4, r1
 8006966:	6831      	ldr	r1, [r6, #0]
 8006968:	4605      	mov	r5, r0
 800696a:	b911      	cbnz	r1, 8006972 <sbrk_aligned+0x12>
 800696c:	f000 fa72 	bl	8006e54 <_sbrk_r>
 8006970:	6030      	str	r0, [r6, #0]
 8006972:	4621      	mov	r1, r4
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fa6d 	bl	8006e54 <_sbrk_r>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	d00a      	beq.n	8006994 <sbrk_aligned+0x34>
 800697e:	1cc4      	adds	r4, r0, #3
 8006980:	f024 0403 	bic.w	r4, r4, #3
 8006984:	42a0      	cmp	r0, r4
 8006986:	d007      	beq.n	8006998 <sbrk_aligned+0x38>
 8006988:	1a21      	subs	r1, r4, r0
 800698a:	4628      	mov	r0, r5
 800698c:	f000 fa62 	bl	8006e54 <_sbrk_r>
 8006990:	3001      	adds	r0, #1
 8006992:	d101      	bne.n	8006998 <sbrk_aligned+0x38>
 8006994:	f04f 34ff 	mov.w	r4, #4294967295
 8006998:	4620      	mov	r0, r4
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	20002670 	.word	0x20002670

080069a0 <_malloc_r>:
 80069a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	1ccd      	adds	r5, r1, #3
 80069a6:	f025 0503 	bic.w	r5, r5, #3
 80069aa:	3508      	adds	r5, #8
 80069ac:	2d0c      	cmp	r5, #12
 80069ae:	bf38      	it	cc
 80069b0:	250c      	movcc	r5, #12
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	4607      	mov	r7, r0
 80069b6:	db01      	blt.n	80069bc <_malloc_r+0x1c>
 80069b8:	42a9      	cmp	r1, r5
 80069ba:	d905      	bls.n	80069c8 <_malloc_r+0x28>
 80069bc:	230c      	movs	r3, #12
 80069be:	2600      	movs	r6, #0
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	4630      	mov	r0, r6
 80069c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a9c <_malloc_r+0xfc>
 80069cc:	f000 f868 	bl	8006aa0 <__malloc_lock>
 80069d0:	f8d8 3000 	ldr.w	r3, [r8]
 80069d4:	461c      	mov	r4, r3
 80069d6:	bb5c      	cbnz	r4, 8006a30 <_malloc_r+0x90>
 80069d8:	4629      	mov	r1, r5
 80069da:	4638      	mov	r0, r7
 80069dc:	f7ff ffc0 	bl	8006960 <sbrk_aligned>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	4604      	mov	r4, r0
 80069e4:	d155      	bne.n	8006a92 <_malloc_r+0xf2>
 80069e6:	f8d8 4000 	ldr.w	r4, [r8]
 80069ea:	4626      	mov	r6, r4
 80069ec:	2e00      	cmp	r6, #0
 80069ee:	d145      	bne.n	8006a7c <_malloc_r+0xdc>
 80069f0:	2c00      	cmp	r4, #0
 80069f2:	d048      	beq.n	8006a86 <_malloc_r+0xe6>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	4631      	mov	r1, r6
 80069f8:	4638      	mov	r0, r7
 80069fa:	eb04 0903 	add.w	r9, r4, r3
 80069fe:	f000 fa29 	bl	8006e54 <_sbrk_r>
 8006a02:	4581      	cmp	r9, r0
 8006a04:	d13f      	bne.n	8006a86 <_malloc_r+0xe6>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	4638      	mov	r0, r7
 8006a0a:	1a6d      	subs	r5, r5, r1
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f7ff ffa7 	bl	8006960 <sbrk_aligned>
 8006a12:	3001      	adds	r0, #1
 8006a14:	d037      	beq.n	8006a86 <_malloc_r+0xe6>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	442b      	add	r3, r5
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d038      	beq.n	8006a96 <_malloc_r+0xf6>
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	42a2      	cmp	r2, r4
 8006a28:	d12b      	bne.n	8006a82 <_malloc_r+0xe2>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	e00f      	b.n	8006a50 <_malloc_r+0xb0>
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	1b52      	subs	r2, r2, r5
 8006a34:	d41f      	bmi.n	8006a76 <_malloc_r+0xd6>
 8006a36:	2a0b      	cmp	r2, #11
 8006a38:	d917      	bls.n	8006a6a <_malloc_r+0xca>
 8006a3a:	1961      	adds	r1, r4, r5
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	6025      	str	r5, [r4, #0]
 8006a40:	bf18      	it	ne
 8006a42:	6059      	strne	r1, [r3, #4]
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	bf08      	it	eq
 8006a48:	f8c8 1000 	streq.w	r1, [r8]
 8006a4c:	5162      	str	r2, [r4, r5]
 8006a4e:	604b      	str	r3, [r1, #4]
 8006a50:	4638      	mov	r0, r7
 8006a52:	f104 060b 	add.w	r6, r4, #11
 8006a56:	f000 f829 	bl	8006aac <__malloc_unlock>
 8006a5a:	f026 0607 	bic.w	r6, r6, #7
 8006a5e:	1d23      	adds	r3, r4, #4
 8006a60:	1af2      	subs	r2, r6, r3
 8006a62:	d0ae      	beq.n	80069c2 <_malloc_r+0x22>
 8006a64:	1b9b      	subs	r3, r3, r6
 8006a66:	50a3      	str	r3, [r4, r2]
 8006a68:	e7ab      	b.n	80069c2 <_malloc_r+0x22>
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	6862      	ldr	r2, [r4, #4]
 8006a6e:	d1dd      	bne.n	8006a2c <_malloc_r+0x8c>
 8006a70:	f8c8 2000 	str.w	r2, [r8]
 8006a74:	e7ec      	b.n	8006a50 <_malloc_r+0xb0>
 8006a76:	4623      	mov	r3, r4
 8006a78:	6864      	ldr	r4, [r4, #4]
 8006a7a:	e7ac      	b.n	80069d6 <_malloc_r+0x36>
 8006a7c:	4634      	mov	r4, r6
 8006a7e:	6876      	ldr	r6, [r6, #4]
 8006a80:	e7b4      	b.n	80069ec <_malloc_r+0x4c>
 8006a82:	4613      	mov	r3, r2
 8006a84:	e7cc      	b.n	8006a20 <_malloc_r+0x80>
 8006a86:	230c      	movs	r3, #12
 8006a88:	4638      	mov	r0, r7
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	f000 f80e 	bl	8006aac <__malloc_unlock>
 8006a90:	e797      	b.n	80069c2 <_malloc_r+0x22>
 8006a92:	6025      	str	r5, [r4, #0]
 8006a94:	e7dc      	b.n	8006a50 <_malloc_r+0xb0>
 8006a96:	605b      	str	r3, [r3, #4]
 8006a98:	deff      	udf	#255	; 0xff
 8006a9a:	bf00      	nop
 8006a9c:	2000266c 	.word	0x2000266c

08006aa0 <__malloc_lock>:
 8006aa0:	4801      	ldr	r0, [pc, #4]	; (8006aa8 <__malloc_lock+0x8>)
 8006aa2:	f000 ba24 	b.w	8006eee <__retarget_lock_acquire_recursive>
 8006aa6:	bf00      	nop
 8006aa8:	200027b4 	.word	0x200027b4

08006aac <__malloc_unlock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__malloc_unlock+0x8>)
 8006aae:	f000 ba1f 	b.w	8006ef0 <__retarget_lock_release_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	200027b4 	.word	0x200027b4

08006ab8 <srand>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <srand+0x44>)
 8006abc:	4604      	mov	r4, r0
 8006abe:	681d      	ldr	r5, [r3, #0]
 8006ac0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ac2:	b9b3      	cbnz	r3, 8006af2 <srand+0x3a>
 8006ac4:	2018      	movs	r0, #24
 8006ac6:	f7ff ff3b 	bl	8006940 <malloc>
 8006aca:	4602      	mov	r2, r0
 8006acc:	6328      	str	r0, [r5, #48]	; 0x30
 8006ace:	b920      	cbnz	r0, 8006ada <srand+0x22>
 8006ad0:	2146      	movs	r1, #70	; 0x46
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <srand+0x48>)
 8006ad4:	480b      	ldr	r0, [pc, #44]	; (8006b04 <srand+0x4c>)
 8006ad6:	f000 fa0d 	bl	8006ef4 <__assert_func>
 8006ada:	490b      	ldr	r1, [pc, #44]	; (8006b08 <srand+0x50>)
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <srand+0x54>)
 8006ade:	e9c0 1300 	strd	r1, r3, [r0]
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <srand+0x58>)
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6083      	str	r3, [r0, #8]
 8006ae8:	230b      	movs	r3, #11
 8006aea:	8183      	strh	r3, [r0, #12]
 8006aec:	2001      	movs	r0, #1
 8006aee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006af2:	2200      	movs	r2, #0
 8006af4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006af6:	611c      	str	r4, [r3, #16]
 8006af8:	615a      	str	r2, [r3, #20]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	2000007c 	.word	0x2000007c
 8006b00:	080083a0 	.word	0x080083a0
 8006b04:	080083b7 	.word	0x080083b7
 8006b08:	abcd330e 	.word	0xabcd330e
 8006b0c:	e66d1234 	.word	0xe66d1234
 8006b10:	0005deec 	.word	0x0005deec

08006b14 <rand>:
 8006b14:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <rand+0x5c>)
 8006b16:	b510      	push	{r4, lr}
 8006b18:	681c      	ldr	r4, [r3, #0]
 8006b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b1c:	b9b3      	cbnz	r3, 8006b4c <rand+0x38>
 8006b1e:	2018      	movs	r0, #24
 8006b20:	f7ff ff0e 	bl	8006940 <malloc>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6320      	str	r0, [r4, #48]	; 0x30
 8006b28:	b920      	cbnz	r0, 8006b34 <rand+0x20>
 8006b2a:	2152      	movs	r1, #82	; 0x52
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <rand+0x60>)
 8006b2e:	4812      	ldr	r0, [pc, #72]	; (8006b78 <rand+0x64>)
 8006b30:	f000 f9e0 	bl	8006ef4 <__assert_func>
 8006b34:	4911      	ldr	r1, [pc, #68]	; (8006b7c <rand+0x68>)
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <rand+0x6c>)
 8006b38:	e9c0 1300 	strd	r1, r3, [r0]
 8006b3c:	4b11      	ldr	r3, [pc, #68]	; (8006b84 <rand+0x70>)
 8006b3e:	2100      	movs	r1, #0
 8006b40:	6083      	str	r3, [r0, #8]
 8006b42:	230b      	movs	r3, #11
 8006b44:	8183      	strh	r3, [r0, #12]
 8006b46:	2001      	movs	r0, #1
 8006b48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006b4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006b4e:	480e      	ldr	r0, [pc, #56]	; (8006b88 <rand+0x74>)
 8006b50:	690b      	ldr	r3, [r1, #16]
 8006b52:	694c      	ldr	r4, [r1, #20]
 8006b54:	4358      	muls	r0, r3
 8006b56:	4a0d      	ldr	r2, [pc, #52]	; (8006b8c <rand+0x78>)
 8006b58:	fb02 0004 	mla	r0, r2, r4, r0
 8006b5c:	fba3 3202 	umull	r3, r2, r3, r2
 8006b60:	3301      	adds	r3, #1
 8006b62:	eb40 0002 	adc.w	r0, r0, r2
 8006b66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006b6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006b6e:	bd10      	pop	{r4, pc}
 8006b70:	2000007c 	.word	0x2000007c
 8006b74:	080083a0 	.word	0x080083a0
 8006b78:	080083b7 	.word	0x080083b7
 8006b7c:	abcd330e 	.word	0xabcd330e
 8006b80:	e66d1234 	.word	0xe66d1234
 8006b84:	0005deec 	.word	0x0005deec
 8006b88:	5851f42d 	.word	0x5851f42d
 8006b8c:	4c957f2d 	.word	0x4c957f2d

08006b90 <std>:
 8006b90:	2300      	movs	r3, #0
 8006b92:	b510      	push	{r4, lr}
 8006b94:	4604      	mov	r4, r0
 8006b96:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b9e:	6083      	str	r3, [r0, #8]
 8006ba0:	8181      	strh	r1, [r0, #12]
 8006ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ba4:	81c2      	strh	r2, [r0, #14]
 8006ba6:	6183      	str	r3, [r0, #24]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	2208      	movs	r2, #8
 8006bac:	305c      	adds	r0, #92	; 0x5c
 8006bae:	f000 f914 	bl	8006dda <memset>
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <std+0x58>)
 8006bb4:	6224      	str	r4, [r4, #32]
 8006bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <std+0x5c>)
 8006bba:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <std+0x60>)
 8006bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <std+0x64>)
 8006bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <std+0x68>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d006      	beq.n	8006bd8 <std+0x48>
 8006bca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006bce:	4294      	cmp	r4, r2
 8006bd0:	d002      	beq.n	8006bd8 <std+0x48>
 8006bd2:	33d0      	adds	r3, #208	; 0xd0
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d105      	bne.n	8006be4 <std+0x54>
 8006bd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	f000 b984 	b.w	8006eec <__retarget_lock_init_recursive>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	08006d55 	.word	0x08006d55
 8006bec:	08006d77 	.word	0x08006d77
 8006bf0:	08006daf 	.word	0x08006daf
 8006bf4:	08006dd3 	.word	0x08006dd3
 8006bf8:	20002674 	.word	0x20002674

08006bfc <stdio_exit_handler>:
 8006bfc:	4a02      	ldr	r2, [pc, #8]	; (8006c08 <stdio_exit_handler+0xc>)
 8006bfe:	4903      	ldr	r1, [pc, #12]	; (8006c0c <stdio_exit_handler+0x10>)
 8006c00:	4803      	ldr	r0, [pc, #12]	; (8006c10 <stdio_exit_handler+0x14>)
 8006c02:	f000 b869 	b.w	8006cd8 <_fwalk_sglue>
 8006c06:	bf00      	nop
 8006c08:	20000024 	.word	0x20000024
 8006c0c:	0800769d 	.word	0x0800769d
 8006c10:	20000030 	.word	0x20000030

08006c14 <cleanup_stdio>:
 8006c14:	6841      	ldr	r1, [r0, #4]
 8006c16:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <cleanup_stdio+0x34>)
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	d001      	beq.n	8006c24 <cleanup_stdio+0x10>
 8006c20:	f000 fd3c 	bl	800769c <_fflush_r>
 8006c24:	68a1      	ldr	r1, [r4, #8]
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <cleanup_stdio+0x38>)
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d002      	beq.n	8006c32 <cleanup_stdio+0x1e>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fd35 	bl	800769c <_fflush_r>
 8006c32:	68e1      	ldr	r1, [r4, #12]
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <cleanup_stdio+0x3c>)
 8006c36:	4299      	cmp	r1, r3
 8006c38:	d004      	beq.n	8006c44 <cleanup_stdio+0x30>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c40:	f000 bd2c 	b.w	800769c <_fflush_r>
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	20002674 	.word	0x20002674
 8006c4c:	200026dc 	.word	0x200026dc
 8006c50:	20002744 	.word	0x20002744

08006c54 <global_stdio_init.part.0>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <global_stdio_init.part.0+0x30>)
 8006c58:	4c0b      	ldr	r4, [pc, #44]	; (8006c88 <global_stdio_init.part.0+0x34>)
 8006c5a:	4a0c      	ldr	r2, [pc, #48]	; (8006c8c <global_stdio_init.part.0+0x38>)
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	2104      	movs	r1, #4
 8006c62:	2200      	movs	r2, #0
 8006c64:	f7ff ff94 	bl	8006b90 <std>
 8006c68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2109      	movs	r1, #9
 8006c70:	f7ff ff8e 	bl	8006b90 <std>
 8006c74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c78:	2202      	movs	r2, #2
 8006c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7e:	2112      	movs	r1, #18
 8006c80:	f7ff bf86 	b.w	8006b90 <std>
 8006c84:	200027ac 	.word	0x200027ac
 8006c88:	20002674 	.word	0x20002674
 8006c8c:	08006bfd 	.word	0x08006bfd

08006c90 <__sfp_lock_acquire>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sfp_lock_acquire+0x8>)
 8006c92:	f000 b92c 	b.w	8006eee <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	200027b5 	.word	0x200027b5

08006c9c <__sfp_lock_release>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sfp_lock_release+0x8>)
 8006c9e:	f000 b927 	b.w	8006ef0 <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	200027b5 	.word	0x200027b5

08006ca8 <__sinit>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	f7ff fff0 	bl	8006c90 <__sfp_lock_acquire>
 8006cb0:	6a23      	ldr	r3, [r4, #32]
 8006cb2:	b11b      	cbz	r3, 8006cbc <__sinit+0x14>
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f7ff bff0 	b.w	8006c9c <__sfp_lock_release>
 8006cbc:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <__sinit+0x28>)
 8006cbe:	6223      	str	r3, [r4, #32]
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <__sinit+0x2c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f5      	bne.n	8006cb4 <__sinit+0xc>
 8006cc8:	f7ff ffc4 	bl	8006c54 <global_stdio_init.part.0>
 8006ccc:	e7f2      	b.n	8006cb4 <__sinit+0xc>
 8006cce:	bf00      	nop
 8006cd0:	08006c15 	.word	0x08006c15
 8006cd4:	200027ac 	.word	0x200027ac

08006cd8 <_fwalk_sglue>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4607      	mov	r7, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cec:	d505      	bpl.n	8006cfa <_fwalk_sglue+0x22>
 8006cee:	6824      	ldr	r4, [r4, #0]
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d1f7      	bne.n	8006ce4 <_fwalk_sglue+0xc>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d907      	bls.n	8006d10 <_fwalk_sglue+0x38>
 8006d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d04:	3301      	adds	r3, #1
 8006d06:	d003      	beq.n	8006d10 <_fwalk_sglue+0x38>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	4306      	orrs	r6, r0
 8006d10:	3568      	adds	r5, #104	; 0x68
 8006d12:	e7e9      	b.n	8006ce8 <_fwalk_sglue+0x10>

08006d14 <siprintf>:
 8006d14:	b40e      	push	{r1, r2, r3}
 8006d16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d1a:	b500      	push	{lr}
 8006d1c:	b09c      	sub	sp, #112	; 0x70
 8006d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d20:	9002      	str	r0, [sp, #8]
 8006d22:	9006      	str	r0, [sp, #24]
 8006d24:	9107      	str	r1, [sp, #28]
 8006d26:	9104      	str	r1, [sp, #16]
 8006d28:	4808      	ldr	r0, [pc, #32]	; (8006d4c <siprintf+0x38>)
 8006d2a:	4909      	ldr	r1, [pc, #36]	; (8006d50 <siprintf+0x3c>)
 8006d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d30:	9105      	str	r1, [sp, #20]
 8006d32:	6800      	ldr	r0, [r0, #0]
 8006d34:	a902      	add	r1, sp, #8
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	f000 f99c 	bl	8007074 <_svfiprintf_r>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	9b02      	ldr	r3, [sp, #8]
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	b01c      	add	sp, #112	; 0x70
 8006d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d48:	b003      	add	sp, #12
 8006d4a:	4770      	bx	lr
 8006d4c:	2000007c 	.word	0x2000007c
 8006d50:	ffff0208 	.word	0xffff0208

08006d54 <__sread>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	460c      	mov	r4, r1
 8006d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5c:	f000 f868 	bl	8006e30 <_read_r>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	bfab      	itete	ge
 8006d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d66:	89a3      	ldrhlt	r3, [r4, #12]
 8006d68:	181b      	addge	r3, r3, r0
 8006d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d6e:	bfac      	ite	ge
 8006d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d72:	81a3      	strhlt	r3, [r4, #12]
 8006d74:	bd10      	pop	{r4, pc}

08006d76 <__swrite>:
 8006d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	461f      	mov	r7, r3
 8006d7c:	898b      	ldrh	r3, [r1, #12]
 8006d7e:	4605      	mov	r5, r0
 8006d80:	05db      	lsls	r3, r3, #23
 8006d82:	460c      	mov	r4, r1
 8006d84:	4616      	mov	r6, r2
 8006d86:	d505      	bpl.n	8006d94 <__swrite+0x1e>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d90:	f000 f83c 	bl	8006e0c <_lseek_r>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	4632      	mov	r2, r6
 8006d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	4628      	mov	r0, r5
 8006da0:	463b      	mov	r3, r7
 8006da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006daa:	f000 b863 	b.w	8006e74 <_write_r>

08006dae <__sseek>:
 8006dae:	b510      	push	{r4, lr}
 8006db0:	460c      	mov	r4, r1
 8006db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db6:	f000 f829 	bl	8006e0c <_lseek_r>
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	bf15      	itete	ne
 8006dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dca:	81a3      	strheq	r3, [r4, #12]
 8006dcc:	bf18      	it	ne
 8006dce:	81a3      	strhne	r3, [r4, #12]
 8006dd0:	bd10      	pop	{r4, pc}

08006dd2 <__sclose>:
 8006dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd6:	f000 b809 	b.w	8006dec <_close_r>

08006dda <memset>:
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4402      	add	r2, r0
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d100      	bne.n	8006de4 <memset+0xa>
 8006de2:	4770      	bx	lr
 8006de4:	f803 1b01 	strb.w	r1, [r3], #1
 8006de8:	e7f9      	b.n	8006dde <memset+0x4>
	...

08006dec <_close_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	2300      	movs	r3, #0
 8006df0:	4d05      	ldr	r5, [pc, #20]	; (8006e08 <_close_r+0x1c>)
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fa f9f7 	bl	80011ea <_close>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d102      	bne.n	8006e06 <_close_r+0x1a>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	b103      	cbz	r3, 8006e06 <_close_r+0x1a>
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	200027b0 	.word	0x200027b0

08006e0c <_lseek_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	2200      	movs	r2, #0
 8006e16:	4d05      	ldr	r5, [pc, #20]	; (8006e2c <_lseek_r+0x20>)
 8006e18:	602a      	str	r2, [r5, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7fa fa09 	bl	8001232 <_lseek>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_lseek_r+0x1e>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_lseek_r+0x1e>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	200027b0 	.word	0x200027b0

08006e30 <_read_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4d05      	ldr	r5, [pc, #20]	; (8006e50 <_read_r+0x20>)
 8006e3c:	602a      	str	r2, [r5, #0]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f7fa f99a 	bl	8001178 <_read>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_read_r+0x1e>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_read_r+0x1e>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	200027b0 	.word	0x200027b0

08006e54 <_sbrk_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d05      	ldr	r5, [pc, #20]	; (8006e70 <_sbrk_r+0x1c>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fa f9f4 	bl	800124c <_sbrk>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_sbrk_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_sbrk_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	200027b0 	.word	0x200027b0

08006e74 <_write_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4d05      	ldr	r5, [pc, #20]	; (8006e94 <_write_r+0x20>)
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fa f995 	bl	80011b2 <_write>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_write_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_write_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	200027b0 	.word	0x200027b0

08006e98 <__errno>:
 8006e98:	4b01      	ldr	r3, [pc, #4]	; (8006ea0 <__errno+0x8>)
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2000007c 	.word	0x2000007c

08006ea4 <__libc_init_array>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	4d0c      	ldr	r5, [pc, #48]	; (8006edc <__libc_init_array+0x38>)
 8006eaa:	4c0d      	ldr	r4, [pc, #52]	; (8006ee0 <__libc_init_array+0x3c>)
 8006eac:	1b64      	subs	r4, r4, r5
 8006eae:	10a4      	asrs	r4, r4, #2
 8006eb0:	42a6      	cmp	r6, r4
 8006eb2:	d109      	bne.n	8006ec8 <__libc_init_array+0x24>
 8006eb4:	f000 ff40 	bl	8007d38 <_init>
 8006eb8:	2600      	movs	r6, #0
 8006eba:	4d0a      	ldr	r5, [pc, #40]	; (8006ee4 <__libc_init_array+0x40>)
 8006ebc:	4c0a      	ldr	r4, [pc, #40]	; (8006ee8 <__libc_init_array+0x44>)
 8006ebe:	1b64      	subs	r4, r4, r5
 8006ec0:	10a4      	asrs	r4, r4, #2
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	d105      	bne.n	8006ed2 <__libc_init_array+0x2e>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ecc:	4798      	blx	r3
 8006ece:	3601      	adds	r6, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__libc_init_array+0xc>
 8006ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed6:	4798      	blx	r3
 8006ed8:	3601      	adds	r6, #1
 8006eda:	e7f2      	b.n	8006ec2 <__libc_init_array+0x1e>
 8006edc:	08008480 	.word	0x08008480
 8006ee0:	08008480 	.word	0x08008480
 8006ee4:	08008480 	.word	0x08008480
 8006ee8:	08008484 	.word	0x08008484

08006eec <__retarget_lock_init_recursive>:
 8006eec:	4770      	bx	lr

08006eee <__retarget_lock_acquire_recursive>:
 8006eee:	4770      	bx	lr

08006ef0 <__retarget_lock_release_recursive>:
 8006ef0:	4770      	bx	lr
	...

08006ef4 <__assert_func>:
 8006ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ef6:	4614      	mov	r4, r2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <__assert_func+0x2c>)
 8006efc:	4605      	mov	r5, r0
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68d8      	ldr	r0, [r3, #12]
 8006f02:	b14c      	cbz	r4, 8006f18 <__assert_func+0x24>
 8006f04:	4b07      	ldr	r3, [pc, #28]	; (8006f24 <__assert_func+0x30>)
 8006f06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f0a:	9100      	str	r1, [sp, #0]
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	4906      	ldr	r1, [pc, #24]	; (8006f28 <__assert_func+0x34>)
 8006f10:	f000 fbec 	bl	80076ec <fiprintf>
 8006f14:	f000 fc32 	bl	800777c <abort>
 8006f18:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <__assert_func+0x38>)
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	e7f3      	b.n	8006f06 <__assert_func+0x12>
 8006f1e:	bf00      	nop
 8006f20:	2000007c 	.word	0x2000007c
 8006f24:	0800840f 	.word	0x0800840f
 8006f28:	0800841c 	.word	0x0800841c
 8006f2c:	0800844a 	.word	0x0800844a

08006f30 <_free_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4605      	mov	r5, r0
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d040      	beq.n	8006fba <_free_r+0x8a>
 8006f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3c:	1f0c      	subs	r4, r1, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bfb8      	it	lt
 8006f42:	18e4      	addlt	r4, r4, r3
 8006f44:	f7ff fdac 	bl	8006aa0 <__malloc_lock>
 8006f48:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <_free_r+0x8c>)
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	b933      	cbnz	r3, 8006f5c <_free_r+0x2c>
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	6014      	str	r4, [r2, #0]
 8006f52:	4628      	mov	r0, r5
 8006f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f58:	f7ff bda8 	b.w	8006aac <__malloc_unlock>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d908      	bls.n	8006f72 <_free_r+0x42>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf01      	itttt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	1809      	addeq	r1, r1, r0
 8006f6e:	6021      	streq	r1, [r4, #0]
 8006f70:	e7ed      	b.n	8006f4e <_free_r+0x1e>
 8006f72:	461a      	mov	r2, r3
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	b10b      	cbz	r3, 8006f7c <_free_r+0x4c>
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	d9fa      	bls.n	8006f72 <_free_r+0x42>
 8006f7c:	6811      	ldr	r1, [r2, #0]
 8006f7e:	1850      	adds	r0, r2, r1
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d10b      	bne.n	8006f9c <_free_r+0x6c>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	4401      	add	r1, r0
 8006f88:	1850      	adds	r0, r2, r1
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	d1e0      	bne.n	8006f52 <_free_r+0x22>
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4408      	add	r0, r1
 8006f96:	6010      	str	r0, [r2, #0]
 8006f98:	6053      	str	r3, [r2, #4]
 8006f9a:	e7da      	b.n	8006f52 <_free_r+0x22>
 8006f9c:	d902      	bls.n	8006fa4 <_free_r+0x74>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	e7d6      	b.n	8006f52 <_free_r+0x22>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	1821      	adds	r1, r4, r0
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf01      	itttt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	1809      	addeq	r1, r1, r0
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	6063      	str	r3, [r4, #4]
 8006fb6:	6054      	str	r4, [r2, #4]
 8006fb8:	e7cb      	b.n	8006f52 <_free_r+0x22>
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	2000266c 	.word	0x2000266c

08006fc0 <__ssputs_r>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	461f      	mov	r7, r3
 8006fc6:	688e      	ldr	r6, [r1, #8]
 8006fc8:	4682      	mov	sl, r0
 8006fca:	42be      	cmp	r6, r7
 8006fcc:	460c      	mov	r4, r1
 8006fce:	4690      	mov	r8, r2
 8006fd0:	680b      	ldr	r3, [r1, #0]
 8006fd2:	d82c      	bhi.n	800702e <__ssputs_r+0x6e>
 8006fd4:	898a      	ldrh	r2, [r1, #12]
 8006fd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fda:	d026      	beq.n	800702a <__ssputs_r+0x6a>
 8006fdc:	6965      	ldr	r5, [r4, #20]
 8006fde:	6909      	ldr	r1, [r1, #16]
 8006fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fe4:	eba3 0901 	sub.w	r9, r3, r1
 8006fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fec:	1c7b      	adds	r3, r7, #1
 8006fee:	444b      	add	r3, r9
 8006ff0:	106d      	asrs	r5, r5, #1
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	bf38      	it	cc
 8006ff6:	461d      	movcc	r5, r3
 8006ff8:	0553      	lsls	r3, r2, #21
 8006ffa:	d527      	bpl.n	800704c <__ssputs_r+0x8c>
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	f7ff fccf 	bl	80069a0 <_malloc_r>
 8007002:	4606      	mov	r6, r0
 8007004:	b360      	cbz	r0, 8007060 <__ssputs_r+0xa0>
 8007006:	464a      	mov	r2, r9
 8007008:	6921      	ldr	r1, [r4, #16]
 800700a:	f000 fba9 	bl	8007760 <memcpy>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007018:	81a3      	strh	r3, [r4, #12]
 800701a:	6126      	str	r6, [r4, #16]
 800701c:	444e      	add	r6, r9
 800701e:	6026      	str	r6, [r4, #0]
 8007020:	463e      	mov	r6, r7
 8007022:	6165      	str	r5, [r4, #20]
 8007024:	eba5 0509 	sub.w	r5, r5, r9
 8007028:	60a5      	str	r5, [r4, #8]
 800702a:	42be      	cmp	r6, r7
 800702c:	d900      	bls.n	8007030 <__ssputs_r+0x70>
 800702e:	463e      	mov	r6, r7
 8007030:	4632      	mov	r2, r6
 8007032:	4641      	mov	r1, r8
 8007034:	6820      	ldr	r0, [r4, #0]
 8007036:	f000 fb6b 	bl	8007710 <memmove>
 800703a:	2000      	movs	r0, #0
 800703c:	68a3      	ldr	r3, [r4, #8]
 800703e:	1b9b      	subs	r3, r3, r6
 8007040:	60a3      	str	r3, [r4, #8]
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	4433      	add	r3, r6
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800704c:	462a      	mov	r2, r5
 800704e:	f000 fb9c 	bl	800778a <_realloc_r>
 8007052:	4606      	mov	r6, r0
 8007054:	2800      	cmp	r0, #0
 8007056:	d1e0      	bne.n	800701a <__ssputs_r+0x5a>
 8007058:	4650      	mov	r0, sl
 800705a:	6921      	ldr	r1, [r4, #16]
 800705c:	f7ff ff68 	bl	8006f30 <_free_r>
 8007060:	230c      	movs	r3, #12
 8007062:	f8ca 3000 	str.w	r3, [sl]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007070:	81a3      	strh	r3, [r4, #12]
 8007072:	e7e9      	b.n	8007048 <__ssputs_r+0x88>

08007074 <_svfiprintf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4698      	mov	r8, r3
 800707a:	898b      	ldrh	r3, [r1, #12]
 800707c:	4607      	mov	r7, r0
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	460d      	mov	r5, r1
 8007082:	4614      	mov	r4, r2
 8007084:	b09d      	sub	sp, #116	; 0x74
 8007086:	d50e      	bpl.n	80070a6 <_svfiprintf_r+0x32>
 8007088:	690b      	ldr	r3, [r1, #16]
 800708a:	b963      	cbnz	r3, 80070a6 <_svfiprintf_r+0x32>
 800708c:	2140      	movs	r1, #64	; 0x40
 800708e:	f7ff fc87 	bl	80069a0 <_malloc_r>
 8007092:	6028      	str	r0, [r5, #0]
 8007094:	6128      	str	r0, [r5, #16]
 8007096:	b920      	cbnz	r0, 80070a2 <_svfiprintf_r+0x2e>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e0d0      	b.n	8007244 <_svfiprintf_r+0x1d0>
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	616b      	str	r3, [r5, #20]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9309      	str	r3, [sp, #36]	; 0x24
 80070aa:	2320      	movs	r3, #32
 80070ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070b0:	2330      	movs	r3, #48	; 0x30
 80070b2:	f04f 0901 	mov.w	r9, #1
 80070b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800725c <_svfiprintf_r+0x1e8>
 80070be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070c2:	4623      	mov	r3, r4
 80070c4:	469a      	mov	sl, r3
 80070c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ca:	b10a      	cbz	r2, 80070d0 <_svfiprintf_r+0x5c>
 80070cc:	2a25      	cmp	r2, #37	; 0x25
 80070ce:	d1f9      	bne.n	80070c4 <_svfiprintf_r+0x50>
 80070d0:	ebba 0b04 	subs.w	fp, sl, r4
 80070d4:	d00b      	beq.n	80070ee <_svfiprintf_r+0x7a>
 80070d6:	465b      	mov	r3, fp
 80070d8:	4622      	mov	r2, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff ff6f 	bl	8006fc0 <__ssputs_r>
 80070e2:	3001      	adds	r0, #1
 80070e4:	f000 80a9 	beq.w	800723a <_svfiprintf_r+0x1c6>
 80070e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ea:	445a      	add	r2, fp
 80070ec:	9209      	str	r2, [sp, #36]	; 0x24
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80a1 	beq.w	800723a <_svfiprintf_r+0x1c6>
 80070f8:	2300      	movs	r3, #0
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007102:	f10a 0a01 	add.w	sl, sl, #1
 8007106:	9304      	str	r3, [sp, #16]
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800710e:	931a      	str	r3, [sp, #104]	; 0x68
 8007110:	4654      	mov	r4, sl
 8007112:	2205      	movs	r2, #5
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	4850      	ldr	r0, [pc, #320]	; (800725c <_svfiprintf_r+0x1e8>)
 800711a:	f000 fb13 	bl	8007744 <memchr>
 800711e:	9a04      	ldr	r2, [sp, #16]
 8007120:	b9d8      	cbnz	r0, 800715a <_svfiprintf_r+0xe6>
 8007122:	06d0      	lsls	r0, r2, #27
 8007124:	bf44      	itt	mi
 8007126:	2320      	movmi	r3, #32
 8007128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800712c:	0711      	lsls	r1, r2, #28
 800712e:	bf44      	itt	mi
 8007130:	232b      	movmi	r3, #43	; 0x2b
 8007132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007136:	f89a 3000 	ldrb.w	r3, [sl]
 800713a:	2b2a      	cmp	r3, #42	; 0x2a
 800713c:	d015      	beq.n	800716a <_svfiprintf_r+0xf6>
 800713e:	4654      	mov	r4, sl
 8007140:	2000      	movs	r0, #0
 8007142:	f04f 0c0a 	mov.w	ip, #10
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	4621      	mov	r1, r4
 800714a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800714e:	3b30      	subs	r3, #48	; 0x30
 8007150:	2b09      	cmp	r3, #9
 8007152:	d94d      	bls.n	80071f0 <_svfiprintf_r+0x17c>
 8007154:	b1b0      	cbz	r0, 8007184 <_svfiprintf_r+0x110>
 8007156:	9207      	str	r2, [sp, #28]
 8007158:	e014      	b.n	8007184 <_svfiprintf_r+0x110>
 800715a:	eba0 0308 	sub.w	r3, r0, r8
 800715e:	fa09 f303 	lsl.w	r3, r9, r3
 8007162:	4313      	orrs	r3, r2
 8007164:	46a2      	mov	sl, r4
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	e7d2      	b.n	8007110 <_svfiprintf_r+0x9c>
 800716a:	9b03      	ldr	r3, [sp, #12]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	9103      	str	r1, [sp, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfbb      	ittet	lt
 8007176:	425b      	neglt	r3, r3
 8007178:	f042 0202 	orrlt.w	r2, r2, #2
 800717c:	9307      	strge	r3, [sp, #28]
 800717e:	9307      	strlt	r3, [sp, #28]
 8007180:	bfb8      	it	lt
 8007182:	9204      	strlt	r2, [sp, #16]
 8007184:	7823      	ldrb	r3, [r4, #0]
 8007186:	2b2e      	cmp	r3, #46	; 0x2e
 8007188:	d10c      	bne.n	80071a4 <_svfiprintf_r+0x130>
 800718a:	7863      	ldrb	r3, [r4, #1]
 800718c:	2b2a      	cmp	r3, #42	; 0x2a
 800718e:	d134      	bne.n	80071fa <_svfiprintf_r+0x186>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3402      	adds	r4, #2
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9203      	str	r2, [sp, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfb8      	it	lt
 800719e:	f04f 33ff 	movlt.w	r3, #4294967295
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007260 <_svfiprintf_r+0x1ec>
 80071a8:	2203      	movs	r2, #3
 80071aa:	4650      	mov	r0, sl
 80071ac:	7821      	ldrb	r1, [r4, #0]
 80071ae:	f000 fac9 	bl	8007744 <memchr>
 80071b2:	b138      	cbz	r0, 80071c4 <_svfiprintf_r+0x150>
 80071b4:	2240      	movs	r2, #64	; 0x40
 80071b6:	9b04      	ldr	r3, [sp, #16]
 80071b8:	eba0 000a 	sub.w	r0, r0, sl
 80071bc:	4082      	lsls	r2, r0
 80071be:	4313      	orrs	r3, r2
 80071c0:	3401      	adds	r4, #1
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c8:	2206      	movs	r2, #6
 80071ca:	4826      	ldr	r0, [pc, #152]	; (8007264 <_svfiprintf_r+0x1f0>)
 80071cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071d0:	f000 fab8 	bl	8007744 <memchr>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d038      	beq.n	800724a <_svfiprintf_r+0x1d6>
 80071d8:	4b23      	ldr	r3, [pc, #140]	; (8007268 <_svfiprintf_r+0x1f4>)
 80071da:	bb1b      	cbnz	r3, 8007224 <_svfiprintf_r+0x1b0>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	3307      	adds	r3, #7
 80071e0:	f023 0307 	bic.w	r3, r3, #7
 80071e4:	3308      	adds	r3, #8
 80071e6:	9303      	str	r3, [sp, #12]
 80071e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ea:	4433      	add	r3, r6
 80071ec:	9309      	str	r3, [sp, #36]	; 0x24
 80071ee:	e768      	b.n	80070c2 <_svfiprintf_r+0x4e>
 80071f0:	460c      	mov	r4, r1
 80071f2:	2001      	movs	r0, #1
 80071f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071f8:	e7a6      	b.n	8007148 <_svfiprintf_r+0xd4>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f04f 0c0a 	mov.w	ip, #10
 8007200:	4619      	mov	r1, r3
 8007202:	3401      	adds	r4, #1
 8007204:	9305      	str	r3, [sp, #20]
 8007206:	4620      	mov	r0, r4
 8007208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800720c:	3a30      	subs	r2, #48	; 0x30
 800720e:	2a09      	cmp	r2, #9
 8007210:	d903      	bls.n	800721a <_svfiprintf_r+0x1a6>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0c6      	beq.n	80071a4 <_svfiprintf_r+0x130>
 8007216:	9105      	str	r1, [sp, #20]
 8007218:	e7c4      	b.n	80071a4 <_svfiprintf_r+0x130>
 800721a:	4604      	mov	r4, r0
 800721c:	2301      	movs	r3, #1
 800721e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007222:	e7f0      	b.n	8007206 <_svfiprintf_r+0x192>
 8007224:	ab03      	add	r3, sp, #12
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	462a      	mov	r2, r5
 800722a:	4638      	mov	r0, r7
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <_svfiprintf_r+0x1f8>)
 800722e:	a904      	add	r1, sp, #16
 8007230:	f3af 8000 	nop.w
 8007234:	1c42      	adds	r2, r0, #1
 8007236:	4606      	mov	r6, r0
 8007238:	d1d6      	bne.n	80071e8 <_svfiprintf_r+0x174>
 800723a:	89ab      	ldrh	r3, [r5, #12]
 800723c:	065b      	lsls	r3, r3, #25
 800723e:	f53f af2d 	bmi.w	800709c <_svfiprintf_r+0x28>
 8007242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007244:	b01d      	add	sp, #116	; 0x74
 8007246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724a:	ab03      	add	r3, sp, #12
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	462a      	mov	r2, r5
 8007250:	4638      	mov	r0, r7
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <_svfiprintf_r+0x1f8>)
 8007254:	a904      	add	r1, sp, #16
 8007256:	f000 f87d 	bl	8007354 <_printf_i>
 800725a:	e7eb      	b.n	8007234 <_svfiprintf_r+0x1c0>
 800725c:	0800844b 	.word	0x0800844b
 8007260:	08008451 	.word	0x08008451
 8007264:	08008455 	.word	0x08008455
 8007268:	00000000 	.word	0x00000000
 800726c:	08006fc1 	.word	0x08006fc1

08007270 <_printf_common>:
 8007270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	4616      	mov	r6, r2
 8007276:	4699      	mov	r9, r3
 8007278:	688a      	ldr	r2, [r1, #8]
 800727a:	690b      	ldr	r3, [r1, #16]
 800727c:	4607      	mov	r7, r0
 800727e:	4293      	cmp	r3, r2
 8007280:	bfb8      	it	lt
 8007282:	4613      	movlt	r3, r2
 8007284:	6033      	str	r3, [r6, #0]
 8007286:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800728a:	460c      	mov	r4, r1
 800728c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007290:	b10a      	cbz	r2, 8007296 <_printf_common+0x26>
 8007292:	3301      	adds	r3, #1
 8007294:	6033      	str	r3, [r6, #0]
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	0699      	lsls	r1, r3, #26
 800729a:	bf42      	ittt	mi
 800729c:	6833      	ldrmi	r3, [r6, #0]
 800729e:	3302      	addmi	r3, #2
 80072a0:	6033      	strmi	r3, [r6, #0]
 80072a2:	6825      	ldr	r5, [r4, #0]
 80072a4:	f015 0506 	ands.w	r5, r5, #6
 80072a8:	d106      	bne.n	80072b8 <_printf_common+0x48>
 80072aa:	f104 0a19 	add.w	sl, r4, #25
 80072ae:	68e3      	ldr	r3, [r4, #12]
 80072b0:	6832      	ldr	r2, [r6, #0]
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	dc2b      	bgt.n	8007310 <_printf_common+0xa0>
 80072b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072bc:	1e13      	subs	r3, r2, #0
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	bf18      	it	ne
 80072c2:	2301      	movne	r3, #1
 80072c4:	0692      	lsls	r2, r2, #26
 80072c6:	d430      	bmi.n	800732a <_printf_common+0xba>
 80072c8:	4649      	mov	r1, r9
 80072ca:	4638      	mov	r0, r7
 80072cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d0:	47c0      	blx	r8
 80072d2:	3001      	adds	r0, #1
 80072d4:	d023      	beq.n	800731e <_printf_common+0xae>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	6922      	ldr	r2, [r4, #16]
 80072da:	f003 0306 	and.w	r3, r3, #6
 80072de:	2b04      	cmp	r3, #4
 80072e0:	bf14      	ite	ne
 80072e2:	2500      	movne	r5, #0
 80072e4:	6833      	ldreq	r3, [r6, #0]
 80072e6:	f04f 0600 	mov.w	r6, #0
 80072ea:	bf08      	it	eq
 80072ec:	68e5      	ldreq	r5, [r4, #12]
 80072ee:	f104 041a 	add.w	r4, r4, #26
 80072f2:	bf08      	it	eq
 80072f4:	1aed      	subeq	r5, r5, r3
 80072f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80072fa:	bf08      	it	eq
 80072fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007300:	4293      	cmp	r3, r2
 8007302:	bfc4      	itt	gt
 8007304:	1a9b      	subgt	r3, r3, r2
 8007306:	18ed      	addgt	r5, r5, r3
 8007308:	42b5      	cmp	r5, r6
 800730a:	d11a      	bne.n	8007342 <_printf_common+0xd2>
 800730c:	2000      	movs	r0, #0
 800730e:	e008      	b.n	8007322 <_printf_common+0xb2>
 8007310:	2301      	movs	r3, #1
 8007312:	4652      	mov	r2, sl
 8007314:	4649      	mov	r1, r9
 8007316:	4638      	mov	r0, r7
 8007318:	47c0      	blx	r8
 800731a:	3001      	adds	r0, #1
 800731c:	d103      	bne.n	8007326 <_printf_common+0xb6>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007326:	3501      	adds	r5, #1
 8007328:	e7c1      	b.n	80072ae <_printf_common+0x3e>
 800732a:	2030      	movs	r0, #48	; 0x30
 800732c:	18e1      	adds	r1, r4, r3
 800732e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007338:	4422      	add	r2, r4
 800733a:	3302      	adds	r3, #2
 800733c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007340:	e7c2      	b.n	80072c8 <_printf_common+0x58>
 8007342:	2301      	movs	r3, #1
 8007344:	4622      	mov	r2, r4
 8007346:	4649      	mov	r1, r9
 8007348:	4638      	mov	r0, r7
 800734a:	47c0      	blx	r8
 800734c:	3001      	adds	r0, #1
 800734e:	d0e6      	beq.n	800731e <_printf_common+0xae>
 8007350:	3601      	adds	r6, #1
 8007352:	e7d9      	b.n	8007308 <_printf_common+0x98>

08007354 <_printf_i>:
 8007354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	7e0f      	ldrb	r7, [r1, #24]
 800735a:	4691      	mov	r9, r2
 800735c:	2f78      	cmp	r7, #120	; 0x78
 800735e:	4680      	mov	r8, r0
 8007360:	460c      	mov	r4, r1
 8007362:	469a      	mov	sl, r3
 8007364:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800736a:	d807      	bhi.n	800737c <_printf_i+0x28>
 800736c:	2f62      	cmp	r7, #98	; 0x62
 800736e:	d80a      	bhi.n	8007386 <_printf_i+0x32>
 8007370:	2f00      	cmp	r7, #0
 8007372:	f000 80d5 	beq.w	8007520 <_printf_i+0x1cc>
 8007376:	2f58      	cmp	r7, #88	; 0x58
 8007378:	f000 80c1 	beq.w	80074fe <_printf_i+0x1aa>
 800737c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007384:	e03a      	b.n	80073fc <_printf_i+0xa8>
 8007386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800738a:	2b15      	cmp	r3, #21
 800738c:	d8f6      	bhi.n	800737c <_printf_i+0x28>
 800738e:	a101      	add	r1, pc, #4	; (adr r1, 8007394 <_printf_i+0x40>)
 8007390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007394:	080073ed 	.word	0x080073ed
 8007398:	08007401 	.word	0x08007401
 800739c:	0800737d 	.word	0x0800737d
 80073a0:	0800737d 	.word	0x0800737d
 80073a4:	0800737d 	.word	0x0800737d
 80073a8:	0800737d 	.word	0x0800737d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800737d 	.word	0x0800737d
 80073b4:	0800737d 	.word	0x0800737d
 80073b8:	0800737d 	.word	0x0800737d
 80073bc:	0800737d 	.word	0x0800737d
 80073c0:	08007507 	.word	0x08007507
 80073c4:	0800742d 	.word	0x0800742d
 80073c8:	080074c1 	.word	0x080074c1
 80073cc:	0800737d 	.word	0x0800737d
 80073d0:	0800737d 	.word	0x0800737d
 80073d4:	08007529 	.word	0x08007529
 80073d8:	0800737d 	.word	0x0800737d
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	0800737d 	.word	0x0800737d
 80073e4:	0800737d 	.word	0x0800737d
 80073e8:	080074c9 	.word	0x080074c9
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	602a      	str	r2, [r5, #0]
 80073f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073fc:	2301      	movs	r3, #1
 80073fe:	e0a0      	b.n	8007542 <_printf_i+0x1ee>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	0607      	lsls	r7, r0, #24
 8007406:	f103 0104 	add.w	r1, r3, #4
 800740a:	6029      	str	r1, [r5, #0]
 800740c:	d501      	bpl.n	8007412 <_printf_i+0xbe>
 800740e:	681e      	ldr	r6, [r3, #0]
 8007410:	e003      	b.n	800741a <_printf_i+0xc6>
 8007412:	0646      	lsls	r6, r0, #25
 8007414:	d5fb      	bpl.n	800740e <_printf_i+0xba>
 8007416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800741a:	2e00      	cmp	r6, #0
 800741c:	da03      	bge.n	8007426 <_printf_i+0xd2>
 800741e:	232d      	movs	r3, #45	; 0x2d
 8007420:	4276      	negs	r6, r6
 8007422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007426:	230a      	movs	r3, #10
 8007428:	4859      	ldr	r0, [pc, #356]	; (8007590 <_printf_i+0x23c>)
 800742a:	e012      	b.n	8007452 <_printf_i+0xfe>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	6820      	ldr	r0, [r4, #0]
 8007430:	1d19      	adds	r1, r3, #4
 8007432:	6029      	str	r1, [r5, #0]
 8007434:	0605      	lsls	r5, r0, #24
 8007436:	d501      	bpl.n	800743c <_printf_i+0xe8>
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0xee>
 800743c:	0641      	lsls	r1, r0, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0xe4>
 8007440:	881e      	ldrh	r6, [r3, #0]
 8007442:	2f6f      	cmp	r7, #111	; 0x6f
 8007444:	bf0c      	ite	eq
 8007446:	2308      	moveq	r3, #8
 8007448:	230a      	movne	r3, #10
 800744a:	4851      	ldr	r0, [pc, #324]	; (8007590 <_printf_i+0x23c>)
 800744c:	2100      	movs	r1, #0
 800744e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007452:	6865      	ldr	r5, [r4, #4]
 8007454:	2d00      	cmp	r5, #0
 8007456:	bfa8      	it	ge
 8007458:	6821      	ldrge	r1, [r4, #0]
 800745a:	60a5      	str	r5, [r4, #8]
 800745c:	bfa4      	itt	ge
 800745e:	f021 0104 	bicge.w	r1, r1, #4
 8007462:	6021      	strge	r1, [r4, #0]
 8007464:	b90e      	cbnz	r6, 800746a <_printf_i+0x116>
 8007466:	2d00      	cmp	r5, #0
 8007468:	d04b      	beq.n	8007502 <_printf_i+0x1ae>
 800746a:	4615      	mov	r5, r2
 800746c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007470:	fb03 6711 	mls	r7, r3, r1, r6
 8007474:	5dc7      	ldrb	r7, [r0, r7]
 8007476:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800747a:	4637      	mov	r7, r6
 800747c:	42bb      	cmp	r3, r7
 800747e:	460e      	mov	r6, r1
 8007480:	d9f4      	bls.n	800746c <_printf_i+0x118>
 8007482:	2b08      	cmp	r3, #8
 8007484:	d10b      	bne.n	800749e <_printf_i+0x14a>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	07de      	lsls	r6, r3, #31
 800748a:	d508      	bpl.n	800749e <_printf_i+0x14a>
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	6861      	ldr	r1, [r4, #4]
 8007490:	4299      	cmp	r1, r3
 8007492:	bfde      	ittt	le
 8007494:	2330      	movle	r3, #48	; 0x30
 8007496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800749a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800749e:	1b52      	subs	r2, r2, r5
 80074a0:	6122      	str	r2, [r4, #16]
 80074a2:	464b      	mov	r3, r9
 80074a4:	4621      	mov	r1, r4
 80074a6:	4640      	mov	r0, r8
 80074a8:	f8cd a000 	str.w	sl, [sp]
 80074ac:	aa03      	add	r2, sp, #12
 80074ae:	f7ff fedf 	bl	8007270 <_printf_common>
 80074b2:	3001      	adds	r0, #1
 80074b4:	d14a      	bne.n	800754c <_printf_i+0x1f8>
 80074b6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ba:	b004      	add	sp, #16
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	6823      	ldr	r3, [r4, #0]
 80074c2:	f043 0320 	orr.w	r3, r3, #32
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	2778      	movs	r7, #120	; 0x78
 80074ca:	4832      	ldr	r0, [pc, #200]	; (8007594 <_printf_i+0x240>)
 80074cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	061f      	lsls	r7, r3, #24
 80074d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80074da:	d402      	bmi.n	80074e2 <_printf_i+0x18e>
 80074dc:	065f      	lsls	r7, r3, #25
 80074de:	bf48      	it	mi
 80074e0:	b2b6      	uxthmi	r6, r6
 80074e2:	07df      	lsls	r7, r3, #31
 80074e4:	bf48      	it	mi
 80074e6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ea:	6029      	str	r1, [r5, #0]
 80074ec:	bf48      	it	mi
 80074ee:	6023      	strmi	r3, [r4, #0]
 80074f0:	b91e      	cbnz	r6, 80074fa <_printf_i+0x1a6>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	f023 0320 	bic.w	r3, r3, #32
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	2310      	movs	r3, #16
 80074fc:	e7a6      	b.n	800744c <_printf_i+0xf8>
 80074fe:	4824      	ldr	r0, [pc, #144]	; (8007590 <_printf_i+0x23c>)
 8007500:	e7e4      	b.n	80074cc <_printf_i+0x178>
 8007502:	4615      	mov	r5, r2
 8007504:	e7bd      	b.n	8007482 <_printf_i+0x12e>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	6826      	ldr	r6, [r4, #0]
 800750a:	1d18      	adds	r0, r3, #4
 800750c:	6961      	ldr	r1, [r4, #20]
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	0635      	lsls	r5, r6, #24
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	d501      	bpl.n	800751a <_printf_i+0x1c6>
 8007516:	6019      	str	r1, [r3, #0]
 8007518:	e002      	b.n	8007520 <_printf_i+0x1cc>
 800751a:	0670      	lsls	r0, r6, #25
 800751c:	d5fb      	bpl.n	8007516 <_printf_i+0x1c2>
 800751e:	8019      	strh	r1, [r3, #0]
 8007520:	2300      	movs	r3, #0
 8007522:	4615      	mov	r5, r2
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	e7bc      	b.n	80074a2 <_printf_i+0x14e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	2100      	movs	r1, #0
 800752c:	1d1a      	adds	r2, r3, #4
 800752e:	602a      	str	r2, [r5, #0]
 8007530:	681d      	ldr	r5, [r3, #0]
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f905 	bl	8007744 <memchr>
 800753a:	b108      	cbz	r0, 8007540 <_printf_i+0x1ec>
 800753c:	1b40      	subs	r0, r0, r5
 800753e:	6060      	str	r0, [r4, #4]
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	6123      	str	r3, [r4, #16]
 8007544:	2300      	movs	r3, #0
 8007546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754a:	e7aa      	b.n	80074a2 <_printf_i+0x14e>
 800754c:	462a      	mov	r2, r5
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	47d0      	blx	sl
 8007556:	3001      	adds	r0, #1
 8007558:	d0ad      	beq.n	80074b6 <_printf_i+0x162>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	079b      	lsls	r3, r3, #30
 800755e:	d413      	bmi.n	8007588 <_printf_i+0x234>
 8007560:	68e0      	ldr	r0, [r4, #12]
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	4298      	cmp	r0, r3
 8007566:	bfb8      	it	lt
 8007568:	4618      	movlt	r0, r3
 800756a:	e7a6      	b.n	80074ba <_printf_i+0x166>
 800756c:	2301      	movs	r3, #1
 800756e:	4632      	mov	r2, r6
 8007570:	4649      	mov	r1, r9
 8007572:	4640      	mov	r0, r8
 8007574:	47d0      	blx	sl
 8007576:	3001      	adds	r0, #1
 8007578:	d09d      	beq.n	80074b6 <_printf_i+0x162>
 800757a:	3501      	adds	r5, #1
 800757c:	68e3      	ldr	r3, [r4, #12]
 800757e:	9903      	ldr	r1, [sp, #12]
 8007580:	1a5b      	subs	r3, r3, r1
 8007582:	42ab      	cmp	r3, r5
 8007584:	dcf2      	bgt.n	800756c <_printf_i+0x218>
 8007586:	e7eb      	b.n	8007560 <_printf_i+0x20c>
 8007588:	2500      	movs	r5, #0
 800758a:	f104 0619 	add.w	r6, r4, #25
 800758e:	e7f5      	b.n	800757c <_printf_i+0x228>
 8007590:	0800845c 	.word	0x0800845c
 8007594:	0800846d 	.word	0x0800846d

08007598 <__sflush_r>:
 8007598:	898a      	ldrh	r2, [r1, #12]
 800759a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759c:	4605      	mov	r5, r0
 800759e:	0710      	lsls	r0, r2, #28
 80075a0:	460c      	mov	r4, r1
 80075a2:	d457      	bmi.n	8007654 <__sflush_r+0xbc>
 80075a4:	684b      	ldr	r3, [r1, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dc04      	bgt.n	80075b4 <__sflush_r+0x1c>
 80075aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dc01      	bgt.n	80075b4 <__sflush_r+0x1c>
 80075b0:	2000      	movs	r0, #0
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	d0fa      	beq.n	80075b0 <__sflush_r+0x18>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075c0:	682f      	ldr	r7, [r5, #0]
 80075c2:	6a21      	ldr	r1, [r4, #32]
 80075c4:	602b      	str	r3, [r5, #0]
 80075c6:	d032      	beq.n	800762e <__sflush_r+0x96>
 80075c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	075a      	lsls	r2, r3, #29
 80075ce:	d505      	bpl.n	80075dc <__sflush_r+0x44>
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	1ac0      	subs	r0, r0, r3
 80075d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075d6:	b10b      	cbz	r3, 80075dc <__sflush_r+0x44>
 80075d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075da:	1ac0      	subs	r0, r0, r3
 80075dc:	2300      	movs	r3, #0
 80075de:	4602      	mov	r2, r0
 80075e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e2:	4628      	mov	r0, r5
 80075e4:	6a21      	ldr	r1, [r4, #32]
 80075e6:	47b0      	blx	r6
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	d106      	bne.n	80075fc <__sflush_r+0x64>
 80075ee:	6829      	ldr	r1, [r5, #0]
 80075f0:	291d      	cmp	r1, #29
 80075f2:	d82b      	bhi.n	800764c <__sflush_r+0xb4>
 80075f4:	4a28      	ldr	r2, [pc, #160]	; (8007698 <__sflush_r+0x100>)
 80075f6:	410a      	asrs	r2, r1
 80075f8:	07d6      	lsls	r6, r2, #31
 80075fa:	d427      	bmi.n	800764c <__sflush_r+0xb4>
 80075fc:	2200      	movs	r2, #0
 80075fe:	6062      	str	r2, [r4, #4]
 8007600:	6922      	ldr	r2, [r4, #16]
 8007602:	04d9      	lsls	r1, r3, #19
 8007604:	6022      	str	r2, [r4, #0]
 8007606:	d504      	bpl.n	8007612 <__sflush_r+0x7a>
 8007608:	1c42      	adds	r2, r0, #1
 800760a:	d101      	bne.n	8007610 <__sflush_r+0x78>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b903      	cbnz	r3, 8007612 <__sflush_r+0x7a>
 8007610:	6560      	str	r0, [r4, #84]	; 0x54
 8007612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007614:	602f      	str	r7, [r5, #0]
 8007616:	2900      	cmp	r1, #0
 8007618:	d0ca      	beq.n	80075b0 <__sflush_r+0x18>
 800761a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800761e:	4299      	cmp	r1, r3
 8007620:	d002      	beq.n	8007628 <__sflush_r+0x90>
 8007622:	4628      	mov	r0, r5
 8007624:	f7ff fc84 	bl	8006f30 <_free_r>
 8007628:	2000      	movs	r0, #0
 800762a:	6360      	str	r0, [r4, #52]	; 0x34
 800762c:	e7c1      	b.n	80075b2 <__sflush_r+0x1a>
 800762e:	2301      	movs	r3, #1
 8007630:	4628      	mov	r0, r5
 8007632:	47b0      	blx	r6
 8007634:	1c41      	adds	r1, r0, #1
 8007636:	d1c8      	bne.n	80075ca <__sflush_r+0x32>
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0c5      	beq.n	80075ca <__sflush_r+0x32>
 800763e:	2b1d      	cmp	r3, #29
 8007640:	d001      	beq.n	8007646 <__sflush_r+0xae>
 8007642:	2b16      	cmp	r3, #22
 8007644:	d101      	bne.n	800764a <__sflush_r+0xb2>
 8007646:	602f      	str	r7, [r5, #0]
 8007648:	e7b2      	b.n	80075b0 <__sflush_r+0x18>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	e7ae      	b.n	80075b2 <__sflush_r+0x1a>
 8007654:	690f      	ldr	r7, [r1, #16]
 8007656:	2f00      	cmp	r7, #0
 8007658:	d0aa      	beq.n	80075b0 <__sflush_r+0x18>
 800765a:	0793      	lsls	r3, r2, #30
 800765c:	bf18      	it	ne
 800765e:	2300      	movne	r3, #0
 8007660:	680e      	ldr	r6, [r1, #0]
 8007662:	bf08      	it	eq
 8007664:	694b      	ldreq	r3, [r1, #20]
 8007666:	1bf6      	subs	r6, r6, r7
 8007668:	600f      	str	r7, [r1, #0]
 800766a:	608b      	str	r3, [r1, #8]
 800766c:	2e00      	cmp	r6, #0
 800766e:	dd9f      	ble.n	80075b0 <__sflush_r+0x18>
 8007670:	4633      	mov	r3, r6
 8007672:	463a      	mov	r2, r7
 8007674:	4628      	mov	r0, r5
 8007676:	6a21      	ldr	r1, [r4, #32]
 8007678:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800767c:	47e0      	blx	ip
 800767e:	2800      	cmp	r0, #0
 8007680:	dc06      	bgt.n	8007690 <__sflush_r+0xf8>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	e790      	b.n	80075b2 <__sflush_r+0x1a>
 8007690:	4407      	add	r7, r0
 8007692:	1a36      	subs	r6, r6, r0
 8007694:	e7ea      	b.n	800766c <__sflush_r+0xd4>
 8007696:	bf00      	nop
 8007698:	dfbffffe 	.word	0xdfbffffe

0800769c <_fflush_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	4605      	mov	r5, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	b913      	cbnz	r3, 80076ac <_fflush_r+0x10>
 80076a6:	2500      	movs	r5, #0
 80076a8:	4628      	mov	r0, r5
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	b118      	cbz	r0, 80076b6 <_fflush_r+0x1a>
 80076ae:	6a03      	ldr	r3, [r0, #32]
 80076b0:	b90b      	cbnz	r3, 80076b6 <_fflush_r+0x1a>
 80076b2:	f7ff faf9 	bl	8006ca8 <__sinit>
 80076b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f3      	beq.n	80076a6 <_fflush_r+0xa>
 80076be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076c0:	07d0      	lsls	r0, r2, #31
 80076c2:	d404      	bmi.n	80076ce <_fflush_r+0x32>
 80076c4:	0599      	lsls	r1, r3, #22
 80076c6:	d402      	bmi.n	80076ce <_fflush_r+0x32>
 80076c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ca:	f7ff fc10 	bl	8006eee <__retarget_lock_acquire_recursive>
 80076ce:	4628      	mov	r0, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	f7ff ff61 	bl	8007598 <__sflush_r>
 80076d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d8:	4605      	mov	r5, r0
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d4e4      	bmi.n	80076a8 <_fflush_r+0xc>
 80076de:	89a3      	ldrh	r3, [r4, #12]
 80076e0:	059b      	lsls	r3, r3, #22
 80076e2:	d4e1      	bmi.n	80076a8 <_fflush_r+0xc>
 80076e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e6:	f7ff fc03 	bl	8006ef0 <__retarget_lock_release_recursive>
 80076ea:	e7dd      	b.n	80076a8 <_fflush_r+0xc>

080076ec <fiprintf>:
 80076ec:	b40e      	push	{r1, r2, r3}
 80076ee:	b503      	push	{r0, r1, lr}
 80076f0:	4601      	mov	r1, r0
 80076f2:	ab03      	add	r3, sp, #12
 80076f4:	4805      	ldr	r0, [pc, #20]	; (800770c <fiprintf+0x20>)
 80076f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fa:	6800      	ldr	r0, [r0, #0]
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	f000 f89b 	bl	8007838 <_vfiprintf_r>
 8007702:	b002      	add	sp, #8
 8007704:	f85d eb04 	ldr.w	lr, [sp], #4
 8007708:	b003      	add	sp, #12
 800770a:	4770      	bx	lr
 800770c:	2000007c 	.word	0x2000007c

08007710 <memmove>:
 8007710:	4288      	cmp	r0, r1
 8007712:	b510      	push	{r4, lr}
 8007714:	eb01 0402 	add.w	r4, r1, r2
 8007718:	d902      	bls.n	8007720 <memmove+0x10>
 800771a:	4284      	cmp	r4, r0
 800771c:	4623      	mov	r3, r4
 800771e:	d807      	bhi.n	8007730 <memmove+0x20>
 8007720:	1e43      	subs	r3, r0, #1
 8007722:	42a1      	cmp	r1, r4
 8007724:	d008      	beq.n	8007738 <memmove+0x28>
 8007726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800772a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772e:	e7f8      	b.n	8007722 <memmove+0x12>
 8007730:	4601      	mov	r1, r0
 8007732:	4402      	add	r2, r0
 8007734:	428a      	cmp	r2, r1
 8007736:	d100      	bne.n	800773a <memmove+0x2a>
 8007738:	bd10      	pop	{r4, pc}
 800773a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007742:	e7f7      	b.n	8007734 <memmove+0x24>

08007744 <memchr>:
 8007744:	4603      	mov	r3, r0
 8007746:	b510      	push	{r4, lr}
 8007748:	b2c9      	uxtb	r1, r1
 800774a:	4402      	add	r2, r0
 800774c:	4293      	cmp	r3, r2
 800774e:	4618      	mov	r0, r3
 8007750:	d101      	bne.n	8007756 <memchr+0x12>
 8007752:	2000      	movs	r0, #0
 8007754:	e003      	b.n	800775e <memchr+0x1a>
 8007756:	7804      	ldrb	r4, [r0, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	428c      	cmp	r4, r1
 800775c:	d1f6      	bne.n	800774c <memchr+0x8>
 800775e:	bd10      	pop	{r4, pc}

08007760 <memcpy>:
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	f100 33ff 	add.w	r3, r0, #4294967295
 8007768:	d100      	bne.n	800776c <memcpy+0xc>
 800776a:	4770      	bx	lr
 800776c:	b510      	push	{r4, lr}
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	4291      	cmp	r1, r2
 8007774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007778:	d1f9      	bne.n	800776e <memcpy+0xe>
 800777a:	bd10      	pop	{r4, pc}

0800777c <abort>:
 800777c:	2006      	movs	r0, #6
 800777e:	b508      	push	{r3, lr}
 8007780:	f000 fa32 	bl	8007be8 <raise>
 8007784:	2001      	movs	r0, #1
 8007786:	f7f9 fced 	bl	8001164 <_exit>

0800778a <_realloc_r>:
 800778a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	4680      	mov	r8, r0
 8007790:	4614      	mov	r4, r2
 8007792:	460e      	mov	r6, r1
 8007794:	b921      	cbnz	r1, 80077a0 <_realloc_r+0x16>
 8007796:	4611      	mov	r1, r2
 8007798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	f7ff b900 	b.w	80069a0 <_malloc_r>
 80077a0:	b92a      	cbnz	r2, 80077ae <_realloc_r+0x24>
 80077a2:	f7ff fbc5 	bl	8006f30 <_free_r>
 80077a6:	4625      	mov	r5, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ae:	f000 fa37 	bl	8007c20 <_malloc_usable_size_r>
 80077b2:	4284      	cmp	r4, r0
 80077b4:	4607      	mov	r7, r0
 80077b6:	d802      	bhi.n	80077be <_realloc_r+0x34>
 80077b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077bc:	d812      	bhi.n	80077e4 <_realloc_r+0x5a>
 80077be:	4621      	mov	r1, r4
 80077c0:	4640      	mov	r0, r8
 80077c2:	f7ff f8ed 	bl	80069a0 <_malloc_r>
 80077c6:	4605      	mov	r5, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d0ed      	beq.n	80077a8 <_realloc_r+0x1e>
 80077cc:	42bc      	cmp	r4, r7
 80077ce:	4622      	mov	r2, r4
 80077d0:	4631      	mov	r1, r6
 80077d2:	bf28      	it	cs
 80077d4:	463a      	movcs	r2, r7
 80077d6:	f7ff ffc3 	bl	8007760 <memcpy>
 80077da:	4631      	mov	r1, r6
 80077dc:	4640      	mov	r0, r8
 80077de:	f7ff fba7 	bl	8006f30 <_free_r>
 80077e2:	e7e1      	b.n	80077a8 <_realloc_r+0x1e>
 80077e4:	4635      	mov	r5, r6
 80077e6:	e7df      	b.n	80077a8 <_realloc_r+0x1e>

080077e8 <__sfputc_r>:
 80077e8:	6893      	ldr	r3, [r2, #8]
 80077ea:	b410      	push	{r4}
 80077ec:	3b01      	subs	r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	6093      	str	r3, [r2, #8]
 80077f2:	da07      	bge.n	8007804 <__sfputc_r+0x1c>
 80077f4:	6994      	ldr	r4, [r2, #24]
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	db01      	blt.n	80077fe <__sfputc_r+0x16>
 80077fa:	290a      	cmp	r1, #10
 80077fc:	d102      	bne.n	8007804 <__sfputc_r+0x1c>
 80077fe:	bc10      	pop	{r4}
 8007800:	f000 b934 	b.w	8007a6c <__swbuf_r>
 8007804:	6813      	ldr	r3, [r2, #0]
 8007806:	1c58      	adds	r0, r3, #1
 8007808:	6010      	str	r0, [r2, #0]
 800780a:	7019      	strb	r1, [r3, #0]
 800780c:	4608      	mov	r0, r1
 800780e:	bc10      	pop	{r4}
 8007810:	4770      	bx	lr

08007812 <__sfputs_r>:
 8007812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007814:	4606      	mov	r6, r0
 8007816:	460f      	mov	r7, r1
 8007818:	4614      	mov	r4, r2
 800781a:	18d5      	adds	r5, r2, r3
 800781c:	42ac      	cmp	r4, r5
 800781e:	d101      	bne.n	8007824 <__sfputs_r+0x12>
 8007820:	2000      	movs	r0, #0
 8007822:	e007      	b.n	8007834 <__sfputs_r+0x22>
 8007824:	463a      	mov	r2, r7
 8007826:	4630      	mov	r0, r6
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	f7ff ffdc 	bl	80077e8 <__sfputc_r>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d1f3      	bne.n	800781c <__sfputs_r+0xa>
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007838 <_vfiprintf_r>:
 8007838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	460d      	mov	r5, r1
 800783e:	4614      	mov	r4, r2
 8007840:	4698      	mov	r8, r3
 8007842:	4606      	mov	r6, r0
 8007844:	b09d      	sub	sp, #116	; 0x74
 8007846:	b118      	cbz	r0, 8007850 <_vfiprintf_r+0x18>
 8007848:	6a03      	ldr	r3, [r0, #32]
 800784a:	b90b      	cbnz	r3, 8007850 <_vfiprintf_r+0x18>
 800784c:	f7ff fa2c 	bl	8006ca8 <__sinit>
 8007850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007852:	07d9      	lsls	r1, r3, #31
 8007854:	d405      	bmi.n	8007862 <_vfiprintf_r+0x2a>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	059a      	lsls	r2, r3, #22
 800785a:	d402      	bmi.n	8007862 <_vfiprintf_r+0x2a>
 800785c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785e:	f7ff fb46 	bl	8006eee <__retarget_lock_acquire_recursive>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	071b      	lsls	r3, r3, #28
 8007866:	d501      	bpl.n	800786c <_vfiprintf_r+0x34>
 8007868:	692b      	ldr	r3, [r5, #16]
 800786a:	b99b      	cbnz	r3, 8007894 <_vfiprintf_r+0x5c>
 800786c:	4629      	mov	r1, r5
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f93a 	bl	8007ae8 <__swsetup_r>
 8007874:	b170      	cbz	r0, 8007894 <_vfiprintf_r+0x5c>
 8007876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007878:	07dc      	lsls	r4, r3, #31
 800787a:	d504      	bpl.n	8007886 <_vfiprintf_r+0x4e>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	b01d      	add	sp, #116	; 0x74
 8007882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	0598      	lsls	r0, r3, #22
 800788a:	d4f7      	bmi.n	800787c <_vfiprintf_r+0x44>
 800788c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800788e:	f7ff fb2f 	bl	8006ef0 <__retarget_lock_release_recursive>
 8007892:	e7f3      	b.n	800787c <_vfiprintf_r+0x44>
 8007894:	2300      	movs	r3, #0
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	2320      	movs	r3, #32
 800789a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800789e:	2330      	movs	r3, #48	; 0x30
 80078a0:	f04f 0901 	mov.w	r9, #1
 80078a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007a58 <_vfiprintf_r+0x220>
 80078ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b0:	4623      	mov	r3, r4
 80078b2:	469a      	mov	sl, r3
 80078b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078b8:	b10a      	cbz	r2, 80078be <_vfiprintf_r+0x86>
 80078ba:	2a25      	cmp	r2, #37	; 0x25
 80078bc:	d1f9      	bne.n	80078b2 <_vfiprintf_r+0x7a>
 80078be:	ebba 0b04 	subs.w	fp, sl, r4
 80078c2:	d00b      	beq.n	80078dc <_vfiprintf_r+0xa4>
 80078c4:	465b      	mov	r3, fp
 80078c6:	4622      	mov	r2, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f7ff ffa1 	bl	8007812 <__sfputs_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	f000 80a9 	beq.w	8007a28 <_vfiprintf_r+0x1f0>
 80078d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d8:	445a      	add	r2, fp
 80078da:	9209      	str	r2, [sp, #36]	; 0x24
 80078dc:	f89a 3000 	ldrb.w	r3, [sl]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80a1 	beq.w	8007a28 <_vfiprintf_r+0x1f0>
 80078e6:	2300      	movs	r3, #0
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f0:	f10a 0a01 	add.w	sl, sl, #1
 80078f4:	9304      	str	r3, [sp, #16]
 80078f6:	9307      	str	r3, [sp, #28]
 80078f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078fc:	931a      	str	r3, [sp, #104]	; 0x68
 80078fe:	4654      	mov	r4, sl
 8007900:	2205      	movs	r2, #5
 8007902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007906:	4854      	ldr	r0, [pc, #336]	; (8007a58 <_vfiprintf_r+0x220>)
 8007908:	f7ff ff1c 	bl	8007744 <memchr>
 800790c:	9a04      	ldr	r2, [sp, #16]
 800790e:	b9d8      	cbnz	r0, 8007948 <_vfiprintf_r+0x110>
 8007910:	06d1      	lsls	r1, r2, #27
 8007912:	bf44      	itt	mi
 8007914:	2320      	movmi	r3, #32
 8007916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791a:	0713      	lsls	r3, r2, #28
 800791c:	bf44      	itt	mi
 800791e:	232b      	movmi	r3, #43	; 0x2b
 8007920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007924:	f89a 3000 	ldrb.w	r3, [sl]
 8007928:	2b2a      	cmp	r3, #42	; 0x2a
 800792a:	d015      	beq.n	8007958 <_vfiprintf_r+0x120>
 800792c:	4654      	mov	r4, sl
 800792e:	2000      	movs	r0, #0
 8007930:	f04f 0c0a 	mov.w	ip, #10
 8007934:	9a07      	ldr	r2, [sp, #28]
 8007936:	4621      	mov	r1, r4
 8007938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800793c:	3b30      	subs	r3, #48	; 0x30
 800793e:	2b09      	cmp	r3, #9
 8007940:	d94d      	bls.n	80079de <_vfiprintf_r+0x1a6>
 8007942:	b1b0      	cbz	r0, 8007972 <_vfiprintf_r+0x13a>
 8007944:	9207      	str	r2, [sp, #28]
 8007946:	e014      	b.n	8007972 <_vfiprintf_r+0x13a>
 8007948:	eba0 0308 	sub.w	r3, r0, r8
 800794c:	fa09 f303 	lsl.w	r3, r9, r3
 8007950:	4313      	orrs	r3, r2
 8007952:	46a2      	mov	sl, r4
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	e7d2      	b.n	80078fe <_vfiprintf_r+0xc6>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	1d19      	adds	r1, r3, #4
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	9103      	str	r1, [sp, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	bfbb      	ittet	lt
 8007964:	425b      	neglt	r3, r3
 8007966:	f042 0202 	orrlt.w	r2, r2, #2
 800796a:	9307      	strge	r3, [sp, #28]
 800796c:	9307      	strlt	r3, [sp, #28]
 800796e:	bfb8      	it	lt
 8007970:	9204      	strlt	r2, [sp, #16]
 8007972:	7823      	ldrb	r3, [r4, #0]
 8007974:	2b2e      	cmp	r3, #46	; 0x2e
 8007976:	d10c      	bne.n	8007992 <_vfiprintf_r+0x15a>
 8007978:	7863      	ldrb	r3, [r4, #1]
 800797a:	2b2a      	cmp	r3, #42	; 0x2a
 800797c:	d134      	bne.n	80079e8 <_vfiprintf_r+0x1b0>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	3402      	adds	r4, #2
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	9203      	str	r2, [sp, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfb8      	it	lt
 800798c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a5c <_vfiprintf_r+0x224>
 8007996:	2203      	movs	r2, #3
 8007998:	4650      	mov	r0, sl
 800799a:	7821      	ldrb	r1, [r4, #0]
 800799c:	f7ff fed2 	bl	8007744 <memchr>
 80079a0:	b138      	cbz	r0, 80079b2 <_vfiprintf_r+0x17a>
 80079a2:	2240      	movs	r2, #64	; 0x40
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	eba0 000a 	sub.w	r0, r0, sl
 80079aa:	4082      	lsls	r2, r0
 80079ac:	4313      	orrs	r3, r2
 80079ae:	3401      	adds	r4, #1
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b6:	2206      	movs	r2, #6
 80079b8:	4829      	ldr	r0, [pc, #164]	; (8007a60 <_vfiprintf_r+0x228>)
 80079ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079be:	f7ff fec1 	bl	8007744 <memchr>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d03f      	beq.n	8007a46 <_vfiprintf_r+0x20e>
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <_vfiprintf_r+0x22c>)
 80079c8:	bb1b      	cbnz	r3, 8007a12 <_vfiprintf_r+0x1da>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	3307      	adds	r3, #7
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	3308      	adds	r3, #8
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d8:	443b      	add	r3, r7
 80079da:	9309      	str	r3, [sp, #36]	; 0x24
 80079dc:	e768      	b.n	80078b0 <_vfiprintf_r+0x78>
 80079de:	460c      	mov	r4, r1
 80079e0:	2001      	movs	r0, #1
 80079e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e6:	e7a6      	b.n	8007936 <_vfiprintf_r+0xfe>
 80079e8:	2300      	movs	r3, #0
 80079ea:	f04f 0c0a 	mov.w	ip, #10
 80079ee:	4619      	mov	r1, r3
 80079f0:	3401      	adds	r4, #1
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	4620      	mov	r0, r4
 80079f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fa:	3a30      	subs	r2, #48	; 0x30
 80079fc:	2a09      	cmp	r2, #9
 80079fe:	d903      	bls.n	8007a08 <_vfiprintf_r+0x1d0>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0c6      	beq.n	8007992 <_vfiprintf_r+0x15a>
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	e7c4      	b.n	8007992 <_vfiprintf_r+0x15a>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a10:	e7f0      	b.n	80079f4 <_vfiprintf_r+0x1bc>
 8007a12:	ab03      	add	r3, sp, #12
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	462a      	mov	r2, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <_vfiprintf_r+0x230>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	f3af 8000 	nop.w
 8007a22:	4607      	mov	r7, r0
 8007a24:	1c78      	adds	r0, r7, #1
 8007a26:	d1d6      	bne.n	80079d6 <_vfiprintf_r+0x19e>
 8007a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	d405      	bmi.n	8007a3a <_vfiprintf_r+0x202>
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	059a      	lsls	r2, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <_vfiprintf_r+0x202>
 8007a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a36:	f7ff fa5b 	bl	8006ef0 <__retarget_lock_release_recursive>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	065b      	lsls	r3, r3, #25
 8007a3e:	f53f af1d 	bmi.w	800787c <_vfiprintf_r+0x44>
 8007a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a44:	e71c      	b.n	8007880 <_vfiprintf_r+0x48>
 8007a46:	ab03      	add	r3, sp, #12
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <_vfiprintf_r+0x230>)
 8007a50:	a904      	add	r1, sp, #16
 8007a52:	f7ff fc7f 	bl	8007354 <_printf_i>
 8007a56:	e7e4      	b.n	8007a22 <_vfiprintf_r+0x1ea>
 8007a58:	0800844b 	.word	0x0800844b
 8007a5c:	08008451 	.word	0x08008451
 8007a60:	08008455 	.word	0x08008455
 8007a64:	00000000 	.word	0x00000000
 8007a68:	08007813 	.word	0x08007813

08007a6c <__swbuf_r>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	460e      	mov	r6, r1
 8007a70:	4614      	mov	r4, r2
 8007a72:	4605      	mov	r5, r0
 8007a74:	b118      	cbz	r0, 8007a7e <__swbuf_r+0x12>
 8007a76:	6a03      	ldr	r3, [r0, #32]
 8007a78:	b90b      	cbnz	r3, 8007a7e <__swbuf_r+0x12>
 8007a7a:	f7ff f915 	bl	8006ca8 <__sinit>
 8007a7e:	69a3      	ldr	r3, [r4, #24]
 8007a80:	60a3      	str	r3, [r4, #8]
 8007a82:	89a3      	ldrh	r3, [r4, #12]
 8007a84:	071a      	lsls	r2, r3, #28
 8007a86:	d525      	bpl.n	8007ad4 <__swbuf_r+0x68>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	b31b      	cbz	r3, 8007ad4 <__swbuf_r+0x68>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	6922      	ldr	r2, [r4, #16]
 8007a90:	b2f6      	uxtb	r6, r6
 8007a92:	1a98      	subs	r0, r3, r2
 8007a94:	6963      	ldr	r3, [r4, #20]
 8007a96:	4637      	mov	r7, r6
 8007a98:	4283      	cmp	r3, r0
 8007a9a:	dc04      	bgt.n	8007aa6 <__swbuf_r+0x3a>
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f7ff fdfc 	bl	800769c <_fflush_r>
 8007aa4:	b9e0      	cbnz	r0, 8007ae0 <__swbuf_r+0x74>
 8007aa6:	68a3      	ldr	r3, [r4, #8]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	701e      	strb	r6, [r3, #0]
 8007ab4:	6962      	ldr	r2, [r4, #20]
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d004      	beq.n	8007ac6 <__swbuf_r+0x5a>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	07db      	lsls	r3, r3, #31
 8007ac0:	d506      	bpl.n	8007ad0 <__swbuf_r+0x64>
 8007ac2:	2e0a      	cmp	r6, #10
 8007ac4:	d104      	bne.n	8007ad0 <__swbuf_r+0x64>
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f7ff fde7 	bl	800769c <_fflush_r>
 8007ace:	b938      	cbnz	r0, 8007ae0 <__swbuf_r+0x74>
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 f806 	bl	8007ae8 <__swsetup_r>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d0d5      	beq.n	8007a8c <__swbuf_r+0x20>
 8007ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae4:	e7f4      	b.n	8007ad0 <__swbuf_r+0x64>
	...

08007ae8 <__swsetup_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4b2a      	ldr	r3, [pc, #168]	; (8007b94 <__swsetup_r+0xac>)
 8007aec:	4605      	mov	r5, r0
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	460c      	mov	r4, r1
 8007af2:	b118      	cbz	r0, 8007afc <__swsetup_r+0x14>
 8007af4:	6a03      	ldr	r3, [r0, #32]
 8007af6:	b90b      	cbnz	r3, 8007afc <__swsetup_r+0x14>
 8007af8:	f7ff f8d6 	bl	8006ca8 <__sinit>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b02:	0718      	lsls	r0, r3, #28
 8007b04:	d422      	bmi.n	8007b4c <__swsetup_r+0x64>
 8007b06:	06d9      	lsls	r1, r3, #27
 8007b08:	d407      	bmi.n	8007b1a <__swsetup_r+0x32>
 8007b0a:	2309      	movs	r3, #9
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	e034      	b.n	8007b84 <__swsetup_r+0x9c>
 8007b1a:	0758      	lsls	r0, r3, #29
 8007b1c:	d512      	bpl.n	8007b44 <__swsetup_r+0x5c>
 8007b1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b20:	b141      	cbz	r1, 8007b34 <__swsetup_r+0x4c>
 8007b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b26:	4299      	cmp	r1, r3
 8007b28:	d002      	beq.n	8007b30 <__swsetup_r+0x48>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f7ff fa00 	bl	8006f30 <_free_r>
 8007b30:	2300      	movs	r3, #0
 8007b32:	6363      	str	r3, [r4, #52]	; 0x34
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b3a:	81a3      	strh	r3, [r4, #12]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f043 0308 	orr.w	r3, r3, #8
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	b94b      	cbnz	r3, 8007b64 <__swsetup_r+0x7c>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b5a:	d003      	beq.n	8007b64 <__swsetup_r+0x7c>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 f88b 	bl	8007c7a <__smakebuf_r>
 8007b64:	89a0      	ldrh	r0, [r4, #12]
 8007b66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b6a:	f010 0301 	ands.w	r3, r0, #1
 8007b6e:	d00a      	beq.n	8007b86 <__swsetup_r+0x9e>
 8007b70:	2300      	movs	r3, #0
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	6963      	ldr	r3, [r4, #20]
 8007b76:	425b      	negs	r3, r3
 8007b78:	61a3      	str	r3, [r4, #24]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	b943      	cbnz	r3, 8007b90 <__swsetup_r+0xa8>
 8007b7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b82:	d1c4      	bne.n	8007b0e <__swsetup_r+0x26>
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	0781      	lsls	r1, r0, #30
 8007b88:	bf58      	it	pl
 8007b8a:	6963      	ldrpl	r3, [r4, #20]
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	e7f4      	b.n	8007b7a <__swsetup_r+0x92>
 8007b90:	2000      	movs	r0, #0
 8007b92:	e7f7      	b.n	8007b84 <__swsetup_r+0x9c>
 8007b94:	2000007c 	.word	0x2000007c

08007b98 <_raise_r>:
 8007b98:	291f      	cmp	r1, #31
 8007b9a:	b538      	push	{r3, r4, r5, lr}
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	d904      	bls.n	8007bac <_raise_r+0x14>
 8007ba2:	2316      	movs	r3, #22
 8007ba4:	6003      	str	r3, [r0, #0]
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bae:	b112      	cbz	r2, 8007bb6 <_raise_r+0x1e>
 8007bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bb4:	b94b      	cbnz	r3, 8007bca <_raise_r+0x32>
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 f830 	bl	8007c1c <_getpid_r>
 8007bbc:	462a      	mov	r2, r5
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc6:	f000 b817 	b.w	8007bf8 <_kill_r>
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d00a      	beq.n	8007be4 <_raise_r+0x4c>
 8007bce:	1c59      	adds	r1, r3, #1
 8007bd0:	d103      	bne.n	8007bda <_raise_r+0x42>
 8007bd2:	2316      	movs	r3, #22
 8007bd4:	6003      	str	r3, [r0, #0]
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e7e7      	b.n	8007baa <_raise_r+0x12>
 8007bda:	2400      	movs	r4, #0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007be2:	4798      	blx	r3
 8007be4:	2000      	movs	r0, #0
 8007be6:	e7e0      	b.n	8007baa <_raise_r+0x12>

08007be8 <raise>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <raise+0xc>)
 8007bea:	4601      	mov	r1, r0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	f7ff bfd3 	b.w	8007b98 <_raise_r>
 8007bf2:	bf00      	nop
 8007bf4:	2000007c 	.word	0x2000007c

08007bf8 <_kill_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4d06      	ldr	r5, [pc, #24]	; (8007c18 <_kill_r+0x20>)
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f7f9 fa9d 	bl	8001144 <_kill>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d102      	bne.n	8007c14 <_kill_r+0x1c>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	b103      	cbz	r3, 8007c14 <_kill_r+0x1c>
 8007c12:	6023      	str	r3, [r4, #0]
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	200027b0 	.word	0x200027b0

08007c1c <_getpid_r>:
 8007c1c:	f7f9 ba8b 	b.w	8001136 <_getpid>

08007c20 <_malloc_usable_size_r>:
 8007c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c24:	1f18      	subs	r0, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfbc      	itt	lt
 8007c2a:	580b      	ldrlt	r3, [r1, r0]
 8007c2c:	18c0      	addlt	r0, r0, r3
 8007c2e:	4770      	bx	lr

08007c30 <__swhatbuf_r>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c38:	4615      	mov	r5, r2
 8007c3a:	2900      	cmp	r1, #0
 8007c3c:	461e      	mov	r6, r3
 8007c3e:	b096      	sub	sp, #88	; 0x58
 8007c40:	da0c      	bge.n	8007c5c <__swhatbuf_r+0x2c>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	2100      	movs	r1, #0
 8007c46:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c4a:	bf0c      	ite	eq
 8007c4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c50:	2340      	movne	r3, #64	; 0x40
 8007c52:	2000      	movs	r0, #0
 8007c54:	6031      	str	r1, [r6, #0]
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	b016      	add	sp, #88	; 0x58
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	466a      	mov	r2, sp
 8007c5e:	f000 f849 	bl	8007cf4 <_fstat_r>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	dbed      	blt.n	8007c42 <__swhatbuf_r+0x12>
 8007c66:	9901      	ldr	r1, [sp, #4]
 8007c68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007c6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007c70:	4259      	negs	r1, r3
 8007c72:	4159      	adcs	r1, r3
 8007c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c78:	e7eb      	b.n	8007c52 <__swhatbuf_r+0x22>

08007c7a <__smakebuf_r>:
 8007c7a:	898b      	ldrh	r3, [r1, #12]
 8007c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c7e:	079d      	lsls	r5, r3, #30
 8007c80:	4606      	mov	r6, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	d507      	bpl.n	8007c96 <__smakebuf_r+0x1c>
 8007c86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	6123      	str	r3, [r4, #16]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	6163      	str	r3, [r4, #20]
 8007c92:	b002      	add	sp, #8
 8007c94:	bd70      	pop	{r4, r5, r6, pc}
 8007c96:	466a      	mov	r2, sp
 8007c98:	ab01      	add	r3, sp, #4
 8007c9a:	f7ff ffc9 	bl	8007c30 <__swhatbuf_r>
 8007c9e:	9900      	ldr	r1, [sp, #0]
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f7fe fe7c 	bl	80069a0 <_malloc_r>
 8007ca8:	b948      	cbnz	r0, 8007cbe <__smakebuf_r+0x44>
 8007caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cae:	059a      	lsls	r2, r3, #22
 8007cb0:	d4ef      	bmi.n	8007c92 <__smakebuf_r+0x18>
 8007cb2:	f023 0303 	bic.w	r3, r3, #3
 8007cb6:	f043 0302 	orr.w	r3, r3, #2
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	e7e3      	b.n	8007c86 <__smakebuf_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	6020      	str	r0, [r4, #0]
 8007cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	9b00      	ldr	r3, [sp, #0]
 8007cca:	6120      	str	r0, [r4, #16]
 8007ccc:	6163      	str	r3, [r4, #20]
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	b15b      	cbz	r3, 8007cea <__smakebuf_r+0x70>
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd8:	f000 f81e 	bl	8007d18 <_isatty_r>
 8007cdc:	b128      	cbz	r0, 8007cea <__smakebuf_r+0x70>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f023 0303 	bic.w	r3, r3, #3
 8007ce4:	f043 0301 	orr.w	r3, r3, #1
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	431d      	orrs	r5, r3
 8007cee:	81a5      	strh	r5, [r4, #12]
 8007cf0:	e7cf      	b.n	8007c92 <__smakebuf_r+0x18>
	...

08007cf4 <_fstat_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4d06      	ldr	r5, [pc, #24]	; (8007d14 <_fstat_r+0x20>)
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	f7f9 fa7d 	bl	8001200 <_fstat>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d102      	bne.n	8007d10 <_fstat_r+0x1c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b103      	cbz	r3, 8007d10 <_fstat_r+0x1c>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	200027b0 	.word	0x200027b0

08007d18 <_isatty_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4d05      	ldr	r5, [pc, #20]	; (8007d34 <_isatty_r+0x1c>)
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 fa7b 	bl	800121e <_isatty>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_isatty_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_isatty_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200027b0 	.word	0x200027b0

08007d38 <_init>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr

08007d44 <_fini>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr
