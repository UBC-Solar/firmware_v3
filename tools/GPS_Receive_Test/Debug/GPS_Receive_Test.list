
GPS_Receive_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  080082b8  080082b8  000182b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008820  08008820  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008820  08008820  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008820  08008820  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  080089fc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080089fc  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8a3  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b94  00000000  00000000  0002aae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002c678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c8  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4fb  00000000  00000000  0002d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d388  00000000  00000000  00047d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009571b  00000000  00000000  000550cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ea4  00000000  00000000  000ea7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ee68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800829c 	.word	0x0800829c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	0800829c 	.word	0x0800829c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_fcmpun>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011f4:	d102      	bne.n	80011fc <__aeabi_fcmpun+0x14>
 80011f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011fa:	d108      	bne.n	800120e <__aeabi_fcmpun+0x26>
 80011fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001200:	d102      	bne.n	8001208 <__aeabi_fcmpun+0x20>
 8001202:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001206:	d102      	bne.n	800120e <__aeabi_fcmpun+0x26>
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4770      	bx	lr
 800120e:	f04f 0001 	mov.w	r0, #1
 8001212:	4770      	bx	lr

08001214 <__aeabi_d2lz>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4605      	mov	r5, r0
 8001218:	460c      	mov	r4, r1
 800121a:	2200      	movs	r2, #0
 800121c:	2300      	movs	r3, #0
 800121e:	4628      	mov	r0, r5
 8001220:	4621      	mov	r1, r4
 8001222:	f7ff fc37 	bl	8000a94 <__aeabi_dcmplt>
 8001226:	b928      	cbnz	r0, 8001234 <__aeabi_d2lz+0x20>
 8001228:	4628      	mov	r0, r5
 800122a:	4621      	mov	r1, r4
 800122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001230:	f000 b80a 	b.w	8001248 <__aeabi_d2ulz>
 8001234:	4628      	mov	r0, r5
 8001236:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123a:	f000 f805 	bl	8001248 <__aeabi_d2ulz>
 800123e:	4240      	negs	r0, r0
 8001240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop

08001248 <__aeabi_d2ulz>:
 8001248:	b5d0      	push	{r4, r6, r7, lr}
 800124a:	2200      	movs	r2, #0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__aeabi_d2ulz+0x34>)
 800124e:	4606      	mov	r6, r0
 8001250:	460f      	mov	r7, r1
 8001252:	f7ff f9ad 	bl	80005b0 <__aeabi_dmul>
 8001256:	f7ff fc83 	bl	8000b60 <__aeabi_d2uiz>
 800125a:	4604      	mov	r4, r0
 800125c:	f7ff f92e 	bl	80004bc <__aeabi_ui2d>
 8001260:	2200      	movs	r2, #0
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <__aeabi_d2ulz+0x38>)
 8001264:	f7ff f9a4 	bl	80005b0 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4630      	mov	r0, r6
 800126e:	4639      	mov	r1, r7
 8001270:	f7fe ffe6 	bl	8000240 <__aeabi_dsub>
 8001274:	f7ff fc74 	bl	8000b60 <__aeabi_d2uiz>
 8001278:	4621      	mov	r1, r4
 800127a:	bdd0      	pop	{r4, r6, r7, pc}
 800127c:	3df00000 	.word	0x3df00000
 8001280:	41f00000 	.word	0x41f00000

08001284 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800128c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001290:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800129c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80012a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80012ac:	e000      	b.n	80012b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80012ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80012b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f9      	beq.n	80012ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80012ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <__io_putchar>:
    io_huart = huart;
}

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
#endif // USE_UART

#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffd2 	bl	8001284 <ITM_SendChar>
#endif // USE_SWO

    return ch;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <__io_getchar>:

int __io_getchar()
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 800130a:	f7ff ffee 	bl	80012ea <__io_getchar>
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
    }

    return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ffbf 	bl	80012d0 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
    }
    return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <parseBuffer>:

/*
 * @brief parseBuffer: parses the nmea message buffer into a GPS struct
 * @param *buffer: nmea message buffer
 */
void parseBuffer(uint8_t *buffer){
 800136c:	b580      	push	{r7, lr}
 800136e:	b092      	sub	sp, #72	; 0x48
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
	GPS myData;
	nmea_parse(&myData, buffer);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fd20 	bl	8001dc0 <nmea_parse>

	if (myData.fix == 1) {
 8001380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001382:	2b01      	cmp	r3, #1
 8001384:	d124      	bne.n	80013d0 <parseBuffer+0x64>
//		printf("Fix: %d\r\n", myData.fix);
		printf("Time: %s\r\n", myData.lastMeasure);
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	332c      	adds	r3, #44	; 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <parseBuffer+0x74>)
 8001390:	f004 fb32 	bl	80059f8 <iprintf>
		printf("Latitude: %f%c\r\n", myData.latitude, myData.latSide);
 8001394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001398:	7c39      	ldrb	r1, [r7, #16]
 800139a:	9100      	str	r1, [sp, #0]
 800139c:	4811      	ldr	r0, [pc, #68]	; (80013e4 <parseBuffer+0x78>)
 800139e:	f004 fb2b 	bl	80059f8 <iprintf>
		printf("Longitude: %f%c\r\n", myData.longitude, myData.lonSide);
 80013a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013a6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80013aa:	9100      	str	r1, [sp, #0]
 80013ac:	480e      	ldr	r0, [pc, #56]	; (80013e8 <parseBuffer+0x7c>)
 80013ae:	f004 fb23 	bl	80059f8 <iprintf>
		printf("Altitude: %f\r\n", myData.altitude);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8a3 	bl	8000500 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	480b      	ldr	r0, [pc, #44]	; (80013ec <parseBuffer+0x80>)
 80013c0:	f004 fb1a 	bl	80059f8 <iprintf>
		printf("Sat Count: %d\r\n", myData.satelliteCount);
 80013c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <parseBuffer+0x84>)
 80013ca:	f004 fb15 	bl	80059f8 <iprintf>
	}
	else {
		printf("No Fix Yet\r\n");
	}

}
 80013ce:	e002      	b.n	80013d6 <parseBuffer+0x6a>
		printf("No Fix Yet\r\n");
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <parseBuffer+0x88>)
 80013d2:	f004 fb77 	bl	8005ac4 <puts>
}
 80013d6:	bf00      	nop
 80013d8:	3740      	adds	r7, #64	; 0x40
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	080082b8 	.word	0x080082b8
 80013e4:	080082c4 	.word	0x080082c4
 80013e8:	080082d8 	.word	0x080082d8
 80013ec:	080082ec 	.word	0x080082ec
 80013f0:	080082fc 	.word	0x080082fc
 80013f4:	0800830c 	.word	0x0800830c

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80013fe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001400:	f000 ff16 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f82c 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001408:	f000 f8be 	bl	8001588 <MX_GPIO_Init>
  MX_I2C1_Init();
 800140c:	f000 f864 	bl	80014d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001410:	f000 f890 	bl	8001534 <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* If ready to receive */
	  if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK){
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2201      	movs	r2, #1
 800141a:	2184      	movs	r1, #132	; 0x84
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <main+0x60>)
 800141e:	f001 fdb5 	bl	8002f8c <HAL_I2C_IsDeviceReady>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10e      	bne.n	8001446 <main+0x4e>
		  uint8_t receiveBuffer[512];

		  /* Receive message over I2C */
		  HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS, receiveBuffer, sizeof(receiveBuffer), HAL_MAX_DELAY);
 8001428:	463a      	mov	r2, r7
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	2184      	movs	r1, #132	; 0x84
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <main+0x60>)
 8001438:	f001 fb3c 	bl	8002ab4 <HAL_I2C_Master_Receive>

		  /* Parse the receive buffer. The function will print the parsed info if the message is valid */
		  parseBuffer(receiveBuffer);
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff94 	bl	800136c <parseBuffer>
 8001444:	e002      	b.n	800144c <main+0x54>
	  }
	  else {
		  /* Device not ready to receive */
		  printf("Device is not ready for I2C communication.\n\r");
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <main+0x64>)
 8001448:	f004 fad6 	bl	80059f8 <iprintf>
	  }

	  HAL_Delay(1000);
 800144c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001450:	f000 ff50 	bl	80022f4 <HAL_Delay>
	  if (HAL_I2C_IsDeviceReady(&hi2c1, DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK){
 8001454:	e7de      	b.n	8001414 <main+0x1c>
 8001456:	bf00      	nop
 8001458:	200001f0 	.word	0x200001f0
 800145c:	08008318 	.word	0x08008318

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2228      	movs	r2, #40	; 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fc08 	bl	8005c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148a:	2310      	movs	r3, #16
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	4618      	mov	r0, r3
 8001498:	f002 f8ec 	bl	8003674 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014a2:	f000 f893 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fb5a 	bl	8003b78 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f87f 	bl	80015cc <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3740      	adds	r7, #64	; 0x40
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <MX_I2C1_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x50>)
 80014e4:	4a12      	ldr	r2, [pc, #72]	; (8001530 <MX_I2C1_Init+0x58>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_I2C1_Init+0x50>)
 80014f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_I2C1_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_I2C1_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_I2C1_Init+0x50>)
 8001516:	f001 f989 	bl	800282c <HAL_I2C_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001520:	f000 f854 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001f0 	.word	0x200001f0
 800152c:	40005400 	.word	0x40005400
 8001530:	000186a0 	.word	0x000186a0

08001534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_USART1_UART_Init+0x50>)
 800153c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART1_UART_Init+0x4c>)
 800156c:	f002 fc92 	bl	8003e94 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001576:	f000 f829 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000244 	.word	0x20000244
 8001584:	40013800 	.word	0x40013800

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_GPIO_Init+0x40>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <MX_GPIO_Init+0x40>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_GPIO_Init+0x40>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b0b7      	sub	sp, #220	; 0xdc
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	2264      	movs	r2, #100	; 0x64
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fb47 	bl	8005c84 <memset>
    char *marker = strtok(inputString, ",");
 80015f6:	49b0      	ldr	r1, [pc, #704]	; (80018b8 <nmea_GPGGA+0x2e0>)
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f004 fb5d 	bl	8005cb8 <strtok>
 80015fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001602:	e027      	b.n	8001654 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001604:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001608:	f7fe fe0e 	bl	8000228 <strlen>
 800160c:	4603      	mov	r3, r0
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001614:	1c63      	adds	r3, r4, #1
 8001616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800161a:	4610      	mov	r0, r2
 800161c:	f002 fd18 	bl	8004050 <malloc>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	00a3      	lsls	r3, r4, #2
 8001626:	33d8      	adds	r3, #216	; 0xd8
 8001628:	443b      	add	r3, r7
 800162a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800162e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001632:	3b01      	subs	r3, #1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	33d8      	adds	r3, #216	; 0xd8
 8001638:	443b      	add	r3, r7
 800163a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800163e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001642:	4618      	mov	r0, r3
 8001644:	f004 fc31 	bl	8005eaa <strcpy>
        marker = strtok(NULL, ",");
 8001648:	499b      	ldr	r1, [pc, #620]	; (80018b8 <nmea_GPGGA+0x2e0>)
 800164a:	2000      	movs	r0, #0
 800164c:	f004 fb34 	bl	8005cb8 <strtok>
 8001650:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001654:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1d3      	bne.n	8001604 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 800165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	332c      	adds	r3, #44	; 0x2c
 8001670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f004 fc18 	bl	8005eaa <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 800167a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800167e:	2b53      	cmp	r3, #83	; 0x53
 8001680:	d004      	beq.n	800168c <nmea_GPGGA+0xb4>
 8001682:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001686:	2b4e      	cmp	r3, #78	; 0x4e
 8001688:	f040 8175 	bne.w	8001976 <nmea_GPGGA+0x39e>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001692:	e010      	b.n	80016b6 <nmea_GPGGA+0xde>
 8001694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800169a:	4413      	add	r3, r2
 800169c:	7819      	ldrb	r1, [r3, #0]
 800169e:	f107 021c 	add.w	r2, r7, #28
 80016a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016a6:	4413      	add	r3, r2
 80016a8:	460a      	mov	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016b0:	3301      	adds	r3, #1
 80016b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	ddea      	ble.n	8001694 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016c4:	e011      	b.n	80016ea <nmea_GPGGA+0x112>
 80016c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016cc:	3302      	adds	r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	7819      	ldrb	r1, [r3, #0]
 80016d2:	f107 0214 	add.w	r2, r7, #20
 80016d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016da:	4413      	add	r3, r2
 80016dc:	460a      	mov	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	dde9      	ble.n	80016c6 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	220a      	movs	r2, #10
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fc52 	bl	8004fa4 <strtol>
 8001700:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f003 fb74 	bl	8004df8 <strtof>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb4e 	bl	8000db4 <__aeabi_i2f>
 8001718:	4603      	mov	r3, r0
 800171a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800171e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001722:	f7ff fb47 	bl	8000db4 <__aeabi_i2f>
 8001726:	4604      	mov	r4, r0
 8001728:	4964      	ldr	r1, [pc, #400]	; (80018bc <nmea_GPGGA+0x2e4>)
 800172a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800172e:	f7ff fc49 	bl	8000fc4 <__aeabi_fdiv>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fa88 	bl	8000c4c <__addsf3>
 800173c:	4603      	mov	r3, r0
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fede 	bl	8000500 <__aeabi_f2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001752:	e010      	b.n	8001776 <nmea_GPGGA+0x19e>
 8001754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800175a:	4413      	add	r3, r2
 800175c:	7819      	ldrb	r1, [r3, #0]
 800175e:	f107 0210 	add.w	r2, r7, #16
 8001762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001766:	4413      	add	r3, r2
 8001768:	460a      	mov	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001770:	3301      	adds	r3, #1
 8001772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800177a:	2b02      	cmp	r3, #2
 800177c:	ddea      	ble.n	8001754 <nmea_GPGGA+0x17c>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001784:	e011      	b.n	80017aa <nmea_GPGGA+0x1d2>
 8001786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800178c:	3303      	adds	r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	7819      	ldrb	r1, [r3, #0]
 8001792:	f107 0208 	add.w	r2, r7, #8
 8001796:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800179a:	4413      	add	r3, r2
 800179c:	460a      	mov	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a4:	3301      	adds	r3, #1
 80017a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80017aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	dde9      	ble.n	8001786 <nmea_GPGGA+0x1ae>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	220a      	movs	r2, #10
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fbf2 	bl	8004fa4 <strtol>
 80017c0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fb14 	bl	8004df8 <strtof>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff faee 	bl	8000db4 <__aeabi_i2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80017de:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80017e2:	f7ff fae7 	bl	8000db4 <__aeabi_i2f>
 80017e6:	4604      	mov	r4, r0
 80017e8:	4934      	ldr	r1, [pc, #208]	; (80018bc <nmea_GPGGA+0x2e4>)
 80017ea:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80017ee:	f7ff fbe9 	bl	8000fc4 <__aeabi_fdiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4620      	mov	r0, r4
 80017f8:	f7ff fa28 	bl	8000c4c <__addsf3>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe7e 	bl	8000500 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001818:	f7ff f932 	bl	8000a80 <__aeabi_dcmpeq>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 808e 	bne.w	8001940 <nmea_GPGGA+0x368>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001830:	f7ff f926 	bl	8000a80 <__aeabi_dcmpeq>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 8082 	bne.w	8001940 <nmea_GPGGA+0x368>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <nmea_GPGGA+0x2e8>)
 8001842:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001846:	f7ff f925 	bl	8000a94 <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d077      	beq.n	8001940 <nmea_GPGGA+0x368>
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <nmea_GPGGA+0x2ec>)
 8001856:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800185a:	f7ff f91b 	bl	8000a94 <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d06d      	beq.n	8001940 <nmea_GPGGA+0x368>
            gps_data->latitude = lat_deg;
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800186a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001874:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800187c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001886:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fab3 	bl	8004df8 <strtof>
 8001892:	4603      	mov	r3, r0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa8d 	bl	8000db4 <__aeabi_i2f>
 800189a:	4603      	mov	r3, r0
 800189c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80018a8:	f7ff fc6c 	bl	8001184 <__aeabi_fcmpeq>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00a      	beq.n	80018c8 <nmea_GPGGA+0x2f0>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	e009      	b.n	80018cc <nmea_GPGGA+0x2f4>
 80018b8:	08008348 	.word	0x08008348
 80018bc:	42700000 	.word	0x42700000
 80018c0:	40568000 	.word	0x40568000
 80018c4:	40668000 	.word	0x40668000
 80018c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	220a      	movs	r2, #10
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fb64 	bl	8004fa4 <strtol>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80018e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e4:	220a      	movs	r2, #10
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fb5b 	bl	8004fa4 <strtol>
 80018ee:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80018f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bfcc      	ite	gt
 80018fa:	2301      	movgt	r3, #1
 80018fc:	2300      	movle	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fa74 	bl	8004df8 <strtof>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fa4e 	bl	8000db4 <__aeabi_i2f>
 8001918:	4603      	mov	r3, r0
 800191a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001926:	f7ff fc2d 	bl	8001184 <__aeabi_fcmpeq>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <nmea_GPGGA+0x35e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	e001      	b.n	800193a <nmea_GPGGA+0x362>
 8001936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800193e:	e01a      	b.n	8001976 <nmea_GPGGA+0x39e>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001946:	e00e      	b.n	8001966 <nmea_GPGGA+0x38e>
 8001948:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	33d8      	adds	r3, #216	; 0xd8
 8001950:	443b      	add	r3, r7
 8001952:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fb82 	bl	8004060 <free>
 800195c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001960:	3301      	adds	r3, #1
 8001962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001966:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800196a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800196e:	429a      	cmp	r2, r3
 8001970:	dbea      	blt.n	8001948 <nmea_GPGGA+0x370>
            return 0;
 8001972:	2300      	movs	r3, #0
 8001974:	e019      	b.n	80019aa <nmea_GPGGA+0x3d2>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800197c:	e00e      	b.n	800199c <nmea_GPGGA+0x3c4>
 800197e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	33d8      	adds	r3, #216	; 0xd8
 8001986:	443b      	add	r3, r7
 8001988:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fb67 	bl	8004060 <free>
 8001992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001996:	3301      	adds	r3, #1
 8001998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800199c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80019a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbea      	blt.n	800197e <nmea_GPGGA+0x3a6>
    return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	37dc      	adds	r7, #220	; 0xdc
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop

080019b4 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b0a3      	sub	sp, #140	; 0x8c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2264      	movs	r2, #100	; 0x64
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 f959 	bl	8005c84 <memset>
    char *marker = strtok(inputString, ",");
 80019d2:	493b      	ldr	r1, [pc, #236]	; (8001ac0 <nmea_GPGSA+0x10c>)
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f004 f96f 	bl	8005cb8 <strtok>
 80019da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80019de:	e027      	b.n	8001a30 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80019e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80019e4:	f7fe fc20 	bl	8000228 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80019f0:	1c63      	adds	r3, r4, #1
 80019f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019f6:	4610      	mov	r0, r2
 80019f8:	f002 fb2a 	bl	8004050 <malloc>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	00a3      	lsls	r3, r4, #2
 8001a02:	3388      	adds	r3, #136	; 0x88
 8001a04:	443b      	add	r3, r7
 8001a06:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3388      	adds	r3, #136	; 0x88
 8001a14:	443b      	add	r3, r7
 8001a16:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001a1a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 fa43 	bl	8005eaa <strcpy>
        marker = strtok(NULL, ",");
 8001a24:	4926      	ldr	r1, [pc, #152]	; (8001ac0 <nmea_GPGSA+0x10c>)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f004 f946 	bl	8005cb8 <strtok>
 8001a2c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1d3      	bne.n	80019e0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	220a      	movs	r2, #10
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fab0 	bl	8004fa4 <strtol>
 8001a44:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	bfcc      	ite	gt
 8001a4c:	2301      	movgt	r3, #1
 8001a4e:	2300      	movle	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a60:	e00e      	b.n	8001a80 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3388      	adds	r3, #136	; 0x88
 8001a68:	443b      	add	r3, r7
 8001a6a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a76:	3301      	adds	r3, #1
 8001a78:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a82:	2b0e      	cmp	r3, #14
 8001a84:	dded      	ble.n	8001a62 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	677b      	str	r3, [r7, #116]	; 0x74
 8001a90:	e00b      	b.n	8001aaa <nmea_GPGSA+0xf6>
 8001a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	3388      	adds	r3, #136	; 0x88
 8001a98:	443b      	add	r3, r7
 8001a9a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fade 	bl	8004060 <free>
 8001aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	677b      	str	r3, [r7, #116]	; 0x74
 8001aaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbee      	blt.n	8001a92 <nmea_GPGSA+0xde>
    return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	378c      	adds	r7, #140	; 0x8c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	08008348 	.word	0x08008348

08001ac4 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b0b7      	sub	sp, #220	; 0xdc
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	2264      	movs	r2, #100	; 0x64
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 f8d1 	bl	8005c84 <memset>
    char *marker = strtok(inputString, ",");
 8001ae2:	49b5      	ldr	r1, [pc, #724]	; (8001db8 <nmea_GPGLL+0x2f4>)
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f004 f8e7 	bl	8005cb8 <strtok>
 8001aea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001aee:	e027      	b.n	8001b40 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001af0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001af4:	f7fe fb98 	bl	8000228 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001b00:	1c63      	adds	r3, r4, #1
 8001b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b06:	4610      	mov	r0, r2
 8001b08:	f002 faa2 	bl	8004050 <malloc>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	00a3      	lsls	r3, r4, #2
 8001b12:	33d8      	adds	r3, #216	; 0xd8
 8001b14:	443b      	add	r3, r7
 8001b16:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 8001b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	33d8      	adds	r3, #216	; 0xd8
 8001b24:	443b      	add	r3, r7
 8001b26:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001b2a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 f9bb 	bl	8005eaa <strcpy>
        marker = strtok(NULL, ",");
 8001b34:	49a0      	ldr	r1, [pc, #640]	; (8001db8 <nmea_GPGLL+0x2f4>)
 8001b36:	2000      	movs	r0, #0
 8001b38:	f004 f8be 	bl	8005cb8 <strtok>
 8001b3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1d3      	bne.n	8001af0 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8001b50:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001b54:	2b53      	cmp	r3, #83	; 0x53
 8001b56:	d004      	beq.n	8001b62 <nmea_GPGLL+0x9e>
 8001b58:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001b5c:	2b4e      	cmp	r3, #78	; 0x4e
 8001b5e:	f040 8126 	bne.w	8001dae <nmea_GPGLL+0x2ea>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b68:	e010      	b.n	8001b8c <nmea_GPGLL+0xc8>
 8001b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b70:	4413      	add	r3, r2
 8001b72:	7819      	ldrb	r1, [r3, #0]
 8001b74:	f107 0220 	add.w	r2, r7, #32
 8001b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b7c:	4413      	add	r3, r2
 8001b7e:	460a      	mov	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b86:	3301      	adds	r3, #1
 8001b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	ddea      	ble.n	8001b6a <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b9a:	e011      	b.n	8001bc0 <nmea_GPGLL+0xfc>
 8001b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	7819      	ldrb	r1, [r3, #0]
 8001ba8:	f107 0218 	add.w	r2, r7, #24
 8001bac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb0:	4413      	add	r3, r2
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	dde9      	ble.n	8001b9c <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	220a      	movs	r2, #10
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 f9e7 	bl	8004fa4 <strtol>
 8001bd6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001bda:	f107 0318 	add.w	r3, r7, #24
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 f909 	bl	8004df8 <strtof>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f8e3 	bl	8000db4 <__aeabi_i2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001bf4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001bf8:	f7ff f8dc 	bl	8000db4 <__aeabi_i2f>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	496f      	ldr	r1, [pc, #444]	; (8001dbc <nmea_GPGLL+0x2f8>)
 8001c00:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001c04:	f7ff f9de 	bl	8000fc4 <__aeabi_fdiv>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff f81d 	bl	8000c4c <__addsf3>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc73 	bl	8000500 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8001c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c30:	e010      	b.n	8001c54 <nmea_GPGLL+0x190>
 8001c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c38:	4413      	add	r3, r2
 8001c3a:	7819      	ldrb	r1, [r3, #0]
 8001c3c:	f107 0214 	add.w	r2, r7, #20
 8001c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c44:	4413      	add	r3, r2
 8001c46:	460a      	mov	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
 8001c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	ddea      	ble.n	8001c32 <nmea_GPGLL+0x16e>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c62:	e011      	b.n	8001c88 <nmea_GPGLL+0x1c4>
 8001c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c6a:	3303      	adds	r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	7819      	ldrb	r1, [r3, #0]
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c78:	4413      	add	r3, r2
 8001c7a:	460a      	mov	r2, r1
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c82:	3301      	adds	r3, #1
 8001c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	dde9      	ble.n	8001c64 <nmea_GPGLL+0x1a0>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	220a      	movs	r2, #10
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 f983 	bl	8004fa4 <strtol>
 8001c9e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 f8a5 	bl	8004df8 <strtof>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f87f 	bl	8000db4 <__aeabi_i2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001cbc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001cc0:	f7ff f878 	bl	8000db4 <__aeabi_i2f>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	493d      	ldr	r1, [pc, #244]	; (8001dbc <nmea_GPGLL+0x2f8>)
 8001cc8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001ccc:	f7ff f97a 	bl	8000fc4 <__aeabi_fdiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f7fe ffb9 	bl	8000c4c <__addsf3>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc0f 	bl	8000500 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8001cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d015      	beq.n	8001d1e <nmea_GPGLL+0x25a>
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001cfa:	f7ff fa43 	bl	8001184 <__aeabi_fcmpeq>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <nmea_GPGLL+0x25a>
 8001d04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <nmea_GPGLL+0x25a>
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001d14:	f7ff fa36 	bl	8001184 <__aeabi_fcmpeq>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01a      	beq.n	8001d54 <nmea_GPGLL+0x290>
            for(int i = 0; i<counter; i++) free(values[i]);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d24:	e00e      	b.n	8001d44 <nmea_GPGLL+0x280>
 8001d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	33d8      	adds	r3, #216	; 0xd8
 8001d2e:	443b      	add	r3, r7
 8001d30:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f002 f993 	bl	8004060 <free>
 8001d3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbea      	blt.n	8001d26 <nmea_GPGLL+0x262>
            return 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e02d      	b.n	8001db0 <nmea_GPGLL+0x2ec>
        }
        else{
            gps_data->latitude = lat_deg;
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001d5a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d64:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001d6e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8001d76:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d7e:	e00e      	b.n	8001d9e <nmea_GPGLL+0x2da>
 8001d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	33d8      	adds	r3, #216	; 0xd8
 8001d88:	443b      	add	r3, r7
 8001d8a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 f966 	bl	8004060 <free>
 8001d94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbea      	blt.n	8001d80 <nmea_GPGLL+0x2bc>
            return 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <nmea_GPGLL+0x2ec>
        }
    }
    else return 0;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	37dc      	adds	r7, #220	; 0xdc
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	08008348 	.word	0x08008348
 8001dbc:	42700000 	.word	0x42700000

08001dc0 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001dca:	223c      	movs	r2, #60	; 0x3c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	484e      	ldr	r0, [pc, #312]	; (8001f08 <nmea_parse+0x148>)
 8001dd0:	f003 ff58 	bl	8005c84 <memset>
    char * token = strtok(buffer, "$");
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <nmea_parse+0x14c>)
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f003 ff6e 	bl	8005cb8 <strtok>
 8001ddc:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001de2:	e01d      	b.n	8001e20 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7fe fa1f 	bl	8000228 <strlen>
 8001dea:	4603      	mov	r3, r0
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	693c      	ldr	r4, [r7, #16]
 8001df0:	1c63      	adds	r3, r4, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	4610      	mov	r0, r2
 8001df6:	f002 f92b 	bl	8004050 <malloc>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <nmea_parse+0x148>)
 8001e00:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <nmea_parse+0x148>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 f84a 	bl	8005eaa <strcpy>
        token = strtok(NULL, "$");
 8001e16:	493d      	ldr	r1, [pc, #244]	; (8001f0c <nmea_parse+0x14c>)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f003 ff4d 	bl	8005cb8 <strtok>
 8001e1e:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1de      	bne.n	8001de4 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e053      	b.n	8001ed4 <nmea_parse+0x114>
       if(strstr(data[i], "\r\n")!=NULL){
 8001e2c:	4a36      	ldr	r2, [pc, #216]	; (8001f08 <nmea_parse+0x148>)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	4936      	ldr	r1, [pc, #216]	; (8001f10 <nmea_parse+0x150>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 ff9a 	bl	8005d70 <strstr>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d045      	beq.n	8001ece <nmea_parse+0x10e>
           if(strstr(data[i], "GPGLL")!=NULL){
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <nmea_parse+0x148>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	4932      	ldr	r1, [pc, #200]	; (8001f14 <nmea_parse+0x154>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 ff8f 	bl	8005d70 <strstr>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <nmea_parse+0x148>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fe2e 	bl	8001ac4 <nmea_GPGLL>
 8001e68:	e031      	b.n	8001ece <nmea_parse+0x10e>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8001e6a:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <nmea_parse+0x148>)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	4929      	ldr	r1, [pc, #164]	; (8001f18 <nmea_parse+0x158>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 ff7b 	bl	8005d70 <strstr>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <nmea_parse+0x148>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fd92 	bl	80019b4 <nmea_GPGSA>
 8001e90:	e01d      	b.n	8001ece <nmea_parse+0x10e>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <nmea_parse+0x148>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	4920      	ldr	r1, [pc, #128]	; (8001f1c <nmea_parse+0x15c>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 ff67 	bl	8005d70 <strstr>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <nmea_parse+0xfe>
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <nmea_parse+0x148>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	491b      	ldr	r1, [pc, #108]	; (8001f20 <nmea_parse+0x160>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 ff5c 	bl	8005d70 <strstr>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <nmea_parse+0x10e>
               nmea_GPGGA(gps_data, data[i]);
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <nmea_parse+0x148>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fb85 	bl	80015d8 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dba7      	blt.n	8001e2c <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	e009      	b.n	8001ef6 <nmea_parse+0x136>
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <nmea_parse+0x148>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 f8b8 	bl	8004060 <free>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf1      	blt.n	8001ee2 <nmea_parse+0x122>


}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	2000028c 	.word	0x2000028c
 8001f0c:	0800834c 	.word	0x0800834c
 8001f10:	08008350 	.word	0x08008350
 8001f14:	08008354 	.word	0x08008354
 8001f18:	0800835c 	.word	0x0800835c
 8001f1c:	08008364 	.word	0x08008364
 8001f20:	0800836c 	.word	0x0800836c

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_MspInit+0x40>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_MspInit+0x40>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_MspInit+0x40>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_MspInit+0x40>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_MspInit+0x40>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_MspInit+0x40>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <HAL_I2C_MspInit+0x70>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d123      	bne.n	8001fd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <HAL_I2C_MspInit+0x78>)
 8001fb4:	f000 faa6 	bl	8002504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_I2C_MspInit+0x74>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010c00 	.word	0x40010c00

08001fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_UART_MspInit+0x8c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d131      	bne.n	8002068 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_UART_MspInit+0x90>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_UART_MspInit+0x90>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_UART_MspInit+0x90>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_UART_MspInit+0x90>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_UART_MspInit+0x90>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_UART_MspInit+0x90>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4619      	mov	r1, r3
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <HAL_UART_MspInit+0x94>)
 800204a:	f000 fa5b 	bl	8002504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_UART_MspInit+0x94>)
 8002064:	f000 fa4e 	bl	8002504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40013800 	.word	0x40013800
 8002074:	40021000 	.word	0x40021000
 8002078:	40010800 	.word	0x40010800

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr

080020a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c2:	f000 f8fb 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e2:	f003 feb5 	bl	8005e50 <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800210a:	e7fe      	b.n	800210a <_exit+0x12>

0800210c <_close>:
  }
  return len;
}

int _close(int file)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	605a      	str	r2, [r3, #4]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <_isatty>:

int _isatty(int file)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f003 fe58 	bl	8005e50 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000c000 	.word	0x2000c000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	200002c8 	.word	0x200002c8
 80021d4:	20000420 	.word	0x20000420

080021d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e4:	f7ff fff8 	bl	80021d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021ea:	490c      	ldr	r1, [pc, #48]	; (800221c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021ec:	4a0c      	ldr	r2, [pc, #48]	; (8002220 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002200:	4c09      	ldr	r4, [pc, #36]	; (8002228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f003 fe25 	bl	8005e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002212:	f7ff f8f1 	bl	80013f8 <main>
  bx lr
 8002216:	4770      	bx	lr
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002220:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8002224:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002228:	2000041c 	.word	0x2000041c

0800222c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x28>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x28>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f92b 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	200f      	movs	r0, #15
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fe6a 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f935 	bl	80024ea <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f000 f90b 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x1c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_IncTick+0x20>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_IncTick+0x20>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000008 	.word	0x20000008
 80022dc:	200002cc 	.word	0x200002cc

080022e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_GetTick+0x10>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	200002cc 	.word	0x200002cc

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d005      	beq.n	800231a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_Delay+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800231a:	bf00      	nop
 800231c:	f7ff ffe0 	bl	80022e0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d8f7      	bhi.n	800231c <HAL_Delay+0x28>
  {
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000008 	.word	0x20000008

0800233c <__NVIC_SetPriorityGrouping>:
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_SetPriority>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <SysTick_Config>:
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff90 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff49 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff5e 	bl	8002384 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff90 	bl	80023f4 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5f 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffb0 	bl	8002458 <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002504:	b480      	push	{r7}
 8002506:	b08b      	sub	sp, #44	; 0x2c
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002516:	e179      	b.n	800280c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002518:	2201      	movs	r2, #1
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	429a      	cmp	r2, r3
 8002532:	f040 8168 	bne.w	8002806 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a96      	ldr	r2, [pc, #600]	; (8002794 <HAL_GPIO_Init+0x290>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d05e      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
 8002540:	4a94      	ldr	r2, [pc, #592]	; (8002794 <HAL_GPIO_Init+0x290>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d875      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 8002546:	4a94      	ldr	r2, [pc, #592]	; (8002798 <HAL_GPIO_Init+0x294>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d058      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
 800254c:	4a92      	ldr	r2, [pc, #584]	; (8002798 <HAL_GPIO_Init+0x294>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d86f      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 8002552:	4a92      	ldr	r2, [pc, #584]	; (800279c <HAL_GPIO_Init+0x298>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d052      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
 8002558:	4a90      	ldr	r2, [pc, #576]	; (800279c <HAL_GPIO_Init+0x298>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d869      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 800255e:	4a90      	ldr	r2, [pc, #576]	; (80027a0 <HAL_GPIO_Init+0x29c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d04c      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
 8002564:	4a8e      	ldr	r2, [pc, #568]	; (80027a0 <HAL_GPIO_Init+0x29c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d863      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 800256a:	4a8e      	ldr	r2, [pc, #568]	; (80027a4 <HAL_GPIO_Init+0x2a0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d046      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
 8002570:	4a8c      	ldr	r2, [pc, #560]	; (80027a4 <HAL_GPIO_Init+0x2a0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d85d      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 8002576:	2b12      	cmp	r3, #18
 8002578:	d82a      	bhi.n	80025d0 <HAL_GPIO_Init+0xcc>
 800257a:	2b12      	cmp	r3, #18
 800257c:	d859      	bhi.n	8002632 <HAL_GPIO_Init+0x12e>
 800257e:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <HAL_GPIO_Init+0x80>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	080025ff 	.word	0x080025ff
 8002588:	080025d9 	.word	0x080025d9
 800258c:	080025eb 	.word	0x080025eb
 8002590:	0800262d 	.word	0x0800262d
 8002594:	08002633 	.word	0x08002633
 8002598:	08002633 	.word	0x08002633
 800259c:	08002633 	.word	0x08002633
 80025a0:	08002633 	.word	0x08002633
 80025a4:	08002633 	.word	0x08002633
 80025a8:	08002633 	.word	0x08002633
 80025ac:	08002633 	.word	0x08002633
 80025b0:	08002633 	.word	0x08002633
 80025b4:	08002633 	.word	0x08002633
 80025b8:	08002633 	.word	0x08002633
 80025bc:	08002633 	.word	0x08002633
 80025c0:	08002633 	.word	0x08002633
 80025c4:	08002633 	.word	0x08002633
 80025c8:	080025e1 	.word	0x080025e1
 80025cc:	080025f5 	.word	0x080025f5
 80025d0:	4a75      	ldr	r2, [pc, #468]	; (80027a8 <HAL_GPIO_Init+0x2a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025d6:	e02c      	b.n	8002632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e029      	b.n	8002634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	3304      	adds	r3, #4
 80025e6:	623b      	str	r3, [r7, #32]
          break;
 80025e8:	e024      	b.n	8002634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	3308      	adds	r3, #8
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e01f      	b.n	8002634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	330c      	adds	r3, #12
 80025fa:	623b      	str	r3, [r7, #32]
          break;
 80025fc:	e01a      	b.n	8002634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002606:	2304      	movs	r3, #4
 8002608:	623b      	str	r3, [r7, #32]
          break;
 800260a:	e013      	b.n	8002634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	611a      	str	r2, [r3, #16]
          break;
 800261e:	e009      	b.n	8002634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002620:	2308      	movs	r3, #8
 8002622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	615a      	str	r2, [r3, #20]
          break;
 800262a:	e003      	b.n	8002634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
          break;
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x130>
          break;
 8002632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2bff      	cmp	r3, #255	; 0xff
 8002638:	d801      	bhi.n	800263e <HAL_GPIO_Init+0x13a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_Init+0x13e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2bff      	cmp	r3, #255	; 0xff
 8002648:	d802      	bhi.n	8002650 <HAL_GPIO_Init+0x14c>
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	e002      	b.n	8002656 <HAL_GPIO_Init+0x152>
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	3b08      	subs	r3, #8
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	210f      	movs	r1, #15
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	401a      	ands	r2, r3
 8002668:	6a39      	ldr	r1, [r7, #32]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80c1 	beq.w	8002806 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_GPIO_Init+0x2a8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a48      	ldr	r2, [pc, #288]	; (80027ac <HAL_GPIO_Init+0x2a8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_GPIO_Init+0x2a8>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_GPIO_Init+0x2ac>)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	220f      	movs	r2, #15
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <HAL_GPIO_Init+0x2b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d01f      	beq.n	8002708 <HAL_GPIO_Init+0x204>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <HAL_GPIO_Init+0x2b4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d019      	beq.n	8002704 <HAL_GPIO_Init+0x200>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3a      	ldr	r2, [pc, #232]	; (80027bc <HAL_GPIO_Init+0x2b8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_GPIO_Init+0x1fc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <HAL_GPIO_Init+0x2bc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_GPIO_Init+0x1f8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_GPIO_Init+0x2c0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x1f4>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a37      	ldr	r2, [pc, #220]	; (80027c8 <HAL_GPIO_Init+0x2c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_GPIO_Init+0x1f0>
 80026f0:	2305      	movs	r3, #5
 80026f2:	e00a      	b.n	800270a <HAL_GPIO_Init+0x206>
 80026f4:	2306      	movs	r3, #6
 80026f6:	e008      	b.n	800270a <HAL_GPIO_Init+0x206>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e006      	b.n	800270a <HAL_GPIO_Init+0x206>
 80026fc:	2303      	movs	r3, #3
 80026fe:	e004      	b.n	800270a <HAL_GPIO_Init+0x206>
 8002700:	2302      	movs	r3, #2
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x206>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_GPIO_Init+0x206>
 8002708:	2300      	movs	r3, #0
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	4093      	lsls	r3, r2
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800271a:	4925      	ldr	r1, [pc, #148]	; (80027b0 <HAL_GPIO_Init+0x2ac>)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4924      	ldr	r1, [pc, #144]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	4920      	ldr	r1, [pc, #128]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 800274c:	4013      	ands	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	491a      	ldr	r1, [pc, #104]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 8002774:	4013      	ands	r3, r2
 8002776:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d025      	beq.n	80027d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4910      	ldr	r1, [pc, #64]	; (80027cc <HAL_GPIO_Init+0x2c8>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e025      	b.n	80027de <HAL_GPIO_Init+0x2da>
 8002792:	bf00      	nop
 8002794:	10320000 	.word	0x10320000
 8002798:	10310000 	.word	0x10310000
 800279c:	10220000 	.word	0x10220000
 80027a0:	10210000 	.word	0x10210000
 80027a4:	10120000 	.word	0x10120000
 80027a8:	10110000 	.word	0x10110000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40010800 	.word	0x40010800
 80027b8:	40010c00 	.word	0x40010c00
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40011400 	.word	0x40011400
 80027c4:	40011800 	.word	0x40011800
 80027c8:	40011c00 	.word	0x40011c00
 80027cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_GPIO_Init+0x324>)
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	4913      	ldr	r1, [pc, #76]	; (8002828 <HAL_GPIO_Init+0x324>)
 80027da:	4013      	ands	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_GPIO_Init+0x324>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_GPIO_Init+0x324>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	e006      	b.n	8002806 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_GPIO_Init+0x324>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	43db      	mvns	r3, r3
 8002800:	4909      	ldr	r1, [pc, #36]	; (8002828 <HAL_GPIO_Init+0x324>)
 8002802:	4013      	ands	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f47f ae7e 	bne.w	8002518 <HAL_GPIO_Init+0x14>
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	372c      	adds	r7, #44	; 0x2c
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	40010400 	.word	0x40010400

0800282c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e12b      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fb88 	bl	8001f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	; 0x24
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002890:	f001 faba 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a81      	ldr	r2, [pc, #516]	; (8002aa0 <HAL_I2C_Init+0x274>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d807      	bhi.n	80028b0 <HAL_I2C_Init+0x84>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <HAL_I2C_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e006      	b.n	80028be <HAL_I2C_Init+0x92>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <HAL_I2C_Init+0x27c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	bf94      	ite	ls
 80028b8:	2301      	movls	r3, #1
 80028ba:	2300      	movhi	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0e7      	b.n	8002a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a78      	ldr	r2, [pc, #480]	; (8002aac <HAL_I2C_Init+0x280>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0c9b      	lsrs	r3, r3, #18
 80028d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_I2C_Init+0x274>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d802      	bhi.n	8002900 <HAL_I2C_Init+0xd4>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	e009      	b.n	8002914 <HAL_I2C_Init+0xe8>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <HAL_I2C_Init+0x284>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	3301      	adds	r3, #1
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	; (8002aa0 <HAL_I2C_Init+0x274>)
 8002930:	428b      	cmp	r3, r1
 8002932:	d819      	bhi.n	8002968 <HAL_I2C_Init+0x13c>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e59      	subs	r1, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002948:	400b      	ands	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_I2C_Init+0x138>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1e59      	subs	r1, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fbb1 f3f3 	udiv	r3, r1, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002962:	e051      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002964:	2304      	movs	r3, #4
 8002966:	e04f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d111      	bne.n	8002994 <HAL_I2C_Init+0x168>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e012      	b.n	80029ba <HAL_I2C_Init+0x18e>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Init+0x196>
 80029be:	2301      	movs	r3, #1
 80029c0:	e022      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10e      	bne.n	80029e8 <HAL_I2C_Init+0x1bc>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e58      	subs	r0, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	440b      	add	r3, r1
 80029d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	e00f      	b.n	8002a08 <HAL_I2C_Init+0x1dc>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	0099      	lsls	r1, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fe:	3301      	adds	r3, #1
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6809      	ldr	r1, [r1, #0]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6911      	ldr	r1, [r2, #16]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	4311      	orrs	r1, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	000186a0 	.word	0x000186a0
 8002aa4:	001e847f 	.word	0x001e847f
 8002aa8:	003d08ff 	.word	0x003d08ff
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	817b      	strh	r3, [r7, #10]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fc08 	bl	80022e0 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 824b 	bne.w	8002f76 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	497f      	ldr	r1, [pc, #508]	; (8002ce8 <HAL_I2C_Master_Receive+0x234>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fc4a 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e23e      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2C_Master_Receive+0x54>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e237      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2222      	movs	r2, #34	; 0x22
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a5f      	ldr	r2, [pc, #380]	; (8002cec <HAL_I2C_Master_Receive+0x238>)
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb36 	bl	80031e8 <I2C_MasterRequestRead>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1f8      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61fb      	str	r3, [r7, #28]
 8002ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e1cc      	b.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d11e      	bne.n	8002bfc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bce:	b672      	cpsid	i
}
 8002bd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf8:	b662      	cpsie	i
}
 8002bfa:	e035      	b.n	8002c68 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d11e      	bne.n	8002c42 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c3e:	b662      	cpsie	i
}
 8002c40:	e012      	b.n	8002c68 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c68:	e172      	b.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	f200 811f 	bhi.w	8002eb2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d123      	bne.n	8002cc4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fc99 	bl	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e173      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc2:	e145      	b.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d152      	bne.n	8002d72 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4906      	ldr	r1, [pc, #24]	; (8002cf0 <HAL_I2C_Master_Receive+0x23c>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fb54 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e148      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
 8002ce6:	bf00      	nop
 8002ce8:	00100002 	.word	0x00100002
 8002cec:	ffff0000 	.word	0xffff0000
 8002cf0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf4:	b672      	cpsid	i
}
 8002cf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d3a:	b662      	cpsie	i
}
 8002d3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d70:	e0ee      	b.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4981      	ldr	r1, [pc, #516]	; (8002f80 <HAL_I2C_Master_Receive+0x4cc>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fb01 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0f5      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
}
 8002d9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <HAL_I2C_Master_Receive+0x4d0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	4a6b      	ldr	r2, [pc, #428]	; (8002f88 <HAL_I2C_Master_Receive+0x4d4>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0a1a      	lsrs	r2, r3, #8
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00da      	lsls	r2, r3, #3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d118      	bne.n	8002e2a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e1a:	b662      	cpsie	i
}
 8002e1c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0a6      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d1d9      	bne.n	8002dec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e7a:	b662      	cpsie	i
}
 8002e7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb0:	e04e      	b.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fb7e 	bl	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e058      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d124      	bne.n	8002f50 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f ae88 	bne.w	8002c6a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3728      	adds	r7, #40	; 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	00010004 	.word	0x00010004
 8002f84:	20000000 	.word	0x20000000
 8002f88:	14f8b589 	.word	0x14f8b589

08002f8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff f9a0 	bl	80022e0 <HAL_GetTick>
 8002fa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	f040 8111 	bne.w	80031d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2319      	movs	r3, #25
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4988      	ldr	r1, [pc, #544]	; (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f9e0 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e104      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2C_IsDeviceReady+0x50>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0fd      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d007      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2224      	movs	r2, #36	; 0x24
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a70      	ldr	r2, [pc, #448]	; (80031e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f99e 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305c:	d103      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0b6      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003078:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800307a:	f7ff f931 	bl	80022e0 <HAL_GetTick>
 800307e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ae:	e025      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7ff f916 	bl	80022e0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <HAL_I2C_IsDeviceReady+0x13a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	22a0      	movs	r2, #160	; 0xa0
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2ba0      	cmp	r3, #160	; 0xa0
 8003106:	d005      	beq.n	8003114 <HAL_I2C_IsDeviceReady+0x188>
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_I2C_IsDeviceReady+0x188>
 800310e:	7dbb      	ldrb	r3, [r7, #22]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0cd      	beq.n	80030b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d129      	bne.n	800317e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4921      	ldr	r1, [pc, #132]	; (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f912 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e036      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e02c      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003196:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	490f      	ldr	r1, [pc, #60]	; (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8ee 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e012      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f4ff af32 	bcc.w	8003026 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000

080031e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	460b      	mov	r3, r1
 80031f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d006      	beq.n	8003222 <I2C_MasterRequestRead+0x3a>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d003      	beq.n	8003222 <I2C_MasterRequestRead+0x3a>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003220:	d108      	bne.n	8003234 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e00b      	b.n	800324c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	2b11      	cmp	r3, #17
 800323a:	d107      	bne.n	800324c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f893 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	d103      	bne.n	800327c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e079      	b.n	8003374 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003288:	d108      	bne.n	800329c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800328a:	897b      	ldrh	r3, [r7, #10]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	e05f      	b.n	800335c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800329c:	897b      	ldrh	r3, [r7, #10]
 800329e:	11db      	asrs	r3, r3, #7
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0306 	and.w	r3, r3, #6
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f063 030f 	orn	r3, r3, #15
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4930      	ldr	r1, [pc, #192]	; (800337c <I2C_MasterRequestRead+0x194>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8dc 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e054      	b.n	8003374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4929      	ldr	r1, [pc, #164]	; (8003380 <I2C_MasterRequestRead+0x198>)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8cc 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e044      	b.n	8003374 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f831 	bl	8003384 <I2C_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d103      	bne.n	8003340 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e017      	b.n	8003374 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	11db      	asrs	r3, r3, #7
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f003 0306 	and.w	r3, r3, #6
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f063 030e 	orn	r3, r3, #14
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4907      	ldr	r1, [pc, #28]	; (8003380 <I2C_MasterRequestRead+0x198>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f888 	bl	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010008 	.word	0x00010008
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003394:	e048      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d044      	beq.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe ff9f 	bl	80022e0 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d139      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d10d      	bne.n	80033da <I2C_WaitOnFlagUntilTimeout+0x56>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	e00c      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e023      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d10d      	bne.n	800344e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	e00c      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d093      	beq.n	8003396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003486:	e071      	b.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003496:	d123      	bne.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e067      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d041      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe fefa 	bl	80022e0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d136      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10c      	bne.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e00b      	b.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	43da      	mvns	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e021      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d10c      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e00b      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af6d 	bne.w	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c4:	e049      	b.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d119      	bne.n	8003608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0210 	mvn.w	r2, #16
 80035dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e030      	b.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003608:	f7fe fe6a 	bl	80022e0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d302      	bcc.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11d      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d016      	beq.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e007      	b.n	800366a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d1ae      	bne.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e272      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8087 	beq.w	80037a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003694:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b04      	cmp	r3, #4
 800369e:	d00c      	beq.n	80036ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a0:	4b8f      	ldr	r3, [pc, #572]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d112      	bne.n	80036d2 <HAL_RCC_OscConfig+0x5e>
 80036ac:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d06c      	beq.n	80037a0 <HAL_RCC_OscConfig+0x12c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d168      	bne.n	80037a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e24c      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x76>
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a7f      	ldr	r2, [pc, #508]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e02e      	b.n	8003748 <HAL_RCC_OscConfig+0xd4>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x98>
 80036f2:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b78      	ldr	r3, [pc, #480]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xd4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0xbc>
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a71      	ldr	r2, [pc, #452]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6e      	ldr	r2, [pc, #440]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xd4>
 8003730:	4b6b      	ldr	r3, [pc, #428]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6a      	ldr	r2, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b68      	ldr	r3, [pc, #416]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a67      	ldr	r2, [pc, #412]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe fdc6 	bl	80022e0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fdc2 	bl	80022e0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e200      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xe4>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fdb2 	bl	80022e0 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe fdae 	bl	80022e0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1ec      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x10c>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x18c>
 80037c6:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b43      	ldr	r3, [pc, #268]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x176>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1c0      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4939      	ldr	r1, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe fd67 	bl	80022e0 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003816:	f7fe fd63 	bl	80022e0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1a1      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4927      	ldr	r1, [pc, #156]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_RCC_OscConfig+0x270>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe fd46 	bl	80022e0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003858:	f7fe fd42 	bl	80022e0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e180      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d03a      	beq.n	80038f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d019      	beq.n	80038be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7fe fd26 	bl	80022e0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe fd22 	bl	80022e0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e160      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x26c>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038b6:	2001      	movs	r0, #1
 80038b8:	f000 face 	bl	8003e58 <RCC_Delay>
 80038bc:	e01c      	b.n	80038f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_RCC_OscConfig+0x274>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fd0c 	bl	80022e0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ca:	e00f      	b.n	80038ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fd08 	bl	80022e0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d908      	bls.n	80038ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e146      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	42420000 	.word	0x42420000
 80038e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	4b92      	ldr	r3, [pc, #584]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e9      	bne.n	80038cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a6 	beq.w	8003a52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390a:	4b8b      	ldr	r3, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003916:	4b88      	ldr	r3, [pc, #544]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4a87      	ldr	r2, [pc, #540]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	61d3      	str	r3, [r2, #28]
 8003922:	4b85      	ldr	r3, [pc, #532]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <HAL_RCC_OscConfig+0x4c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d118      	bne.n	8003970 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800393e:	4b7f      	ldr	r3, [pc, #508]	; (8003b3c <HAL_RCC_OscConfig+0x4c8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7e      	ldr	r2, [pc, #504]	; (8003b3c <HAL_RCC_OscConfig+0x4c8>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394a:	f7fe fcc9 	bl	80022e0 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003952:	f7fe fcc5 	bl	80022e0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b64      	cmp	r3, #100	; 0x64
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e103      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	4b75      	ldr	r3, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x4c8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x312>
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6213      	str	r3, [r2, #32]
 8003984:	e02d      	b.n	80039e2 <HAL_RCC_OscConfig+0x36e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x334>
 800398e:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6213      	str	r3, [r2, #32]
 800399a:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f023 0304 	bic.w	r3, r3, #4
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	e01c      	b.n	80039e2 <HAL_RCC_OscConfig+0x36e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d10c      	bne.n	80039ca <HAL_RCC_OscConfig+0x356>
 80039b0:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4a60      	ldr	r2, [pc, #384]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6213      	str	r3, [r2, #32]
 80039bc:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4a5d      	ldr	r2, [pc, #372]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6213      	str	r3, [r2, #32]
 80039c8:	e00b      	b.n	80039e2 <HAL_RCC_OscConfig+0x36e>
 80039ca:	4b5b      	ldr	r3, [pc, #364]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a5a      	ldr	r2, [pc, #360]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	4b58      	ldr	r3, [pc, #352]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4a57      	ldr	r2, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fc79 	bl	80022e0 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fc75 	bl	80022e0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0b1      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ee      	beq.n	80039f2 <HAL_RCC_OscConfig+0x37e>
 8003a14:	e014      	b.n	8003a40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fc63 	bl	80022e0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe fc5f 	bl	80022e0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e09b      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	4b40      	ldr	r3, [pc, #256]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b3c      	ldr	r3, [pc, #240]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4a3b      	ldr	r2, [pc, #236]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8087 	beq.w	8003b6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d061      	beq.n	8003b2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d146      	bne.n	8003afe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a70:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x4cc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe fc33 	bl	80022e0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe fc2f 	bl	80022e0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e06d      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa4:	d108      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4921      	ldr	r1, [pc, #132]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab8:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a19      	ldr	r1, [r3, #32]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	491b      	ldr	r1, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fc03 	bl	80022e0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fe fbff 	bl	80022e0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e03d      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x46a>
 8003afc:	e035      	b.n	8003b6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_RCC_OscConfig+0x4cc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fbec 	bl	80022e0 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fe fbe8 	bl	80022e0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e026      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x498>
 8003b2a:	e01e      	b.n	8003b6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e019      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_OscConfig+0x500>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d106      	bne.n	8003b66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000

08003b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0d0      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d910      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 0207 	bic.w	r2, r3, #7
 8003ba2:	4965      	ldr	r1, [pc, #404]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b8      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bec:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	494d      	ldr	r1, [pc, #308]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d040      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d115      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e073      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06b      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4936      	ldr	r1, [pc, #216]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fe fb3a 	bl	80022e0 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fe fb36 	bl	80022e0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e053      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 020c 	and.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1eb      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d210      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 0207 	bic.w	r2, r3, #7
 8003cae:	4922      	ldr	r1, [pc, #136]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e032      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4916      	ldr	r1, [pc, #88]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	490e      	ldr	r1, [pc, #56]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d06:	f000 f821 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	490a      	ldr	r1, [pc, #40]	; (8003d40 <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	5ccb      	ldrb	r3, [r1, r3]
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1cc>)
 8003d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1d0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fa98 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08008374 	.word	0x08008374
 8003d44:	20000000 	.word	0x20000000
 8003d48:	20000004 	.word	0x20000004

08003d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d66:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d002      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x30>
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x36>
 8003d7a:	e027      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d7e:	613b      	str	r3, [r7, #16]
      break;
 8003d80:	e027      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0c9b      	lsrs	r3, r3, #18
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	0c5b      	lsrs	r3, r3, #17
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	4a11      	ldr	r2, [pc, #68]	; (8003dec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003da6:	5cd3      	ldrb	r3, [r2, r3]
 8003da8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dae:	fb03 f202 	mul.w	r2, r3, r2
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e004      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	613b      	str	r3, [r7, #16]
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dce:	613b      	str	r3, [r7, #16]
      break;
 8003dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd2:	693b      	ldr	r3, [r7, #16]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	007a1200 	.word	0x007a1200
 8003de8:	0800838c 	.word	0x0800838c
 8003dec:	0800839c 	.word	0x0800839c
 8003df0:	003d0900 	.word	0x003d0900

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b02      	ldr	r3, [pc, #8]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr
 8003e04:	20000000 	.word	0x20000000

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	f7ff fff2 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4903      	ldr	r1, [pc, #12]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e1e:	5ccb      	ldrb	r3, [r1, r3]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	08008384 	.word	0x08008384

08003e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e34:	f7ff ffde 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0adb      	lsrs	r3, r3, #11
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	08008384 	.word	0x08008384

08003e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <RCC_Delay+0x34>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <RCC_Delay+0x38>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	0a5b      	lsrs	r3, r3, #9
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e74:	bf00      	nop
  }
  while (Delay --);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1e5a      	subs	r2, r3, #1
 8003e7a:	60fa      	str	r2, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f9      	bne.n	8003e74 <RCC_Delay+0x1c>
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	10624dd3 	.word	0x10624dd3

08003e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e042      	b.n	8003f2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe f892 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f82b 	bl	8003f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f6e:	f023 030c 	bic.w	r3, r3, #12
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <UART_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d103      	bne.n	8003fa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f9c:	f7ff ff48 	bl	8003e30 <HAL_RCC_GetPCLK2Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	e002      	b.n	8003faa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7ff ff30 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8003fa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	4a22      	ldr	r2, [pc, #136]	; (800404c <UART_SetConfig+0x118>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	0119      	lsls	r1, r3, #4
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <UART_SetConfig+0x118>)
 8003fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <UART_SetConfig+0x118>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	4419      	add	r1, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fbb2 f2f3 	udiv	r2, r2, r3
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <UART_SetConfig+0x118>)
 800401a:	fba3 0302 	umull	r0, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2064      	movs	r0, #100	; 0x64
 8004022:	fb00 f303 	mul.w	r3, r0, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	3332      	adds	r3, #50	; 0x32
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <UART_SetConfig+0x118>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	440a      	add	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40013800 	.word	0x40013800
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <malloc>:
 8004050:	4b02      	ldr	r3, [pc, #8]	; (800405c <malloc+0xc>)
 8004052:	4601      	mov	r1, r0
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	f000 b82b 	b.w	80040b0 <_malloc_r>
 800405a:	bf00      	nop
 800405c:	200001d0 	.word	0x200001d0

08004060 <free>:
 8004060:	4b02      	ldr	r3, [pc, #8]	; (800406c <free+0xc>)
 8004062:	4601      	mov	r1, r0
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f002 bddb 	b.w	8006c20 <_free_r>
 800406a:	bf00      	nop
 800406c:	200001d0 	.word	0x200001d0

08004070 <sbrk_aligned>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4e0e      	ldr	r6, [pc, #56]	; (80040ac <sbrk_aligned+0x3c>)
 8004074:	460c      	mov	r4, r1
 8004076:	6831      	ldr	r1, [r6, #0]
 8004078:	4605      	mov	r5, r0
 800407a:	b911      	cbnz	r1, 8004082 <sbrk_aligned+0x12>
 800407c:	f001 fec6 	bl	8005e0c <_sbrk_r>
 8004080:	6030      	str	r0, [r6, #0]
 8004082:	4621      	mov	r1, r4
 8004084:	4628      	mov	r0, r5
 8004086:	f001 fec1 	bl	8005e0c <_sbrk_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	d00a      	beq.n	80040a4 <sbrk_aligned+0x34>
 800408e:	1cc4      	adds	r4, r0, #3
 8004090:	f024 0403 	bic.w	r4, r4, #3
 8004094:	42a0      	cmp	r0, r4
 8004096:	d007      	beq.n	80040a8 <sbrk_aligned+0x38>
 8004098:	1a21      	subs	r1, r4, r0
 800409a:	4628      	mov	r0, r5
 800409c:	f001 feb6 	bl	8005e0c <_sbrk_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d101      	bne.n	80040a8 <sbrk_aligned+0x38>
 80040a4:	f04f 34ff 	mov.w	r4, #4294967295
 80040a8:	4620      	mov	r0, r4
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	200002d4 	.word	0x200002d4

080040b0 <_malloc_r>:
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b4:	1ccd      	adds	r5, r1, #3
 80040b6:	f025 0503 	bic.w	r5, r5, #3
 80040ba:	3508      	adds	r5, #8
 80040bc:	2d0c      	cmp	r5, #12
 80040be:	bf38      	it	cc
 80040c0:	250c      	movcc	r5, #12
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	4607      	mov	r7, r0
 80040c6:	db01      	blt.n	80040cc <_malloc_r+0x1c>
 80040c8:	42a9      	cmp	r1, r5
 80040ca:	d905      	bls.n	80040d8 <_malloc_r+0x28>
 80040cc:	230c      	movs	r3, #12
 80040ce:	2600      	movs	r6, #0
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4630      	mov	r0, r6
 80040d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041ac <_malloc_r+0xfc>
 80040dc:	f000 f868 	bl	80041b0 <__malloc_lock>
 80040e0:	f8d8 3000 	ldr.w	r3, [r8]
 80040e4:	461c      	mov	r4, r3
 80040e6:	bb5c      	cbnz	r4, 8004140 <_malloc_r+0x90>
 80040e8:	4629      	mov	r1, r5
 80040ea:	4638      	mov	r0, r7
 80040ec:	f7ff ffc0 	bl	8004070 <sbrk_aligned>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	4604      	mov	r4, r0
 80040f4:	d155      	bne.n	80041a2 <_malloc_r+0xf2>
 80040f6:	f8d8 4000 	ldr.w	r4, [r8]
 80040fa:	4626      	mov	r6, r4
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d145      	bne.n	800418c <_malloc_r+0xdc>
 8004100:	2c00      	cmp	r4, #0
 8004102:	d048      	beq.n	8004196 <_malloc_r+0xe6>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	4631      	mov	r1, r6
 8004108:	4638      	mov	r0, r7
 800410a:	eb04 0903 	add.w	r9, r4, r3
 800410e:	f001 fe7d 	bl	8005e0c <_sbrk_r>
 8004112:	4581      	cmp	r9, r0
 8004114:	d13f      	bne.n	8004196 <_malloc_r+0xe6>
 8004116:	6821      	ldr	r1, [r4, #0]
 8004118:	4638      	mov	r0, r7
 800411a:	1a6d      	subs	r5, r5, r1
 800411c:	4629      	mov	r1, r5
 800411e:	f7ff ffa7 	bl	8004070 <sbrk_aligned>
 8004122:	3001      	adds	r0, #1
 8004124:	d037      	beq.n	8004196 <_malloc_r+0xe6>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	442b      	add	r3, r5
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d038      	beq.n	80041a6 <_malloc_r+0xf6>
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	42a2      	cmp	r2, r4
 8004138:	d12b      	bne.n	8004192 <_malloc_r+0xe2>
 800413a:	2200      	movs	r2, #0
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e00f      	b.n	8004160 <_malloc_r+0xb0>
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	1b52      	subs	r2, r2, r5
 8004144:	d41f      	bmi.n	8004186 <_malloc_r+0xd6>
 8004146:	2a0b      	cmp	r2, #11
 8004148:	d917      	bls.n	800417a <_malloc_r+0xca>
 800414a:	1961      	adds	r1, r4, r5
 800414c:	42a3      	cmp	r3, r4
 800414e:	6025      	str	r5, [r4, #0]
 8004150:	bf18      	it	ne
 8004152:	6059      	strne	r1, [r3, #4]
 8004154:	6863      	ldr	r3, [r4, #4]
 8004156:	bf08      	it	eq
 8004158:	f8c8 1000 	streq.w	r1, [r8]
 800415c:	5162      	str	r2, [r4, r5]
 800415e:	604b      	str	r3, [r1, #4]
 8004160:	4638      	mov	r0, r7
 8004162:	f104 060b 	add.w	r6, r4, #11
 8004166:	f000 f829 	bl	80041bc <__malloc_unlock>
 800416a:	f026 0607 	bic.w	r6, r6, #7
 800416e:	1d23      	adds	r3, r4, #4
 8004170:	1af2      	subs	r2, r6, r3
 8004172:	d0ae      	beq.n	80040d2 <_malloc_r+0x22>
 8004174:	1b9b      	subs	r3, r3, r6
 8004176:	50a3      	str	r3, [r4, r2]
 8004178:	e7ab      	b.n	80040d2 <_malloc_r+0x22>
 800417a:	42a3      	cmp	r3, r4
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	d1dd      	bne.n	800413c <_malloc_r+0x8c>
 8004180:	f8c8 2000 	str.w	r2, [r8]
 8004184:	e7ec      	b.n	8004160 <_malloc_r+0xb0>
 8004186:	4623      	mov	r3, r4
 8004188:	6864      	ldr	r4, [r4, #4]
 800418a:	e7ac      	b.n	80040e6 <_malloc_r+0x36>
 800418c:	4634      	mov	r4, r6
 800418e:	6876      	ldr	r6, [r6, #4]
 8004190:	e7b4      	b.n	80040fc <_malloc_r+0x4c>
 8004192:	4613      	mov	r3, r2
 8004194:	e7cc      	b.n	8004130 <_malloc_r+0x80>
 8004196:	230c      	movs	r3, #12
 8004198:	4638      	mov	r0, r7
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	f000 f80e 	bl	80041bc <__malloc_unlock>
 80041a0:	e797      	b.n	80040d2 <_malloc_r+0x22>
 80041a2:	6025      	str	r5, [r4, #0]
 80041a4:	e7dc      	b.n	8004160 <_malloc_r+0xb0>
 80041a6:	605b      	str	r3, [r3, #4]
 80041a8:	deff      	udf	#255	; 0xff
 80041aa:	bf00      	nop
 80041ac:	200002d0 	.word	0x200002d0

080041b0 <__malloc_lock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <__malloc_lock+0x8>)
 80041b2:	f001 be78 	b.w	8005ea6 <__retarget_lock_acquire_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000418 	.word	0x20000418

080041bc <__malloc_unlock>:
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <__malloc_unlock+0x8>)
 80041be:	f001 be73 	b.w	8005ea8 <__retarget_lock_release_recursive>
 80041c2:	bf00      	nop
 80041c4:	20000418 	.word	0x20000418

080041c8 <sulp>:
 80041c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	460f      	mov	r7, r1
 80041ce:	4690      	mov	r8, r2
 80041d0:	f003 fc46 	bl	8007a60 <__ulp>
 80041d4:	4604      	mov	r4, r0
 80041d6:	460d      	mov	r5, r1
 80041d8:	f1b8 0f00 	cmp.w	r8, #0
 80041dc:	d011      	beq.n	8004202 <sulp+0x3a>
 80041de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80041e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dd0b      	ble.n	8004202 <sulp+0x3a>
 80041ea:	2400      	movs	r4, #0
 80041ec:	051b      	lsls	r3, r3, #20
 80041ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80041f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	f7fc f9d9 	bl	80005b0 <__aeabi_dmul>
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	4620      	mov	r0, r4
 8004204:	4629      	mov	r1, r5
 8004206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420a:	0000      	movs	r0, r0
 800420c:	0000      	movs	r0, r0
	...

08004210 <_strtod_l>:
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	b09f      	sub	sp, #124	; 0x7c
 8004216:	9217      	str	r2, [sp, #92]	; 0x5c
 8004218:	2200      	movs	r2, #0
 800421a:	4604      	mov	r4, r0
 800421c:	921a      	str	r2, [sp, #104]	; 0x68
 800421e:	460d      	mov	r5, r1
 8004220:	f04f 0800 	mov.w	r8, #0
 8004224:	f04f 0900 	mov.w	r9, #0
 8004228:	460a      	mov	r2, r1
 800422a:	9219      	str	r2, [sp, #100]	; 0x64
 800422c:	7811      	ldrb	r1, [r2, #0]
 800422e:	292b      	cmp	r1, #43	; 0x2b
 8004230:	d04a      	beq.n	80042c8 <_strtod_l+0xb8>
 8004232:	d838      	bhi.n	80042a6 <_strtod_l+0x96>
 8004234:	290d      	cmp	r1, #13
 8004236:	d832      	bhi.n	800429e <_strtod_l+0x8e>
 8004238:	2908      	cmp	r1, #8
 800423a:	d832      	bhi.n	80042a2 <_strtod_l+0x92>
 800423c:	2900      	cmp	r1, #0
 800423e:	d03b      	beq.n	80042b8 <_strtod_l+0xa8>
 8004240:	2200      	movs	r2, #0
 8004242:	920e      	str	r2, [sp, #56]	; 0x38
 8004244:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004246:	7832      	ldrb	r2, [r6, #0]
 8004248:	2a30      	cmp	r2, #48	; 0x30
 800424a:	f040 80b2 	bne.w	80043b2 <_strtod_l+0x1a2>
 800424e:	7872      	ldrb	r2, [r6, #1]
 8004250:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004254:	2a58      	cmp	r2, #88	; 0x58
 8004256:	d16e      	bne.n	8004336 <_strtod_l+0x126>
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800425c:	4620      	mov	r0, r4
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	ab1a      	add	r3, sp, #104	; 0x68
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	4a8c      	ldr	r2, [pc, #560]	; (8004498 <_strtod_l+0x288>)
 8004266:	ab1b      	add	r3, sp, #108	; 0x6c
 8004268:	a919      	add	r1, sp, #100	; 0x64
 800426a:	f002 fd89 	bl	8006d80 <__gethex>
 800426e:	f010 070f 	ands.w	r7, r0, #15
 8004272:	4605      	mov	r5, r0
 8004274:	d005      	beq.n	8004282 <_strtod_l+0x72>
 8004276:	2f06      	cmp	r7, #6
 8004278:	d128      	bne.n	80042cc <_strtod_l+0xbc>
 800427a:	2300      	movs	r3, #0
 800427c:	3601      	adds	r6, #1
 800427e:	9619      	str	r6, [sp, #100]	; 0x64
 8004280:	930e      	str	r3, [sp, #56]	; 0x38
 8004282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 85a0 	bne.w	8004dca <_strtod_l+0xbba>
 800428a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800428c:	b1cb      	cbz	r3, 80042c2 <_strtod_l+0xb2>
 800428e:	4642      	mov	r2, r8
 8004290:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	b01f      	add	sp, #124	; 0x7c
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	2920      	cmp	r1, #32
 80042a0:	d1ce      	bne.n	8004240 <_strtod_l+0x30>
 80042a2:	3201      	adds	r2, #1
 80042a4:	e7c1      	b.n	800422a <_strtod_l+0x1a>
 80042a6:	292d      	cmp	r1, #45	; 0x2d
 80042a8:	d1ca      	bne.n	8004240 <_strtod_l+0x30>
 80042aa:	2101      	movs	r1, #1
 80042ac:	910e      	str	r1, [sp, #56]	; 0x38
 80042ae:	1c51      	adds	r1, r2, #1
 80042b0:	9119      	str	r1, [sp, #100]	; 0x64
 80042b2:	7852      	ldrb	r2, [r2, #1]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d1c5      	bne.n	8004244 <_strtod_l+0x34>
 80042b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042ba:	9519      	str	r5, [sp, #100]	; 0x64
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 8582 	bne.w	8004dc6 <_strtod_l+0xbb6>
 80042c2:	4642      	mov	r2, r8
 80042c4:	464b      	mov	r3, r9
 80042c6:	e7e5      	b.n	8004294 <_strtod_l+0x84>
 80042c8:	2100      	movs	r1, #0
 80042ca:	e7ef      	b.n	80042ac <_strtod_l+0x9c>
 80042cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80042ce:	b13a      	cbz	r2, 80042e0 <_strtod_l+0xd0>
 80042d0:	2135      	movs	r1, #53	; 0x35
 80042d2:	a81c      	add	r0, sp, #112	; 0x70
 80042d4:	f003 fcb0 	bl	8007c38 <__copybits>
 80042d8:	4620      	mov	r0, r4
 80042da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042dc:	f003 f894 	bl	8007408 <_Bfree>
 80042e0:	3f01      	subs	r7, #1
 80042e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80042e4:	2f04      	cmp	r7, #4
 80042e6:	d806      	bhi.n	80042f6 <_strtod_l+0xe6>
 80042e8:	e8df f007 	tbb	[pc, r7]
 80042ec:	201d0314 	.word	0x201d0314
 80042f0:	14          	.byte	0x14
 80042f1:	00          	.byte	0x00
 80042f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80042f6:	05e9      	lsls	r1, r5, #23
 80042f8:	bf48      	it	mi
 80042fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80042fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004302:	0d1b      	lsrs	r3, r3, #20
 8004304:	051b      	lsls	r3, r3, #20
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1bb      	bne.n	8004282 <_strtod_l+0x72>
 800430a:	f001 fda1 	bl	8005e50 <__errno>
 800430e:	2322      	movs	r3, #34	; 0x22
 8004310:	6003      	str	r3, [r0, #0]
 8004312:	e7b6      	b.n	8004282 <_strtod_l+0x72>
 8004314:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004318:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800431c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004320:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004324:	e7e7      	b.n	80042f6 <_strtod_l+0xe6>
 8004326:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800449c <_strtod_l+0x28c>
 800432a:	e7e4      	b.n	80042f6 <_strtod_l+0xe6>
 800432c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004330:	f04f 38ff 	mov.w	r8, #4294967295
 8004334:	e7df      	b.n	80042f6 <_strtod_l+0xe6>
 8004336:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	9219      	str	r2, [sp, #100]	; 0x64
 800433c:	785b      	ldrb	r3, [r3, #1]
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d0f9      	beq.n	8004336 <_strtod_l+0x126>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d09d      	beq.n	8004282 <_strtod_l+0x72>
 8004346:	2301      	movs	r3, #1
 8004348:	f04f 0a00 	mov.w	sl, #0
 800434c:	220a      	movs	r2, #10
 800434e:	46d3      	mov	fp, sl
 8004350:	9305      	str	r3, [sp, #20]
 8004352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004354:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8004358:	930b      	str	r3, [sp, #44]	; 0x2c
 800435a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800435c:	7806      	ldrb	r6, [r0, #0]
 800435e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004362:	b2d9      	uxtb	r1, r3
 8004364:	2909      	cmp	r1, #9
 8004366:	d926      	bls.n	80043b6 <_strtod_l+0x1a6>
 8004368:	2201      	movs	r2, #1
 800436a:	494d      	ldr	r1, [pc, #308]	; (80044a0 <_strtod_l+0x290>)
 800436c:	f001 fc92 	bl	8005c94 <strncmp>
 8004370:	2800      	cmp	r0, #0
 8004372:	d030      	beq.n	80043d6 <_strtod_l+0x1c6>
 8004374:	2000      	movs	r0, #0
 8004376:	4632      	mov	r2, r6
 8004378:	4603      	mov	r3, r0
 800437a:	465e      	mov	r6, fp
 800437c:	9008      	str	r0, [sp, #32]
 800437e:	2a65      	cmp	r2, #101	; 0x65
 8004380:	d001      	beq.n	8004386 <_strtod_l+0x176>
 8004382:	2a45      	cmp	r2, #69	; 0x45
 8004384:	d113      	bne.n	80043ae <_strtod_l+0x19e>
 8004386:	b91e      	cbnz	r6, 8004390 <_strtod_l+0x180>
 8004388:	9a05      	ldr	r2, [sp, #20]
 800438a:	4302      	orrs	r2, r0
 800438c:	d094      	beq.n	80042b8 <_strtod_l+0xa8>
 800438e:	2600      	movs	r6, #0
 8004390:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004392:	1c6a      	adds	r2, r5, #1
 8004394:	9219      	str	r2, [sp, #100]	; 0x64
 8004396:	786a      	ldrb	r2, [r5, #1]
 8004398:	2a2b      	cmp	r2, #43	; 0x2b
 800439a:	d074      	beq.n	8004486 <_strtod_l+0x276>
 800439c:	2a2d      	cmp	r2, #45	; 0x2d
 800439e:	d078      	beq.n	8004492 <_strtod_l+0x282>
 80043a0:	f04f 0c00 	mov.w	ip, #0
 80043a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80043a8:	2909      	cmp	r1, #9
 80043aa:	d97f      	bls.n	80044ac <_strtod_l+0x29c>
 80043ac:	9519      	str	r5, [sp, #100]	; 0x64
 80043ae:	2700      	movs	r7, #0
 80043b0:	e09e      	b.n	80044f0 <_strtod_l+0x2e0>
 80043b2:	2300      	movs	r3, #0
 80043b4:	e7c8      	b.n	8004348 <_strtod_l+0x138>
 80043b6:	f1bb 0f08 	cmp.w	fp, #8
 80043ba:	bfd8      	it	le
 80043bc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80043be:	f100 0001 	add.w	r0, r0, #1
 80043c2:	bfd6      	itet	le
 80043c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80043c8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80043cc:	930a      	strle	r3, [sp, #40]	; 0x28
 80043ce:	f10b 0b01 	add.w	fp, fp, #1
 80043d2:	9019      	str	r0, [sp, #100]	; 0x64
 80043d4:	e7c1      	b.n	800435a <_strtod_l+0x14a>
 80043d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	9219      	str	r2, [sp, #100]	; 0x64
 80043dc:	785a      	ldrb	r2, [r3, #1]
 80043de:	f1bb 0f00 	cmp.w	fp, #0
 80043e2:	d037      	beq.n	8004454 <_strtod_l+0x244>
 80043e4:	465e      	mov	r6, fp
 80043e6:	9008      	str	r0, [sp, #32]
 80043e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80043ec:	2b09      	cmp	r3, #9
 80043ee:	d912      	bls.n	8004416 <_strtod_l+0x206>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e7c4      	b.n	800437e <_strtod_l+0x16e>
 80043f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043f6:	3001      	adds	r0, #1
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	9219      	str	r2, [sp, #100]	; 0x64
 80043fc:	785a      	ldrb	r2, [r3, #1]
 80043fe:	2a30      	cmp	r2, #48	; 0x30
 8004400:	d0f8      	beq.n	80043f4 <_strtod_l+0x1e4>
 8004402:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004406:	2b08      	cmp	r3, #8
 8004408:	f200 84e4 	bhi.w	8004dd4 <_strtod_l+0xbc4>
 800440c:	9008      	str	r0, [sp, #32]
 800440e:	2000      	movs	r0, #0
 8004410:	4606      	mov	r6, r0
 8004412:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004414:	930b      	str	r3, [sp, #44]	; 0x2c
 8004416:	3a30      	subs	r2, #48	; 0x30
 8004418:	f100 0301 	add.w	r3, r0, #1
 800441c:	d014      	beq.n	8004448 <_strtod_l+0x238>
 800441e:	9908      	ldr	r1, [sp, #32]
 8004420:	eb00 0c06 	add.w	ip, r0, r6
 8004424:	4419      	add	r1, r3
 8004426:	9108      	str	r1, [sp, #32]
 8004428:	4633      	mov	r3, r6
 800442a:	210a      	movs	r1, #10
 800442c:	4563      	cmp	r3, ip
 800442e:	d113      	bne.n	8004458 <_strtod_l+0x248>
 8004430:	1833      	adds	r3, r6, r0
 8004432:	2b08      	cmp	r3, #8
 8004434:	f106 0601 	add.w	r6, r6, #1
 8004438:	4406      	add	r6, r0
 800443a:	dc1a      	bgt.n	8004472 <_strtod_l+0x262>
 800443c:	230a      	movs	r3, #10
 800443e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004440:	fb03 2301 	mla	r3, r3, r1, r2
 8004444:	930a      	str	r3, [sp, #40]	; 0x28
 8004446:	2300      	movs	r3, #0
 8004448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800444a:	4618      	mov	r0, r3
 800444c:	1c51      	adds	r1, r2, #1
 800444e:	9119      	str	r1, [sp, #100]	; 0x64
 8004450:	7852      	ldrb	r2, [r2, #1]
 8004452:	e7c9      	b.n	80043e8 <_strtod_l+0x1d8>
 8004454:	4658      	mov	r0, fp
 8004456:	e7d2      	b.n	80043fe <_strtod_l+0x1ee>
 8004458:	2b08      	cmp	r3, #8
 800445a:	f103 0301 	add.w	r3, r3, #1
 800445e:	dc03      	bgt.n	8004468 <_strtod_l+0x258>
 8004460:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004462:	434f      	muls	r7, r1
 8004464:	970a      	str	r7, [sp, #40]	; 0x28
 8004466:	e7e1      	b.n	800442c <_strtod_l+0x21c>
 8004468:	2b10      	cmp	r3, #16
 800446a:	bfd8      	it	le
 800446c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004470:	e7dc      	b.n	800442c <_strtod_l+0x21c>
 8004472:	2e10      	cmp	r6, #16
 8004474:	bfdc      	itt	le
 8004476:	230a      	movle	r3, #10
 8004478:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800447c:	e7e3      	b.n	8004446 <_strtod_l+0x236>
 800447e:	2300      	movs	r3, #0
 8004480:	9308      	str	r3, [sp, #32]
 8004482:	2301      	movs	r3, #1
 8004484:	e780      	b.n	8004388 <_strtod_l+0x178>
 8004486:	f04f 0c00 	mov.w	ip, #0
 800448a:	1caa      	adds	r2, r5, #2
 800448c:	9219      	str	r2, [sp, #100]	; 0x64
 800448e:	78aa      	ldrb	r2, [r5, #2]
 8004490:	e788      	b.n	80043a4 <_strtod_l+0x194>
 8004492:	f04f 0c01 	mov.w	ip, #1
 8004496:	e7f8      	b.n	800448a <_strtod_l+0x27a>
 8004498:	080083a0 	.word	0x080083a0
 800449c:	7ff00000 	.word	0x7ff00000
 80044a0:	0800839e 	.word	0x0800839e
 80044a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044a6:	1c51      	adds	r1, r2, #1
 80044a8:	9119      	str	r1, [sp, #100]	; 0x64
 80044aa:	7852      	ldrb	r2, [r2, #1]
 80044ac:	2a30      	cmp	r2, #48	; 0x30
 80044ae:	d0f9      	beq.n	80044a4 <_strtod_l+0x294>
 80044b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80044b4:	2908      	cmp	r1, #8
 80044b6:	f63f af7a 	bhi.w	80043ae <_strtod_l+0x19e>
 80044ba:	3a30      	subs	r2, #48	; 0x30
 80044bc:	9209      	str	r2, [sp, #36]	; 0x24
 80044be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044c0:	920c      	str	r2, [sp, #48]	; 0x30
 80044c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044c4:	1c57      	adds	r7, r2, #1
 80044c6:	9719      	str	r7, [sp, #100]	; 0x64
 80044c8:	7852      	ldrb	r2, [r2, #1]
 80044ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80044ce:	f1be 0f09 	cmp.w	lr, #9
 80044d2:	d938      	bls.n	8004546 <_strtod_l+0x336>
 80044d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044d6:	1a7f      	subs	r7, r7, r1
 80044d8:	2f08      	cmp	r7, #8
 80044da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80044de:	dc03      	bgt.n	80044e8 <_strtod_l+0x2d8>
 80044e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044e2:	428f      	cmp	r7, r1
 80044e4:	bfa8      	it	ge
 80044e6:	460f      	movge	r7, r1
 80044e8:	f1bc 0f00 	cmp.w	ip, #0
 80044ec:	d000      	beq.n	80044f0 <_strtod_l+0x2e0>
 80044ee:	427f      	negs	r7, r7
 80044f0:	2e00      	cmp	r6, #0
 80044f2:	d14f      	bne.n	8004594 <_strtod_l+0x384>
 80044f4:	9905      	ldr	r1, [sp, #20]
 80044f6:	4301      	orrs	r1, r0
 80044f8:	f47f aec3 	bne.w	8004282 <_strtod_l+0x72>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f47f aedb 	bne.w	80042b8 <_strtod_l+0xa8>
 8004502:	2a69      	cmp	r2, #105	; 0x69
 8004504:	d029      	beq.n	800455a <_strtod_l+0x34a>
 8004506:	dc26      	bgt.n	8004556 <_strtod_l+0x346>
 8004508:	2a49      	cmp	r2, #73	; 0x49
 800450a:	d026      	beq.n	800455a <_strtod_l+0x34a>
 800450c:	2a4e      	cmp	r2, #78	; 0x4e
 800450e:	f47f aed3 	bne.w	80042b8 <_strtod_l+0xa8>
 8004512:	499a      	ldr	r1, [pc, #616]	; (800477c <_strtod_l+0x56c>)
 8004514:	a819      	add	r0, sp, #100	; 0x64
 8004516:	f002 fe75 	bl	8007204 <__match>
 800451a:	2800      	cmp	r0, #0
 800451c:	f43f aecc 	beq.w	80042b8 <_strtod_l+0xa8>
 8004520:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b28      	cmp	r3, #40	; 0x28
 8004526:	d12f      	bne.n	8004588 <_strtod_l+0x378>
 8004528:	4995      	ldr	r1, [pc, #596]	; (8004780 <_strtod_l+0x570>)
 800452a:	aa1c      	add	r2, sp, #112	; 0x70
 800452c:	a819      	add	r0, sp, #100	; 0x64
 800452e:	f002 fe7d 	bl	800722c <__hexnan>
 8004532:	2805      	cmp	r0, #5
 8004534:	d128      	bne.n	8004588 <_strtod_l+0x378>
 8004536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004538:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800453c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004540:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004544:	e69d      	b.n	8004282 <_strtod_l+0x72>
 8004546:	210a      	movs	r1, #10
 8004548:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800454a:	fb01 2107 	mla	r1, r1, r7, r2
 800454e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004552:	9209      	str	r2, [sp, #36]	; 0x24
 8004554:	e7b5      	b.n	80044c2 <_strtod_l+0x2b2>
 8004556:	2a6e      	cmp	r2, #110	; 0x6e
 8004558:	e7d9      	b.n	800450e <_strtod_l+0x2fe>
 800455a:	498a      	ldr	r1, [pc, #552]	; (8004784 <_strtod_l+0x574>)
 800455c:	a819      	add	r0, sp, #100	; 0x64
 800455e:	f002 fe51 	bl	8007204 <__match>
 8004562:	2800      	cmp	r0, #0
 8004564:	f43f aea8 	beq.w	80042b8 <_strtod_l+0xa8>
 8004568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800456a:	4987      	ldr	r1, [pc, #540]	; (8004788 <_strtod_l+0x578>)
 800456c:	3b01      	subs	r3, #1
 800456e:	a819      	add	r0, sp, #100	; 0x64
 8004570:	9319      	str	r3, [sp, #100]	; 0x64
 8004572:	f002 fe47 	bl	8007204 <__match>
 8004576:	b910      	cbnz	r0, 800457e <_strtod_l+0x36e>
 8004578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800457a:	3301      	adds	r3, #1
 800457c:	9319      	str	r3, [sp, #100]	; 0x64
 800457e:	f04f 0800 	mov.w	r8, #0
 8004582:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800478c <_strtod_l+0x57c>
 8004586:	e67c      	b.n	8004282 <_strtod_l+0x72>
 8004588:	4881      	ldr	r0, [pc, #516]	; (8004790 <_strtod_l+0x580>)
 800458a:	f001 fcb3 	bl	8005ef4 <nan>
 800458e:	4680      	mov	r8, r0
 8004590:	4689      	mov	r9, r1
 8004592:	e676      	b.n	8004282 <_strtod_l+0x72>
 8004594:	9b08      	ldr	r3, [sp, #32]
 8004596:	f1bb 0f00 	cmp.w	fp, #0
 800459a:	bf08      	it	eq
 800459c:	46b3      	moveq	fp, r6
 800459e:	1afb      	subs	r3, r7, r3
 80045a0:	2e10      	cmp	r6, #16
 80045a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80045a4:	4635      	mov	r5, r6
 80045a6:	9309      	str	r3, [sp, #36]	; 0x24
 80045a8:	bfa8      	it	ge
 80045aa:	2510      	movge	r5, #16
 80045ac:	f7fb ff86 	bl	80004bc <__aeabi_ui2d>
 80045b0:	2e09      	cmp	r6, #9
 80045b2:	4680      	mov	r8, r0
 80045b4:	4689      	mov	r9, r1
 80045b6:	dd13      	ble.n	80045e0 <_strtod_l+0x3d0>
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <_strtod_l+0x584>)
 80045ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80045be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80045c2:	f7fb fff5 	bl	80005b0 <__aeabi_dmul>
 80045c6:	4680      	mov	r8, r0
 80045c8:	4650      	mov	r0, sl
 80045ca:	4689      	mov	r9, r1
 80045cc:	f7fb ff76 	bl	80004bc <__aeabi_ui2d>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f7fb fe34 	bl	8000244 <__adddf3>
 80045dc:	4680      	mov	r8, r0
 80045de:	4689      	mov	r9, r1
 80045e0:	2e0f      	cmp	r6, #15
 80045e2:	dc36      	bgt.n	8004652 <_strtod_l+0x442>
 80045e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f43f ae4b 	beq.w	8004282 <_strtod_l+0x72>
 80045ec:	dd22      	ble.n	8004634 <_strtod_l+0x424>
 80045ee:	2b16      	cmp	r3, #22
 80045f0:	dc09      	bgt.n	8004606 <_strtod_l+0x3f6>
 80045f2:	4968      	ldr	r1, [pc, #416]	; (8004794 <_strtod_l+0x584>)
 80045f4:	4642      	mov	r2, r8
 80045f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045fa:	464b      	mov	r3, r9
 80045fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004600:	f7fb ffd6 	bl	80005b0 <__aeabi_dmul>
 8004604:	e7c3      	b.n	800458e <_strtod_l+0x37e>
 8004606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004608:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800460c:	4293      	cmp	r3, r2
 800460e:	db20      	blt.n	8004652 <_strtod_l+0x442>
 8004610:	4c60      	ldr	r4, [pc, #384]	; (8004794 <_strtod_l+0x584>)
 8004612:	f1c6 060f 	rsb	r6, r6, #15
 8004616:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800461a:	4642      	mov	r2, r8
 800461c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004620:	464b      	mov	r3, r9
 8004622:	f7fb ffc5 	bl	80005b0 <__aeabi_dmul>
 8004626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004628:	1b9e      	subs	r6, r3, r6
 800462a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800462e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004632:	e7e5      	b.n	8004600 <_strtod_l+0x3f0>
 8004634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004636:	3316      	adds	r3, #22
 8004638:	db0b      	blt.n	8004652 <_strtod_l+0x442>
 800463a:	9b08      	ldr	r3, [sp, #32]
 800463c:	4640      	mov	r0, r8
 800463e:	1bdf      	subs	r7, r3, r7
 8004640:	4b54      	ldr	r3, [pc, #336]	; (8004794 <_strtod_l+0x584>)
 8004642:	4649      	mov	r1, r9
 8004644:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800464c:	f7fc f8da 	bl	8000804 <__aeabi_ddiv>
 8004650:	e79d      	b.n	800458e <_strtod_l+0x37e>
 8004652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004654:	1b75      	subs	r5, r6, r5
 8004656:	441d      	add	r5, r3
 8004658:	2d00      	cmp	r5, #0
 800465a:	dd70      	ble.n	800473e <_strtod_l+0x52e>
 800465c:	f015 030f 	ands.w	r3, r5, #15
 8004660:	d00a      	beq.n	8004678 <_strtod_l+0x468>
 8004662:	494c      	ldr	r1, [pc, #304]	; (8004794 <_strtod_l+0x584>)
 8004664:	4642      	mov	r2, r8
 8004666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800466a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800466e:	464b      	mov	r3, r9
 8004670:	f7fb ff9e 	bl	80005b0 <__aeabi_dmul>
 8004674:	4680      	mov	r8, r0
 8004676:	4689      	mov	r9, r1
 8004678:	f035 050f 	bics.w	r5, r5, #15
 800467c:	d04d      	beq.n	800471a <_strtod_l+0x50a>
 800467e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004682:	dd22      	ble.n	80046ca <_strtod_l+0x4ba>
 8004684:	2600      	movs	r6, #0
 8004686:	46b3      	mov	fp, r6
 8004688:	960b      	str	r6, [sp, #44]	; 0x2c
 800468a:	9608      	str	r6, [sp, #32]
 800468c:	2322      	movs	r3, #34	; 0x22
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800478c <_strtod_l+0x57c>
 8004696:	6023      	str	r3, [r4, #0]
 8004698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	f43f adf1 	beq.w	8004282 <_strtod_l+0x72>
 80046a0:	4620      	mov	r0, r4
 80046a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046a4:	f002 feb0 	bl	8007408 <_Bfree>
 80046a8:	4620      	mov	r0, r4
 80046aa:	9908      	ldr	r1, [sp, #32]
 80046ac:	f002 feac 	bl	8007408 <_Bfree>
 80046b0:	4659      	mov	r1, fp
 80046b2:	4620      	mov	r0, r4
 80046b4:	f002 fea8 	bl	8007408 <_Bfree>
 80046b8:	4620      	mov	r0, r4
 80046ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046bc:	f002 fea4 	bl	8007408 <_Bfree>
 80046c0:	4631      	mov	r1, r6
 80046c2:	4620      	mov	r0, r4
 80046c4:	f002 fea0 	bl	8007408 <_Bfree>
 80046c8:	e5db      	b.n	8004282 <_strtod_l+0x72>
 80046ca:	4b33      	ldr	r3, [pc, #204]	; (8004798 <_strtod_l+0x588>)
 80046cc:	4640      	mov	r0, r8
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	2300      	movs	r3, #0
 80046d2:	4649      	mov	r1, r9
 80046d4:	469a      	mov	sl, r3
 80046d6:	112d      	asrs	r5, r5, #4
 80046d8:	2d01      	cmp	r5, #1
 80046da:	dc21      	bgt.n	8004720 <_strtod_l+0x510>
 80046dc:	b10b      	cbz	r3, 80046e2 <_strtod_l+0x4d2>
 80046de:	4680      	mov	r8, r0
 80046e0:	4689      	mov	r9, r1
 80046e2:	492d      	ldr	r1, [pc, #180]	; (8004798 <_strtod_l+0x588>)
 80046e4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80046e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80046ec:	4642      	mov	r2, r8
 80046ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046f2:	464b      	mov	r3, r9
 80046f4:	f7fb ff5c 	bl	80005b0 <__aeabi_dmul>
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <_strtod_l+0x57c>)
 80046fa:	460a      	mov	r2, r1
 80046fc:	400b      	ands	r3, r1
 80046fe:	4927      	ldr	r1, [pc, #156]	; (800479c <_strtod_l+0x58c>)
 8004700:	4680      	mov	r8, r0
 8004702:	428b      	cmp	r3, r1
 8004704:	d8be      	bhi.n	8004684 <_strtod_l+0x474>
 8004706:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800470a:	428b      	cmp	r3, r1
 800470c:	bf86      	itte	hi
 800470e:	f04f 38ff 	movhi.w	r8, #4294967295
 8004712:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80047a0 <_strtod_l+0x590>
 8004716:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800471a:	2300      	movs	r3, #0
 800471c:	9305      	str	r3, [sp, #20]
 800471e:	e07b      	b.n	8004818 <_strtod_l+0x608>
 8004720:	07ea      	lsls	r2, r5, #31
 8004722:	d505      	bpl.n	8004730 <_strtod_l+0x520>
 8004724:	9b05      	ldr	r3, [sp, #20]
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb ff41 	bl	80005b0 <__aeabi_dmul>
 800472e:	2301      	movs	r3, #1
 8004730:	9a05      	ldr	r2, [sp, #20]
 8004732:	f10a 0a01 	add.w	sl, sl, #1
 8004736:	3208      	adds	r2, #8
 8004738:	106d      	asrs	r5, r5, #1
 800473a:	9205      	str	r2, [sp, #20]
 800473c:	e7cc      	b.n	80046d8 <_strtod_l+0x4c8>
 800473e:	d0ec      	beq.n	800471a <_strtod_l+0x50a>
 8004740:	426d      	negs	r5, r5
 8004742:	f015 020f 	ands.w	r2, r5, #15
 8004746:	d00a      	beq.n	800475e <_strtod_l+0x54e>
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <_strtod_l+0x584>)
 800474a:	4640      	mov	r0, r8
 800474c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004750:	4649      	mov	r1, r9
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fc f855 	bl	8000804 <__aeabi_ddiv>
 800475a:	4680      	mov	r8, r0
 800475c:	4689      	mov	r9, r1
 800475e:	112d      	asrs	r5, r5, #4
 8004760:	d0db      	beq.n	800471a <_strtod_l+0x50a>
 8004762:	2d1f      	cmp	r5, #31
 8004764:	dd1e      	ble.n	80047a4 <_strtod_l+0x594>
 8004766:	2600      	movs	r6, #0
 8004768:	46b3      	mov	fp, r6
 800476a:	960b      	str	r6, [sp, #44]	; 0x2c
 800476c:	9608      	str	r6, [sp, #32]
 800476e:	2322      	movs	r3, #34	; 0x22
 8004770:	f04f 0800 	mov.w	r8, #0
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	e78d      	b.n	8004698 <_strtod_l+0x488>
 800477c:	080084fe 	.word	0x080084fe
 8004780:	080083b4 	.word	0x080083b4
 8004784:	080084f6 	.word	0x080084f6
 8004788:	080085dd 	.word	0x080085dd
 800478c:	7ff00000 	.word	0x7ff00000
 8004790:	080085d9 	.word	0x080085d9
 8004794:	08008738 	.word	0x08008738
 8004798:	08008710 	.word	0x08008710
 800479c:	7ca00000 	.word	0x7ca00000
 80047a0:	7fefffff 	.word	0x7fefffff
 80047a4:	f015 0310 	ands.w	r3, r5, #16
 80047a8:	bf18      	it	ne
 80047aa:	236a      	movne	r3, #106	; 0x6a
 80047ac:	4640      	mov	r0, r8
 80047ae:	9305      	str	r3, [sp, #20]
 80047b0:	4649      	mov	r1, r9
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8004a80 <_strtod_l+0x870>
 80047b8:	07ea      	lsls	r2, r5, #31
 80047ba:	d504      	bpl.n	80047c6 <_strtod_l+0x5b6>
 80047bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80047c0:	f7fb fef6 	bl	80005b0 <__aeabi_dmul>
 80047c4:	2301      	movs	r3, #1
 80047c6:	106d      	asrs	r5, r5, #1
 80047c8:	f10a 0a08 	add.w	sl, sl, #8
 80047cc:	d1f4      	bne.n	80047b8 <_strtod_l+0x5a8>
 80047ce:	b10b      	cbz	r3, 80047d4 <_strtod_l+0x5c4>
 80047d0:	4680      	mov	r8, r0
 80047d2:	4689      	mov	r9, r1
 80047d4:	9b05      	ldr	r3, [sp, #20]
 80047d6:	b1bb      	cbz	r3, 8004808 <_strtod_l+0x5f8>
 80047d8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80047dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	4649      	mov	r1, r9
 80047e4:	dd10      	ble.n	8004808 <_strtod_l+0x5f8>
 80047e6:	2b1f      	cmp	r3, #31
 80047e8:	f340 8128 	ble.w	8004a3c <_strtod_l+0x82c>
 80047ec:	2b34      	cmp	r3, #52	; 0x34
 80047ee:	bfd8      	it	le
 80047f0:	f04f 33ff 	movle.w	r3, #4294967295
 80047f4:	f04f 0800 	mov.w	r8, #0
 80047f8:	bfcf      	iteee	gt
 80047fa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80047fe:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004802:	4093      	lslle	r3, r2
 8004804:	ea03 0901 	andle.w	r9, r3, r1
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	4640      	mov	r0, r8
 800480e:	4649      	mov	r1, r9
 8004810:	f7fc f936 	bl	8000a80 <__aeabi_dcmpeq>
 8004814:	2800      	cmp	r0, #0
 8004816:	d1a6      	bne.n	8004766 <_strtod_l+0x556>
 8004818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800481a:	465a      	mov	r2, fp
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4620      	mov	r0, r4
 8004820:	4633      	mov	r3, r6
 8004822:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004824:	f002 fe58 	bl	80074d8 <__s2b>
 8004828:	900b      	str	r0, [sp, #44]	; 0x2c
 800482a:	2800      	cmp	r0, #0
 800482c:	f43f af2a 	beq.w	8004684 <_strtod_l+0x474>
 8004830:	2600      	movs	r6, #0
 8004832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004834:	9b08      	ldr	r3, [sp, #32]
 8004836:	2a00      	cmp	r2, #0
 8004838:	eba3 0307 	sub.w	r3, r3, r7
 800483c:	bfa8      	it	ge
 800483e:	2300      	movge	r3, #0
 8004840:	46b3      	mov	fp, r6
 8004842:	9312      	str	r3, [sp, #72]	; 0x48
 8004844:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004848:	9316      	str	r3, [sp, #88]	; 0x58
 800484a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484c:	4620      	mov	r0, r4
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	f002 fd9a 	bl	8007388 <_Balloc>
 8004854:	9008      	str	r0, [sp, #32]
 8004856:	2800      	cmp	r0, #0
 8004858:	f43f af18 	beq.w	800468c <_strtod_l+0x47c>
 800485c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800485e:	300c      	adds	r0, #12
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	f103 010c 	add.w	r1, r3, #12
 8004866:	3202      	adds	r2, #2
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	f001 fb34 	bl	8005ed6 <memcpy>
 800486e:	ab1c      	add	r3, sp, #112	; 0x70
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	ab1b      	add	r3, sp, #108	; 0x6c
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	4620      	mov	r0, r4
 800487c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8004880:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004884:	f003 f954 	bl	8007b30 <__d2b>
 8004888:	901a      	str	r0, [sp, #104]	; 0x68
 800488a:	2800      	cmp	r0, #0
 800488c:	f43f aefe 	beq.w	800468c <_strtod_l+0x47c>
 8004890:	2101      	movs	r1, #1
 8004892:	4620      	mov	r0, r4
 8004894:	f002 feb8 	bl	8007608 <__i2b>
 8004898:	4683      	mov	fp, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	f43f aef6 	beq.w	800468c <_strtod_l+0x47c>
 80048a0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80048a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	bfab      	itete	ge
 80048a8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80048aa:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80048ac:	eb07 0a03 	addge.w	sl, r7, r3
 80048b0:	1bdd      	sublt	r5, r3, r7
 80048b2:	9b05      	ldr	r3, [sp, #20]
 80048b4:	bfa8      	it	ge
 80048b6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80048b8:	eba7 0703 	sub.w	r7, r7, r3
 80048bc:	4417      	add	r7, r2
 80048be:	4b71      	ldr	r3, [pc, #452]	; (8004a84 <_strtod_l+0x874>)
 80048c0:	f107 37ff 	add.w	r7, r7, #4294967295
 80048c4:	bfb8      	it	lt
 80048c6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80048ca:	429f      	cmp	r7, r3
 80048cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048d0:	f280 80c7 	bge.w	8004a62 <_strtod_l+0x852>
 80048d4:	1bdb      	subs	r3, r3, r7
 80048d6:	2b1f      	cmp	r3, #31
 80048d8:	f04f 0101 	mov.w	r1, #1
 80048dc:	eba2 0203 	sub.w	r2, r2, r3
 80048e0:	f300 80b3 	bgt.w	8004a4a <_strtod_l+0x83a>
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80048ea:	2300      	movs	r3, #0
 80048ec:	9310      	str	r3, [sp, #64]	; 0x40
 80048ee:	eb0a 0702 	add.w	r7, sl, r2
 80048f2:	9b05      	ldr	r3, [sp, #20]
 80048f4:	45ba      	cmp	sl, r7
 80048f6:	4415      	add	r5, r2
 80048f8:	441d      	add	r5, r3
 80048fa:	4653      	mov	r3, sl
 80048fc:	bfa8      	it	ge
 80048fe:	463b      	movge	r3, r7
 8004900:	42ab      	cmp	r3, r5
 8004902:	bfa8      	it	ge
 8004904:	462b      	movge	r3, r5
 8004906:	2b00      	cmp	r3, #0
 8004908:	bfc2      	ittt	gt
 800490a:	1aff      	subgt	r7, r7, r3
 800490c:	1aed      	subgt	r5, r5, r3
 800490e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8004912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004914:	2b00      	cmp	r3, #0
 8004916:	dd17      	ble.n	8004948 <_strtod_l+0x738>
 8004918:	4659      	mov	r1, fp
 800491a:	461a      	mov	r2, r3
 800491c:	4620      	mov	r0, r4
 800491e:	f002 ff31 	bl	8007784 <__pow5mult>
 8004922:	4683      	mov	fp, r0
 8004924:	2800      	cmp	r0, #0
 8004926:	f43f aeb1 	beq.w	800468c <_strtod_l+0x47c>
 800492a:	4601      	mov	r1, r0
 800492c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800492e:	4620      	mov	r0, r4
 8004930:	f002 fe80 	bl	8007634 <__multiply>
 8004934:	900a      	str	r0, [sp, #40]	; 0x28
 8004936:	2800      	cmp	r0, #0
 8004938:	f43f aea8 	beq.w	800468c <_strtod_l+0x47c>
 800493c:	4620      	mov	r0, r4
 800493e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004940:	f002 fd62 	bl	8007408 <_Bfree>
 8004944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004946:	931a      	str	r3, [sp, #104]	; 0x68
 8004948:	2f00      	cmp	r7, #0
 800494a:	f300 808f 	bgt.w	8004a6c <_strtod_l+0x85c>
 800494e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	dd08      	ble.n	8004966 <_strtod_l+0x756>
 8004954:	4620      	mov	r0, r4
 8004956:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004958:	9908      	ldr	r1, [sp, #32]
 800495a:	f002 ff13 	bl	8007784 <__pow5mult>
 800495e:	9008      	str	r0, [sp, #32]
 8004960:	2800      	cmp	r0, #0
 8004962:	f43f ae93 	beq.w	800468c <_strtod_l+0x47c>
 8004966:	2d00      	cmp	r5, #0
 8004968:	dd08      	ble.n	800497c <_strtod_l+0x76c>
 800496a:	462a      	mov	r2, r5
 800496c:	4620      	mov	r0, r4
 800496e:	9908      	ldr	r1, [sp, #32]
 8004970:	f002 ff62 	bl	8007838 <__lshift>
 8004974:	9008      	str	r0, [sp, #32]
 8004976:	2800      	cmp	r0, #0
 8004978:	f43f ae88 	beq.w	800468c <_strtod_l+0x47c>
 800497c:	f1ba 0f00 	cmp.w	sl, #0
 8004980:	dd08      	ble.n	8004994 <_strtod_l+0x784>
 8004982:	4659      	mov	r1, fp
 8004984:	4652      	mov	r2, sl
 8004986:	4620      	mov	r0, r4
 8004988:	f002 ff56 	bl	8007838 <__lshift>
 800498c:	4683      	mov	fp, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	f43f ae7c 	beq.w	800468c <_strtod_l+0x47c>
 8004994:	4620      	mov	r0, r4
 8004996:	9a08      	ldr	r2, [sp, #32]
 8004998:	991a      	ldr	r1, [sp, #104]	; 0x68
 800499a:	f002 ffd5 	bl	8007948 <__mdiff>
 800499e:	4606      	mov	r6, r0
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f43f ae73 	beq.w	800468c <_strtod_l+0x47c>
 80049a6:	2500      	movs	r5, #0
 80049a8:	68c3      	ldr	r3, [r0, #12]
 80049aa:	4659      	mov	r1, fp
 80049ac:	60c5      	str	r5, [r0, #12]
 80049ae:	930a      	str	r3, [sp, #40]	; 0x28
 80049b0:	f002 ffae 	bl	8007910 <__mcmp>
 80049b4:	42a8      	cmp	r0, r5
 80049b6:	da6b      	bge.n	8004a90 <_strtod_l+0x880>
 80049b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ba:	ea53 0308 	orrs.w	r3, r3, r8
 80049be:	f040 808f 	bne.w	8004ae0 <_strtod_l+0x8d0>
 80049c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 808a 	bne.w	8004ae0 <_strtod_l+0x8d0>
 80049cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049d0:	0d1b      	lsrs	r3, r3, #20
 80049d2:	051b      	lsls	r3, r3, #20
 80049d4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049d8:	f240 8082 	bls.w	8004ae0 <_strtod_l+0x8d0>
 80049dc:	6973      	ldr	r3, [r6, #20]
 80049de:	b913      	cbnz	r3, 80049e6 <_strtod_l+0x7d6>
 80049e0:	6933      	ldr	r3, [r6, #16]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	dd7c      	ble.n	8004ae0 <_strtod_l+0x8d0>
 80049e6:	4631      	mov	r1, r6
 80049e8:	2201      	movs	r2, #1
 80049ea:	4620      	mov	r0, r4
 80049ec:	f002 ff24 	bl	8007838 <__lshift>
 80049f0:	4659      	mov	r1, fp
 80049f2:	4606      	mov	r6, r0
 80049f4:	f002 ff8c 	bl	8007910 <__mcmp>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	dd71      	ble.n	8004ae0 <_strtod_l+0x8d0>
 80049fc:	9905      	ldr	r1, [sp, #20]
 80049fe:	464b      	mov	r3, r9
 8004a00:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <_strtod_l+0x878>)
 8004a02:	2900      	cmp	r1, #0
 8004a04:	f000 808d 	beq.w	8004b22 <_strtod_l+0x912>
 8004a08:	ea02 0109 	and.w	r1, r2, r9
 8004a0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a10:	f300 8087 	bgt.w	8004b22 <_strtod_l+0x912>
 8004a14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a18:	f77f aea9 	ble.w	800476e <_strtod_l+0x55e>
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <_strtod_l+0x87c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7fb fdc4 	bl	80005b0 <__aeabi_dmul>
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <_strtod_l+0x878>)
 8004a2a:	4680      	mov	r8, r0
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	4689      	mov	r9, r1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f47f ae35 	bne.w	80046a0 <_strtod_l+0x490>
 8004a36:	2322      	movs	r3, #34	; 0x22
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	e631      	b.n	80046a0 <_strtod_l+0x490>
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	ea03 0808 	and.w	r8, r3, r8
 8004a48:	e6de      	b.n	8004808 <_strtod_l+0x5f8>
 8004a4a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8004a4e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8004a52:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8004a56:	37e2      	adds	r7, #226	; 0xe2
 8004a58:	fa01 f307 	lsl.w	r3, r1, r7
 8004a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8004a5e:	9113      	str	r1, [sp, #76]	; 0x4c
 8004a60:	e745      	b.n	80048ee <_strtod_l+0x6de>
 8004a62:	2300      	movs	r3, #0
 8004a64:	9310      	str	r3, [sp, #64]	; 0x40
 8004a66:	2301      	movs	r3, #1
 8004a68:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a6a:	e740      	b.n	80048ee <_strtod_l+0x6de>
 8004a6c:	463a      	mov	r2, r7
 8004a6e:	4620      	mov	r0, r4
 8004a70:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a72:	f002 fee1 	bl	8007838 <__lshift>
 8004a76:	901a      	str	r0, [sp, #104]	; 0x68
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f47f af68 	bne.w	800494e <_strtod_l+0x73e>
 8004a7e:	e605      	b.n	800468c <_strtod_l+0x47c>
 8004a80:	080083c8 	.word	0x080083c8
 8004a84:	fffffc02 	.word	0xfffffc02
 8004a88:	7ff00000 	.word	0x7ff00000
 8004a8c:	39500000 	.word	0x39500000
 8004a90:	46ca      	mov	sl, r9
 8004a92:	d165      	bne.n	8004b60 <_strtod_l+0x950>
 8004a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a9a:	b352      	cbz	r2, 8004af2 <_strtod_l+0x8e2>
 8004a9c:	4a9e      	ldr	r2, [pc, #632]	; (8004d18 <_strtod_l+0xb08>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d12a      	bne.n	8004af8 <_strtod_l+0x8e8>
 8004aa2:	9b05      	ldr	r3, [sp, #20]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	b1fb      	cbz	r3, 8004ae8 <_strtod_l+0x8d8>
 8004aa8:	4b9c      	ldr	r3, [pc, #624]	; (8004d1c <_strtod_l+0xb0c>)
 8004aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004aae:	ea09 0303 	and.w	r3, r9, r3
 8004ab2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ab6:	d81a      	bhi.n	8004aee <_strtod_l+0x8de>
 8004ab8:	0d1b      	lsrs	r3, r3, #20
 8004aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d118      	bne.n	8004af8 <_strtod_l+0x8e8>
 8004ac6:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <_strtod_l+0xb10>)
 8004ac8:	459a      	cmp	sl, r3
 8004aca:	d102      	bne.n	8004ad2 <_strtod_l+0x8c2>
 8004acc:	3101      	adds	r1, #1
 8004ace:	f43f addd 	beq.w	800468c <_strtod_l+0x47c>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	4b91      	ldr	r3, [pc, #580]	; (8004d1c <_strtod_l+0xb0c>)
 8004ad8:	ea0a 0303 	and.w	r3, sl, r3
 8004adc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8004ae0:	9b05      	ldr	r3, [sp, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d19a      	bne.n	8004a1c <_strtod_l+0x80c>
 8004ae6:	e5db      	b.n	80046a0 <_strtod_l+0x490>
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	e7e9      	b.n	8004ac2 <_strtod_l+0x8b2>
 8004aee:	4613      	mov	r3, r2
 8004af0:	e7e7      	b.n	8004ac2 <_strtod_l+0x8b2>
 8004af2:	ea53 0308 	orrs.w	r3, r3, r8
 8004af6:	d081      	beq.n	80049fc <_strtod_l+0x7ec>
 8004af8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004afa:	b1e3      	cbz	r3, 8004b36 <_strtod_l+0x926>
 8004afc:	ea13 0f0a 	tst.w	r3, sl
 8004b00:	d0ee      	beq.n	8004ae0 <_strtod_l+0x8d0>
 8004b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	9a05      	ldr	r2, [sp, #20]
 8004b0a:	b1c3      	cbz	r3, 8004b3e <_strtod_l+0x92e>
 8004b0c:	f7ff fb5c 	bl	80041c8 <sulp>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b18:	f7fb fb94 	bl	8000244 <__adddf3>
 8004b1c:	4680      	mov	r8, r0
 8004b1e:	4689      	mov	r9, r1
 8004b20:	e7de      	b.n	8004ae0 <_strtod_l+0x8d0>
 8004b22:	4013      	ands	r3, r2
 8004b24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004b2c:	f04f 38ff 	mov.w	r8, #4294967295
 8004b30:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004b34:	e7d4      	b.n	8004ae0 <_strtod_l+0x8d0>
 8004b36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b38:	ea13 0f08 	tst.w	r3, r8
 8004b3c:	e7e0      	b.n	8004b00 <_strtod_l+0x8f0>
 8004b3e:	f7ff fb43 	bl	80041c8 <sulp>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b4a:	f7fb fb79 	bl	8000240 <__aeabi_dsub>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2300      	movs	r3, #0
 8004b52:	4680      	mov	r8, r0
 8004b54:	4689      	mov	r9, r1
 8004b56:	f7fb ff93 	bl	8000a80 <__aeabi_dcmpeq>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d0c0      	beq.n	8004ae0 <_strtod_l+0x8d0>
 8004b5e:	e606      	b.n	800476e <_strtod_l+0x55e>
 8004b60:	4659      	mov	r1, fp
 8004b62:	4630      	mov	r0, r6
 8004b64:	f003 f83a 	bl	8007bdc <__ratio>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004b70:	2200      	movs	r2, #0
 8004b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b76:	f7fb ff97 	bl	8000aa8 <__aeabi_dcmple>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d06f      	beq.n	8004c5e <_strtod_l+0xa4e>
 8004b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d17c      	bne.n	8004c7e <_strtod_l+0xa6e>
 8004b84:	f1b8 0f00 	cmp.w	r8, #0
 8004b88:	d159      	bne.n	8004c3e <_strtod_l+0xa2e>
 8004b8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d17b      	bne.n	8004c8a <_strtod_l+0xa7a>
 8004b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b96:	2200      	movs	r2, #0
 8004b98:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <_strtod_l+0xb14>)
 8004b9a:	f7fb ff7b 	bl	8000a94 <__aeabi_dcmplt>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d15a      	bne.n	8004c58 <_strtod_l+0xa48>
 8004ba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <_strtod_l+0xb18>)
 8004baa:	f7fb fd01 	bl	80005b0 <__aeabi_dmul>
 8004bae:	4605      	mov	r5, r0
 8004bb0:	460f      	mov	r7, r1
 8004bb2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004bb6:	9506      	str	r5, [sp, #24]
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bbe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004bc2:	4b56      	ldr	r3, [pc, #344]	; (8004d1c <_strtod_l+0xb0c>)
 8004bc4:	4a55      	ldr	r2, [pc, #340]	; (8004d1c <_strtod_l+0xb0c>)
 8004bc6:	ea0a 0303 	and.w	r3, sl, r3
 8004bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <_strtod_l+0xb1c>)
 8004bce:	ea0a 0202 	and.w	r2, sl, r2
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	f040 80b0 	bne.w	8004d38 <_strtod_l+0xb28>
 8004bd8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8004bdc:	4640      	mov	r0, r8
 8004bde:	4649      	mov	r1, r9
 8004be0:	f002 ff3e 	bl	8007a60 <__ulp>
 8004be4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004be8:	f7fb fce2 	bl	80005b0 <__aeabi_dmul>
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	f7fb fb28 	bl	8000244 <__adddf3>
 8004bf4:	f8df a124 	ldr.w	sl, [pc, #292]	; 8004d1c <_strtod_l+0xb0c>
 8004bf8:	4a4d      	ldr	r2, [pc, #308]	; (8004d30 <_strtod_l+0xb20>)
 8004bfa:	ea01 0a0a 	and.w	sl, r1, sl
 8004bfe:	4592      	cmp	sl, r2
 8004c00:	4680      	mov	r8, r0
 8004c02:	d948      	bls.n	8004c96 <_strtod_l+0xa86>
 8004c04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c06:	4b46      	ldr	r3, [pc, #280]	; (8004d20 <_strtod_l+0xb10>)
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d103      	bne.n	8004c14 <_strtod_l+0xa04>
 8004c0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f43f ad3c 	beq.w	800468c <_strtod_l+0x47c>
 8004c14:	f04f 38ff 	mov.w	r8, #4294967295
 8004c18:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004d20 <_strtod_l+0xb10>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c20:	f002 fbf2 	bl	8007408 <_Bfree>
 8004c24:	4620      	mov	r0, r4
 8004c26:	9908      	ldr	r1, [sp, #32]
 8004c28:	f002 fbee 	bl	8007408 <_Bfree>
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f002 fbea 	bl	8007408 <_Bfree>
 8004c34:	4631      	mov	r1, r6
 8004c36:	4620      	mov	r0, r4
 8004c38:	f002 fbe6 	bl	8007408 <_Bfree>
 8004c3c:	e605      	b.n	800484a <_strtod_l+0x63a>
 8004c3e:	f1b8 0f01 	cmp.w	r8, #1
 8004c42:	d103      	bne.n	8004c4c <_strtod_l+0xa3c>
 8004c44:	f1b9 0f00 	cmp.w	r9, #0
 8004c48:	f43f ad91 	beq.w	800476e <_strtod_l+0x55e>
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <_strtod_l+0xb24>)
 8004c50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004c52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c56:	e016      	b.n	8004c86 <_strtod_l+0xa76>
 8004c58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004c5a:	4f33      	ldr	r7, [pc, #204]	; (8004d28 <_strtod_l+0xb18>)
 8004c5c:	e7a9      	b.n	8004bb2 <_strtod_l+0x9a2>
 8004c5e:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <_strtod_l+0xb18>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c66:	f7fb fca3 	bl	80005b0 <__aeabi_dmul>
 8004c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	460f      	mov	r7, r1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d09e      	beq.n	8004bb2 <_strtod_l+0x9a2>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c7c:	e79d      	b.n	8004bba <_strtod_l+0x9aa>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <_strtod_l+0xb14>)
 8004c82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c86:	4f27      	ldr	r7, [pc, #156]	; (8004d24 <_strtod_l+0xb14>)
 8004c88:	e797      	b.n	8004bba <_strtod_l+0x9aa>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <_strtod_l+0xb24>)
 8004c8e:	4645      	mov	r5, r8
 8004c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c94:	e7f7      	b.n	8004c86 <_strtod_l+0xa76>
 8004c96:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8004c9a:	9b05      	ldr	r3, [sp, #20]
 8004c9c:	46ca      	mov	sl, r9
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1bc      	bne.n	8004c1c <_strtod_l+0xa0c>
 8004ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ca6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ca8:	0d1b      	lsrs	r3, r3, #20
 8004caa:	051b      	lsls	r3, r3, #20
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1b5      	bne.n	8004c1c <_strtod_l+0xa0c>
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fc faae 	bl	8001214 <__aeabi_d2lz>
 8004cb8:	f7fb fc4c 	bl	8000554 <__aeabi_l2d>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fabc 	bl	8000240 <__aeabi_dsub>
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4602      	mov	r2, r0
 8004ccc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8004cd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd6:	ea4a 0a08 	orr.w	sl, sl, r8
 8004cda:	ea5a 0a03 	orrs.w	sl, sl, r3
 8004cde:	d06c      	beq.n	8004dba <_strtod_l+0xbaa>
 8004ce0:	a309      	add	r3, pc, #36	; (adr r3, 8004d08 <_strtod_l+0xaf8>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	f7fb fed5 	bl	8000a94 <__aeabi_dcmplt>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f47f acd8 	bne.w	80046a0 <_strtod_l+0x490>
 8004cf0:	a307      	add	r3, pc, #28	; (adr r3, 8004d10 <_strtod_l+0xb00>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cfa:	f7fb fee9 	bl	8000ad0 <__aeabi_dcmpgt>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d08c      	beq.n	8004c1c <_strtod_l+0xa0c>
 8004d02:	e4cd      	b.n	80046a0 <_strtod_l+0x490>
 8004d04:	f3af 8000 	nop.w
 8004d08:	94a03595 	.word	0x94a03595
 8004d0c:	3fdfffff 	.word	0x3fdfffff
 8004d10:	35afe535 	.word	0x35afe535
 8004d14:	3fe00000 	.word	0x3fe00000
 8004d18:	000fffff 	.word	0x000fffff
 8004d1c:	7ff00000 	.word	0x7ff00000
 8004d20:	7fefffff 	.word	0x7fefffff
 8004d24:	3ff00000 	.word	0x3ff00000
 8004d28:	3fe00000 	.word	0x3fe00000
 8004d2c:	7fe00000 	.word	0x7fe00000
 8004d30:	7c9fffff 	.word	0x7c9fffff
 8004d34:	bff00000 	.word	0xbff00000
 8004d38:	9b05      	ldr	r3, [sp, #20]
 8004d3a:	b333      	cbz	r3, 8004d8a <_strtod_l+0xb7a>
 8004d3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d42:	d822      	bhi.n	8004d8a <_strtod_l+0xb7a>
 8004d44:	a328      	add	r3, pc, #160	; (adr r3, 8004de8 <_strtod_l+0xbd8>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	f7fb feab 	bl	8000aa8 <__aeabi_dcmple>
 8004d52:	b1a0      	cbz	r0, 8004d7e <_strtod_l+0xb6e>
 8004d54:	4639      	mov	r1, r7
 8004d56:	4628      	mov	r0, r5
 8004d58:	f7fb ff02 	bl	8000b60 <__aeabi_d2uiz>
 8004d5c:	2801      	cmp	r0, #1
 8004d5e:	bf38      	it	cc
 8004d60:	2001      	movcc	r0, #1
 8004d62:	f7fb fbab 	bl	80004bc <__aeabi_ui2d>
 8004d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	bb03      	cbnz	r3, 8004db0 <_strtod_l+0xba0>
 8004d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d72:	9014      	str	r0, [sp, #80]	; 0x50
 8004d74:	9315      	str	r3, [sp, #84]	; 0x54
 8004d76:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004d7a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004d7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d82:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	9311      	str	r3, [sp, #68]	; 0x44
 8004d8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d8e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8004d92:	f002 fe65 	bl	8007a60 <__ulp>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	f7fb fc07 	bl	80005b0 <__aeabi_dmul>
 8004da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004da6:	f7fb fa4d 	bl	8000244 <__adddf3>
 8004daa:	4680      	mov	r8, r0
 8004dac:	4689      	mov	r9, r1
 8004dae:	e774      	b.n	8004c9a <_strtod_l+0xa8a>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004db8:	e7dd      	b.n	8004d76 <_strtod_l+0xb66>
 8004dba:	a30d      	add	r3, pc, #52	; (adr r3, 8004df0 <_strtod_l+0xbe0>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fe68 	bl	8000a94 <__aeabi_dcmplt>
 8004dc4:	e79b      	b.n	8004cfe <_strtod_l+0xaee>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	930e      	str	r3, [sp, #56]	; 0x38
 8004dca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	f7ff ba5b 	b.w	800428a <_strtod_l+0x7a>
 8004dd4:	2a65      	cmp	r2, #101	; 0x65
 8004dd6:	f43f ab52 	beq.w	800447e <_strtod_l+0x26e>
 8004dda:	2a45      	cmp	r2, #69	; 0x45
 8004ddc:	f43f ab4f 	beq.w	800447e <_strtod_l+0x26e>
 8004de0:	2301      	movs	r3, #1
 8004de2:	f7ff bb87 	b.w	80044f4 <_strtod_l+0x2e4>
 8004de6:	bf00      	nop
 8004de8:	ffc00000 	.word	0xffc00000
 8004dec:	41dfffff 	.word	0x41dfffff
 8004df0:	94a03595 	.word	0x94a03595
 8004df4:	3fcfffff 	.word	0x3fcfffff

08004df8 <strtof>:
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	4f24      	ldr	r7, [pc, #144]	; (8004e90 <strtof+0x98>)
 8004dfe:	460a      	mov	r2, r1
 8004e00:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <strtof+0x9c>)
 8004e02:	4601      	mov	r1, r0
 8004e04:	6838      	ldr	r0, [r7, #0]
 8004e06:	f7ff fa03 	bl	8004210 <_strtod_l>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	f7fb fe67 	bl	8000ae4 <__aeabi_dcmpun>
 8004e16:	b168      	cbz	r0, 8004e34 <strtof+0x3c>
 8004e18:	2c00      	cmp	r4, #0
 8004e1a:	481f      	ldr	r0, [pc, #124]	; (8004e98 <strtof+0xa0>)
 8004e1c:	da06      	bge.n	8004e2c <strtof+0x34>
 8004e1e:	f001 f86f 	bl	8005f00 <nanf>
 8004e22:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8004e26:	4628      	mov	r0, r5
 8004e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e30:	f001 b866 	b.w	8005f00 <nanf>
 8004e34:	4621      	mov	r1, r4
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7fb feb2 	bl	8000ba0 <__aeabi_d2f>
 8004e3c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8004e40:	4605      	mov	r5, r0
 8004e42:	4916      	ldr	r1, [pc, #88]	; (8004e9c <strtof+0xa4>)
 8004e44:	4640      	mov	r0, r8
 8004e46:	f7fc f9cf 	bl	80011e8 <__aeabi_fcmpun>
 8004e4a:	b9b0      	cbnz	r0, 8004e7a <strtof+0x82>
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4913      	ldr	r1, [pc, #76]	; (8004e9c <strtof+0xa4>)
 8004e50:	f7fc f9ac 	bl	80011ac <__aeabi_fcmple>
 8004e54:	b988      	cbnz	r0, 8004e7a <strtof+0x82>
 8004e56:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5e:	4630      	mov	r0, r6
 8004e60:	4641      	mov	r1, r8
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <strtof+0xa8>)
 8004e64:	f7fb fe3e 	bl	8000ae4 <__aeabi_dcmpun>
 8004e68:	b970      	cbnz	r0, 8004e88 <strtof+0x90>
 8004e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4641      	mov	r1, r8
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <strtof+0xa8>)
 8004e74:	f7fb fe18 	bl	8000aa8 <__aeabi_dcmple>
 8004e78:	b930      	cbnz	r0, 8004e88 <strtof+0x90>
 8004e7a:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8004e7e:	d1d2      	bne.n	8004e26 <strtof+0x2e>
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <strtof+0xac>)
 8004e82:	4023      	ands	r3, r4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ce      	beq.n	8004e26 <strtof+0x2e>
 8004e88:	2222      	movs	r2, #34	; 0x22
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e7ca      	b.n	8004e26 <strtof+0x2e>
 8004e90:	200001d0 	.word	0x200001d0
 8004e94:	20000018 	.word	0x20000018
 8004e98:	080085d9 	.word	0x080085d9
 8004e9c:	7f7fffff 	.word	0x7f7fffff
 8004ea0:	7fefffff 	.word	0x7fefffff
 8004ea4:	7ff00000 	.word	0x7ff00000

08004ea8 <_strtol_l.constprop.0>:
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eae:	4686      	mov	lr, r0
 8004eb0:	4690      	mov	r8, r2
 8004eb2:	d001      	beq.n	8004eb8 <_strtol_l.constprop.0+0x10>
 8004eb4:	2b24      	cmp	r3, #36	; 0x24
 8004eb6:	d906      	bls.n	8004ec6 <_strtol_l.constprop.0+0x1e>
 8004eb8:	f000 ffca 	bl	8005e50 <__errno>
 8004ebc:	2316      	movs	r3, #22
 8004ebe:	6003      	str	r3, [r0, #0]
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec6:	460d      	mov	r5, r1
 8004ec8:	4835      	ldr	r0, [pc, #212]	; (8004fa0 <_strtol_l.constprop.0+0xf8>)
 8004eca:	462a      	mov	r2, r5
 8004ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ed0:	5d06      	ldrb	r6, [r0, r4]
 8004ed2:	f016 0608 	ands.w	r6, r6, #8
 8004ed6:	d1f8      	bne.n	8004eca <_strtol_l.constprop.0+0x22>
 8004ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8004eda:	d12e      	bne.n	8004f3a <_strtol_l.constprop.0+0x92>
 8004edc:	2601      	movs	r6, #1
 8004ede:	782c      	ldrb	r4, [r5, #0]
 8004ee0:	1c95      	adds	r5, r2, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d057      	beq.n	8004f96 <_strtol_l.constprop.0+0xee>
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d109      	bne.n	8004efe <_strtol_l.constprop.0+0x56>
 8004eea:	2c30      	cmp	r4, #48	; 0x30
 8004eec:	d107      	bne.n	8004efe <_strtol_l.constprop.0+0x56>
 8004eee:	782a      	ldrb	r2, [r5, #0]
 8004ef0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004ef4:	2a58      	cmp	r2, #88	; 0x58
 8004ef6:	d149      	bne.n	8004f8c <_strtol_l.constprop.0+0xe4>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	786c      	ldrb	r4, [r5, #1]
 8004efc:	3502      	adds	r5, #2
 8004efe:	2200      	movs	r2, #0
 8004f00:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004f04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f08:	fbbc f9f3 	udiv	r9, ip, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004f12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004f16:	2f09      	cmp	r7, #9
 8004f18:	d814      	bhi.n	8004f44 <_strtol_l.constprop.0+0x9c>
 8004f1a:	463c      	mov	r4, r7
 8004f1c:	42a3      	cmp	r3, r4
 8004f1e:	dd20      	ble.n	8004f62 <_strtol_l.constprop.0+0xba>
 8004f20:	1c57      	adds	r7, r2, #1
 8004f22:	d007      	beq.n	8004f34 <_strtol_l.constprop.0+0x8c>
 8004f24:	4581      	cmp	r9, r0
 8004f26:	d319      	bcc.n	8004f5c <_strtol_l.constprop.0+0xb4>
 8004f28:	d101      	bne.n	8004f2e <_strtol_l.constprop.0+0x86>
 8004f2a:	45a2      	cmp	sl, r4
 8004f2c:	db16      	blt.n	8004f5c <_strtol_l.constprop.0+0xb4>
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fb00 4003 	mla	r0, r0, r3, r4
 8004f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f38:	e7eb      	b.n	8004f12 <_strtol_l.constprop.0+0x6a>
 8004f3a:	2c2b      	cmp	r4, #43	; 0x2b
 8004f3c:	bf04      	itt	eq
 8004f3e:	782c      	ldrbeq	r4, [r5, #0]
 8004f40:	1c95      	addeq	r5, r2, #2
 8004f42:	e7ce      	b.n	8004ee2 <_strtol_l.constprop.0+0x3a>
 8004f44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004f48:	2f19      	cmp	r7, #25
 8004f4a:	d801      	bhi.n	8004f50 <_strtol_l.constprop.0+0xa8>
 8004f4c:	3c37      	subs	r4, #55	; 0x37
 8004f4e:	e7e5      	b.n	8004f1c <_strtol_l.constprop.0+0x74>
 8004f50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004f54:	2f19      	cmp	r7, #25
 8004f56:	d804      	bhi.n	8004f62 <_strtol_l.constprop.0+0xba>
 8004f58:	3c57      	subs	r4, #87	; 0x57
 8004f5a:	e7df      	b.n	8004f1c <_strtol_l.constprop.0+0x74>
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	e7e8      	b.n	8004f34 <_strtol_l.constprop.0+0x8c>
 8004f62:	1c53      	adds	r3, r2, #1
 8004f64:	d108      	bne.n	8004f78 <_strtol_l.constprop.0+0xd0>
 8004f66:	2322      	movs	r3, #34	; 0x22
 8004f68:	4660      	mov	r0, ip
 8004f6a:	f8ce 3000 	str.w	r3, [lr]
 8004f6e:	f1b8 0f00 	cmp.w	r8, #0
 8004f72:	d0a6      	beq.n	8004ec2 <_strtol_l.constprop.0+0x1a>
 8004f74:	1e69      	subs	r1, r5, #1
 8004f76:	e006      	b.n	8004f86 <_strtol_l.constprop.0+0xde>
 8004f78:	b106      	cbz	r6, 8004f7c <_strtol_l.constprop.0+0xd4>
 8004f7a:	4240      	negs	r0, r0
 8004f7c:	f1b8 0f00 	cmp.w	r8, #0
 8004f80:	d09f      	beq.n	8004ec2 <_strtol_l.constprop.0+0x1a>
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d1f6      	bne.n	8004f74 <_strtol_l.constprop.0+0xcc>
 8004f86:	f8c8 1000 	str.w	r1, [r8]
 8004f8a:	e79a      	b.n	8004ec2 <_strtol_l.constprop.0+0x1a>
 8004f8c:	2430      	movs	r4, #48	; 0x30
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1b5      	bne.n	8004efe <_strtol_l.constprop.0+0x56>
 8004f92:	2308      	movs	r3, #8
 8004f94:	e7b3      	b.n	8004efe <_strtol_l.constprop.0+0x56>
 8004f96:	2c30      	cmp	r4, #48	; 0x30
 8004f98:	d0a9      	beq.n	8004eee <_strtol_l.constprop.0+0x46>
 8004f9a:	230a      	movs	r3, #10
 8004f9c:	e7af      	b.n	8004efe <_strtol_l.constprop.0+0x56>
 8004f9e:	bf00      	nop
 8004fa0:	080083f1 	.word	0x080083f1

08004fa4 <strtol>:
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4802      	ldr	r0, [pc, #8]	; (8004fb4 <strtol+0x10>)
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f7ff bf7b 	b.w	8004ea8 <_strtol_l.constprop.0>
 8004fb2:	bf00      	nop
 8004fb4:	200001d0 	.word	0x200001d0

08004fb8 <__cvt>:
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbe:	461f      	mov	r7, r3
 8004fc0:	bfbb      	ittet	lt
 8004fc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004fc6:	461f      	movlt	r7, r3
 8004fc8:	2300      	movge	r3, #0
 8004fca:	232d      	movlt	r3, #45	; 0x2d
 8004fcc:	b088      	sub	sp, #32
 8004fce:	4614      	mov	r4, r2
 8004fd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fd4:	7013      	strb	r3, [r2, #0]
 8004fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004fdc:	f023 0820 	bic.w	r8, r3, #32
 8004fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fe4:	d005      	beq.n	8004ff2 <__cvt+0x3a>
 8004fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fea:	d100      	bne.n	8004fee <__cvt+0x36>
 8004fec:	3501      	adds	r5, #1
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e000      	b.n	8004ff4 <__cvt+0x3c>
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	aa07      	add	r2, sp, #28
 8004ff6:	9204      	str	r2, [sp, #16]
 8004ff8:	aa06      	add	r2, sp, #24
 8004ffa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ffe:	e9cd 3500 	strd	r3, r5, [sp]
 8005002:	4622      	mov	r2, r4
 8005004:	463b      	mov	r3, r7
 8005006:	f001 f827 	bl	8006058 <_dtoa_r>
 800500a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800500e:	4606      	mov	r6, r0
 8005010:	d102      	bne.n	8005018 <__cvt+0x60>
 8005012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005014:	07db      	lsls	r3, r3, #31
 8005016:	d522      	bpl.n	800505e <__cvt+0xa6>
 8005018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800501c:	eb06 0905 	add.w	r9, r6, r5
 8005020:	d110      	bne.n	8005044 <__cvt+0x8c>
 8005022:	7833      	ldrb	r3, [r6, #0]
 8005024:	2b30      	cmp	r3, #48	; 0x30
 8005026:	d10a      	bne.n	800503e <__cvt+0x86>
 8005028:	2200      	movs	r2, #0
 800502a:	2300      	movs	r3, #0
 800502c:	4620      	mov	r0, r4
 800502e:	4639      	mov	r1, r7
 8005030:	f7fb fd26 	bl	8000a80 <__aeabi_dcmpeq>
 8005034:	b918      	cbnz	r0, 800503e <__cvt+0x86>
 8005036:	f1c5 0501 	rsb	r5, r5, #1
 800503a:	f8ca 5000 	str.w	r5, [sl]
 800503e:	f8da 3000 	ldr.w	r3, [sl]
 8005042:	4499      	add	r9, r3
 8005044:	2200      	movs	r2, #0
 8005046:	2300      	movs	r3, #0
 8005048:	4620      	mov	r0, r4
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fd18 	bl	8000a80 <__aeabi_dcmpeq>
 8005050:	b108      	cbz	r0, 8005056 <__cvt+0x9e>
 8005052:	f8cd 901c 	str.w	r9, [sp, #28]
 8005056:	2230      	movs	r2, #48	; 0x30
 8005058:	9b07      	ldr	r3, [sp, #28]
 800505a:	454b      	cmp	r3, r9
 800505c:	d307      	bcc.n	800506e <__cvt+0xb6>
 800505e:	4630      	mov	r0, r6
 8005060:	9b07      	ldr	r3, [sp, #28]
 8005062:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	b008      	add	sp, #32
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	1c59      	adds	r1, r3, #1
 8005070:	9107      	str	r1, [sp, #28]
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e7f0      	b.n	8005058 <__cvt+0xa0>

08005076 <__exponent>:
 8005076:	4603      	mov	r3, r0
 8005078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507a:	2900      	cmp	r1, #0
 800507c:	f803 2b02 	strb.w	r2, [r3], #2
 8005080:	bfb6      	itet	lt
 8005082:	222d      	movlt	r2, #45	; 0x2d
 8005084:	222b      	movge	r2, #43	; 0x2b
 8005086:	4249      	neglt	r1, r1
 8005088:	2909      	cmp	r1, #9
 800508a:	7042      	strb	r2, [r0, #1]
 800508c:	dd2a      	ble.n	80050e4 <__exponent+0x6e>
 800508e:	f10d 0207 	add.w	r2, sp, #7
 8005092:	4617      	mov	r7, r2
 8005094:	260a      	movs	r6, #10
 8005096:	fb91 f5f6 	sdiv	r5, r1, r6
 800509a:	4694      	mov	ip, r2
 800509c:	fb06 1415 	mls	r4, r6, r5, r1
 80050a0:	3430      	adds	r4, #48	; 0x30
 80050a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80050a6:	460c      	mov	r4, r1
 80050a8:	2c63      	cmp	r4, #99	; 0x63
 80050aa:	4629      	mov	r1, r5
 80050ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80050b0:	dcf1      	bgt.n	8005096 <__exponent+0x20>
 80050b2:	3130      	adds	r1, #48	; 0x30
 80050b4:	f1ac 0402 	sub.w	r4, ip, #2
 80050b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80050bc:	4622      	mov	r2, r4
 80050be:	1c41      	adds	r1, r0, #1
 80050c0:	42ba      	cmp	r2, r7
 80050c2:	d30a      	bcc.n	80050da <__exponent+0x64>
 80050c4:	f10d 0209 	add.w	r2, sp, #9
 80050c8:	eba2 020c 	sub.w	r2, r2, ip
 80050cc:	42bc      	cmp	r4, r7
 80050ce:	bf88      	it	hi
 80050d0:	2200      	movhi	r2, #0
 80050d2:	4413      	add	r3, r2
 80050d4:	1a18      	subs	r0, r3, r0
 80050d6:	b003      	add	sp, #12
 80050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050e2:	e7ed      	b.n	80050c0 <__exponent+0x4a>
 80050e4:	2330      	movs	r3, #48	; 0x30
 80050e6:	3130      	adds	r1, #48	; 0x30
 80050e8:	7083      	strb	r3, [r0, #2]
 80050ea:	70c1      	strb	r1, [r0, #3]
 80050ec:	1d03      	adds	r3, r0, #4
 80050ee:	e7f1      	b.n	80050d4 <__exponent+0x5e>

080050f0 <_printf_float>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	b091      	sub	sp, #68	; 0x44
 80050f6:	460c      	mov	r4, r1
 80050f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80050fc:	4616      	mov	r6, r2
 80050fe:	461f      	mov	r7, r3
 8005100:	4605      	mov	r5, r0
 8005102:	f000 fe4b 	bl	8005d9c <_localeconv_r>
 8005106:	6803      	ldr	r3, [r0, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	9309      	str	r3, [sp, #36]	; 0x24
 800510c:	f7fb f88c 	bl	8000228 <strlen>
 8005110:	2300      	movs	r3, #0
 8005112:	930e      	str	r3, [sp, #56]	; 0x38
 8005114:	f8d8 3000 	ldr.w	r3, [r8]
 8005118:	900a      	str	r0, [sp, #40]	; 0x28
 800511a:	3307      	adds	r3, #7
 800511c:	f023 0307 	bic.w	r3, r3, #7
 8005120:	f103 0208 	add.w	r2, r3, #8
 8005124:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005128:	f8d4 b000 	ldr.w	fp, [r4]
 800512c:	f8c8 2000 	str.w	r2, [r8]
 8005130:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005134:	4652      	mov	r2, sl
 8005136:	4643      	mov	r3, r8
 8005138:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800513c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005140:	930b      	str	r3, [sp, #44]	; 0x2c
 8005142:	f04f 32ff 	mov.w	r2, #4294967295
 8005146:	4650      	mov	r0, sl
 8005148:	4b9c      	ldr	r3, [pc, #624]	; (80053bc <_printf_float+0x2cc>)
 800514a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800514c:	f7fb fcca 	bl	8000ae4 <__aeabi_dcmpun>
 8005150:	bb70      	cbnz	r0, 80051b0 <_printf_float+0xc0>
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	4650      	mov	r0, sl
 8005158:	4b98      	ldr	r3, [pc, #608]	; (80053bc <_printf_float+0x2cc>)
 800515a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800515c:	f7fb fca4 	bl	8000aa8 <__aeabi_dcmple>
 8005160:	bb30      	cbnz	r0, 80051b0 <_printf_float+0xc0>
 8005162:	2200      	movs	r2, #0
 8005164:	2300      	movs	r3, #0
 8005166:	4650      	mov	r0, sl
 8005168:	4641      	mov	r1, r8
 800516a:	f7fb fc93 	bl	8000a94 <__aeabi_dcmplt>
 800516e:	b110      	cbz	r0, 8005176 <_printf_float+0x86>
 8005170:	232d      	movs	r3, #45	; 0x2d
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005176:	4a92      	ldr	r2, [pc, #584]	; (80053c0 <_printf_float+0x2d0>)
 8005178:	4b92      	ldr	r3, [pc, #584]	; (80053c4 <_printf_float+0x2d4>)
 800517a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800517e:	bf94      	ite	ls
 8005180:	4690      	movls	r8, r2
 8005182:	4698      	movhi	r8, r3
 8005184:	2303      	movs	r3, #3
 8005186:	f04f 0a00 	mov.w	sl, #0
 800518a:	6123      	str	r3, [r4, #16]
 800518c:	f02b 0304 	bic.w	r3, fp, #4
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	4633      	mov	r3, r6
 8005194:	4621      	mov	r1, r4
 8005196:	4628      	mov	r0, r5
 8005198:	9700      	str	r7, [sp, #0]
 800519a:	aa0f      	add	r2, sp, #60	; 0x3c
 800519c:	f000 f9d6 	bl	800554c <_printf_common>
 80051a0:	3001      	adds	r0, #1
 80051a2:	f040 8090 	bne.w	80052c6 <_printf_float+0x1d6>
 80051a6:	f04f 30ff 	mov.w	r0, #4294967295
 80051aa:	b011      	add	sp, #68	; 0x44
 80051ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b0:	4652      	mov	r2, sl
 80051b2:	4643      	mov	r3, r8
 80051b4:	4650      	mov	r0, sl
 80051b6:	4641      	mov	r1, r8
 80051b8:	f7fb fc94 	bl	8000ae4 <__aeabi_dcmpun>
 80051bc:	b148      	cbz	r0, 80051d2 <_printf_float+0xe2>
 80051be:	f1b8 0f00 	cmp.w	r8, #0
 80051c2:	bfb8      	it	lt
 80051c4:	232d      	movlt	r3, #45	; 0x2d
 80051c6:	4a80      	ldr	r2, [pc, #512]	; (80053c8 <_printf_float+0x2d8>)
 80051c8:	bfb8      	it	lt
 80051ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ce:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <_printf_float+0x2dc>)
 80051d0:	e7d3      	b.n	800517a <_printf_float+0x8a>
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	d142      	bne.n	8005262 <_printf_float+0x172>
 80051dc:	2306      	movs	r3, #6
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	9206      	str	r2, [sp, #24]
 80051e4:	aa0e      	add	r2, sp, #56	; 0x38
 80051e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80051ea:	aa0d      	add	r2, sp, #52	; 0x34
 80051ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80051f0:	9203      	str	r2, [sp, #12]
 80051f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80051f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	4652      	mov	r2, sl
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4628      	mov	r0, r5
 8005204:	4643      	mov	r3, r8
 8005206:	910b      	str	r1, [sp, #44]	; 0x2c
 8005208:	f7ff fed6 	bl	8004fb8 <__cvt>
 800520c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800520e:	4680      	mov	r8, r0
 8005210:	2947      	cmp	r1, #71	; 0x47
 8005212:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005214:	d108      	bne.n	8005228 <_printf_float+0x138>
 8005216:	1cc8      	adds	r0, r1, #3
 8005218:	db02      	blt.n	8005220 <_printf_float+0x130>
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	4299      	cmp	r1, r3
 800521e:	dd40      	ble.n	80052a2 <_printf_float+0x1b2>
 8005220:	f1a9 0902 	sub.w	r9, r9, #2
 8005224:	fa5f f989 	uxtb.w	r9, r9
 8005228:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800522c:	d81f      	bhi.n	800526e <_printf_float+0x17e>
 800522e:	464a      	mov	r2, r9
 8005230:	3901      	subs	r1, #1
 8005232:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005236:	910d      	str	r1, [sp, #52]	; 0x34
 8005238:	f7ff ff1d 	bl	8005076 <__exponent>
 800523c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800523e:	4682      	mov	sl, r0
 8005240:	1813      	adds	r3, r2, r0
 8005242:	2a01      	cmp	r2, #1
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	dc02      	bgt.n	800524e <_printf_float+0x15e>
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	07d2      	lsls	r2, r2, #31
 800524c:	d501      	bpl.n	8005252 <_printf_float+0x162>
 800524e:	3301      	adds	r3, #1
 8005250:	6123      	str	r3, [r4, #16]
 8005252:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005256:	2b00      	cmp	r3, #0
 8005258:	d09b      	beq.n	8005192 <_printf_float+0xa2>
 800525a:	232d      	movs	r3, #45	; 0x2d
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	e797      	b.n	8005192 <_printf_float+0xa2>
 8005262:	2947      	cmp	r1, #71	; 0x47
 8005264:	d1bc      	bne.n	80051e0 <_printf_float+0xf0>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1ba      	bne.n	80051e0 <_printf_float+0xf0>
 800526a:	2301      	movs	r3, #1
 800526c:	e7b7      	b.n	80051de <_printf_float+0xee>
 800526e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005272:	d118      	bne.n	80052a6 <_printf_float+0x1b6>
 8005274:	2900      	cmp	r1, #0
 8005276:	6863      	ldr	r3, [r4, #4]
 8005278:	dd0b      	ble.n	8005292 <_printf_float+0x1a2>
 800527a:	6121      	str	r1, [r4, #16]
 800527c:	b913      	cbnz	r3, 8005284 <_printf_float+0x194>
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	07d0      	lsls	r0, r2, #31
 8005282:	d502      	bpl.n	800528a <_printf_float+0x19a>
 8005284:	3301      	adds	r3, #1
 8005286:	440b      	add	r3, r1
 8005288:	6123      	str	r3, [r4, #16]
 800528a:	f04f 0a00 	mov.w	sl, #0
 800528e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005290:	e7df      	b.n	8005252 <_printf_float+0x162>
 8005292:	b913      	cbnz	r3, 800529a <_printf_float+0x1aa>
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	07d2      	lsls	r2, r2, #31
 8005298:	d501      	bpl.n	800529e <_printf_float+0x1ae>
 800529a:	3302      	adds	r3, #2
 800529c:	e7f4      	b.n	8005288 <_printf_float+0x198>
 800529e:	2301      	movs	r3, #1
 80052a0:	e7f2      	b.n	8005288 <_printf_float+0x198>
 80052a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a8:	4299      	cmp	r1, r3
 80052aa:	db05      	blt.n	80052b8 <_printf_float+0x1c8>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	6121      	str	r1, [r4, #16]
 80052b0:	07d8      	lsls	r0, r3, #31
 80052b2:	d5ea      	bpl.n	800528a <_printf_float+0x19a>
 80052b4:	1c4b      	adds	r3, r1, #1
 80052b6:	e7e7      	b.n	8005288 <_printf_float+0x198>
 80052b8:	2900      	cmp	r1, #0
 80052ba:	bfcc      	ite	gt
 80052bc:	2201      	movgt	r2, #1
 80052be:	f1c1 0202 	rsble	r2, r1, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	e7e0      	b.n	8005288 <_printf_float+0x198>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	055a      	lsls	r2, r3, #21
 80052ca:	d407      	bmi.n	80052dc <_printf_float+0x1ec>
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	4642      	mov	r2, r8
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	d12b      	bne.n	8005332 <_printf_float+0x242>
 80052da:	e764      	b.n	80051a6 <_printf_float+0xb6>
 80052dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052e0:	f240 80dd 	bls.w	800549e <_printf_float+0x3ae>
 80052e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	f7fb fbc8 	bl	8000a80 <__aeabi_dcmpeq>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d033      	beq.n	800535c <_printf_float+0x26c>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	4a35      	ldr	r2, [pc, #212]	; (80053d0 <_printf_float+0x2e0>)
 80052fc:	47b8      	blx	r7
 80052fe:	3001      	adds	r0, #1
 8005300:	f43f af51 	beq.w	80051a6 <_printf_float+0xb6>
 8005304:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005308:	429a      	cmp	r2, r3
 800530a:	db02      	blt.n	8005312 <_printf_float+0x222>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	07d8      	lsls	r0, r3, #31
 8005310:	d50f      	bpl.n	8005332 <_printf_float+0x242>
 8005312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f af42 	beq.w	80051a6 <_printf_float+0xb6>
 8005322:	f04f 0800 	mov.w	r8, #0
 8005326:	f104 091a 	add.w	r9, r4, #26
 800532a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800532c:	3b01      	subs	r3, #1
 800532e:	4543      	cmp	r3, r8
 8005330:	dc09      	bgt.n	8005346 <_printf_float+0x256>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	079b      	lsls	r3, r3, #30
 8005336:	f100 8104 	bmi.w	8005542 <_printf_float+0x452>
 800533a:	68e0      	ldr	r0, [r4, #12]
 800533c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800533e:	4298      	cmp	r0, r3
 8005340:	bfb8      	it	lt
 8005342:	4618      	movlt	r0, r3
 8005344:	e731      	b.n	80051aa <_printf_float+0xba>
 8005346:	2301      	movs	r3, #1
 8005348:	464a      	mov	r2, r9
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f af28 	beq.w	80051a6 <_printf_float+0xb6>
 8005356:	f108 0801 	add.w	r8, r8, #1
 800535a:	e7e6      	b.n	800532a <_printf_float+0x23a>
 800535c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800535e:	2b00      	cmp	r3, #0
 8005360:	dc38      	bgt.n	80053d4 <_printf_float+0x2e4>
 8005362:	2301      	movs	r3, #1
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <_printf_float+0x2e0>)
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	f43f af1a 	beq.w	80051a6 <_printf_float+0xb6>
 8005372:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005376:	4313      	orrs	r3, r2
 8005378:	d102      	bne.n	8005380 <_printf_float+0x290>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	07d9      	lsls	r1, r3, #31
 800537e:	d5d8      	bpl.n	8005332 <_printf_float+0x242>
 8005380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005384:	4631      	mov	r1, r6
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f af0b 	beq.w	80051a6 <_printf_float+0xb6>
 8005390:	f04f 0900 	mov.w	r9, #0
 8005394:	f104 0a1a 	add.w	sl, r4, #26
 8005398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800539a:	425b      	negs	r3, r3
 800539c:	454b      	cmp	r3, r9
 800539e:	dc01      	bgt.n	80053a4 <_printf_float+0x2b4>
 80053a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a2:	e794      	b.n	80052ce <_printf_float+0x1de>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4652      	mov	r2, sl
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f aef9 	beq.w	80051a6 <_printf_float+0xb6>
 80053b4:	f109 0901 	add.w	r9, r9, #1
 80053b8:	e7ee      	b.n	8005398 <_printf_float+0x2a8>
 80053ba:	bf00      	nop
 80053bc:	7fefffff 	.word	0x7fefffff
 80053c0:	080084f1 	.word	0x080084f1
 80053c4:	080084f5 	.word	0x080084f5
 80053c8:	080084f9 	.word	0x080084f9
 80053cc:	080084fd 	.word	0x080084fd
 80053d0:	08008501 	.word	0x08008501
 80053d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053d8:	429a      	cmp	r2, r3
 80053da:	bfa8      	it	ge
 80053dc:	461a      	movge	r2, r3
 80053de:	2a00      	cmp	r2, #0
 80053e0:	4691      	mov	r9, r2
 80053e2:	dc37      	bgt.n	8005454 <_printf_float+0x364>
 80053e4:	f04f 0b00 	mov.w	fp, #0
 80053e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ec:	f104 021a 	add.w	r2, r4, #26
 80053f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80053f4:	ebaa 0309 	sub.w	r3, sl, r9
 80053f8:	455b      	cmp	r3, fp
 80053fa:	dc33      	bgt.n	8005464 <_printf_float+0x374>
 80053fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005400:	429a      	cmp	r2, r3
 8005402:	db3b      	blt.n	800547c <_printf_float+0x38c>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	07da      	lsls	r2, r3, #31
 8005408:	d438      	bmi.n	800547c <_printf_float+0x38c>
 800540a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800540e:	eba2 0903 	sub.w	r9, r2, r3
 8005412:	eba2 020a 	sub.w	r2, r2, sl
 8005416:	4591      	cmp	r9, r2
 8005418:	bfa8      	it	ge
 800541a:	4691      	movge	r9, r2
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	dc34      	bgt.n	800548c <_printf_float+0x39c>
 8005422:	f04f 0800 	mov.w	r8, #0
 8005426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800542a:	f104 0a1a 	add.w	sl, r4, #26
 800542e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	eba3 0309 	sub.w	r3, r3, r9
 8005438:	4543      	cmp	r3, r8
 800543a:	f77f af7a 	ble.w	8005332 <_printf_float+0x242>
 800543e:	2301      	movs	r3, #1
 8005440:	4652      	mov	r2, sl
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f aeac 	beq.w	80051a6 <_printf_float+0xb6>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	e7ec      	b.n	800542e <_printf_float+0x33e>
 8005454:	4613      	mov	r3, r2
 8005456:	4631      	mov	r1, r6
 8005458:	4642      	mov	r2, r8
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	d1c0      	bne.n	80053e4 <_printf_float+0x2f4>
 8005462:	e6a0      	b.n	80051a6 <_printf_float+0xb6>
 8005464:	2301      	movs	r3, #1
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	920b      	str	r2, [sp, #44]	; 0x2c
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f ae99 	beq.w	80051a6 <_printf_float+0xb6>
 8005474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005476:	f10b 0b01 	add.w	fp, fp, #1
 800547a:	e7b9      	b.n	80053f0 <_printf_float+0x300>
 800547c:	4631      	mov	r1, r6
 800547e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005482:	4628      	mov	r0, r5
 8005484:	47b8      	blx	r7
 8005486:	3001      	adds	r0, #1
 8005488:	d1bf      	bne.n	800540a <_printf_float+0x31a>
 800548a:	e68c      	b.n	80051a6 <_printf_float+0xb6>
 800548c:	464b      	mov	r3, r9
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	eb08 020a 	add.w	r2, r8, sl
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	d1c2      	bne.n	8005422 <_printf_float+0x332>
 800549c:	e683      	b.n	80051a6 <_printf_float+0xb6>
 800549e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054a0:	2a01      	cmp	r2, #1
 80054a2:	dc01      	bgt.n	80054a8 <_printf_float+0x3b8>
 80054a4:	07db      	lsls	r3, r3, #31
 80054a6:	d539      	bpl.n	800551c <_printf_float+0x42c>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4642      	mov	r2, r8
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	f43f ae77 	beq.w	80051a6 <_printf_float+0xb6>
 80054b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	f43f ae6f 	beq.w	80051a6 <_printf_float+0xb6>
 80054c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054cc:	2200      	movs	r2, #0
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80054d4:	f7fb fad4 	bl	8000a80 <__aeabi_dcmpeq>
 80054d8:	b9d8      	cbnz	r0, 8005512 <_printf_float+0x422>
 80054da:	f109 33ff 	add.w	r3, r9, #4294967295
 80054de:	f108 0201 	add.w	r2, r8, #1
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	d10e      	bne.n	800550a <_printf_float+0x41a>
 80054ec:	e65b      	b.n	80051a6 <_printf_float+0xb6>
 80054ee:	2301      	movs	r3, #1
 80054f0:	464a      	mov	r2, r9
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f ae54 	beq.w	80051a6 <_printf_float+0xb6>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005504:	3b01      	subs	r3, #1
 8005506:	4543      	cmp	r3, r8
 8005508:	dcf1      	bgt.n	80054ee <_printf_float+0x3fe>
 800550a:	4653      	mov	r3, sl
 800550c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005510:	e6de      	b.n	80052d0 <_printf_float+0x1e0>
 8005512:	f04f 0800 	mov.w	r8, #0
 8005516:	f104 091a 	add.w	r9, r4, #26
 800551a:	e7f2      	b.n	8005502 <_printf_float+0x412>
 800551c:	2301      	movs	r3, #1
 800551e:	4642      	mov	r2, r8
 8005520:	e7df      	b.n	80054e2 <_printf_float+0x3f2>
 8005522:	2301      	movs	r3, #1
 8005524:	464a      	mov	r2, r9
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f ae3a 	beq.w	80051a6 <_printf_float+0xb6>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800553a:	1a5b      	subs	r3, r3, r1
 800553c:	4543      	cmp	r3, r8
 800553e:	dcf0      	bgt.n	8005522 <_printf_float+0x432>
 8005540:	e6fb      	b.n	800533a <_printf_float+0x24a>
 8005542:	f04f 0800 	mov.w	r8, #0
 8005546:	f104 0919 	add.w	r9, r4, #25
 800554a:	e7f4      	b.n	8005536 <_printf_float+0x446>

0800554c <_printf_common>:
 800554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005550:	4616      	mov	r6, r2
 8005552:	4699      	mov	r9, r3
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	690b      	ldr	r3, [r1, #16]
 8005558:	4607      	mov	r7, r0
 800555a:	4293      	cmp	r3, r2
 800555c:	bfb8      	it	lt
 800555e:	4613      	movlt	r3, r2
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005566:	460c      	mov	r4, r1
 8005568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800556c:	b10a      	cbz	r2, 8005572 <_printf_common+0x26>
 800556e:	3301      	adds	r3, #1
 8005570:	6033      	str	r3, [r6, #0]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	6833      	ldrmi	r3, [r6, #0]
 800557a:	3302      	addmi	r3, #2
 800557c:	6033      	strmi	r3, [r6, #0]
 800557e:	6825      	ldr	r5, [r4, #0]
 8005580:	f015 0506 	ands.w	r5, r5, #6
 8005584:	d106      	bne.n	8005594 <_printf_common+0x48>
 8005586:	f104 0a19 	add.w	sl, r4, #25
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	6832      	ldr	r2, [r6, #0]
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc2b      	bgt.n	80055ec <_printf_common+0xa0>
 8005594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005598:	1e13      	subs	r3, r2, #0
 800559a:	6822      	ldr	r2, [r4, #0]
 800559c:	bf18      	it	ne
 800559e:	2301      	movne	r3, #1
 80055a0:	0692      	lsls	r2, r2, #26
 80055a2:	d430      	bmi.n	8005606 <_printf_common+0xba>
 80055a4:	4649      	mov	r1, r9
 80055a6:	4638      	mov	r0, r7
 80055a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ac:	47c0      	blx	r8
 80055ae:	3001      	adds	r0, #1
 80055b0:	d023      	beq.n	80055fa <_printf_common+0xae>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf14      	ite	ne
 80055be:	2500      	movne	r5, #0
 80055c0:	6833      	ldreq	r3, [r6, #0]
 80055c2:	f04f 0600 	mov.w	r6, #0
 80055c6:	bf08      	it	eq
 80055c8:	68e5      	ldreq	r5, [r4, #12]
 80055ca:	f104 041a 	add.w	r4, r4, #26
 80055ce:	bf08      	it	eq
 80055d0:	1aed      	subeq	r5, r5, r3
 80055d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055d6:	bf08      	it	eq
 80055d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055dc:	4293      	cmp	r3, r2
 80055de:	bfc4      	itt	gt
 80055e0:	1a9b      	subgt	r3, r3, r2
 80055e2:	18ed      	addgt	r5, r5, r3
 80055e4:	42b5      	cmp	r5, r6
 80055e6:	d11a      	bne.n	800561e <_printf_common+0xd2>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e008      	b.n	80055fe <_printf_common+0xb2>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4652      	mov	r2, sl
 80055f0:	4649      	mov	r1, r9
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d103      	bne.n	8005602 <_printf_common+0xb6>
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005602:	3501      	adds	r5, #1
 8005604:	e7c1      	b.n	800558a <_printf_common+0x3e>
 8005606:	2030      	movs	r0, #48	; 0x30
 8005608:	18e1      	adds	r1, r4, r3
 800560a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005614:	4422      	add	r2, r4
 8005616:	3302      	adds	r3, #2
 8005618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800561c:	e7c2      	b.n	80055a4 <_printf_common+0x58>
 800561e:	2301      	movs	r3, #1
 8005620:	4622      	mov	r2, r4
 8005622:	4649      	mov	r1, r9
 8005624:	4638      	mov	r0, r7
 8005626:	47c0      	blx	r8
 8005628:	3001      	adds	r0, #1
 800562a:	d0e6      	beq.n	80055fa <_printf_common+0xae>
 800562c:	3601      	adds	r6, #1
 800562e:	e7d9      	b.n	80055e4 <_printf_common+0x98>

08005630 <_printf_i>:
 8005630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	7e0f      	ldrb	r7, [r1, #24]
 8005636:	4691      	mov	r9, r2
 8005638:	2f78      	cmp	r7, #120	; 0x78
 800563a:	4680      	mov	r8, r0
 800563c:	460c      	mov	r4, r1
 800563e:	469a      	mov	sl, r3
 8005640:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005646:	d807      	bhi.n	8005658 <_printf_i+0x28>
 8005648:	2f62      	cmp	r7, #98	; 0x62
 800564a:	d80a      	bhi.n	8005662 <_printf_i+0x32>
 800564c:	2f00      	cmp	r7, #0
 800564e:	f000 80d5 	beq.w	80057fc <_printf_i+0x1cc>
 8005652:	2f58      	cmp	r7, #88	; 0x58
 8005654:	f000 80c1 	beq.w	80057da <_printf_i+0x1aa>
 8005658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800565c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005660:	e03a      	b.n	80056d8 <_printf_i+0xa8>
 8005662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005666:	2b15      	cmp	r3, #21
 8005668:	d8f6      	bhi.n	8005658 <_printf_i+0x28>
 800566a:	a101      	add	r1, pc, #4	; (adr r1, 8005670 <_printf_i+0x40>)
 800566c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056dd 	.word	0x080056dd
 8005678:	08005659 	.word	0x08005659
 800567c:	08005659 	.word	0x08005659
 8005680:	08005659 	.word	0x08005659
 8005684:	08005659 	.word	0x08005659
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005659 	.word	0x08005659
 8005690:	08005659 	.word	0x08005659
 8005694:	08005659 	.word	0x08005659
 8005698:	08005659 	.word	0x08005659
 800569c:	080057e3 	.word	0x080057e3
 80056a0:	08005709 	.word	0x08005709
 80056a4:	0800579d 	.word	0x0800579d
 80056a8:	08005659 	.word	0x08005659
 80056ac:	08005659 	.word	0x08005659
 80056b0:	08005805 	.word	0x08005805
 80056b4:	08005659 	.word	0x08005659
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005659 	.word	0x08005659
 80056c0:	08005659 	.word	0x08005659
 80056c4:	080057a5 	.word	0x080057a5
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	602a      	str	r2, [r5, #0]
 80056d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d8:	2301      	movs	r3, #1
 80056da:	e0a0      	b.n	800581e <_printf_i+0x1ee>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	0607      	lsls	r7, r0, #24
 80056e2:	f103 0104 	add.w	r1, r3, #4
 80056e6:	6029      	str	r1, [r5, #0]
 80056e8:	d501      	bpl.n	80056ee <_printf_i+0xbe>
 80056ea:	681e      	ldr	r6, [r3, #0]
 80056ec:	e003      	b.n	80056f6 <_printf_i+0xc6>
 80056ee:	0646      	lsls	r6, r0, #25
 80056f0:	d5fb      	bpl.n	80056ea <_printf_i+0xba>
 80056f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	da03      	bge.n	8005702 <_printf_i+0xd2>
 80056fa:	232d      	movs	r3, #45	; 0x2d
 80056fc:	4276      	negs	r6, r6
 80056fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005702:	230a      	movs	r3, #10
 8005704:	4859      	ldr	r0, [pc, #356]	; (800586c <_printf_i+0x23c>)
 8005706:	e012      	b.n	800572e <_printf_i+0xfe>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	1d19      	adds	r1, r3, #4
 800570e:	6029      	str	r1, [r5, #0]
 8005710:	0605      	lsls	r5, r0, #24
 8005712:	d501      	bpl.n	8005718 <_printf_i+0xe8>
 8005714:	681e      	ldr	r6, [r3, #0]
 8005716:	e002      	b.n	800571e <_printf_i+0xee>
 8005718:	0641      	lsls	r1, r0, #25
 800571a:	d5fb      	bpl.n	8005714 <_printf_i+0xe4>
 800571c:	881e      	ldrh	r6, [r3, #0]
 800571e:	2f6f      	cmp	r7, #111	; 0x6f
 8005720:	bf0c      	ite	eq
 8005722:	2308      	moveq	r3, #8
 8005724:	230a      	movne	r3, #10
 8005726:	4851      	ldr	r0, [pc, #324]	; (800586c <_printf_i+0x23c>)
 8005728:	2100      	movs	r1, #0
 800572a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572e:	6865      	ldr	r5, [r4, #4]
 8005730:	2d00      	cmp	r5, #0
 8005732:	bfa8      	it	ge
 8005734:	6821      	ldrge	r1, [r4, #0]
 8005736:	60a5      	str	r5, [r4, #8]
 8005738:	bfa4      	itt	ge
 800573a:	f021 0104 	bicge.w	r1, r1, #4
 800573e:	6021      	strge	r1, [r4, #0]
 8005740:	b90e      	cbnz	r6, 8005746 <_printf_i+0x116>
 8005742:	2d00      	cmp	r5, #0
 8005744:	d04b      	beq.n	80057de <_printf_i+0x1ae>
 8005746:	4615      	mov	r5, r2
 8005748:	fbb6 f1f3 	udiv	r1, r6, r3
 800574c:	fb03 6711 	mls	r7, r3, r1, r6
 8005750:	5dc7      	ldrb	r7, [r0, r7]
 8005752:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005756:	4637      	mov	r7, r6
 8005758:	42bb      	cmp	r3, r7
 800575a:	460e      	mov	r6, r1
 800575c:	d9f4      	bls.n	8005748 <_printf_i+0x118>
 800575e:	2b08      	cmp	r3, #8
 8005760:	d10b      	bne.n	800577a <_printf_i+0x14a>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	07de      	lsls	r6, r3, #31
 8005766:	d508      	bpl.n	800577a <_printf_i+0x14a>
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	6861      	ldr	r1, [r4, #4]
 800576c:	4299      	cmp	r1, r3
 800576e:	bfde      	ittt	le
 8005770:	2330      	movle	r3, #48	; 0x30
 8005772:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005776:	f105 35ff 	addle.w	r5, r5, #4294967295
 800577a:	1b52      	subs	r2, r2, r5
 800577c:	6122      	str	r2, [r4, #16]
 800577e:	464b      	mov	r3, r9
 8005780:	4621      	mov	r1, r4
 8005782:	4640      	mov	r0, r8
 8005784:	f8cd a000 	str.w	sl, [sp]
 8005788:	aa03      	add	r2, sp, #12
 800578a:	f7ff fedf 	bl	800554c <_printf_common>
 800578e:	3001      	adds	r0, #1
 8005790:	d14a      	bne.n	8005828 <_printf_i+0x1f8>
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	b004      	add	sp, #16
 8005798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	f043 0320 	orr.w	r3, r3, #32
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	2778      	movs	r7, #120	; 0x78
 80057a6:	4832      	ldr	r0, [pc, #200]	; (8005870 <_printf_i+0x240>)
 80057a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	6829      	ldr	r1, [r5, #0]
 80057b0:	061f      	lsls	r7, r3, #24
 80057b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b6:	d402      	bmi.n	80057be <_printf_i+0x18e>
 80057b8:	065f      	lsls	r7, r3, #25
 80057ba:	bf48      	it	mi
 80057bc:	b2b6      	uxthmi	r6, r6
 80057be:	07df      	lsls	r7, r3, #31
 80057c0:	bf48      	it	mi
 80057c2:	f043 0320 	orrmi.w	r3, r3, #32
 80057c6:	6029      	str	r1, [r5, #0]
 80057c8:	bf48      	it	mi
 80057ca:	6023      	strmi	r3, [r4, #0]
 80057cc:	b91e      	cbnz	r6, 80057d6 <_printf_i+0x1a6>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f023 0320 	bic.w	r3, r3, #32
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	2310      	movs	r3, #16
 80057d8:	e7a6      	b.n	8005728 <_printf_i+0xf8>
 80057da:	4824      	ldr	r0, [pc, #144]	; (800586c <_printf_i+0x23c>)
 80057dc:	e7e4      	b.n	80057a8 <_printf_i+0x178>
 80057de:	4615      	mov	r5, r2
 80057e0:	e7bd      	b.n	800575e <_printf_i+0x12e>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	6826      	ldr	r6, [r4, #0]
 80057e6:	1d18      	adds	r0, r3, #4
 80057e8:	6961      	ldr	r1, [r4, #20]
 80057ea:	6028      	str	r0, [r5, #0]
 80057ec:	0635      	lsls	r5, r6, #24
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	d501      	bpl.n	80057f6 <_printf_i+0x1c6>
 80057f2:	6019      	str	r1, [r3, #0]
 80057f4:	e002      	b.n	80057fc <_printf_i+0x1cc>
 80057f6:	0670      	lsls	r0, r6, #25
 80057f8:	d5fb      	bpl.n	80057f2 <_printf_i+0x1c2>
 80057fa:	8019      	strh	r1, [r3, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	4615      	mov	r5, r2
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	e7bc      	b.n	800577e <_printf_i+0x14e>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	2100      	movs	r1, #0
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	4628      	mov	r0, r5
 8005812:	f000 fb52 	bl	8005eba <memchr>
 8005816:	b108      	cbz	r0, 800581c <_printf_i+0x1ec>
 8005818:	1b40      	subs	r0, r0, r5
 800581a:	6060      	str	r0, [r4, #4]
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	2300      	movs	r3, #0
 8005822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005826:	e7aa      	b.n	800577e <_printf_i+0x14e>
 8005828:	462a      	mov	r2, r5
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	47d0      	blx	sl
 8005832:	3001      	adds	r0, #1
 8005834:	d0ad      	beq.n	8005792 <_printf_i+0x162>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	079b      	lsls	r3, r3, #30
 800583a:	d413      	bmi.n	8005864 <_printf_i+0x234>
 800583c:	68e0      	ldr	r0, [r4, #12]
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	4298      	cmp	r0, r3
 8005842:	bfb8      	it	lt
 8005844:	4618      	movlt	r0, r3
 8005846:	e7a6      	b.n	8005796 <_printf_i+0x166>
 8005848:	2301      	movs	r3, #1
 800584a:	4632      	mov	r2, r6
 800584c:	4649      	mov	r1, r9
 800584e:	4640      	mov	r0, r8
 8005850:	47d0      	blx	sl
 8005852:	3001      	adds	r0, #1
 8005854:	d09d      	beq.n	8005792 <_printf_i+0x162>
 8005856:	3501      	adds	r5, #1
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	9903      	ldr	r1, [sp, #12]
 800585c:	1a5b      	subs	r3, r3, r1
 800585e:	42ab      	cmp	r3, r5
 8005860:	dcf2      	bgt.n	8005848 <_printf_i+0x218>
 8005862:	e7eb      	b.n	800583c <_printf_i+0x20c>
 8005864:	2500      	movs	r5, #0
 8005866:	f104 0619 	add.w	r6, r4, #25
 800586a:	e7f5      	b.n	8005858 <_printf_i+0x228>
 800586c:	08008503 	.word	0x08008503
 8005870:	08008514 	.word	0x08008514

08005874 <std>:
 8005874:	2300      	movs	r3, #0
 8005876:	b510      	push	{r4, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	e9c0 3300 	strd	r3, r3, [r0]
 800587e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005882:	6083      	str	r3, [r0, #8]
 8005884:	8181      	strh	r1, [r0, #12]
 8005886:	6643      	str	r3, [r0, #100]	; 0x64
 8005888:	81c2      	strh	r2, [r0, #14]
 800588a:	6183      	str	r3, [r0, #24]
 800588c:	4619      	mov	r1, r3
 800588e:	2208      	movs	r2, #8
 8005890:	305c      	adds	r0, #92	; 0x5c
 8005892:	f000 f9f7 	bl	8005c84 <memset>
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <std+0x58>)
 8005898:	6224      	str	r4, [r4, #32]
 800589a:	6263      	str	r3, [r4, #36]	; 0x24
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <std+0x5c>)
 800589e:	62a3      	str	r3, [r4, #40]	; 0x28
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <std+0x60>)
 80058a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <std+0x64>)
 80058a6:	6323      	str	r3, [r4, #48]	; 0x30
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <std+0x68>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d006      	beq.n	80058bc <std+0x48>
 80058ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058b2:	4294      	cmp	r4, r2
 80058b4:	d002      	beq.n	80058bc <std+0x48>
 80058b6:	33d0      	adds	r3, #208	; 0xd0
 80058b8:	429c      	cmp	r4, r3
 80058ba:	d105      	bne.n	80058c8 <std+0x54>
 80058bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c4:	f000 baee 	b.w	8005ea4 <__retarget_lock_init_recursive>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	bf00      	nop
 80058cc:	08005ad5 	.word	0x08005ad5
 80058d0:	08005af7 	.word	0x08005af7
 80058d4:	08005b2f 	.word	0x08005b2f
 80058d8:	08005b53 	.word	0x08005b53
 80058dc:	200002d8 	.word	0x200002d8

080058e0 <stdio_exit_handler>:
 80058e0:	4a02      	ldr	r2, [pc, #8]	; (80058ec <stdio_exit_handler+0xc>)
 80058e2:	4903      	ldr	r1, [pc, #12]	; (80058f0 <stdio_exit_handler+0x10>)
 80058e4:	4803      	ldr	r0, [pc, #12]	; (80058f4 <stdio_exit_handler+0x14>)
 80058e6:	f000 b869 	b.w	80059bc <_fwalk_sglue>
 80058ea:	bf00      	nop
 80058ec:	2000000c 	.word	0x2000000c
 80058f0:	08008061 	.word	0x08008061
 80058f4:	20000184 	.word	0x20000184

080058f8 <cleanup_stdio>:
 80058f8:	6841      	ldr	r1, [r0, #4]
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <cleanup_stdio+0x34>)
 80058fc:	b510      	push	{r4, lr}
 80058fe:	4299      	cmp	r1, r3
 8005900:	4604      	mov	r4, r0
 8005902:	d001      	beq.n	8005908 <cleanup_stdio+0x10>
 8005904:	f002 fbac 	bl	8008060 <_fflush_r>
 8005908:	68a1      	ldr	r1, [r4, #8]
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <cleanup_stdio+0x38>)
 800590c:	4299      	cmp	r1, r3
 800590e:	d002      	beq.n	8005916 <cleanup_stdio+0x1e>
 8005910:	4620      	mov	r0, r4
 8005912:	f002 fba5 	bl	8008060 <_fflush_r>
 8005916:	68e1      	ldr	r1, [r4, #12]
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <cleanup_stdio+0x3c>)
 800591a:	4299      	cmp	r1, r3
 800591c:	d004      	beq.n	8005928 <cleanup_stdio+0x30>
 800591e:	4620      	mov	r0, r4
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	f002 bb9c 	b.w	8008060 <_fflush_r>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	bf00      	nop
 800592c:	200002d8 	.word	0x200002d8
 8005930:	20000340 	.word	0x20000340
 8005934:	200003a8 	.word	0x200003a8

08005938 <global_stdio_init.part.0>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <global_stdio_init.part.0+0x30>)
 800593c:	4c0b      	ldr	r4, [pc, #44]	; (800596c <global_stdio_init.part.0+0x34>)
 800593e:	4a0c      	ldr	r2, [pc, #48]	; (8005970 <global_stdio_init.part.0+0x38>)
 8005940:	4620      	mov	r0, r4
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	2104      	movs	r1, #4
 8005946:	2200      	movs	r2, #0
 8005948:	f7ff ff94 	bl	8005874 <std>
 800594c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005950:	2201      	movs	r2, #1
 8005952:	2109      	movs	r1, #9
 8005954:	f7ff ff8e 	bl	8005874 <std>
 8005958:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800595c:	2202      	movs	r2, #2
 800595e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005962:	2112      	movs	r1, #18
 8005964:	f7ff bf86 	b.w	8005874 <std>
 8005968:	20000410 	.word	0x20000410
 800596c:	200002d8 	.word	0x200002d8
 8005970:	080058e1 	.word	0x080058e1

08005974 <__sfp_lock_acquire>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__sfp_lock_acquire+0x8>)
 8005976:	f000 ba96 	b.w	8005ea6 <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	20000419 	.word	0x20000419

08005980 <__sfp_lock_release>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__sfp_lock_release+0x8>)
 8005982:	f000 ba91 	b.w	8005ea8 <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	20000419 	.word	0x20000419

0800598c <__sinit>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4604      	mov	r4, r0
 8005990:	f7ff fff0 	bl	8005974 <__sfp_lock_acquire>
 8005994:	6a23      	ldr	r3, [r4, #32]
 8005996:	b11b      	cbz	r3, 80059a0 <__sinit+0x14>
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	f7ff bff0 	b.w	8005980 <__sfp_lock_release>
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <__sinit+0x28>)
 80059a2:	6223      	str	r3, [r4, #32]
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <__sinit+0x2c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f5      	bne.n	8005998 <__sinit+0xc>
 80059ac:	f7ff ffc4 	bl	8005938 <global_stdio_init.part.0>
 80059b0:	e7f2      	b.n	8005998 <__sinit+0xc>
 80059b2:	bf00      	nop
 80059b4:	080058f9 	.word	0x080058f9
 80059b8:	20000410 	.word	0x20000410

080059bc <_fwalk_sglue>:
 80059bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c0:	4607      	mov	r7, r0
 80059c2:	4688      	mov	r8, r1
 80059c4:	4614      	mov	r4, r2
 80059c6:	2600      	movs	r6, #0
 80059c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059cc:	f1b9 0901 	subs.w	r9, r9, #1
 80059d0:	d505      	bpl.n	80059de <_fwalk_sglue+0x22>
 80059d2:	6824      	ldr	r4, [r4, #0]
 80059d4:	2c00      	cmp	r4, #0
 80059d6:	d1f7      	bne.n	80059c8 <_fwalk_sglue+0xc>
 80059d8:	4630      	mov	r0, r6
 80059da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d907      	bls.n	80059f4 <_fwalk_sglue+0x38>
 80059e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e8:	3301      	adds	r3, #1
 80059ea:	d003      	beq.n	80059f4 <_fwalk_sglue+0x38>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	4306      	orrs	r6, r0
 80059f4:	3568      	adds	r5, #104	; 0x68
 80059f6:	e7e9      	b.n	80059cc <_fwalk_sglue+0x10>

080059f8 <iprintf>:
 80059f8:	b40f      	push	{r0, r1, r2, r3}
 80059fa:	b507      	push	{r0, r1, r2, lr}
 80059fc:	4906      	ldr	r1, [pc, #24]	; (8005a18 <iprintf+0x20>)
 80059fe:	ab04      	add	r3, sp, #16
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a06:	6881      	ldr	r1, [r0, #8]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	f002 f98d 	bl	8007d28 <_vfiprintf_r>
 8005a0e:	b003      	add	sp, #12
 8005a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a14:	b004      	add	sp, #16
 8005a16:	4770      	bx	lr
 8005a18:	200001d0 	.word	0x200001d0

08005a1c <_puts_r>:
 8005a1c:	6a03      	ldr	r3, [r0, #32]
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	4605      	mov	r5, r0
 8005a22:	460e      	mov	r6, r1
 8005a24:	6884      	ldr	r4, [r0, #8]
 8005a26:	b90b      	cbnz	r3, 8005a2c <_puts_r+0x10>
 8005a28:	f7ff ffb0 	bl	800598c <__sinit>
 8005a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2e:	07db      	lsls	r3, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_puts_r+0x22>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	0598      	lsls	r0, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_puts_r+0x22>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f000 fa34 	bl	8005ea6 <__retarget_lock_acquire_recursive>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	0719      	lsls	r1, r3, #28
 8005a42:	d513      	bpl.n	8005a6c <_puts_r+0x50>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	b18b      	cbz	r3, 8005a6c <_puts_r+0x50>
 8005a48:	3e01      	subs	r6, #1
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a50:	3b01      	subs	r3, #1
 8005a52:	60a3      	str	r3, [r4, #8]
 8005a54:	b9e9      	cbnz	r1, 8005a92 <_puts_r+0x76>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da2e      	bge.n	8005ab8 <_puts_r+0x9c>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	210a      	movs	r1, #10
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 f87b 	bl	8005b5a <__swbuf_r>
 8005a64:	3001      	adds	r0, #1
 8005a66:	d007      	beq.n	8005a78 <_puts_r+0x5c>
 8005a68:	250a      	movs	r5, #10
 8005a6a:	e007      	b.n	8005a7c <_puts_r+0x60>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 f8b0 	bl	8005bd4 <__swsetup_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d0e7      	beq.n	8005a48 <_puts_r+0x2c>
 8005a78:	f04f 35ff 	mov.w	r5, #4294967295
 8005a7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7e:	07da      	lsls	r2, r3, #31
 8005a80:	d405      	bmi.n	8005a8e <_puts_r+0x72>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <_puts_r+0x72>
 8005a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a8a:	f000 fa0d 	bl	8005ea8 <__retarget_lock_release_recursive>
 8005a8e:	4628      	mov	r0, r5
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	da04      	bge.n	8005aa0 <_puts_r+0x84>
 8005a96:	69a2      	ldr	r2, [r4, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	dc06      	bgt.n	8005aaa <_puts_r+0x8e>
 8005a9c:	290a      	cmp	r1, #10
 8005a9e:	d004      	beq.n	8005aaa <_puts_r+0x8e>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	7019      	strb	r1, [r3, #0]
 8005aa8:	e7cf      	b.n	8005a4a <_puts_r+0x2e>
 8005aaa:	4622      	mov	r2, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 f854 	bl	8005b5a <__swbuf_r>
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d1c9      	bne.n	8005a4a <_puts_r+0x2e>
 8005ab6:	e7df      	b.n	8005a78 <_puts_r+0x5c>
 8005ab8:	250a      	movs	r5, #10
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	6022      	str	r2, [r4, #0]
 8005ac0:	701d      	strb	r5, [r3, #0]
 8005ac2:	e7db      	b.n	8005a7c <_puts_r+0x60>

08005ac4 <puts>:
 8005ac4:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <puts+0xc>)
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	f7ff bfa7 	b.w	8005a1c <_puts_r>
 8005ace:	bf00      	nop
 8005ad0:	200001d0 	.word	0x200001d0

08005ad4 <__sread>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005adc:	f000 f984 	bl	8005de8 <_read_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	bfab      	itete	ge
 8005ae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ae8:	181b      	addge	r3, r3, r0
 8005aea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005aee:	bfac      	ite	ge
 8005af0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005af2:	81a3      	strhlt	r3, [r4, #12]
 8005af4:	bd10      	pop	{r4, pc}

08005af6 <__swrite>:
 8005af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afa:	461f      	mov	r7, r3
 8005afc:	898b      	ldrh	r3, [r1, #12]
 8005afe:	4605      	mov	r5, r0
 8005b00:	05db      	lsls	r3, r3, #23
 8005b02:	460c      	mov	r4, r1
 8005b04:	4616      	mov	r6, r2
 8005b06:	d505      	bpl.n	8005b14 <__swrite+0x1e>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b10:	f000 f958 	bl	8005dc4 <_lseek_r>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	4632      	mov	r2, r6
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	463b      	mov	r3, r7
 8005b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2a:	f000 b97f 	b.w	8005e2c <_write_r>

08005b2e <__sseek>:
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b36:	f000 f945 	bl	8005dc4 <_lseek_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	bf15      	itete	ne
 8005b40:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b4a:	81a3      	strheq	r3, [r4, #12]
 8005b4c:	bf18      	it	ne
 8005b4e:	81a3      	strhne	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__sclose>:
 8005b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b56:	f000 b925 	b.w	8005da4 <_close_r>

08005b5a <__swbuf_r>:
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	4614      	mov	r4, r2
 8005b60:	4605      	mov	r5, r0
 8005b62:	b118      	cbz	r0, 8005b6c <__swbuf_r+0x12>
 8005b64:	6a03      	ldr	r3, [r0, #32]
 8005b66:	b90b      	cbnz	r3, 8005b6c <__swbuf_r+0x12>
 8005b68:	f7ff ff10 	bl	800598c <__sinit>
 8005b6c:	69a3      	ldr	r3, [r4, #24]
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	071a      	lsls	r2, r3, #28
 8005b74:	d525      	bpl.n	8005bc2 <__swbuf_r+0x68>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	b31b      	cbz	r3, 8005bc2 <__swbuf_r+0x68>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	6922      	ldr	r2, [r4, #16]
 8005b7e:	b2f6      	uxtb	r6, r6
 8005b80:	1a98      	subs	r0, r3, r2
 8005b82:	6963      	ldr	r3, [r4, #20]
 8005b84:	4637      	mov	r7, r6
 8005b86:	4283      	cmp	r3, r0
 8005b88:	dc04      	bgt.n	8005b94 <__swbuf_r+0x3a>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f002 fa67 	bl	8008060 <_fflush_r>
 8005b92:	b9e0      	cbnz	r0, 8005bce <__swbuf_r+0x74>
 8005b94:	68a3      	ldr	r3, [r4, #8]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	60a3      	str	r3, [r4, #8]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	6022      	str	r2, [r4, #0]
 8005ba0:	701e      	strb	r6, [r3, #0]
 8005ba2:	6962      	ldr	r2, [r4, #20]
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d004      	beq.n	8005bb4 <__swbuf_r+0x5a>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	07db      	lsls	r3, r3, #31
 8005bae:	d506      	bpl.n	8005bbe <__swbuf_r+0x64>
 8005bb0:	2e0a      	cmp	r6, #10
 8005bb2:	d104      	bne.n	8005bbe <__swbuf_r+0x64>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f002 fa52 	bl	8008060 <_fflush_r>
 8005bbc:	b938      	cbnz	r0, 8005bce <__swbuf_r+0x74>
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f805 	bl	8005bd4 <__swsetup_r>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0d5      	beq.n	8005b7a <__swbuf_r+0x20>
 8005bce:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd2:	e7f4      	b.n	8005bbe <__swbuf_r+0x64>

08005bd4 <__swsetup_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <__swsetup_r+0xac>)
 8005bd8:	4605      	mov	r5, r0
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	460c      	mov	r4, r1
 8005bde:	b118      	cbz	r0, 8005be8 <__swsetup_r+0x14>
 8005be0:	6a03      	ldr	r3, [r0, #32]
 8005be2:	b90b      	cbnz	r3, 8005be8 <__swsetup_r+0x14>
 8005be4:	f7ff fed2 	bl	800598c <__sinit>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bee:	0718      	lsls	r0, r3, #28
 8005bf0:	d422      	bmi.n	8005c38 <__swsetup_r+0x64>
 8005bf2:	06d9      	lsls	r1, r3, #27
 8005bf4:	d407      	bmi.n	8005c06 <__swsetup_r+0x32>
 8005bf6:	2309      	movs	r3, #9
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	e034      	b.n	8005c70 <__swsetup_r+0x9c>
 8005c06:	0758      	lsls	r0, r3, #29
 8005c08:	d512      	bpl.n	8005c30 <__swsetup_r+0x5c>
 8005c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c0c:	b141      	cbz	r1, 8005c20 <__swsetup_r+0x4c>
 8005c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c12:	4299      	cmp	r1, r3
 8005c14:	d002      	beq.n	8005c1c <__swsetup_r+0x48>
 8005c16:	4628      	mov	r0, r5
 8005c18:	f001 f802 	bl	8006c20 <_free_r>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6363      	str	r3, [r4, #52]	; 0x34
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6063      	str	r3, [r4, #4]
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f043 0308 	orr.w	r3, r3, #8
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	b94b      	cbnz	r3, 8005c50 <__swsetup_r+0x7c>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c46:	d003      	beq.n	8005c50 <__swsetup_r+0x7c>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f002 fa67 	bl	800811e <__smakebuf_r>
 8005c50:	89a0      	ldrh	r0, [r4, #12]
 8005c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c56:	f010 0301 	ands.w	r3, r0, #1
 8005c5a:	d00a      	beq.n	8005c72 <__swsetup_r+0x9e>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	6963      	ldr	r3, [r4, #20]
 8005c62:	425b      	negs	r3, r3
 8005c64:	61a3      	str	r3, [r4, #24]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b943      	cbnz	r3, 8005c7c <__swsetup_r+0xa8>
 8005c6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c6e:	d1c4      	bne.n	8005bfa <__swsetup_r+0x26>
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	0781      	lsls	r1, r0, #30
 8005c74:	bf58      	it	pl
 8005c76:	6963      	ldrpl	r3, [r4, #20]
 8005c78:	60a3      	str	r3, [r4, #8]
 8005c7a:	e7f4      	b.n	8005c66 <__swsetup_r+0x92>
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	e7f7      	b.n	8005c70 <__swsetup_r+0x9c>
 8005c80:	200001d0 	.word	0x200001d0

08005c84 <memset>:
 8005c84:	4603      	mov	r3, r0
 8005c86:	4402      	add	r2, r0
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d100      	bne.n	8005c8e <memset+0xa>
 8005c8c:	4770      	bx	lr
 8005c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c92:	e7f9      	b.n	8005c88 <memset+0x4>

08005c94 <strncmp>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	b16a      	cbz	r2, 8005cb4 <strncmp+0x20>
 8005c98:	3901      	subs	r1, #1
 8005c9a:	1884      	adds	r4, r0, r2
 8005c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d103      	bne.n	8005cb0 <strncmp+0x1c>
 8005ca8:	42a0      	cmp	r0, r4
 8005caa:	d001      	beq.n	8005cb0 <strncmp+0x1c>
 8005cac:	2a00      	cmp	r2, #0
 8005cae:	d1f5      	bne.n	8005c9c <strncmp+0x8>
 8005cb0:	1ad0      	subs	r0, r2, r3
 8005cb2:	bd10      	pop	{r4, pc}
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	e7fc      	b.n	8005cb2 <strncmp+0x1e>

08005cb8 <strtok>:
 8005cb8:	4b16      	ldr	r3, [pc, #88]	; (8005d14 <strtok+0x5c>)
 8005cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	681f      	ldr	r7, [r3, #0]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	b9ec      	cbnz	r4, 8005d04 <strtok+0x4c>
 8005cc8:	2050      	movs	r0, #80	; 0x50
 8005cca:	f7fe f9c1 	bl	8004050 <malloc>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	6478      	str	r0, [r7, #68]	; 0x44
 8005cd2:	b920      	cbnz	r0, 8005cde <strtok+0x26>
 8005cd4:	215b      	movs	r1, #91	; 0x5b
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <strtok+0x60>)
 8005cd8:	4810      	ldr	r0, [pc, #64]	; (8005d1c <strtok+0x64>)
 8005cda:	f000 f915 	bl	8005f08 <__assert_func>
 8005cde:	e9c0 4400 	strd	r4, r4, [r0]
 8005ce2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005ce6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005cea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005cee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005cf2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005cf6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005cfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005cfe:	6184      	str	r4, [r0, #24]
 8005d00:	7704      	strb	r4, [r0, #28]
 8005d02:	6244      	str	r4, [r0, #36]	; 0x24
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	f000 b806 	b.w	8005d20 <__strtok_r>
 8005d14:	200001d0 	.word	0x200001d0
 8005d18:	08008525 	.word	0x08008525
 8005d1c:	0800853c 	.word	0x0800853c

08005d20 <__strtok_r>:
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	b908      	cbnz	r0, 8005d28 <__strtok_r+0x8>
 8005d24:	6810      	ldr	r0, [r2, #0]
 8005d26:	b188      	cbz	r0, 8005d4c <__strtok_r+0x2c>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460f      	mov	r7, r1
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005d32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005d36:	b91e      	cbnz	r6, 8005d40 <__strtok_r+0x20>
 8005d38:	b965      	cbnz	r5, 8005d54 <__strtok_r+0x34>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	6015      	str	r5, [r2, #0]
 8005d3e:	e005      	b.n	8005d4c <__strtok_r+0x2c>
 8005d40:	42b5      	cmp	r5, r6
 8005d42:	d1f6      	bne.n	8005d32 <__strtok_r+0x12>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <__strtok_r+0xa>
 8005d48:	6014      	str	r4, [r2, #0]
 8005d4a:	7003      	strb	r3, [r0, #0]
 8005d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4e:	461c      	mov	r4, r3
 8005d50:	e00c      	b.n	8005d6c <__strtok_r+0x4c>
 8005d52:	b915      	cbnz	r5, 8005d5a <__strtok_r+0x3a>
 8005d54:	460e      	mov	r6, r1
 8005d56:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005d5e:	42ab      	cmp	r3, r5
 8005d60:	d1f7      	bne.n	8005d52 <__strtok_r+0x32>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f3      	beq.n	8005d4e <__strtok_r+0x2e>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005d6c:	6014      	str	r4, [r2, #0]
 8005d6e:	e7ed      	b.n	8005d4c <__strtok_r+0x2c>

08005d70 <strstr>:
 8005d70:	780a      	ldrb	r2, [r1, #0]
 8005d72:	b570      	push	{r4, r5, r6, lr}
 8005d74:	b96a      	cbnz	r2, 8005d92 <strstr+0x22>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d109      	bne.n	8005d90 <strstr+0x20>
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4605      	mov	r5, r0
 8005d80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f6      	beq.n	8005d76 <strstr+0x6>
 8005d88:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005d8c:	429e      	cmp	r6, r3
 8005d8e:	d0f7      	beq.n	8005d80 <strstr+0x10>
 8005d90:	3001      	adds	r0, #1
 8005d92:	7803      	ldrb	r3, [r0, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1ef      	bne.n	8005d78 <strstr+0x8>
 8005d98:	4618      	mov	r0, r3
 8005d9a:	e7ec      	b.n	8005d76 <strstr+0x6>

08005d9c <_localeconv_r>:
 8005d9c:	4800      	ldr	r0, [pc, #0]	; (8005da0 <_localeconv_r+0x4>)
 8005d9e:	4770      	bx	lr
 8005da0:	20000108 	.word	0x20000108

08005da4 <_close_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	2300      	movs	r3, #0
 8005da8:	4d05      	ldr	r5, [pc, #20]	; (8005dc0 <_close_r+0x1c>)
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	f7fc f9ac 	bl	800210c <_close>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_close_r+0x1a>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_close_r+0x1a>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20000414 	.word	0x20000414

08005dc4 <_lseek_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4d05      	ldr	r5, [pc, #20]	; (8005de4 <_lseek_r+0x20>)
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fc f9be 	bl	8002154 <_lseek>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_lseek_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_lseek_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20000414 	.word	0x20000414

08005de8 <_read_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	4611      	mov	r1, r2
 8005df0:	2200      	movs	r2, #0
 8005df2:	4d05      	ldr	r5, [pc, #20]	; (8005e08 <_read_r+0x20>)
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fb fa7e 	bl	80012f8 <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_read_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_read_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000414 	.word	0x20000414

08005e0c <_sbrk_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4d05      	ldr	r5, [pc, #20]	; (8005e28 <_sbrk_r+0x1c>)
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	602b      	str	r3, [r5, #0]
 8005e18:	f7fc f9a8 	bl	800216c <_sbrk>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_sbrk_r+0x1a>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_sbrk_r+0x1a>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	20000414 	.word	0x20000414

08005e2c <_write_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	2200      	movs	r2, #0
 8005e36:	4d05      	ldr	r5, [pc, #20]	; (8005e4c <_write_r+0x20>)
 8005e38:	602a      	str	r2, [r5, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f7fb fa79 	bl	8001332 <_write>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_write_r+0x1e>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_write_r+0x1e>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20000414 	.word	0x20000414

08005e50 <__errno>:
 8005e50:	4b01      	ldr	r3, [pc, #4]	; (8005e58 <__errno+0x8>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	200001d0 	.word	0x200001d0

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	2600      	movs	r6, #0
 8005e60:	4d0c      	ldr	r5, [pc, #48]	; (8005e94 <__libc_init_array+0x38>)
 8005e62:	4c0d      	ldr	r4, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	f002 fa16 	bl	800829c <_init>
 8005e70:	2600      	movs	r6, #0
 8005e72:	4d0a      	ldr	r5, [pc, #40]	; (8005e9c <__libc_init_array+0x40>)
 8005e74:	4c0a      	ldr	r4, [pc, #40]	; (8005ea0 <__libc_init_array+0x44>)
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e84:	4798      	blx	r3
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8e:	4798      	blx	r3
 8005e90:	3601      	adds	r6, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	08008820 	.word	0x08008820
 8005e98:	08008820 	.word	0x08008820
 8005e9c:	08008820 	.word	0x08008820
 8005ea0:	08008824 	.word	0x08008824

08005ea4 <__retarget_lock_init_recursive>:
 8005ea4:	4770      	bx	lr

08005ea6 <__retarget_lock_acquire_recursive>:
 8005ea6:	4770      	bx	lr

08005ea8 <__retarget_lock_release_recursive>:
 8005ea8:	4770      	bx	lr

08005eaa <strcpy>:
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eb0:	f803 2b01 	strb.w	r2, [r3], #1
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	d1f9      	bne.n	8005eac <strcpy+0x2>
 8005eb8:	4770      	bx	lr

08005eba <memchr>:
 8005eba:	4603      	mov	r3, r0
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	b2c9      	uxtb	r1, r1
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	d101      	bne.n	8005ecc <memchr+0x12>
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e003      	b.n	8005ed4 <memchr+0x1a>
 8005ecc:	7804      	ldrb	r4, [r0, #0]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	428c      	cmp	r4, r1
 8005ed2:	d1f6      	bne.n	8005ec2 <memchr+0x8>
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <memcpy>:
 8005ed6:	440a      	add	r2, r1
 8005ed8:	4291      	cmp	r1, r2
 8005eda:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ede:	d100      	bne.n	8005ee2 <memcpy+0xc>
 8005ee0:	4770      	bx	lr
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee8:	4291      	cmp	r1, r2
 8005eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eee:	d1f9      	bne.n	8005ee4 <memcpy+0xe>
 8005ef0:	bd10      	pop	{r4, pc}
	...

08005ef4 <nan>:
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	4901      	ldr	r1, [pc, #4]	; (8005efc <nan+0x8>)
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	7ff80000 	.word	0x7ff80000

08005f00 <nanf>:
 8005f00:	4800      	ldr	r0, [pc, #0]	; (8005f04 <nanf+0x4>)
 8005f02:	4770      	bx	lr
 8005f04:	7fc00000 	.word	0x7fc00000

08005f08 <__assert_func>:
 8005f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <__assert_func+0x2c>)
 8005f10:	4605      	mov	r5, r0
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68d8      	ldr	r0, [r3, #12]
 8005f16:	b14c      	cbz	r4, 8005f2c <__assert_func+0x24>
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <__assert_func+0x30>)
 8005f1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f1e:	9100      	str	r1, [sp, #0]
 8005f20:	462b      	mov	r3, r5
 8005f22:	4906      	ldr	r1, [pc, #24]	; (8005f3c <__assert_func+0x34>)
 8005f24:	f002 f8c4 	bl	80080b0 <fiprintf>
 8005f28:	f002 f958 	bl	80081dc <abort>
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__assert_func+0x38>)
 8005f2e:	461c      	mov	r4, r3
 8005f30:	e7f3      	b.n	8005f1a <__assert_func+0x12>
 8005f32:	bf00      	nop
 8005f34:	200001d0 	.word	0x200001d0
 8005f38:	0800859e 	.word	0x0800859e
 8005f3c:	080085ab 	.word	0x080085ab
 8005f40:	080085d9 	.word	0x080085d9

08005f44 <quorem>:
 8005f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	6903      	ldr	r3, [r0, #16]
 8005f4a:	690c      	ldr	r4, [r1, #16]
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	db7f      	blt.n	8006052 <quorem+0x10e>
 8005f52:	3c01      	subs	r4, #1
 8005f54:	f100 0514 	add.w	r5, r0, #20
 8005f58:	f101 0814 	add.w	r8, r1, #20
 8005f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f72:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f7a:	d331      	bcc.n	8005fe0 <quorem+0x9c>
 8005f7c:	f04f 0e00 	mov.w	lr, #0
 8005f80:	4640      	mov	r0, r8
 8005f82:	46ac      	mov	ip, r5
 8005f84:	46f2      	mov	sl, lr
 8005f86:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f8a:	b293      	uxth	r3, r2
 8005f8c:	fb06 e303 	mla	r3, r6, r3, lr
 8005f90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f94:	0c1a      	lsrs	r2, r3, #16
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	fb06 220e 	mla	r2, r6, lr, r2
 8005f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8005fa0:	f8dc a000 	ldr.w	sl, [ip]
 8005fa4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fa8:	fa1f fa8a 	uxth.w	sl, sl
 8005fac:	4453      	add	r3, sl
 8005fae:	f8dc a000 	ldr.w	sl, [ip]
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fc2:	4581      	cmp	r9, r0
 8005fc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fc8:	f84c 3b04 	str.w	r3, [ip], #4
 8005fcc:	d2db      	bcs.n	8005f86 <quorem+0x42>
 8005fce:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fd2:	b92b      	cbnz	r3, 8005fe0 <quorem+0x9c>
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	429d      	cmp	r5, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	d32d      	bcc.n	800603a <quorem+0xf6>
 8005fde:	613c      	str	r4, [r7, #16]
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f001 fc95 	bl	8007910 <__mcmp>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	db23      	blt.n	8006032 <quorem+0xee>
 8005fea:	4629      	mov	r1, r5
 8005fec:	2000      	movs	r0, #0
 8005fee:	3601      	adds	r6, #1
 8005ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ff4:	f8d1 c000 	ldr.w	ip, [r1]
 8005ff8:	b293      	uxth	r3, r2
 8005ffa:	1ac3      	subs	r3, r0, r3
 8005ffc:	0c12      	lsrs	r2, r2, #16
 8005ffe:	fa1f f08c 	uxth.w	r0, ip
 8006002:	4403      	add	r3, r0
 8006004:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800600c:	b29b      	uxth	r3, r3
 800600e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006012:	45c1      	cmp	r9, r8
 8006014:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006018:	f841 3b04 	str.w	r3, [r1], #4
 800601c:	d2e8      	bcs.n	8005ff0 <quorem+0xac>
 800601e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006026:	b922      	cbnz	r2, 8006032 <quorem+0xee>
 8006028:	3b04      	subs	r3, #4
 800602a:	429d      	cmp	r5, r3
 800602c:	461a      	mov	r2, r3
 800602e:	d30a      	bcc.n	8006046 <quorem+0x102>
 8006030:	613c      	str	r4, [r7, #16]
 8006032:	4630      	mov	r0, r6
 8006034:	b003      	add	sp, #12
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	3b04      	subs	r3, #4
 800603e:	2a00      	cmp	r2, #0
 8006040:	d1cd      	bne.n	8005fde <quorem+0x9a>
 8006042:	3c01      	subs	r4, #1
 8006044:	e7c8      	b.n	8005fd8 <quorem+0x94>
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	3b04      	subs	r3, #4
 800604a:	2a00      	cmp	r2, #0
 800604c:	d1f0      	bne.n	8006030 <quorem+0xec>
 800604e:	3c01      	subs	r4, #1
 8006050:	e7eb      	b.n	800602a <quorem+0xe6>
 8006052:	2000      	movs	r0, #0
 8006054:	e7ee      	b.n	8006034 <quorem+0xf0>
	...

08006058 <_dtoa_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4616      	mov	r6, r2
 800605e:	461f      	mov	r7, r3
 8006060:	69c4      	ldr	r4, [r0, #28]
 8006062:	b099      	sub	sp, #100	; 0x64
 8006064:	4605      	mov	r5, r0
 8006066:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800606a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800606e:	b974      	cbnz	r4, 800608e <_dtoa_r+0x36>
 8006070:	2010      	movs	r0, #16
 8006072:	f7fd ffed 	bl	8004050 <malloc>
 8006076:	4602      	mov	r2, r0
 8006078:	61e8      	str	r0, [r5, #28]
 800607a:	b920      	cbnz	r0, 8006086 <_dtoa_r+0x2e>
 800607c:	21ef      	movs	r1, #239	; 0xef
 800607e:	4bac      	ldr	r3, [pc, #688]	; (8006330 <_dtoa_r+0x2d8>)
 8006080:	48ac      	ldr	r0, [pc, #688]	; (8006334 <_dtoa_r+0x2dc>)
 8006082:	f7ff ff41 	bl	8005f08 <__assert_func>
 8006086:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800608a:	6004      	str	r4, [r0, #0]
 800608c:	60c4      	str	r4, [r0, #12]
 800608e:	69eb      	ldr	r3, [r5, #28]
 8006090:	6819      	ldr	r1, [r3, #0]
 8006092:	b151      	cbz	r1, 80060aa <_dtoa_r+0x52>
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	2301      	movs	r3, #1
 8006098:	4093      	lsls	r3, r2
 800609a:	604a      	str	r2, [r1, #4]
 800609c:	608b      	str	r3, [r1, #8]
 800609e:	4628      	mov	r0, r5
 80060a0:	f001 f9b2 	bl	8007408 <_Bfree>
 80060a4:	2200      	movs	r2, #0
 80060a6:	69eb      	ldr	r3, [r5, #28]
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	1e3b      	subs	r3, r7, #0
 80060ac:	bfaf      	iteee	ge
 80060ae:	2300      	movge	r3, #0
 80060b0:	2201      	movlt	r2, #1
 80060b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060b6:	9305      	strlt	r3, [sp, #20]
 80060b8:	bfa8      	it	ge
 80060ba:	f8c8 3000 	strge.w	r3, [r8]
 80060be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80060c2:	4b9d      	ldr	r3, [pc, #628]	; (8006338 <_dtoa_r+0x2e0>)
 80060c4:	bfb8      	it	lt
 80060c6:	f8c8 2000 	strlt.w	r2, [r8]
 80060ca:	ea33 0309 	bics.w	r3, r3, r9
 80060ce:	d119      	bne.n	8006104 <_dtoa_r+0xac>
 80060d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80060d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060dc:	4333      	orrs	r3, r6
 80060de:	f000 8589 	beq.w	8006bf4 <_dtoa_r+0xb9c>
 80060e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060e4:	b953      	cbnz	r3, 80060fc <_dtoa_r+0xa4>
 80060e6:	4b95      	ldr	r3, [pc, #596]	; (800633c <_dtoa_r+0x2e4>)
 80060e8:	e023      	b.n	8006132 <_dtoa_r+0xda>
 80060ea:	4b95      	ldr	r3, [pc, #596]	; (8006340 <_dtoa_r+0x2e8>)
 80060ec:	9303      	str	r3, [sp, #12]
 80060ee:	3308      	adds	r3, #8
 80060f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	9803      	ldr	r0, [sp, #12]
 80060f6:	b019      	add	sp, #100	; 0x64
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	4b8f      	ldr	r3, [pc, #572]	; (800633c <_dtoa_r+0x2e4>)
 80060fe:	9303      	str	r3, [sp, #12]
 8006100:	3303      	adds	r3, #3
 8006102:	e7f5      	b.n	80060f0 <_dtoa_r+0x98>
 8006104:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006108:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800610c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	f7fa fcb4 	bl	8000a80 <__aeabi_dcmpeq>
 8006118:	4680      	mov	r8, r0
 800611a:	b160      	cbz	r0, 8006136 <_dtoa_r+0xde>
 800611c:	2301      	movs	r3, #1
 800611e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8562 	beq.w	8006bee <_dtoa_r+0xb96>
 800612a:	4b86      	ldr	r3, [pc, #536]	; (8006344 <_dtoa_r+0x2ec>)
 800612c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	9303      	str	r3, [sp, #12]
 8006134:	e7de      	b.n	80060f4 <_dtoa_r+0x9c>
 8006136:	ab16      	add	r3, sp, #88	; 0x58
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	ab17      	add	r3, sp, #92	; 0x5c
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4628      	mov	r0, r5
 8006140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006144:	f001 fcf4 	bl	8007b30 <__d2b>
 8006148:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800614c:	4682      	mov	sl, r0
 800614e:	2c00      	cmp	r4, #0
 8006150:	d07e      	beq.n	8006250 <_dtoa_r+0x1f8>
 8006152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006158:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800615c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006160:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006164:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006168:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800616c:	4619      	mov	r1, r3
 800616e:	2200      	movs	r2, #0
 8006170:	4b75      	ldr	r3, [pc, #468]	; (8006348 <_dtoa_r+0x2f0>)
 8006172:	f7fa f865 	bl	8000240 <__aeabi_dsub>
 8006176:	a368      	add	r3, pc, #416	; (adr r3, 8006318 <_dtoa_r+0x2c0>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa fa18 	bl	80005b0 <__aeabi_dmul>
 8006180:	a367      	add	r3, pc, #412	; (adr r3, 8006320 <_dtoa_r+0x2c8>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f85d 	bl	8000244 <__adddf3>
 800618a:	4606      	mov	r6, r0
 800618c:	4620      	mov	r0, r4
 800618e:	460f      	mov	r7, r1
 8006190:	f7fa f9a4 	bl	80004dc <__aeabi_i2d>
 8006194:	a364      	add	r3, pc, #400	; (adr r3, 8006328 <_dtoa_r+0x2d0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa fa09 	bl	80005b0 <__aeabi_dmul>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa f84d 	bl	8000244 <__adddf3>
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa fcaf 	bl	8000b10 <__aeabi_d2iz>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4683      	mov	fp, r0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa fc6a 	bl	8000a94 <__aeabi_dcmplt>
 80061c0:	b148      	cbz	r0, 80061d6 <_dtoa_r+0x17e>
 80061c2:	4658      	mov	r0, fp
 80061c4:	f7fa f98a 	bl	80004dc <__aeabi_i2d>
 80061c8:	4632      	mov	r2, r6
 80061ca:	463b      	mov	r3, r7
 80061cc:	f7fa fc58 	bl	8000a80 <__aeabi_dcmpeq>
 80061d0:	b908      	cbnz	r0, 80061d6 <_dtoa_r+0x17e>
 80061d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061d6:	f1bb 0f16 	cmp.w	fp, #22
 80061da:	d857      	bhi.n	800628c <_dtoa_r+0x234>
 80061dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061e0:	4b5a      	ldr	r3, [pc, #360]	; (800634c <_dtoa_r+0x2f4>)
 80061e2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f7fa fc53 	bl	8000a94 <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d04e      	beq.n	8006290 <_dtoa_r+0x238>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80061fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061fc:	1b1b      	subs	r3, r3, r4
 80061fe:	1e5a      	subs	r2, r3, #1
 8006200:	bf46      	itte	mi
 8006202:	f1c3 0901 	rsbmi	r9, r3, #1
 8006206:	2300      	movmi	r3, #0
 8006208:	f04f 0900 	movpl.w	r9, #0
 800620c:	9209      	str	r2, [sp, #36]	; 0x24
 800620e:	bf48      	it	mi
 8006210:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006212:	f1bb 0f00 	cmp.w	fp, #0
 8006216:	db3d      	blt.n	8006294 <_dtoa_r+0x23c>
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800621e:	445b      	add	r3, fp
 8006220:	9309      	str	r3, [sp, #36]	; 0x24
 8006222:	2300      	movs	r3, #0
 8006224:	930a      	str	r3, [sp, #40]	; 0x28
 8006226:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006228:	2b09      	cmp	r3, #9
 800622a:	d867      	bhi.n	80062fc <_dtoa_r+0x2a4>
 800622c:	2b05      	cmp	r3, #5
 800622e:	bfc4      	itt	gt
 8006230:	3b04      	subgt	r3, #4
 8006232:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006234:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006236:	bfc8      	it	gt
 8006238:	2400      	movgt	r4, #0
 800623a:	f1a3 0302 	sub.w	r3, r3, #2
 800623e:	bfd8      	it	le
 8006240:	2401      	movle	r4, #1
 8006242:	2b03      	cmp	r3, #3
 8006244:	f200 8086 	bhi.w	8006354 <_dtoa_r+0x2fc>
 8006248:	e8df f003 	tbb	[pc, r3]
 800624c:	5637392c 	.word	0x5637392c
 8006250:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006254:	441c      	add	r4, r3
 8006256:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800625a:	2b20      	cmp	r3, #32
 800625c:	bfc1      	itttt	gt
 800625e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006262:	fa09 f903 	lslgt.w	r9, r9, r3
 8006266:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800626a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800626e:	bfd6      	itet	le
 8006270:	f1c3 0320 	rsble	r3, r3, #32
 8006274:	ea49 0003 	orrgt.w	r0, r9, r3
 8006278:	fa06 f003 	lslle.w	r0, r6, r3
 800627c:	f7fa f91e 	bl	80004bc <__aeabi_ui2d>
 8006280:	2201      	movs	r2, #1
 8006282:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006286:	3c01      	subs	r4, #1
 8006288:	9213      	str	r2, [sp, #76]	; 0x4c
 800628a:	e76f      	b.n	800616c <_dtoa_r+0x114>
 800628c:	2301      	movs	r3, #1
 800628e:	e7b3      	b.n	80061f8 <_dtoa_r+0x1a0>
 8006290:	900f      	str	r0, [sp, #60]	; 0x3c
 8006292:	e7b2      	b.n	80061fa <_dtoa_r+0x1a2>
 8006294:	f1cb 0300 	rsb	r3, fp, #0
 8006298:	930a      	str	r3, [sp, #40]	; 0x28
 800629a:	2300      	movs	r3, #0
 800629c:	eba9 090b 	sub.w	r9, r9, fp
 80062a0:	930e      	str	r3, [sp, #56]	; 0x38
 80062a2:	e7c0      	b.n	8006226 <_dtoa_r+0x1ce>
 80062a4:	2300      	movs	r3, #0
 80062a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dc55      	bgt.n	800635a <_dtoa_r+0x302>
 80062ae:	2301      	movs	r3, #1
 80062b0:	461a      	mov	r2, r3
 80062b2:	9306      	str	r3, [sp, #24]
 80062b4:	9308      	str	r3, [sp, #32]
 80062b6:	9223      	str	r2, [sp, #140]	; 0x8c
 80062b8:	e00b      	b.n	80062d2 <_dtoa_r+0x27a>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7f3      	b.n	80062a6 <_dtoa_r+0x24e>
 80062be:	2300      	movs	r3, #0
 80062c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062c4:	445b      	add	r3, fp
 80062c6:	9306      	str	r3, [sp, #24]
 80062c8:	3301      	adds	r3, #1
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	9308      	str	r3, [sp, #32]
 80062ce:	bfb8      	it	lt
 80062d0:	2301      	movlt	r3, #1
 80062d2:	2100      	movs	r1, #0
 80062d4:	2204      	movs	r2, #4
 80062d6:	69e8      	ldr	r0, [r5, #28]
 80062d8:	f102 0614 	add.w	r6, r2, #20
 80062dc:	429e      	cmp	r6, r3
 80062de:	d940      	bls.n	8006362 <_dtoa_r+0x30a>
 80062e0:	6041      	str	r1, [r0, #4]
 80062e2:	4628      	mov	r0, r5
 80062e4:	f001 f850 	bl	8007388 <_Balloc>
 80062e8:	9003      	str	r0, [sp, #12]
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d13c      	bne.n	8006368 <_dtoa_r+0x310>
 80062ee:	4602      	mov	r2, r0
 80062f0:	f240 11af 	movw	r1, #431	; 0x1af
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <_dtoa_r+0x2f8>)
 80062f6:	e6c3      	b.n	8006080 <_dtoa_r+0x28>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e7e1      	b.n	80062c0 <_dtoa_r+0x268>
 80062fc:	2401      	movs	r4, #1
 80062fe:	2300      	movs	r3, #0
 8006300:	940b      	str	r4, [sp, #44]	; 0x2c
 8006302:	9322      	str	r3, [sp, #136]	; 0x88
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	2200      	movs	r2, #0
 800630a:	9306      	str	r3, [sp, #24]
 800630c:	9308      	str	r3, [sp, #32]
 800630e:	2312      	movs	r3, #18
 8006310:	e7d1      	b.n	80062b6 <_dtoa_r+0x25e>
 8006312:	bf00      	nop
 8006314:	f3af 8000 	nop.w
 8006318:	636f4361 	.word	0x636f4361
 800631c:	3fd287a7 	.word	0x3fd287a7
 8006320:	8b60c8b3 	.word	0x8b60c8b3
 8006324:	3fc68a28 	.word	0x3fc68a28
 8006328:	509f79fb 	.word	0x509f79fb
 800632c:	3fd34413 	.word	0x3fd34413
 8006330:	08008525 	.word	0x08008525
 8006334:	080085e7 	.word	0x080085e7
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	080085e3 	.word	0x080085e3
 8006340:	080085da 	.word	0x080085da
 8006344:	08008502 	.word	0x08008502
 8006348:	3ff80000 	.word	0x3ff80000
 800634c:	08008738 	.word	0x08008738
 8006350:	0800863f 	.word	0x0800863f
 8006354:	2301      	movs	r3, #1
 8006356:	930b      	str	r3, [sp, #44]	; 0x2c
 8006358:	e7d4      	b.n	8006304 <_dtoa_r+0x2ac>
 800635a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800635c:	9306      	str	r3, [sp, #24]
 800635e:	9308      	str	r3, [sp, #32]
 8006360:	e7b7      	b.n	80062d2 <_dtoa_r+0x27a>
 8006362:	3101      	adds	r1, #1
 8006364:	0052      	lsls	r2, r2, #1
 8006366:	e7b7      	b.n	80062d8 <_dtoa_r+0x280>
 8006368:	69eb      	ldr	r3, [r5, #28]
 800636a:	9a03      	ldr	r2, [sp, #12]
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	9b08      	ldr	r3, [sp, #32]
 8006370:	2b0e      	cmp	r3, #14
 8006372:	f200 80a8 	bhi.w	80064c6 <_dtoa_r+0x46e>
 8006376:	2c00      	cmp	r4, #0
 8006378:	f000 80a5 	beq.w	80064c6 <_dtoa_r+0x46e>
 800637c:	f1bb 0f00 	cmp.w	fp, #0
 8006380:	dd34      	ble.n	80063ec <_dtoa_r+0x394>
 8006382:	4b9a      	ldr	r3, [pc, #616]	; (80065ec <_dtoa_r+0x594>)
 8006384:	f00b 020f 	and.w	r2, fp, #15
 8006388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006390:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006394:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006398:	ea4f 142b 	mov.w	r4, fp, asr #4
 800639c:	d016      	beq.n	80063cc <_dtoa_r+0x374>
 800639e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a2:	4b93      	ldr	r3, [pc, #588]	; (80065f0 <_dtoa_r+0x598>)
 80063a4:	2703      	movs	r7, #3
 80063a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063aa:	f7fa fa2b 	bl	8000804 <__aeabi_ddiv>
 80063ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063b2:	f004 040f 	and.w	r4, r4, #15
 80063b6:	4e8e      	ldr	r6, [pc, #568]	; (80065f0 <_dtoa_r+0x598>)
 80063b8:	b954      	cbnz	r4, 80063d0 <_dtoa_r+0x378>
 80063ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c2:	f7fa fa1f 	bl	8000804 <__aeabi_ddiv>
 80063c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ca:	e029      	b.n	8006420 <_dtoa_r+0x3c8>
 80063cc:	2702      	movs	r7, #2
 80063ce:	e7f2      	b.n	80063b6 <_dtoa_r+0x35e>
 80063d0:	07e1      	lsls	r1, r4, #31
 80063d2:	d508      	bpl.n	80063e6 <_dtoa_r+0x38e>
 80063d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063dc:	f7fa f8e8 	bl	80005b0 <__aeabi_dmul>
 80063e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063e4:	3701      	adds	r7, #1
 80063e6:	1064      	asrs	r4, r4, #1
 80063e8:	3608      	adds	r6, #8
 80063ea:	e7e5      	b.n	80063b8 <_dtoa_r+0x360>
 80063ec:	f000 80a5 	beq.w	800653a <_dtoa_r+0x4e2>
 80063f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063f4:	f1cb 0400 	rsb	r4, fp, #0
 80063f8:	4b7c      	ldr	r3, [pc, #496]	; (80065ec <_dtoa_r+0x594>)
 80063fa:	f004 020f 	and.w	r2, r4, #15
 80063fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7fa f8d3 	bl	80005b0 <__aeabi_dmul>
 800640a:	2702      	movs	r7, #2
 800640c:	2300      	movs	r3, #0
 800640e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006412:	4e77      	ldr	r6, [pc, #476]	; (80065f0 <_dtoa_r+0x598>)
 8006414:	1124      	asrs	r4, r4, #4
 8006416:	2c00      	cmp	r4, #0
 8006418:	f040 8084 	bne.w	8006524 <_dtoa_r+0x4cc>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1d2      	bne.n	80063c6 <_dtoa_r+0x36e>
 8006420:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006424:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8087 	beq.w	800653e <_dtoa_r+0x4e6>
 8006430:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006434:	2200      	movs	r2, #0
 8006436:	4b6f      	ldr	r3, [pc, #444]	; (80065f4 <_dtoa_r+0x59c>)
 8006438:	f7fa fb2c 	bl	8000a94 <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	d07e      	beq.n	800653e <_dtoa_r+0x4e6>
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d07b      	beq.n	800653e <_dtoa_r+0x4e6>
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dd38      	ble.n	80064be <_dtoa_r+0x466>
 800644c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006450:	2200      	movs	r2, #0
 8006452:	4b69      	ldr	r3, [pc, #420]	; (80065f8 <_dtoa_r+0x5a0>)
 8006454:	f7fa f8ac 	bl	80005b0 <__aeabi_dmul>
 8006458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800645c:	9c06      	ldr	r4, [sp, #24]
 800645e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006462:	3701      	adds	r7, #1
 8006464:	4638      	mov	r0, r7
 8006466:	f7fa f839 	bl	80004dc <__aeabi_i2d>
 800646a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800646e:	f7fa f89f 	bl	80005b0 <__aeabi_dmul>
 8006472:	2200      	movs	r2, #0
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <_dtoa_r+0x5a4>)
 8006476:	f7f9 fee5 	bl	8000244 <__adddf3>
 800647a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800647e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006482:	9611      	str	r6, [sp, #68]	; 0x44
 8006484:	2c00      	cmp	r4, #0
 8006486:	d15d      	bne.n	8006544 <_dtoa_r+0x4ec>
 8006488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800648c:	2200      	movs	r2, #0
 800648e:	4b5c      	ldr	r3, [pc, #368]	; (8006600 <_dtoa_r+0x5a8>)
 8006490:	f7f9 fed6 	bl	8000240 <__aeabi_dsub>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800649c:	4633      	mov	r3, r6
 800649e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064a0:	f7fa fb16 	bl	8000ad0 <__aeabi_dcmpgt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f040 8295 	bne.w	80069d4 <_dtoa_r+0x97c>
 80064aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064b4:	f7fa faee 	bl	8000a94 <__aeabi_dcmplt>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	f040 8289 	bne.w	80069d0 <_dtoa_r+0x978>
 80064be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80064c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f2c0 8151 	blt.w	8006770 <_dtoa_r+0x718>
 80064ce:	f1bb 0f0e 	cmp.w	fp, #14
 80064d2:	f300 814d 	bgt.w	8006770 <_dtoa_r+0x718>
 80064d6:	4b45      	ldr	r3, [pc, #276]	; (80065ec <_dtoa_r+0x594>)
 80064d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80064e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f280 80da 	bge.w	80066a0 <_dtoa_r+0x648>
 80064ec:	9b08      	ldr	r3, [sp, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f300 80d6 	bgt.w	80066a0 <_dtoa_r+0x648>
 80064f4:	f040 826b 	bne.w	80069ce <_dtoa_r+0x976>
 80064f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064fc:	2200      	movs	r2, #0
 80064fe:	4b40      	ldr	r3, [pc, #256]	; (8006600 <_dtoa_r+0x5a8>)
 8006500:	f7fa f856 	bl	80005b0 <__aeabi_dmul>
 8006504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006508:	f7fa fad8 	bl	8000abc <__aeabi_dcmpge>
 800650c:	9c08      	ldr	r4, [sp, #32]
 800650e:	4626      	mov	r6, r4
 8006510:	2800      	cmp	r0, #0
 8006512:	f040 8241 	bne.w	8006998 <_dtoa_r+0x940>
 8006516:	2331      	movs	r3, #49	; 0x31
 8006518:	9f03      	ldr	r7, [sp, #12]
 800651a:	f10b 0b01 	add.w	fp, fp, #1
 800651e:	f807 3b01 	strb.w	r3, [r7], #1
 8006522:	e23d      	b.n	80069a0 <_dtoa_r+0x948>
 8006524:	07e2      	lsls	r2, r4, #31
 8006526:	d505      	bpl.n	8006534 <_dtoa_r+0x4dc>
 8006528:	e9d6 2300 	ldrd	r2, r3, [r6]
 800652c:	f7fa f840 	bl	80005b0 <__aeabi_dmul>
 8006530:	2301      	movs	r3, #1
 8006532:	3701      	adds	r7, #1
 8006534:	1064      	asrs	r4, r4, #1
 8006536:	3608      	adds	r6, #8
 8006538:	e76d      	b.n	8006416 <_dtoa_r+0x3be>
 800653a:	2702      	movs	r7, #2
 800653c:	e770      	b.n	8006420 <_dtoa_r+0x3c8>
 800653e:	46d8      	mov	r8, fp
 8006540:	9c08      	ldr	r4, [sp, #32]
 8006542:	e78f      	b.n	8006464 <_dtoa_r+0x40c>
 8006544:	9903      	ldr	r1, [sp, #12]
 8006546:	4b29      	ldr	r3, [pc, #164]	; (80065ec <_dtoa_r+0x594>)
 8006548:	4421      	add	r1, r4
 800654a:	9112      	str	r1, [sp, #72]	; 0x48
 800654c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800654e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006552:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006556:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800655a:	2900      	cmp	r1, #0
 800655c:	d054      	beq.n	8006608 <_dtoa_r+0x5b0>
 800655e:	2000      	movs	r0, #0
 8006560:	4928      	ldr	r1, [pc, #160]	; (8006604 <_dtoa_r+0x5ac>)
 8006562:	f7fa f94f 	bl	8000804 <__aeabi_ddiv>
 8006566:	463b      	mov	r3, r7
 8006568:	4632      	mov	r2, r6
 800656a:	f7f9 fe69 	bl	8000240 <__aeabi_dsub>
 800656e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006572:	9f03      	ldr	r7, [sp, #12]
 8006574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006578:	f7fa faca 	bl	8000b10 <__aeabi_d2iz>
 800657c:	4604      	mov	r4, r0
 800657e:	f7f9 ffad 	bl	80004dc <__aeabi_i2d>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800658a:	f7f9 fe59 	bl	8000240 <__aeabi_dsub>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	3430      	adds	r4, #48	; 0x30
 8006594:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800659c:	f807 4b01 	strb.w	r4, [r7], #1
 80065a0:	f7fa fa78 	bl	8000a94 <__aeabi_dcmplt>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d173      	bne.n	8006690 <_dtoa_r+0x638>
 80065a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ac:	2000      	movs	r0, #0
 80065ae:	4911      	ldr	r1, [pc, #68]	; (80065f4 <_dtoa_r+0x59c>)
 80065b0:	f7f9 fe46 	bl	8000240 <__aeabi_dsub>
 80065b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065b8:	f7fa fa6c 	bl	8000a94 <__aeabi_dcmplt>
 80065bc:	2800      	cmp	r0, #0
 80065be:	f040 80b6 	bne.w	800672e <_dtoa_r+0x6d6>
 80065c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065c4:	429f      	cmp	r7, r3
 80065c6:	f43f af7a 	beq.w	80064be <_dtoa_r+0x466>
 80065ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ce:	2200      	movs	r2, #0
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <_dtoa_r+0x5a0>)
 80065d2:	f7f9 ffed 	bl	80005b0 <__aeabi_dmul>
 80065d6:	2200      	movs	r2, #0
 80065d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <_dtoa_r+0x5a0>)
 80065e2:	f7f9 ffe5 	bl	80005b0 <__aeabi_dmul>
 80065e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ea:	e7c3      	b.n	8006574 <_dtoa_r+0x51c>
 80065ec:	08008738 	.word	0x08008738
 80065f0:	08008710 	.word	0x08008710
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	40240000 	.word	0x40240000
 80065fc:	401c0000 	.word	0x401c0000
 8006600:	40140000 	.word	0x40140000
 8006604:	3fe00000 	.word	0x3fe00000
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7f9 ffd0 	bl	80005b0 <__aeabi_dmul>
 8006610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006616:	9c03      	ldr	r4, [sp, #12]
 8006618:	9314      	str	r3, [sp, #80]	; 0x50
 800661a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800661e:	f7fa fa77 	bl	8000b10 <__aeabi_d2iz>
 8006622:	9015      	str	r0, [sp, #84]	; 0x54
 8006624:	f7f9 ff5a 	bl	80004dc <__aeabi_i2d>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006630:	f7f9 fe06 	bl	8000240 <__aeabi_dsub>
 8006634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006636:	4606      	mov	r6, r0
 8006638:	3330      	adds	r3, #48	; 0x30
 800663a:	f804 3b01 	strb.w	r3, [r4], #1
 800663e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006640:	460f      	mov	r7, r1
 8006642:	429c      	cmp	r4, r3
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	d124      	bne.n	8006694 <_dtoa_r+0x63c>
 800664a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800664e:	4baf      	ldr	r3, [pc, #700]	; (800690c <_dtoa_r+0x8b4>)
 8006650:	f7f9 fdf8 	bl	8000244 <__adddf3>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7fa fa38 	bl	8000ad0 <__aeabi_dcmpgt>
 8006660:	2800      	cmp	r0, #0
 8006662:	d163      	bne.n	800672c <_dtoa_r+0x6d4>
 8006664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006668:	2000      	movs	r0, #0
 800666a:	49a8      	ldr	r1, [pc, #672]	; (800690c <_dtoa_r+0x8b4>)
 800666c:	f7f9 fde8 	bl	8000240 <__aeabi_dsub>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7fa fa0c 	bl	8000a94 <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f43f af1e 	beq.w	80064be <_dtoa_r+0x466>
 8006682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006684:	1e7b      	subs	r3, r7, #1
 8006686:	9314      	str	r3, [sp, #80]	; 0x50
 8006688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800668c:	2b30      	cmp	r3, #48	; 0x30
 800668e:	d0f8      	beq.n	8006682 <_dtoa_r+0x62a>
 8006690:	46c3      	mov	fp, r8
 8006692:	e03b      	b.n	800670c <_dtoa_r+0x6b4>
 8006694:	4b9e      	ldr	r3, [pc, #632]	; (8006910 <_dtoa_r+0x8b8>)
 8006696:	f7f9 ff8b 	bl	80005b0 <__aeabi_dmul>
 800669a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800669e:	e7bc      	b.n	800661a <_dtoa_r+0x5c2>
 80066a0:	9f03      	ldr	r7, [sp, #12]
 80066a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80066a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066aa:	4640      	mov	r0, r8
 80066ac:	4649      	mov	r1, r9
 80066ae:	f7fa f8a9 	bl	8000804 <__aeabi_ddiv>
 80066b2:	f7fa fa2d 	bl	8000b10 <__aeabi_d2iz>
 80066b6:	4604      	mov	r4, r0
 80066b8:	f7f9 ff10 	bl	80004dc <__aeabi_i2d>
 80066bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066c0:	f7f9 ff76 	bl	80005b0 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7f9 fdb8 	bl	8000240 <__aeabi_dsub>
 80066d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80066d4:	f807 6b01 	strb.w	r6, [r7], #1
 80066d8:	9e03      	ldr	r6, [sp, #12]
 80066da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80066de:	1bbe      	subs	r6, r7, r6
 80066e0:	45b4      	cmp	ip, r6
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	d136      	bne.n	8006756 <_dtoa_r+0x6fe>
 80066e8:	f7f9 fdac 	bl	8000244 <__adddf3>
 80066ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066f0:	4680      	mov	r8, r0
 80066f2:	4689      	mov	r9, r1
 80066f4:	f7fa f9ec 	bl	8000ad0 <__aeabi_dcmpgt>
 80066f8:	bb58      	cbnz	r0, 8006752 <_dtoa_r+0x6fa>
 80066fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066fe:	4640      	mov	r0, r8
 8006700:	4649      	mov	r1, r9
 8006702:	f7fa f9bd 	bl	8000a80 <__aeabi_dcmpeq>
 8006706:	b108      	cbz	r0, 800670c <_dtoa_r+0x6b4>
 8006708:	07e3      	lsls	r3, r4, #31
 800670a:	d422      	bmi.n	8006752 <_dtoa_r+0x6fa>
 800670c:	4651      	mov	r1, sl
 800670e:	4628      	mov	r0, r5
 8006710:	f000 fe7a 	bl	8007408 <_Bfree>
 8006714:	2300      	movs	r3, #0
 8006716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006718:	703b      	strb	r3, [r7, #0]
 800671a:	f10b 0301 	add.w	r3, fp, #1
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006722:	2b00      	cmp	r3, #0
 8006724:	f43f ace6 	beq.w	80060f4 <_dtoa_r+0x9c>
 8006728:	601f      	str	r7, [r3, #0]
 800672a:	e4e3      	b.n	80060f4 <_dtoa_r+0x9c>
 800672c:	4627      	mov	r7, r4
 800672e:	463b      	mov	r3, r7
 8006730:	461f      	mov	r7, r3
 8006732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006736:	2a39      	cmp	r2, #57	; 0x39
 8006738:	d107      	bne.n	800674a <_dtoa_r+0x6f2>
 800673a:	9a03      	ldr	r2, [sp, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d1f7      	bne.n	8006730 <_dtoa_r+0x6d8>
 8006740:	2230      	movs	r2, #48	; 0x30
 8006742:	9903      	ldr	r1, [sp, #12]
 8006744:	f108 0801 	add.w	r8, r8, #1
 8006748:	700a      	strb	r2, [r1, #0]
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	3201      	adds	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e79e      	b.n	8006690 <_dtoa_r+0x638>
 8006752:	46d8      	mov	r8, fp
 8006754:	e7eb      	b.n	800672e <_dtoa_r+0x6d6>
 8006756:	2200      	movs	r2, #0
 8006758:	4b6d      	ldr	r3, [pc, #436]	; (8006910 <_dtoa_r+0x8b8>)
 800675a:	f7f9 ff29 	bl	80005b0 <__aeabi_dmul>
 800675e:	2200      	movs	r2, #0
 8006760:	2300      	movs	r3, #0
 8006762:	4680      	mov	r8, r0
 8006764:	4689      	mov	r9, r1
 8006766:	f7fa f98b 	bl	8000a80 <__aeabi_dcmpeq>
 800676a:	2800      	cmp	r0, #0
 800676c:	d09b      	beq.n	80066a6 <_dtoa_r+0x64e>
 800676e:	e7cd      	b.n	800670c <_dtoa_r+0x6b4>
 8006770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006772:	2a00      	cmp	r2, #0
 8006774:	f000 80c4 	beq.w	8006900 <_dtoa_r+0x8a8>
 8006778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800677a:	2a01      	cmp	r2, #1
 800677c:	f300 80a8 	bgt.w	80068d0 <_dtoa_r+0x878>
 8006780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006782:	2a00      	cmp	r2, #0
 8006784:	f000 80a0 	beq.w	80068c8 <_dtoa_r+0x870>
 8006788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800678c:	464f      	mov	r7, r9
 800678e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006792:	2101      	movs	r1, #1
 8006794:	441a      	add	r2, r3
 8006796:	4628      	mov	r0, r5
 8006798:	4499      	add	r9, r3
 800679a:	9209      	str	r2, [sp, #36]	; 0x24
 800679c:	f000 ff34 	bl	8007608 <__i2b>
 80067a0:	4606      	mov	r6, r0
 80067a2:	b15f      	cbz	r7, 80067bc <_dtoa_r+0x764>
 80067a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dd08      	ble.n	80067bc <_dtoa_r+0x764>
 80067aa:	42bb      	cmp	r3, r7
 80067ac:	bfa8      	it	ge
 80067ae:	463b      	movge	r3, r7
 80067b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b2:	eba9 0903 	sub.w	r9, r9, r3
 80067b6:	1aff      	subs	r7, r7, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	9309      	str	r3, [sp, #36]	; 0x24
 80067bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067be:	b1f3      	cbz	r3, 80067fe <_dtoa_r+0x7a6>
 80067c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80a0 	beq.w	8006908 <_dtoa_r+0x8b0>
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	dd10      	ble.n	80067ee <_dtoa_r+0x796>
 80067cc:	4631      	mov	r1, r6
 80067ce:	4622      	mov	r2, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	f000 ffd7 	bl	8007784 <__pow5mult>
 80067d6:	4652      	mov	r2, sl
 80067d8:	4601      	mov	r1, r0
 80067da:	4606      	mov	r6, r0
 80067dc:	4628      	mov	r0, r5
 80067de:	f000 ff29 	bl	8007634 <__multiply>
 80067e2:	4680      	mov	r8, r0
 80067e4:	4651      	mov	r1, sl
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 fe0e 	bl	8007408 <_Bfree>
 80067ec:	46c2      	mov	sl, r8
 80067ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f0:	1b1a      	subs	r2, r3, r4
 80067f2:	d004      	beq.n	80067fe <_dtoa_r+0x7a6>
 80067f4:	4651      	mov	r1, sl
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 ffc4 	bl	8007784 <__pow5mult>
 80067fc:	4682      	mov	sl, r0
 80067fe:	2101      	movs	r1, #1
 8006800:	4628      	mov	r0, r5
 8006802:	f000 ff01 	bl	8007608 <__i2b>
 8006806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006808:	4604      	mov	r4, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f340 8082 	ble.w	8006914 <_dtoa_r+0x8bc>
 8006810:	461a      	mov	r2, r3
 8006812:	4601      	mov	r1, r0
 8006814:	4628      	mov	r0, r5
 8006816:	f000 ffb5 	bl	8007784 <__pow5mult>
 800681a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800681c:	4604      	mov	r4, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	dd7b      	ble.n	800691a <_dtoa_r+0x8c2>
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800682c:	6918      	ldr	r0, [r3, #16]
 800682e:	f000 fe9d 	bl	800756c <__hi0bits>
 8006832:	f1c0 0020 	rsb	r0, r0, #32
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	4418      	add	r0, r3
 800683a:	f010 001f 	ands.w	r0, r0, #31
 800683e:	f000 8092 	beq.w	8006966 <_dtoa_r+0x90e>
 8006842:	f1c0 0320 	rsb	r3, r0, #32
 8006846:	2b04      	cmp	r3, #4
 8006848:	f340 8085 	ble.w	8006956 <_dtoa_r+0x8fe>
 800684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684e:	f1c0 001c 	rsb	r0, r0, #28
 8006852:	4403      	add	r3, r0
 8006854:	4481      	add	r9, r0
 8006856:	4407      	add	r7, r0
 8006858:	9309      	str	r3, [sp, #36]	; 0x24
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0x814>
 8006860:	4651      	mov	r1, sl
 8006862:	464a      	mov	r2, r9
 8006864:	4628      	mov	r0, r5
 8006866:	f000 ffe7 	bl	8007838 <__lshift>
 800686a:	4682      	mov	sl, r0
 800686c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd05      	ble.n	800687e <_dtoa_r+0x826>
 8006872:	4621      	mov	r1, r4
 8006874:	461a      	mov	r2, r3
 8006876:	4628      	mov	r0, r5
 8006878:	f000 ffde 	bl	8007838 <__lshift>
 800687c:	4604      	mov	r4, r0
 800687e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d072      	beq.n	800696a <_dtoa_r+0x912>
 8006884:	4621      	mov	r1, r4
 8006886:	4650      	mov	r0, sl
 8006888:	f001 f842 	bl	8007910 <__mcmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	da6c      	bge.n	800696a <_dtoa_r+0x912>
 8006890:	2300      	movs	r3, #0
 8006892:	4651      	mov	r1, sl
 8006894:	220a      	movs	r2, #10
 8006896:	4628      	mov	r0, r5
 8006898:	f000 fdd8 	bl	800744c <__multadd>
 800689c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689e:	4682      	mov	sl, r0
 80068a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 81ac 	beq.w	8006c02 <_dtoa_r+0xbaa>
 80068aa:	2300      	movs	r3, #0
 80068ac:	4631      	mov	r1, r6
 80068ae:	220a      	movs	r2, #10
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 fdcb 	bl	800744c <__multadd>
 80068b6:	9b06      	ldr	r3, [sp, #24]
 80068b8:	4606      	mov	r6, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f300 8093 	bgt.w	80069e6 <_dtoa_r+0x98e>
 80068c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	dc59      	bgt.n	800697a <_dtoa_r+0x922>
 80068c6:	e08e      	b.n	80069e6 <_dtoa_r+0x98e>
 80068c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068ce:	e75d      	b.n	800678c <_dtoa_r+0x734>
 80068d0:	9b08      	ldr	r3, [sp, #32]
 80068d2:	1e5c      	subs	r4, r3, #1
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	bfbf      	itttt	lt
 80068da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80068de:	1ae3      	sublt	r3, r4, r3
 80068e0:	18d2      	addlt	r2, r2, r3
 80068e2:	bfa8      	it	ge
 80068e4:	1b1c      	subge	r4, r3, r4
 80068e6:	9b08      	ldr	r3, [sp, #32]
 80068e8:	bfbe      	ittt	lt
 80068ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 80068ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80068ee:	2400      	movlt	r4, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfb5      	itete	lt
 80068f4:	eba9 0703 	sublt.w	r7, r9, r3
 80068f8:	464f      	movge	r7, r9
 80068fa:	2300      	movlt	r3, #0
 80068fc:	9b08      	ldrge	r3, [sp, #32]
 80068fe:	e747      	b.n	8006790 <_dtoa_r+0x738>
 8006900:	464f      	mov	r7, r9
 8006902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006904:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006906:	e74c      	b.n	80067a2 <_dtoa_r+0x74a>
 8006908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800690a:	e773      	b.n	80067f4 <_dtoa_r+0x79c>
 800690c:	3fe00000 	.word	0x3fe00000
 8006910:	40240000 	.word	0x40240000
 8006914:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006916:	2b01      	cmp	r3, #1
 8006918:	dc18      	bgt.n	800694c <_dtoa_r+0x8f4>
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	b9b3      	cbnz	r3, 800694c <_dtoa_r+0x8f4>
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006924:	b993      	cbnz	r3, 800694c <_dtoa_r+0x8f4>
 8006926:	9b05      	ldr	r3, [sp, #20]
 8006928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800692c:	0d1b      	lsrs	r3, r3, #20
 800692e:	051b      	lsls	r3, r3, #20
 8006930:	b17b      	cbz	r3, 8006952 <_dtoa_r+0x8fa>
 8006932:	f04f 0801 	mov.w	r8, #1
 8006936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006938:	f109 0901 	add.w	r9, r9, #1
 800693c:	3301      	adds	r3, #1
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006942:	2b00      	cmp	r3, #0
 8006944:	f47f af6f 	bne.w	8006826 <_dtoa_r+0x7ce>
 8006948:	2001      	movs	r0, #1
 800694a:	e774      	b.n	8006836 <_dtoa_r+0x7de>
 800694c:	f04f 0800 	mov.w	r8, #0
 8006950:	e7f6      	b.n	8006940 <_dtoa_r+0x8e8>
 8006952:	4698      	mov	r8, r3
 8006954:	e7f4      	b.n	8006940 <_dtoa_r+0x8e8>
 8006956:	d080      	beq.n	800685a <_dtoa_r+0x802>
 8006958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800695a:	331c      	adds	r3, #28
 800695c:	441a      	add	r2, r3
 800695e:	4499      	add	r9, r3
 8006960:	441f      	add	r7, r3
 8006962:	9209      	str	r2, [sp, #36]	; 0x24
 8006964:	e779      	b.n	800685a <_dtoa_r+0x802>
 8006966:	4603      	mov	r3, r0
 8006968:	e7f6      	b.n	8006958 <_dtoa_r+0x900>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	dc34      	bgt.n	80069da <_dtoa_r+0x982>
 8006970:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006972:	2b02      	cmp	r3, #2
 8006974:	dd31      	ble.n	80069da <_dtoa_r+0x982>
 8006976:	9b08      	ldr	r3, [sp, #32]
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	b963      	cbnz	r3, 8006998 <_dtoa_r+0x940>
 800697e:	4621      	mov	r1, r4
 8006980:	2205      	movs	r2, #5
 8006982:	4628      	mov	r0, r5
 8006984:	f000 fd62 	bl	800744c <__multadd>
 8006988:	4601      	mov	r1, r0
 800698a:	4604      	mov	r4, r0
 800698c:	4650      	mov	r0, sl
 800698e:	f000 ffbf 	bl	8007910 <__mcmp>
 8006992:	2800      	cmp	r0, #0
 8006994:	f73f adbf 	bgt.w	8006516 <_dtoa_r+0x4be>
 8006998:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800699a:	9f03      	ldr	r7, [sp, #12]
 800699c:	ea6f 0b03 	mvn.w	fp, r3
 80069a0:	f04f 0800 	mov.w	r8, #0
 80069a4:	4621      	mov	r1, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fd2e 	bl	8007408 <_Bfree>
 80069ac:	2e00      	cmp	r6, #0
 80069ae:	f43f aead 	beq.w	800670c <_dtoa_r+0x6b4>
 80069b2:	f1b8 0f00 	cmp.w	r8, #0
 80069b6:	d005      	beq.n	80069c4 <_dtoa_r+0x96c>
 80069b8:	45b0      	cmp	r8, r6
 80069ba:	d003      	beq.n	80069c4 <_dtoa_r+0x96c>
 80069bc:	4641      	mov	r1, r8
 80069be:	4628      	mov	r0, r5
 80069c0:	f000 fd22 	bl	8007408 <_Bfree>
 80069c4:	4631      	mov	r1, r6
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fd1e 	bl	8007408 <_Bfree>
 80069cc:	e69e      	b.n	800670c <_dtoa_r+0x6b4>
 80069ce:	2400      	movs	r4, #0
 80069d0:	4626      	mov	r6, r4
 80069d2:	e7e1      	b.n	8006998 <_dtoa_r+0x940>
 80069d4:	46c3      	mov	fp, r8
 80069d6:	4626      	mov	r6, r4
 80069d8:	e59d      	b.n	8006516 <_dtoa_r+0x4be>
 80069da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80c8 	beq.w	8006b72 <_dtoa_r+0xb1a>
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	9306      	str	r3, [sp, #24]
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	dd05      	ble.n	80069f6 <_dtoa_r+0x99e>
 80069ea:	4631      	mov	r1, r6
 80069ec:	463a      	mov	r2, r7
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 ff22 	bl	8007838 <__lshift>
 80069f4:	4606      	mov	r6, r0
 80069f6:	f1b8 0f00 	cmp.w	r8, #0
 80069fa:	d05b      	beq.n	8006ab4 <_dtoa_r+0xa5c>
 80069fc:	4628      	mov	r0, r5
 80069fe:	6871      	ldr	r1, [r6, #4]
 8006a00:	f000 fcc2 	bl	8007388 <_Balloc>
 8006a04:	4607      	mov	r7, r0
 8006a06:	b928      	cbnz	r0, 8006a14 <_dtoa_r+0x9bc>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006a0e:	4b81      	ldr	r3, [pc, #516]	; (8006c14 <_dtoa_r+0xbbc>)
 8006a10:	f7ff bb36 	b.w	8006080 <_dtoa_r+0x28>
 8006a14:	6932      	ldr	r2, [r6, #16]
 8006a16:	f106 010c 	add.w	r1, r6, #12
 8006a1a:	3202      	adds	r2, #2
 8006a1c:	0092      	lsls	r2, r2, #2
 8006a1e:	300c      	adds	r0, #12
 8006a20:	f7ff fa59 	bl	8005ed6 <memcpy>
 8006a24:	2201      	movs	r2, #1
 8006a26:	4639      	mov	r1, r7
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 ff05 	bl	8007838 <__lshift>
 8006a2e:	46b0      	mov	r8, r6
 8006a30:	4606      	mov	r6, r0
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	9a03      	ldr	r2, [sp, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	9308      	str	r3, [sp, #32]
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	930a      	str	r3, [sp, #40]	; 0x28
 8006a48:	9b08      	ldr	r3, [sp, #32]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4650      	mov	r0, sl
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	f7ff fa77 	bl	8005f44 <quorem>
 8006a56:	4641      	mov	r1, r8
 8006a58:	9006      	str	r0, [sp, #24]
 8006a5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a5e:	4650      	mov	r0, sl
 8006a60:	f000 ff56 	bl	8007910 <__mcmp>
 8006a64:	4632      	mov	r2, r6
 8006a66:	9009      	str	r0, [sp, #36]	; 0x24
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 ff6c 	bl	8007948 <__mdiff>
 8006a70:	68c2      	ldr	r2, [r0, #12]
 8006a72:	4607      	mov	r7, r0
 8006a74:	bb02      	cbnz	r2, 8006ab8 <_dtoa_r+0xa60>
 8006a76:	4601      	mov	r1, r0
 8006a78:	4650      	mov	r0, sl
 8006a7a:	f000 ff49 	bl	8007910 <__mcmp>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	4639      	mov	r1, r7
 8006a82:	4628      	mov	r0, r5
 8006a84:	920c      	str	r2, [sp, #48]	; 0x30
 8006a86:	f000 fcbf 	bl	8007408 <_Bfree>
 8006a8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a8e:	9f08      	ldr	r7, [sp, #32]
 8006a90:	ea43 0102 	orr.w	r1, r3, r2
 8006a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a96:	4319      	orrs	r1, r3
 8006a98:	d110      	bne.n	8006abc <_dtoa_r+0xa64>
 8006a9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a9e:	d029      	beq.n	8006af4 <_dtoa_r+0xa9c>
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd02      	ble.n	8006aac <_dtoa_r+0xa54>
 8006aa6:	9b06      	ldr	r3, [sp, #24]
 8006aa8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	f883 9000 	strb.w	r9, [r3]
 8006ab2:	e777      	b.n	80069a4 <_dtoa_r+0x94c>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	e7ba      	b.n	8006a2e <_dtoa_r+0x9d6>
 8006ab8:	2201      	movs	r2, #1
 8006aba:	e7e1      	b.n	8006a80 <_dtoa_r+0xa28>
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	db04      	blt.n	8006acc <_dtoa_r+0xa74>
 8006ac2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	d120      	bne.n	8006b0e <_dtoa_r+0xab6>
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	dded      	ble.n	8006aac <_dtoa_r+0xa54>
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 feaf 	bl	8007838 <__lshift>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4682      	mov	sl, r0
 8006ade:	f000 ff17 	bl	8007910 <__mcmp>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	dc03      	bgt.n	8006aee <_dtoa_r+0xa96>
 8006ae6:	d1e1      	bne.n	8006aac <_dtoa_r+0xa54>
 8006ae8:	f019 0f01 	tst.w	r9, #1
 8006aec:	d0de      	beq.n	8006aac <_dtoa_r+0xa54>
 8006aee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006af2:	d1d8      	bne.n	8006aa6 <_dtoa_r+0xa4e>
 8006af4:	2339      	movs	r3, #57	; 0x39
 8006af6:	9a04      	ldr	r2, [sp, #16]
 8006af8:	7013      	strb	r3, [r2, #0]
 8006afa:	463b      	mov	r3, r7
 8006afc:	461f      	mov	r7, r3
 8006afe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	2a39      	cmp	r2, #57	; 0x39
 8006b06:	d06b      	beq.n	8006be0 <_dtoa_r+0xb88>
 8006b08:	3201      	adds	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	e74a      	b.n	80069a4 <_dtoa_r+0x94c>
 8006b0e:	2a00      	cmp	r2, #0
 8006b10:	dd07      	ble.n	8006b22 <_dtoa_r+0xaca>
 8006b12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b16:	d0ed      	beq.n	8006af4 <_dtoa_r+0xa9c>
 8006b18:	9a04      	ldr	r2, [sp, #16]
 8006b1a:	f109 0301 	add.w	r3, r9, #1
 8006b1e:	7013      	strb	r3, [r2, #0]
 8006b20:	e740      	b.n	80069a4 <_dtoa_r+0x94c>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b26:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d042      	beq.n	8006bb4 <_dtoa_r+0xb5c>
 8006b2e:	4651      	mov	r1, sl
 8006b30:	2300      	movs	r3, #0
 8006b32:	220a      	movs	r2, #10
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fc89 	bl	800744c <__multadd>
 8006b3a:	45b0      	cmp	r8, r6
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f04f 020a 	mov.w	r2, #10
 8006b46:	4641      	mov	r1, r8
 8006b48:	4628      	mov	r0, r5
 8006b4a:	d107      	bne.n	8006b5c <_dtoa_r+0xb04>
 8006b4c:	f000 fc7e 	bl	800744c <__multadd>
 8006b50:	4680      	mov	r8, r0
 8006b52:	4606      	mov	r6, r0
 8006b54:	9b08      	ldr	r3, [sp, #32]
 8006b56:	3301      	adds	r3, #1
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	e775      	b.n	8006a48 <_dtoa_r+0x9f0>
 8006b5c:	f000 fc76 	bl	800744c <__multadd>
 8006b60:	4631      	mov	r1, r6
 8006b62:	4680      	mov	r8, r0
 8006b64:	2300      	movs	r3, #0
 8006b66:	220a      	movs	r2, #10
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 fc6f 	bl	800744c <__multadd>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	e7f0      	b.n	8006b54 <_dtoa_r+0xafc>
 8006b72:	9b08      	ldr	r3, [sp, #32]
 8006b74:	9306      	str	r3, [sp, #24]
 8006b76:	9f03      	ldr	r7, [sp, #12]
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f7ff f9e2 	bl	8005f44 <quorem>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b86:	f807 9b01 	strb.w	r9, [r7], #1
 8006b8a:	1afa      	subs	r2, r7, r3
 8006b8c:	9b06      	ldr	r3, [sp, #24]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	dd07      	ble.n	8006ba2 <_dtoa_r+0xb4a>
 8006b92:	4651      	mov	r1, sl
 8006b94:	2300      	movs	r3, #0
 8006b96:	220a      	movs	r2, #10
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 fc57 	bl	800744c <__multadd>
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	e7ea      	b.n	8006b78 <_dtoa_r+0xb20>
 8006ba2:	9b06      	ldr	r3, [sp, #24]
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfcc      	ite	gt
 8006bac:	461f      	movgt	r7, r3
 8006bae:	2701      	movle	r7, #1
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	441f      	add	r7, r3
 8006bb4:	4651      	mov	r1, sl
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fe3d 	bl	8007838 <__lshift>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	f000 fea5 	bl	8007910 <__mcmp>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	dc97      	bgt.n	8006afa <_dtoa_r+0xaa2>
 8006bca:	d102      	bne.n	8006bd2 <_dtoa_r+0xb7a>
 8006bcc:	f019 0f01 	tst.w	r9, #1
 8006bd0:	d193      	bne.n	8006afa <_dtoa_r+0xaa2>
 8006bd2:	463b      	mov	r3, r7
 8006bd4:	461f      	mov	r7, r3
 8006bd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bda:	2a30      	cmp	r2, #48	; 0x30
 8006bdc:	d0fa      	beq.n	8006bd4 <_dtoa_r+0xb7c>
 8006bde:	e6e1      	b.n	80069a4 <_dtoa_r+0x94c>
 8006be0:	9a03      	ldr	r2, [sp, #12]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d18a      	bne.n	8006afc <_dtoa_r+0xaa4>
 8006be6:	2331      	movs	r3, #49	; 0x31
 8006be8:	f10b 0b01 	add.w	fp, fp, #1
 8006bec:	e797      	b.n	8006b1e <_dtoa_r+0xac6>
 8006bee:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <_dtoa_r+0xbc0>)
 8006bf0:	f7ff ba9f 	b.w	8006132 <_dtoa_r+0xda>
 8006bf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f47f aa77 	bne.w	80060ea <_dtoa_r+0x92>
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <_dtoa_r+0xbc4>)
 8006bfe:	f7ff ba98 	b.w	8006132 <_dtoa_r+0xda>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dcb6      	bgt.n	8006b76 <_dtoa_r+0xb1e>
 8006c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	f73f aeb5 	bgt.w	800697a <_dtoa_r+0x922>
 8006c10:	e7b1      	b.n	8006b76 <_dtoa_r+0xb1e>
 8006c12:	bf00      	nop
 8006c14:	0800863f 	.word	0x0800863f
 8006c18:	08008501 	.word	0x08008501
 8006c1c:	080085da 	.word	0x080085da

08006c20 <_free_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4605      	mov	r5, r0
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d040      	beq.n	8006caa <_free_r+0x8a>
 8006c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2c:	1f0c      	subs	r4, r1, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfb8      	it	lt
 8006c32:	18e4      	addlt	r4, r4, r3
 8006c34:	f7fd fabc 	bl	80041b0 <__malloc_lock>
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <_free_r+0x8c>)
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	b933      	cbnz	r3, 8006c4c <_free_r+0x2c>
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	6014      	str	r4, [r2, #0]
 8006c42:	4628      	mov	r0, r5
 8006c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c48:	f7fd bab8 	b.w	80041bc <__malloc_unlock>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d908      	bls.n	8006c62 <_free_r+0x42>
 8006c50:	6820      	ldr	r0, [r4, #0]
 8006c52:	1821      	adds	r1, r4, r0
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf01      	itttt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	1809      	addeq	r1, r1, r0
 8006c5e:	6021      	streq	r1, [r4, #0]
 8006c60:	e7ed      	b.n	8006c3e <_free_r+0x1e>
 8006c62:	461a      	mov	r2, r3
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	b10b      	cbz	r3, 8006c6c <_free_r+0x4c>
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	d9fa      	bls.n	8006c62 <_free_r+0x42>
 8006c6c:	6811      	ldr	r1, [r2, #0]
 8006c6e:	1850      	adds	r0, r2, r1
 8006c70:	42a0      	cmp	r0, r4
 8006c72:	d10b      	bne.n	8006c8c <_free_r+0x6c>
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	4401      	add	r1, r0
 8006c78:	1850      	adds	r0, r2, r1
 8006c7a:	4283      	cmp	r3, r0
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	d1e0      	bne.n	8006c42 <_free_r+0x22>
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	4408      	add	r0, r1
 8006c86:	6010      	str	r0, [r2, #0]
 8006c88:	6053      	str	r3, [r2, #4]
 8006c8a:	e7da      	b.n	8006c42 <_free_r+0x22>
 8006c8c:	d902      	bls.n	8006c94 <_free_r+0x74>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	602b      	str	r3, [r5, #0]
 8006c92:	e7d6      	b.n	8006c42 <_free_r+0x22>
 8006c94:	6820      	ldr	r0, [r4, #0]
 8006c96:	1821      	adds	r1, r4, r0
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf01      	itttt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	1809      	addeq	r1, r1, r0
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	6054      	str	r4, [r2, #4]
 8006ca8:	e7cb      	b.n	8006c42 <_free_r+0x22>
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	200002d0 	.word	0x200002d0

08006cb0 <rshift>:
 8006cb0:	6903      	ldr	r3, [r0, #16]
 8006cb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006cba:	f100 0414 	add.w	r4, r0, #20
 8006cbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006cc2:	dd46      	ble.n	8006d52 <rshift+0xa2>
 8006cc4:	f011 011f 	ands.w	r1, r1, #31
 8006cc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ccc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006cd0:	d10c      	bne.n	8006cec <rshift+0x3c>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f100 0710 	add.w	r7, r0, #16
 8006cd8:	42b1      	cmp	r1, r6
 8006cda:	d335      	bcc.n	8006d48 <rshift+0x98>
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	1eea      	subs	r2, r5, #3
 8006ce2:	4296      	cmp	r6, r2
 8006ce4:	bf38      	it	cc
 8006ce6:	2300      	movcc	r3, #0
 8006ce8:	4423      	add	r3, r4
 8006cea:	e015      	b.n	8006d18 <rshift+0x68>
 8006cec:	46a1      	mov	r9, r4
 8006cee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006cf2:	f1c1 0820 	rsb	r8, r1, #32
 8006cf6:	40cf      	lsrs	r7, r1
 8006cf8:	f105 0e04 	add.w	lr, r5, #4
 8006cfc:	4576      	cmp	r6, lr
 8006cfe:	46f4      	mov	ip, lr
 8006d00:	d816      	bhi.n	8006d30 <rshift+0x80>
 8006d02:	1a9a      	subs	r2, r3, r2
 8006d04:	0092      	lsls	r2, r2, #2
 8006d06:	3a04      	subs	r2, #4
 8006d08:	3501      	adds	r5, #1
 8006d0a:	42ae      	cmp	r6, r5
 8006d0c:	bf38      	it	cc
 8006d0e:	2200      	movcc	r2, #0
 8006d10:	18a3      	adds	r3, r4, r2
 8006d12:	50a7      	str	r7, [r4, r2]
 8006d14:	b107      	cbz	r7, 8006d18 <rshift+0x68>
 8006d16:	3304      	adds	r3, #4
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	eba3 0204 	sub.w	r2, r3, r4
 8006d1e:	bf08      	it	eq
 8006d20:	2300      	moveq	r3, #0
 8006d22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d26:	6102      	str	r2, [r0, #16]
 8006d28:	bf08      	it	eq
 8006d2a:	6143      	streq	r3, [r0, #20]
 8006d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d30:	f8dc c000 	ldr.w	ip, [ip]
 8006d34:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d38:	ea4c 0707 	orr.w	r7, ip, r7
 8006d3c:	f849 7b04 	str.w	r7, [r9], #4
 8006d40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d44:	40cf      	lsrs	r7, r1
 8006d46:	e7d9      	b.n	8006cfc <rshift+0x4c>
 8006d48:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d50:	e7c2      	b.n	8006cd8 <rshift+0x28>
 8006d52:	4623      	mov	r3, r4
 8006d54:	e7e0      	b.n	8006d18 <rshift+0x68>

08006d56 <__hexdig_fun>:
 8006d56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006d5a:	2b09      	cmp	r3, #9
 8006d5c:	d802      	bhi.n	8006d64 <__hexdig_fun+0xe>
 8006d5e:	3820      	subs	r0, #32
 8006d60:	b2c0      	uxtb	r0, r0
 8006d62:	4770      	bx	lr
 8006d64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d801      	bhi.n	8006d70 <__hexdig_fun+0x1a>
 8006d6c:	3847      	subs	r0, #71	; 0x47
 8006d6e:	e7f7      	b.n	8006d60 <__hexdig_fun+0xa>
 8006d70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d801      	bhi.n	8006d7c <__hexdig_fun+0x26>
 8006d78:	3827      	subs	r0, #39	; 0x27
 8006d7a:	e7f1      	b.n	8006d60 <__hexdig_fun+0xa>
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	4770      	bx	lr

08006d80 <__gethex>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	4681      	mov	r9, r0
 8006d86:	468a      	mov	sl, r1
 8006d88:	4617      	mov	r7, r2
 8006d8a:	680a      	ldr	r2, [r1, #0]
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	f102 0b02 	add.w	fp, r2, #2
 8006d92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	32fe      	adds	r2, #254	; 0xfe
 8006d9e:	eb02 030b 	add.w	r3, r2, fp
 8006da2:	46d8      	mov	r8, fp
 8006da4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	2830      	cmp	r0, #48	; 0x30
 8006dac:	d0f7      	beq.n	8006d9e <__gethex+0x1e>
 8006dae:	f7ff ffd2 	bl	8006d56 <__hexdig_fun>
 8006db2:	4604      	mov	r4, r0
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d138      	bne.n	8006e2a <__gethex+0xaa>
 8006db8:	2201      	movs	r2, #1
 8006dba:	4640      	mov	r0, r8
 8006dbc:	49a7      	ldr	r1, [pc, #668]	; (800705c <__gethex+0x2dc>)
 8006dbe:	f7fe ff69 	bl	8005c94 <strncmp>
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d169      	bne.n	8006e9c <__gethex+0x11c>
 8006dc8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006dcc:	465d      	mov	r5, fp
 8006dce:	f7ff ffc2 	bl	8006d56 <__hexdig_fun>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d064      	beq.n	8006ea0 <__gethex+0x120>
 8006dd6:	465a      	mov	r2, fp
 8006dd8:	7810      	ldrb	r0, [r2, #0]
 8006dda:	4690      	mov	r8, r2
 8006ddc:	2830      	cmp	r0, #48	; 0x30
 8006dde:	f102 0201 	add.w	r2, r2, #1
 8006de2:	d0f9      	beq.n	8006dd8 <__gethex+0x58>
 8006de4:	f7ff ffb7 	bl	8006d56 <__hexdig_fun>
 8006de8:	2301      	movs	r3, #1
 8006dea:	fab0 f480 	clz	r4, r0
 8006dee:	465e      	mov	r6, fp
 8006df0:	0964      	lsrs	r4, r4, #5
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	4642      	mov	r2, r8
 8006df6:	4615      	mov	r5, r2
 8006df8:	7828      	ldrb	r0, [r5, #0]
 8006dfa:	3201      	adds	r2, #1
 8006dfc:	f7ff ffab 	bl	8006d56 <__hexdig_fun>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1f8      	bne.n	8006df6 <__gethex+0x76>
 8006e04:	2201      	movs	r2, #1
 8006e06:	4628      	mov	r0, r5
 8006e08:	4994      	ldr	r1, [pc, #592]	; (800705c <__gethex+0x2dc>)
 8006e0a:	f7fe ff43 	bl	8005c94 <strncmp>
 8006e0e:	b978      	cbnz	r0, 8006e30 <__gethex+0xb0>
 8006e10:	b946      	cbnz	r6, 8006e24 <__gethex+0xa4>
 8006e12:	1c6e      	adds	r6, r5, #1
 8006e14:	4632      	mov	r2, r6
 8006e16:	4615      	mov	r5, r2
 8006e18:	7828      	ldrb	r0, [r5, #0]
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	f7ff ff9b 	bl	8006d56 <__hexdig_fun>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d1f8      	bne.n	8006e16 <__gethex+0x96>
 8006e24:	1b73      	subs	r3, r6, r5
 8006e26:	009e      	lsls	r6, r3, #2
 8006e28:	e004      	b.n	8006e34 <__gethex+0xb4>
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	4626      	mov	r6, r4
 8006e2e:	e7e1      	b.n	8006df4 <__gethex+0x74>
 8006e30:	2e00      	cmp	r6, #0
 8006e32:	d1f7      	bne.n	8006e24 <__gethex+0xa4>
 8006e34:	782b      	ldrb	r3, [r5, #0]
 8006e36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e3a:	2b50      	cmp	r3, #80	; 0x50
 8006e3c:	d13d      	bne.n	8006eba <__gethex+0x13a>
 8006e3e:	786b      	ldrb	r3, [r5, #1]
 8006e40:	2b2b      	cmp	r3, #43	; 0x2b
 8006e42:	d02f      	beq.n	8006ea4 <__gethex+0x124>
 8006e44:	2b2d      	cmp	r3, #45	; 0x2d
 8006e46:	d031      	beq.n	8006eac <__gethex+0x12c>
 8006e48:	f04f 0b00 	mov.w	fp, #0
 8006e4c:	1c69      	adds	r1, r5, #1
 8006e4e:	7808      	ldrb	r0, [r1, #0]
 8006e50:	f7ff ff81 	bl	8006d56 <__hexdig_fun>
 8006e54:	1e42      	subs	r2, r0, #1
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	2a18      	cmp	r2, #24
 8006e5a:	d82e      	bhi.n	8006eba <__gethex+0x13a>
 8006e5c:	f1a0 0210 	sub.w	r2, r0, #16
 8006e60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e64:	f7ff ff77 	bl	8006d56 <__hexdig_fun>
 8006e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8006e6c:	fa5f fc8c 	uxtb.w	ip, ip
 8006e70:	f1bc 0f18 	cmp.w	ip, #24
 8006e74:	d91d      	bls.n	8006eb2 <__gethex+0x132>
 8006e76:	f1bb 0f00 	cmp.w	fp, #0
 8006e7a:	d000      	beq.n	8006e7e <__gethex+0xfe>
 8006e7c:	4252      	negs	r2, r2
 8006e7e:	4416      	add	r6, r2
 8006e80:	f8ca 1000 	str.w	r1, [sl]
 8006e84:	b1dc      	cbz	r4, 8006ebe <__gethex+0x13e>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bf14      	ite	ne
 8006e8c:	f04f 0800 	movne.w	r8, #0
 8006e90:	f04f 0806 	moveq.w	r8, #6
 8006e94:	4640      	mov	r0, r8
 8006e96:	b005      	add	sp, #20
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	4645      	mov	r5, r8
 8006e9e:	4626      	mov	r6, r4
 8006ea0:	2401      	movs	r4, #1
 8006ea2:	e7c7      	b.n	8006e34 <__gethex+0xb4>
 8006ea4:	f04f 0b00 	mov.w	fp, #0
 8006ea8:	1ca9      	adds	r1, r5, #2
 8006eaa:	e7d0      	b.n	8006e4e <__gethex+0xce>
 8006eac:	f04f 0b01 	mov.w	fp, #1
 8006eb0:	e7fa      	b.n	8006ea8 <__gethex+0x128>
 8006eb2:	230a      	movs	r3, #10
 8006eb4:	fb03 0002 	mla	r0, r3, r2, r0
 8006eb8:	e7d0      	b.n	8006e5c <__gethex+0xdc>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	e7e0      	b.n	8006e80 <__gethex+0x100>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	eba5 0308 	sub.w	r3, r5, r8
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	2b07      	cmp	r3, #7
 8006ec8:	dc0a      	bgt.n	8006ee0 <__gethex+0x160>
 8006eca:	4648      	mov	r0, r9
 8006ecc:	f000 fa5c 	bl	8007388 <_Balloc>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	b940      	cbnz	r0, 8006ee6 <__gethex+0x166>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	21e4      	movs	r1, #228	; 0xe4
 8006ed8:	4b61      	ldr	r3, [pc, #388]	; (8007060 <__gethex+0x2e0>)
 8006eda:	4862      	ldr	r0, [pc, #392]	; (8007064 <__gethex+0x2e4>)
 8006edc:	f7ff f814 	bl	8005f08 <__assert_func>
 8006ee0:	3101      	adds	r1, #1
 8006ee2:	105b      	asrs	r3, r3, #1
 8006ee4:	e7ef      	b.n	8006ec6 <__gethex+0x146>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	469b      	mov	fp, r3
 8006eea:	f100 0a14 	add.w	sl, r0, #20
 8006eee:	f8cd a004 	str.w	sl, [sp, #4]
 8006ef2:	45a8      	cmp	r8, r5
 8006ef4:	d344      	bcc.n	8006f80 <__gethex+0x200>
 8006ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006efa:	4658      	mov	r0, fp
 8006efc:	f848 bb04 	str.w	fp, [r8], #4
 8006f00:	eba8 080a 	sub.w	r8, r8, sl
 8006f04:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8006f08:	6122      	str	r2, [r4, #16]
 8006f0a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8006f0e:	f000 fb2d 	bl	800756c <__hi0bits>
 8006f12:	683d      	ldr	r5, [r7, #0]
 8006f14:	eba8 0800 	sub.w	r8, r8, r0
 8006f18:	45a8      	cmp	r8, r5
 8006f1a:	dd59      	ble.n	8006fd0 <__gethex+0x250>
 8006f1c:	eba8 0805 	sub.w	r8, r8, r5
 8006f20:	4641      	mov	r1, r8
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 feab 	bl	8007c7e <__any_on>
 8006f28:	4683      	mov	fp, r0
 8006f2a:	b1b8      	cbz	r0, 8006f5c <__gethex+0x1dc>
 8006f2c:	f04f 0b01 	mov.w	fp, #1
 8006f30:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f34:	1159      	asrs	r1, r3, #5
 8006f36:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006f3a:	f003 021f 	and.w	r2, r3, #31
 8006f3e:	fa0b f202 	lsl.w	r2, fp, r2
 8006f42:	420a      	tst	r2, r1
 8006f44:	d00a      	beq.n	8006f5c <__gethex+0x1dc>
 8006f46:	455b      	cmp	r3, fp
 8006f48:	dd06      	ble.n	8006f58 <__gethex+0x1d8>
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f1a8 0102 	sub.w	r1, r8, #2
 8006f50:	f000 fe95 	bl	8007c7e <__any_on>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d138      	bne.n	8006fca <__gethex+0x24a>
 8006f58:	f04f 0b02 	mov.w	fp, #2
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f7ff fea6 	bl	8006cb0 <rshift>
 8006f64:	4446      	add	r6, r8
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	42b3      	cmp	r3, r6
 8006f6a:	da41      	bge.n	8006ff0 <__gethex+0x270>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fa4a 	bl	8007408 <_Bfree>
 8006f74:	2300      	movs	r3, #0
 8006f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e789      	b.n	8006e94 <__gethex+0x114>
 8006f80:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006f84:	2a2e      	cmp	r2, #46	; 0x2e
 8006f86:	d014      	beq.n	8006fb2 <__gethex+0x232>
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d106      	bne.n	8006f9a <__gethex+0x21a>
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	f843 bb04 	str.w	fp, [r3], #4
 8006f92:	f04f 0b00 	mov.w	fp, #0
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	465b      	mov	r3, fp
 8006f9a:	7828      	ldrb	r0, [r5, #0]
 8006f9c:	9303      	str	r3, [sp, #12]
 8006f9e:	f7ff feda 	bl	8006d56 <__hexdig_fun>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	f000 000f 	and.w	r0, r0, #15
 8006fa8:	4098      	lsls	r0, r3
 8006faa:	ea4b 0b00 	orr.w	fp, fp, r0
 8006fae:	3304      	adds	r3, #4
 8006fb0:	e79f      	b.n	8006ef2 <__gethex+0x172>
 8006fb2:	45a8      	cmp	r8, r5
 8006fb4:	d8e8      	bhi.n	8006f88 <__gethex+0x208>
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4628      	mov	r0, r5
 8006fba:	4928      	ldr	r1, [pc, #160]	; (800705c <__gethex+0x2dc>)
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	f7fe fe69 	bl	8005c94 <strncmp>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d1df      	bne.n	8006f88 <__gethex+0x208>
 8006fc8:	e793      	b.n	8006ef2 <__gethex+0x172>
 8006fca:	f04f 0b03 	mov.w	fp, #3
 8006fce:	e7c5      	b.n	8006f5c <__gethex+0x1dc>
 8006fd0:	da0b      	bge.n	8006fea <__gethex+0x26a>
 8006fd2:	eba5 0808 	sub.w	r8, r5, r8
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4642      	mov	r2, r8
 8006fda:	4648      	mov	r0, r9
 8006fdc:	f000 fc2c 	bl	8007838 <__lshift>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	eba6 0608 	sub.w	r6, r6, r8
 8006fe6:	f100 0a14 	add.w	sl, r0, #20
 8006fea:	f04f 0b00 	mov.w	fp, #0
 8006fee:	e7ba      	b.n	8006f66 <__gethex+0x1e6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	42b3      	cmp	r3, r6
 8006ff4:	dd74      	ble.n	80070e0 <__gethex+0x360>
 8006ff6:	1b9e      	subs	r6, r3, r6
 8006ff8:	42b5      	cmp	r5, r6
 8006ffa:	dc35      	bgt.n	8007068 <__gethex+0x2e8>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d023      	beq.n	800704a <__gethex+0x2ca>
 8007002:	2b03      	cmp	r3, #3
 8007004:	d025      	beq.n	8007052 <__gethex+0x2d2>
 8007006:	2b01      	cmp	r3, #1
 8007008:	d115      	bne.n	8007036 <__gethex+0x2b6>
 800700a:	42b5      	cmp	r5, r6
 800700c:	d113      	bne.n	8007036 <__gethex+0x2b6>
 800700e:	2d01      	cmp	r5, #1
 8007010:	d10b      	bne.n	800702a <__gethex+0x2aa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	9a02      	ldr	r2, [sp, #8]
 8007016:	f04f 0862 	mov.w	r8, #98	; 0x62
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	2301      	movs	r3, #1
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	f8ca 3000 	str.w	r3, [sl]
 8007024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007026:	601c      	str	r4, [r3, #0]
 8007028:	e734      	b.n	8006e94 <__gethex+0x114>
 800702a:	4620      	mov	r0, r4
 800702c:	1e69      	subs	r1, r5, #1
 800702e:	f000 fe26 	bl	8007c7e <__any_on>
 8007032:	2800      	cmp	r0, #0
 8007034:	d1ed      	bne.n	8007012 <__gethex+0x292>
 8007036:	4621      	mov	r1, r4
 8007038:	4648      	mov	r0, r9
 800703a:	f000 f9e5 	bl	8007408 <_Bfree>
 800703e:	2300      	movs	r3, #0
 8007040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007042:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	e724      	b.n	8006e94 <__gethex+0x114>
 800704a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f2      	bne.n	8007036 <__gethex+0x2b6>
 8007050:	e7df      	b.n	8007012 <__gethex+0x292>
 8007052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1dc      	bne.n	8007012 <__gethex+0x292>
 8007058:	e7ed      	b.n	8007036 <__gethex+0x2b6>
 800705a:	bf00      	nop
 800705c:	0800839e 	.word	0x0800839e
 8007060:	0800863f 	.word	0x0800863f
 8007064:	08008650 	.word	0x08008650
 8007068:	f106 38ff 	add.w	r8, r6, #4294967295
 800706c:	f1bb 0f00 	cmp.w	fp, #0
 8007070:	d133      	bne.n	80070da <__gethex+0x35a>
 8007072:	f1b8 0f00 	cmp.w	r8, #0
 8007076:	d004      	beq.n	8007082 <__gethex+0x302>
 8007078:	4641      	mov	r1, r8
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fdff 	bl	8007c7e <__any_on>
 8007080:	4683      	mov	fp, r0
 8007082:	2301      	movs	r3, #1
 8007084:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007088:	f008 081f 	and.w	r8, r8, #31
 800708c:	fa03 f308 	lsl.w	r3, r3, r8
 8007090:	f04f 0802 	mov.w	r8, #2
 8007094:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007098:	4631      	mov	r1, r6
 800709a:	4213      	tst	r3, r2
 800709c:	4620      	mov	r0, r4
 800709e:	bf18      	it	ne
 80070a0:	f04b 0b02 	orrne.w	fp, fp, #2
 80070a4:	1bad      	subs	r5, r5, r6
 80070a6:	f7ff fe03 	bl	8006cb0 <rshift>
 80070aa:	687e      	ldr	r6, [r7, #4]
 80070ac:	f1bb 0f00 	cmp.w	fp, #0
 80070b0:	d04a      	beq.n	8007148 <__gethex+0x3c8>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d016      	beq.n	80070e6 <__gethex+0x366>
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d018      	beq.n	80070ee <__gethex+0x36e>
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d109      	bne.n	80070d4 <__gethex+0x354>
 80070c0:	f01b 0f02 	tst.w	fp, #2
 80070c4:	d006      	beq.n	80070d4 <__gethex+0x354>
 80070c6:	f8da 3000 	ldr.w	r3, [sl]
 80070ca:	ea4b 0b03 	orr.w	fp, fp, r3
 80070ce:	f01b 0f01 	tst.w	fp, #1
 80070d2:	d10f      	bne.n	80070f4 <__gethex+0x374>
 80070d4:	f048 0810 	orr.w	r8, r8, #16
 80070d8:	e036      	b.n	8007148 <__gethex+0x3c8>
 80070da:	f04f 0b01 	mov.w	fp, #1
 80070de:	e7d0      	b.n	8007082 <__gethex+0x302>
 80070e0:	f04f 0801 	mov.w	r8, #1
 80070e4:	e7e2      	b.n	80070ac <__gethex+0x32c>
 80070e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070e8:	f1c3 0301 	rsb	r3, r3, #1
 80070ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0ef      	beq.n	80070d4 <__gethex+0x354>
 80070f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80070f8:	f104 0214 	add.w	r2, r4, #20
 80070fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2300      	movs	r3, #0
 8007104:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007108:	4694      	mov	ip, r2
 800710a:	f852 1b04 	ldr.w	r1, [r2], #4
 800710e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007112:	d01e      	beq.n	8007152 <__gethex+0x3d2>
 8007114:	3101      	adds	r1, #1
 8007116:	f8cc 1000 	str.w	r1, [ip]
 800711a:	f1b8 0f02 	cmp.w	r8, #2
 800711e:	f104 0214 	add.w	r2, r4, #20
 8007122:	d13d      	bne.n	80071a0 <__gethex+0x420>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	42ab      	cmp	r3, r5
 800712a:	d10b      	bne.n	8007144 <__gethex+0x3c4>
 800712c:	2301      	movs	r3, #1
 800712e:	1169      	asrs	r1, r5, #5
 8007130:	f005 051f 	and.w	r5, r5, #31
 8007134:	fa03 f505 	lsl.w	r5, r3, r5
 8007138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800713c:	421d      	tst	r5, r3
 800713e:	bf18      	it	ne
 8007140:	f04f 0801 	movne.w	r8, #1
 8007144:	f048 0820 	orr.w	r8, r8, #32
 8007148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714a:	601c      	str	r4, [r3, #0]
 800714c:	9b02      	ldr	r3, [sp, #8]
 800714e:	601e      	str	r6, [r3, #0]
 8007150:	e6a0      	b.n	8006e94 <__gethex+0x114>
 8007152:	4290      	cmp	r0, r2
 8007154:	f842 3c04 	str.w	r3, [r2, #-4]
 8007158:	d8d6      	bhi.n	8007108 <__gethex+0x388>
 800715a:	68a2      	ldr	r2, [r4, #8]
 800715c:	4593      	cmp	fp, r2
 800715e:	db17      	blt.n	8007190 <__gethex+0x410>
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4648      	mov	r0, r9
 8007164:	3101      	adds	r1, #1
 8007166:	f000 f90f 	bl	8007388 <_Balloc>
 800716a:	4682      	mov	sl, r0
 800716c:	b918      	cbnz	r0, 8007176 <__gethex+0x3f6>
 800716e:	4602      	mov	r2, r0
 8007170:	2184      	movs	r1, #132	; 0x84
 8007172:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <__gethex+0x45c>)
 8007174:	e6b1      	b.n	8006eda <__gethex+0x15a>
 8007176:	6922      	ldr	r2, [r4, #16]
 8007178:	f104 010c 	add.w	r1, r4, #12
 800717c:	3202      	adds	r2, #2
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	300c      	adds	r0, #12
 8007182:	f7fe fea8 	bl	8005ed6 <memcpy>
 8007186:	4621      	mov	r1, r4
 8007188:	4648      	mov	r0, r9
 800718a:	f000 f93d 	bl	8007408 <_Bfree>
 800718e:	4654      	mov	r4, sl
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	1c51      	adds	r1, r2, #1
 8007194:	6121      	str	r1, [r4, #16]
 8007196:	2101      	movs	r1, #1
 8007198:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800719c:	6151      	str	r1, [r2, #20]
 800719e:	e7bc      	b.n	800711a <__gethex+0x39a>
 80071a0:	6921      	ldr	r1, [r4, #16]
 80071a2:	4559      	cmp	r1, fp
 80071a4:	dd0b      	ble.n	80071be <__gethex+0x43e>
 80071a6:	2101      	movs	r1, #1
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff fd81 	bl	8006cb0 <rshift>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3601      	adds	r6, #1
 80071b2:	42b3      	cmp	r3, r6
 80071b4:	f6ff aeda 	blt.w	8006f6c <__gethex+0x1ec>
 80071b8:	f04f 0801 	mov.w	r8, #1
 80071bc:	e7c2      	b.n	8007144 <__gethex+0x3c4>
 80071be:	f015 051f 	ands.w	r5, r5, #31
 80071c2:	d0f9      	beq.n	80071b8 <__gethex+0x438>
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	f1c5 0520 	rsb	r5, r5, #32
 80071ca:	441a      	add	r2, r3
 80071cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80071d0:	f000 f9cc 	bl	800756c <__hi0bits>
 80071d4:	42a8      	cmp	r0, r5
 80071d6:	dbe6      	blt.n	80071a6 <__gethex+0x426>
 80071d8:	e7ee      	b.n	80071b8 <__gethex+0x438>
 80071da:	bf00      	nop
 80071dc:	0800863f 	.word	0x0800863f

080071e0 <L_shift>:
 80071e0:	f1c2 0208 	rsb	r2, r2, #8
 80071e4:	0092      	lsls	r2, r2, #2
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	f1c2 0620 	rsb	r6, r2, #32
 80071ec:	6843      	ldr	r3, [r0, #4]
 80071ee:	6804      	ldr	r4, [r0, #0]
 80071f0:	fa03 f506 	lsl.w	r5, r3, r6
 80071f4:	432c      	orrs	r4, r5
 80071f6:	40d3      	lsrs	r3, r2
 80071f8:	6004      	str	r4, [r0, #0]
 80071fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80071fe:	4288      	cmp	r0, r1
 8007200:	d3f4      	bcc.n	80071ec <L_shift+0xc>
 8007202:	bd70      	pop	{r4, r5, r6, pc}

08007204 <__match>:
 8007204:	b530      	push	{r4, r5, lr}
 8007206:	6803      	ldr	r3, [r0, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800720e:	b914      	cbnz	r4, 8007216 <__match+0x12>
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	2001      	movs	r0, #1
 8007214:	bd30      	pop	{r4, r5, pc}
 8007216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800721e:	2d19      	cmp	r5, #25
 8007220:	bf98      	it	ls
 8007222:	3220      	addls	r2, #32
 8007224:	42a2      	cmp	r2, r4
 8007226:	d0f0      	beq.n	800720a <__match+0x6>
 8007228:	2000      	movs	r0, #0
 800722a:	e7f3      	b.n	8007214 <__match+0x10>

0800722c <__hexnan>:
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	2500      	movs	r5, #0
 8007232:	680b      	ldr	r3, [r1, #0]
 8007234:	4682      	mov	sl, r0
 8007236:	115e      	asrs	r6, r3, #5
 8007238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800723c:	f013 031f 	ands.w	r3, r3, #31
 8007240:	bf18      	it	ne
 8007242:	3604      	addne	r6, #4
 8007244:	1f37      	subs	r7, r6, #4
 8007246:	4690      	mov	r8, r2
 8007248:	46b9      	mov	r9, r7
 800724a:	463c      	mov	r4, r7
 800724c:	46ab      	mov	fp, r5
 800724e:	b087      	sub	sp, #28
 8007250:	6801      	ldr	r1, [r0, #0]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	f846 5c04 	str.w	r5, [r6, #-4]
 8007258:	9502      	str	r5, [sp, #8]
 800725a:	784a      	ldrb	r2, [r1, #1]
 800725c:	1c4b      	adds	r3, r1, #1
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	b342      	cbz	r2, 80072b4 <__hexnan+0x88>
 8007262:	4610      	mov	r0, r2
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	9204      	str	r2, [sp, #16]
 8007268:	f7ff fd75 	bl	8006d56 <__hexdig_fun>
 800726c:	2800      	cmp	r0, #0
 800726e:	d14f      	bne.n	8007310 <__hexnan+0xe4>
 8007270:	9a04      	ldr	r2, [sp, #16]
 8007272:	9905      	ldr	r1, [sp, #20]
 8007274:	2a20      	cmp	r2, #32
 8007276:	d818      	bhi.n	80072aa <__hexnan+0x7e>
 8007278:	9b02      	ldr	r3, [sp, #8]
 800727a:	459b      	cmp	fp, r3
 800727c:	dd13      	ble.n	80072a6 <__hexnan+0x7a>
 800727e:	454c      	cmp	r4, r9
 8007280:	d206      	bcs.n	8007290 <__hexnan+0x64>
 8007282:	2d07      	cmp	r5, #7
 8007284:	dc04      	bgt.n	8007290 <__hexnan+0x64>
 8007286:	462a      	mov	r2, r5
 8007288:	4649      	mov	r1, r9
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff ffa8 	bl	80071e0 <L_shift>
 8007290:	4544      	cmp	r4, r8
 8007292:	d950      	bls.n	8007336 <__hexnan+0x10a>
 8007294:	2300      	movs	r3, #0
 8007296:	f1a4 0904 	sub.w	r9, r4, #4
 800729a:	f844 3c04 	str.w	r3, [r4, #-4]
 800729e:	461d      	mov	r5, r3
 80072a0:	464c      	mov	r4, r9
 80072a2:	f8cd b008 	str.w	fp, [sp, #8]
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	e7d7      	b.n	800725a <__hexnan+0x2e>
 80072aa:	2a29      	cmp	r2, #41	; 0x29
 80072ac:	d155      	bne.n	800735a <__hexnan+0x12e>
 80072ae:	3102      	adds	r1, #2
 80072b0:	f8ca 1000 	str.w	r1, [sl]
 80072b4:	f1bb 0f00 	cmp.w	fp, #0
 80072b8:	d04f      	beq.n	800735a <__hexnan+0x12e>
 80072ba:	454c      	cmp	r4, r9
 80072bc:	d206      	bcs.n	80072cc <__hexnan+0xa0>
 80072be:	2d07      	cmp	r5, #7
 80072c0:	dc04      	bgt.n	80072cc <__hexnan+0xa0>
 80072c2:	462a      	mov	r2, r5
 80072c4:	4649      	mov	r1, r9
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7ff ff8a 	bl	80071e0 <L_shift>
 80072cc:	4544      	cmp	r4, r8
 80072ce:	d934      	bls.n	800733a <__hexnan+0x10e>
 80072d0:	4623      	mov	r3, r4
 80072d2:	f1a8 0204 	sub.w	r2, r8, #4
 80072d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80072da:	429f      	cmp	r7, r3
 80072dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80072e0:	d2f9      	bcs.n	80072d6 <__hexnan+0xaa>
 80072e2:	1b3b      	subs	r3, r7, r4
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	3e03      	subs	r6, #3
 80072ec:	3401      	adds	r4, #1
 80072ee:	42a6      	cmp	r6, r4
 80072f0:	bf38      	it	cc
 80072f2:	2304      	movcc	r3, #4
 80072f4:	2200      	movs	r2, #0
 80072f6:	4443      	add	r3, r8
 80072f8:	f843 2b04 	str.w	r2, [r3], #4
 80072fc:	429f      	cmp	r7, r3
 80072fe:	d2fb      	bcs.n	80072f8 <__hexnan+0xcc>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	b91b      	cbnz	r3, 800730c <__hexnan+0xe0>
 8007304:	4547      	cmp	r7, r8
 8007306:	d126      	bne.n	8007356 <__hexnan+0x12a>
 8007308:	2301      	movs	r3, #1
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	2005      	movs	r0, #5
 800730e:	e025      	b.n	800735c <__hexnan+0x130>
 8007310:	3501      	adds	r5, #1
 8007312:	2d08      	cmp	r5, #8
 8007314:	f10b 0b01 	add.w	fp, fp, #1
 8007318:	dd06      	ble.n	8007328 <__hexnan+0xfc>
 800731a:	4544      	cmp	r4, r8
 800731c:	d9c3      	bls.n	80072a6 <__hexnan+0x7a>
 800731e:	2300      	movs	r3, #0
 8007320:	2501      	movs	r5, #1
 8007322:	f844 3c04 	str.w	r3, [r4, #-4]
 8007326:	3c04      	subs	r4, #4
 8007328:	6822      	ldr	r2, [r4, #0]
 800732a:	f000 000f 	and.w	r0, r0, #15
 800732e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007332:	6020      	str	r0, [r4, #0]
 8007334:	e7b7      	b.n	80072a6 <__hexnan+0x7a>
 8007336:	2508      	movs	r5, #8
 8007338:	e7b5      	b.n	80072a6 <__hexnan+0x7a>
 800733a:	9b01      	ldr	r3, [sp, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0df      	beq.n	8007300 <__hexnan+0xd4>
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	f1c3 0320 	rsb	r3, r3, #32
 8007348:	40da      	lsrs	r2, r3
 800734a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800734e:	4013      	ands	r3, r2
 8007350:	f846 3c04 	str.w	r3, [r6, #-4]
 8007354:	e7d4      	b.n	8007300 <__hexnan+0xd4>
 8007356:	3f04      	subs	r7, #4
 8007358:	e7d2      	b.n	8007300 <__hexnan+0xd4>
 800735a:	2004      	movs	r0, #4
 800735c:	b007      	add	sp, #28
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007362 <__ascii_mbtowc>:
 8007362:	b082      	sub	sp, #8
 8007364:	b901      	cbnz	r1, 8007368 <__ascii_mbtowc+0x6>
 8007366:	a901      	add	r1, sp, #4
 8007368:	b142      	cbz	r2, 800737c <__ascii_mbtowc+0x1a>
 800736a:	b14b      	cbz	r3, 8007380 <__ascii_mbtowc+0x1e>
 800736c:	7813      	ldrb	r3, [r2, #0]
 800736e:	600b      	str	r3, [r1, #0]
 8007370:	7812      	ldrb	r2, [r2, #0]
 8007372:	1e10      	subs	r0, r2, #0
 8007374:	bf18      	it	ne
 8007376:	2001      	movne	r0, #1
 8007378:	b002      	add	sp, #8
 800737a:	4770      	bx	lr
 800737c:	4610      	mov	r0, r2
 800737e:	e7fb      	b.n	8007378 <__ascii_mbtowc+0x16>
 8007380:	f06f 0001 	mvn.w	r0, #1
 8007384:	e7f8      	b.n	8007378 <__ascii_mbtowc+0x16>
	...

08007388 <_Balloc>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	69c6      	ldr	r6, [r0, #28]
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	b976      	cbnz	r6, 80073b0 <_Balloc+0x28>
 8007392:	2010      	movs	r0, #16
 8007394:	f7fc fe5c 	bl	8004050 <malloc>
 8007398:	4602      	mov	r2, r0
 800739a:	61e0      	str	r0, [r4, #28]
 800739c:	b920      	cbnz	r0, 80073a8 <_Balloc+0x20>
 800739e:	216b      	movs	r1, #107	; 0x6b
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <_Balloc+0x78>)
 80073a2:	4818      	ldr	r0, [pc, #96]	; (8007404 <_Balloc+0x7c>)
 80073a4:	f7fe fdb0 	bl	8005f08 <__assert_func>
 80073a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ac:	6006      	str	r6, [r0, #0]
 80073ae:	60c6      	str	r6, [r0, #12]
 80073b0:	69e6      	ldr	r6, [r4, #28]
 80073b2:	68f3      	ldr	r3, [r6, #12]
 80073b4:	b183      	cbz	r3, 80073d8 <_Balloc+0x50>
 80073b6:	69e3      	ldr	r3, [r4, #28]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073be:	b9b8      	cbnz	r0, 80073f0 <_Balloc+0x68>
 80073c0:	2101      	movs	r1, #1
 80073c2:	fa01 f605 	lsl.w	r6, r1, r5
 80073c6:	1d72      	adds	r2, r6, #5
 80073c8:	4620      	mov	r0, r4
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	f000 ff0d 	bl	80081ea <_calloc_r>
 80073d0:	b160      	cbz	r0, 80073ec <_Balloc+0x64>
 80073d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073d6:	e00e      	b.n	80073f6 <_Balloc+0x6e>
 80073d8:	2221      	movs	r2, #33	; 0x21
 80073da:	2104      	movs	r1, #4
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 ff04 	bl	80081ea <_calloc_r>
 80073e2:	69e3      	ldr	r3, [r4, #28]
 80073e4:	60f0      	str	r0, [r6, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e4      	bne.n	80073b6 <_Balloc+0x2e>
 80073ec:	2000      	movs	r0, #0
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	6802      	ldr	r2, [r0, #0]
 80073f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073f6:	2300      	movs	r3, #0
 80073f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073fc:	e7f7      	b.n	80073ee <_Balloc+0x66>
 80073fe:	bf00      	nop
 8007400:	08008525 	.word	0x08008525
 8007404:	080086b0 	.word	0x080086b0

08007408 <_Bfree>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	69c6      	ldr	r6, [r0, #28]
 800740c:	4605      	mov	r5, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b976      	cbnz	r6, 8007430 <_Bfree+0x28>
 8007412:	2010      	movs	r0, #16
 8007414:	f7fc fe1c 	bl	8004050 <malloc>
 8007418:	4602      	mov	r2, r0
 800741a:	61e8      	str	r0, [r5, #28]
 800741c:	b920      	cbnz	r0, 8007428 <_Bfree+0x20>
 800741e:	218f      	movs	r1, #143	; 0x8f
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <_Bfree+0x3c>)
 8007422:	4809      	ldr	r0, [pc, #36]	; (8007448 <_Bfree+0x40>)
 8007424:	f7fe fd70 	bl	8005f08 <__assert_func>
 8007428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800742c:	6006      	str	r6, [r0, #0]
 800742e:	60c6      	str	r6, [r0, #12]
 8007430:	b13c      	cbz	r4, 8007442 <_Bfree+0x3a>
 8007432:	69eb      	ldr	r3, [r5, #28]
 8007434:	6862      	ldr	r2, [r4, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800743c:	6021      	str	r1, [r4, #0]
 800743e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	08008525 	.word	0x08008525
 8007448:	080086b0 	.word	0x080086b0

0800744c <__multadd>:
 800744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007450:	4607      	mov	r7, r0
 8007452:	460c      	mov	r4, r1
 8007454:	461e      	mov	r6, r3
 8007456:	2000      	movs	r0, #0
 8007458:	690d      	ldr	r5, [r1, #16]
 800745a:	f101 0c14 	add.w	ip, r1, #20
 800745e:	f8dc 3000 	ldr.w	r3, [ip]
 8007462:	3001      	adds	r0, #1
 8007464:	b299      	uxth	r1, r3
 8007466:	fb02 6101 	mla	r1, r2, r1, r6
 800746a:	0c1e      	lsrs	r6, r3, #16
 800746c:	0c0b      	lsrs	r3, r1, #16
 800746e:	fb02 3306 	mla	r3, r2, r6, r3
 8007472:	b289      	uxth	r1, r1
 8007474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007478:	4285      	cmp	r5, r0
 800747a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800747e:	f84c 1b04 	str.w	r1, [ip], #4
 8007482:	dcec      	bgt.n	800745e <__multadd+0x12>
 8007484:	b30e      	cbz	r6, 80074ca <__multadd+0x7e>
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	42ab      	cmp	r3, r5
 800748a:	dc19      	bgt.n	80074c0 <__multadd+0x74>
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4638      	mov	r0, r7
 8007490:	3101      	adds	r1, #1
 8007492:	f7ff ff79 	bl	8007388 <_Balloc>
 8007496:	4680      	mov	r8, r0
 8007498:	b928      	cbnz	r0, 80074a6 <__multadd+0x5a>
 800749a:	4602      	mov	r2, r0
 800749c:	21ba      	movs	r1, #186	; 0xba
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <__multadd+0x84>)
 80074a0:	480c      	ldr	r0, [pc, #48]	; (80074d4 <__multadd+0x88>)
 80074a2:	f7fe fd31 	bl	8005f08 <__assert_func>
 80074a6:	6922      	ldr	r2, [r4, #16]
 80074a8:	f104 010c 	add.w	r1, r4, #12
 80074ac:	3202      	adds	r2, #2
 80074ae:	0092      	lsls	r2, r2, #2
 80074b0:	300c      	adds	r0, #12
 80074b2:	f7fe fd10 	bl	8005ed6 <memcpy>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff ffa5 	bl	8007408 <_Bfree>
 80074be:	4644      	mov	r4, r8
 80074c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074c4:	3501      	adds	r5, #1
 80074c6:	615e      	str	r6, [r3, #20]
 80074c8:	6125      	str	r5, [r4, #16]
 80074ca:	4620      	mov	r0, r4
 80074cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d0:	0800863f 	.word	0x0800863f
 80074d4:	080086b0 	.word	0x080086b0

080074d8 <__s2b>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	4615      	mov	r5, r2
 80074de:	2209      	movs	r2, #9
 80074e0:	461f      	mov	r7, r3
 80074e2:	3308      	adds	r3, #8
 80074e4:	460c      	mov	r4, r1
 80074e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ea:	4606      	mov	r6, r0
 80074ec:	2201      	movs	r2, #1
 80074ee:	2100      	movs	r1, #0
 80074f0:	429a      	cmp	r2, r3
 80074f2:	db09      	blt.n	8007508 <__s2b+0x30>
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff ff47 	bl	8007388 <_Balloc>
 80074fa:	b940      	cbnz	r0, 800750e <__s2b+0x36>
 80074fc:	4602      	mov	r2, r0
 80074fe:	21d3      	movs	r1, #211	; 0xd3
 8007500:	4b18      	ldr	r3, [pc, #96]	; (8007564 <__s2b+0x8c>)
 8007502:	4819      	ldr	r0, [pc, #100]	; (8007568 <__s2b+0x90>)
 8007504:	f7fe fd00 	bl	8005f08 <__assert_func>
 8007508:	0052      	lsls	r2, r2, #1
 800750a:	3101      	adds	r1, #1
 800750c:	e7f0      	b.n	80074f0 <__s2b+0x18>
 800750e:	9b08      	ldr	r3, [sp, #32]
 8007510:	2d09      	cmp	r5, #9
 8007512:	6143      	str	r3, [r0, #20]
 8007514:	f04f 0301 	mov.w	r3, #1
 8007518:	6103      	str	r3, [r0, #16]
 800751a:	dd16      	ble.n	800754a <__s2b+0x72>
 800751c:	f104 0909 	add.w	r9, r4, #9
 8007520:	46c8      	mov	r8, r9
 8007522:	442c      	add	r4, r5
 8007524:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007528:	4601      	mov	r1, r0
 800752a:	220a      	movs	r2, #10
 800752c:	4630      	mov	r0, r6
 800752e:	3b30      	subs	r3, #48	; 0x30
 8007530:	f7ff ff8c 	bl	800744c <__multadd>
 8007534:	45a0      	cmp	r8, r4
 8007536:	d1f5      	bne.n	8007524 <__s2b+0x4c>
 8007538:	f1a5 0408 	sub.w	r4, r5, #8
 800753c:	444c      	add	r4, r9
 800753e:	1b2d      	subs	r5, r5, r4
 8007540:	1963      	adds	r3, r4, r5
 8007542:	42bb      	cmp	r3, r7
 8007544:	db04      	blt.n	8007550 <__s2b+0x78>
 8007546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754a:	2509      	movs	r5, #9
 800754c:	340a      	adds	r4, #10
 800754e:	e7f6      	b.n	800753e <__s2b+0x66>
 8007550:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007554:	4601      	mov	r1, r0
 8007556:	220a      	movs	r2, #10
 8007558:	4630      	mov	r0, r6
 800755a:	3b30      	subs	r3, #48	; 0x30
 800755c:	f7ff ff76 	bl	800744c <__multadd>
 8007560:	e7ee      	b.n	8007540 <__s2b+0x68>
 8007562:	bf00      	nop
 8007564:	0800863f 	.word	0x0800863f
 8007568:	080086b0 	.word	0x080086b0

0800756c <__hi0bits>:
 800756c:	0c02      	lsrs	r2, r0, #16
 800756e:	0412      	lsls	r2, r2, #16
 8007570:	4603      	mov	r3, r0
 8007572:	b9ca      	cbnz	r2, 80075a8 <__hi0bits+0x3c>
 8007574:	0403      	lsls	r3, r0, #16
 8007576:	2010      	movs	r0, #16
 8007578:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800757c:	bf04      	itt	eq
 800757e:	021b      	lsleq	r3, r3, #8
 8007580:	3008      	addeq	r0, #8
 8007582:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007586:	bf04      	itt	eq
 8007588:	011b      	lsleq	r3, r3, #4
 800758a:	3004      	addeq	r0, #4
 800758c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007590:	bf04      	itt	eq
 8007592:	009b      	lsleq	r3, r3, #2
 8007594:	3002      	addeq	r0, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	db05      	blt.n	80075a6 <__hi0bits+0x3a>
 800759a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800759e:	f100 0001 	add.w	r0, r0, #1
 80075a2:	bf08      	it	eq
 80075a4:	2020      	moveq	r0, #32
 80075a6:	4770      	bx	lr
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7e5      	b.n	8007578 <__hi0bits+0xc>

080075ac <__lo0bits>:
 80075ac:	6803      	ldr	r3, [r0, #0]
 80075ae:	4602      	mov	r2, r0
 80075b0:	f013 0007 	ands.w	r0, r3, #7
 80075b4:	d00b      	beq.n	80075ce <__lo0bits+0x22>
 80075b6:	07d9      	lsls	r1, r3, #31
 80075b8:	d421      	bmi.n	80075fe <__lo0bits+0x52>
 80075ba:	0798      	lsls	r0, r3, #30
 80075bc:	bf49      	itett	mi
 80075be:	085b      	lsrmi	r3, r3, #1
 80075c0:	089b      	lsrpl	r3, r3, #2
 80075c2:	2001      	movmi	r0, #1
 80075c4:	6013      	strmi	r3, [r2, #0]
 80075c6:	bf5c      	itt	pl
 80075c8:	2002      	movpl	r0, #2
 80075ca:	6013      	strpl	r3, [r2, #0]
 80075cc:	4770      	bx	lr
 80075ce:	b299      	uxth	r1, r3
 80075d0:	b909      	cbnz	r1, 80075d6 <__lo0bits+0x2a>
 80075d2:	2010      	movs	r0, #16
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	b2d9      	uxtb	r1, r3
 80075d8:	b909      	cbnz	r1, 80075de <__lo0bits+0x32>
 80075da:	3008      	adds	r0, #8
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	0719      	lsls	r1, r3, #28
 80075e0:	bf04      	itt	eq
 80075e2:	091b      	lsreq	r3, r3, #4
 80075e4:	3004      	addeq	r0, #4
 80075e6:	0799      	lsls	r1, r3, #30
 80075e8:	bf04      	itt	eq
 80075ea:	089b      	lsreq	r3, r3, #2
 80075ec:	3002      	addeq	r0, #2
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d403      	bmi.n	80075fa <__lo0bits+0x4e>
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	f100 0001 	add.w	r0, r0, #1
 80075f8:	d003      	beq.n	8007602 <__lo0bits+0x56>
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4770      	bx	lr
 80075fe:	2000      	movs	r0, #0
 8007600:	4770      	bx	lr
 8007602:	2020      	movs	r0, #32
 8007604:	4770      	bx	lr
	...

08007608 <__i2b>:
 8007608:	b510      	push	{r4, lr}
 800760a:	460c      	mov	r4, r1
 800760c:	2101      	movs	r1, #1
 800760e:	f7ff febb 	bl	8007388 <_Balloc>
 8007612:	4602      	mov	r2, r0
 8007614:	b928      	cbnz	r0, 8007622 <__i2b+0x1a>
 8007616:	f240 1145 	movw	r1, #325	; 0x145
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <__i2b+0x24>)
 800761c:	4804      	ldr	r0, [pc, #16]	; (8007630 <__i2b+0x28>)
 800761e:	f7fe fc73 	bl	8005f08 <__assert_func>
 8007622:	2301      	movs	r3, #1
 8007624:	6144      	str	r4, [r0, #20]
 8007626:	6103      	str	r3, [r0, #16]
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	0800863f 	.word	0x0800863f
 8007630:	080086b0 	.word	0x080086b0

08007634 <__multiply>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4691      	mov	r9, r2
 800763a:	690a      	ldr	r2, [r1, #16]
 800763c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007640:	460c      	mov	r4, r1
 8007642:	429a      	cmp	r2, r3
 8007644:	bfbe      	ittt	lt
 8007646:	460b      	movlt	r3, r1
 8007648:	464c      	movlt	r4, r9
 800764a:	4699      	movlt	r9, r3
 800764c:	6927      	ldr	r7, [r4, #16]
 800764e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	6861      	ldr	r1, [r4, #4]
 8007656:	eb07 060a 	add.w	r6, r7, sl
 800765a:	42b3      	cmp	r3, r6
 800765c:	b085      	sub	sp, #20
 800765e:	bfb8      	it	lt
 8007660:	3101      	addlt	r1, #1
 8007662:	f7ff fe91 	bl	8007388 <_Balloc>
 8007666:	b930      	cbnz	r0, 8007676 <__multiply+0x42>
 8007668:	4602      	mov	r2, r0
 800766a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800766e:	4b43      	ldr	r3, [pc, #268]	; (800777c <__multiply+0x148>)
 8007670:	4843      	ldr	r0, [pc, #268]	; (8007780 <__multiply+0x14c>)
 8007672:	f7fe fc49 	bl	8005f08 <__assert_func>
 8007676:	f100 0514 	add.w	r5, r0, #20
 800767a:	462b      	mov	r3, r5
 800767c:	2200      	movs	r2, #0
 800767e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007682:	4543      	cmp	r3, r8
 8007684:	d321      	bcc.n	80076ca <__multiply+0x96>
 8007686:	f104 0314 	add.w	r3, r4, #20
 800768a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800768e:	f109 0314 	add.w	r3, r9, #20
 8007692:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007696:	9202      	str	r2, [sp, #8]
 8007698:	1b3a      	subs	r2, r7, r4
 800769a:	3a15      	subs	r2, #21
 800769c:	f022 0203 	bic.w	r2, r2, #3
 80076a0:	3204      	adds	r2, #4
 80076a2:	f104 0115 	add.w	r1, r4, #21
 80076a6:	428f      	cmp	r7, r1
 80076a8:	bf38      	it	cc
 80076aa:	2204      	movcc	r2, #4
 80076ac:	9201      	str	r2, [sp, #4]
 80076ae:	9a02      	ldr	r2, [sp, #8]
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d80c      	bhi.n	80076d0 <__multiply+0x9c>
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	dd03      	ble.n	80076c2 <__multiply+0x8e>
 80076ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d05a      	beq.n	8007778 <__multiply+0x144>
 80076c2:	6106      	str	r6, [r0, #16]
 80076c4:	b005      	add	sp, #20
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	f843 2b04 	str.w	r2, [r3], #4
 80076ce:	e7d8      	b.n	8007682 <__multiply+0x4e>
 80076d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80076d4:	f1ba 0f00 	cmp.w	sl, #0
 80076d8:	d023      	beq.n	8007722 <__multiply+0xee>
 80076da:	46a9      	mov	r9, r5
 80076dc:	f04f 0c00 	mov.w	ip, #0
 80076e0:	f104 0e14 	add.w	lr, r4, #20
 80076e4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076e8:	f8d9 1000 	ldr.w	r1, [r9]
 80076ec:	fa1f fb82 	uxth.w	fp, r2
 80076f0:	b289      	uxth	r1, r1
 80076f2:	fb0a 110b 	mla	r1, sl, fp, r1
 80076f6:	4461      	add	r1, ip
 80076f8:	f8d9 c000 	ldr.w	ip, [r9]
 80076fc:	0c12      	lsrs	r2, r2, #16
 80076fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007702:	fb0a c202 	mla	r2, sl, r2, ip
 8007706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800770a:	b289      	uxth	r1, r1
 800770c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007710:	4577      	cmp	r7, lr
 8007712:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007716:	f849 1b04 	str.w	r1, [r9], #4
 800771a:	d8e3      	bhi.n	80076e4 <__multiply+0xb0>
 800771c:	9a01      	ldr	r2, [sp, #4]
 800771e:	f845 c002 	str.w	ip, [r5, r2]
 8007722:	9a03      	ldr	r2, [sp, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	d021      	beq.n	8007774 <__multiply+0x140>
 8007730:	46ae      	mov	lr, r5
 8007732:	f04f 0a00 	mov.w	sl, #0
 8007736:	6829      	ldr	r1, [r5, #0]
 8007738:	f104 0c14 	add.w	ip, r4, #20
 800773c:	f8bc b000 	ldrh.w	fp, [ip]
 8007740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007744:	b289      	uxth	r1, r1
 8007746:	fb09 220b 	mla	r2, r9, fp, r2
 800774a:	4452      	add	r2, sl
 800774c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007750:	f84e 1b04 	str.w	r1, [lr], #4
 8007754:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800775c:	f8be 1000 	ldrh.w	r1, [lr]
 8007760:	4567      	cmp	r7, ip
 8007762:	fb09 110a 	mla	r1, r9, sl, r1
 8007766:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800776a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800776e:	d8e5      	bhi.n	800773c <__multiply+0x108>
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	50a9      	str	r1, [r5, r2]
 8007774:	3504      	adds	r5, #4
 8007776:	e79a      	b.n	80076ae <__multiply+0x7a>
 8007778:	3e01      	subs	r6, #1
 800777a:	e79c      	b.n	80076b6 <__multiply+0x82>
 800777c:	0800863f 	.word	0x0800863f
 8007780:	080086b0 	.word	0x080086b0

08007784 <__pow5mult>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	4615      	mov	r5, r2
 800778a:	f012 0203 	ands.w	r2, r2, #3
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	d007      	beq.n	80077a4 <__pow5mult+0x20>
 8007794:	4c25      	ldr	r4, [pc, #148]	; (800782c <__pow5mult+0xa8>)
 8007796:	3a01      	subs	r2, #1
 8007798:	2300      	movs	r3, #0
 800779a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800779e:	f7ff fe55 	bl	800744c <__multadd>
 80077a2:	4607      	mov	r7, r0
 80077a4:	10ad      	asrs	r5, r5, #2
 80077a6:	d03d      	beq.n	8007824 <__pow5mult+0xa0>
 80077a8:	69f4      	ldr	r4, [r6, #28]
 80077aa:	b97c      	cbnz	r4, 80077cc <__pow5mult+0x48>
 80077ac:	2010      	movs	r0, #16
 80077ae:	f7fc fc4f 	bl	8004050 <malloc>
 80077b2:	4602      	mov	r2, r0
 80077b4:	61f0      	str	r0, [r6, #28]
 80077b6:	b928      	cbnz	r0, 80077c4 <__pow5mult+0x40>
 80077b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80077bc:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <__pow5mult+0xac>)
 80077be:	481d      	ldr	r0, [pc, #116]	; (8007834 <__pow5mult+0xb0>)
 80077c0:	f7fe fba2 	bl	8005f08 <__assert_func>
 80077c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077c8:	6004      	str	r4, [r0, #0]
 80077ca:	60c4      	str	r4, [r0, #12]
 80077cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077d4:	b94c      	cbnz	r4, 80077ea <__pow5mult+0x66>
 80077d6:	f240 2171 	movw	r1, #625	; 0x271
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ff14 	bl	8007608 <__i2b>
 80077e0:	2300      	movs	r3, #0
 80077e2:	4604      	mov	r4, r0
 80077e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80077e8:	6003      	str	r3, [r0, #0]
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	07eb      	lsls	r3, r5, #31
 80077f0:	d50a      	bpl.n	8007808 <__pow5mult+0x84>
 80077f2:	4639      	mov	r1, r7
 80077f4:	4622      	mov	r2, r4
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ff1c 	bl	8007634 <__multiply>
 80077fc:	4680      	mov	r8, r0
 80077fe:	4639      	mov	r1, r7
 8007800:	4630      	mov	r0, r6
 8007802:	f7ff fe01 	bl	8007408 <_Bfree>
 8007806:	4647      	mov	r7, r8
 8007808:	106d      	asrs	r5, r5, #1
 800780a:	d00b      	beq.n	8007824 <__pow5mult+0xa0>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	b938      	cbnz	r0, 8007820 <__pow5mult+0x9c>
 8007810:	4622      	mov	r2, r4
 8007812:	4621      	mov	r1, r4
 8007814:	4630      	mov	r0, r6
 8007816:	f7ff ff0d 	bl	8007634 <__multiply>
 800781a:	6020      	str	r0, [r4, #0]
 800781c:	f8c0 9000 	str.w	r9, [r0]
 8007820:	4604      	mov	r4, r0
 8007822:	e7e4      	b.n	80077ee <__pow5mult+0x6a>
 8007824:	4638      	mov	r0, r7
 8007826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782a:	bf00      	nop
 800782c:	08008800 	.word	0x08008800
 8007830:	08008525 	.word	0x08008525
 8007834:	080086b0 	.word	0x080086b0

08007838 <__lshift>:
 8007838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	4607      	mov	r7, r0
 8007840:	4691      	mov	r9, r2
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	6849      	ldr	r1, [r1, #4]
 8007846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007850:	f108 0601 	add.w	r6, r8, #1
 8007854:	42b3      	cmp	r3, r6
 8007856:	db0b      	blt.n	8007870 <__lshift+0x38>
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff fd95 	bl	8007388 <_Balloc>
 800785e:	4605      	mov	r5, r0
 8007860:	b948      	cbnz	r0, 8007876 <__lshift+0x3e>
 8007862:	4602      	mov	r2, r0
 8007864:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007868:	4b27      	ldr	r3, [pc, #156]	; (8007908 <__lshift+0xd0>)
 800786a:	4828      	ldr	r0, [pc, #160]	; (800790c <__lshift+0xd4>)
 800786c:	f7fe fb4c 	bl	8005f08 <__assert_func>
 8007870:	3101      	adds	r1, #1
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	e7ee      	b.n	8007854 <__lshift+0x1c>
 8007876:	2300      	movs	r3, #0
 8007878:	f100 0114 	add.w	r1, r0, #20
 800787c:	f100 0210 	add.w	r2, r0, #16
 8007880:	4618      	mov	r0, r3
 8007882:	4553      	cmp	r3, sl
 8007884:	db33      	blt.n	80078ee <__lshift+0xb6>
 8007886:	6920      	ldr	r0, [r4, #16]
 8007888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800788c:	f104 0314 	add.w	r3, r4, #20
 8007890:	f019 091f 	ands.w	r9, r9, #31
 8007894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800789c:	d02b      	beq.n	80078f6 <__lshift+0xbe>
 800789e:	468a      	mov	sl, r1
 80078a0:	2200      	movs	r2, #0
 80078a2:	f1c9 0e20 	rsb	lr, r9, #32
 80078a6:	6818      	ldr	r0, [r3, #0]
 80078a8:	fa00 f009 	lsl.w	r0, r0, r9
 80078ac:	4310      	orrs	r0, r2
 80078ae:	f84a 0b04 	str.w	r0, [sl], #4
 80078b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b6:	459c      	cmp	ip, r3
 80078b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80078bc:	d8f3      	bhi.n	80078a6 <__lshift+0x6e>
 80078be:	ebac 0304 	sub.w	r3, ip, r4
 80078c2:	3b15      	subs	r3, #21
 80078c4:	f023 0303 	bic.w	r3, r3, #3
 80078c8:	3304      	adds	r3, #4
 80078ca:	f104 0015 	add.w	r0, r4, #21
 80078ce:	4584      	cmp	ip, r0
 80078d0:	bf38      	it	cc
 80078d2:	2304      	movcc	r3, #4
 80078d4:	50ca      	str	r2, [r1, r3]
 80078d6:	b10a      	cbz	r2, 80078dc <__lshift+0xa4>
 80078d8:	f108 0602 	add.w	r6, r8, #2
 80078dc:	3e01      	subs	r6, #1
 80078de:	4638      	mov	r0, r7
 80078e0:	4621      	mov	r1, r4
 80078e2:	612e      	str	r6, [r5, #16]
 80078e4:	f7ff fd90 	bl	8007408 <_Bfree>
 80078e8:	4628      	mov	r0, r5
 80078ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80078f2:	3301      	adds	r3, #1
 80078f4:	e7c5      	b.n	8007882 <__lshift+0x4a>
 80078f6:	3904      	subs	r1, #4
 80078f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fc:	459c      	cmp	ip, r3
 80078fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007902:	d8f9      	bhi.n	80078f8 <__lshift+0xc0>
 8007904:	e7ea      	b.n	80078dc <__lshift+0xa4>
 8007906:	bf00      	nop
 8007908:	0800863f 	.word	0x0800863f
 800790c:	080086b0 	.word	0x080086b0

08007910 <__mcmp>:
 8007910:	4603      	mov	r3, r0
 8007912:	690a      	ldr	r2, [r1, #16]
 8007914:	6900      	ldr	r0, [r0, #16]
 8007916:	b530      	push	{r4, r5, lr}
 8007918:	1a80      	subs	r0, r0, r2
 800791a:	d10d      	bne.n	8007938 <__mcmp+0x28>
 800791c:	3314      	adds	r3, #20
 800791e:	3114      	adds	r1, #20
 8007920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800792c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007930:	4295      	cmp	r5, r2
 8007932:	d002      	beq.n	800793a <__mcmp+0x2a>
 8007934:	d304      	bcc.n	8007940 <__mcmp+0x30>
 8007936:	2001      	movs	r0, #1
 8007938:	bd30      	pop	{r4, r5, pc}
 800793a:	42a3      	cmp	r3, r4
 800793c:	d3f4      	bcc.n	8007928 <__mcmp+0x18>
 800793e:	e7fb      	b.n	8007938 <__mcmp+0x28>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e7f8      	b.n	8007938 <__mcmp+0x28>
	...

08007948 <__mdiff>:
 8007948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	460d      	mov	r5, r1
 800794e:	4607      	mov	r7, r0
 8007950:	4611      	mov	r1, r2
 8007952:	4628      	mov	r0, r5
 8007954:	4614      	mov	r4, r2
 8007956:	f7ff ffdb 	bl	8007910 <__mcmp>
 800795a:	1e06      	subs	r6, r0, #0
 800795c:	d111      	bne.n	8007982 <__mdiff+0x3a>
 800795e:	4631      	mov	r1, r6
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fd11 	bl	8007388 <_Balloc>
 8007966:	4602      	mov	r2, r0
 8007968:	b928      	cbnz	r0, 8007976 <__mdiff+0x2e>
 800796a:	f240 2137 	movw	r1, #567	; 0x237
 800796e:	4b3a      	ldr	r3, [pc, #232]	; (8007a58 <__mdiff+0x110>)
 8007970:	483a      	ldr	r0, [pc, #232]	; (8007a5c <__mdiff+0x114>)
 8007972:	f7fe fac9 	bl	8005f08 <__assert_func>
 8007976:	2301      	movs	r3, #1
 8007978:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800797c:	4610      	mov	r0, r2
 800797e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007982:	bfa4      	itt	ge
 8007984:	4623      	movge	r3, r4
 8007986:	462c      	movge	r4, r5
 8007988:	4638      	mov	r0, r7
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	bfa6      	itte	ge
 800798e:	461d      	movge	r5, r3
 8007990:	2600      	movge	r6, #0
 8007992:	2601      	movlt	r6, #1
 8007994:	f7ff fcf8 	bl	8007388 <_Balloc>
 8007998:	4602      	mov	r2, r0
 800799a:	b918      	cbnz	r0, 80079a4 <__mdiff+0x5c>
 800799c:	f240 2145 	movw	r1, #581	; 0x245
 80079a0:	4b2d      	ldr	r3, [pc, #180]	; (8007a58 <__mdiff+0x110>)
 80079a2:	e7e5      	b.n	8007970 <__mdiff+0x28>
 80079a4:	f102 0814 	add.w	r8, r2, #20
 80079a8:	46c2      	mov	sl, r8
 80079aa:	f04f 0c00 	mov.w	ip, #0
 80079ae:	6927      	ldr	r7, [r4, #16]
 80079b0:	60c6      	str	r6, [r0, #12]
 80079b2:	692e      	ldr	r6, [r5, #16]
 80079b4:	f104 0014 	add.w	r0, r4, #20
 80079b8:	f105 0914 	add.w	r9, r5, #20
 80079bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80079c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079c4:	3410      	adds	r4, #16
 80079c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80079ce:	fa1f f18b 	uxth.w	r1, fp
 80079d2:	4461      	add	r1, ip
 80079d4:	fa1f fc83 	uxth.w	ip, r3
 80079d8:	0c1b      	lsrs	r3, r3, #16
 80079da:	eba1 010c 	sub.w	r1, r1, ip
 80079de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079e6:	b289      	uxth	r1, r1
 80079e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079ec:	454e      	cmp	r6, r9
 80079ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079f2:	f84a 1b04 	str.w	r1, [sl], #4
 80079f6:	d8e6      	bhi.n	80079c6 <__mdiff+0x7e>
 80079f8:	1b73      	subs	r3, r6, r5
 80079fa:	3b15      	subs	r3, #21
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	3515      	adds	r5, #21
 8007a02:	3304      	adds	r3, #4
 8007a04:	42ae      	cmp	r6, r5
 8007a06:	bf38      	it	cc
 8007a08:	2304      	movcc	r3, #4
 8007a0a:	4418      	add	r0, r3
 8007a0c:	4443      	add	r3, r8
 8007a0e:	461e      	mov	r6, r3
 8007a10:	4605      	mov	r5, r0
 8007a12:	4575      	cmp	r5, lr
 8007a14:	d30e      	bcc.n	8007a34 <__mdiff+0xec>
 8007a16:	f10e 0103 	add.w	r1, lr, #3
 8007a1a:	1a09      	subs	r1, r1, r0
 8007a1c:	f021 0103 	bic.w	r1, r1, #3
 8007a20:	3803      	subs	r0, #3
 8007a22:	4586      	cmp	lr, r0
 8007a24:	bf38      	it	cc
 8007a26:	2100      	movcc	r1, #0
 8007a28:	440b      	add	r3, r1
 8007a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a2e:	b189      	cbz	r1, 8007a54 <__mdiff+0x10c>
 8007a30:	6117      	str	r7, [r2, #16]
 8007a32:	e7a3      	b.n	800797c <__mdiff+0x34>
 8007a34:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a38:	fa1f f188 	uxth.w	r1, r8
 8007a3c:	4461      	add	r1, ip
 8007a3e:	140c      	asrs	r4, r1, #16
 8007a40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a44:	b289      	uxth	r1, r1
 8007a46:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a4a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a4e:	f846 1b04 	str.w	r1, [r6], #4
 8007a52:	e7de      	b.n	8007a12 <__mdiff+0xca>
 8007a54:	3f01      	subs	r7, #1
 8007a56:	e7e8      	b.n	8007a2a <__mdiff+0xe2>
 8007a58:	0800863f 	.word	0x0800863f
 8007a5c:	080086b0 	.word	0x080086b0

08007a60 <__ulp>:
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <__ulp+0x3c>)
 8007a62:	400b      	ands	r3, r1
 8007a64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dc08      	bgt.n	8007a7e <__ulp+0x1e>
 8007a6c:	425b      	negs	r3, r3
 8007a6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007a72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a76:	da04      	bge.n	8007a82 <__ulp+0x22>
 8007a78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a7c:	4113      	asrs	r3, r2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e008      	b.n	8007a94 <__ulp+0x34>
 8007a82:	f1a2 0314 	sub.w	r3, r2, #20
 8007a86:	2b1e      	cmp	r3, #30
 8007a88:	bfd6      	itet	le
 8007a8a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007a8e:	2201      	movgt	r2, #1
 8007a90:	40da      	lsrle	r2, r3
 8007a92:	2300      	movs	r3, #0
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	7ff00000 	.word	0x7ff00000

08007aa0 <__b2d>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	6905      	ldr	r5, [r0, #16]
 8007aa4:	f100 0714 	add.w	r7, r0, #20
 8007aa8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007aac:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007ab0:	1f2e      	subs	r6, r5, #4
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7ff fd5a 	bl	800756c <__hi0bits>
 8007ab8:	f1c0 0220 	rsb	r2, r0, #32
 8007abc:	280a      	cmp	r0, #10
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007b2c <__b2d+0x8c>
 8007ac4:	600a      	str	r2, [r1, #0]
 8007ac6:	dc12      	bgt.n	8007aee <__b2d+0x4e>
 8007ac8:	f1c0 0e0b 	rsb	lr, r0, #11
 8007acc:	fa24 f20e 	lsr.w	r2, r4, lr
 8007ad0:	42b7      	cmp	r7, r6
 8007ad2:	ea42 010c 	orr.w	r1, r2, ip
 8007ad6:	bf2c      	ite	cs
 8007ad8:	2200      	movcs	r2, #0
 8007ada:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007ade:	3315      	adds	r3, #21
 8007ae0:	fa04 f303 	lsl.w	r3, r4, r3
 8007ae4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aee:	42b7      	cmp	r7, r6
 8007af0:	bf2e      	itee	cs
 8007af2:	2200      	movcs	r2, #0
 8007af4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007af8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007afc:	3b0b      	subs	r3, #11
 8007afe:	d012      	beq.n	8007b26 <__b2d+0x86>
 8007b00:	f1c3 0520 	rsb	r5, r3, #32
 8007b04:	fa22 f105 	lsr.w	r1, r2, r5
 8007b08:	409c      	lsls	r4, r3
 8007b0a:	430c      	orrs	r4, r1
 8007b0c:	42be      	cmp	r6, r7
 8007b0e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007b12:	bf94      	ite	ls
 8007b14:	2400      	movls	r4, #0
 8007b16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	40ec      	lsrs	r4, r5
 8007b1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b22:	4322      	orrs	r2, r4
 8007b24:	e7e1      	b.n	8007aea <__b2d+0x4a>
 8007b26:	ea44 010c 	orr.w	r1, r4, ip
 8007b2a:	e7de      	b.n	8007aea <__b2d+0x4a>
 8007b2c:	3ff00000 	.word	0x3ff00000

08007b30 <__d2b>:
 8007b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b32:	2101      	movs	r1, #1
 8007b34:	4617      	mov	r7, r2
 8007b36:	461c      	mov	r4, r3
 8007b38:	9e08      	ldr	r6, [sp, #32]
 8007b3a:	f7ff fc25 	bl	8007388 <_Balloc>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	b930      	cbnz	r0, 8007b50 <__d2b+0x20>
 8007b42:	4602      	mov	r2, r0
 8007b44:	f240 310f 	movw	r1, #783	; 0x30f
 8007b48:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <__d2b+0xa4>)
 8007b4a:	4823      	ldr	r0, [pc, #140]	; (8007bd8 <__d2b+0xa8>)
 8007b4c:	f7fe f9dc 	bl	8005f08 <__assert_func>
 8007b50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007b54:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b58:	bb24      	cbnz	r4, 8007ba4 <__d2b+0x74>
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	d026      	beq.n	8007bae <__d2b+0x7e>
 8007b60:	4668      	mov	r0, sp
 8007b62:	9700      	str	r7, [sp, #0]
 8007b64:	f7ff fd22 	bl	80075ac <__lo0bits>
 8007b68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b6c:	b1e8      	cbz	r0, 8007baa <__d2b+0x7a>
 8007b6e:	f1c0 0320 	rsb	r3, r0, #32
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	430b      	orrs	r3, r1
 8007b78:	40c2      	lsrs	r2, r0
 8007b7a:	616b      	str	r3, [r5, #20]
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf14      	ite	ne
 8007b84:	2102      	movne	r1, #2
 8007b86:	2101      	moveq	r1, #1
 8007b88:	61ab      	str	r3, [r5, #24]
 8007b8a:	6129      	str	r1, [r5, #16]
 8007b8c:	b1bc      	cbz	r4, 8007bbe <__d2b+0x8e>
 8007b8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b92:	4404      	add	r4, r0
 8007b94:	6034      	str	r4, [r6, #0]
 8007b96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9c:	6018      	str	r0, [r3, #0]
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ba8:	e7d7      	b.n	8007b5a <__d2b+0x2a>
 8007baa:	6169      	str	r1, [r5, #20]
 8007bac:	e7e7      	b.n	8007b7e <__d2b+0x4e>
 8007bae:	a801      	add	r0, sp, #4
 8007bb0:	f7ff fcfc 	bl	80075ac <__lo0bits>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	2101      	movs	r1, #1
 8007bb8:	616b      	str	r3, [r5, #20]
 8007bba:	3020      	adds	r0, #32
 8007bbc:	e7e5      	b.n	8007b8a <__d2b+0x5a>
 8007bbe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007bc2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007bc6:	6030      	str	r0, [r6, #0]
 8007bc8:	6918      	ldr	r0, [r3, #16]
 8007bca:	f7ff fccf 	bl	800756c <__hi0bits>
 8007bce:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007bd2:	e7e2      	b.n	8007b9a <__d2b+0x6a>
 8007bd4:	0800863f 	.word	0x0800863f
 8007bd8:	080086b0 	.word	0x080086b0

08007bdc <__ratio>:
 8007bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4688      	mov	r8, r1
 8007be2:	4669      	mov	r1, sp
 8007be4:	4681      	mov	r9, r0
 8007be6:	f7ff ff5b 	bl	8007aa0 <__b2d>
 8007bea:	460f      	mov	r7, r1
 8007bec:	4604      	mov	r4, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	a901      	add	r1, sp, #4
 8007bf4:	f7ff ff54 	bl	8007aa0 <__b2d>
 8007bf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007c00:	468b      	mov	fp, r1
 8007c02:	eba3 0c02 	sub.w	ip, r3, r2
 8007c06:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	bfd5      	itete	le
 8007c14:	460a      	movle	r2, r1
 8007c16:	462a      	movgt	r2, r5
 8007c18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c1c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007c20:	bfd8      	it	le
 8007c22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007c26:	465b      	mov	r3, fp
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f7f8 fde9 	bl	8000804 <__aeabi_ddiv>
 8007c32:	b003      	add	sp, #12
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c38 <__copybits>:
 8007c38:	3901      	subs	r1, #1
 8007c3a:	b570      	push	{r4, r5, r6, lr}
 8007c3c:	1149      	asrs	r1, r1, #5
 8007c3e:	6914      	ldr	r4, [r2, #16]
 8007c40:	3101      	adds	r1, #1
 8007c42:	f102 0314 	add.w	r3, r2, #20
 8007c46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c4e:	1f05      	subs	r5, r0, #4
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d30c      	bcc.n	8007c6e <__copybits+0x36>
 8007c54:	1aa3      	subs	r3, r4, r2
 8007c56:	3b11      	subs	r3, #17
 8007c58:	f023 0303 	bic.w	r3, r3, #3
 8007c5c:	3211      	adds	r2, #17
 8007c5e:	42a2      	cmp	r2, r4
 8007c60:	bf88      	it	hi
 8007c62:	2300      	movhi	r3, #0
 8007c64:	4418      	add	r0, r3
 8007c66:	2300      	movs	r3, #0
 8007c68:	4288      	cmp	r0, r1
 8007c6a:	d305      	bcc.n	8007c78 <__copybits+0x40>
 8007c6c:	bd70      	pop	{r4, r5, r6, pc}
 8007c6e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c72:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c76:	e7eb      	b.n	8007c50 <__copybits+0x18>
 8007c78:	f840 3b04 	str.w	r3, [r0], #4
 8007c7c:	e7f4      	b.n	8007c68 <__copybits+0x30>

08007c7e <__any_on>:
 8007c7e:	f100 0214 	add.w	r2, r0, #20
 8007c82:	6900      	ldr	r0, [r0, #16]
 8007c84:	114b      	asrs	r3, r1, #5
 8007c86:	4298      	cmp	r0, r3
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	db11      	blt.n	8007cb0 <__any_on+0x32>
 8007c8c:	dd0a      	ble.n	8007ca4 <__any_on+0x26>
 8007c8e:	f011 011f 	ands.w	r1, r1, #31
 8007c92:	d007      	beq.n	8007ca4 <__any_on+0x26>
 8007c94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c98:	fa24 f001 	lsr.w	r0, r4, r1
 8007c9c:	fa00 f101 	lsl.w	r1, r0, r1
 8007ca0:	428c      	cmp	r4, r1
 8007ca2:	d10b      	bne.n	8007cbc <__any_on+0x3e>
 8007ca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d803      	bhi.n	8007cb4 <__any_on+0x36>
 8007cac:	2000      	movs	r0, #0
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	e7f7      	b.n	8007ca4 <__any_on+0x26>
 8007cb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cb8:	2900      	cmp	r1, #0
 8007cba:	d0f5      	beq.n	8007ca8 <__any_on+0x2a>
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e7f6      	b.n	8007cae <__any_on+0x30>

08007cc0 <__ascii_wctomb>:
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	b141      	cbz	r1, 8007cd8 <__ascii_wctomb+0x18>
 8007cc6:	2aff      	cmp	r2, #255	; 0xff
 8007cc8:	d904      	bls.n	8007cd4 <__ascii_wctomb+0x14>
 8007cca:	228a      	movs	r2, #138	; 0x8a
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	4770      	bx	lr
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	700a      	strb	r2, [r1, #0]
 8007cd8:	4770      	bx	lr

08007cda <__sfputc_r>:
 8007cda:	6893      	ldr	r3, [r2, #8]
 8007cdc:	b410      	push	{r4}
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	6093      	str	r3, [r2, #8]
 8007ce4:	da07      	bge.n	8007cf6 <__sfputc_r+0x1c>
 8007ce6:	6994      	ldr	r4, [r2, #24]
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	db01      	blt.n	8007cf0 <__sfputc_r+0x16>
 8007cec:	290a      	cmp	r1, #10
 8007cee:	d102      	bne.n	8007cf6 <__sfputc_r+0x1c>
 8007cf0:	bc10      	pop	{r4}
 8007cf2:	f7fd bf32 	b.w	8005b5a <__swbuf_r>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	1c58      	adds	r0, r3, #1
 8007cfa:	6010      	str	r0, [r2, #0]
 8007cfc:	7019      	strb	r1, [r3, #0]
 8007cfe:	4608      	mov	r0, r1
 8007d00:	bc10      	pop	{r4}
 8007d02:	4770      	bx	lr

08007d04 <__sfputs_r>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	4614      	mov	r4, r2
 8007d0c:	18d5      	adds	r5, r2, r3
 8007d0e:	42ac      	cmp	r4, r5
 8007d10:	d101      	bne.n	8007d16 <__sfputs_r+0x12>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e007      	b.n	8007d26 <__sfputs_r+0x22>
 8007d16:	463a      	mov	r2, r7
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1e:	f7ff ffdc 	bl	8007cda <__sfputc_r>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d1f3      	bne.n	8007d0e <__sfputs_r+0xa>
 8007d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d28 <_vfiprintf_r>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	460d      	mov	r5, r1
 8007d2e:	4614      	mov	r4, r2
 8007d30:	4698      	mov	r8, r3
 8007d32:	4606      	mov	r6, r0
 8007d34:	b09d      	sub	sp, #116	; 0x74
 8007d36:	b118      	cbz	r0, 8007d40 <_vfiprintf_r+0x18>
 8007d38:	6a03      	ldr	r3, [r0, #32]
 8007d3a:	b90b      	cbnz	r3, 8007d40 <_vfiprintf_r+0x18>
 8007d3c:	f7fd fe26 	bl	800598c <__sinit>
 8007d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d42:	07d9      	lsls	r1, r3, #31
 8007d44:	d405      	bmi.n	8007d52 <_vfiprintf_r+0x2a>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	059a      	lsls	r2, r3, #22
 8007d4a:	d402      	bmi.n	8007d52 <_vfiprintf_r+0x2a>
 8007d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4e:	f7fe f8aa 	bl	8005ea6 <__retarget_lock_acquire_recursive>
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	071b      	lsls	r3, r3, #28
 8007d56:	d501      	bpl.n	8007d5c <_vfiprintf_r+0x34>
 8007d58:	692b      	ldr	r3, [r5, #16]
 8007d5a:	b99b      	cbnz	r3, 8007d84 <_vfiprintf_r+0x5c>
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7fd ff38 	bl	8005bd4 <__swsetup_r>
 8007d64:	b170      	cbz	r0, 8007d84 <_vfiprintf_r+0x5c>
 8007d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d68:	07dc      	lsls	r4, r3, #31
 8007d6a:	d504      	bpl.n	8007d76 <_vfiprintf_r+0x4e>
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	b01d      	add	sp, #116	; 0x74
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	0598      	lsls	r0, r3, #22
 8007d7a:	d4f7      	bmi.n	8007d6c <_vfiprintf_r+0x44>
 8007d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7e:	f7fe f893 	bl	8005ea8 <__retarget_lock_release_recursive>
 8007d82:	e7f3      	b.n	8007d6c <_vfiprintf_r+0x44>
 8007d84:	2300      	movs	r3, #0
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	2320      	movs	r3, #32
 8007d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d8e:	2330      	movs	r3, #48	; 0x30
 8007d90:	f04f 0901 	mov.w	r9, #1
 8007d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007f48 <_vfiprintf_r+0x220>
 8007d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007da0:	4623      	mov	r3, r4
 8007da2:	469a      	mov	sl, r3
 8007da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da8:	b10a      	cbz	r2, 8007dae <_vfiprintf_r+0x86>
 8007daa:	2a25      	cmp	r2, #37	; 0x25
 8007dac:	d1f9      	bne.n	8007da2 <_vfiprintf_r+0x7a>
 8007dae:	ebba 0b04 	subs.w	fp, sl, r4
 8007db2:	d00b      	beq.n	8007dcc <_vfiprintf_r+0xa4>
 8007db4:	465b      	mov	r3, fp
 8007db6:	4622      	mov	r2, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ffa2 	bl	8007d04 <__sfputs_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f000 80a9 	beq.w	8007f18 <_vfiprintf_r+0x1f0>
 8007dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc8:	445a      	add	r2, fp
 8007dca:	9209      	str	r2, [sp, #36]	; 0x24
 8007dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80a1 	beq.w	8007f18 <_vfiprintf_r+0x1f0>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007de0:	f10a 0a01 	add.w	sl, sl, #1
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dec:	931a      	str	r3, [sp, #104]	; 0x68
 8007dee:	4654      	mov	r4, sl
 8007df0:	2205      	movs	r2, #5
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	4854      	ldr	r0, [pc, #336]	; (8007f48 <_vfiprintf_r+0x220>)
 8007df8:	f7fe f85f 	bl	8005eba <memchr>
 8007dfc:	9a04      	ldr	r2, [sp, #16]
 8007dfe:	b9d8      	cbnz	r0, 8007e38 <_vfiprintf_r+0x110>
 8007e00:	06d1      	lsls	r1, r2, #27
 8007e02:	bf44      	itt	mi
 8007e04:	2320      	movmi	r3, #32
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e0a:	0713      	lsls	r3, r2, #28
 8007e0c:	bf44      	itt	mi
 8007e0e:	232b      	movmi	r3, #43	; 0x2b
 8007e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e14:	f89a 3000 	ldrb.w	r3, [sl]
 8007e18:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1a:	d015      	beq.n	8007e48 <_vfiprintf_r+0x120>
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f04f 0c0a 	mov.w	ip, #10
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	4621      	mov	r1, r4
 8007e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2c:	3b30      	subs	r3, #48	; 0x30
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d94d      	bls.n	8007ece <_vfiprintf_r+0x1a6>
 8007e32:	b1b0      	cbz	r0, 8007e62 <_vfiprintf_r+0x13a>
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	e014      	b.n	8007e62 <_vfiprintf_r+0x13a>
 8007e38:	eba0 0308 	sub.w	r3, r0, r8
 8007e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	46a2      	mov	sl, r4
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	e7d2      	b.n	8007dee <_vfiprintf_r+0xc6>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	1d19      	adds	r1, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	9103      	str	r1, [sp, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfbb      	ittet	lt
 8007e54:	425b      	neglt	r3, r3
 8007e56:	f042 0202 	orrlt.w	r2, r2, #2
 8007e5a:	9307      	strge	r3, [sp, #28]
 8007e5c:	9307      	strlt	r3, [sp, #28]
 8007e5e:	bfb8      	it	lt
 8007e60:	9204      	strlt	r2, [sp, #16]
 8007e62:	7823      	ldrb	r3, [r4, #0]
 8007e64:	2b2e      	cmp	r3, #46	; 0x2e
 8007e66:	d10c      	bne.n	8007e82 <_vfiprintf_r+0x15a>
 8007e68:	7863      	ldrb	r3, [r4, #1]
 8007e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e6c:	d134      	bne.n	8007ed8 <_vfiprintf_r+0x1b0>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	3402      	adds	r4, #2
 8007e72:	1d1a      	adds	r2, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9203      	str	r2, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfb8      	it	lt
 8007e7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e80:	9305      	str	r3, [sp, #20]
 8007e82:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f4c <_vfiprintf_r+0x224>
 8007e86:	2203      	movs	r2, #3
 8007e88:	4650      	mov	r0, sl
 8007e8a:	7821      	ldrb	r1, [r4, #0]
 8007e8c:	f7fe f815 	bl	8005eba <memchr>
 8007e90:	b138      	cbz	r0, 8007ea2 <_vfiprintf_r+0x17a>
 8007e92:	2240      	movs	r2, #64	; 0x40
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	eba0 000a 	sub.w	r0, r0, sl
 8007e9a:	4082      	lsls	r2, r0
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	4829      	ldr	r0, [pc, #164]	; (8007f50 <_vfiprintf_r+0x228>)
 8007eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eae:	f7fe f804 	bl	8005eba <memchr>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d03f      	beq.n	8007f36 <_vfiprintf_r+0x20e>
 8007eb6:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <_vfiprintf_r+0x22c>)
 8007eb8:	bb1b      	cbnz	r3, 8007f02 <_vfiprintf_r+0x1da>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	f023 0307 	bic.w	r3, r3, #7
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	9303      	str	r3, [sp, #12]
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	443b      	add	r3, r7
 8007eca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ecc:	e768      	b.n	8007da0 <_vfiprintf_r+0x78>
 8007ece:	460c      	mov	r4, r1
 8007ed0:	2001      	movs	r0, #1
 8007ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ed6:	e7a6      	b.n	8007e26 <_vfiprintf_r+0xfe>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4619      	mov	r1, r3
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eea:	3a30      	subs	r2, #48	; 0x30
 8007eec:	2a09      	cmp	r2, #9
 8007eee:	d903      	bls.n	8007ef8 <_vfiprintf_r+0x1d0>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0c6      	beq.n	8007e82 <_vfiprintf_r+0x15a>
 8007ef4:	9105      	str	r1, [sp, #20]
 8007ef6:	e7c4      	b.n	8007e82 <_vfiprintf_r+0x15a>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	2301      	movs	r3, #1
 8007efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f00:	e7f0      	b.n	8007ee4 <_vfiprintf_r+0x1bc>
 8007f02:	ab03      	add	r3, sp, #12
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	462a      	mov	r2, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <_vfiprintf_r+0x230>)
 8007f0c:	a904      	add	r1, sp, #16
 8007f0e:	f7fd f8ef 	bl	80050f0 <_printf_float>
 8007f12:	4607      	mov	r7, r0
 8007f14:	1c78      	adds	r0, r7, #1
 8007f16:	d1d6      	bne.n	8007ec6 <_vfiprintf_r+0x19e>
 8007f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f1a:	07d9      	lsls	r1, r3, #31
 8007f1c:	d405      	bmi.n	8007f2a <_vfiprintf_r+0x202>
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	059a      	lsls	r2, r3, #22
 8007f22:	d402      	bmi.n	8007f2a <_vfiprintf_r+0x202>
 8007f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f26:	f7fd ffbf 	bl	8005ea8 <__retarget_lock_release_recursive>
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	065b      	lsls	r3, r3, #25
 8007f2e:	f53f af1d 	bmi.w	8007d6c <_vfiprintf_r+0x44>
 8007f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f34:	e71c      	b.n	8007d70 <_vfiprintf_r+0x48>
 8007f36:	ab03      	add	r3, sp, #12
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <_vfiprintf_r+0x230>)
 8007f40:	a904      	add	r1, sp, #16
 8007f42:	f7fd fb75 	bl	8005630 <_printf_i>
 8007f46:	e7e4      	b.n	8007f12 <_vfiprintf_r+0x1ea>
 8007f48:	0800880c 	.word	0x0800880c
 8007f4c:	08008812 	.word	0x08008812
 8007f50:	08008816 	.word	0x08008816
 8007f54:	080050f1 	.word	0x080050f1
 8007f58:	08007d05 	.word	0x08007d05

08007f5c <__sflush_r>:
 8007f5c:	898a      	ldrh	r2, [r1, #12]
 8007f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f60:	4605      	mov	r5, r0
 8007f62:	0710      	lsls	r0, r2, #28
 8007f64:	460c      	mov	r4, r1
 8007f66:	d457      	bmi.n	8008018 <__sflush_r+0xbc>
 8007f68:	684b      	ldr	r3, [r1, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dc04      	bgt.n	8007f78 <__sflush_r+0x1c>
 8007f6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dc01      	bgt.n	8007f78 <__sflush_r+0x1c>
 8007f74:	2000      	movs	r0, #0
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d0fa      	beq.n	8007f74 <__sflush_r+0x18>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f84:	682f      	ldr	r7, [r5, #0]
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	d032      	beq.n	8007ff2 <__sflush_r+0x96>
 8007f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	075a      	lsls	r2, r3, #29
 8007f92:	d505      	bpl.n	8007fa0 <__sflush_r+0x44>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	1ac0      	subs	r0, r0, r3
 8007f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f9a:	b10b      	cbz	r3, 8007fa0 <__sflush_r+0x44>
 8007f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f9e:	1ac0      	subs	r0, r0, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	6a21      	ldr	r1, [r4, #32]
 8007faa:	47b0      	blx	r6
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	d106      	bne.n	8007fc0 <__sflush_r+0x64>
 8007fb2:	6829      	ldr	r1, [r5, #0]
 8007fb4:	291d      	cmp	r1, #29
 8007fb6:	d82b      	bhi.n	8008010 <__sflush_r+0xb4>
 8007fb8:	4a28      	ldr	r2, [pc, #160]	; (800805c <__sflush_r+0x100>)
 8007fba:	410a      	asrs	r2, r1
 8007fbc:	07d6      	lsls	r6, r2, #31
 8007fbe:	d427      	bmi.n	8008010 <__sflush_r+0xb4>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	6062      	str	r2, [r4, #4]
 8007fc4:	6922      	ldr	r2, [r4, #16]
 8007fc6:	04d9      	lsls	r1, r3, #19
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	d504      	bpl.n	8007fd6 <__sflush_r+0x7a>
 8007fcc:	1c42      	adds	r2, r0, #1
 8007fce:	d101      	bne.n	8007fd4 <__sflush_r+0x78>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b903      	cbnz	r3, 8007fd6 <__sflush_r+0x7a>
 8007fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8007fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fd8:	602f      	str	r7, [r5, #0]
 8007fda:	2900      	cmp	r1, #0
 8007fdc:	d0ca      	beq.n	8007f74 <__sflush_r+0x18>
 8007fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	d002      	beq.n	8007fec <__sflush_r+0x90>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7fe fe1a 	bl	8006c20 <_free_r>
 8007fec:	2000      	movs	r0, #0
 8007fee:	6360      	str	r0, [r4, #52]	; 0x34
 8007ff0:	e7c1      	b.n	8007f76 <__sflush_r+0x1a>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	1c41      	adds	r1, r0, #1
 8007ffa:	d1c8      	bne.n	8007f8e <__sflush_r+0x32>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0c5      	beq.n	8007f8e <__sflush_r+0x32>
 8008002:	2b1d      	cmp	r3, #29
 8008004:	d001      	beq.n	800800a <__sflush_r+0xae>
 8008006:	2b16      	cmp	r3, #22
 8008008:	d101      	bne.n	800800e <__sflush_r+0xb2>
 800800a:	602f      	str	r7, [r5, #0]
 800800c:	e7b2      	b.n	8007f74 <__sflush_r+0x18>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	e7ae      	b.n	8007f76 <__sflush_r+0x1a>
 8008018:	690f      	ldr	r7, [r1, #16]
 800801a:	2f00      	cmp	r7, #0
 800801c:	d0aa      	beq.n	8007f74 <__sflush_r+0x18>
 800801e:	0793      	lsls	r3, r2, #30
 8008020:	bf18      	it	ne
 8008022:	2300      	movne	r3, #0
 8008024:	680e      	ldr	r6, [r1, #0]
 8008026:	bf08      	it	eq
 8008028:	694b      	ldreq	r3, [r1, #20]
 800802a:	1bf6      	subs	r6, r6, r7
 800802c:	600f      	str	r7, [r1, #0]
 800802e:	608b      	str	r3, [r1, #8]
 8008030:	2e00      	cmp	r6, #0
 8008032:	dd9f      	ble.n	8007f74 <__sflush_r+0x18>
 8008034:	4633      	mov	r3, r6
 8008036:	463a      	mov	r2, r7
 8008038:	4628      	mov	r0, r5
 800803a:	6a21      	ldr	r1, [r4, #32]
 800803c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008040:	47e0      	blx	ip
 8008042:	2800      	cmp	r0, #0
 8008044:	dc06      	bgt.n	8008054 <__sflush_r+0xf8>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008050:	81a3      	strh	r3, [r4, #12]
 8008052:	e790      	b.n	8007f76 <__sflush_r+0x1a>
 8008054:	4407      	add	r7, r0
 8008056:	1a36      	subs	r6, r6, r0
 8008058:	e7ea      	b.n	8008030 <__sflush_r+0xd4>
 800805a:	bf00      	nop
 800805c:	dfbffffe 	.word	0xdfbffffe

08008060 <_fflush_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	690b      	ldr	r3, [r1, #16]
 8008064:	4605      	mov	r5, r0
 8008066:	460c      	mov	r4, r1
 8008068:	b913      	cbnz	r3, 8008070 <_fflush_r+0x10>
 800806a:	2500      	movs	r5, #0
 800806c:	4628      	mov	r0, r5
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	b118      	cbz	r0, 800807a <_fflush_r+0x1a>
 8008072:	6a03      	ldr	r3, [r0, #32]
 8008074:	b90b      	cbnz	r3, 800807a <_fflush_r+0x1a>
 8008076:	f7fd fc89 	bl	800598c <__sinit>
 800807a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f3      	beq.n	800806a <_fflush_r+0xa>
 8008082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008084:	07d0      	lsls	r0, r2, #31
 8008086:	d404      	bmi.n	8008092 <_fflush_r+0x32>
 8008088:	0599      	lsls	r1, r3, #22
 800808a:	d402      	bmi.n	8008092 <_fflush_r+0x32>
 800808c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800808e:	f7fd ff0a 	bl	8005ea6 <__retarget_lock_acquire_recursive>
 8008092:	4628      	mov	r0, r5
 8008094:	4621      	mov	r1, r4
 8008096:	f7ff ff61 	bl	8007f5c <__sflush_r>
 800809a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800809c:	4605      	mov	r5, r0
 800809e:	07da      	lsls	r2, r3, #31
 80080a0:	d4e4      	bmi.n	800806c <_fflush_r+0xc>
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	059b      	lsls	r3, r3, #22
 80080a6:	d4e1      	bmi.n	800806c <_fflush_r+0xc>
 80080a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080aa:	f7fd fefd 	bl	8005ea8 <__retarget_lock_release_recursive>
 80080ae:	e7dd      	b.n	800806c <_fflush_r+0xc>

080080b0 <fiprintf>:
 80080b0:	b40e      	push	{r1, r2, r3}
 80080b2:	b503      	push	{r0, r1, lr}
 80080b4:	4601      	mov	r1, r0
 80080b6:	ab03      	add	r3, sp, #12
 80080b8:	4805      	ldr	r0, [pc, #20]	; (80080d0 <fiprintf+0x20>)
 80080ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80080be:	6800      	ldr	r0, [r0, #0]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	f7ff fe31 	bl	8007d28 <_vfiprintf_r>
 80080c6:	b002      	add	sp, #8
 80080c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080cc:	b003      	add	sp, #12
 80080ce:	4770      	bx	lr
 80080d0:	200001d0 	.word	0x200001d0

080080d4 <__swhatbuf_r>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	460c      	mov	r4, r1
 80080d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080dc:	4615      	mov	r5, r2
 80080de:	2900      	cmp	r1, #0
 80080e0:	461e      	mov	r6, r3
 80080e2:	b096      	sub	sp, #88	; 0x58
 80080e4:	da0c      	bge.n	8008100 <__swhatbuf_r+0x2c>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	2100      	movs	r1, #0
 80080ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080ee:	bf0c      	ite	eq
 80080f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080f4:	2340      	movne	r3, #64	; 0x40
 80080f6:	2000      	movs	r0, #0
 80080f8:	6031      	str	r1, [r6, #0]
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	b016      	add	sp, #88	; 0x58
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	466a      	mov	r2, sp
 8008102:	f000 f849 	bl	8008198 <_fstat_r>
 8008106:	2800      	cmp	r0, #0
 8008108:	dbed      	blt.n	80080e6 <__swhatbuf_r+0x12>
 800810a:	9901      	ldr	r1, [sp, #4]
 800810c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008110:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008114:	4259      	negs	r1, r3
 8008116:	4159      	adcs	r1, r3
 8008118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811c:	e7eb      	b.n	80080f6 <__swhatbuf_r+0x22>

0800811e <__smakebuf_r>:
 800811e:	898b      	ldrh	r3, [r1, #12]
 8008120:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008122:	079d      	lsls	r5, r3, #30
 8008124:	4606      	mov	r6, r0
 8008126:	460c      	mov	r4, r1
 8008128:	d507      	bpl.n	800813a <__smakebuf_r+0x1c>
 800812a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	2301      	movs	r3, #1
 8008134:	6163      	str	r3, [r4, #20]
 8008136:	b002      	add	sp, #8
 8008138:	bd70      	pop	{r4, r5, r6, pc}
 800813a:	466a      	mov	r2, sp
 800813c:	ab01      	add	r3, sp, #4
 800813e:	f7ff ffc9 	bl	80080d4 <__swhatbuf_r>
 8008142:	9900      	ldr	r1, [sp, #0]
 8008144:	4605      	mov	r5, r0
 8008146:	4630      	mov	r0, r6
 8008148:	f7fb ffb2 	bl	80040b0 <_malloc_r>
 800814c:	b948      	cbnz	r0, 8008162 <__smakebuf_r+0x44>
 800814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008152:	059a      	lsls	r2, r3, #22
 8008154:	d4ef      	bmi.n	8008136 <__smakebuf_r+0x18>
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	f043 0302 	orr.w	r3, r3, #2
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	e7e3      	b.n	800812a <__smakebuf_r+0xc>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	6020      	str	r0, [r4, #0]
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	6120      	str	r0, [r4, #16]
 8008170:	6163      	str	r3, [r4, #20]
 8008172:	9b01      	ldr	r3, [sp, #4]
 8008174:	b15b      	cbz	r3, 800818e <__smakebuf_r+0x70>
 8008176:	4630      	mov	r0, r6
 8008178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817c:	f000 f81e 	bl	80081bc <_isatty_r>
 8008180:	b128      	cbz	r0, 800818e <__smakebuf_r+0x70>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f023 0303 	bic.w	r3, r3, #3
 8008188:	f043 0301 	orr.w	r3, r3, #1
 800818c:	81a3      	strh	r3, [r4, #12]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	431d      	orrs	r5, r3
 8008192:	81a5      	strh	r5, [r4, #12]
 8008194:	e7cf      	b.n	8008136 <__smakebuf_r+0x18>
	...

08008198 <_fstat_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	2300      	movs	r3, #0
 800819c:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_fstat_r+0x20>)
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	f7f9 ffbc 	bl	8002122 <_fstat>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d102      	bne.n	80081b4 <_fstat_r+0x1c>
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	b103      	cbz	r3, 80081b4 <_fstat_r+0x1c>
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000414 	.word	0x20000414

080081bc <_isatty_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	2300      	movs	r3, #0
 80081c0:	4d05      	ldr	r5, [pc, #20]	; (80081d8 <_isatty_r+0x1c>)
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	602b      	str	r3, [r5, #0]
 80081c8:	f7f9 ffba 	bl	8002140 <_isatty>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_isatty_r+0x1a>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_isatty_r+0x1a>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	20000414 	.word	0x20000414

080081dc <abort>:
 80081dc:	2006      	movs	r0, #6
 80081de:	b508      	push	{r3, lr}
 80081e0:	f000 f840 	bl	8008264 <raise>
 80081e4:	2001      	movs	r0, #1
 80081e6:	f7f9 ff87 	bl	80020f8 <_exit>

080081ea <_calloc_r>:
 80081ea:	b570      	push	{r4, r5, r6, lr}
 80081ec:	fba1 5402 	umull	r5, r4, r1, r2
 80081f0:	b934      	cbnz	r4, 8008200 <_calloc_r+0x16>
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7fb ff5c 	bl	80040b0 <_malloc_r>
 80081f8:	4606      	mov	r6, r0
 80081fa:	b928      	cbnz	r0, 8008208 <_calloc_r+0x1e>
 80081fc:	4630      	mov	r0, r6
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	220c      	movs	r2, #12
 8008202:	2600      	movs	r6, #0
 8008204:	6002      	str	r2, [r0, #0]
 8008206:	e7f9      	b.n	80081fc <_calloc_r+0x12>
 8008208:	462a      	mov	r2, r5
 800820a:	4621      	mov	r1, r4
 800820c:	f7fd fd3a 	bl	8005c84 <memset>
 8008210:	e7f4      	b.n	80081fc <_calloc_r+0x12>

08008212 <_raise_r>:
 8008212:	291f      	cmp	r1, #31
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4604      	mov	r4, r0
 8008218:	460d      	mov	r5, r1
 800821a:	d904      	bls.n	8008226 <_raise_r+0x14>
 800821c:	2316      	movs	r3, #22
 800821e:	6003      	str	r3, [r0, #0]
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	bd38      	pop	{r3, r4, r5, pc}
 8008226:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008228:	b112      	cbz	r2, 8008230 <_raise_r+0x1e>
 800822a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800822e:	b94b      	cbnz	r3, 8008244 <_raise_r+0x32>
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f831 	bl	8008298 <_getpid_r>
 8008236:	462a      	mov	r2, r5
 8008238:	4601      	mov	r1, r0
 800823a:	4620      	mov	r0, r4
 800823c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008240:	f000 b818 	b.w	8008274 <_kill_r>
 8008244:	2b01      	cmp	r3, #1
 8008246:	d00a      	beq.n	800825e <_raise_r+0x4c>
 8008248:	1c59      	adds	r1, r3, #1
 800824a:	d103      	bne.n	8008254 <_raise_r+0x42>
 800824c:	2316      	movs	r3, #22
 800824e:	6003      	str	r3, [r0, #0]
 8008250:	2001      	movs	r0, #1
 8008252:	e7e7      	b.n	8008224 <_raise_r+0x12>
 8008254:	2400      	movs	r4, #0
 8008256:	4628      	mov	r0, r5
 8008258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800825c:	4798      	blx	r3
 800825e:	2000      	movs	r0, #0
 8008260:	e7e0      	b.n	8008224 <_raise_r+0x12>
	...

08008264 <raise>:
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <raise+0xc>)
 8008266:	4601      	mov	r1, r0
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f7ff bfd2 	b.w	8008212 <_raise_r>
 800826e:	bf00      	nop
 8008270:	200001d0 	.word	0x200001d0

08008274 <_kill_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	2300      	movs	r3, #0
 8008278:	4d06      	ldr	r5, [pc, #24]	; (8008294 <_kill_r+0x20>)
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f7f9 ff29 	bl	80020d8 <_kill>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	d102      	bne.n	8008290 <_kill_r+0x1c>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b103      	cbz	r3, 8008290 <_kill_r+0x1c>
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	20000414 	.word	0x20000414

08008298 <_getpid_r>:
 8008298:	f7f9 bf17 	b.w	80020ca <_getpid>

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	bf00      	nop
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
