
CAN_HW_Validation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005450  08005450  00015450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005864  08005864  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005864  08005864  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005864  08005864  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800586c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001d4  08005a40  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08005a40  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b1b  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001919  00000000  00000000  00028d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  0002a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000641  00000000  00000000  0002aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fd7  00000000  00000000  0002b501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e21  00000000  00000000  000454d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946db  00000000  00000000  0004f2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030b8  00000000  00000000  000e39d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000e6a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08005438 	.word	0x08005438

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08005438 	.word	0x08005438

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <DebugIO_Init>:
 * Configure a UART peripheral assignment for printf debugging
 *
 * @param huart HAL handle for the UART to use for printf debugging
*/
void DebugIO_Init(UART_HandleTypeDef *huart)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    io_huart = huart;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <DebugIO_Init+0x18>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	200001f0 	.word	0x200001f0

08000b7c <__io_putchar>:

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
    // Output on UART
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <__io_putchar+0x24>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f001 fdd2 	bl	8002738 <HAL_UART_Transmit>
#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
#endif // USE_SWO

    return ch;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200001f0 	.word	0x200001f0

08000ba4 <__io_getchar>:

int __io_getchar()
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e00a      	b.n	8000bda <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8000bc4:	f7ff ffee 	bl	8000ba4 <__io_getchar>
 8000bc8:	4601      	mov	r1, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1c5a      	adds	r2, r3, #1
 8000bce:	60ba      	str	r2, [r7, #8]
 8000bd0:	b2ca      	uxtb	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dbf0      	blt.n	8000bc4 <_read+0x12>
    }

    return len;
 8000be2:	687b      	ldr	r3, [r7, #4]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_write>:

int _write(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e009      	b.n	8000c12 <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1c5a      	adds	r2, r3, #1
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffb8 	bl	8000b7c <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf1      	blt.n	8000bfe <_write+0x12>
    }
    return len;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b092      	sub	sp, #72	; 0x48
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2a:	f000 fad1 	bl	80011d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2e:	f000 f851 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f8ff 	bl	8000e34 <MX_GPIO_Init>
  MX_CAN_Init();
 8000c36:	f000 f88f 	bl	8000d58 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000c3a:	f000 f8d1 	bl	8000de0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DebugIO_Init(&huart2);
 8000c3e:	481f      	ldr	r0, [pc, #124]	; (8000cbc <main+0x98>)
 8000c40:	f7ff ff8e 	bl	8000b60 <DebugIO_Init>
	// This test will receive a CAN message and toggle the LED, and once doing so,
	  // send out another CAN message.
	  CAN_RxHeaderTypeDef RxHeader;
	  uint8_t RxData[8];

	  if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) > 0) {
 8000c44:	2100      	movs	r1, #0
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <main+0x9c>)
 8000c48:	f000 fe77 	bl	800193a <HAL_CAN_GetRxFifoFillLevel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f8      	beq.n	8000c44 <main+0x20>
		  if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <main+0x9c>)
 8000c5e:	f000 fd4b 	bl	80016f8 <HAL_CAN_GetRxMessage>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1ed      	bne.n	8000c44 <main+0x20>
			  printf("Received CAN message!\n");
 8000c68:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <main+0xa0>)
 8000c6a:	f002 fc59 	bl	8003520 <puts>
			  // Process received message

			  // Now send a message back
			  CAN_TxHeaderTypeDef TxHeader;
			  uint32_t TxMailbox;
			  uint8_t TxData[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}; // Example data
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <main+0xa4>)
 8000c70:	463b      	mov	r3, r7
 8000c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c76:	e883 0003 	stmia.w	r3, {r0, r1}

			  // Configure the Tx Header
			  TxHeader.DLC = 8; // Data length code
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	61fb      	str	r3, [r7, #28]
			  TxHeader.StdId = 0x123; // Standard identifier
 8000c7e:	f240 1323 	movw	r3, #291	; 0x123
 8000c82:	60fb      	str	r3, [r7, #12]
			  TxHeader.ExtId = 0x01; // Extended identifier (if using extended ID)
 8000c84:	2301      	movs	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
			  TxHeader.RTR = CAN_RTR_DATA; // Data frame
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
			  TxHeader.IDE = CAN_ID_STD; // Standard ID
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

			  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	463a      	mov	r2, r7
 8000c96:	f107 010c 	add.w	r1, r7, #12
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <main+0x9c>)
 8000c9c:	f000 fc5d 	bl	800155a <HAL_CAN_AddTxMessage>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <main+0x88>
				  printf("Failed to send CAN message with TxData\n");
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <main+0xa8>)
 8000ca8:	f002 fc3a 	bl	8003520 <puts>
			  }
			  printf("Sent reply CAN message\n");
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <main+0xac>)
 8000cae:	f002 fc37 	bl	8003520 <puts>

			  // Verify the message is received with PCAN-View.
			  HAL_Delay(DELAY_TIME);
 8000cb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cb6:	f000 faed 	bl	8001294 <HAL_Delay>
  {
 8000cba:	e7c3      	b.n	8000c44 <main+0x20>
 8000cbc:	2000021c 	.word	0x2000021c
 8000cc0:	200001f4 	.word	0x200001f4
 8000cc4:	08005450 	.word	0x08005450
 8000cc8:	080054a8 	.word	0x080054a8
 8000ccc:	08005468 	.word	0x08005468
 8000cd0:	08005490 	.word	0x08005490

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b090      	sub	sp, #64	; 0x40
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2228      	movs	r2, #40	; 0x28
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fcfc 	bl	80036e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d0a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 f8af 	bl	8001e78 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d20:	f000 f8aa 	bl	8000e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	230f      	movs	r3, #15
 8000d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fb1c 	bl	800237c <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d4a:	f000 f895 	bl	8000e78 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3740      	adds	r7, #64	; 0x40
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <MX_CAN_Init+0x80>)
 8000d60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d76:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d7a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000daa:	f000 fa97 	bl	80012dc <HAL_CAN_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000db4:	f000 f860 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_CAN_Init+0x7c>)
 8000dba:	f000 fb8a 	bl	80014d2 <HAL_CAN_Start>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <MX_CAN_Init+0x76>
	{
	  printf("HAL CAN Start failed\n");
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_CAN_Init+0x84>)
 8000dc6:	f002 fbab 	bl	8003520 <puts>
	  Error_Handler();
 8000dca:	f000 f855 	bl	8000e78 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001f4 	.word	0x200001f4
 8000dd8:	40006400 	.word	0x40006400
 8000ddc:	080054b0 	.word	0x080054b0

08000de0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART2_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART2_UART_Init+0x4c>)
 8000e18:	f001 fc3e 	bl	8002698 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 f829 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000021c 	.word	0x2000021c
 8000e30:	40004400 	.word	0x40004400

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <MX_GPIO_Init+0x40>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_MspInit+0x40>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_MspInit+0x40>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_MspInit+0x40>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_MspInit+0x40>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_CAN_MspInit+0xb0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d143      	bne.n	8000f70 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000eee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	61d3      	str	r3, [r2, #28]
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_CAN_MspInit+0xb4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <HAL_CAN_MspInit+0xb8>)
 8000f2e:	f000 fe0f 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <HAL_CAN_MspInit+0xb8>)
 8000f48:	f000 fe02 	bl	8001b50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_CAN_MspInit+0xbc>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_CAN_MspInit+0xbc>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40006400 	.word	0x40006400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40010000 	.word	0x40010000

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d12f      	bne.n	8001008 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	61d3      	str	r3, [r2, #28]
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <HAL_UART_MspInit+0x90>)
 8000fec:	f000 fdb0 	bl	8001b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_UART_MspInit+0x90>)
 8001004:	f000 fda4 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40004400 	.word	0x40004400
 8001014:	40021000 	.word	0x40021000
 8001018:	40010800 	.word	0x40010800

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f8fb 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  return 1;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001082:	f002 fb7f 	bl	8003784 <__errno>
 8001086:	4603      	mov	r3, r0
 8001088:	2216      	movs	r2, #22
 800108a:	601a      	str	r2, [r3, #0]
  return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_exit>:

void _exit (int status)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010aa:	e7fe      	b.n	80010aa <_exit+0x12>

080010ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	605a      	str	r2, [r3, #4]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <_isatty>:

int _isatty(int file)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f002 fb22 	bl	8003784 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000c000 	.word	0x2000c000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000264 	.word	0x20000264
 8001174:	200003b8 	.word	0x200003b8

08001178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001184:	f7ff fff8 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800118a:	490c      	ldr	r1, [pc, #48]	; (80011bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011a0:	4c09      	ldr	r4, [pc, #36]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f002 faef 	bl	8003790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b2:	f7ff fd37 	bl	8000c24 <main>
  bx lr
 80011b6:	4770      	bx	lr
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011c0:	0800586c 	.word	0x0800586c
  ldr r2, =_sbss
 80011c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011c8:	200003b8 	.word	0x200003b8

080011cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC1_2_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x28>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 fc81 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fe4a 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40022000 	.word	0x40022000

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fc8b 	bl	8001b36 <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 fc61 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000008 	.word	0x20000008
 800127c:	20000268 	.word	0x20000268

08001280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000268 	.word	0x20000268

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0ed      	b.n	80014ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fde4 	bl	8000ec8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff ffb6 	bl	8001280 <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001316:	e012      	b.n	800133e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001318:	f7ff ffb2 	bl	8001280 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90b      	bls.n	800133e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c5      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0e5      	beq.n	8001318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0202 	bic.w	r2, r2, #2
 800135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff ff90 	bl	8001280 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001362:	e012      	b.n	800138a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001364:	f7ff ff8c 	bl	8001280 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d90b      	bls.n	800138a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2205      	movs	r2, #5
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e09f      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e5      	bne.n	8001364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7e1b      	ldrb	r3, [r3, #24]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e5b      	ldrb	r3, [r3, #25]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e9b      	ldrb	r3, [r3, #26]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0220 	bic.w	r2, r2, #32
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7edb      	ldrb	r3, [r3, #27]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0210 	bic.w	r2, r2, #16
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0208 	orr.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f5b      	ldrb	r3, [r3, #29]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0204 	orr.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d12e      	bne.n	8001544 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014fe:	f7ff febf 	bl	8001280 <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001504:	e012      	b.n	800152c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001506:	f7ff febb 	bl	8001280 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b0a      	cmp	r3, #10
 8001512:	d90b      	bls.n	800152c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2205      	movs	r2, #5
 8001524:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e012      	b.n	8001552 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1e5      	bne.n	8001506 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e006      	b.n	8001552 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800155a:	b480      	push	{r7}
 800155c:	b089      	sub	sp, #36	; 0x24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d003      	beq.n	8001586 <HAL_CAN_AddTxMessage+0x2c>
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	2b02      	cmp	r3, #2
 8001582:	f040 80ad 	bne.w	80016e0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001596:	2b00      	cmp	r3, #0
 8001598:	d105      	bne.n	80015a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8095 	beq.w	80016d0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	0e1b      	lsrs	r3, r3, #24
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015b0:	2201      	movs	r2, #1
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	409a      	lsls	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	6809      	ldr	r1, [r1, #0]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3318      	adds	r3, #24
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	440b      	add	r3, r1
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	e00f      	b.n	80015fe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ee:	68f9      	ldr	r1, [r7, #12]
 80015f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3318      	adds	r3, #24
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6819      	ldr	r1, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3318      	adds	r3, #24
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	440b      	add	r3, r1
 800160e:	3304      	adds	r3, #4
 8001610:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	7d1b      	ldrb	r3, [r3, #20]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d111      	bne.n	800163e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3318      	adds	r3, #24
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	3304      	adds	r3, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3318      	adds	r3, #24
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	440b      	add	r3, r1
 800163a:	3304      	adds	r3, #4
 800163c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3307      	adds	r3, #7
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	061a      	lsls	r2, r3, #24
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3306      	adds	r3, #6
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3305      	adds	r3, #5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4313      	orrs	r3, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	3204      	adds	r2, #4
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	4610      	mov	r0, r2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	6811      	ldr	r1, [r2, #0]
 8001666:	ea43 0200 	orr.w	r2, r3, r0
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	440b      	add	r3, r1
 8001670:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001674:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	061a      	lsls	r2, r3, #24
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3302      	adds	r3, #2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	4313      	orrs	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	4610      	mov	r0, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	6811      	ldr	r1, [r2, #0]
 800169c:	ea43 0200 	orr.w	r2, r3, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3318      	adds	r3, #24
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3318      	adds	r3, #24
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e00e      	b.n	80016ee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e006      	b.n	80016ee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
  }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d003      	beq.n	800171c <HAL_CAN_GetRxMessage+0x24>
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b02      	cmp	r3, #2
 8001718:	f040 8103 	bne.w	8001922 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10e      	bne.n	8001740 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d116      	bne.n	800175e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0f7      	b.n	8001930 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0e8      	b.n	8001930 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	331b      	adds	r3, #27
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0204 	and.w	r2, r3, #4
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10c      	bne.n	8001796 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	331b      	adds	r3, #27
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0d5b      	lsrs	r3, r3, #21
 800178c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00b      	b.n	80017ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	331b      	adds	r3, #27
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	331b      	adds	r3, #27
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0202 	and.w	r2, r3, #2
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	331b      	adds	r3, #27
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2208      	movs	r2, #8
 80017e0:	611a      	str	r2, [r3, #16]
 80017e2:	e00b      	b.n	80017fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	3304      	adds	r3, #4
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 020f 	and.w	r2, r3, #15
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	331b      	adds	r3, #27
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	3304      	adds	r3, #4
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	331b      	adds	r3, #27
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	b29a      	uxth	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0a1a      	lsrs	r2, r3, #8
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4413      	add	r3, r2
 8001866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0c1a      	lsrs	r2, r3, #16
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	3302      	adds	r3, #2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0e1a      	lsrs	r2, r3, #24
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	3303      	adds	r3, #3
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3304      	adds	r3, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0a1a      	lsrs	r2, r3, #8
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3305      	adds	r3, #5
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0c1a      	lsrs	r2, r3, #16
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	3306      	adds	r3, #6
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e1a      	lsrs	r2, r3, #24
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	3307      	adds	r3, #7
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d108      	bne.n	800190e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0220 	orr.w	r2, r2, #32
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	e007      	b.n	800191e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e006      	b.n	8001930 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d002      	beq.n	800195c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d10f      	bne.n	800197c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e005      	b.n	800197c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800197c:	68fb      	ldr	r3, [r7, #12]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff90 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff49 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff5e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff90 	bl	8001a40 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5f 	bl	80019ec <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffb0 	bl	8001aa4 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e179      	b.n	8001e58 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8168 	bne.w	8001e52 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a96      	ldr	r2, [pc, #600]	; (8001de0 <HAL_GPIO_Init+0x290>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d05e      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x290>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d875      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b92:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <HAL_GPIO_Init+0x294>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d058      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b98:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x294>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d86f      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b9e:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d052      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001ba4:	4a90      	ldr	r2, [pc, #576]	; (8001de8 <HAL_GPIO_Init+0x298>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d869      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001baa:	4a90      	ldr	r2, [pc, #576]	; (8001dec <HAL_GPIO_Init+0x29c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d04c      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bb0:	4a8e      	ldr	r2, [pc, #568]	; (8001dec <HAL_GPIO_Init+0x29c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d863      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bb6:	4a8e      	ldr	r2, [pc, #568]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d046      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bbc:	4a8c      	ldr	r2, [pc, #560]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d85d      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d82a      	bhi.n	8001c1c <HAL_GPIO_Init+0xcc>
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d859      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <HAL_GPIO_Init+0x80>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001c37 	.word	0x08001c37
 8001bdc:	08001c79 	.word	0x08001c79
 8001be0:	08001c7f 	.word	0x08001c7f
 8001be4:	08001c7f 	.word	0x08001c7f
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001c7f 	.word	0x08001c7f
 8001bf0:	08001c7f 	.word	0x08001c7f
 8001bf4:	08001c7f 	.word	0x08001c7f
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001c7f 	.word	0x08001c7f
 8001c00:	08001c7f 	.word	0x08001c7f
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c7f 	.word	0x08001c7f
 8001c0c:	08001c7f 	.word	0x08001c7f
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	4a75      	ldr	r2, [pc, #468]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c22:	e02c      	b.n	8001c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e029      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	3304      	adds	r3, #4
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e024      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e01f      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	330c      	adds	r3, #12
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e01a      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c52:	2304      	movs	r3, #4
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e013      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	611a      	str	r2, [r3, #16]
          break;
 8001c6a:	e009      	b.n	8001c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	615a      	str	r2, [r3, #20]
          break;
 8001c76:	e003      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          break;
 8001c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d801      	bhi.n	8001c8a <HAL_GPIO_Init+0x13a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_Init+0x13e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d802      	bhi.n	8001c9c <HAL_GPIO_Init+0x14c>
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x152>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	210f      	movs	r1, #15
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80c1 	beq.w	8001e52 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce8:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3c      	ldr	r2, [pc, #240]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01f      	beq.n	8001d54 <HAL_GPIO_Init+0x204>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3b      	ldr	r2, [pc, #236]	; (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d019      	beq.n	8001d50 <HAL_GPIO_Init+0x200>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3a      	ldr	r2, [pc, #232]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1fc>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1f8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1f4>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1f0>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e00a      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d40:	2306      	movs	r3, #6
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d54:	2300      	movs	r3, #0
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d66:	4925      	ldr	r1, [pc, #148]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4924      	ldr	r1, [pc, #144]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4920      	ldr	r1, [pc, #128]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	491a      	ldr	r1, [pc, #104]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4916      	ldr	r1, [pc, #88]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d025      	beq.n	8001e1c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4910      	ldr	r1, [pc, #64]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e025      	b.n	8001e2a <HAL_GPIO_Init+0x2da>
 8001dde:	bf00      	nop
 8001de0:	10320000 	.word	0x10320000
 8001de4:	10310000 	.word	0x10310000
 8001de8:	10220000 	.word	0x10220000
 8001dec:	10210000 	.word	0x10210000
 8001df0:	10120000 	.word	0x10120000
 8001df4:	10110000 	.word	0x10110000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	40011000 	.word	0x40011000
 8001e0c:	40011400 	.word	0x40011400
 8001e10:	40011800 	.word	0x40011800
 8001e14:	40011c00 	.word	0x40011c00
 8001e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4913      	ldr	r1, [pc, #76]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
 8001e42:	e006      	b.n	8001e52 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4909      	ldr	r1, [pc, #36]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f ae7e 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	372c      	adds	r7, #44	; 0x2c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e272      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e24c      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x76>
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f994 	bl	8001280 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f990 	bl	8001280 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e200      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe4>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f980 	bl	8001280 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f97c 	bl	8001280 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1ec      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x10c>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c0      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff f935 	bl	8001280 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f931 	bl	8001280 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f914 	bl	8001280 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f910 	bl	8001280 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e180      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03a      	beq.n	80020fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff f8f4 	bl	8001280 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff f8f0 	bl	8001280 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e160      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 face 	bl	800265c <RCC_Delay>
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff f8da 	bl	8001280 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f8d6 	bl	8001280 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e146      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420000 	.word	0x42420000
 80020ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e9      	bne.n	80020d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a6 	beq.w	8002256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7e      	ldr	r2, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff f897 	bl	8001280 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff f893 	bl	8001280 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e103      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x334>
 8002192:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x356>
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a5d      	ldr	r2, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7ff f847 	bl	8001280 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff f843 	bl	8001280 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0b1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x37e>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff f831 	bl	8001280 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff f82d 	bl	8001280 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e09b      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d061      	beq.n	8002330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d146      	bne.n	8002302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff f801 	bl	8001280 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe fffd 	bl	8001280 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e06d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4921      	ldr	r1, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a19      	ldr	r1, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	430b      	orrs	r3, r1
 80022ce:	491b      	ldr	r1, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe ffd1 	bl	8001280 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7fe ffcd 	bl	8001280 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
 8002300:	e035      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe ffba 	bl	8001280 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe ffb6 	bl	8001280 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e026      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x498>
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e019      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x500>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d0      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e073      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7fe ff08 	bl	8001280 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe ff04 	bl	8001280 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e053      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1cc>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fe66 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	080054c8 	.word	0x080054c8
 8002548:	20000000 	.word	0x20000000
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x30>
 800257a:	2b08      	cmp	r3, #8
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x36>
 800257e:	e027      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	e027      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0c5b      	lsrs	r3, r3, #17
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e004      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	613b      	str	r3, [r7, #16]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	693b      	ldr	r3, [r7, #16]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	080054e0 	.word	0x080054e0
 80025f0:	080054f0 	.word	0x080054f0
 80025f4:	003d0900 	.word	0x003d0900

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000000 	.word	0x20000000

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff2 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	080054d8 	.word	0x080054d8

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002638:	f7ff ffde 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0adb      	lsrs	r3, r3, #11
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	080054d8 	.word	0x080054d8

0800265c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCC_Delay+0x34>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <RCC_Delay+0x38>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x1c>
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000000 	.word	0x20000000
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e042      	b.n	8002730 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fc62 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	; 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f91d 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d16d      	bne.n	8002834 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Transmit+0x2c>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e066      	b.n	8002836 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002776:	f7fe fd83 	bl	8001280 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	d108      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e003      	b.n	80027ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ac:	e02a      	b.n	8002804 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f840 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e036      	b.n	8002836 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3302      	adds	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e007      	b.n	80027f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1cf      	bne.n	80027ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f810 	bl	800283e <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e006      	b.n	8002836 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b090      	sub	sp, #64	; 0x40
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284e:	e050      	b.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d04c      	beq.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <UART_WaitOnFlagUntilTimeout+0x30>
 800285e:	f7fe fd0f 	bl	8001280 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800286a:	429a      	cmp	r2, r3
 800286c:	d241      	bcs.n	80028f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288e:	637a      	str	r2, [r7, #52]	; 0x34
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e5      	bne.n	800286e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	613b      	str	r3, [r7, #16]
   return(result);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c2:	623a      	str	r2, [r7, #32]
 80028c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	69f9      	ldr	r1, [r7, #28]
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e5      	bne.n	80028a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e00f      	b.n	8002912 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4013      	ands	r3, r2
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	429a      	cmp	r2, r3
 800290e:	d09f      	beq.n	8002850 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3740      	adds	r7, #64	; 0x40
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002956:	f023 030c 	bic.w	r3, r3, #12
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	430b      	orrs	r3, r1
 8002962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2c      	ldr	r2, [pc, #176]	; (8002a30 <UART_SetConfig+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff fe56 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	e002      	b.n	8002992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7ff fe3e 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8002990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <UART_SetConfig+0x118>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	0119      	lsls	r1, r3, #4
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009a      	lsls	r2, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <UART_SetConfig+0x118>)
 80029ca:	fba3 0302 	umull	r0, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2064      	movs	r0, #100	; 0x64
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	3332      	adds	r3, #50	; 0x32
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <UART_SetConfig+0x118>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e8:	4419      	add	r1, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009a      	lsls	r2, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <UART_SetConfig+0x118>)
 8002a02:	fba3 0302 	umull	r0, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2064      	movs	r0, #100	; 0x64
 8002a0a:	fb00 f303 	mul.w	r3, r0, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3332      	adds	r3, #50	; 0x32
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <UART_SetConfig+0x118>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	440a      	add	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40013800 	.word	0x40013800
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <__cvt>:
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3e:	461f      	mov	r7, r3
 8002a40:	bfbb      	ittet	lt
 8002a42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a46:	461f      	movlt	r7, r3
 8002a48:	2300      	movge	r3, #0
 8002a4a:	232d      	movlt	r3, #45	; 0x2d
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	4614      	mov	r4, r2
 8002a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002a52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a54:	7013      	strb	r3, [r2, #0]
 8002a56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002a58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002a5c:	f023 0820 	bic.w	r8, r3, #32
 8002a60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a64:	d005      	beq.n	8002a72 <__cvt+0x3a>
 8002a66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a6a:	d100      	bne.n	8002a6e <__cvt+0x36>
 8002a6c:	3501      	adds	r5, #1
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e000      	b.n	8002a74 <__cvt+0x3c>
 8002a72:	2303      	movs	r3, #3
 8002a74:	aa07      	add	r2, sp, #28
 8002a76:	9204      	str	r2, [sp, #16]
 8002a78:	aa06      	add	r2, sp, #24
 8002a7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002a7e:	e9cd 3500 	strd	r3, r5, [sp]
 8002a82:	4622      	mov	r2, r4
 8002a84:	463b      	mov	r3, r7
 8002a86:	f000 ff43 	bl	8003910 <_dtoa_r>
 8002a8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a8e:	4606      	mov	r6, r0
 8002a90:	d102      	bne.n	8002a98 <__cvt+0x60>
 8002a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a94:	07db      	lsls	r3, r3, #31
 8002a96:	d522      	bpl.n	8002ade <__cvt+0xa6>
 8002a98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a9c:	eb06 0905 	add.w	r9, r6, r5
 8002aa0:	d110      	bne.n	8002ac4 <__cvt+0x8c>
 8002aa2:	7833      	ldrb	r3, [r6, #0]
 8002aa4:	2b30      	cmp	r3, #48	; 0x30
 8002aa6:	d10a      	bne.n	8002abe <__cvt+0x86>
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4620      	mov	r0, r4
 8002aae:	4639      	mov	r1, r7
 8002ab0:	f7fd ffe6 	bl	8000a80 <__aeabi_dcmpeq>
 8002ab4:	b918      	cbnz	r0, 8002abe <__cvt+0x86>
 8002ab6:	f1c5 0501 	rsb	r5, r5, #1
 8002aba:	f8ca 5000 	str.w	r5, [sl]
 8002abe:	f8da 3000 	ldr.w	r3, [sl]
 8002ac2:	4499      	add	r9, r3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4639      	mov	r1, r7
 8002acc:	f7fd ffd8 	bl	8000a80 <__aeabi_dcmpeq>
 8002ad0:	b108      	cbz	r0, 8002ad6 <__cvt+0x9e>
 8002ad2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ad6:	2230      	movs	r2, #48	; 0x30
 8002ad8:	9b07      	ldr	r3, [sp, #28]
 8002ada:	454b      	cmp	r3, r9
 8002adc:	d307      	bcc.n	8002aee <__cvt+0xb6>
 8002ade:	4630      	mov	r0, r6
 8002ae0:	9b07      	ldr	r3, [sp, #28]
 8002ae2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ae4:	1b9b      	subs	r3, r3, r6
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	b008      	add	sp, #32
 8002aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aee:	1c59      	adds	r1, r3, #1
 8002af0:	9107      	str	r1, [sp, #28]
 8002af2:	701a      	strb	r2, [r3, #0]
 8002af4:	e7f0      	b.n	8002ad8 <__cvt+0xa0>

08002af6 <__exponent>:
 8002af6:	4603      	mov	r3, r0
 8002af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002afa:	2900      	cmp	r1, #0
 8002afc:	f803 2b02 	strb.w	r2, [r3], #2
 8002b00:	bfb6      	itet	lt
 8002b02:	222d      	movlt	r2, #45	; 0x2d
 8002b04:	222b      	movge	r2, #43	; 0x2b
 8002b06:	4249      	neglt	r1, r1
 8002b08:	2909      	cmp	r1, #9
 8002b0a:	7042      	strb	r2, [r0, #1]
 8002b0c:	dd2a      	ble.n	8002b64 <__exponent+0x6e>
 8002b0e:	f10d 0207 	add.w	r2, sp, #7
 8002b12:	4617      	mov	r7, r2
 8002b14:	260a      	movs	r6, #10
 8002b16:	fb91 f5f6 	sdiv	r5, r1, r6
 8002b1a:	4694      	mov	ip, r2
 8002b1c:	fb06 1415 	mls	r4, r6, r5, r1
 8002b20:	3430      	adds	r4, #48	; 0x30
 8002b22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002b26:	460c      	mov	r4, r1
 8002b28:	2c63      	cmp	r4, #99	; 0x63
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f102 32ff 	add.w	r2, r2, #4294967295
 8002b30:	dcf1      	bgt.n	8002b16 <__exponent+0x20>
 8002b32:	3130      	adds	r1, #48	; 0x30
 8002b34:	f1ac 0402 	sub.w	r4, ip, #2
 8002b38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	1c41      	adds	r1, r0, #1
 8002b40:	42ba      	cmp	r2, r7
 8002b42:	d30a      	bcc.n	8002b5a <__exponent+0x64>
 8002b44:	f10d 0209 	add.w	r2, sp, #9
 8002b48:	eba2 020c 	sub.w	r2, r2, ip
 8002b4c:	42bc      	cmp	r4, r7
 8002b4e:	bf88      	it	hi
 8002b50:	2200      	movhi	r2, #0
 8002b52:	4413      	add	r3, r2
 8002b54:	1a18      	subs	r0, r3, r0
 8002b56:	b003      	add	sp, #12
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002b5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002b62:	e7ed      	b.n	8002b40 <__exponent+0x4a>
 8002b64:	2330      	movs	r3, #48	; 0x30
 8002b66:	3130      	adds	r1, #48	; 0x30
 8002b68:	7083      	strb	r3, [r0, #2]
 8002b6a:	70c1      	strb	r1, [r0, #3]
 8002b6c:	1d03      	adds	r3, r0, #4
 8002b6e:	e7f1      	b.n	8002b54 <__exponent+0x5e>

08002b70 <_printf_float>:
 8002b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b74:	b091      	sub	sp, #68	; 0x44
 8002b76:	460c      	mov	r4, r1
 8002b78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002b7c:	4616      	mov	r6, r2
 8002b7e:	461f      	mov	r7, r3
 8002b80:	4605      	mov	r5, r0
 8002b82:	f000 fdb5 	bl	80036f0 <_localeconv_r>
 8002b86:	6803      	ldr	r3, [r0, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b8c:	f7fd fb4c 	bl	8000228 <strlen>
 8002b90:	2300      	movs	r3, #0
 8002b92:	930e      	str	r3, [sp, #56]	; 0x38
 8002b94:	f8d8 3000 	ldr.w	r3, [r8]
 8002b98:	900a      	str	r0, [sp, #40]	; 0x28
 8002b9a:	3307      	adds	r3, #7
 8002b9c:	f023 0307 	bic.w	r3, r3, #7
 8002ba0:	f103 0208 	add.w	r2, r3, #8
 8002ba4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002ba8:	f8d4 b000 	ldr.w	fp, [r4]
 8002bac:	f8c8 2000 	str.w	r2, [r8]
 8002bb0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8002bb4:	4652      	mov	r2, sl
 8002bb6:	4643      	mov	r3, r8
 8002bb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002bbc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8002bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc6:	4650      	mov	r0, sl
 8002bc8:	4b9c      	ldr	r3, [pc, #624]	; (8002e3c <_printf_float+0x2cc>)
 8002bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bcc:	f7fd ff8a 	bl	8000ae4 <__aeabi_dcmpun>
 8002bd0:	bb70      	cbnz	r0, 8002c30 <_printf_float+0xc0>
 8002bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd6:	4650      	mov	r0, sl
 8002bd8:	4b98      	ldr	r3, [pc, #608]	; (8002e3c <_printf_float+0x2cc>)
 8002bda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bdc:	f7fd ff64 	bl	8000aa8 <__aeabi_dcmple>
 8002be0:	bb30      	cbnz	r0, 8002c30 <_printf_float+0xc0>
 8002be2:	2200      	movs	r2, #0
 8002be4:	2300      	movs	r3, #0
 8002be6:	4650      	mov	r0, sl
 8002be8:	4641      	mov	r1, r8
 8002bea:	f7fd ff53 	bl	8000a94 <__aeabi_dcmplt>
 8002bee:	b110      	cbz	r0, 8002bf6 <_printf_float+0x86>
 8002bf0:	232d      	movs	r3, #45	; 0x2d
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	4a92      	ldr	r2, [pc, #584]	; (8002e40 <_printf_float+0x2d0>)
 8002bf8:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <_printf_float+0x2d4>)
 8002bfa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002bfe:	bf94      	ite	ls
 8002c00:	4690      	movls	r8, r2
 8002c02:	4698      	movhi	r8, r3
 8002c04:	2303      	movs	r3, #3
 8002c06:	f04f 0a00 	mov.w	sl, #0
 8002c0a:	6123      	str	r3, [r4, #16]
 8002c0c:	f02b 0304 	bic.w	r3, fp, #4
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	4633      	mov	r3, r6
 8002c14:	4621      	mov	r1, r4
 8002c16:	4628      	mov	r0, r5
 8002c18:	9700      	str	r7, [sp, #0]
 8002c1a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c1c:	f000 f9d6 	bl	8002fcc <_printf_common>
 8002c20:	3001      	adds	r0, #1
 8002c22:	f040 8090 	bne.w	8002d46 <_printf_float+0x1d6>
 8002c26:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2a:	b011      	add	sp, #68	; 0x44
 8002c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c30:	4652      	mov	r2, sl
 8002c32:	4643      	mov	r3, r8
 8002c34:	4650      	mov	r0, sl
 8002c36:	4641      	mov	r1, r8
 8002c38:	f7fd ff54 	bl	8000ae4 <__aeabi_dcmpun>
 8002c3c:	b148      	cbz	r0, 8002c52 <_printf_float+0xe2>
 8002c3e:	f1b8 0f00 	cmp.w	r8, #0
 8002c42:	bfb8      	it	lt
 8002c44:	232d      	movlt	r3, #45	; 0x2d
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <_printf_float+0x2d8>)
 8002c48:	bfb8      	it	lt
 8002c4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <_printf_float+0x2dc>)
 8002c50:	e7d3      	b.n	8002bfa <_printf_float+0x8a>
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	d142      	bne.n	8002ce2 <_printf_float+0x172>
 8002c5c:	2306      	movs	r3, #6
 8002c5e:	6063      	str	r3, [r4, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	9206      	str	r2, [sp, #24]
 8002c64:	aa0e      	add	r2, sp, #56	; 0x38
 8002c66:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002c6a:	aa0d      	add	r2, sp, #52	; 0x34
 8002c6c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002c70:	9203      	str	r2, [sp, #12]
 8002c72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002c76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	4652      	mov	r2, sl
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	4628      	mov	r0, r5
 8002c84:	4643      	mov	r3, r8
 8002c86:	910b      	str	r1, [sp, #44]	; 0x2c
 8002c88:	f7ff fed6 	bl	8002a38 <__cvt>
 8002c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c8e:	4680      	mov	r8, r0
 8002c90:	2947      	cmp	r1, #71	; 0x47
 8002c92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c94:	d108      	bne.n	8002ca8 <_printf_float+0x138>
 8002c96:	1cc8      	adds	r0, r1, #3
 8002c98:	db02      	blt.n	8002ca0 <_printf_float+0x130>
 8002c9a:	6863      	ldr	r3, [r4, #4]
 8002c9c:	4299      	cmp	r1, r3
 8002c9e:	dd40      	ble.n	8002d22 <_printf_float+0x1b2>
 8002ca0:	f1a9 0902 	sub.w	r9, r9, #2
 8002ca4:	fa5f f989 	uxtb.w	r9, r9
 8002ca8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002cac:	d81f      	bhi.n	8002cee <_printf_float+0x17e>
 8002cae:	464a      	mov	r2, r9
 8002cb0:	3901      	subs	r1, #1
 8002cb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cb6:	910d      	str	r1, [sp, #52]	; 0x34
 8002cb8:	f7ff ff1d 	bl	8002af6 <__exponent>
 8002cbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cbe:	4682      	mov	sl, r0
 8002cc0:	1813      	adds	r3, r2, r0
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	6123      	str	r3, [r4, #16]
 8002cc6:	dc02      	bgt.n	8002cce <_printf_float+0x15e>
 8002cc8:	6822      	ldr	r2, [r4, #0]
 8002cca:	07d2      	lsls	r2, r2, #31
 8002ccc:	d501      	bpl.n	8002cd2 <_printf_float+0x162>
 8002cce:	3301      	adds	r3, #1
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d09b      	beq.n	8002c12 <_printf_float+0xa2>
 8002cda:	232d      	movs	r3, #45	; 0x2d
 8002cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ce0:	e797      	b.n	8002c12 <_printf_float+0xa2>
 8002ce2:	2947      	cmp	r1, #71	; 0x47
 8002ce4:	d1bc      	bne.n	8002c60 <_printf_float+0xf0>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1ba      	bne.n	8002c60 <_printf_float+0xf0>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e7b7      	b.n	8002c5e <_printf_float+0xee>
 8002cee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002cf2:	d118      	bne.n	8002d26 <_printf_float+0x1b6>
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	dd0b      	ble.n	8002d12 <_printf_float+0x1a2>
 8002cfa:	6121      	str	r1, [r4, #16]
 8002cfc:	b913      	cbnz	r3, 8002d04 <_printf_float+0x194>
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	07d0      	lsls	r0, r2, #31
 8002d02:	d502      	bpl.n	8002d0a <_printf_float+0x19a>
 8002d04:	3301      	adds	r3, #1
 8002d06:	440b      	add	r3, r1
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	f04f 0a00 	mov.w	sl, #0
 8002d0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d10:	e7df      	b.n	8002cd2 <_printf_float+0x162>
 8002d12:	b913      	cbnz	r3, 8002d1a <_printf_float+0x1aa>
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	07d2      	lsls	r2, r2, #31
 8002d18:	d501      	bpl.n	8002d1e <_printf_float+0x1ae>
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	e7f4      	b.n	8002d08 <_printf_float+0x198>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e7f2      	b.n	8002d08 <_printf_float+0x198>
 8002d22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	db05      	blt.n	8002d38 <_printf_float+0x1c8>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	6121      	str	r1, [r4, #16]
 8002d30:	07d8      	lsls	r0, r3, #31
 8002d32:	d5ea      	bpl.n	8002d0a <_printf_float+0x19a>
 8002d34:	1c4b      	adds	r3, r1, #1
 8002d36:	e7e7      	b.n	8002d08 <_printf_float+0x198>
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	bfcc      	ite	gt
 8002d3c:	2201      	movgt	r2, #1
 8002d3e:	f1c1 0202 	rsble	r2, r1, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	e7e0      	b.n	8002d08 <_printf_float+0x198>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	055a      	lsls	r2, r3, #21
 8002d4a:	d407      	bmi.n	8002d5c <_printf_float+0x1ec>
 8002d4c:	6923      	ldr	r3, [r4, #16]
 8002d4e:	4642      	mov	r2, r8
 8002d50:	4631      	mov	r1, r6
 8002d52:	4628      	mov	r0, r5
 8002d54:	47b8      	blx	r7
 8002d56:	3001      	adds	r0, #1
 8002d58:	d12b      	bne.n	8002db2 <_printf_float+0x242>
 8002d5a:	e764      	b.n	8002c26 <_printf_float+0xb6>
 8002d5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d60:	f240 80dd 	bls.w	8002f1e <_printf_float+0x3ae>
 8002d64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f7fd fe88 	bl	8000a80 <__aeabi_dcmpeq>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d033      	beq.n	8002ddc <_printf_float+0x26c>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4631      	mov	r1, r6
 8002d78:	4628      	mov	r0, r5
 8002d7a:	4a35      	ldr	r2, [pc, #212]	; (8002e50 <_printf_float+0x2e0>)
 8002d7c:	47b8      	blx	r7
 8002d7e:	3001      	adds	r0, #1
 8002d80:	f43f af51 	beq.w	8002c26 <_printf_float+0xb6>
 8002d84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	db02      	blt.n	8002d92 <_printf_float+0x222>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	07d8      	lsls	r0, r3, #31
 8002d90:	d50f      	bpl.n	8002db2 <_printf_float+0x242>
 8002d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d96:	4631      	mov	r1, r6
 8002d98:	4628      	mov	r0, r5
 8002d9a:	47b8      	blx	r7
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f43f af42 	beq.w	8002c26 <_printf_float+0xb6>
 8002da2:	f04f 0800 	mov.w	r8, #0
 8002da6:	f104 091a 	add.w	r9, r4, #26
 8002daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dac:	3b01      	subs	r3, #1
 8002dae:	4543      	cmp	r3, r8
 8002db0:	dc09      	bgt.n	8002dc6 <_printf_float+0x256>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	079b      	lsls	r3, r3, #30
 8002db6:	f100 8104 	bmi.w	8002fc2 <_printf_float+0x452>
 8002dba:	68e0      	ldr	r0, [r4, #12]
 8002dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dbe:	4298      	cmp	r0, r3
 8002dc0:	bfb8      	it	lt
 8002dc2:	4618      	movlt	r0, r3
 8002dc4:	e731      	b.n	8002c2a <_printf_float+0xba>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	464a      	mov	r2, r9
 8002dca:	4631      	mov	r1, r6
 8002dcc:	4628      	mov	r0, r5
 8002dce:	47b8      	blx	r7
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	f43f af28 	beq.w	8002c26 <_printf_float+0xb6>
 8002dd6:	f108 0801 	add.w	r8, r8, #1
 8002dda:	e7e6      	b.n	8002daa <_printf_float+0x23a>
 8002ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	dc38      	bgt.n	8002e54 <_printf_float+0x2e4>
 8002de2:	2301      	movs	r3, #1
 8002de4:	4631      	mov	r1, r6
 8002de6:	4628      	mov	r0, r5
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <_printf_float+0x2e0>)
 8002dea:	47b8      	blx	r7
 8002dec:	3001      	adds	r0, #1
 8002dee:	f43f af1a 	beq.w	8002c26 <_printf_float+0xb6>
 8002df2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002df6:	4313      	orrs	r3, r2
 8002df8:	d102      	bne.n	8002e00 <_printf_float+0x290>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	07d9      	lsls	r1, r3, #31
 8002dfe:	d5d8      	bpl.n	8002db2 <_printf_float+0x242>
 8002e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e04:	4631      	mov	r1, r6
 8002e06:	4628      	mov	r0, r5
 8002e08:	47b8      	blx	r7
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f43f af0b 	beq.w	8002c26 <_printf_float+0xb6>
 8002e10:	f04f 0900 	mov.w	r9, #0
 8002e14:	f104 0a1a 	add.w	sl, r4, #26
 8002e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e1a:	425b      	negs	r3, r3
 8002e1c:	454b      	cmp	r3, r9
 8002e1e:	dc01      	bgt.n	8002e24 <_printf_float+0x2b4>
 8002e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e22:	e794      	b.n	8002d4e <_printf_float+0x1de>
 8002e24:	2301      	movs	r3, #1
 8002e26:	4652      	mov	r2, sl
 8002e28:	4631      	mov	r1, r6
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	47b8      	blx	r7
 8002e2e:	3001      	adds	r0, #1
 8002e30:	f43f aef9 	beq.w	8002c26 <_printf_float+0xb6>
 8002e34:	f109 0901 	add.w	r9, r9, #1
 8002e38:	e7ee      	b.n	8002e18 <_printf_float+0x2a8>
 8002e3a:	bf00      	nop
 8002e3c:	7fefffff 	.word	0x7fefffff
 8002e40:	080054f2 	.word	0x080054f2
 8002e44:	080054f6 	.word	0x080054f6
 8002e48:	080054fa 	.word	0x080054fa
 8002e4c:	080054fe 	.word	0x080054fe
 8002e50:	08005502 	.word	0x08005502
 8002e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bfa8      	it	ge
 8002e5c:	461a      	movge	r2, r3
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	4691      	mov	r9, r2
 8002e62:	dc37      	bgt.n	8002ed4 <_printf_float+0x364>
 8002e64:	f04f 0b00 	mov.w	fp, #0
 8002e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e6c:	f104 021a 	add.w	r2, r4, #26
 8002e70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e74:	ebaa 0309 	sub.w	r3, sl, r9
 8002e78:	455b      	cmp	r3, fp
 8002e7a:	dc33      	bgt.n	8002ee4 <_printf_float+0x374>
 8002e7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e80:	429a      	cmp	r2, r3
 8002e82:	db3b      	blt.n	8002efc <_printf_float+0x38c>
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	07da      	lsls	r2, r3, #31
 8002e88:	d438      	bmi.n	8002efc <_printf_float+0x38c>
 8002e8a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002e8e:	eba2 0903 	sub.w	r9, r2, r3
 8002e92:	eba2 020a 	sub.w	r2, r2, sl
 8002e96:	4591      	cmp	r9, r2
 8002e98:	bfa8      	it	ge
 8002e9a:	4691      	movge	r9, r2
 8002e9c:	f1b9 0f00 	cmp.w	r9, #0
 8002ea0:	dc34      	bgt.n	8002f0c <_printf_float+0x39c>
 8002ea2:	f04f 0800 	mov.w	r8, #0
 8002ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002eaa:	f104 0a1a 	add.w	sl, r4, #26
 8002eae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	eba3 0309 	sub.w	r3, r3, r9
 8002eb8:	4543      	cmp	r3, r8
 8002eba:	f77f af7a 	ble.w	8002db2 <_printf_float+0x242>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b8      	blx	r7
 8002ec8:	3001      	adds	r0, #1
 8002eca:	f43f aeac 	beq.w	8002c26 <_printf_float+0xb6>
 8002ece:	f108 0801 	add.w	r8, r8, #1
 8002ed2:	e7ec      	b.n	8002eae <_printf_float+0x33e>
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4642      	mov	r2, r8
 8002eda:	4628      	mov	r0, r5
 8002edc:	47b8      	blx	r7
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d1c0      	bne.n	8002e64 <_printf_float+0x2f4>
 8002ee2:	e6a0      	b.n	8002c26 <_printf_float+0xb6>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4628      	mov	r0, r5
 8002eea:	920b      	str	r2, [sp, #44]	; 0x2c
 8002eec:	47b8      	blx	r7
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f43f ae99 	beq.w	8002c26 <_printf_float+0xb6>
 8002ef4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ef6:	f10b 0b01 	add.w	fp, fp, #1
 8002efa:	e7b9      	b.n	8002e70 <_printf_float+0x300>
 8002efc:	4631      	mov	r1, r6
 8002efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f02:	4628      	mov	r0, r5
 8002f04:	47b8      	blx	r7
 8002f06:	3001      	adds	r0, #1
 8002f08:	d1bf      	bne.n	8002e8a <_printf_float+0x31a>
 8002f0a:	e68c      	b.n	8002c26 <_printf_float+0xb6>
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4628      	mov	r0, r5
 8002f12:	eb08 020a 	add.w	r2, r8, sl
 8002f16:	47b8      	blx	r7
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d1c2      	bne.n	8002ea2 <_printf_float+0x332>
 8002f1c:	e683      	b.n	8002c26 <_printf_float+0xb6>
 8002f1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f20:	2a01      	cmp	r2, #1
 8002f22:	dc01      	bgt.n	8002f28 <_printf_float+0x3b8>
 8002f24:	07db      	lsls	r3, r3, #31
 8002f26:	d539      	bpl.n	8002f9c <_printf_float+0x42c>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4642      	mov	r2, r8
 8002f2c:	4631      	mov	r1, r6
 8002f2e:	4628      	mov	r0, r5
 8002f30:	47b8      	blx	r7
 8002f32:	3001      	adds	r0, #1
 8002f34:	f43f ae77 	beq.w	8002c26 <_printf_float+0xb6>
 8002f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f3c:	4631      	mov	r1, r6
 8002f3e:	4628      	mov	r0, r5
 8002f40:	47b8      	blx	r7
 8002f42:	3001      	adds	r0, #1
 8002f44:	f43f ae6f 	beq.w	8002c26 <_printf_float+0xb6>
 8002f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8002f54:	f7fd fd94 	bl	8000a80 <__aeabi_dcmpeq>
 8002f58:	b9d8      	cbnz	r0, 8002f92 <_printf_float+0x422>
 8002f5a:	f109 33ff 	add.w	r3, r9, #4294967295
 8002f5e:	f108 0201 	add.w	r2, r8, #1
 8002f62:	4631      	mov	r1, r6
 8002f64:	4628      	mov	r0, r5
 8002f66:	47b8      	blx	r7
 8002f68:	3001      	adds	r0, #1
 8002f6a:	d10e      	bne.n	8002f8a <_printf_float+0x41a>
 8002f6c:	e65b      	b.n	8002c26 <_printf_float+0xb6>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	464a      	mov	r2, r9
 8002f72:	4631      	mov	r1, r6
 8002f74:	4628      	mov	r0, r5
 8002f76:	47b8      	blx	r7
 8002f78:	3001      	adds	r0, #1
 8002f7a:	f43f ae54 	beq.w	8002c26 <_printf_float+0xb6>
 8002f7e:	f108 0801 	add.w	r8, r8, #1
 8002f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4543      	cmp	r3, r8
 8002f88:	dcf1      	bgt.n	8002f6e <_printf_float+0x3fe>
 8002f8a:	4653      	mov	r3, sl
 8002f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f90:	e6de      	b.n	8002d50 <_printf_float+0x1e0>
 8002f92:	f04f 0800 	mov.w	r8, #0
 8002f96:	f104 091a 	add.w	r9, r4, #26
 8002f9a:	e7f2      	b.n	8002f82 <_printf_float+0x412>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4642      	mov	r2, r8
 8002fa0:	e7df      	b.n	8002f62 <_printf_float+0x3f2>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	464a      	mov	r2, r9
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b8      	blx	r7
 8002fac:	3001      	adds	r0, #1
 8002fae:	f43f ae3a 	beq.w	8002c26 <_printf_float+0xb6>
 8002fb2:	f108 0801 	add.w	r8, r8, #1
 8002fb6:	68e3      	ldr	r3, [r4, #12]
 8002fb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002fba:	1a5b      	subs	r3, r3, r1
 8002fbc:	4543      	cmp	r3, r8
 8002fbe:	dcf0      	bgt.n	8002fa2 <_printf_float+0x432>
 8002fc0:	e6fb      	b.n	8002dba <_printf_float+0x24a>
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	f104 0919 	add.w	r9, r4, #25
 8002fca:	e7f4      	b.n	8002fb6 <_printf_float+0x446>

08002fcc <_printf_common>:
 8002fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	4616      	mov	r6, r2
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	688a      	ldr	r2, [r1, #8]
 8002fd6:	690b      	ldr	r3, [r1, #16]
 8002fd8:	4607      	mov	r7, r0
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bfb8      	it	lt
 8002fde:	4613      	movlt	r3, r2
 8002fe0:	6033      	str	r3, [r6, #0]
 8002fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fec:	b10a      	cbz	r2, 8002ff2 <_printf_common+0x26>
 8002fee:	3301      	adds	r3, #1
 8002ff0:	6033      	str	r3, [r6, #0]
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	0699      	lsls	r1, r3, #26
 8002ff6:	bf42      	ittt	mi
 8002ff8:	6833      	ldrmi	r3, [r6, #0]
 8002ffa:	3302      	addmi	r3, #2
 8002ffc:	6033      	strmi	r3, [r6, #0]
 8002ffe:	6825      	ldr	r5, [r4, #0]
 8003000:	f015 0506 	ands.w	r5, r5, #6
 8003004:	d106      	bne.n	8003014 <_printf_common+0x48>
 8003006:	f104 0a19 	add.w	sl, r4, #25
 800300a:	68e3      	ldr	r3, [r4, #12]
 800300c:	6832      	ldr	r2, [r6, #0]
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	42ab      	cmp	r3, r5
 8003012:	dc2b      	bgt.n	800306c <_printf_common+0xa0>
 8003014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003018:	1e13      	subs	r3, r2, #0
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	bf18      	it	ne
 800301e:	2301      	movne	r3, #1
 8003020:	0692      	lsls	r2, r2, #26
 8003022:	d430      	bmi.n	8003086 <_printf_common+0xba>
 8003024:	4649      	mov	r1, r9
 8003026:	4638      	mov	r0, r7
 8003028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800302c:	47c0      	blx	r8
 800302e:	3001      	adds	r0, #1
 8003030:	d023      	beq.n	800307a <_printf_common+0xae>
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	6922      	ldr	r2, [r4, #16]
 8003036:	f003 0306 	and.w	r3, r3, #6
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf14      	ite	ne
 800303e:	2500      	movne	r5, #0
 8003040:	6833      	ldreq	r3, [r6, #0]
 8003042:	f04f 0600 	mov.w	r6, #0
 8003046:	bf08      	it	eq
 8003048:	68e5      	ldreq	r5, [r4, #12]
 800304a:	f104 041a 	add.w	r4, r4, #26
 800304e:	bf08      	it	eq
 8003050:	1aed      	subeq	r5, r5, r3
 8003052:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003056:	bf08      	it	eq
 8003058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800305c:	4293      	cmp	r3, r2
 800305e:	bfc4      	itt	gt
 8003060:	1a9b      	subgt	r3, r3, r2
 8003062:	18ed      	addgt	r5, r5, r3
 8003064:	42b5      	cmp	r5, r6
 8003066:	d11a      	bne.n	800309e <_printf_common+0xd2>
 8003068:	2000      	movs	r0, #0
 800306a:	e008      	b.n	800307e <_printf_common+0xb2>
 800306c:	2301      	movs	r3, #1
 800306e:	4652      	mov	r2, sl
 8003070:	4649      	mov	r1, r9
 8003072:	4638      	mov	r0, r7
 8003074:	47c0      	blx	r8
 8003076:	3001      	adds	r0, #1
 8003078:	d103      	bne.n	8003082 <_printf_common+0xb6>
 800307a:	f04f 30ff 	mov.w	r0, #4294967295
 800307e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003082:	3501      	adds	r5, #1
 8003084:	e7c1      	b.n	800300a <_printf_common+0x3e>
 8003086:	2030      	movs	r0, #48	; 0x30
 8003088:	18e1      	adds	r1, r4, r3
 800308a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003094:	4422      	add	r2, r4
 8003096:	3302      	adds	r3, #2
 8003098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800309c:	e7c2      	b.n	8003024 <_printf_common+0x58>
 800309e:	2301      	movs	r3, #1
 80030a0:	4622      	mov	r2, r4
 80030a2:	4649      	mov	r1, r9
 80030a4:	4638      	mov	r0, r7
 80030a6:	47c0      	blx	r8
 80030a8:	3001      	adds	r0, #1
 80030aa:	d0e6      	beq.n	800307a <_printf_common+0xae>
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7d9      	b.n	8003064 <_printf_common+0x98>

080030b0 <_printf_i>:
 80030b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030b4:	7e0f      	ldrb	r7, [r1, #24]
 80030b6:	4691      	mov	r9, r2
 80030b8:	2f78      	cmp	r7, #120	; 0x78
 80030ba:	4680      	mov	r8, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	469a      	mov	sl, r3
 80030c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030c6:	d807      	bhi.n	80030d8 <_printf_i+0x28>
 80030c8:	2f62      	cmp	r7, #98	; 0x62
 80030ca:	d80a      	bhi.n	80030e2 <_printf_i+0x32>
 80030cc:	2f00      	cmp	r7, #0
 80030ce:	f000 80d5 	beq.w	800327c <_printf_i+0x1cc>
 80030d2:	2f58      	cmp	r7, #88	; 0x58
 80030d4:	f000 80c1 	beq.w	800325a <_printf_i+0x1aa>
 80030d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030e0:	e03a      	b.n	8003158 <_printf_i+0xa8>
 80030e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030e6:	2b15      	cmp	r3, #21
 80030e8:	d8f6      	bhi.n	80030d8 <_printf_i+0x28>
 80030ea:	a101      	add	r1, pc, #4	; (adr r1, 80030f0 <_printf_i+0x40>)
 80030ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030f0:	08003149 	.word	0x08003149
 80030f4:	0800315d 	.word	0x0800315d
 80030f8:	080030d9 	.word	0x080030d9
 80030fc:	080030d9 	.word	0x080030d9
 8003100:	080030d9 	.word	0x080030d9
 8003104:	080030d9 	.word	0x080030d9
 8003108:	0800315d 	.word	0x0800315d
 800310c:	080030d9 	.word	0x080030d9
 8003110:	080030d9 	.word	0x080030d9
 8003114:	080030d9 	.word	0x080030d9
 8003118:	080030d9 	.word	0x080030d9
 800311c:	08003263 	.word	0x08003263
 8003120:	08003189 	.word	0x08003189
 8003124:	0800321d 	.word	0x0800321d
 8003128:	080030d9 	.word	0x080030d9
 800312c:	080030d9 	.word	0x080030d9
 8003130:	08003285 	.word	0x08003285
 8003134:	080030d9 	.word	0x080030d9
 8003138:	08003189 	.word	0x08003189
 800313c:	080030d9 	.word	0x080030d9
 8003140:	080030d9 	.word	0x080030d9
 8003144:	08003225 	.word	0x08003225
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	602a      	str	r2, [r5, #0]
 8003150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003158:	2301      	movs	r3, #1
 800315a:	e0a0      	b.n	800329e <_printf_i+0x1ee>
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	0607      	lsls	r7, r0, #24
 8003162:	f103 0104 	add.w	r1, r3, #4
 8003166:	6029      	str	r1, [r5, #0]
 8003168:	d501      	bpl.n	800316e <_printf_i+0xbe>
 800316a:	681e      	ldr	r6, [r3, #0]
 800316c:	e003      	b.n	8003176 <_printf_i+0xc6>
 800316e:	0646      	lsls	r6, r0, #25
 8003170:	d5fb      	bpl.n	800316a <_printf_i+0xba>
 8003172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003176:	2e00      	cmp	r6, #0
 8003178:	da03      	bge.n	8003182 <_printf_i+0xd2>
 800317a:	232d      	movs	r3, #45	; 0x2d
 800317c:	4276      	negs	r6, r6
 800317e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003182:	230a      	movs	r3, #10
 8003184:	4859      	ldr	r0, [pc, #356]	; (80032ec <_printf_i+0x23c>)
 8003186:	e012      	b.n	80031ae <_printf_i+0xfe>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	1d19      	adds	r1, r3, #4
 800318e:	6029      	str	r1, [r5, #0]
 8003190:	0605      	lsls	r5, r0, #24
 8003192:	d501      	bpl.n	8003198 <_printf_i+0xe8>
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0xee>
 8003198:	0641      	lsls	r1, r0, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0xe4>
 800319c:	881e      	ldrh	r6, [r3, #0]
 800319e:	2f6f      	cmp	r7, #111	; 0x6f
 80031a0:	bf0c      	ite	eq
 80031a2:	2308      	moveq	r3, #8
 80031a4:	230a      	movne	r3, #10
 80031a6:	4851      	ldr	r0, [pc, #324]	; (80032ec <_printf_i+0x23c>)
 80031a8:	2100      	movs	r1, #0
 80031aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ae:	6865      	ldr	r5, [r4, #4]
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	bfa8      	it	ge
 80031b4:	6821      	ldrge	r1, [r4, #0]
 80031b6:	60a5      	str	r5, [r4, #8]
 80031b8:	bfa4      	itt	ge
 80031ba:	f021 0104 	bicge.w	r1, r1, #4
 80031be:	6021      	strge	r1, [r4, #0]
 80031c0:	b90e      	cbnz	r6, 80031c6 <_printf_i+0x116>
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	d04b      	beq.n	800325e <_printf_i+0x1ae>
 80031c6:	4615      	mov	r5, r2
 80031c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80031cc:	fb03 6711 	mls	r7, r3, r1, r6
 80031d0:	5dc7      	ldrb	r7, [r0, r7]
 80031d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031d6:	4637      	mov	r7, r6
 80031d8:	42bb      	cmp	r3, r7
 80031da:	460e      	mov	r6, r1
 80031dc:	d9f4      	bls.n	80031c8 <_printf_i+0x118>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d10b      	bne.n	80031fa <_printf_i+0x14a>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	07de      	lsls	r6, r3, #31
 80031e6:	d508      	bpl.n	80031fa <_printf_i+0x14a>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	6861      	ldr	r1, [r4, #4]
 80031ec:	4299      	cmp	r1, r3
 80031ee:	bfde      	ittt	le
 80031f0:	2330      	movle	r3, #48	; 0x30
 80031f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031fa:	1b52      	subs	r2, r2, r5
 80031fc:	6122      	str	r2, [r4, #16]
 80031fe:	464b      	mov	r3, r9
 8003200:	4621      	mov	r1, r4
 8003202:	4640      	mov	r0, r8
 8003204:	f8cd a000 	str.w	sl, [sp]
 8003208:	aa03      	add	r2, sp, #12
 800320a:	f7ff fedf 	bl	8002fcc <_printf_common>
 800320e:	3001      	adds	r0, #1
 8003210:	d14a      	bne.n	80032a8 <_printf_i+0x1f8>
 8003212:	f04f 30ff 	mov.w	r0, #4294967295
 8003216:	b004      	add	sp, #16
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	f043 0320 	orr.w	r3, r3, #32
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	2778      	movs	r7, #120	; 0x78
 8003226:	4832      	ldr	r0, [pc, #200]	; (80032f0 <_printf_i+0x240>)
 8003228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	6829      	ldr	r1, [r5, #0]
 8003230:	061f      	lsls	r7, r3, #24
 8003232:	f851 6b04 	ldr.w	r6, [r1], #4
 8003236:	d402      	bmi.n	800323e <_printf_i+0x18e>
 8003238:	065f      	lsls	r7, r3, #25
 800323a:	bf48      	it	mi
 800323c:	b2b6      	uxthmi	r6, r6
 800323e:	07df      	lsls	r7, r3, #31
 8003240:	bf48      	it	mi
 8003242:	f043 0320 	orrmi.w	r3, r3, #32
 8003246:	6029      	str	r1, [r5, #0]
 8003248:	bf48      	it	mi
 800324a:	6023      	strmi	r3, [r4, #0]
 800324c:	b91e      	cbnz	r6, 8003256 <_printf_i+0x1a6>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	f023 0320 	bic.w	r3, r3, #32
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	2310      	movs	r3, #16
 8003258:	e7a6      	b.n	80031a8 <_printf_i+0xf8>
 800325a:	4824      	ldr	r0, [pc, #144]	; (80032ec <_printf_i+0x23c>)
 800325c:	e7e4      	b.n	8003228 <_printf_i+0x178>
 800325e:	4615      	mov	r5, r2
 8003260:	e7bd      	b.n	80031de <_printf_i+0x12e>
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	6826      	ldr	r6, [r4, #0]
 8003266:	1d18      	adds	r0, r3, #4
 8003268:	6961      	ldr	r1, [r4, #20]
 800326a:	6028      	str	r0, [r5, #0]
 800326c:	0635      	lsls	r5, r6, #24
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	d501      	bpl.n	8003276 <_printf_i+0x1c6>
 8003272:	6019      	str	r1, [r3, #0]
 8003274:	e002      	b.n	800327c <_printf_i+0x1cc>
 8003276:	0670      	lsls	r0, r6, #25
 8003278:	d5fb      	bpl.n	8003272 <_printf_i+0x1c2>
 800327a:	8019      	strh	r1, [r3, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	4615      	mov	r5, r2
 8003280:	6123      	str	r3, [r4, #16]
 8003282:	e7bc      	b.n	80031fe <_printf_i+0x14e>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	2100      	movs	r1, #0
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	602a      	str	r2, [r5, #0]
 800328c:	681d      	ldr	r5, [r3, #0]
 800328e:	6862      	ldr	r2, [r4, #4]
 8003290:	4628      	mov	r0, r5
 8003292:	f000 faa4 	bl	80037de <memchr>
 8003296:	b108      	cbz	r0, 800329c <_printf_i+0x1ec>
 8003298:	1b40      	subs	r0, r0, r5
 800329a:	6060      	str	r0, [r4, #4]
 800329c:	6863      	ldr	r3, [r4, #4]
 800329e:	6123      	str	r3, [r4, #16]
 80032a0:	2300      	movs	r3, #0
 80032a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a6:	e7aa      	b.n	80031fe <_printf_i+0x14e>
 80032a8:	462a      	mov	r2, r5
 80032aa:	4649      	mov	r1, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	47d0      	blx	sl
 80032b2:	3001      	adds	r0, #1
 80032b4:	d0ad      	beq.n	8003212 <_printf_i+0x162>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	079b      	lsls	r3, r3, #30
 80032ba:	d413      	bmi.n	80032e4 <_printf_i+0x234>
 80032bc:	68e0      	ldr	r0, [r4, #12]
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	4298      	cmp	r0, r3
 80032c2:	bfb8      	it	lt
 80032c4:	4618      	movlt	r0, r3
 80032c6:	e7a6      	b.n	8003216 <_printf_i+0x166>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4632      	mov	r2, r6
 80032cc:	4649      	mov	r1, r9
 80032ce:	4640      	mov	r0, r8
 80032d0:	47d0      	blx	sl
 80032d2:	3001      	adds	r0, #1
 80032d4:	d09d      	beq.n	8003212 <_printf_i+0x162>
 80032d6:	3501      	adds	r5, #1
 80032d8:	68e3      	ldr	r3, [r4, #12]
 80032da:	9903      	ldr	r1, [sp, #12]
 80032dc:	1a5b      	subs	r3, r3, r1
 80032de:	42ab      	cmp	r3, r5
 80032e0:	dcf2      	bgt.n	80032c8 <_printf_i+0x218>
 80032e2:	e7eb      	b.n	80032bc <_printf_i+0x20c>
 80032e4:	2500      	movs	r5, #0
 80032e6:	f104 0619 	add.w	r6, r4, #25
 80032ea:	e7f5      	b.n	80032d8 <_printf_i+0x228>
 80032ec:	08005504 	.word	0x08005504
 80032f0:	08005515 	.word	0x08005515

080032f4 <std>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	e9c0 3300 	strd	r3, r3, [r0]
 80032fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003302:	6083      	str	r3, [r0, #8]
 8003304:	8181      	strh	r1, [r0, #12]
 8003306:	6643      	str	r3, [r0, #100]	; 0x64
 8003308:	81c2      	strh	r2, [r0, #14]
 800330a:	6183      	str	r3, [r0, #24]
 800330c:	4619      	mov	r1, r3
 800330e:	2208      	movs	r2, #8
 8003310:	305c      	adds	r0, #92	; 0x5c
 8003312:	f000 f9e5 	bl	80036e0 <memset>
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <std+0x58>)
 8003318:	6224      	str	r4, [r4, #32]
 800331a:	6263      	str	r3, [r4, #36]	; 0x24
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <std+0x5c>)
 800331e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <std+0x60>)
 8003322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <std+0x64>)
 8003326:	6323      	str	r3, [r4, #48]	; 0x30
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <std+0x68>)
 800332a:	429c      	cmp	r4, r3
 800332c:	d006      	beq.n	800333c <std+0x48>
 800332e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003332:	4294      	cmp	r4, r2
 8003334:	d002      	beq.n	800333c <std+0x48>
 8003336:	33d0      	adds	r3, #208	; 0xd0
 8003338:	429c      	cmp	r4, r3
 800333a:	d105      	bne.n	8003348 <std+0x54>
 800333c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003344:	f000 ba48 	b.w	80037d8 <__retarget_lock_init_recursive>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	bf00      	nop
 800334c:	08003531 	.word	0x08003531
 8003350:	08003553 	.word	0x08003553
 8003354:	0800358b 	.word	0x0800358b
 8003358:	080035af 	.word	0x080035af
 800335c:	2000026c 	.word	0x2000026c

08003360 <stdio_exit_handler>:
 8003360:	4a02      	ldr	r2, [pc, #8]	; (800336c <stdio_exit_handler+0xc>)
 8003362:	4903      	ldr	r1, [pc, #12]	; (8003370 <stdio_exit_handler+0x10>)
 8003364:	4803      	ldr	r0, [pc, #12]	; (8003374 <stdio_exit_handler+0x14>)
 8003366:	f000 b869 	b.w	800343c <_fwalk_sglue>
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	08004ec5 	.word	0x08004ec5
 8003374:	20000018 	.word	0x20000018

08003378 <cleanup_stdio>:
 8003378:	6841      	ldr	r1, [r0, #4]
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <cleanup_stdio+0x34>)
 800337c:	b510      	push	{r4, lr}
 800337e:	4299      	cmp	r1, r3
 8003380:	4604      	mov	r4, r0
 8003382:	d001      	beq.n	8003388 <cleanup_stdio+0x10>
 8003384:	f001 fd9e 	bl	8004ec4 <_fflush_r>
 8003388:	68a1      	ldr	r1, [r4, #8]
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <cleanup_stdio+0x38>)
 800338c:	4299      	cmp	r1, r3
 800338e:	d002      	beq.n	8003396 <cleanup_stdio+0x1e>
 8003390:	4620      	mov	r0, r4
 8003392:	f001 fd97 	bl	8004ec4 <_fflush_r>
 8003396:	68e1      	ldr	r1, [r4, #12]
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <cleanup_stdio+0x3c>)
 800339a:	4299      	cmp	r1, r3
 800339c:	d004      	beq.n	80033a8 <cleanup_stdio+0x30>
 800339e:	4620      	mov	r0, r4
 80033a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a4:	f001 bd8e 	b.w	8004ec4 <_fflush_r>
 80033a8:	bd10      	pop	{r4, pc}
 80033aa:	bf00      	nop
 80033ac:	2000026c 	.word	0x2000026c
 80033b0:	200002d4 	.word	0x200002d4
 80033b4:	2000033c 	.word	0x2000033c

080033b8 <global_stdio_init.part.0>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <global_stdio_init.part.0+0x30>)
 80033bc:	4c0b      	ldr	r4, [pc, #44]	; (80033ec <global_stdio_init.part.0+0x34>)
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <global_stdio_init.part.0+0x38>)
 80033c0:	4620      	mov	r0, r4
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	2104      	movs	r1, #4
 80033c6:	2200      	movs	r2, #0
 80033c8:	f7ff ff94 	bl	80032f4 <std>
 80033cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033d0:	2201      	movs	r2, #1
 80033d2:	2109      	movs	r1, #9
 80033d4:	f7ff ff8e 	bl	80032f4 <std>
 80033d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033dc:	2202      	movs	r2, #2
 80033de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e2:	2112      	movs	r1, #18
 80033e4:	f7ff bf86 	b.w	80032f4 <std>
 80033e8:	200003a4 	.word	0x200003a4
 80033ec:	2000026c 	.word	0x2000026c
 80033f0:	08003361 	.word	0x08003361

080033f4 <__sfp_lock_acquire>:
 80033f4:	4801      	ldr	r0, [pc, #4]	; (80033fc <__sfp_lock_acquire+0x8>)
 80033f6:	f000 b9f0 	b.w	80037da <__retarget_lock_acquire_recursive>
 80033fa:	bf00      	nop
 80033fc:	200003ad 	.word	0x200003ad

08003400 <__sfp_lock_release>:
 8003400:	4801      	ldr	r0, [pc, #4]	; (8003408 <__sfp_lock_release+0x8>)
 8003402:	f000 b9eb 	b.w	80037dc <__retarget_lock_release_recursive>
 8003406:	bf00      	nop
 8003408:	200003ad 	.word	0x200003ad

0800340c <__sinit>:
 800340c:	b510      	push	{r4, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	f7ff fff0 	bl	80033f4 <__sfp_lock_acquire>
 8003414:	6a23      	ldr	r3, [r4, #32]
 8003416:	b11b      	cbz	r3, 8003420 <__sinit+0x14>
 8003418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341c:	f7ff bff0 	b.w	8003400 <__sfp_lock_release>
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__sinit+0x28>)
 8003422:	6223      	str	r3, [r4, #32]
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__sinit+0x2c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f5      	bne.n	8003418 <__sinit+0xc>
 800342c:	f7ff ffc4 	bl	80033b8 <global_stdio_init.part.0>
 8003430:	e7f2      	b.n	8003418 <__sinit+0xc>
 8003432:	bf00      	nop
 8003434:	08003379 	.word	0x08003379
 8003438:	200003a4 	.word	0x200003a4

0800343c <_fwalk_sglue>:
 800343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003440:	4607      	mov	r7, r0
 8003442:	4688      	mov	r8, r1
 8003444:	4614      	mov	r4, r2
 8003446:	2600      	movs	r6, #0
 8003448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800344c:	f1b9 0901 	subs.w	r9, r9, #1
 8003450:	d505      	bpl.n	800345e <_fwalk_sglue+0x22>
 8003452:	6824      	ldr	r4, [r4, #0]
 8003454:	2c00      	cmp	r4, #0
 8003456:	d1f7      	bne.n	8003448 <_fwalk_sglue+0xc>
 8003458:	4630      	mov	r0, r6
 800345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345e:	89ab      	ldrh	r3, [r5, #12]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d907      	bls.n	8003474 <_fwalk_sglue+0x38>
 8003464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003468:	3301      	adds	r3, #1
 800346a:	d003      	beq.n	8003474 <_fwalk_sglue+0x38>
 800346c:	4629      	mov	r1, r5
 800346e:	4638      	mov	r0, r7
 8003470:	47c0      	blx	r8
 8003472:	4306      	orrs	r6, r0
 8003474:	3568      	adds	r5, #104	; 0x68
 8003476:	e7e9      	b.n	800344c <_fwalk_sglue+0x10>

08003478 <_puts_r>:
 8003478:	6a03      	ldr	r3, [r0, #32]
 800347a:	b570      	push	{r4, r5, r6, lr}
 800347c:	4605      	mov	r5, r0
 800347e:	460e      	mov	r6, r1
 8003480:	6884      	ldr	r4, [r0, #8]
 8003482:	b90b      	cbnz	r3, 8003488 <_puts_r+0x10>
 8003484:	f7ff ffc2 	bl	800340c <__sinit>
 8003488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800348a:	07db      	lsls	r3, r3, #31
 800348c:	d405      	bmi.n	800349a <_puts_r+0x22>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	0598      	lsls	r0, r3, #22
 8003492:	d402      	bmi.n	800349a <_puts_r+0x22>
 8003494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003496:	f000 f9a0 	bl	80037da <__retarget_lock_acquire_recursive>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	0719      	lsls	r1, r3, #28
 800349e:	d513      	bpl.n	80034c8 <_puts_r+0x50>
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	b18b      	cbz	r3, 80034c8 <_puts_r+0x50>
 80034a4:	3e01      	subs	r6, #1
 80034a6:	68a3      	ldr	r3, [r4, #8]
 80034a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034ac:	3b01      	subs	r3, #1
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	b9e9      	cbnz	r1, 80034ee <_puts_r+0x76>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da2e      	bge.n	8003514 <_puts_r+0x9c>
 80034b6:	4622      	mov	r2, r4
 80034b8:	210a      	movs	r1, #10
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 f87b 	bl	80035b6 <__swbuf_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d007      	beq.n	80034d4 <_puts_r+0x5c>
 80034c4:	250a      	movs	r5, #10
 80034c6:	e007      	b.n	80034d8 <_puts_r+0x60>
 80034c8:	4621      	mov	r1, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f8b0 	bl	8003630 <__swsetup_r>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d0e7      	beq.n	80034a4 <_puts_r+0x2c>
 80034d4:	f04f 35ff 	mov.w	r5, #4294967295
 80034d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034da:	07da      	lsls	r2, r3, #31
 80034dc:	d405      	bmi.n	80034ea <_puts_r+0x72>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	059b      	lsls	r3, r3, #22
 80034e2:	d402      	bmi.n	80034ea <_puts_r+0x72>
 80034e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034e6:	f000 f979 	bl	80037dc <__retarget_lock_release_recursive>
 80034ea:	4628      	mov	r0, r5
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da04      	bge.n	80034fc <_puts_r+0x84>
 80034f2:	69a2      	ldr	r2, [r4, #24]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dc06      	bgt.n	8003506 <_puts_r+0x8e>
 80034f8:	290a      	cmp	r1, #10
 80034fa:	d004      	beq.n	8003506 <_puts_r+0x8e>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	6022      	str	r2, [r4, #0]
 8003502:	7019      	strb	r1, [r3, #0]
 8003504:	e7cf      	b.n	80034a6 <_puts_r+0x2e>
 8003506:	4622      	mov	r2, r4
 8003508:	4628      	mov	r0, r5
 800350a:	f000 f854 	bl	80035b6 <__swbuf_r>
 800350e:	3001      	adds	r0, #1
 8003510:	d1c9      	bne.n	80034a6 <_puts_r+0x2e>
 8003512:	e7df      	b.n	80034d4 <_puts_r+0x5c>
 8003514:	250a      	movs	r5, #10
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	6022      	str	r2, [r4, #0]
 800351c:	701d      	strb	r5, [r3, #0]
 800351e:	e7db      	b.n	80034d8 <_puts_r+0x60>

08003520 <puts>:
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <puts+0xc>)
 8003522:	4601      	mov	r1, r0
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	f7ff bfa7 	b.w	8003478 <_puts_r>
 800352a:	bf00      	nop
 800352c:	20000064 	.word	0x20000064

08003530 <__sread>:
 8003530:	b510      	push	{r4, lr}
 8003532:	460c      	mov	r4, r1
 8003534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003538:	f000 f900 	bl	800373c <_read_r>
 800353c:	2800      	cmp	r0, #0
 800353e:	bfab      	itete	ge
 8003540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003542:	89a3      	ldrhlt	r3, [r4, #12]
 8003544:	181b      	addge	r3, r3, r0
 8003546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800354a:	bfac      	ite	ge
 800354c:	6563      	strge	r3, [r4, #84]	; 0x54
 800354e:	81a3      	strhlt	r3, [r4, #12]
 8003550:	bd10      	pop	{r4, pc}

08003552 <__swrite>:
 8003552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003556:	461f      	mov	r7, r3
 8003558:	898b      	ldrh	r3, [r1, #12]
 800355a:	4605      	mov	r5, r0
 800355c:	05db      	lsls	r3, r3, #23
 800355e:	460c      	mov	r4, r1
 8003560:	4616      	mov	r6, r2
 8003562:	d505      	bpl.n	8003570 <__swrite+0x1e>
 8003564:	2302      	movs	r3, #2
 8003566:	2200      	movs	r2, #0
 8003568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356c:	f000 f8d4 	bl	8003718 <_lseek_r>
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	4632      	mov	r2, r6
 8003574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003578:	81a3      	strh	r3, [r4, #12]
 800357a:	4628      	mov	r0, r5
 800357c:	463b      	mov	r3, r7
 800357e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003586:	f000 b8eb 	b.w	8003760 <_write_r>

0800358a <__sseek>:
 800358a:	b510      	push	{r4, lr}
 800358c:	460c      	mov	r4, r1
 800358e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003592:	f000 f8c1 	bl	8003718 <_lseek_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	bf15      	itete	ne
 800359c:	6560      	strne	r0, [r4, #84]	; 0x54
 800359e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035a6:	81a3      	strheq	r3, [r4, #12]
 80035a8:	bf18      	it	ne
 80035aa:	81a3      	strhne	r3, [r4, #12]
 80035ac:	bd10      	pop	{r4, pc}

080035ae <__sclose>:
 80035ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b2:	f000 b8a1 	b.w	80036f8 <_close_r>

080035b6 <__swbuf_r>:
 80035b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b8:	460e      	mov	r6, r1
 80035ba:	4614      	mov	r4, r2
 80035bc:	4605      	mov	r5, r0
 80035be:	b118      	cbz	r0, 80035c8 <__swbuf_r+0x12>
 80035c0:	6a03      	ldr	r3, [r0, #32]
 80035c2:	b90b      	cbnz	r3, 80035c8 <__swbuf_r+0x12>
 80035c4:	f7ff ff22 	bl	800340c <__sinit>
 80035c8:	69a3      	ldr	r3, [r4, #24]
 80035ca:	60a3      	str	r3, [r4, #8]
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	071a      	lsls	r2, r3, #28
 80035d0:	d525      	bpl.n	800361e <__swbuf_r+0x68>
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	b31b      	cbz	r3, 800361e <__swbuf_r+0x68>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	6922      	ldr	r2, [r4, #16]
 80035da:	b2f6      	uxtb	r6, r6
 80035dc:	1a98      	subs	r0, r3, r2
 80035de:	6963      	ldr	r3, [r4, #20]
 80035e0:	4637      	mov	r7, r6
 80035e2:	4283      	cmp	r3, r0
 80035e4:	dc04      	bgt.n	80035f0 <__swbuf_r+0x3a>
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f001 fc6b 	bl	8004ec4 <_fflush_r>
 80035ee:	b9e0      	cbnz	r0, 800362a <__swbuf_r+0x74>
 80035f0:	68a3      	ldr	r3, [r4, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60a3      	str	r3, [r4, #8]
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	6022      	str	r2, [r4, #0]
 80035fc:	701e      	strb	r6, [r3, #0]
 80035fe:	6962      	ldr	r2, [r4, #20]
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	429a      	cmp	r2, r3
 8003604:	d004      	beq.n	8003610 <__swbuf_r+0x5a>
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	07db      	lsls	r3, r3, #31
 800360a:	d506      	bpl.n	800361a <__swbuf_r+0x64>
 800360c:	2e0a      	cmp	r6, #10
 800360e:	d104      	bne.n	800361a <__swbuf_r+0x64>
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f001 fc56 	bl	8004ec4 <_fflush_r>
 8003618:	b938      	cbnz	r0, 800362a <__swbuf_r+0x74>
 800361a:	4638      	mov	r0, r7
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361e:	4621      	mov	r1, r4
 8003620:	4628      	mov	r0, r5
 8003622:	f000 f805 	bl	8003630 <__swsetup_r>
 8003626:	2800      	cmp	r0, #0
 8003628:	d0d5      	beq.n	80035d6 <__swbuf_r+0x20>
 800362a:	f04f 37ff 	mov.w	r7, #4294967295
 800362e:	e7f4      	b.n	800361a <__swbuf_r+0x64>

08003630 <__swsetup_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <__swsetup_r+0xac>)
 8003634:	4605      	mov	r5, r0
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	460c      	mov	r4, r1
 800363a:	b118      	cbz	r0, 8003644 <__swsetup_r+0x14>
 800363c:	6a03      	ldr	r3, [r0, #32]
 800363e:	b90b      	cbnz	r3, 8003644 <__swsetup_r+0x14>
 8003640:	f7ff fee4 	bl	800340c <__sinit>
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800364a:	0718      	lsls	r0, r3, #28
 800364c:	d422      	bmi.n	8003694 <__swsetup_r+0x64>
 800364e:	06d9      	lsls	r1, r3, #27
 8003650:	d407      	bmi.n	8003662 <__swsetup_r+0x32>
 8003652:	2309      	movs	r3, #9
 8003654:	602b      	str	r3, [r5, #0]
 8003656:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	e034      	b.n	80036cc <__swsetup_r+0x9c>
 8003662:	0758      	lsls	r0, r3, #29
 8003664:	d512      	bpl.n	800368c <__swsetup_r+0x5c>
 8003666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003668:	b141      	cbz	r1, 800367c <__swsetup_r+0x4c>
 800366a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800366e:	4299      	cmp	r1, r3
 8003670:	d002      	beq.n	8003678 <__swsetup_r+0x48>
 8003672:	4628      	mov	r0, r5
 8003674:	f000 ff30 	bl	80044d8 <_free_r>
 8003678:	2300      	movs	r3, #0
 800367a:	6363      	str	r3, [r4, #52]	; 0x34
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003682:	81a3      	strh	r3, [r4, #12]
 8003684:	2300      	movs	r3, #0
 8003686:	6063      	str	r3, [r4, #4]
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	6923      	ldr	r3, [r4, #16]
 8003696:	b94b      	cbnz	r3, 80036ac <__swsetup_r+0x7c>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800369e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a2:	d003      	beq.n	80036ac <__swsetup_r+0x7c>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	f001 fc59 	bl	8004f5e <__smakebuf_r>
 80036ac:	89a0      	ldrh	r0, [r4, #12]
 80036ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036b2:	f010 0301 	ands.w	r3, r0, #1
 80036b6:	d00a      	beq.n	80036ce <__swsetup_r+0x9e>
 80036b8:	2300      	movs	r3, #0
 80036ba:	60a3      	str	r3, [r4, #8]
 80036bc:	6963      	ldr	r3, [r4, #20]
 80036be:	425b      	negs	r3, r3
 80036c0:	61a3      	str	r3, [r4, #24]
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	b943      	cbnz	r3, 80036d8 <__swsetup_r+0xa8>
 80036c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036ca:	d1c4      	bne.n	8003656 <__swsetup_r+0x26>
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	0781      	lsls	r1, r0, #30
 80036d0:	bf58      	it	pl
 80036d2:	6963      	ldrpl	r3, [r4, #20]
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	e7f4      	b.n	80036c2 <__swsetup_r+0x92>
 80036d8:	2000      	movs	r0, #0
 80036da:	e7f7      	b.n	80036cc <__swsetup_r+0x9c>
 80036dc:	20000064 	.word	0x20000064

080036e0 <memset>:
 80036e0:	4603      	mov	r3, r0
 80036e2:	4402      	add	r2, r0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d100      	bne.n	80036ea <memset+0xa>
 80036e8:	4770      	bx	lr
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e7f9      	b.n	80036e4 <memset+0x4>

080036f0 <_localeconv_r>:
 80036f0:	4800      	ldr	r0, [pc, #0]	; (80036f4 <_localeconv_r+0x4>)
 80036f2:	4770      	bx	lr
 80036f4:	20000158 	.word	0x20000158

080036f8 <_close_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	2300      	movs	r3, #0
 80036fc:	4d05      	ldr	r5, [pc, #20]	; (8003714 <_close_r+0x1c>)
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	f7fd fcd2 	bl	80010ac <_close>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_close_r+0x1a>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b103      	cbz	r3, 8003712 <_close_r+0x1a>
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	200003a8 	.word	0x200003a8

08003718 <_lseek_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4604      	mov	r4, r0
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	2200      	movs	r2, #0
 8003722:	4d05      	ldr	r5, [pc, #20]	; (8003738 <_lseek_r+0x20>)
 8003724:	602a      	str	r2, [r5, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fd fce4 	bl	80010f4 <_lseek>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_lseek_r+0x1e>
 8003730:	682b      	ldr	r3, [r5, #0]
 8003732:	b103      	cbz	r3, 8003736 <_lseek_r+0x1e>
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	200003a8 	.word	0x200003a8

0800373c <_read_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	2200      	movs	r2, #0
 8003746:	4d05      	ldr	r5, [pc, #20]	; (800375c <_read_r+0x20>)
 8003748:	602a      	str	r2, [r5, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7fd fa31 	bl	8000bb2 <_read>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_read_r+0x1e>
 8003754:	682b      	ldr	r3, [r5, #0]
 8003756:	b103      	cbz	r3, 800375a <_read_r+0x1e>
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	200003a8 	.word	0x200003a8

08003760 <_write_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	2200      	movs	r2, #0
 800376a:	4d05      	ldr	r5, [pc, #20]	; (8003780 <_write_r+0x20>)
 800376c:	602a      	str	r2, [r5, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	f7fd fa3c 	bl	8000bec <_write>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_write_r+0x1e>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_write_r+0x1e>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	200003a8 	.word	0x200003a8

08003784 <__errno>:
 8003784:	4b01      	ldr	r3, [pc, #4]	; (800378c <__errno+0x8>)
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000064 	.word	0x20000064

08003790 <__libc_init_array>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	2600      	movs	r6, #0
 8003794:	4d0c      	ldr	r5, [pc, #48]	; (80037c8 <__libc_init_array+0x38>)
 8003796:	4c0d      	ldr	r4, [pc, #52]	; (80037cc <__libc_init_array+0x3c>)
 8003798:	1b64      	subs	r4, r4, r5
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	42a6      	cmp	r6, r4
 800379e:	d109      	bne.n	80037b4 <__libc_init_array+0x24>
 80037a0:	f001 fe4a 	bl	8005438 <_init>
 80037a4:	2600      	movs	r6, #0
 80037a6:	4d0a      	ldr	r5, [pc, #40]	; (80037d0 <__libc_init_array+0x40>)
 80037a8:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <__libc_init_array+0x44>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	42a6      	cmp	r6, r4
 80037b0:	d105      	bne.n	80037be <__libc_init_array+0x2e>
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b8:	4798      	blx	r3
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7ee      	b.n	800379c <__libc_init_array+0xc>
 80037be:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c2:	4798      	blx	r3
 80037c4:	3601      	adds	r6, #1
 80037c6:	e7f2      	b.n	80037ae <__libc_init_array+0x1e>
 80037c8:	08005864 	.word	0x08005864
 80037cc:	08005864 	.word	0x08005864
 80037d0:	08005864 	.word	0x08005864
 80037d4:	08005868 	.word	0x08005868

080037d8 <__retarget_lock_init_recursive>:
 80037d8:	4770      	bx	lr

080037da <__retarget_lock_acquire_recursive>:
 80037da:	4770      	bx	lr

080037dc <__retarget_lock_release_recursive>:
 80037dc:	4770      	bx	lr

080037de <memchr>:
 80037de:	4603      	mov	r3, r0
 80037e0:	b510      	push	{r4, lr}
 80037e2:	b2c9      	uxtb	r1, r1
 80037e4:	4402      	add	r2, r0
 80037e6:	4293      	cmp	r3, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	d101      	bne.n	80037f0 <memchr+0x12>
 80037ec:	2000      	movs	r0, #0
 80037ee:	e003      	b.n	80037f8 <memchr+0x1a>
 80037f0:	7804      	ldrb	r4, [r0, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	428c      	cmp	r4, r1
 80037f6:	d1f6      	bne.n	80037e6 <memchr+0x8>
 80037f8:	bd10      	pop	{r4, pc}

080037fa <quorem>:
 80037fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037fe:	6903      	ldr	r3, [r0, #16]
 8003800:	690c      	ldr	r4, [r1, #16]
 8003802:	4607      	mov	r7, r0
 8003804:	42a3      	cmp	r3, r4
 8003806:	db7f      	blt.n	8003908 <quorem+0x10e>
 8003808:	3c01      	subs	r4, #1
 800380a:	f100 0514 	add.w	r5, r0, #20
 800380e:	f101 0814 	add.w	r8, r1, #20
 8003812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003816:	9301      	str	r3, [sp, #4]
 8003818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800381c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003820:	3301      	adds	r3, #1
 8003822:	429a      	cmp	r2, r3
 8003824:	fbb2 f6f3 	udiv	r6, r2, r3
 8003828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800382c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003830:	d331      	bcc.n	8003896 <quorem+0x9c>
 8003832:	f04f 0e00 	mov.w	lr, #0
 8003836:	4640      	mov	r0, r8
 8003838:	46ac      	mov	ip, r5
 800383a:	46f2      	mov	sl, lr
 800383c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003840:	b293      	uxth	r3, r2
 8003842:	fb06 e303 	mla	r3, r6, r3, lr
 8003846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800384a:	0c1a      	lsrs	r2, r3, #16
 800384c:	b29b      	uxth	r3, r3
 800384e:	fb06 220e 	mla	r2, r6, lr, r2
 8003852:	ebaa 0303 	sub.w	r3, sl, r3
 8003856:	f8dc a000 	ldr.w	sl, [ip]
 800385a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800385e:	fa1f fa8a 	uxth.w	sl, sl
 8003862:	4453      	add	r3, sl
 8003864:	f8dc a000 	ldr.w	sl, [ip]
 8003868:	b292      	uxth	r2, r2
 800386a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800386e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003872:	b29b      	uxth	r3, r3
 8003874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003878:	4581      	cmp	r9, r0
 800387a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800387e:	f84c 3b04 	str.w	r3, [ip], #4
 8003882:	d2db      	bcs.n	800383c <quorem+0x42>
 8003884:	f855 300b 	ldr.w	r3, [r5, fp]
 8003888:	b92b      	cbnz	r3, 8003896 <quorem+0x9c>
 800388a:	9b01      	ldr	r3, [sp, #4]
 800388c:	3b04      	subs	r3, #4
 800388e:	429d      	cmp	r5, r3
 8003890:	461a      	mov	r2, r3
 8003892:	d32d      	bcc.n	80038f0 <quorem+0xf6>
 8003894:	613c      	str	r4, [r7, #16]
 8003896:	4638      	mov	r0, r7
 8003898:	f001 f994 	bl	8004bc4 <__mcmp>
 800389c:	2800      	cmp	r0, #0
 800389e:	db23      	blt.n	80038e8 <quorem+0xee>
 80038a0:	4629      	mov	r1, r5
 80038a2:	2000      	movs	r0, #0
 80038a4:	3601      	adds	r6, #1
 80038a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80038aa:	f8d1 c000 	ldr.w	ip, [r1]
 80038ae:	b293      	uxth	r3, r2
 80038b0:	1ac3      	subs	r3, r0, r3
 80038b2:	0c12      	lsrs	r2, r2, #16
 80038b4:	fa1f f08c 	uxth.w	r0, ip
 80038b8:	4403      	add	r3, r0
 80038ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80038be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038c8:	45c1      	cmp	r9, r8
 80038ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80038ce:	f841 3b04 	str.w	r3, [r1], #4
 80038d2:	d2e8      	bcs.n	80038a6 <quorem+0xac>
 80038d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038dc:	b922      	cbnz	r2, 80038e8 <quorem+0xee>
 80038de:	3b04      	subs	r3, #4
 80038e0:	429d      	cmp	r5, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	d30a      	bcc.n	80038fc <quorem+0x102>
 80038e6:	613c      	str	r4, [r7, #16]
 80038e8:	4630      	mov	r0, r6
 80038ea:	b003      	add	sp, #12
 80038ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	3b04      	subs	r3, #4
 80038f4:	2a00      	cmp	r2, #0
 80038f6:	d1cd      	bne.n	8003894 <quorem+0x9a>
 80038f8:	3c01      	subs	r4, #1
 80038fa:	e7c8      	b.n	800388e <quorem+0x94>
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	3b04      	subs	r3, #4
 8003900:	2a00      	cmp	r2, #0
 8003902:	d1f0      	bne.n	80038e6 <quorem+0xec>
 8003904:	3c01      	subs	r4, #1
 8003906:	e7eb      	b.n	80038e0 <quorem+0xe6>
 8003908:	2000      	movs	r0, #0
 800390a:	e7ee      	b.n	80038ea <quorem+0xf0>
 800390c:	0000      	movs	r0, r0
	...

08003910 <_dtoa_r>:
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	4616      	mov	r6, r2
 8003916:	461f      	mov	r7, r3
 8003918:	69c4      	ldr	r4, [r0, #28]
 800391a:	b099      	sub	sp, #100	; 0x64
 800391c:	4605      	mov	r5, r0
 800391e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003922:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003926:	b974      	cbnz	r4, 8003946 <_dtoa_r+0x36>
 8003928:	2010      	movs	r0, #16
 800392a:	f000 fe1d 	bl	8004568 <malloc>
 800392e:	4602      	mov	r2, r0
 8003930:	61e8      	str	r0, [r5, #28]
 8003932:	b920      	cbnz	r0, 800393e <_dtoa_r+0x2e>
 8003934:	21ef      	movs	r1, #239	; 0xef
 8003936:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <_dtoa_r+0x2d8>)
 8003938:	48ac      	ldr	r0, [pc, #688]	; (8003bec <_dtoa_r+0x2dc>)
 800393a:	f001 fb8d 	bl	8005058 <__assert_func>
 800393e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003942:	6004      	str	r4, [r0, #0]
 8003944:	60c4      	str	r4, [r0, #12]
 8003946:	69eb      	ldr	r3, [r5, #28]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	b151      	cbz	r1, 8003962 <_dtoa_r+0x52>
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	2301      	movs	r3, #1
 8003950:	4093      	lsls	r3, r2
 8003952:	604a      	str	r2, [r1, #4]
 8003954:	608b      	str	r3, [r1, #8]
 8003956:	4628      	mov	r0, r5
 8003958:	f000 fefa 	bl	8004750 <_Bfree>
 800395c:	2200      	movs	r2, #0
 800395e:	69eb      	ldr	r3, [r5, #28]
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	1e3b      	subs	r3, r7, #0
 8003964:	bfaf      	iteee	ge
 8003966:	2300      	movge	r3, #0
 8003968:	2201      	movlt	r2, #1
 800396a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800396e:	9305      	strlt	r3, [sp, #20]
 8003970:	bfa8      	it	ge
 8003972:	f8c8 3000 	strge.w	r3, [r8]
 8003976:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800397a:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <_dtoa_r+0x2e0>)
 800397c:	bfb8      	it	lt
 800397e:	f8c8 2000 	strlt.w	r2, [r8]
 8003982:	ea33 0309 	bics.w	r3, r3, r9
 8003986:	d119      	bne.n	80039bc <_dtoa_r+0xac>
 8003988:	f242 730f 	movw	r3, #9999	; 0x270f
 800398c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003994:	4333      	orrs	r3, r6
 8003996:	f000 8589 	beq.w	80044ac <_dtoa_r+0xb9c>
 800399a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800399c:	b953      	cbnz	r3, 80039b4 <_dtoa_r+0xa4>
 800399e:	4b95      	ldr	r3, [pc, #596]	; (8003bf4 <_dtoa_r+0x2e4>)
 80039a0:	e023      	b.n	80039ea <_dtoa_r+0xda>
 80039a2:	4b95      	ldr	r3, [pc, #596]	; (8003bf8 <_dtoa_r+0x2e8>)
 80039a4:	9303      	str	r3, [sp, #12]
 80039a6:	3308      	adds	r3, #8
 80039a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	9803      	ldr	r0, [sp, #12]
 80039ae:	b019      	add	sp, #100	; 0x64
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b4:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <_dtoa_r+0x2e4>)
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	3303      	adds	r3, #3
 80039ba:	e7f5      	b.n	80039a8 <_dtoa_r+0x98>
 80039bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80039c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80039c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039c8:	2200      	movs	r2, #0
 80039ca:	2300      	movs	r3, #0
 80039cc:	f7fd f858 	bl	8000a80 <__aeabi_dcmpeq>
 80039d0:	4680      	mov	r8, r0
 80039d2:	b160      	cbz	r0, 80039ee <_dtoa_r+0xde>
 80039d4:	2301      	movs	r3, #1
 80039d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8562 	beq.w	80044a6 <_dtoa_r+0xb96>
 80039e2:	4b86      	ldr	r3, [pc, #536]	; (8003bfc <_dtoa_r+0x2ec>)
 80039e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	e7de      	b.n	80039ac <_dtoa_r+0x9c>
 80039ee:	ab16      	add	r3, sp, #88	; 0x58
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	ab17      	add	r3, sp, #92	; 0x5c
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4628      	mov	r0, r5
 80039f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80039fc:	f001 f98a 	bl	8004d14 <__d2b>
 8003a00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003a04:	4682      	mov	sl, r0
 8003a06:	2c00      	cmp	r4, #0
 8003a08:	d07e      	beq.n	8003b08 <_dtoa_r+0x1f8>
 8003a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a18:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003a1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a20:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003a24:	4619      	mov	r1, r3
 8003a26:	2200      	movs	r2, #0
 8003a28:	4b75      	ldr	r3, [pc, #468]	; (8003c00 <_dtoa_r+0x2f0>)
 8003a2a:	f7fc fc09 	bl	8000240 <__aeabi_dsub>
 8003a2e:	a368      	add	r3, pc, #416	; (adr r3, 8003bd0 <_dtoa_r+0x2c0>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fdbc 	bl	80005b0 <__aeabi_dmul>
 8003a38:	a367      	add	r3, pc, #412	; (adr r3, 8003bd8 <_dtoa_r+0x2c8>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fc01 	bl	8000244 <__adddf3>
 8003a42:	4606      	mov	r6, r0
 8003a44:	4620      	mov	r0, r4
 8003a46:	460f      	mov	r7, r1
 8003a48:	f7fc fd48 	bl	80004dc <__aeabi_i2d>
 8003a4c:	a364      	add	r3, pc, #400	; (adr r3, 8003be0 <_dtoa_r+0x2d0>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fdad 	bl	80005b0 <__aeabi_dmul>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	4639      	mov	r1, r7
 8003a5e:	f7fc fbf1 	bl	8000244 <__adddf3>
 8003a62:	4606      	mov	r6, r0
 8003a64:	460f      	mov	r7, r1
 8003a66:	f7fd f853 	bl	8000b10 <__aeabi_d2iz>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4683      	mov	fp, r0
 8003a6e:	2300      	movs	r3, #0
 8003a70:	4630      	mov	r0, r6
 8003a72:	4639      	mov	r1, r7
 8003a74:	f7fd f80e 	bl	8000a94 <__aeabi_dcmplt>
 8003a78:	b148      	cbz	r0, 8003a8e <_dtoa_r+0x17e>
 8003a7a:	4658      	mov	r0, fp
 8003a7c:	f7fc fd2e 	bl	80004dc <__aeabi_i2d>
 8003a80:	4632      	mov	r2, r6
 8003a82:	463b      	mov	r3, r7
 8003a84:	f7fc fffc 	bl	8000a80 <__aeabi_dcmpeq>
 8003a88:	b908      	cbnz	r0, 8003a8e <_dtoa_r+0x17e>
 8003a8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a8e:	f1bb 0f16 	cmp.w	fp, #22
 8003a92:	d857      	bhi.n	8003b44 <_dtoa_r+0x234>
 8003a94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a98:	4b5a      	ldr	r3, [pc, #360]	; (8003c04 <_dtoa_r+0x2f4>)
 8003a9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fff7 	bl	8000a94 <__aeabi_dcmplt>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d04e      	beq.n	8003b48 <_dtoa_r+0x238>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ab2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ab4:	1b1b      	subs	r3, r3, r4
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	bf46      	itte	mi
 8003aba:	f1c3 0901 	rsbmi	r9, r3, #1
 8003abe:	2300      	movmi	r3, #0
 8003ac0:	f04f 0900 	movpl.w	r9, #0
 8003ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac6:	bf48      	it	mi
 8003ac8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003aca:	f1bb 0f00 	cmp.w	fp, #0
 8003ace:	db3d      	blt.n	8003b4c <_dtoa_r+0x23c>
 8003ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8003ad6:	445b      	add	r3, fp
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	2300      	movs	r3, #0
 8003adc:	930a      	str	r3, [sp, #40]	; 0x28
 8003ade:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d867      	bhi.n	8003bb4 <_dtoa_r+0x2a4>
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	bfc4      	itt	gt
 8003ae8:	3b04      	subgt	r3, #4
 8003aea:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aee:	bfc8      	it	gt
 8003af0:	2400      	movgt	r4, #0
 8003af2:	f1a3 0302 	sub.w	r3, r3, #2
 8003af6:	bfd8      	it	le
 8003af8:	2401      	movle	r4, #1
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	f200 8086 	bhi.w	8003c0c <_dtoa_r+0x2fc>
 8003b00:	e8df f003 	tbb	[pc, r3]
 8003b04:	5637392c 	.word	0x5637392c
 8003b08:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003b0c:	441c      	add	r4, r3
 8003b0e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	bfc1      	itttt	gt
 8003b16:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b1a:	fa09 f903 	lslgt.w	r9, r9, r3
 8003b1e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8003b22:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003b26:	bfd6      	itet	le
 8003b28:	f1c3 0320 	rsble	r3, r3, #32
 8003b2c:	ea49 0003 	orrgt.w	r0, r9, r3
 8003b30:	fa06 f003 	lslle.w	r0, r6, r3
 8003b34:	f7fc fcc2 	bl	80004bc <__aeabi_ui2d>
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003b3e:	3c01      	subs	r4, #1
 8003b40:	9213      	str	r2, [sp, #76]	; 0x4c
 8003b42:	e76f      	b.n	8003a24 <_dtoa_r+0x114>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e7b3      	b.n	8003ab0 <_dtoa_r+0x1a0>
 8003b48:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b4a:	e7b2      	b.n	8003ab2 <_dtoa_r+0x1a2>
 8003b4c:	f1cb 0300 	rsb	r3, fp, #0
 8003b50:	930a      	str	r3, [sp, #40]	; 0x28
 8003b52:	2300      	movs	r3, #0
 8003b54:	eba9 090b 	sub.w	r9, r9, fp
 8003b58:	930e      	str	r3, [sp, #56]	; 0x38
 8003b5a:	e7c0      	b.n	8003ade <_dtoa_r+0x1ce>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dc55      	bgt.n	8003c12 <_dtoa_r+0x302>
 8003b66:	2301      	movs	r3, #1
 8003b68:	461a      	mov	r2, r3
 8003b6a:	9306      	str	r3, [sp, #24]
 8003b6c:	9308      	str	r3, [sp, #32]
 8003b6e:	9223      	str	r2, [sp, #140]	; 0x8c
 8003b70:	e00b      	b.n	8003b8a <_dtoa_r+0x27a>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e7f3      	b.n	8003b5e <_dtoa_r+0x24e>
 8003b76:	2300      	movs	r3, #0
 8003b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b7c:	445b      	add	r3, fp
 8003b7e:	9306      	str	r3, [sp, #24]
 8003b80:	3301      	adds	r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	9308      	str	r3, [sp, #32]
 8003b86:	bfb8      	it	lt
 8003b88:	2301      	movlt	r3, #1
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	69e8      	ldr	r0, [r5, #28]
 8003b90:	f102 0614 	add.w	r6, r2, #20
 8003b94:	429e      	cmp	r6, r3
 8003b96:	d940      	bls.n	8003c1a <_dtoa_r+0x30a>
 8003b98:	6041      	str	r1, [r0, #4]
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 fd98 	bl	80046d0 <_Balloc>
 8003ba0:	9003      	str	r0, [sp, #12]
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d13c      	bne.n	8003c20 <_dtoa_r+0x310>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f240 11af 	movw	r1, #431	; 0x1af
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <_dtoa_r+0x2f8>)
 8003bae:	e6c3      	b.n	8003938 <_dtoa_r+0x28>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e7e1      	b.n	8003b78 <_dtoa_r+0x268>
 8003bb4:	2401      	movs	r4, #1
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8003bba:	9322      	str	r3, [sp, #136]	; 0x88
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	9306      	str	r3, [sp, #24]
 8003bc4:	9308      	str	r3, [sp, #32]
 8003bc6:	2312      	movs	r3, #18
 8003bc8:	e7d1      	b.n	8003b6e <_dtoa_r+0x25e>
 8003bca:	bf00      	nop
 8003bcc:	f3af 8000 	nop.w
 8003bd0:	636f4361 	.word	0x636f4361
 8003bd4:	3fd287a7 	.word	0x3fd287a7
 8003bd8:	8b60c8b3 	.word	0x8b60c8b3
 8003bdc:	3fc68a28 	.word	0x3fc68a28
 8003be0:	509f79fb 	.word	0x509f79fb
 8003be4:	3fd34413 	.word	0x3fd34413
 8003be8:	08005533 	.word	0x08005533
 8003bec:	0800554a 	.word	0x0800554a
 8003bf0:	7ff00000 	.word	0x7ff00000
 8003bf4:	0800552f 	.word	0x0800552f
 8003bf8:	08005526 	.word	0x08005526
 8003bfc:	08005503 	.word	0x08005503
 8003c00:	3ff80000 	.word	0x3ff80000
 8003c04:	08005638 	.word	0x08005638
 8003c08:	080055a2 	.word	0x080055a2
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c10:	e7d4      	b.n	8003bbc <_dtoa_r+0x2ac>
 8003c12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c14:	9306      	str	r3, [sp, #24]
 8003c16:	9308      	str	r3, [sp, #32]
 8003c18:	e7b7      	b.n	8003b8a <_dtoa_r+0x27a>
 8003c1a:	3101      	adds	r1, #1
 8003c1c:	0052      	lsls	r2, r2, #1
 8003c1e:	e7b7      	b.n	8003b90 <_dtoa_r+0x280>
 8003c20:	69eb      	ldr	r3, [r5, #28]
 8003c22:	9a03      	ldr	r2, [sp, #12]
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	9b08      	ldr	r3, [sp, #32]
 8003c28:	2b0e      	cmp	r3, #14
 8003c2a:	f200 80a8 	bhi.w	8003d7e <_dtoa_r+0x46e>
 8003c2e:	2c00      	cmp	r4, #0
 8003c30:	f000 80a5 	beq.w	8003d7e <_dtoa_r+0x46e>
 8003c34:	f1bb 0f00 	cmp.w	fp, #0
 8003c38:	dd34      	ble.n	8003ca4 <_dtoa_r+0x394>
 8003c3a:	4b9a      	ldr	r3, [pc, #616]	; (8003ea4 <_dtoa_r+0x594>)
 8003c3c:	f00b 020f 	and.w	r2, fp, #15
 8003c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003c48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c4c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003c50:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003c54:	d016      	beq.n	8003c84 <_dtoa_r+0x374>
 8003c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c5a:	4b93      	ldr	r3, [pc, #588]	; (8003ea8 <_dtoa_r+0x598>)
 8003c5c:	2703      	movs	r7, #3
 8003c5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c62:	f7fc fdcf 	bl	8000804 <__aeabi_ddiv>
 8003c66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c6a:	f004 040f 	and.w	r4, r4, #15
 8003c6e:	4e8e      	ldr	r6, [pc, #568]	; (8003ea8 <_dtoa_r+0x598>)
 8003c70:	b954      	cbnz	r4, 8003c88 <_dtoa_r+0x378>
 8003c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c7a:	f7fc fdc3 	bl	8000804 <__aeabi_ddiv>
 8003c7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c82:	e029      	b.n	8003cd8 <_dtoa_r+0x3c8>
 8003c84:	2702      	movs	r7, #2
 8003c86:	e7f2      	b.n	8003c6e <_dtoa_r+0x35e>
 8003c88:	07e1      	lsls	r1, r4, #31
 8003c8a:	d508      	bpl.n	8003c9e <_dtoa_r+0x38e>
 8003c8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c94:	f7fc fc8c 	bl	80005b0 <__aeabi_dmul>
 8003c98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c9c:	3701      	adds	r7, #1
 8003c9e:	1064      	asrs	r4, r4, #1
 8003ca0:	3608      	adds	r6, #8
 8003ca2:	e7e5      	b.n	8003c70 <_dtoa_r+0x360>
 8003ca4:	f000 80a5 	beq.w	8003df2 <_dtoa_r+0x4e2>
 8003ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cac:	f1cb 0400 	rsb	r4, fp, #0
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <_dtoa_r+0x594>)
 8003cb2:	f004 020f 	and.w	r2, r4, #15
 8003cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fc77 	bl	80005b0 <__aeabi_dmul>
 8003cc2:	2702      	movs	r7, #2
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003cca:	4e77      	ldr	r6, [pc, #476]	; (8003ea8 <_dtoa_r+0x598>)
 8003ccc:	1124      	asrs	r4, r4, #4
 8003cce:	2c00      	cmp	r4, #0
 8003cd0:	f040 8084 	bne.w	8003ddc <_dtoa_r+0x4cc>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1d2      	bne.n	8003c7e <_dtoa_r+0x36e>
 8003cd8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003cdc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8087 	beq.w	8003df6 <_dtoa_r+0x4e6>
 8003ce8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003cec:	2200      	movs	r2, #0
 8003cee:	4b6f      	ldr	r3, [pc, #444]	; (8003eac <_dtoa_r+0x59c>)
 8003cf0:	f7fc fed0 	bl	8000a94 <__aeabi_dcmplt>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d07e      	beq.n	8003df6 <_dtoa_r+0x4e6>
 8003cf8:	9b08      	ldr	r3, [sp, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d07b      	beq.n	8003df6 <_dtoa_r+0x4e6>
 8003cfe:	9b06      	ldr	r3, [sp, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	dd38      	ble.n	8003d76 <_dtoa_r+0x466>
 8003d04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4b69      	ldr	r3, [pc, #420]	; (8003eb0 <_dtoa_r+0x5a0>)
 8003d0c:	f7fc fc50 	bl	80005b0 <__aeabi_dmul>
 8003d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d14:	9c06      	ldr	r4, [sp, #24]
 8003d16:	f10b 38ff 	add.w	r8, fp, #4294967295
 8003d1a:	3701      	adds	r7, #1
 8003d1c:	4638      	mov	r0, r7
 8003d1e:	f7fc fbdd 	bl	80004dc <__aeabi_i2d>
 8003d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d26:	f7fc fc43 	bl	80005b0 <__aeabi_dmul>
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <_dtoa_r+0x5a4>)
 8003d2e:	f7fc fa89 	bl	8000244 <__adddf3>
 8003d32:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003d36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003d3a:	9611      	str	r6, [sp, #68]	; 0x44
 8003d3c:	2c00      	cmp	r4, #0
 8003d3e:	d15d      	bne.n	8003dfc <_dtoa_r+0x4ec>
 8003d40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d44:	2200      	movs	r2, #0
 8003d46:	4b5c      	ldr	r3, [pc, #368]	; (8003eb8 <_dtoa_r+0x5a8>)
 8003d48:	f7fc fa7a 	bl	8000240 <__aeabi_dsub>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d54:	4633      	mov	r3, r6
 8003d56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d58:	f7fc feba 	bl	8000ad0 <__aeabi_dcmpgt>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f040 8295 	bne.w	800428c <_dtoa_r+0x97c>
 8003d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d66:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003d6c:	f7fc fe92 	bl	8000a94 <__aeabi_dcmplt>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	f040 8289 	bne.w	8004288 <_dtoa_r+0x978>
 8003d76:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003d7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f2c0 8151 	blt.w	8004028 <_dtoa_r+0x718>
 8003d86:	f1bb 0f0e 	cmp.w	fp, #14
 8003d8a:	f300 814d 	bgt.w	8004028 <_dtoa_r+0x718>
 8003d8e:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <_dtoa_r+0x594>)
 8003d90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003d94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d98:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003d9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f280 80da 	bge.w	8003f58 <_dtoa_r+0x648>
 8003da4:	9b08      	ldr	r3, [sp, #32]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f300 80d6 	bgt.w	8003f58 <_dtoa_r+0x648>
 8003dac:	f040 826b 	bne.w	8004286 <_dtoa_r+0x976>
 8003db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db4:	2200      	movs	r2, #0
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <_dtoa_r+0x5a8>)
 8003db8:	f7fc fbfa 	bl	80005b0 <__aeabi_dmul>
 8003dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dc0:	f7fc fe7c 	bl	8000abc <__aeabi_dcmpge>
 8003dc4:	9c08      	ldr	r4, [sp, #32]
 8003dc6:	4626      	mov	r6, r4
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	f040 8241 	bne.w	8004250 <_dtoa_r+0x940>
 8003dce:	2331      	movs	r3, #49	; 0x31
 8003dd0:	9f03      	ldr	r7, [sp, #12]
 8003dd2:	f10b 0b01 	add.w	fp, fp, #1
 8003dd6:	f807 3b01 	strb.w	r3, [r7], #1
 8003dda:	e23d      	b.n	8004258 <_dtoa_r+0x948>
 8003ddc:	07e2      	lsls	r2, r4, #31
 8003dde:	d505      	bpl.n	8003dec <_dtoa_r+0x4dc>
 8003de0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003de4:	f7fc fbe4 	bl	80005b0 <__aeabi_dmul>
 8003de8:	2301      	movs	r3, #1
 8003dea:	3701      	adds	r7, #1
 8003dec:	1064      	asrs	r4, r4, #1
 8003dee:	3608      	adds	r6, #8
 8003df0:	e76d      	b.n	8003cce <_dtoa_r+0x3be>
 8003df2:	2702      	movs	r7, #2
 8003df4:	e770      	b.n	8003cd8 <_dtoa_r+0x3c8>
 8003df6:	46d8      	mov	r8, fp
 8003df8:	9c08      	ldr	r4, [sp, #32]
 8003dfa:	e78f      	b.n	8003d1c <_dtoa_r+0x40c>
 8003dfc:	9903      	ldr	r1, [sp, #12]
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <_dtoa_r+0x594>)
 8003e00:	4421      	add	r1, r4
 8003e02:	9112      	str	r1, [sp, #72]	; 0x48
 8003e04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e0a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003e0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e12:	2900      	cmp	r1, #0
 8003e14:	d054      	beq.n	8003ec0 <_dtoa_r+0x5b0>
 8003e16:	2000      	movs	r0, #0
 8003e18:	4928      	ldr	r1, [pc, #160]	; (8003ebc <_dtoa_r+0x5ac>)
 8003e1a:	f7fc fcf3 	bl	8000804 <__aeabi_ddiv>
 8003e1e:	463b      	mov	r3, r7
 8003e20:	4632      	mov	r2, r6
 8003e22:	f7fc fa0d 	bl	8000240 <__aeabi_dsub>
 8003e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e2a:	9f03      	ldr	r7, [sp, #12]
 8003e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e30:	f7fc fe6e 	bl	8000b10 <__aeabi_d2iz>
 8003e34:	4604      	mov	r4, r0
 8003e36:	f7fc fb51 	bl	80004dc <__aeabi_i2d>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e42:	f7fc f9fd 	bl	8000240 <__aeabi_dsub>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	3430      	adds	r4, #48	; 0x30
 8003e4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e54:	f807 4b01 	strb.w	r4, [r7], #1
 8003e58:	f7fc fe1c 	bl	8000a94 <__aeabi_dcmplt>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d173      	bne.n	8003f48 <_dtoa_r+0x638>
 8003e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e64:	2000      	movs	r0, #0
 8003e66:	4911      	ldr	r1, [pc, #68]	; (8003eac <_dtoa_r+0x59c>)
 8003e68:	f7fc f9ea 	bl	8000240 <__aeabi_dsub>
 8003e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e70:	f7fc fe10 	bl	8000a94 <__aeabi_dcmplt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f040 80b6 	bne.w	8003fe6 <_dtoa_r+0x6d6>
 8003e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e7c:	429f      	cmp	r7, r3
 8003e7e:	f43f af7a 	beq.w	8003d76 <_dtoa_r+0x466>
 8003e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003e86:	2200      	movs	r2, #0
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <_dtoa_r+0x5a0>)
 8003e8a:	f7fc fb91 	bl	80005b0 <__aeabi_dmul>
 8003e8e:	2200      	movs	r2, #0
 8003e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <_dtoa_r+0x5a0>)
 8003e9a:	f7fc fb89 	bl	80005b0 <__aeabi_dmul>
 8003e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ea2:	e7c3      	b.n	8003e2c <_dtoa_r+0x51c>
 8003ea4:	08005638 	.word	0x08005638
 8003ea8:	08005610 	.word	0x08005610
 8003eac:	3ff00000 	.word	0x3ff00000
 8003eb0:	40240000 	.word	0x40240000
 8003eb4:	401c0000 	.word	0x401c0000
 8003eb8:	40140000 	.word	0x40140000
 8003ebc:	3fe00000 	.word	0x3fe00000
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fb74 	bl	80005b0 <__aeabi_dmul>
 8003ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ece:	9c03      	ldr	r4, [sp, #12]
 8003ed0:	9314      	str	r3, [sp, #80]	; 0x50
 8003ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ed6:	f7fc fe1b 	bl	8000b10 <__aeabi_d2iz>
 8003eda:	9015      	str	r0, [sp, #84]	; 0x54
 8003edc:	f7fc fafe 	bl	80004dc <__aeabi_i2d>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ee8:	f7fc f9aa 	bl	8000240 <__aeabi_dsub>
 8003eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003eee:	4606      	mov	r6, r0
 8003ef0:	3330      	adds	r3, #48	; 0x30
 8003ef2:	f804 3b01 	strb.w	r3, [r4], #1
 8003ef6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ef8:	460f      	mov	r7, r1
 8003efa:	429c      	cmp	r4, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	d124      	bne.n	8003f4c <_dtoa_r+0x63c>
 8003f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f06:	4baf      	ldr	r3, [pc, #700]	; (80041c4 <_dtoa_r+0x8b4>)
 8003f08:	f7fc f99c 	bl	8000244 <__adddf3>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4630      	mov	r0, r6
 8003f12:	4639      	mov	r1, r7
 8003f14:	f7fc fddc 	bl	8000ad0 <__aeabi_dcmpgt>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d163      	bne.n	8003fe4 <_dtoa_r+0x6d4>
 8003f1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f20:	2000      	movs	r0, #0
 8003f22:	49a8      	ldr	r1, [pc, #672]	; (80041c4 <_dtoa_r+0x8b4>)
 8003f24:	f7fc f98c 	bl	8000240 <__aeabi_dsub>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	4639      	mov	r1, r7
 8003f30:	f7fc fdb0 	bl	8000a94 <__aeabi_dcmplt>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	f43f af1e 	beq.w	8003d76 <_dtoa_r+0x466>
 8003f3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f3c:	1e7b      	subs	r3, r7, #1
 8003f3e:	9314      	str	r3, [sp, #80]	; 0x50
 8003f40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003f44:	2b30      	cmp	r3, #48	; 0x30
 8003f46:	d0f8      	beq.n	8003f3a <_dtoa_r+0x62a>
 8003f48:	46c3      	mov	fp, r8
 8003f4a:	e03b      	b.n	8003fc4 <_dtoa_r+0x6b4>
 8003f4c:	4b9e      	ldr	r3, [pc, #632]	; (80041c8 <_dtoa_r+0x8b8>)
 8003f4e:	f7fc fb2f 	bl	80005b0 <__aeabi_dmul>
 8003f52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f56:	e7bc      	b.n	8003ed2 <_dtoa_r+0x5c2>
 8003f58:	9f03      	ldr	r7, [sp, #12]
 8003f5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc fc4d 	bl	8000804 <__aeabi_ddiv>
 8003f6a:	f7fc fdd1 	bl	8000b10 <__aeabi_d2iz>
 8003f6e:	4604      	mov	r4, r0
 8003f70:	f7fc fab4 	bl	80004dc <__aeabi_i2d>
 8003f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f78:	f7fc fb1a 	bl	80005b0 <__aeabi_dmul>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4640      	mov	r0, r8
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc f95c 	bl	8000240 <__aeabi_dsub>
 8003f88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003f8c:	f807 6b01 	strb.w	r6, [r7], #1
 8003f90:	9e03      	ldr	r6, [sp, #12]
 8003f92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003f96:	1bbe      	subs	r6, r7, r6
 8003f98:	45b4      	cmp	ip, r6
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	d136      	bne.n	800400e <_dtoa_r+0x6fe>
 8003fa0:	f7fc f950 	bl	8000244 <__adddf3>
 8003fa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fa8:	4680      	mov	r8, r0
 8003faa:	4689      	mov	r9, r1
 8003fac:	f7fc fd90 	bl	8000ad0 <__aeabi_dcmpgt>
 8003fb0:	bb58      	cbnz	r0, 800400a <_dtoa_r+0x6fa>
 8003fb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f7fc fd61 	bl	8000a80 <__aeabi_dcmpeq>
 8003fbe:	b108      	cbz	r0, 8003fc4 <_dtoa_r+0x6b4>
 8003fc0:	07e3      	lsls	r3, r4, #31
 8003fc2:	d422      	bmi.n	800400a <_dtoa_r+0x6fa>
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	f000 fbc2 	bl	8004750 <_Bfree>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003fd0:	703b      	strb	r3, [r7, #0]
 8003fd2:	f10b 0301 	add.w	r3, fp, #1
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f43f ace6 	beq.w	80039ac <_dtoa_r+0x9c>
 8003fe0:	601f      	str	r7, [r3, #0]
 8003fe2:	e4e3      	b.n	80039ac <_dtoa_r+0x9c>
 8003fe4:	4627      	mov	r7, r4
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	461f      	mov	r7, r3
 8003fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fee:	2a39      	cmp	r2, #57	; 0x39
 8003ff0:	d107      	bne.n	8004002 <_dtoa_r+0x6f2>
 8003ff2:	9a03      	ldr	r2, [sp, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1f7      	bne.n	8003fe8 <_dtoa_r+0x6d8>
 8003ff8:	2230      	movs	r2, #48	; 0x30
 8003ffa:	9903      	ldr	r1, [sp, #12]
 8003ffc:	f108 0801 	add.w	r8, r8, #1
 8004000:	700a      	strb	r2, [r1, #0]
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	3201      	adds	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e79e      	b.n	8003f48 <_dtoa_r+0x638>
 800400a:	46d8      	mov	r8, fp
 800400c:	e7eb      	b.n	8003fe6 <_dtoa_r+0x6d6>
 800400e:	2200      	movs	r2, #0
 8004010:	4b6d      	ldr	r3, [pc, #436]	; (80041c8 <_dtoa_r+0x8b8>)
 8004012:	f7fc facd 	bl	80005b0 <__aeabi_dmul>
 8004016:	2200      	movs	r2, #0
 8004018:	2300      	movs	r3, #0
 800401a:	4680      	mov	r8, r0
 800401c:	4689      	mov	r9, r1
 800401e:	f7fc fd2f 	bl	8000a80 <__aeabi_dcmpeq>
 8004022:	2800      	cmp	r0, #0
 8004024:	d09b      	beq.n	8003f5e <_dtoa_r+0x64e>
 8004026:	e7cd      	b.n	8003fc4 <_dtoa_r+0x6b4>
 8004028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800402a:	2a00      	cmp	r2, #0
 800402c:	f000 80c4 	beq.w	80041b8 <_dtoa_r+0x8a8>
 8004030:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004032:	2a01      	cmp	r2, #1
 8004034:	f300 80a8 	bgt.w	8004188 <_dtoa_r+0x878>
 8004038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800403a:	2a00      	cmp	r2, #0
 800403c:	f000 80a0 	beq.w	8004180 <_dtoa_r+0x870>
 8004040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004044:	464f      	mov	r7, r9
 8004046:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800404a:	2101      	movs	r1, #1
 800404c:	441a      	add	r2, r3
 800404e:	4628      	mov	r0, r5
 8004050:	4499      	add	r9, r3
 8004052:	9209      	str	r2, [sp, #36]	; 0x24
 8004054:	f000 fc32 	bl	80048bc <__i2b>
 8004058:	4606      	mov	r6, r0
 800405a:	b15f      	cbz	r7, 8004074 <_dtoa_r+0x764>
 800405c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	dd08      	ble.n	8004074 <_dtoa_r+0x764>
 8004062:	42bb      	cmp	r3, r7
 8004064:	bfa8      	it	ge
 8004066:	463b      	movge	r3, r7
 8004068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406a:	eba9 0903 	sub.w	r9, r9, r3
 800406e:	1aff      	subs	r7, r7, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004076:	b1f3      	cbz	r3, 80040b6 <_dtoa_r+0x7a6>
 8004078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80a0 	beq.w	80041c0 <_dtoa_r+0x8b0>
 8004080:	2c00      	cmp	r4, #0
 8004082:	dd10      	ble.n	80040a6 <_dtoa_r+0x796>
 8004084:	4631      	mov	r1, r6
 8004086:	4622      	mov	r2, r4
 8004088:	4628      	mov	r0, r5
 800408a:	f000 fcd5 	bl	8004a38 <__pow5mult>
 800408e:	4652      	mov	r2, sl
 8004090:	4601      	mov	r1, r0
 8004092:	4606      	mov	r6, r0
 8004094:	4628      	mov	r0, r5
 8004096:	f000 fc27 	bl	80048e8 <__multiply>
 800409a:	4680      	mov	r8, r0
 800409c:	4651      	mov	r1, sl
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 fb56 	bl	8004750 <_Bfree>
 80040a4:	46c2      	mov	sl, r8
 80040a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040a8:	1b1a      	subs	r2, r3, r4
 80040aa:	d004      	beq.n	80040b6 <_dtoa_r+0x7a6>
 80040ac:	4651      	mov	r1, sl
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 fcc2 	bl	8004a38 <__pow5mult>
 80040b4:	4682      	mov	sl, r0
 80040b6:	2101      	movs	r1, #1
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fbff 	bl	80048bc <__i2b>
 80040be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c0:	4604      	mov	r4, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f340 8082 	ble.w	80041cc <_dtoa_r+0x8bc>
 80040c8:	461a      	mov	r2, r3
 80040ca:	4601      	mov	r1, r0
 80040cc:	4628      	mov	r0, r5
 80040ce:	f000 fcb3 	bl	8004a38 <__pow5mult>
 80040d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040d4:	4604      	mov	r4, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	dd7b      	ble.n	80041d2 <_dtoa_r+0x8c2>
 80040da:	f04f 0800 	mov.w	r8, #0
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80040e4:	6918      	ldr	r0, [r3, #16]
 80040e6:	f000 fb9b 	bl	8004820 <__hi0bits>
 80040ea:	f1c0 0020 	rsb	r0, r0, #32
 80040ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f0:	4418      	add	r0, r3
 80040f2:	f010 001f 	ands.w	r0, r0, #31
 80040f6:	f000 8092 	beq.w	800421e <_dtoa_r+0x90e>
 80040fa:	f1c0 0320 	rsb	r3, r0, #32
 80040fe:	2b04      	cmp	r3, #4
 8004100:	f340 8085 	ble.w	800420e <_dtoa_r+0x8fe>
 8004104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004106:	f1c0 001c 	rsb	r0, r0, #28
 800410a:	4403      	add	r3, r0
 800410c:	4481      	add	r9, r0
 800410e:	4407      	add	r7, r0
 8004110:	9309      	str	r3, [sp, #36]	; 0x24
 8004112:	f1b9 0f00 	cmp.w	r9, #0
 8004116:	dd05      	ble.n	8004124 <_dtoa_r+0x814>
 8004118:	4651      	mov	r1, sl
 800411a:	464a      	mov	r2, r9
 800411c:	4628      	mov	r0, r5
 800411e:	f000 fce5 	bl	8004aec <__lshift>
 8004122:	4682      	mov	sl, r0
 8004124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	dd05      	ble.n	8004136 <_dtoa_r+0x826>
 800412a:	4621      	mov	r1, r4
 800412c:	461a      	mov	r2, r3
 800412e:	4628      	mov	r0, r5
 8004130:	f000 fcdc 	bl	8004aec <__lshift>
 8004134:	4604      	mov	r4, r0
 8004136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004138:	2b00      	cmp	r3, #0
 800413a:	d072      	beq.n	8004222 <_dtoa_r+0x912>
 800413c:	4621      	mov	r1, r4
 800413e:	4650      	mov	r0, sl
 8004140:	f000 fd40 	bl	8004bc4 <__mcmp>
 8004144:	2800      	cmp	r0, #0
 8004146:	da6c      	bge.n	8004222 <_dtoa_r+0x912>
 8004148:	2300      	movs	r3, #0
 800414a:	4651      	mov	r1, sl
 800414c:	220a      	movs	r2, #10
 800414e:	4628      	mov	r0, r5
 8004150:	f000 fb20 	bl	8004794 <__multadd>
 8004154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004156:	4682      	mov	sl, r0
 8004158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 81ac 	beq.w	80044ba <_dtoa_r+0xbaa>
 8004162:	2300      	movs	r3, #0
 8004164:	4631      	mov	r1, r6
 8004166:	220a      	movs	r2, #10
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fb13 	bl	8004794 <__multadd>
 800416e:	9b06      	ldr	r3, [sp, #24]
 8004170:	4606      	mov	r6, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	f300 8093 	bgt.w	800429e <_dtoa_r+0x98e>
 8004178:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800417a:	2b02      	cmp	r3, #2
 800417c:	dc59      	bgt.n	8004232 <_dtoa_r+0x922>
 800417e:	e08e      	b.n	800429e <_dtoa_r+0x98e>
 8004180:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004182:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004186:	e75d      	b.n	8004044 <_dtoa_r+0x734>
 8004188:	9b08      	ldr	r3, [sp, #32]
 800418a:	1e5c      	subs	r4, r3, #1
 800418c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800418e:	42a3      	cmp	r3, r4
 8004190:	bfbf      	itttt	lt
 8004192:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004194:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004196:	1ae3      	sublt	r3, r4, r3
 8004198:	18d2      	addlt	r2, r2, r3
 800419a:	bfa8      	it	ge
 800419c:	1b1c      	subge	r4, r3, r4
 800419e:	9b08      	ldr	r3, [sp, #32]
 80041a0:	bfbe      	ittt	lt
 80041a2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80041a4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80041a6:	2400      	movlt	r4, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bfb5      	itete	lt
 80041ac:	eba9 0703 	sublt.w	r7, r9, r3
 80041b0:	464f      	movge	r7, r9
 80041b2:	2300      	movlt	r3, #0
 80041b4:	9b08      	ldrge	r3, [sp, #32]
 80041b6:	e747      	b.n	8004048 <_dtoa_r+0x738>
 80041b8:	464f      	mov	r7, r9
 80041ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80041bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80041be:	e74c      	b.n	800405a <_dtoa_r+0x74a>
 80041c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041c2:	e773      	b.n	80040ac <_dtoa_r+0x79c>
 80041c4:	3fe00000 	.word	0x3fe00000
 80041c8:	40240000 	.word	0x40240000
 80041cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	dc18      	bgt.n	8004204 <_dtoa_r+0x8f4>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	b9b3      	cbnz	r3, 8004204 <_dtoa_r+0x8f4>
 80041d6:	9b05      	ldr	r3, [sp, #20]
 80041d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041dc:	b993      	cbnz	r3, 8004204 <_dtoa_r+0x8f4>
 80041de:	9b05      	ldr	r3, [sp, #20]
 80041e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e4:	0d1b      	lsrs	r3, r3, #20
 80041e6:	051b      	lsls	r3, r3, #20
 80041e8:	b17b      	cbz	r3, 800420a <_dtoa_r+0x8fa>
 80041ea:	f04f 0801 	mov.w	r8, #1
 80041ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f0:	f109 0901 	add.w	r9, r9, #1
 80041f4:	3301      	adds	r3, #1
 80041f6:	9309      	str	r3, [sp, #36]	; 0x24
 80041f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f47f af6f 	bne.w	80040de <_dtoa_r+0x7ce>
 8004200:	2001      	movs	r0, #1
 8004202:	e774      	b.n	80040ee <_dtoa_r+0x7de>
 8004204:	f04f 0800 	mov.w	r8, #0
 8004208:	e7f6      	b.n	80041f8 <_dtoa_r+0x8e8>
 800420a:	4698      	mov	r8, r3
 800420c:	e7f4      	b.n	80041f8 <_dtoa_r+0x8e8>
 800420e:	d080      	beq.n	8004112 <_dtoa_r+0x802>
 8004210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004212:	331c      	adds	r3, #28
 8004214:	441a      	add	r2, r3
 8004216:	4499      	add	r9, r3
 8004218:	441f      	add	r7, r3
 800421a:	9209      	str	r2, [sp, #36]	; 0x24
 800421c:	e779      	b.n	8004112 <_dtoa_r+0x802>
 800421e:	4603      	mov	r3, r0
 8004220:	e7f6      	b.n	8004210 <_dtoa_r+0x900>
 8004222:	9b08      	ldr	r3, [sp, #32]
 8004224:	2b00      	cmp	r3, #0
 8004226:	dc34      	bgt.n	8004292 <_dtoa_r+0x982>
 8004228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800422a:	2b02      	cmp	r3, #2
 800422c:	dd31      	ble.n	8004292 <_dtoa_r+0x982>
 800422e:	9b08      	ldr	r3, [sp, #32]
 8004230:	9306      	str	r3, [sp, #24]
 8004232:	9b06      	ldr	r3, [sp, #24]
 8004234:	b963      	cbnz	r3, 8004250 <_dtoa_r+0x940>
 8004236:	4621      	mov	r1, r4
 8004238:	2205      	movs	r2, #5
 800423a:	4628      	mov	r0, r5
 800423c:	f000 faaa 	bl	8004794 <__multadd>
 8004240:	4601      	mov	r1, r0
 8004242:	4604      	mov	r4, r0
 8004244:	4650      	mov	r0, sl
 8004246:	f000 fcbd 	bl	8004bc4 <__mcmp>
 800424a:	2800      	cmp	r0, #0
 800424c:	f73f adbf 	bgt.w	8003dce <_dtoa_r+0x4be>
 8004250:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004252:	9f03      	ldr	r7, [sp, #12]
 8004254:	ea6f 0b03 	mvn.w	fp, r3
 8004258:	f04f 0800 	mov.w	r8, #0
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 fa76 	bl	8004750 <_Bfree>
 8004264:	2e00      	cmp	r6, #0
 8004266:	f43f aead 	beq.w	8003fc4 <_dtoa_r+0x6b4>
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d005      	beq.n	800427c <_dtoa_r+0x96c>
 8004270:	45b0      	cmp	r8, r6
 8004272:	d003      	beq.n	800427c <_dtoa_r+0x96c>
 8004274:	4641      	mov	r1, r8
 8004276:	4628      	mov	r0, r5
 8004278:	f000 fa6a 	bl	8004750 <_Bfree>
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	f000 fa66 	bl	8004750 <_Bfree>
 8004284:	e69e      	b.n	8003fc4 <_dtoa_r+0x6b4>
 8004286:	2400      	movs	r4, #0
 8004288:	4626      	mov	r6, r4
 800428a:	e7e1      	b.n	8004250 <_dtoa_r+0x940>
 800428c:	46c3      	mov	fp, r8
 800428e:	4626      	mov	r6, r4
 8004290:	e59d      	b.n	8003dce <_dtoa_r+0x4be>
 8004292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 80c8 	beq.w	800442a <_dtoa_r+0xb1a>
 800429a:	9b08      	ldr	r3, [sp, #32]
 800429c:	9306      	str	r3, [sp, #24]
 800429e:	2f00      	cmp	r7, #0
 80042a0:	dd05      	ble.n	80042ae <_dtoa_r+0x99e>
 80042a2:	4631      	mov	r1, r6
 80042a4:	463a      	mov	r2, r7
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 fc20 	bl	8004aec <__lshift>
 80042ac:	4606      	mov	r6, r0
 80042ae:	f1b8 0f00 	cmp.w	r8, #0
 80042b2:	d05b      	beq.n	800436c <_dtoa_r+0xa5c>
 80042b4:	4628      	mov	r0, r5
 80042b6:	6871      	ldr	r1, [r6, #4]
 80042b8:	f000 fa0a 	bl	80046d0 <_Balloc>
 80042bc:	4607      	mov	r7, r0
 80042be:	b928      	cbnz	r0, 80042cc <_dtoa_r+0x9bc>
 80042c0:	4602      	mov	r2, r0
 80042c2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80042c6:	4b81      	ldr	r3, [pc, #516]	; (80044cc <_dtoa_r+0xbbc>)
 80042c8:	f7ff bb36 	b.w	8003938 <_dtoa_r+0x28>
 80042cc:	6932      	ldr	r2, [r6, #16]
 80042ce:	f106 010c 	add.w	r1, r6, #12
 80042d2:	3202      	adds	r2, #2
 80042d4:	0092      	lsls	r2, r2, #2
 80042d6:	300c      	adds	r0, #12
 80042d8:	f000 feb0 	bl	800503c <memcpy>
 80042dc:	2201      	movs	r2, #1
 80042de:	4639      	mov	r1, r7
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fc03 	bl	8004aec <__lshift>
 80042e6:	46b0      	mov	r8, r6
 80042e8:	4606      	mov	r6, r0
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	9a03      	ldr	r2, [sp, #12]
 80042ee:	3301      	adds	r3, #1
 80042f0:	9308      	str	r3, [sp, #32]
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	4413      	add	r3, r2
 80042f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80042f8:	9b04      	ldr	r3, [sp, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004300:	9b08      	ldr	r3, [sp, #32]
 8004302:	4621      	mov	r1, r4
 8004304:	3b01      	subs	r3, #1
 8004306:	4650      	mov	r0, sl
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	f7ff fa76 	bl	80037fa <quorem>
 800430e:	4641      	mov	r1, r8
 8004310:	9006      	str	r0, [sp, #24]
 8004312:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004316:	4650      	mov	r0, sl
 8004318:	f000 fc54 	bl	8004bc4 <__mcmp>
 800431c:	4632      	mov	r2, r6
 800431e:	9009      	str	r0, [sp, #36]	; 0x24
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 fc6a 	bl	8004bfc <__mdiff>
 8004328:	68c2      	ldr	r2, [r0, #12]
 800432a:	4607      	mov	r7, r0
 800432c:	bb02      	cbnz	r2, 8004370 <_dtoa_r+0xa60>
 800432e:	4601      	mov	r1, r0
 8004330:	4650      	mov	r0, sl
 8004332:	f000 fc47 	bl	8004bc4 <__mcmp>
 8004336:	4602      	mov	r2, r0
 8004338:	4639      	mov	r1, r7
 800433a:	4628      	mov	r0, r5
 800433c:	920c      	str	r2, [sp, #48]	; 0x30
 800433e:	f000 fa07 	bl	8004750 <_Bfree>
 8004342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004346:	9f08      	ldr	r7, [sp, #32]
 8004348:	ea43 0102 	orr.w	r1, r3, r2
 800434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800434e:	4319      	orrs	r1, r3
 8004350:	d110      	bne.n	8004374 <_dtoa_r+0xa64>
 8004352:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004356:	d029      	beq.n	80043ac <_dtoa_r+0xa9c>
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	dd02      	ble.n	8004364 <_dtoa_r+0xa54>
 800435e:	9b06      	ldr	r3, [sp, #24]
 8004360:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004364:	9b04      	ldr	r3, [sp, #16]
 8004366:	f883 9000 	strb.w	r9, [r3]
 800436a:	e777      	b.n	800425c <_dtoa_r+0x94c>
 800436c:	4630      	mov	r0, r6
 800436e:	e7ba      	b.n	80042e6 <_dtoa_r+0x9d6>
 8004370:	2201      	movs	r2, #1
 8004372:	e7e1      	b.n	8004338 <_dtoa_r+0xa28>
 8004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	db04      	blt.n	8004384 <_dtoa_r+0xa74>
 800437a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800437c:	430b      	orrs	r3, r1
 800437e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004380:	430b      	orrs	r3, r1
 8004382:	d120      	bne.n	80043c6 <_dtoa_r+0xab6>
 8004384:	2a00      	cmp	r2, #0
 8004386:	dded      	ble.n	8004364 <_dtoa_r+0xa54>
 8004388:	4651      	mov	r1, sl
 800438a:	2201      	movs	r2, #1
 800438c:	4628      	mov	r0, r5
 800438e:	f000 fbad 	bl	8004aec <__lshift>
 8004392:	4621      	mov	r1, r4
 8004394:	4682      	mov	sl, r0
 8004396:	f000 fc15 	bl	8004bc4 <__mcmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	dc03      	bgt.n	80043a6 <_dtoa_r+0xa96>
 800439e:	d1e1      	bne.n	8004364 <_dtoa_r+0xa54>
 80043a0:	f019 0f01 	tst.w	r9, #1
 80043a4:	d0de      	beq.n	8004364 <_dtoa_r+0xa54>
 80043a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043aa:	d1d8      	bne.n	800435e <_dtoa_r+0xa4e>
 80043ac:	2339      	movs	r3, #57	; 0x39
 80043ae:	9a04      	ldr	r2, [sp, #16]
 80043b0:	7013      	strb	r3, [r2, #0]
 80043b2:	463b      	mov	r3, r7
 80043b4:	461f      	mov	r7, r3
 80043b6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	2a39      	cmp	r2, #57	; 0x39
 80043be:	d06b      	beq.n	8004498 <_dtoa_r+0xb88>
 80043c0:	3201      	adds	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e74a      	b.n	800425c <_dtoa_r+0x94c>
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	dd07      	ble.n	80043da <_dtoa_r+0xaca>
 80043ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043ce:	d0ed      	beq.n	80043ac <_dtoa_r+0xa9c>
 80043d0:	9a04      	ldr	r2, [sp, #16]
 80043d2:	f109 0301 	add.w	r3, r9, #1
 80043d6:	7013      	strb	r3, [r2, #0]
 80043d8:	e740      	b.n	800425c <_dtoa_r+0x94c>
 80043da:	9b08      	ldr	r3, [sp, #32]
 80043dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043de:	f803 9c01 	strb.w	r9, [r3, #-1]
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d042      	beq.n	800446c <_dtoa_r+0xb5c>
 80043e6:	4651      	mov	r1, sl
 80043e8:	2300      	movs	r3, #0
 80043ea:	220a      	movs	r2, #10
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 f9d1 	bl	8004794 <__multadd>
 80043f2:	45b0      	cmp	r8, r6
 80043f4:	4682      	mov	sl, r0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 020a 	mov.w	r2, #10
 80043fe:	4641      	mov	r1, r8
 8004400:	4628      	mov	r0, r5
 8004402:	d107      	bne.n	8004414 <_dtoa_r+0xb04>
 8004404:	f000 f9c6 	bl	8004794 <__multadd>
 8004408:	4680      	mov	r8, r0
 800440a:	4606      	mov	r6, r0
 800440c:	9b08      	ldr	r3, [sp, #32]
 800440e:	3301      	adds	r3, #1
 8004410:	9308      	str	r3, [sp, #32]
 8004412:	e775      	b.n	8004300 <_dtoa_r+0x9f0>
 8004414:	f000 f9be 	bl	8004794 <__multadd>
 8004418:	4631      	mov	r1, r6
 800441a:	4680      	mov	r8, r0
 800441c:	2300      	movs	r3, #0
 800441e:	220a      	movs	r2, #10
 8004420:	4628      	mov	r0, r5
 8004422:	f000 f9b7 	bl	8004794 <__multadd>
 8004426:	4606      	mov	r6, r0
 8004428:	e7f0      	b.n	800440c <_dtoa_r+0xafc>
 800442a:	9b08      	ldr	r3, [sp, #32]
 800442c:	9306      	str	r3, [sp, #24]
 800442e:	9f03      	ldr	r7, [sp, #12]
 8004430:	4621      	mov	r1, r4
 8004432:	4650      	mov	r0, sl
 8004434:	f7ff f9e1 	bl	80037fa <quorem>
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800443e:	f807 9b01 	strb.w	r9, [r7], #1
 8004442:	1afa      	subs	r2, r7, r3
 8004444:	9b06      	ldr	r3, [sp, #24]
 8004446:	4293      	cmp	r3, r2
 8004448:	dd07      	ble.n	800445a <_dtoa_r+0xb4a>
 800444a:	4651      	mov	r1, sl
 800444c:	2300      	movs	r3, #0
 800444e:	220a      	movs	r2, #10
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f99f 	bl	8004794 <__multadd>
 8004456:	4682      	mov	sl, r0
 8004458:	e7ea      	b.n	8004430 <_dtoa_r+0xb20>
 800445a:	9b06      	ldr	r3, [sp, #24]
 800445c:	f04f 0800 	mov.w	r8, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	bfcc      	ite	gt
 8004464:	461f      	movgt	r7, r3
 8004466:	2701      	movle	r7, #1
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	441f      	add	r7, r3
 800446c:	4651      	mov	r1, sl
 800446e:	2201      	movs	r2, #1
 8004470:	4628      	mov	r0, r5
 8004472:	f000 fb3b 	bl	8004aec <__lshift>
 8004476:	4621      	mov	r1, r4
 8004478:	4682      	mov	sl, r0
 800447a:	f000 fba3 	bl	8004bc4 <__mcmp>
 800447e:	2800      	cmp	r0, #0
 8004480:	dc97      	bgt.n	80043b2 <_dtoa_r+0xaa2>
 8004482:	d102      	bne.n	800448a <_dtoa_r+0xb7a>
 8004484:	f019 0f01 	tst.w	r9, #1
 8004488:	d193      	bne.n	80043b2 <_dtoa_r+0xaa2>
 800448a:	463b      	mov	r3, r7
 800448c:	461f      	mov	r7, r3
 800448e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004492:	2a30      	cmp	r2, #48	; 0x30
 8004494:	d0fa      	beq.n	800448c <_dtoa_r+0xb7c>
 8004496:	e6e1      	b.n	800425c <_dtoa_r+0x94c>
 8004498:	9a03      	ldr	r2, [sp, #12]
 800449a:	429a      	cmp	r2, r3
 800449c:	d18a      	bne.n	80043b4 <_dtoa_r+0xaa4>
 800449e:	2331      	movs	r3, #49	; 0x31
 80044a0:	f10b 0b01 	add.w	fp, fp, #1
 80044a4:	e797      	b.n	80043d6 <_dtoa_r+0xac6>
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <_dtoa_r+0xbc0>)
 80044a8:	f7ff ba9f 	b.w	80039ea <_dtoa_r+0xda>
 80044ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f47f aa77 	bne.w	80039a2 <_dtoa_r+0x92>
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <_dtoa_r+0xbc4>)
 80044b6:	f7ff ba98 	b.w	80039ea <_dtoa_r+0xda>
 80044ba:	9b06      	ldr	r3, [sp, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	dcb6      	bgt.n	800442e <_dtoa_r+0xb1e>
 80044c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f73f aeb5 	bgt.w	8004232 <_dtoa_r+0x922>
 80044c8:	e7b1      	b.n	800442e <_dtoa_r+0xb1e>
 80044ca:	bf00      	nop
 80044cc:	080055a2 	.word	0x080055a2
 80044d0:	08005502 	.word	0x08005502
 80044d4:	08005526 	.word	0x08005526

080044d8 <_free_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4605      	mov	r5, r0
 80044dc:	2900      	cmp	r1, #0
 80044de:	d040      	beq.n	8004562 <_free_r+0x8a>
 80044e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e4:	1f0c      	subs	r4, r1, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfb8      	it	lt
 80044ea:	18e4      	addlt	r4, r4, r3
 80044ec:	f000 f8e4 	bl	80046b8 <__malloc_lock>
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <_free_r+0x8c>)
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	b933      	cbnz	r3, 8004504 <_free_r+0x2c>
 80044f6:	6063      	str	r3, [r4, #4]
 80044f8:	6014      	str	r4, [r2, #0]
 80044fa:	4628      	mov	r0, r5
 80044fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004500:	f000 b8e0 	b.w	80046c4 <__malloc_unlock>
 8004504:	42a3      	cmp	r3, r4
 8004506:	d908      	bls.n	800451a <_free_r+0x42>
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	1821      	adds	r1, r4, r0
 800450c:	428b      	cmp	r3, r1
 800450e:	bf01      	itttt	eq
 8004510:	6819      	ldreq	r1, [r3, #0]
 8004512:	685b      	ldreq	r3, [r3, #4]
 8004514:	1809      	addeq	r1, r1, r0
 8004516:	6021      	streq	r1, [r4, #0]
 8004518:	e7ed      	b.n	80044f6 <_free_r+0x1e>
 800451a:	461a      	mov	r2, r3
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b10b      	cbz	r3, 8004524 <_free_r+0x4c>
 8004520:	42a3      	cmp	r3, r4
 8004522:	d9fa      	bls.n	800451a <_free_r+0x42>
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	1850      	adds	r0, r2, r1
 8004528:	42a0      	cmp	r0, r4
 800452a:	d10b      	bne.n	8004544 <_free_r+0x6c>
 800452c:	6820      	ldr	r0, [r4, #0]
 800452e:	4401      	add	r1, r0
 8004530:	1850      	adds	r0, r2, r1
 8004532:	4283      	cmp	r3, r0
 8004534:	6011      	str	r1, [r2, #0]
 8004536:	d1e0      	bne.n	80044fa <_free_r+0x22>
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4408      	add	r0, r1
 800453e:	6010      	str	r0, [r2, #0]
 8004540:	6053      	str	r3, [r2, #4]
 8004542:	e7da      	b.n	80044fa <_free_r+0x22>
 8004544:	d902      	bls.n	800454c <_free_r+0x74>
 8004546:	230c      	movs	r3, #12
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	e7d6      	b.n	80044fa <_free_r+0x22>
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	1821      	adds	r1, r4, r0
 8004550:	428b      	cmp	r3, r1
 8004552:	bf01      	itttt	eq
 8004554:	6819      	ldreq	r1, [r3, #0]
 8004556:	685b      	ldreq	r3, [r3, #4]
 8004558:	1809      	addeq	r1, r1, r0
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6054      	str	r4, [r2, #4]
 8004560:	e7cb      	b.n	80044fa <_free_r+0x22>
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	200003b0 	.word	0x200003b0

08004568 <malloc>:
 8004568:	4b02      	ldr	r3, [pc, #8]	; (8004574 <malloc+0xc>)
 800456a:	4601      	mov	r1, r0
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f000 b823 	b.w	80045b8 <_malloc_r>
 8004572:	bf00      	nop
 8004574:	20000064 	.word	0x20000064

08004578 <sbrk_aligned>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4e0e      	ldr	r6, [pc, #56]	; (80045b4 <sbrk_aligned+0x3c>)
 800457c:	460c      	mov	r4, r1
 800457e:	6831      	ldr	r1, [r6, #0]
 8004580:	4605      	mov	r5, r0
 8004582:	b911      	cbnz	r1, 800458a <sbrk_aligned+0x12>
 8004584:	f000 fd4a 	bl	800501c <_sbrk_r>
 8004588:	6030      	str	r0, [r6, #0]
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 fd45 	bl	800501c <_sbrk_r>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d00a      	beq.n	80045ac <sbrk_aligned+0x34>
 8004596:	1cc4      	adds	r4, r0, #3
 8004598:	f024 0403 	bic.w	r4, r4, #3
 800459c:	42a0      	cmp	r0, r4
 800459e:	d007      	beq.n	80045b0 <sbrk_aligned+0x38>
 80045a0:	1a21      	subs	r1, r4, r0
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 fd3a 	bl	800501c <_sbrk_r>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d101      	bne.n	80045b0 <sbrk_aligned+0x38>
 80045ac:	f04f 34ff 	mov.w	r4, #4294967295
 80045b0:	4620      	mov	r0, r4
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	200003b4 	.word	0x200003b4

080045b8 <_malloc_r>:
 80045b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045bc:	1ccd      	adds	r5, r1, #3
 80045be:	f025 0503 	bic.w	r5, r5, #3
 80045c2:	3508      	adds	r5, #8
 80045c4:	2d0c      	cmp	r5, #12
 80045c6:	bf38      	it	cc
 80045c8:	250c      	movcc	r5, #12
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	4607      	mov	r7, r0
 80045ce:	db01      	blt.n	80045d4 <_malloc_r+0x1c>
 80045d0:	42a9      	cmp	r1, r5
 80045d2:	d905      	bls.n	80045e0 <_malloc_r+0x28>
 80045d4:	230c      	movs	r3, #12
 80045d6:	2600      	movs	r6, #0
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4630      	mov	r0, r6
 80045dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046b4 <_malloc_r+0xfc>
 80045e4:	f000 f868 	bl	80046b8 <__malloc_lock>
 80045e8:	f8d8 3000 	ldr.w	r3, [r8]
 80045ec:	461c      	mov	r4, r3
 80045ee:	bb5c      	cbnz	r4, 8004648 <_malloc_r+0x90>
 80045f0:	4629      	mov	r1, r5
 80045f2:	4638      	mov	r0, r7
 80045f4:	f7ff ffc0 	bl	8004578 <sbrk_aligned>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	4604      	mov	r4, r0
 80045fc:	d155      	bne.n	80046aa <_malloc_r+0xf2>
 80045fe:	f8d8 4000 	ldr.w	r4, [r8]
 8004602:	4626      	mov	r6, r4
 8004604:	2e00      	cmp	r6, #0
 8004606:	d145      	bne.n	8004694 <_malloc_r+0xdc>
 8004608:	2c00      	cmp	r4, #0
 800460a:	d048      	beq.n	800469e <_malloc_r+0xe6>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	4631      	mov	r1, r6
 8004610:	4638      	mov	r0, r7
 8004612:	eb04 0903 	add.w	r9, r4, r3
 8004616:	f000 fd01 	bl	800501c <_sbrk_r>
 800461a:	4581      	cmp	r9, r0
 800461c:	d13f      	bne.n	800469e <_malloc_r+0xe6>
 800461e:	6821      	ldr	r1, [r4, #0]
 8004620:	4638      	mov	r0, r7
 8004622:	1a6d      	subs	r5, r5, r1
 8004624:	4629      	mov	r1, r5
 8004626:	f7ff ffa7 	bl	8004578 <sbrk_aligned>
 800462a:	3001      	adds	r0, #1
 800462c:	d037      	beq.n	800469e <_malloc_r+0xe6>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	442b      	add	r3, r5
 8004632:	6023      	str	r3, [r4, #0]
 8004634:	f8d8 3000 	ldr.w	r3, [r8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d038      	beq.n	80046ae <_malloc_r+0xf6>
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	42a2      	cmp	r2, r4
 8004640:	d12b      	bne.n	800469a <_malloc_r+0xe2>
 8004642:	2200      	movs	r2, #0
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e00f      	b.n	8004668 <_malloc_r+0xb0>
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	1b52      	subs	r2, r2, r5
 800464c:	d41f      	bmi.n	800468e <_malloc_r+0xd6>
 800464e:	2a0b      	cmp	r2, #11
 8004650:	d917      	bls.n	8004682 <_malloc_r+0xca>
 8004652:	1961      	adds	r1, r4, r5
 8004654:	42a3      	cmp	r3, r4
 8004656:	6025      	str	r5, [r4, #0]
 8004658:	bf18      	it	ne
 800465a:	6059      	strne	r1, [r3, #4]
 800465c:	6863      	ldr	r3, [r4, #4]
 800465e:	bf08      	it	eq
 8004660:	f8c8 1000 	streq.w	r1, [r8]
 8004664:	5162      	str	r2, [r4, r5]
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	4638      	mov	r0, r7
 800466a:	f104 060b 	add.w	r6, r4, #11
 800466e:	f000 f829 	bl	80046c4 <__malloc_unlock>
 8004672:	f026 0607 	bic.w	r6, r6, #7
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	1af2      	subs	r2, r6, r3
 800467a:	d0ae      	beq.n	80045da <_malloc_r+0x22>
 800467c:	1b9b      	subs	r3, r3, r6
 800467e:	50a3      	str	r3, [r4, r2]
 8004680:	e7ab      	b.n	80045da <_malloc_r+0x22>
 8004682:	42a3      	cmp	r3, r4
 8004684:	6862      	ldr	r2, [r4, #4]
 8004686:	d1dd      	bne.n	8004644 <_malloc_r+0x8c>
 8004688:	f8c8 2000 	str.w	r2, [r8]
 800468c:	e7ec      	b.n	8004668 <_malloc_r+0xb0>
 800468e:	4623      	mov	r3, r4
 8004690:	6864      	ldr	r4, [r4, #4]
 8004692:	e7ac      	b.n	80045ee <_malloc_r+0x36>
 8004694:	4634      	mov	r4, r6
 8004696:	6876      	ldr	r6, [r6, #4]
 8004698:	e7b4      	b.n	8004604 <_malloc_r+0x4c>
 800469a:	4613      	mov	r3, r2
 800469c:	e7cc      	b.n	8004638 <_malloc_r+0x80>
 800469e:	230c      	movs	r3, #12
 80046a0:	4638      	mov	r0, r7
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	f000 f80e 	bl	80046c4 <__malloc_unlock>
 80046a8:	e797      	b.n	80045da <_malloc_r+0x22>
 80046aa:	6025      	str	r5, [r4, #0]
 80046ac:	e7dc      	b.n	8004668 <_malloc_r+0xb0>
 80046ae:	605b      	str	r3, [r3, #4]
 80046b0:	deff      	udf	#255	; 0xff
 80046b2:	bf00      	nop
 80046b4:	200003b0 	.word	0x200003b0

080046b8 <__malloc_lock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__malloc_lock+0x8>)
 80046ba:	f7ff b88e 	b.w	80037da <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	200003ac 	.word	0x200003ac

080046c4 <__malloc_unlock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__malloc_unlock+0x8>)
 80046c6:	f7ff b889 	b.w	80037dc <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	200003ac 	.word	0x200003ac

080046d0 <_Balloc>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	69c6      	ldr	r6, [r0, #28]
 80046d4:	4604      	mov	r4, r0
 80046d6:	460d      	mov	r5, r1
 80046d8:	b976      	cbnz	r6, 80046f8 <_Balloc+0x28>
 80046da:	2010      	movs	r0, #16
 80046dc:	f7ff ff44 	bl	8004568 <malloc>
 80046e0:	4602      	mov	r2, r0
 80046e2:	61e0      	str	r0, [r4, #28]
 80046e4:	b920      	cbnz	r0, 80046f0 <_Balloc+0x20>
 80046e6:	216b      	movs	r1, #107	; 0x6b
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <_Balloc+0x78>)
 80046ea:	4818      	ldr	r0, [pc, #96]	; (800474c <_Balloc+0x7c>)
 80046ec:	f000 fcb4 	bl	8005058 <__assert_func>
 80046f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046f4:	6006      	str	r6, [r0, #0]
 80046f6:	60c6      	str	r6, [r0, #12]
 80046f8:	69e6      	ldr	r6, [r4, #28]
 80046fa:	68f3      	ldr	r3, [r6, #12]
 80046fc:	b183      	cbz	r3, 8004720 <_Balloc+0x50>
 80046fe:	69e3      	ldr	r3, [r4, #28]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004706:	b9b8      	cbnz	r0, 8004738 <_Balloc+0x68>
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f605 	lsl.w	r6, r1, r5
 800470e:	1d72      	adds	r2, r6, #5
 8004710:	4620      	mov	r0, r4
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	f000 fcbe 	bl	8005094 <_calloc_r>
 8004718:	b160      	cbz	r0, 8004734 <_Balloc+0x64>
 800471a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800471e:	e00e      	b.n	800473e <_Balloc+0x6e>
 8004720:	2221      	movs	r2, #33	; 0x21
 8004722:	2104      	movs	r1, #4
 8004724:	4620      	mov	r0, r4
 8004726:	f000 fcb5 	bl	8005094 <_calloc_r>
 800472a:	69e3      	ldr	r3, [r4, #28]
 800472c:	60f0      	str	r0, [r6, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e4      	bne.n	80046fe <_Balloc+0x2e>
 8004734:	2000      	movs	r0, #0
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	6802      	ldr	r2, [r0, #0]
 800473a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800473e:	2300      	movs	r3, #0
 8004740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004744:	e7f7      	b.n	8004736 <_Balloc+0x66>
 8004746:	bf00      	nop
 8004748:	08005533 	.word	0x08005533
 800474c:	080055b3 	.word	0x080055b3

08004750 <_Bfree>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	69c6      	ldr	r6, [r0, #28]
 8004754:	4605      	mov	r5, r0
 8004756:	460c      	mov	r4, r1
 8004758:	b976      	cbnz	r6, 8004778 <_Bfree+0x28>
 800475a:	2010      	movs	r0, #16
 800475c:	f7ff ff04 	bl	8004568 <malloc>
 8004760:	4602      	mov	r2, r0
 8004762:	61e8      	str	r0, [r5, #28]
 8004764:	b920      	cbnz	r0, 8004770 <_Bfree+0x20>
 8004766:	218f      	movs	r1, #143	; 0x8f
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <_Bfree+0x3c>)
 800476a:	4809      	ldr	r0, [pc, #36]	; (8004790 <_Bfree+0x40>)
 800476c:	f000 fc74 	bl	8005058 <__assert_func>
 8004770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004774:	6006      	str	r6, [r0, #0]
 8004776:	60c6      	str	r6, [r0, #12]
 8004778:	b13c      	cbz	r4, 800478a <_Bfree+0x3a>
 800477a:	69eb      	ldr	r3, [r5, #28]
 800477c:	6862      	ldr	r2, [r4, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004784:	6021      	str	r1, [r4, #0]
 8004786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	08005533 	.word	0x08005533
 8004790:	080055b3 	.word	0x080055b3

08004794 <__multadd>:
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	4607      	mov	r7, r0
 800479a:	460c      	mov	r4, r1
 800479c:	461e      	mov	r6, r3
 800479e:	2000      	movs	r0, #0
 80047a0:	690d      	ldr	r5, [r1, #16]
 80047a2:	f101 0c14 	add.w	ip, r1, #20
 80047a6:	f8dc 3000 	ldr.w	r3, [ip]
 80047aa:	3001      	adds	r0, #1
 80047ac:	b299      	uxth	r1, r3
 80047ae:	fb02 6101 	mla	r1, r2, r1, r6
 80047b2:	0c1e      	lsrs	r6, r3, #16
 80047b4:	0c0b      	lsrs	r3, r1, #16
 80047b6:	fb02 3306 	mla	r3, r2, r6, r3
 80047ba:	b289      	uxth	r1, r1
 80047bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047c0:	4285      	cmp	r5, r0
 80047c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047c6:	f84c 1b04 	str.w	r1, [ip], #4
 80047ca:	dcec      	bgt.n	80047a6 <__multadd+0x12>
 80047cc:	b30e      	cbz	r6, 8004812 <__multadd+0x7e>
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	42ab      	cmp	r3, r5
 80047d2:	dc19      	bgt.n	8004808 <__multadd+0x74>
 80047d4:	6861      	ldr	r1, [r4, #4]
 80047d6:	4638      	mov	r0, r7
 80047d8:	3101      	adds	r1, #1
 80047da:	f7ff ff79 	bl	80046d0 <_Balloc>
 80047de:	4680      	mov	r8, r0
 80047e0:	b928      	cbnz	r0, 80047ee <__multadd+0x5a>
 80047e2:	4602      	mov	r2, r0
 80047e4:	21ba      	movs	r1, #186	; 0xba
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <__multadd+0x84>)
 80047e8:	480c      	ldr	r0, [pc, #48]	; (800481c <__multadd+0x88>)
 80047ea:	f000 fc35 	bl	8005058 <__assert_func>
 80047ee:	6922      	ldr	r2, [r4, #16]
 80047f0:	f104 010c 	add.w	r1, r4, #12
 80047f4:	3202      	adds	r2, #2
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	300c      	adds	r0, #12
 80047fa:	f000 fc1f 	bl	800503c <memcpy>
 80047fe:	4621      	mov	r1, r4
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ffa5 	bl	8004750 <_Bfree>
 8004806:	4644      	mov	r4, r8
 8004808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800480c:	3501      	adds	r5, #1
 800480e:	615e      	str	r6, [r3, #20]
 8004810:	6125      	str	r5, [r4, #16]
 8004812:	4620      	mov	r0, r4
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	080055a2 	.word	0x080055a2
 800481c:	080055b3 	.word	0x080055b3

08004820 <__hi0bits>:
 8004820:	0c02      	lsrs	r2, r0, #16
 8004822:	0412      	lsls	r2, r2, #16
 8004824:	4603      	mov	r3, r0
 8004826:	b9ca      	cbnz	r2, 800485c <__hi0bits+0x3c>
 8004828:	0403      	lsls	r3, r0, #16
 800482a:	2010      	movs	r0, #16
 800482c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004830:	bf04      	itt	eq
 8004832:	021b      	lsleq	r3, r3, #8
 8004834:	3008      	addeq	r0, #8
 8004836:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800483a:	bf04      	itt	eq
 800483c:	011b      	lsleq	r3, r3, #4
 800483e:	3004      	addeq	r0, #4
 8004840:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004844:	bf04      	itt	eq
 8004846:	009b      	lsleq	r3, r3, #2
 8004848:	3002      	addeq	r0, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	db05      	blt.n	800485a <__hi0bits+0x3a>
 800484e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004852:	f100 0001 	add.w	r0, r0, #1
 8004856:	bf08      	it	eq
 8004858:	2020      	moveq	r0, #32
 800485a:	4770      	bx	lr
 800485c:	2000      	movs	r0, #0
 800485e:	e7e5      	b.n	800482c <__hi0bits+0xc>

08004860 <__lo0bits>:
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	4602      	mov	r2, r0
 8004864:	f013 0007 	ands.w	r0, r3, #7
 8004868:	d00b      	beq.n	8004882 <__lo0bits+0x22>
 800486a:	07d9      	lsls	r1, r3, #31
 800486c:	d421      	bmi.n	80048b2 <__lo0bits+0x52>
 800486e:	0798      	lsls	r0, r3, #30
 8004870:	bf49      	itett	mi
 8004872:	085b      	lsrmi	r3, r3, #1
 8004874:	089b      	lsrpl	r3, r3, #2
 8004876:	2001      	movmi	r0, #1
 8004878:	6013      	strmi	r3, [r2, #0]
 800487a:	bf5c      	itt	pl
 800487c:	2002      	movpl	r0, #2
 800487e:	6013      	strpl	r3, [r2, #0]
 8004880:	4770      	bx	lr
 8004882:	b299      	uxth	r1, r3
 8004884:	b909      	cbnz	r1, 800488a <__lo0bits+0x2a>
 8004886:	2010      	movs	r0, #16
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	b2d9      	uxtb	r1, r3
 800488c:	b909      	cbnz	r1, 8004892 <__lo0bits+0x32>
 800488e:	3008      	adds	r0, #8
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	0719      	lsls	r1, r3, #28
 8004894:	bf04      	itt	eq
 8004896:	091b      	lsreq	r3, r3, #4
 8004898:	3004      	addeq	r0, #4
 800489a:	0799      	lsls	r1, r3, #30
 800489c:	bf04      	itt	eq
 800489e:	089b      	lsreq	r3, r3, #2
 80048a0:	3002      	addeq	r0, #2
 80048a2:	07d9      	lsls	r1, r3, #31
 80048a4:	d403      	bmi.n	80048ae <__lo0bits+0x4e>
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	f100 0001 	add.w	r0, r0, #1
 80048ac:	d003      	beq.n	80048b6 <__lo0bits+0x56>
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4770      	bx	lr
 80048b2:	2000      	movs	r0, #0
 80048b4:	4770      	bx	lr
 80048b6:	2020      	movs	r0, #32
 80048b8:	4770      	bx	lr
	...

080048bc <__i2b>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	460c      	mov	r4, r1
 80048c0:	2101      	movs	r1, #1
 80048c2:	f7ff ff05 	bl	80046d0 <_Balloc>
 80048c6:	4602      	mov	r2, r0
 80048c8:	b928      	cbnz	r0, 80048d6 <__i2b+0x1a>
 80048ca:	f240 1145 	movw	r1, #325	; 0x145
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <__i2b+0x24>)
 80048d0:	4804      	ldr	r0, [pc, #16]	; (80048e4 <__i2b+0x28>)
 80048d2:	f000 fbc1 	bl	8005058 <__assert_func>
 80048d6:	2301      	movs	r3, #1
 80048d8:	6144      	str	r4, [r0, #20]
 80048da:	6103      	str	r3, [r0, #16]
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	080055a2 	.word	0x080055a2
 80048e4:	080055b3 	.word	0x080055b3

080048e8 <__multiply>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	4691      	mov	r9, r2
 80048ee:	690a      	ldr	r2, [r1, #16]
 80048f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048f4:	460c      	mov	r4, r1
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bfbe      	ittt	lt
 80048fa:	460b      	movlt	r3, r1
 80048fc:	464c      	movlt	r4, r9
 80048fe:	4699      	movlt	r9, r3
 8004900:	6927      	ldr	r7, [r4, #16]
 8004902:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004906:	68a3      	ldr	r3, [r4, #8]
 8004908:	6861      	ldr	r1, [r4, #4]
 800490a:	eb07 060a 	add.w	r6, r7, sl
 800490e:	42b3      	cmp	r3, r6
 8004910:	b085      	sub	sp, #20
 8004912:	bfb8      	it	lt
 8004914:	3101      	addlt	r1, #1
 8004916:	f7ff fedb 	bl	80046d0 <_Balloc>
 800491a:	b930      	cbnz	r0, 800492a <__multiply+0x42>
 800491c:	4602      	mov	r2, r0
 800491e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004922:	4b43      	ldr	r3, [pc, #268]	; (8004a30 <__multiply+0x148>)
 8004924:	4843      	ldr	r0, [pc, #268]	; (8004a34 <__multiply+0x14c>)
 8004926:	f000 fb97 	bl	8005058 <__assert_func>
 800492a:	f100 0514 	add.w	r5, r0, #20
 800492e:	462b      	mov	r3, r5
 8004930:	2200      	movs	r2, #0
 8004932:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004936:	4543      	cmp	r3, r8
 8004938:	d321      	bcc.n	800497e <__multiply+0x96>
 800493a:	f104 0314 	add.w	r3, r4, #20
 800493e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004942:	f109 0314 	add.w	r3, r9, #20
 8004946:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800494a:	9202      	str	r2, [sp, #8]
 800494c:	1b3a      	subs	r2, r7, r4
 800494e:	3a15      	subs	r2, #21
 8004950:	f022 0203 	bic.w	r2, r2, #3
 8004954:	3204      	adds	r2, #4
 8004956:	f104 0115 	add.w	r1, r4, #21
 800495a:	428f      	cmp	r7, r1
 800495c:	bf38      	it	cc
 800495e:	2204      	movcc	r2, #4
 8004960:	9201      	str	r2, [sp, #4]
 8004962:	9a02      	ldr	r2, [sp, #8]
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	429a      	cmp	r2, r3
 8004968:	d80c      	bhi.n	8004984 <__multiply+0x9c>
 800496a:	2e00      	cmp	r6, #0
 800496c:	dd03      	ble.n	8004976 <__multiply+0x8e>
 800496e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004972:	2b00      	cmp	r3, #0
 8004974:	d05a      	beq.n	8004a2c <__multiply+0x144>
 8004976:	6106      	str	r6, [r0, #16]
 8004978:	b005      	add	sp, #20
 800497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497e:	f843 2b04 	str.w	r2, [r3], #4
 8004982:	e7d8      	b.n	8004936 <__multiply+0x4e>
 8004984:	f8b3 a000 	ldrh.w	sl, [r3]
 8004988:	f1ba 0f00 	cmp.w	sl, #0
 800498c:	d023      	beq.n	80049d6 <__multiply+0xee>
 800498e:	46a9      	mov	r9, r5
 8004990:	f04f 0c00 	mov.w	ip, #0
 8004994:	f104 0e14 	add.w	lr, r4, #20
 8004998:	f85e 2b04 	ldr.w	r2, [lr], #4
 800499c:	f8d9 1000 	ldr.w	r1, [r9]
 80049a0:	fa1f fb82 	uxth.w	fp, r2
 80049a4:	b289      	uxth	r1, r1
 80049a6:	fb0a 110b 	mla	r1, sl, fp, r1
 80049aa:	4461      	add	r1, ip
 80049ac:	f8d9 c000 	ldr.w	ip, [r9]
 80049b0:	0c12      	lsrs	r2, r2, #16
 80049b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80049b6:	fb0a c202 	mla	r2, sl, r2, ip
 80049ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049be:	b289      	uxth	r1, r1
 80049c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049c4:	4577      	cmp	r7, lr
 80049c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049ca:	f849 1b04 	str.w	r1, [r9], #4
 80049ce:	d8e3      	bhi.n	8004998 <__multiply+0xb0>
 80049d0:	9a01      	ldr	r2, [sp, #4]
 80049d2:	f845 c002 	str.w	ip, [r5, r2]
 80049d6:	9a03      	ldr	r2, [sp, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049de:	f1b9 0f00 	cmp.w	r9, #0
 80049e2:	d021      	beq.n	8004a28 <__multiply+0x140>
 80049e4:	46ae      	mov	lr, r5
 80049e6:	f04f 0a00 	mov.w	sl, #0
 80049ea:	6829      	ldr	r1, [r5, #0]
 80049ec:	f104 0c14 	add.w	ip, r4, #20
 80049f0:	f8bc b000 	ldrh.w	fp, [ip]
 80049f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049f8:	b289      	uxth	r1, r1
 80049fa:	fb09 220b 	mla	r2, r9, fp, r2
 80049fe:	4452      	add	r2, sl
 8004a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a04:	f84e 1b04 	str.w	r1, [lr], #4
 8004a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a10:	f8be 1000 	ldrh.w	r1, [lr]
 8004a14:	4567      	cmp	r7, ip
 8004a16:	fb09 110a 	mla	r1, r9, sl, r1
 8004a1a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a22:	d8e5      	bhi.n	80049f0 <__multiply+0x108>
 8004a24:	9a01      	ldr	r2, [sp, #4]
 8004a26:	50a9      	str	r1, [r5, r2]
 8004a28:	3504      	adds	r5, #4
 8004a2a:	e79a      	b.n	8004962 <__multiply+0x7a>
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	e79c      	b.n	800496a <__multiply+0x82>
 8004a30:	080055a2 	.word	0x080055a2
 8004a34:	080055b3 	.word	0x080055b3

08004a38 <__pow5mult>:
 8004a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	f012 0203 	ands.w	r2, r2, #3
 8004a42:	4606      	mov	r6, r0
 8004a44:	460f      	mov	r7, r1
 8004a46:	d007      	beq.n	8004a58 <__pow5mult+0x20>
 8004a48:	4c25      	ldr	r4, [pc, #148]	; (8004ae0 <__pow5mult+0xa8>)
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a52:	f7ff fe9f 	bl	8004794 <__multadd>
 8004a56:	4607      	mov	r7, r0
 8004a58:	10ad      	asrs	r5, r5, #2
 8004a5a:	d03d      	beq.n	8004ad8 <__pow5mult+0xa0>
 8004a5c:	69f4      	ldr	r4, [r6, #28]
 8004a5e:	b97c      	cbnz	r4, 8004a80 <__pow5mult+0x48>
 8004a60:	2010      	movs	r0, #16
 8004a62:	f7ff fd81 	bl	8004568 <malloc>
 8004a66:	4602      	mov	r2, r0
 8004a68:	61f0      	str	r0, [r6, #28]
 8004a6a:	b928      	cbnz	r0, 8004a78 <__pow5mult+0x40>
 8004a6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <__pow5mult+0xac>)
 8004a72:	481d      	ldr	r0, [pc, #116]	; (8004ae8 <__pow5mult+0xb0>)
 8004a74:	f000 faf0 	bl	8005058 <__assert_func>
 8004a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a7c:	6004      	str	r4, [r0, #0]
 8004a7e:	60c4      	str	r4, [r0, #12]
 8004a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a88:	b94c      	cbnz	r4, 8004a9e <__pow5mult+0x66>
 8004a8a:	f240 2171 	movw	r1, #625	; 0x271
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ff14 	bl	80048bc <__i2b>
 8004a94:	2300      	movs	r3, #0
 8004a96:	4604      	mov	r4, r0
 8004a98:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a9c:	6003      	str	r3, [r0, #0]
 8004a9e:	f04f 0900 	mov.w	r9, #0
 8004aa2:	07eb      	lsls	r3, r5, #31
 8004aa4:	d50a      	bpl.n	8004abc <__pow5mult+0x84>
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ff1c 	bl	80048e8 <__multiply>
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff fe4b 	bl	8004750 <_Bfree>
 8004aba:	4647      	mov	r7, r8
 8004abc:	106d      	asrs	r5, r5, #1
 8004abe:	d00b      	beq.n	8004ad8 <__pow5mult+0xa0>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	b938      	cbnz	r0, 8004ad4 <__pow5mult+0x9c>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff ff0d 	bl	80048e8 <__multiply>
 8004ace:	6020      	str	r0, [r4, #0]
 8004ad0:	f8c0 9000 	str.w	r9, [r0]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	e7e4      	b.n	8004aa2 <__pow5mult+0x6a>
 8004ad8:	4638      	mov	r0, r7
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	bf00      	nop
 8004ae0:	08005700 	.word	0x08005700
 8004ae4:	08005533 	.word	0x08005533
 8004ae8:	080055b3 	.word	0x080055b3

08004aec <__lshift>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	460c      	mov	r4, r1
 8004af2:	4607      	mov	r7, r0
 8004af4:	4691      	mov	r9, r2
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6849      	ldr	r1, [r1, #4]
 8004afa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b04:	f108 0601 	add.w	r6, r8, #1
 8004b08:	42b3      	cmp	r3, r6
 8004b0a:	db0b      	blt.n	8004b24 <__lshift+0x38>
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f7ff fddf 	bl	80046d0 <_Balloc>
 8004b12:	4605      	mov	r5, r0
 8004b14:	b948      	cbnz	r0, 8004b2a <__lshift+0x3e>
 8004b16:	4602      	mov	r2, r0
 8004b18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <__lshift+0xd0>)
 8004b1e:	4828      	ldr	r0, [pc, #160]	; (8004bc0 <__lshift+0xd4>)
 8004b20:	f000 fa9a 	bl	8005058 <__assert_func>
 8004b24:	3101      	adds	r1, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	e7ee      	b.n	8004b08 <__lshift+0x1c>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f100 0114 	add.w	r1, r0, #20
 8004b30:	f100 0210 	add.w	r2, r0, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	4553      	cmp	r3, sl
 8004b38:	db33      	blt.n	8004ba2 <__lshift+0xb6>
 8004b3a:	6920      	ldr	r0, [r4, #16]
 8004b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b40:	f104 0314 	add.w	r3, r4, #20
 8004b44:	f019 091f 	ands.w	r9, r9, #31
 8004b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b50:	d02b      	beq.n	8004baa <__lshift+0xbe>
 8004b52:	468a      	mov	sl, r1
 8004b54:	2200      	movs	r2, #0
 8004b56:	f1c9 0e20 	rsb	lr, r9, #32
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8004b60:	4310      	orrs	r0, r2
 8004b62:	f84a 0b04 	str.w	r0, [sl], #4
 8004b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6a:	459c      	cmp	ip, r3
 8004b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b70:	d8f3      	bhi.n	8004b5a <__lshift+0x6e>
 8004b72:	ebac 0304 	sub.w	r3, ip, r4
 8004b76:	3b15      	subs	r3, #21
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	f104 0015 	add.w	r0, r4, #21
 8004b82:	4584      	cmp	ip, r0
 8004b84:	bf38      	it	cc
 8004b86:	2304      	movcc	r3, #4
 8004b88:	50ca      	str	r2, [r1, r3]
 8004b8a:	b10a      	cbz	r2, 8004b90 <__lshift+0xa4>
 8004b8c:	f108 0602 	add.w	r6, r8, #2
 8004b90:	3e01      	subs	r6, #1
 8004b92:	4638      	mov	r0, r7
 8004b94:	4621      	mov	r1, r4
 8004b96:	612e      	str	r6, [r5, #16]
 8004b98:	f7ff fdda 	bl	8004750 <_Bfree>
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	e7c5      	b.n	8004b36 <__lshift+0x4a>
 8004baa:	3904      	subs	r1, #4
 8004bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb0:	459c      	cmp	ip, r3
 8004bb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bb6:	d8f9      	bhi.n	8004bac <__lshift+0xc0>
 8004bb8:	e7ea      	b.n	8004b90 <__lshift+0xa4>
 8004bba:	bf00      	nop
 8004bbc:	080055a2 	.word	0x080055a2
 8004bc0:	080055b3 	.word	0x080055b3

08004bc4 <__mcmp>:
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	690a      	ldr	r2, [r1, #16]
 8004bc8:	6900      	ldr	r0, [r0, #16]
 8004bca:	b530      	push	{r4, r5, lr}
 8004bcc:	1a80      	subs	r0, r0, r2
 8004bce:	d10d      	bne.n	8004bec <__mcmp+0x28>
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	3114      	adds	r1, #20
 8004bd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004bdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004be0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004be4:	4295      	cmp	r5, r2
 8004be6:	d002      	beq.n	8004bee <__mcmp+0x2a>
 8004be8:	d304      	bcc.n	8004bf4 <__mcmp+0x30>
 8004bea:	2001      	movs	r0, #1
 8004bec:	bd30      	pop	{r4, r5, pc}
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	d3f4      	bcc.n	8004bdc <__mcmp+0x18>
 8004bf2:	e7fb      	b.n	8004bec <__mcmp+0x28>
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	e7f8      	b.n	8004bec <__mcmp+0x28>
	...

08004bfc <__mdiff>:
 8004bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	460d      	mov	r5, r1
 8004c02:	4607      	mov	r7, r0
 8004c04:	4611      	mov	r1, r2
 8004c06:	4628      	mov	r0, r5
 8004c08:	4614      	mov	r4, r2
 8004c0a:	f7ff ffdb 	bl	8004bc4 <__mcmp>
 8004c0e:	1e06      	subs	r6, r0, #0
 8004c10:	d111      	bne.n	8004c36 <__mdiff+0x3a>
 8004c12:	4631      	mov	r1, r6
 8004c14:	4638      	mov	r0, r7
 8004c16:	f7ff fd5b 	bl	80046d0 <_Balloc>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	b928      	cbnz	r0, 8004c2a <__mdiff+0x2e>
 8004c1e:	f240 2137 	movw	r1, #567	; 0x237
 8004c22:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <__mdiff+0x110>)
 8004c24:	483a      	ldr	r0, [pc, #232]	; (8004d10 <__mdiff+0x114>)
 8004c26:	f000 fa17 	bl	8005058 <__assert_func>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c30:	4610      	mov	r0, r2
 8004c32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c36:	bfa4      	itt	ge
 8004c38:	4623      	movge	r3, r4
 8004c3a:	462c      	movge	r4, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	6861      	ldr	r1, [r4, #4]
 8004c40:	bfa6      	itte	ge
 8004c42:	461d      	movge	r5, r3
 8004c44:	2600      	movge	r6, #0
 8004c46:	2601      	movlt	r6, #1
 8004c48:	f7ff fd42 	bl	80046d0 <_Balloc>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	b918      	cbnz	r0, 8004c58 <__mdiff+0x5c>
 8004c50:	f240 2145 	movw	r1, #581	; 0x245
 8004c54:	4b2d      	ldr	r3, [pc, #180]	; (8004d0c <__mdiff+0x110>)
 8004c56:	e7e5      	b.n	8004c24 <__mdiff+0x28>
 8004c58:	f102 0814 	add.w	r8, r2, #20
 8004c5c:	46c2      	mov	sl, r8
 8004c5e:	f04f 0c00 	mov.w	ip, #0
 8004c62:	6927      	ldr	r7, [r4, #16]
 8004c64:	60c6      	str	r6, [r0, #12]
 8004c66:	692e      	ldr	r6, [r5, #16]
 8004c68:	f104 0014 	add.w	r0, r4, #20
 8004c6c:	f105 0914 	add.w	r9, r5, #20
 8004c70:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004c74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c78:	3410      	adds	r4, #16
 8004c7a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004c7e:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c82:	fa1f f18b 	uxth.w	r1, fp
 8004c86:	4461      	add	r1, ip
 8004c88:	fa1f fc83 	uxth.w	ip, r3
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	eba1 010c 	sub.w	r1, r1, ip
 8004c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c96:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c9a:	b289      	uxth	r1, r1
 8004c9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004ca0:	454e      	cmp	r6, r9
 8004ca2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ca6:	f84a 1b04 	str.w	r1, [sl], #4
 8004caa:	d8e6      	bhi.n	8004c7a <__mdiff+0x7e>
 8004cac:	1b73      	subs	r3, r6, r5
 8004cae:	3b15      	subs	r3, #21
 8004cb0:	f023 0303 	bic.w	r3, r3, #3
 8004cb4:	3515      	adds	r5, #21
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	42ae      	cmp	r6, r5
 8004cba:	bf38      	it	cc
 8004cbc:	2304      	movcc	r3, #4
 8004cbe:	4418      	add	r0, r3
 8004cc0:	4443      	add	r3, r8
 8004cc2:	461e      	mov	r6, r3
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	4575      	cmp	r5, lr
 8004cc8:	d30e      	bcc.n	8004ce8 <__mdiff+0xec>
 8004cca:	f10e 0103 	add.w	r1, lr, #3
 8004cce:	1a09      	subs	r1, r1, r0
 8004cd0:	f021 0103 	bic.w	r1, r1, #3
 8004cd4:	3803      	subs	r0, #3
 8004cd6:	4586      	cmp	lr, r0
 8004cd8:	bf38      	it	cc
 8004cda:	2100      	movcc	r1, #0
 8004cdc:	440b      	add	r3, r1
 8004cde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ce2:	b189      	cbz	r1, 8004d08 <__mdiff+0x10c>
 8004ce4:	6117      	str	r7, [r2, #16]
 8004ce6:	e7a3      	b.n	8004c30 <__mdiff+0x34>
 8004ce8:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cec:	fa1f f188 	uxth.w	r1, r8
 8004cf0:	4461      	add	r1, ip
 8004cf2:	140c      	asrs	r4, r1, #16
 8004cf4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cf8:	b289      	uxth	r1, r1
 8004cfa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004cfe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004d02:	f846 1b04 	str.w	r1, [r6], #4
 8004d06:	e7de      	b.n	8004cc6 <__mdiff+0xca>
 8004d08:	3f01      	subs	r7, #1
 8004d0a:	e7e8      	b.n	8004cde <__mdiff+0xe2>
 8004d0c:	080055a2 	.word	0x080055a2
 8004d10:	080055b3 	.word	0x080055b3

08004d14 <__d2b>:
 8004d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d16:	2101      	movs	r1, #1
 8004d18:	4617      	mov	r7, r2
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	9e08      	ldr	r6, [sp, #32]
 8004d1e:	f7ff fcd7 	bl	80046d0 <_Balloc>
 8004d22:	4605      	mov	r5, r0
 8004d24:	b930      	cbnz	r0, 8004d34 <__d2b+0x20>
 8004d26:	4602      	mov	r2, r0
 8004d28:	f240 310f 	movw	r1, #783	; 0x30f
 8004d2c:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <__d2b+0xa4>)
 8004d2e:	4823      	ldr	r0, [pc, #140]	; (8004dbc <__d2b+0xa8>)
 8004d30:	f000 f992 	bl	8005058 <__assert_func>
 8004d34:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004d38:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004d3c:	bb24      	cbnz	r4, 8004d88 <__d2b+0x74>
 8004d3e:	2f00      	cmp	r7, #0
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	d026      	beq.n	8004d92 <__d2b+0x7e>
 8004d44:	4668      	mov	r0, sp
 8004d46:	9700      	str	r7, [sp, #0]
 8004d48:	f7ff fd8a 	bl	8004860 <__lo0bits>
 8004d4c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004d50:	b1e8      	cbz	r0, 8004d8e <__d2b+0x7a>
 8004d52:	f1c0 0320 	rsb	r3, r0, #32
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	40c2      	lsrs	r2, r0
 8004d5e:	616b      	str	r3, [r5, #20]
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	9b01      	ldr	r3, [sp, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf14      	ite	ne
 8004d68:	2102      	movne	r1, #2
 8004d6a:	2101      	moveq	r1, #1
 8004d6c:	61ab      	str	r3, [r5, #24]
 8004d6e:	6129      	str	r1, [r5, #16]
 8004d70:	b1bc      	cbz	r4, 8004da2 <__d2b+0x8e>
 8004d72:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004d76:	4404      	add	r4, r0
 8004d78:	6034      	str	r4, [r6, #0]
 8004d7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d80:	6018      	str	r0, [r3, #0]
 8004d82:	4628      	mov	r0, r5
 8004d84:	b003      	add	sp, #12
 8004d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8c:	e7d7      	b.n	8004d3e <__d2b+0x2a>
 8004d8e:	6169      	str	r1, [r5, #20]
 8004d90:	e7e7      	b.n	8004d62 <__d2b+0x4e>
 8004d92:	a801      	add	r0, sp, #4
 8004d94:	f7ff fd64 	bl	8004860 <__lo0bits>
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	616b      	str	r3, [r5, #20]
 8004d9e:	3020      	adds	r0, #32
 8004da0:	e7e5      	b.n	8004d6e <__d2b+0x5a>
 8004da2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004da6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8004daa:	6030      	str	r0, [r6, #0]
 8004dac:	6918      	ldr	r0, [r3, #16]
 8004dae:	f7ff fd37 	bl	8004820 <__hi0bits>
 8004db2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004db6:	e7e2      	b.n	8004d7e <__d2b+0x6a>
 8004db8:	080055a2 	.word	0x080055a2
 8004dbc:	080055b3 	.word	0x080055b3

08004dc0 <__sflush_r>:
 8004dc0:	898a      	ldrh	r2, [r1, #12]
 8004dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	0710      	lsls	r0, r2, #28
 8004dc8:	460c      	mov	r4, r1
 8004dca:	d457      	bmi.n	8004e7c <__sflush_r+0xbc>
 8004dcc:	684b      	ldr	r3, [r1, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	dc04      	bgt.n	8004ddc <__sflush_r+0x1c>
 8004dd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	dc01      	bgt.n	8004ddc <__sflush_r+0x1c>
 8004dd8:	2000      	movs	r0, #0
 8004dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	d0fa      	beq.n	8004dd8 <__sflush_r+0x18>
 8004de2:	2300      	movs	r3, #0
 8004de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004de8:	682f      	ldr	r7, [r5, #0]
 8004dea:	6a21      	ldr	r1, [r4, #32]
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	d032      	beq.n	8004e56 <__sflush_r+0x96>
 8004df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	075a      	lsls	r2, r3, #29
 8004df6:	d505      	bpl.n	8004e04 <__sflush_r+0x44>
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	1ac0      	subs	r0, r0, r3
 8004dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dfe:	b10b      	cbz	r3, 8004e04 <__sflush_r+0x44>
 8004e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e02:	1ac0      	subs	r0, r0, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	4602      	mov	r2, r0
 8004e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	6a21      	ldr	r1, [r4, #32]
 8004e0e:	47b0      	blx	r6
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	d106      	bne.n	8004e24 <__sflush_r+0x64>
 8004e16:	6829      	ldr	r1, [r5, #0]
 8004e18:	291d      	cmp	r1, #29
 8004e1a:	d82b      	bhi.n	8004e74 <__sflush_r+0xb4>
 8004e1c:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <__sflush_r+0x100>)
 8004e1e:	410a      	asrs	r2, r1
 8004e20:	07d6      	lsls	r6, r2, #31
 8004e22:	d427      	bmi.n	8004e74 <__sflush_r+0xb4>
 8004e24:	2200      	movs	r2, #0
 8004e26:	6062      	str	r2, [r4, #4]
 8004e28:	6922      	ldr	r2, [r4, #16]
 8004e2a:	04d9      	lsls	r1, r3, #19
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	d504      	bpl.n	8004e3a <__sflush_r+0x7a>
 8004e30:	1c42      	adds	r2, r0, #1
 8004e32:	d101      	bne.n	8004e38 <__sflush_r+0x78>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b903      	cbnz	r3, 8004e3a <__sflush_r+0x7a>
 8004e38:	6560      	str	r0, [r4, #84]	; 0x54
 8004e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e3c:	602f      	str	r7, [r5, #0]
 8004e3e:	2900      	cmp	r1, #0
 8004e40:	d0ca      	beq.n	8004dd8 <__sflush_r+0x18>
 8004e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d002      	beq.n	8004e50 <__sflush_r+0x90>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f7ff fb44 	bl	80044d8 <_free_r>
 8004e50:	2000      	movs	r0, #0
 8004e52:	6360      	str	r0, [r4, #52]	; 0x34
 8004e54:	e7c1      	b.n	8004dda <__sflush_r+0x1a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b0      	blx	r6
 8004e5c:	1c41      	adds	r1, r0, #1
 8004e5e:	d1c8      	bne.n	8004df2 <__sflush_r+0x32>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0c5      	beq.n	8004df2 <__sflush_r+0x32>
 8004e66:	2b1d      	cmp	r3, #29
 8004e68:	d001      	beq.n	8004e6e <__sflush_r+0xae>
 8004e6a:	2b16      	cmp	r3, #22
 8004e6c:	d101      	bne.n	8004e72 <__sflush_r+0xb2>
 8004e6e:	602f      	str	r7, [r5, #0]
 8004e70:	e7b2      	b.n	8004dd8 <__sflush_r+0x18>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	e7ae      	b.n	8004dda <__sflush_r+0x1a>
 8004e7c:	690f      	ldr	r7, [r1, #16]
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	d0aa      	beq.n	8004dd8 <__sflush_r+0x18>
 8004e82:	0793      	lsls	r3, r2, #30
 8004e84:	bf18      	it	ne
 8004e86:	2300      	movne	r3, #0
 8004e88:	680e      	ldr	r6, [r1, #0]
 8004e8a:	bf08      	it	eq
 8004e8c:	694b      	ldreq	r3, [r1, #20]
 8004e8e:	1bf6      	subs	r6, r6, r7
 8004e90:	600f      	str	r7, [r1, #0]
 8004e92:	608b      	str	r3, [r1, #8]
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	dd9f      	ble.n	8004dd8 <__sflush_r+0x18>
 8004e98:	4633      	mov	r3, r6
 8004e9a:	463a      	mov	r2, r7
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	6a21      	ldr	r1, [r4, #32]
 8004ea0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ea4:	47e0      	blx	ip
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	dc06      	bgt.n	8004eb8 <__sflush_r+0xf8>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	e790      	b.n	8004dda <__sflush_r+0x1a>
 8004eb8:	4407      	add	r7, r0
 8004eba:	1a36      	subs	r6, r6, r0
 8004ebc:	e7ea      	b.n	8004e94 <__sflush_r+0xd4>
 8004ebe:	bf00      	nop
 8004ec0:	dfbffffe 	.word	0xdfbffffe

08004ec4 <_fflush_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	690b      	ldr	r3, [r1, #16]
 8004ec8:	4605      	mov	r5, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	b913      	cbnz	r3, 8004ed4 <_fflush_r+0x10>
 8004ece:	2500      	movs	r5, #0
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	b118      	cbz	r0, 8004ede <_fflush_r+0x1a>
 8004ed6:	6a03      	ldr	r3, [r0, #32]
 8004ed8:	b90b      	cbnz	r3, 8004ede <_fflush_r+0x1a>
 8004eda:	f7fe fa97 	bl	800340c <__sinit>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f3      	beq.n	8004ece <_fflush_r+0xa>
 8004ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ee8:	07d0      	lsls	r0, r2, #31
 8004eea:	d404      	bmi.n	8004ef6 <_fflush_r+0x32>
 8004eec:	0599      	lsls	r1, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_fflush_r+0x32>
 8004ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ef2:	f7fe fc72 	bl	80037da <__retarget_lock_acquire_recursive>
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f7ff ff61 	bl	8004dc0 <__sflush_r>
 8004efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f00:	4605      	mov	r5, r0
 8004f02:	07da      	lsls	r2, r3, #31
 8004f04:	d4e4      	bmi.n	8004ed0 <_fflush_r+0xc>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	059b      	lsls	r3, r3, #22
 8004f0a:	d4e1      	bmi.n	8004ed0 <_fflush_r+0xc>
 8004f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0e:	f7fe fc65 	bl	80037dc <__retarget_lock_release_recursive>
 8004f12:	e7dd      	b.n	8004ed0 <_fflush_r+0xc>

08004f14 <__swhatbuf_r>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	460c      	mov	r4, r1
 8004f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	461e      	mov	r6, r3
 8004f22:	b096      	sub	sp, #88	; 0x58
 8004f24:	da0c      	bge.n	8004f40 <__swhatbuf_r+0x2c>
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f2e:	bf0c      	ite	eq
 8004f30:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004f34:	2340      	movne	r3, #64	; 0x40
 8004f36:	2000      	movs	r0, #0
 8004f38:	6031      	str	r1, [r6, #0]
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	b016      	add	sp, #88	; 0x58
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	466a      	mov	r2, sp
 8004f42:	f000 f849 	bl	8004fd8 <_fstat_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dbed      	blt.n	8004f26 <__swhatbuf_r+0x12>
 8004f4a:	9901      	ldr	r1, [sp, #4]
 8004f4c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f50:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f54:	4259      	negs	r1, r3
 8004f56:	4159      	adcs	r1, r3
 8004f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5c:	e7eb      	b.n	8004f36 <__swhatbuf_r+0x22>

08004f5e <__smakebuf_r>:
 8004f5e:	898b      	ldrh	r3, [r1, #12]
 8004f60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f62:	079d      	lsls	r5, r3, #30
 8004f64:	4606      	mov	r6, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	d507      	bpl.n	8004f7a <__smakebuf_r+0x1c>
 8004f6a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	2301      	movs	r3, #1
 8004f74:	6163      	str	r3, [r4, #20]
 8004f76:	b002      	add	sp, #8
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
 8004f7a:	466a      	mov	r2, sp
 8004f7c:	ab01      	add	r3, sp, #4
 8004f7e:	f7ff ffc9 	bl	8004f14 <__swhatbuf_r>
 8004f82:	9900      	ldr	r1, [sp, #0]
 8004f84:	4605      	mov	r5, r0
 8004f86:	4630      	mov	r0, r6
 8004f88:	f7ff fb16 	bl	80045b8 <_malloc_r>
 8004f8c:	b948      	cbnz	r0, 8004fa2 <__smakebuf_r+0x44>
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	059a      	lsls	r2, r3, #22
 8004f94:	d4ef      	bmi.n	8004f76 <__smakebuf_r+0x18>
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	f043 0302 	orr.w	r3, r3, #2
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	e7e3      	b.n	8004f6a <__smakebuf_r+0xc>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	6020      	str	r0, [r4, #0]
 8004fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	9b00      	ldr	r3, [sp, #0]
 8004fae:	6120      	str	r0, [r4, #16]
 8004fb0:	6163      	str	r3, [r4, #20]
 8004fb2:	9b01      	ldr	r3, [sp, #4]
 8004fb4:	b15b      	cbz	r3, 8004fce <__smakebuf_r+0x70>
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fbc:	f000 f81e 	bl	8004ffc <_isatty_r>
 8004fc0:	b128      	cbz	r0, 8004fce <__smakebuf_r+0x70>
 8004fc2:	89a3      	ldrh	r3, [r4, #12]
 8004fc4:	f023 0303 	bic.w	r3, r3, #3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	89a3      	ldrh	r3, [r4, #12]
 8004fd0:	431d      	orrs	r5, r3
 8004fd2:	81a5      	strh	r5, [r4, #12]
 8004fd4:	e7cf      	b.n	8004f76 <__smakebuf_r+0x18>
	...

08004fd8 <_fstat_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	2300      	movs	r3, #0
 8004fdc:	4d06      	ldr	r5, [pc, #24]	; (8004ff8 <_fstat_r+0x20>)
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	f7fc f86c 	bl	80010c2 <_fstat>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d102      	bne.n	8004ff4 <_fstat_r+0x1c>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	b103      	cbz	r3, 8004ff4 <_fstat_r+0x1c>
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200003a8 	.word	0x200003a8

08004ffc <_isatty_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	2300      	movs	r3, #0
 8005000:	4d05      	ldr	r5, [pc, #20]	; (8005018 <_isatty_r+0x1c>)
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc f86a 	bl	80010e0 <_isatty>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_isatty_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_isatty_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200003a8 	.word	0x200003a8

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	2300      	movs	r3, #0
 8005020:	4d05      	ldr	r5, [pc, #20]	; (8005038 <_sbrk_r+0x1c>)
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fc f870 	bl	800110c <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	200003a8 	.word	0x200003a8

0800503c <memcpy>:
 800503c:	440a      	add	r2, r1
 800503e:	4291      	cmp	r1, r2
 8005040:	f100 33ff 	add.w	r3, r0, #4294967295
 8005044:	d100      	bne.n	8005048 <memcpy+0xc>
 8005046:	4770      	bx	lr
 8005048:	b510      	push	{r4, lr}
 800504a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800504e:	4291      	cmp	r1, r2
 8005050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005054:	d1f9      	bne.n	800504a <memcpy+0xe>
 8005056:	bd10      	pop	{r4, pc}

08005058 <__assert_func>:
 8005058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800505a:	4614      	mov	r4, r2
 800505c:	461a      	mov	r2, r3
 800505e:	4b09      	ldr	r3, [pc, #36]	; (8005084 <__assert_func+0x2c>)
 8005060:	4605      	mov	r5, r0
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68d8      	ldr	r0, [r3, #12]
 8005066:	b14c      	cbz	r4, 800507c <__assert_func+0x24>
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <__assert_func+0x30>)
 800506a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800506e:	9100      	str	r1, [sp, #0]
 8005070:	462b      	mov	r3, r5
 8005072:	4906      	ldr	r1, [pc, #24]	; (800508c <__assert_func+0x34>)
 8005074:	f000 f842 	bl	80050fc <fiprintf>
 8005078:	f000 f852 	bl	8005120 <abort>
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <__assert_func+0x38>)
 800507e:	461c      	mov	r4, r3
 8005080:	e7f3      	b.n	800506a <__assert_func+0x12>
 8005082:	bf00      	nop
 8005084:	20000064 	.word	0x20000064
 8005088:	08005716 	.word	0x08005716
 800508c:	08005723 	.word	0x08005723
 8005090:	08005751 	.word	0x08005751

08005094 <_calloc_r>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	fba1 5402 	umull	r5, r4, r1, r2
 800509a:	b934      	cbnz	r4, 80050aa <_calloc_r+0x16>
 800509c:	4629      	mov	r1, r5
 800509e:	f7ff fa8b 	bl	80045b8 <_malloc_r>
 80050a2:	4606      	mov	r6, r0
 80050a4:	b928      	cbnz	r0, 80050b2 <_calloc_r+0x1e>
 80050a6:	4630      	mov	r0, r6
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	220c      	movs	r2, #12
 80050ac:	2600      	movs	r6, #0
 80050ae:	6002      	str	r2, [r0, #0]
 80050b0:	e7f9      	b.n	80050a6 <_calloc_r+0x12>
 80050b2:	462a      	mov	r2, r5
 80050b4:	4621      	mov	r1, r4
 80050b6:	f7fe fb13 	bl	80036e0 <memset>
 80050ba:	e7f4      	b.n	80050a6 <_calloc_r+0x12>

080050bc <__ascii_mbtowc>:
 80050bc:	b082      	sub	sp, #8
 80050be:	b901      	cbnz	r1, 80050c2 <__ascii_mbtowc+0x6>
 80050c0:	a901      	add	r1, sp, #4
 80050c2:	b142      	cbz	r2, 80050d6 <__ascii_mbtowc+0x1a>
 80050c4:	b14b      	cbz	r3, 80050da <__ascii_mbtowc+0x1e>
 80050c6:	7813      	ldrb	r3, [r2, #0]
 80050c8:	600b      	str	r3, [r1, #0]
 80050ca:	7812      	ldrb	r2, [r2, #0]
 80050cc:	1e10      	subs	r0, r2, #0
 80050ce:	bf18      	it	ne
 80050d0:	2001      	movne	r0, #1
 80050d2:	b002      	add	sp, #8
 80050d4:	4770      	bx	lr
 80050d6:	4610      	mov	r0, r2
 80050d8:	e7fb      	b.n	80050d2 <__ascii_mbtowc+0x16>
 80050da:	f06f 0001 	mvn.w	r0, #1
 80050de:	e7f8      	b.n	80050d2 <__ascii_mbtowc+0x16>

080050e0 <__ascii_wctomb>:
 80050e0:	4603      	mov	r3, r0
 80050e2:	4608      	mov	r0, r1
 80050e4:	b141      	cbz	r1, 80050f8 <__ascii_wctomb+0x18>
 80050e6:	2aff      	cmp	r2, #255	; 0xff
 80050e8:	d904      	bls.n	80050f4 <__ascii_wctomb+0x14>
 80050ea:	228a      	movs	r2, #138	; 0x8a
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	4770      	bx	lr
 80050f4:	2001      	movs	r0, #1
 80050f6:	700a      	strb	r2, [r1, #0]
 80050f8:	4770      	bx	lr
	...

080050fc <fiprintf>:
 80050fc:	b40e      	push	{r1, r2, r3}
 80050fe:	b503      	push	{r0, r1, lr}
 8005100:	4601      	mov	r1, r0
 8005102:	ab03      	add	r3, sp, #12
 8005104:	4805      	ldr	r0, [pc, #20]	; (800511c <fiprintf+0x20>)
 8005106:	f853 2b04 	ldr.w	r2, [r3], #4
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	f000 f835 	bl	800517c <_vfiprintf_r>
 8005112:	b002      	add	sp, #8
 8005114:	f85d eb04 	ldr.w	lr, [sp], #4
 8005118:	b003      	add	sp, #12
 800511a:	4770      	bx	lr
 800511c:	20000064 	.word	0x20000064

08005120 <abort>:
 8005120:	2006      	movs	r0, #6
 8005122:	b508      	push	{r3, lr}
 8005124:	f000 f96c 	bl	8005400 <raise>
 8005128:	2001      	movs	r0, #1
 800512a:	f7fb ffb5 	bl	8001098 <_exit>

0800512e <__sfputc_r>:
 800512e:	6893      	ldr	r3, [r2, #8]
 8005130:	b410      	push	{r4}
 8005132:	3b01      	subs	r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	6093      	str	r3, [r2, #8]
 8005138:	da07      	bge.n	800514a <__sfputc_r+0x1c>
 800513a:	6994      	ldr	r4, [r2, #24]
 800513c:	42a3      	cmp	r3, r4
 800513e:	db01      	blt.n	8005144 <__sfputc_r+0x16>
 8005140:	290a      	cmp	r1, #10
 8005142:	d102      	bne.n	800514a <__sfputc_r+0x1c>
 8005144:	bc10      	pop	{r4}
 8005146:	f7fe ba36 	b.w	80035b6 <__swbuf_r>
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	1c58      	adds	r0, r3, #1
 800514e:	6010      	str	r0, [r2, #0]
 8005150:	7019      	strb	r1, [r3, #0]
 8005152:	4608      	mov	r0, r1
 8005154:	bc10      	pop	{r4}
 8005156:	4770      	bx	lr

08005158 <__sfputs_r>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	4606      	mov	r6, r0
 800515c:	460f      	mov	r7, r1
 800515e:	4614      	mov	r4, r2
 8005160:	18d5      	adds	r5, r2, r3
 8005162:	42ac      	cmp	r4, r5
 8005164:	d101      	bne.n	800516a <__sfputs_r+0x12>
 8005166:	2000      	movs	r0, #0
 8005168:	e007      	b.n	800517a <__sfputs_r+0x22>
 800516a:	463a      	mov	r2, r7
 800516c:	4630      	mov	r0, r6
 800516e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005172:	f7ff ffdc 	bl	800512e <__sfputc_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d1f3      	bne.n	8005162 <__sfputs_r+0xa>
 800517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800517c <_vfiprintf_r>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	460d      	mov	r5, r1
 8005182:	4614      	mov	r4, r2
 8005184:	4698      	mov	r8, r3
 8005186:	4606      	mov	r6, r0
 8005188:	b09d      	sub	sp, #116	; 0x74
 800518a:	b118      	cbz	r0, 8005194 <_vfiprintf_r+0x18>
 800518c:	6a03      	ldr	r3, [r0, #32]
 800518e:	b90b      	cbnz	r3, 8005194 <_vfiprintf_r+0x18>
 8005190:	f7fe f93c 	bl	800340c <__sinit>
 8005194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 80051a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051a2:	f7fe fb1a 	bl	80037da <__retarget_lock_acquire_recursive>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	d501      	bpl.n	80051b0 <_vfiprintf_r+0x34>
 80051ac:	692b      	ldr	r3, [r5, #16]
 80051ae:	b99b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x5c>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7fe fa3c 	bl	8003630 <__swsetup_r>
 80051b8:	b170      	cbz	r0, 80051d8 <_vfiprintf_r+0x5c>
 80051ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051bc:	07dc      	lsls	r4, r3, #31
 80051be:	d504      	bpl.n	80051ca <_vfiprintf_r+0x4e>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	b01d      	add	sp, #116	; 0x74
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	0598      	lsls	r0, r3, #22
 80051ce:	d4f7      	bmi.n	80051c0 <_vfiprintf_r+0x44>
 80051d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d2:	f7fe fb03 	bl	80037dc <__retarget_lock_release_recursive>
 80051d6:	e7f3      	b.n	80051c0 <_vfiprintf_r+0x44>
 80051d8:	2300      	movs	r3, #0
 80051da:	9309      	str	r3, [sp, #36]	; 0x24
 80051dc:	2320      	movs	r3, #32
 80051de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e2:	2330      	movs	r3, #48	; 0x30
 80051e4:	f04f 0901 	mov.w	r9, #1
 80051e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800539c <_vfiprintf_r+0x220>
 80051f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051f4:	4623      	mov	r3, r4
 80051f6:	469a      	mov	sl, r3
 80051f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fc:	b10a      	cbz	r2, 8005202 <_vfiprintf_r+0x86>
 80051fe:	2a25      	cmp	r2, #37	; 0x25
 8005200:	d1f9      	bne.n	80051f6 <_vfiprintf_r+0x7a>
 8005202:	ebba 0b04 	subs.w	fp, sl, r4
 8005206:	d00b      	beq.n	8005220 <_vfiprintf_r+0xa4>
 8005208:	465b      	mov	r3, fp
 800520a:	4622      	mov	r2, r4
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f7ff ffa2 	bl	8005158 <__sfputs_r>
 8005214:	3001      	adds	r0, #1
 8005216:	f000 80a9 	beq.w	800536c <_vfiprintf_r+0x1f0>
 800521a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521c:	445a      	add	r2, fp
 800521e:	9209      	str	r2, [sp, #36]	; 0x24
 8005220:	f89a 3000 	ldrb.w	r3, [sl]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a1 	beq.w	800536c <_vfiprintf_r+0x1f0>
 800522a:	2300      	movs	r3, #0
 800522c:	f04f 32ff 	mov.w	r2, #4294967295
 8005230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005234:	f10a 0a01 	add.w	sl, sl, #1
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005240:	931a      	str	r3, [sp, #104]	; 0x68
 8005242:	4654      	mov	r4, sl
 8005244:	2205      	movs	r2, #5
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	4854      	ldr	r0, [pc, #336]	; (800539c <_vfiprintf_r+0x220>)
 800524c:	f7fe fac7 	bl	80037de <memchr>
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	b9d8      	cbnz	r0, 800528c <_vfiprintf_r+0x110>
 8005254:	06d1      	lsls	r1, r2, #27
 8005256:	bf44      	itt	mi
 8005258:	2320      	movmi	r3, #32
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800525e:	0713      	lsls	r3, r2, #28
 8005260:	bf44      	itt	mi
 8005262:	232b      	movmi	r3, #43	; 0x2b
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005268:	f89a 3000 	ldrb.w	r3, [sl]
 800526c:	2b2a      	cmp	r3, #42	; 0x2a
 800526e:	d015      	beq.n	800529c <_vfiprintf_r+0x120>
 8005270:	4654      	mov	r4, sl
 8005272:	2000      	movs	r0, #0
 8005274:	f04f 0c0a 	mov.w	ip, #10
 8005278:	9a07      	ldr	r2, [sp, #28]
 800527a:	4621      	mov	r1, r4
 800527c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005280:	3b30      	subs	r3, #48	; 0x30
 8005282:	2b09      	cmp	r3, #9
 8005284:	d94d      	bls.n	8005322 <_vfiprintf_r+0x1a6>
 8005286:	b1b0      	cbz	r0, 80052b6 <_vfiprintf_r+0x13a>
 8005288:	9207      	str	r2, [sp, #28]
 800528a:	e014      	b.n	80052b6 <_vfiprintf_r+0x13a>
 800528c:	eba0 0308 	sub.w	r3, r0, r8
 8005290:	fa09 f303 	lsl.w	r3, r9, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	46a2      	mov	sl, r4
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	e7d2      	b.n	8005242 <_vfiprintf_r+0xc6>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1d19      	adds	r1, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9103      	str	r1, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfbb      	ittet	lt
 80052a8:	425b      	neglt	r3, r3
 80052aa:	f042 0202 	orrlt.w	r2, r2, #2
 80052ae:	9307      	strge	r3, [sp, #28]
 80052b0:	9307      	strlt	r3, [sp, #28]
 80052b2:	bfb8      	it	lt
 80052b4:	9204      	strlt	r2, [sp, #16]
 80052b6:	7823      	ldrb	r3, [r4, #0]
 80052b8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ba:	d10c      	bne.n	80052d6 <_vfiprintf_r+0x15a>
 80052bc:	7863      	ldrb	r3, [r4, #1]
 80052be:	2b2a      	cmp	r3, #42	; 0x2a
 80052c0:	d134      	bne.n	800532c <_vfiprintf_r+0x1b0>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	3402      	adds	r4, #2
 80052c6:	1d1a      	adds	r2, r3, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	9203      	str	r2, [sp, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfb8      	it	lt
 80052d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053a0 <_vfiprintf_r+0x224>
 80052da:	2203      	movs	r2, #3
 80052dc:	4650      	mov	r0, sl
 80052de:	7821      	ldrb	r1, [r4, #0]
 80052e0:	f7fe fa7d 	bl	80037de <memchr>
 80052e4:	b138      	cbz	r0, 80052f6 <_vfiprintf_r+0x17a>
 80052e6:	2240      	movs	r2, #64	; 0x40
 80052e8:	9b04      	ldr	r3, [sp, #16]
 80052ea:	eba0 000a 	sub.w	r0, r0, sl
 80052ee:	4082      	lsls	r2, r0
 80052f0:	4313      	orrs	r3, r2
 80052f2:	3401      	adds	r4, #1
 80052f4:	9304      	str	r3, [sp, #16]
 80052f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fa:	2206      	movs	r2, #6
 80052fc:	4829      	ldr	r0, [pc, #164]	; (80053a4 <_vfiprintf_r+0x228>)
 80052fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005302:	f7fe fa6c 	bl	80037de <memchr>
 8005306:	2800      	cmp	r0, #0
 8005308:	d03f      	beq.n	800538a <_vfiprintf_r+0x20e>
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <_vfiprintf_r+0x22c>)
 800530c:	bb1b      	cbnz	r3, 8005356 <_vfiprintf_r+0x1da>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	3307      	adds	r3, #7
 8005312:	f023 0307 	bic.w	r3, r3, #7
 8005316:	3308      	adds	r3, #8
 8005318:	9303      	str	r3, [sp, #12]
 800531a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800531c:	443b      	add	r3, r7
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	e768      	b.n	80051f4 <_vfiprintf_r+0x78>
 8005322:	460c      	mov	r4, r1
 8005324:	2001      	movs	r0, #1
 8005326:	fb0c 3202 	mla	r2, ip, r2, r3
 800532a:	e7a6      	b.n	800527a <_vfiprintf_r+0xfe>
 800532c:	2300      	movs	r3, #0
 800532e:	f04f 0c0a 	mov.w	ip, #10
 8005332:	4619      	mov	r1, r3
 8005334:	3401      	adds	r4, #1
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	4620      	mov	r0, r4
 800533a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533e:	3a30      	subs	r2, #48	; 0x30
 8005340:	2a09      	cmp	r2, #9
 8005342:	d903      	bls.n	800534c <_vfiprintf_r+0x1d0>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0c6      	beq.n	80052d6 <_vfiprintf_r+0x15a>
 8005348:	9105      	str	r1, [sp, #20]
 800534a:	e7c4      	b.n	80052d6 <_vfiprintf_r+0x15a>
 800534c:	4604      	mov	r4, r0
 800534e:	2301      	movs	r3, #1
 8005350:	fb0c 2101 	mla	r1, ip, r1, r2
 8005354:	e7f0      	b.n	8005338 <_vfiprintf_r+0x1bc>
 8005356:	ab03      	add	r3, sp, #12
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	462a      	mov	r2, r5
 800535c:	4630      	mov	r0, r6
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <_vfiprintf_r+0x230>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	f7fd fc05 	bl	8002b70 <_printf_float>
 8005366:	4607      	mov	r7, r0
 8005368:	1c78      	adds	r0, r7, #1
 800536a:	d1d6      	bne.n	800531a <_vfiprintf_r+0x19e>
 800536c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536e:	07d9      	lsls	r1, r3, #31
 8005370:	d405      	bmi.n	800537e <_vfiprintf_r+0x202>
 8005372:	89ab      	ldrh	r3, [r5, #12]
 8005374:	059a      	lsls	r2, r3, #22
 8005376:	d402      	bmi.n	800537e <_vfiprintf_r+0x202>
 8005378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800537a:	f7fe fa2f 	bl	80037dc <__retarget_lock_release_recursive>
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	065b      	lsls	r3, r3, #25
 8005382:	f53f af1d 	bmi.w	80051c0 <_vfiprintf_r+0x44>
 8005386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005388:	e71c      	b.n	80051c4 <_vfiprintf_r+0x48>
 800538a:	ab03      	add	r3, sp, #12
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	462a      	mov	r2, r5
 8005390:	4630      	mov	r0, r6
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <_vfiprintf_r+0x230>)
 8005394:	a904      	add	r1, sp, #16
 8005396:	f7fd fe8b 	bl	80030b0 <_printf_i>
 800539a:	e7e4      	b.n	8005366 <_vfiprintf_r+0x1ea>
 800539c:	08005853 	.word	0x08005853
 80053a0:	08005859 	.word	0x08005859
 80053a4:	0800585d 	.word	0x0800585d
 80053a8:	08002b71 	.word	0x08002b71
 80053ac:	08005159 	.word	0x08005159

080053b0 <_raise_r>:
 80053b0:	291f      	cmp	r1, #31
 80053b2:	b538      	push	{r3, r4, r5, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	460d      	mov	r5, r1
 80053b8:	d904      	bls.n	80053c4 <_raise_r+0x14>
 80053ba:	2316      	movs	r3, #22
 80053bc:	6003      	str	r3, [r0, #0]
 80053be:	f04f 30ff 	mov.w	r0, #4294967295
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80053c6:	b112      	cbz	r2, 80053ce <_raise_r+0x1e>
 80053c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053cc:	b94b      	cbnz	r3, 80053e2 <_raise_r+0x32>
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f830 	bl	8005434 <_getpid_r>
 80053d4:	462a      	mov	r2, r5
 80053d6:	4601      	mov	r1, r0
 80053d8:	4620      	mov	r0, r4
 80053da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053de:	f000 b817 	b.w	8005410 <_kill_r>
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d00a      	beq.n	80053fc <_raise_r+0x4c>
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	d103      	bne.n	80053f2 <_raise_r+0x42>
 80053ea:	2316      	movs	r3, #22
 80053ec:	6003      	str	r3, [r0, #0]
 80053ee:	2001      	movs	r0, #1
 80053f0:	e7e7      	b.n	80053c2 <_raise_r+0x12>
 80053f2:	2400      	movs	r4, #0
 80053f4:	4628      	mov	r0, r5
 80053f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053fa:	4798      	blx	r3
 80053fc:	2000      	movs	r0, #0
 80053fe:	e7e0      	b.n	80053c2 <_raise_r+0x12>

08005400 <raise>:
 8005400:	4b02      	ldr	r3, [pc, #8]	; (800540c <raise+0xc>)
 8005402:	4601      	mov	r1, r0
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f7ff bfd3 	b.w	80053b0 <_raise_r>
 800540a:	bf00      	nop
 800540c:	20000064 	.word	0x20000064

08005410 <_kill_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	2300      	movs	r3, #0
 8005414:	4d06      	ldr	r5, [pc, #24]	; (8005430 <_kill_r+0x20>)
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	4611      	mov	r1, r2
 800541c:	602b      	str	r3, [r5, #0]
 800541e:	f7fb fe2b 	bl	8001078 <_kill>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	d102      	bne.n	800542c <_kill_r+0x1c>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	b103      	cbz	r3, 800542c <_kill_r+0x1c>
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	bd38      	pop	{r3, r4, r5, pc}
 800542e:	bf00      	nop
 8005430:	200003a8 	.word	0x200003a8

08005434 <_getpid_r>:
 8005434:	f7fb be19 	b.w	800106a <_getpid>

08005438 <_init>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr

08005444 <_fini>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr
