
mcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  00007098  2**0
                  CONTENTS
  4 .ARM          00000000  08005784  08005784  00007098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005784  08005784  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800578c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035f4  20000098  08005824  00007098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000368c  08005824  0000768c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e173  00000000  00000000  000070c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004660  00000000  00000000  00025234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cd63  00000000  00000000  00029894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  000365f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d0  00000000  00000000  00037ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d62a  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9bc  00000000  00000000  000561e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9324  00000000  00000000  00075b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011eec2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b20  00000000  00000000  0011ef08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00122a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000098 	.word	0x20000098
 800020c:	00000000 	.word	0x00000000
 8000210:	08005638 	.word	0x08005638

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000009c 	.word	0x2000009c
 800022c:	08005638 	.word	0x08005638

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	@ 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_fmul>:
 800044c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000454:	bf1e      	ittt	ne
 8000456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045a:	ea92 0f0c 	teqne	r2, ip
 800045e:	ea93 0f0c 	teqne	r3, ip
 8000462:	d06f      	beq.n	8000544 <__aeabi_fmul+0xf8>
 8000464:	441a      	add	r2, r3
 8000466:	ea80 0c01 	eor.w	ip, r0, r1
 800046a:	0240      	lsls	r0, r0, #9
 800046c:	bf18      	it	ne
 800046e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000472:	d01e      	beq.n	80004b2 <__aeabi_fmul+0x66>
 8000474:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800047c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000480:	fba0 3101 	umull	r3, r1, r0, r1
 8000484:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000488:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800048c:	bf3e      	ittt	cc
 800048e:	0049      	lslcc	r1, r1, #1
 8000490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000494:	005b      	lslcc	r3, r3, #1
 8000496:	ea40 0001 	orr.w	r0, r0, r1
 800049a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800049e:	2afd      	cmp	r2, #253	@ 0xfd
 80004a0:	d81d      	bhi.n	80004de <__aeabi_fmul+0x92>
 80004a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80004a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004aa:	bf08      	it	eq
 80004ac:	f020 0001 	biceq.w	r0, r0, #1
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80004ba:	bf08      	it	eq
 80004bc:	0249      	lsleq	r1, r1, #9
 80004be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004c6:	3a7f      	subs	r2, #127	@ 0x7f
 80004c8:	bfc2      	ittt	gt
 80004ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80004ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d2:	4770      	bxgt	lr
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	3a01      	subs	r2, #1
 80004de:	dc5d      	bgt.n	800059c <__aeabi_fmul+0x150>
 80004e0:	f112 0f19 	cmn.w	r2, #25
 80004e4:	bfdc      	itt	le
 80004e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80004ea:	4770      	bxle	lr
 80004ec:	f1c2 0200 	rsb	r2, r2, #0
 80004f0:	0041      	lsls	r1, r0, #1
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	f1c2 0220 	rsb	r2, r2, #32
 80004fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000502:	f140 0000 	adc.w	r0, r0, #0
 8000506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050a:	bf08      	it	eq
 800050c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000510:	4770      	bx	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800051a:	bf02      	ittt	eq
 800051c:	0040      	lsleq	r0, r0, #1
 800051e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000522:	3a01      	subeq	r2, #1
 8000524:	d0f9      	beq.n	800051a <__aeabi_fmul+0xce>
 8000526:	ea40 000c 	orr.w	r0, r0, ip
 800052a:	f093 0f00 	teq	r3, #0
 800052e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000532:	bf02      	ittt	eq
 8000534:	0049      	lsleq	r1, r1, #1
 8000536:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800053a:	3b01      	subeq	r3, #1
 800053c:	d0f9      	beq.n	8000532 <__aeabi_fmul+0xe6>
 800053e:	ea41 010c 	orr.w	r1, r1, ip
 8000542:	e78f      	b.n	8000464 <__aeabi_fmul+0x18>
 8000544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000548:	ea92 0f0c 	teq	r2, ip
 800054c:	bf18      	it	ne
 800054e:	ea93 0f0c 	teqne	r3, ip
 8000552:	d00a      	beq.n	800056a <__aeabi_fmul+0x11e>
 8000554:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000558:	bf18      	it	ne
 800055a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800055e:	d1d8      	bne.n	8000512 <__aeabi_fmul+0xc6>
 8000560:	ea80 0001 	eor.w	r0, r0, r1
 8000564:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000568:	4770      	bx	lr
 800056a:	f090 0f00 	teq	r0, #0
 800056e:	bf17      	itett	ne
 8000570:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000574:	4608      	moveq	r0, r1
 8000576:	f091 0f00 	teqne	r1, #0
 800057a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800057e:	d014      	beq.n	80005aa <__aeabi_fmul+0x15e>
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d101      	bne.n	800058a <__aeabi_fmul+0x13e>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	d10f      	bne.n	80005aa <__aeabi_fmul+0x15e>
 800058a:	ea93 0f0c 	teq	r3, ip
 800058e:	d103      	bne.n	8000598 <__aeabi_fmul+0x14c>
 8000590:	024b      	lsls	r3, r1, #9
 8000592:	bf18      	it	ne
 8000594:	4608      	movne	r0, r1
 8000596:	d108      	bne.n	80005aa <__aeabi_fmul+0x15e>
 8000598:	ea80 0001 	eor.w	r0, r0, r1
 800059c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80005a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a8:	4770      	bx	lr
 80005aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_fdiv>:
 80005b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005bc:	bf1e      	ittt	ne
 80005be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c2:	ea92 0f0c 	teqne	r2, ip
 80005c6:	ea93 0f0c 	teqne	r3, ip
 80005ca:	d069      	beq.n	80006a0 <__aeabi_fdiv+0xec>
 80005cc:	eba2 0203 	sub.w	r2, r2, r3
 80005d0:	ea80 0c01 	eor.w	ip, r0, r1
 80005d4:	0249      	lsls	r1, r1, #9
 80005d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005da:	d037      	beq.n	800064c <__aeabi_fdiv+0x98>
 80005dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005e8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80005ec:	428b      	cmp	r3, r1
 80005ee:	bf38      	it	cc
 80005f0:	005b      	lslcc	r3, r3, #1
 80005f2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80005f6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005fa:	428b      	cmp	r3, r1
 80005fc:	bf24      	itt	cs
 80005fe:	1a5b      	subcs	r3, r3, r1
 8000600:	ea40 000c 	orrcs.w	r0, r0, ip
 8000604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000608:	bf24      	itt	cs
 800060a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800060e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000616:	bf24      	itt	cs
 8000618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800061c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000624:	bf24      	itt	cs
 8000626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	bf18      	it	ne
 8000632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000636:	d1e0      	bne.n	80005fa <__aeabi_fdiv+0x46>
 8000638:	2afd      	cmp	r2, #253	@ 0xfd
 800063a:	f63f af50 	bhi.w	80004de <__aeabi_fmul+0x92>
 800063e:	428b      	cmp	r3, r1
 8000640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000644:	bf08      	it	eq
 8000646:	f020 0001 	biceq.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000654:	327f      	adds	r2, #127	@ 0x7f
 8000656:	bfc2      	ittt	gt
 8000658:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800065c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000660:	4770      	bxgt	lr
 8000662:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	3a01      	subs	r2, #1
 800066c:	e737      	b.n	80004de <__aeabi_fmul+0x92>
 800066e:	f092 0f00 	teq	r2, #0
 8000672:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0040      	lsleq	r0, r0, #1
 800067a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800067e:	3a01      	subeq	r2, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fdiv+0xc2>
 8000682:	ea40 000c 	orr.w	r0, r0, ip
 8000686:	f093 0f00 	teq	r3, #0
 800068a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800068e:	bf02      	ittt	eq
 8000690:	0049      	lsleq	r1, r1, #1
 8000692:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000696:	3b01      	subeq	r3, #1
 8000698:	d0f9      	beq.n	800068e <__aeabi_fdiv+0xda>
 800069a:	ea41 010c 	orr.w	r1, r1, ip
 800069e:	e795      	b.n	80005cc <__aeabi_fdiv+0x18>
 80006a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a4:	ea92 0f0c 	teq	r2, ip
 80006a8:	d108      	bne.n	80006bc <__aeabi_fdiv+0x108>
 80006aa:	0242      	lsls	r2, r0, #9
 80006ac:	f47f af7d 	bne.w	80005aa <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	f47f af70 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e776      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006bc:	ea93 0f0c 	teq	r3, ip
 80006c0:	d104      	bne.n	80006cc <__aeabi_fdiv+0x118>
 80006c2:	024b      	lsls	r3, r1, #9
 80006c4:	f43f af4c 	beq.w	8000560 <__aeabi_fmul+0x114>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e76e      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006cc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80006d0:	bf18      	it	ne
 80006d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80006d6:	d1ca      	bne.n	800066e <__aeabi_fdiv+0xba>
 80006d8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80006dc:	f47f af5c 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006e0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80006e4:	f47f af3c 	bne.w	8000560 <__aeabi_fmul+0x114>
 80006e8:	e75f      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006ea:	bf00      	nop

080006ec <__gesf2>:
 80006ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80006f0:	e006      	b.n	8000700 <__cmpsf2+0x4>
 80006f2:	bf00      	nop

080006f4 <__lesf2>:
 80006f4:	f04f 0c01 	mov.w	ip, #1
 80006f8:	e002      	b.n	8000700 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__cmpsf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d011      	beq.n	800073c <__cmpsf2+0x40>
 8000718:	b001      	add	sp, #4
 800071a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800071e:	bf18      	it	ne
 8000720:	ea90 0f01 	teqne	r0, r1
 8000724:	bf58      	it	pl
 8000726:	ebb2 0003 	subspl.w	r0, r2, r3
 800072a:	bf88      	it	hi
 800072c:	17c8      	asrhi	r0, r1, #31
 800072e:	bf38      	it	cc
 8000730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000734:	bf18      	it	ne
 8000736:	f040 0001 	orrne.w	r0, r0, #1
 800073a:	4770      	bx	lr
 800073c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000740:	d102      	bne.n	8000748 <__cmpsf2+0x4c>
 8000742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000746:	d105      	bne.n	8000754 <__cmpsf2+0x58>
 8000748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800074c:	d1e4      	bne.n	8000718 <__cmpsf2+0x1c>
 800074e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000752:	d0e1      	beq.n	8000718 <__cmpsf2+0x1c>
 8000754:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <__aeabi_cfrcmple>:
 800075c:	4684      	mov	ip, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4661      	mov	r1, ip
 8000762:	e7ff      	b.n	8000764 <__aeabi_cfcmpeq>

08000764 <__aeabi_cfcmpeq>:
 8000764:	b50f      	push	{r0, r1, r2, r3, lr}
 8000766:	f7ff ffc9 	bl	80006fc <__cmpsf2>
 800076a:	2800      	cmp	r0, #0
 800076c:	bf48      	it	mi
 800076e:	f110 0f00 	cmnmi.w	r0, #0
 8000772:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000774 <__aeabi_fcmpeq>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff fff4 	bl	8000764 <__aeabi_cfcmpeq>
 800077c:	bf0c      	ite	eq
 800077e:	2001      	moveq	r0, #1
 8000780:	2000      	movne	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_fcmplt>:
 8000788:	f84d ed08 	str.w	lr, [sp, #-8]!
 800078c:	f7ff ffea 	bl	8000764 <__aeabi_cfcmpeq>
 8000790:	bf34      	ite	cc
 8000792:	2001      	movcc	r0, #1
 8000794:	2000      	movcs	r0, #0
 8000796:	f85d fb08 	ldr.w	pc, [sp], #8
 800079a:	bf00      	nop

0800079c <__aeabi_fcmple>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff ffe0 	bl	8000764 <__aeabi_cfcmpeq>
 80007a4:	bf94      	ite	ls
 80007a6:	2001      	movls	r0, #1
 80007a8:	2000      	movhi	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmpge>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffd2 	bl	800075c <__aeabi_cfrcmple>
 80007b8:	bf94      	ite	ls
 80007ba:	2001      	movls	r0, #1
 80007bc:	2000      	movhi	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmpgt>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffc8 	bl	800075c <__aeabi_cfrcmple>
 80007cc:	bf34      	ite	cc
 80007ce:	2001      	movcc	r0, #1
 80007d0:	2000      	movcs	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007d8:	b500      	push	{lr}
 80007da:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	9302      	str	r3, [sp, #8]
 80007e2:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e4:	4811      	ldr	r0, [pc, #68]	@ (800082c <MX_ADC1_Init+0x54>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_ADC1_Init+0x58>)
 80007e8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ec:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ee:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80007f4:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fc:	f001 f9cc 	bl	8001b98 <HAL_ADC_Init>
 8000800:	b968      	cbnz	r0, 800081e <MX_ADC1_Init+0x46>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000802:	2309      	movs	r3, #9
 8000804:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	2301      	movs	r3, #1
 8000808:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080a:	2300      	movs	r3, #0
 800080c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	a901      	add	r1, sp, #4
 8000810:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_ADC1_Init+0x54>)
 8000812:	f001 f83d 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000816:	b928      	cbnz	r0, 8000824 <MX_ADC1_Init+0x4c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	b005      	add	sp, #20
 800081a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800081e:	f000 fa7f 	bl	8000d20 <Error_Handler>
 8000822:	e7ee      	b.n	8000802 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000824:	f000 fa7c 	bl	8000d20 <Error_Handler>
}
 8000828:	e7f6      	b.n	8000818 <MX_ADC1_Init+0x40>
 800082a:	bf00      	nop
 800082c:	200000b4 	.word	0x200000b4
 8000830:	40012400 	.word	0x40012400

08000834 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000834:	b500      	push	{lr}
 8000836:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	2300      	movs	r3, #0
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	9303      	str	r3, [sp, #12]
 800083e:	9304      	str	r3, [sp, #16]
 8000840:	9305      	str	r3, [sp, #20]
  if(adcHandle->Instance==ADC1)
 8000842:	6802      	ldr	r2, [r0, #0]
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_ADC_MspInit+0x58>)
 8000846:	429a      	cmp	r2, r3
 8000848:	d002      	beq.n	8000850 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800084a:	b007      	add	sp, #28
 800084c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000850:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8000854:	699a      	ldr	r2, [r3, #24]
 8000856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800085a:	619a      	str	r2, [r3, #24]
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000862:	9200      	str	r2, [sp, #0]
 8000864:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	699a      	ldr	r2, [r3, #24]
 8000868:	f042 0208 	orr.w	r2, r2, #8
 800086c:	619a      	str	r2, [r3, #24]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = THROTTLE_VAL_Pin;
 8000878:	2302      	movs	r3, #2
 800087a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087c:	2303      	movs	r3, #3
 800087e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(THROTTLE_VAL_GPIO_Port, &GPIO_InitStruct);
 8000880:	a902      	add	r1, sp, #8
 8000882:	4803      	ldr	r0, [pc, #12]	@ (8000890 <HAL_ADC_MspInit+0x5c>)
 8000884:	f001 fe48 	bl	8002518 <HAL_GPIO_Init>
}
 8000888:	e7df      	b.n	800084a <HAL_ADC_MspInit+0x16>
 800088a:	bf00      	nop
 800088c:	40012400 	.word	0x40012400
 8000890:	40010c00 	.word	0x40010c00

08000894 <ReadADC>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t ReadADC(ADC_HandleTypeDef* hadc)
{
 8000894:	b510      	push	{r4, lr}
 8000896:	4604      	mov	r4, r0
	HAL_ADC_Start(hadc);
 8000898:	f001 f8de 	bl	8001a58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 800089c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008a0:	4620      	mov	r0, r4
 80008a2:	f000 ff2f 	bl	8001704 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc);
 80008a6:	4620      	mov	r0, r4
 80008a8:	f000 ffee 	bl	8001888 <HAL_ADC_GetValue>
}
 80008ac:	b280      	uxth	r0, r0
 80008ae:	bd10      	pop	{r4, pc}

080008b0 <CanFilterSetup>:
 * @retval: nothing
 */
//The MCB board requires 3 CAN messages, i.e. 0x400, 0x401,and 0x402. The filter set up requires one filter bank with a 16 bit scale, set in list mode, covering all the messages needed while one message is duplicated.

void CanFilterSetup()
{
 80008b0:	b508      	push	{r3, lr}
	// Can Filter set up for MCB

		// one filter in mask mode for 0x503, 0x622, 0x626 messages.
	    CAN_filter0.FilterIdHigh = (uint16_t) (0x503 << 5);
 80008b2:	490b      	ldr	r1, [pc, #44]	@ (80008e0 <CanFilterSetup+0x30>)
 80008b4:	f24a 0360 	movw	r3, #41056	@ 0xa060
 80008b8:	600b      	str	r3, [r1, #0]
	    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x503 << 5);
 80008ba:	608b      	str	r3, [r1, #8]

	    CAN_filter0.FilterIdLow = (uint16_t) (0x622 << 5);
 80008bc:	f24c 4340 	movw	r3, #50240	@ 0xc440
 80008c0:	604b      	str	r3, [r1, #4]
	    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x626 << 5);
 80008c2:	f24c 43c0 	movw	r3, #50368	@ 0xc4c0
 80008c6:	60cb      	str	r3, [r1, #12]

	    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	610b      	str	r3, [r1, #16]
	    CAN_filter0.FilterBank = (uint32_t) 0;
 80008cc:	614b      	str	r3, [r1, #20]
	    CAN_filter0.FilterMode = CAN_FILTERMODE_IDLIST;
 80008ce:	2201      	movs	r2, #1
 80008d0:	618a      	str	r2, [r1, #24]
	    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 80008d2:	61cb      	str	r3, [r1, #28]
	    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 80008d4:	620a      	str	r2, [r1, #32]

		// Configure reception filters
	    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 80008d6:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <CanFilterSetup+0x34>)
 80008d8:	f001 fa98 	bl	8001e0c <HAL_CAN_ConfigFilter>
}
 80008dc:	bd08      	pop	{r3, pc}
 80008de:	bf00      	nop
 80008e0:	2000013c 	.word	0x2000013c
 80008e4:	200000e4 	.word	0x200000e4

080008e8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80008e8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 0 */

  CAN_rx_queue = xQueueCreate(32, sizeof(CAN_msg_t));
 80008ea:	2200      	movs	r2, #0
 80008ec:	2124      	movs	r1, #36	@ 0x24
 80008ee:	2020      	movs	r0, #32
 80008f0:	f003 faa7 	bl	8003e42 <xQueueGenericCreate>
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_CAN_Init+0x48>)
 80008f6:	6018      	str	r0, [r3, #0]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <MX_CAN_Init+0x4c>)
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_CAN_Init+0x50>)
 80008fc:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 4;
 80008fe:	2304      	movs	r3, #4
 8000900:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000902:	2300      	movs	r3, #0
 8000904:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000906:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000908:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800090c:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800090e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000912:	6142      	str	r2, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000914:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000916:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000918:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800091a:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800091c:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800091e:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000920:	f001 f9ce 	bl	8001cc0 <HAL_CAN_Init>
 8000924:	b900      	cbnz	r0, 8000928 <MX_CAN_Init+0x40>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000926:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000928:	f000 f9fa 	bl	8000d20 <Error_Handler>
}
 800092c:	e7fb      	b.n	8000926 <MX_CAN_Init+0x3e>
 800092e:	bf00      	nop
 8000930:	20000110 	.word	0x20000110
 8000934:	200000e4 	.word	0x200000e4
 8000938:	40006400 	.word	0x40006400

0800093c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800093c:	b510      	push	{r4, lr}
 800093e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	2300      	movs	r3, #0
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	9303      	str	r3, [sp, #12]
 8000946:	9304      	str	r3, [sp, #16]
 8000948:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 800094a:	6802      	ldr	r2, [r0, #0]
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <HAL_CAN_MspInit+0x8c>)
 800094e:	429a      	cmp	r2, r3
 8000950:	d001      	beq.n	8000956 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000952:	b006      	add	sp, #24
 8000954:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000956:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 800095a:	69da      	ldr	r2, [r3, #28]
 800095c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000960:	61da      	str	r2, [r3, #28]
 8000962:	69da      	ldr	r2, [r3, #28]
 8000964:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000968:	9200      	str	r2, [sp, #0]
 800096a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	699a      	ldr	r2, [r3, #24]
 800096e:	f042 0208 	orr.w	r2, r2, #8
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800097e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000982:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	4c11      	ldr	r4, [pc, #68]	@ (80009cc <HAL_CAN_MspInit+0x90>)
 8000986:	a902      	add	r1, sp, #8
 8000988:	4620      	mov	r0, r4
 800098a:	f001 fdc5 	bl	8002518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000992:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	a902      	add	r1, sp, #8
 800099e:	4620      	mov	r0, r4
 80009a0:	f001 fdba 	bl	8002518 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 80009a4:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_CAN_MspInit+0x94>)
 80009a6:	6853      	ldr	r3, [r2, #4]
 80009a8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80009ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2105      	movs	r1, #5
 80009ba:	2014      	movs	r0, #20
 80009bc:	f001 fd8e 	bl	80024dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f001 fd9b 	bl	80024fc <HAL_NVIC_EnableIRQ>
}
 80009c6:	e7c4      	b.n	8000952 <HAL_CAN_MspInit+0x16>
 80009c8:	40006400 	.word	0x40006400
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	40010000 	.word	0x40010000

080009d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009d4:	b500      	push	{lr}
 80009d6:	b095      	sub	sp, #84	@ 0x54
  // Using queue with freeRTOS: https://controllerstech.com/freertos-tutorial-5-using-queue/
  CAN_RxHeaderTypeDef can_rx_header;
  uint8_t can_data[8];

  /* Get CAN message */
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_data); 
 80009d8:	ab0b      	add	r3, sp, #44	@ 0x2c
 80009da:	aa0d      	add	r2, sp, #52	@ 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	f001 fb3e 	bl	800205e <HAL_CAN_GetRxMessage>

  /* Put CAN message in the Queue */
  CAN_msg_t new_CAN_msg;
  new_CAN_msg.header = can_rx_header;
 80009e2:	f10d 0e08 	add.w	lr, sp, #8
 80009e6:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 80009ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009f2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80009f6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  for(int i = 0; i < 8; i++) 
 80009fa:	2300      	movs	r3, #0
 80009fc:	e007      	b.n	8000a0e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
  {
    new_CAN_msg.data[i] = can_data[i];
 80009fe:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8000a02:	446a      	add	r2, sp
 8000a04:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8000a08:	f802 1c2c 	strb.w	r1, [r2, #-44]
  for(int i = 0; i < 8; i++) 
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	ddf5      	ble.n	80009fe <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  }

  // Add a message to the queue
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
  xQueueSendFromISR(CAN_rx_queue, &new_CAN_msg, &xHigherPriorityTaskWoken);
 8000a16:	aa01      	add	r2, sp, #4
 8000a18:	a902      	add	r1, sp, #8
 8000a1a:	4809      	ldr	r0, [pc, #36]	@ (8000a40 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000a1c:	6800      	ldr	r0, [r0, #0]
 8000a1e:	f003 fafb 	bl	8004018 <xQueueGenericSendFromISR>

  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	b14b      	cbz	r3, 8000a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
 8000a26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8000a32:	f3bf 8f4f 	dsb	sy
 8000a36:	f3bf 8f6f 	isb	sy
  /* Set the Flag to CAN_READY */
}
 8000a3a:	b015      	add	sp, #84	@ 0x54
 8000a3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a40:	20000110 	.word	0x20000110

08000a44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    #ifndef DEBUG
	  HAL_IWDG_Refresh(&hiwdg);
 8000a46:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <StartDefaultTask+0x10>)
 8000a48:	f001 fed2 	bl	80027f0 <HAL_IWDG_Refresh>
    #endif
	  osDelay(100);
 8000a4c:	2064      	movs	r0, #100	@ 0x64
 8000a4e:	f003 f83d 	bl	8003acc <osDelay>
  for(;;)
 8000a52:	e7f8      	b.n	8000a46 <StartDefaultTask+0x2>
 8000a54:	20000130 	.word	0x20000130

08000a58 <task_drive_state_machine>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_drive_state_machine */
void task_drive_state_machine(void *argument)
{
 8000a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN task_drive_state_machine */
  /* Infinite loop */
  for(;;)
  {
    taskENTER_CRITICAL();
 8000a5a:	f004 fb83 	bl	8005164 <vPortEnterCritical>

    drive_state_machine_handler();
 8000a5e:	f000 fc05 	bl	800126c <drive_state_machine_handler>

    taskEXIT_CRITICAL();
 8000a62:	f004 fba1 	bl	80051a8 <vPortExitCritical>
	  osDelay(DELAY_MCB_STATE_MACHINE);
 8000a66:	2032      	movs	r0, #50	@ 0x32
 8000a68:	f003 f830 	bl	8003acc <osDelay>
  for(;;)
 8000a6c:	e7f5      	b.n	8000a5a <task_drive_state_machine+0x2>

08000a6e <getCANMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getCANMessage */
void getCANMessage(void *argument)
{
 8000a6e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN getCANMessage */
	TaskGetCANMessage();
 8000a70:	f000 fc86 	bl	8001380 <TaskGetCANMessage>
  /* USER CODE END getCANMessage */
}
 8000a74:	bd08      	pop	{r3, pc}
	...

08000a78 <task_generic_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_generic_100ms */
void task_generic_100ms(void *argument)
{
 8000a78:	b508      	push	{r3, lr}
 8000a7a:	e00c      	b.n	8000a96 <task_generic_100ms+0x1e>

    osDelay(10); // We need a small delay in between sending since the tx buffer is only 2 message
    // Send MCB githash every 10000ms
    if(counter % 100 == 0)
    {
      send_mcb_githash();
 8000a7c:	f000 fa0c 	bl	8000e98 <send_mcb_githash>
    }

    counter++;
 8000a80:	4a2b      	ldr	r2, [pc, #172]	@ (8000b30 <task_generic_100ms+0xb8>)
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	6851      	ldr	r1, [r2, #4]
 8000a86:	3301      	adds	r3, #1
 8000a88:	f141 0100 	adc.w	r1, r1, #0
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	6051      	str	r1, [r2, #4]
    osDelay(90);
 8000a90:	205a      	movs	r0, #90	@ 0x5a
 8000a92:	f003 f81b 	bl	8003acc <osDelay>
    SendCANDIDDriveState();
 8000a96:	f000 fb65 	bl	8001164 <SendCANDIDDriveState>
    send_mcb_diagnostics();
 8000a9a:	f000 f9b3 	bl	8000e04 <send_mcb_diagnostics>
    osDelay(10); // We need a small delay in between sending since the tx buffer is only 2 message
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f003 f814 	bl	8003acc <osDelay>
    if(counter % 100 == 0)
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <task_generic_100ms+0xb8>)
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	6858      	ldr	r0, [r3, #4]
 8000aaa:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000aae:	0d0a      	lsrs	r2, r1, #20
 8000ab0:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8000ab4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8000ab8:	4413      	add	r3, r2
 8000aba:	f3c0 2213 	ubfx	r2, r0, #8, #20
 8000abe:	4413      	add	r3, r2
 8000ac0:	eb03 7310 	add.w	r3, r3, r0, lsr #28
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <task_generic_100ms+0xbc>)
 8000ac6:	fba2 4203 	umull	r4, r2, r2, r3
 8000aca:	08d2      	lsrs	r2, r2, #3
 8000acc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ad0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	1acb      	subs	r3, r1, r3
 8000ad8:	f160 0500 	sbc.w	r5, r0, #0
 8000adc:	4c16      	ldr	r4, [pc, #88]	@ (8000b38 <task_generic_100ms+0xc0>)
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <task_generic_100ms+0xc4>)
 8000ae0:	fb03 f202 	mul.w	r2, r3, r2
 8000ae4:	fb04 2205 	mla	r2, r4, r5, r2
 8000ae8:	fba3 3404 	umull	r3, r4, r3, r4
 8000aec:	4422      	add	r2, r4
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000af4:	0892      	lsrs	r2, r2, #2
 8000af6:	eb13 0c03 	adds.w	ip, r3, r3
 8000afa:	eb42 0e02 	adc.w	lr, r2, r2
 8000afe:	eb1c 0c03 	adds.w	ip, ip, r3
 8000b02:	eb42 0e0e 	adc.w	lr, r2, lr
 8000b06:	ea4f 144e 	mov.w	r4, lr, lsl #5
 8000b0a:	ea44 64dc 	orr.w	r4, r4, ip, lsr #27
 8000b0e:	ea4f 154c 	mov.w	r5, ip, lsl #5
 8000b12:	eb1c 0c05 	adds.w	ip, ip, r5
 8000b16:	eb4e 0e04 	adc.w	lr, lr, r4
 8000b1a:	eb1c 0c03 	adds.w	ip, ip, r3
 8000b1e:	eb42 020e 	adc.w	r2, r2, lr
 8000b22:	ebb1 010c 	subs.w	r1, r1, ip
 8000b26:	eb60 0002 	sbc.w	r0, r0, r2
 8000b2a:	4301      	orrs	r1, r0
 8000b2c:	d0a6      	beq.n	8000a7c <task_generic_100ms+0x4>
 8000b2e:	e7a7      	b.n	8000a80 <task_generic_100ms+0x8>
 8000b30:	20000118 	.word	0x20000118
 8000b34:	51eb851f 	.word	0x51eb851f
 8000b38:	c28f5c29 	.word	0xc28f5c29
 8000b3c:	8f5c28f5 	.word	0x8f5c28f5

08000b40 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000b40:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <MX_FREERTOS_Init+0x3c>)
 8000b44:	2100      	movs	r1, #0
 8000b46:	480e      	ldr	r0, [pc, #56]	@ (8000b80 <MX_FREERTOS_Init+0x40>)
 8000b48:	f002 ff4a 	bl	80039e0 <osThreadNew>
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_FREERTOS_Init+0x44>)
 8000b4e:	6018      	str	r0, [r3, #0]
  drive_state_machineHandle = osThreadNew(task_drive_state_machine, NULL, &drive_state_machine_attributes);
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <MX_FREERTOS_Init+0x48>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_FREERTOS_Init+0x4c>)
 8000b56:	f002 ff43 	bl	80039e0 <osThreadNew>
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <MX_FREERTOS_Init+0x50>)
 8000b5c:	6018      	str	r0, [r3, #0]
  GetCANMessageHandle = osThreadNew(getCANMessage, NULL, &GetCANMessage_attributes);
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <MX_FREERTOS_Init+0x54>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_FREERTOS_Init+0x58>)
 8000b64:	f002 ff3c 	bl	80039e0 <osThreadNew>
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_FREERTOS_Init+0x5c>)
 8000b6a:	6018      	str	r0, [r3, #0]
  generic_100msHandle = osThreadNew(task_generic_100ms, NULL, &generic_100ms_attributes);
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <MX_FREERTOS_Init+0x60>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <MX_FREERTOS_Init+0x64>)
 8000b72:	f002 ff35 	bl	80039e0 <osThreadNew>
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_FREERTOS_Init+0x68>)
 8000b78:	6018      	str	r0, [r3, #0]
}
 8000b7a:	bd08      	pop	{r3, pc}
 8000b7c:	080056fc 	.word	0x080056fc
 8000b80:	08000a45 	.word	0x08000a45
 8000b84:	2000012c 	.word	0x2000012c
 8000b88:	080056d8 	.word	0x080056d8
 8000b8c:	08000a59 	.word	0x08000a59
 8000b90:	20000128 	.word	0x20000128
 8000b94:	080056b4 	.word	0x080056b4
 8000b98:	08000a6f 	.word	0x08000a6f
 8000b9c:	20000124 	.word	0x20000124
 8000ba0:	08005690 	.word	0x08005690
 8000ba4:	08000a79 	.word	0x08000a79
 8000ba8:	20000120 	.word	0x20000120

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	9404      	str	r4, [sp, #16]
 8000bb6:	9405      	str	r4, [sp, #20]
 8000bb8:	9406      	str	r4, [sp, #24]
 8000bba:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <MX_GPIO_Init+0x120>)
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	f042 0210 	orr.w	r2, r2, #16
 8000bc4:	619a      	str	r2, [r3, #24]
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	f002 0210 	and.w	r2, r2, #16
 8000bcc:	9200      	str	r2, [sp, #0]
 8000bce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	f042 0220 	orr.w	r2, r2, #32
 8000bd6:	619a      	str	r2, [r3, #24]
 8000bd8:	699a      	ldr	r2, [r3, #24]
 8000bda:	f002 0220 	and.w	r2, r2, #32
 8000bde:	9201      	str	r2, [sp, #4]
 8000be0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	f042 0204 	orr.w	r2, r2, #4
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	f002 0204 	and.w	r2, r2, #4
 8000bf0:	9202      	str	r2, [sp, #8]
 8000bf2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	699a      	ldr	r2, [r3, #24]
 8000bf6:	f042 0208 	orr.w	r2, r2, #8
 8000bfa:	619a      	str	r2, [r3, #24]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	9303      	str	r3, [sp, #12]
 8000c04:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT2_Pin|LED_OUT1_Pin, GPIO_PIN_RESET);
 8000c06:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000cd0 <MX_GPIO_Init+0x124>
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	210c      	movs	r1, #12
 8000c0e:	4648      	mov	r0, r9
 8000c10:	f001 fda5 	bl	800275e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c14:	4f2f      	ldr	r7, [pc, #188]	@ (8000cd4 <MX_GPIO_Init+0x128>)
 8000c16:	4622      	mov	r2, r4
 8000c18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f001 fd9e 	bl	800275e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REGEN_EN_Pin;
 8000c22:	2601      	movs	r6, #1
 8000c24:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c28:	2502      	movs	r5, #2
 8000c2a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(REGEN_EN_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	a904      	add	r1, sp, #16
 8000c2e:	4638      	mov	r0, r7
 8000c30:	f001 fc72 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SWITCH_IN2_Pin|SWITCH_IN1_Pin;
 8000c34:	f04f 0806 	mov.w	r8, #6
 8000c38:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	a904      	add	r1, sp, #16
 8000c42:	4638      	mov	r0, r7
 8000c44:	f001 fc68 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_OUT2_Pin|LED_OUT1_Pin;
 8000c48:	230c      	movs	r3, #12
 8000c4a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	a904      	add	r1, sp, #16
 8000c54:	4648      	mov	r0, r9
 8000c56:	f001 fc5f 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRUISE_DWN_Pin|CRUISE_UP_Pin|NEXT_SCREEN_Pin|CRUISE_TOGGLE_Pin;
 8000c5a:	23f0      	movs	r3, #240	@ 0xf0
 8000c5c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f8df a078 	ldr.w	sl, [pc, #120]	@ 8000cd8 <MX_GPIO_Init+0x12c>
 8000c62:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	a904      	add	r1, sp, #16
 8000c6a:	4648      	mov	r0, r9
 8000c6c:	f001 fc54 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BRK_IN_Pin;
 8000c70:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c72:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c76:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(BRK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c78:	a904      	add	r1, sp, #16
 8000c7a:	4818      	ldr	r0, [pc, #96]	@ (8000cdc <MX_GPIO_Init+0x130>)
 8000c7c:	f001 fc4c 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c84:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	a904      	add	r1, sp, #16
 8000c8e:	4638      	mov	r0, r7
 8000c90:	f001 fc42 	bl	8002518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000c94:	4622      	mov	r2, r4
 8000c96:	2105      	movs	r1, #5
 8000c98:	4640      	mov	r0, r8
 8000c9a:	f001 fc1f 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	f001 fc2c 	bl	80024fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f001 fc17 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 fc24 	bl	80024fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	2017      	movs	r0, #23
 8000cba:	f001 fc0f 	bl	80024dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f001 fc1c 	bl	80024fc <HAL_NVIC_EnableIRQ>

}
 8000cc4:	b008      	add	sp, #32
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40010c00 	.word	0x40010c00

08000ce0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ce0:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ce2:	4807      	ldr	r0, [pc, #28]	@ (8000d00 <MX_IWDG_Init+0x20>)
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <MX_IWDG_Init+0x24>)
 8000ce6:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 2000;
 8000cec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000cf0:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000cf2:	f001 fd51 	bl	8002798 <HAL_IWDG_Init>
 8000cf6:	b900      	cbnz	r0, 8000cfa <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000cf8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cfa:	f000 f811 	bl	8000d20 <Error_Handler>
}
 8000cfe:	e7fb      	b.n	8000cf8 <MX_IWDG_Init+0x18>
 8000d00:	20000130 	.word	0x20000130
 8000d04:	40003000 	.word	0x40003000

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d0a:	6802      	ldr	r2, [r0, #0]
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d000      	beq.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000d12:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000d14:	f000 fce4 	bl	80016e0 <HAL_IncTick>
}
 8000d18:	e7fb      	b.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000d1a:	bf00      	nop
 8000d1c:	40000800 	.word	0x40000800

08000d20 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <Error_Handler+0x2>

08000d24 <SystemClock_Config>:
{
 8000d24:	b500      	push	{lr}
 8000d26:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d28:	2228      	movs	r2, #40	@ 0x28
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	a80c      	add	r0, sp, #48	@ 0x30
 8000d2e:	f004 fc49 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d32:	2300      	movs	r3, #0
 8000d34:	9307      	str	r3, [sp, #28]
 8000d36:	9308      	str	r3, [sp, #32]
 8000d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d3c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	9303      	str	r3, [sp, #12]
 8000d44:	9304      	str	r3, [sp, #16]
 8000d46:	9305      	str	r3, [sp, #20]
 8000d48:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d52:	2210      	movs	r2, #16
 8000d54:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d56:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d5c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d60:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	a80c      	add	r0, sp, #48	@ 0x30
 8000d64:	f001 fd60 	bl	8002828 <HAL_RCC_OscConfig>
 8000d68:	b9c0      	cbnz	r0, 8000d9c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2102      	movs	r1, #2
 8000d70:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d7a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7e:	a807      	add	r0, sp, #28
 8000d80:	f001 ff84 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000d84:	b960      	cbnz	r0, 8000da0 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d86:	2302      	movs	r3, #2
 8000d88:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	a801      	add	r0, sp, #4
 8000d90:	f002 f876 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	b930      	cbnz	r0, 8000da4 <SystemClock_Config+0x80>
}
 8000d96:	b017      	add	sp, #92	@ 0x5c
 8000d98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d9c:	f7ff ffc0 	bl	8000d20 <Error_Handler>
    Error_Handler();
 8000da0:	f7ff ffbe 	bl	8000d20 <Error_Handler>
    Error_Handler();
 8000da4:	f7ff ffbc 	bl	8000d20 <Error_Handler>

08000da8 <main>:
{
 8000da8:	b508      	push	{r3, lr}
  HAL_Init();
 8000daa:	f000 fc87 	bl	80016bc <HAL_Init>
  SystemClock_Config();
 8000dae:	f7ff ffb9 	bl	8000d24 <SystemClock_Config>
  MX_GPIO_Init();
 8000db2:	f7ff fefb 	bl	8000bac <MX_GPIO_Init>
  MX_CAN_Init();
 8000db6:	f7ff fd97 	bl	80008e8 <MX_CAN_Init>
  MX_ADC1_Init();
 8000dba:	f7ff fd0d 	bl	80007d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000dbe:	f000 fbf7 	bl	80015b0 <MX_TIM2_Init>
  MX_IWDG_Init();
 8000dc2:	f7ff ff8d 	bl	8000ce0 <MX_IWDG_Init>
  CanFilterSetup();
 8000dc6:	f7ff fd73 	bl	80008b0 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 8000dca:	4c0c      	ldr	r4, [pc, #48]	@ (8000dfc <main+0x54>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f001 f8a3 	bl	8001f18 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f001 f9f7 	bl	80021c8 <HAL_CAN_ActivateNotification>
  TIM2->CCR2 = 5000;
 8000dda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000de4:	2104      	movs	r1, #4
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <main+0x58>)
 8000de8:	f002 fcf8 	bl	80037dc <HAL_TIM_PWM_Start>
  osKernelInitialize();
 8000dec:	f002 fdb0 	bl	8003950 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000df0:	f7ff fea6 	bl	8000b40 <MX_FREERTOS_Init>
  osKernelStart();
 8000df4:	f002 fdce 	bl	8003994 <osKernelStart>
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <main+0x50>
 8000dfa:	bf00      	nop
 8000dfc:	200000e4 	.word	0x200000e4
 8000e00:	200001c8 	.word	0x200001c8

08000e04 <send_mcb_diagnostics>:
 * Bit 16: pedal ADC out of range
 * Bit 17: regen on
 * Bit 18: cruise on
 */
void send_mcb_diagnostics()
{
 8000e04:	b500      	push	{lr}
 8000e06:	b083      	sub	sp, #12
	uint8_t data_send[CAN_DATA_LENGTH] = {0};
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	9301      	str	r3, [sp, #4]

	data_send[0] = g_throttle_ADC & 0xFF;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <send_mcb_diagnostics+0x80>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	f88d 3000 	strb.w	r3, [sp]
	data_send[1] = (g_throttle_ADC >> 8) & 0xFF;
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	f88d 3001 	strb.w	r3, [sp, #1]


	if (input_flags.throttle_ADC_out_of_range == true)	
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <send_mcb_diagnostics+0x84>)
 8000e1e:	7a1b      	ldrb	r3, [r3, #8]
 8000e20:	b113      	cbz	r3, 8000e28 <send_mcb_diagnostics+0x24>
	{
		SETBIT(data_send[2], 0);
 8000e22:	2301      	movs	r3, #1
 8000e24:	f88d 3002 	strb.w	r3, [sp, #2]
	}

	if (input_flags.regen_enabled == true)
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <send_mcb_diagnostics+0x84>)
 8000e2a:	789b      	ldrb	r3, [r3, #2]
 8000e2c:	b12b      	cbz	r3, 8000e3a <send_mcb_diagnostics+0x36>
	{
		SETBIT(data_send[2], 1);
 8000e2e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f88d 3002 	strb.w	r3, [sp, #2]
	}

	if (input_flags.cruise_enabled == true)
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <send_mcb_diagnostics+0x84>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b12b      	cbz	r3, 8000e4c <send_mcb_diagnostics+0x48>
	{
		SETBIT(data_send[2], 2);
 8000e40:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	f88d 3002 	strb.w	r3, [sp, #2]
	}

	if (input_flags.mech_brake_pressed == true)
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <send_mcb_diagnostics+0x84>)
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b12b      	cbz	r3, 8000e5e <send_mcb_diagnostics+0x5a>
	{
		SETBIT(data_send[2], 3);
 8000e52:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	f88d 3002 	strb.w	r3, [sp, #2]
	}

	if (input_flags.MDI_communication_fault == true)
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <send_mcb_diagnostics+0x84>)
 8000e60:	7a5b      	ldrb	r3, [r3, #9]
 8000e62:	b12b      	cbz	r3, 8000e70 <send_mcb_diagnostics+0x6c>
	{
		SETBIT(data_send[2], 4);
 8000e64:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	f88d 3002 	strb.w	r3, [sp, #2]
	}

	HAL_CAN_AddTxMessage(&hcan, &mcb_diagnostics, data_send, &can_mailbox);
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <send_mcb_diagnostics+0x88>)
 8000e72:	466a      	mov	r2, sp
 8000e74:	4906      	ldr	r1, [pc, #24]	@ (8000e90 <send_mcb_diagnostics+0x8c>)
 8000e76:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <send_mcb_diagnostics+0x90>)
 8000e78:	f001 f87c 	bl	8001f74 <HAL_CAN_AddTxMessage>

	return;
}
 8000e7c:	b003      	add	sp, #12
 8000e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e82:	bf00      	nop
 8000e84:	20000164 	.word	0x20000164
 8000e88:	20000174 	.word	0x20000174
 8000e8c:	2000010c 	.word	0x2000010c
 8000e90:	20000018 	.word	0x20000018
 8000e94:	200000e4 	.word	0x200000e4

08000e98 <send_mcb_githash>:

/* 
 * Sends the MCB githash over CAN
 */
void send_mcb_githash()
{
 8000e98:	b500      	push	{lr}
 8000e9a:	b083      	sub	sp, #12
	uint8_t data_send[CAN_DATA_LENGTH];
	strncpy((char*)data_send, GITHASH, CAN_DATA_LENGTH);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <send_mcb_githash+0x20>)
 8000e9e:	466a      	mov	r2, sp
 8000ea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ea4:	e882 0003 	stmia.w	r2, {r0, r1}
	HAL_CAN_AddTxMessage(&hcan, &mcb_githash, data_send, &can_mailbox);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <send_mcb_githash+0x24>)
 8000eaa:	4905      	ldr	r1, [pc, #20]	@ (8000ec0 <send_mcb_githash+0x28>)
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <send_mcb_githash+0x2c>)
 8000eae:	f001 f861 	bl	8001f74 <HAL_CAN_AddTxMessage>
	return;
}
 8000eb2:	b003      	add	sp, #12
 8000eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000eb8:	08005720 	.word	0x08005720
 8000ebc:	2000010c 	.word	0x2000010c
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	200000e4 	.word	0x200000e4

08000ec8 <TransitionDRIVEstate>:
		return GetMotorCommand(g_throttle, VELOCITY_REGEN_DISABLED);
	}
}

void TransitionDRIVEstate( InputFlags input_flags, DriveState * state)
{
 8000ec8:	b084      	sub	sp, #16
 8000eca:	f10d 0c10 	add.w	ip, sp, #16
 8000ece:	e90c 0007 	stmdb	ip, {r0, r1, r2}
	if( input_flags.switch_pos_reverse && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
 8000ed2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000ed6:	b14a      	cbz	r2, 8000eec <TransitionDRIVEstate+0x24>
 8000ed8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000edc:	b132      	cbz	r2, 8000eec <TransitionDRIVEstate+0x24>
 8000ede:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000ee2:	b11a      	cbz	r2, 8000eec <TransitionDRIVEstate+0x24>
		*state = REVERSE;
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	701a      	strb	r2, [r3, #0]
	else if( input_flags.switch_pos_park && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
		*state = PARK;
}
 8000ee8:	b004      	add	sp, #16
 8000eea:	4770      	bx	lr
	else if( input_flags.switch_pos_park && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
 8000eec:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d0f9      	beq.n	8000ee8 <TransitionDRIVEstate+0x20>
 8000ef4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d0f5      	beq.n	8000ee8 <TransitionDRIVEstate+0x20>
 8000efc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	d0f1      	beq.n	8000ee8 <TransitionDRIVEstate+0x20>
		*state = PARK;
 8000f04:	2203      	movs	r2, #3
 8000f06:	701a      	strb	r2, [r3, #0]
}
 8000f08:	e7ee      	b.n	8000ee8 <TransitionDRIVEstate+0x20>

08000f0a <TransitionREVERSEstate>:
	// Regen disabled in reverse on MDI, dont need to check input_flags.regen_enabled
	return GetMotorCommand(g_throttle, VELOCITY_REVERSE);
}

void TransitionREVERSEstate(InputFlags input_flags, DriveState * state)
{
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	f10d 0c10 	add.w	ip, sp, #16
 8000f10:	e90c 0007 	stmdb	ip, {r0, r1, r2}
	if ( input_flags.switch_pos_drive && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
 8000f14:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000f18:	b14a      	cbz	r2, 8000f2e <TransitionREVERSEstate+0x24>
 8000f1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000f1e:	b132      	cbz	r2, 8000f2e <TransitionREVERSEstate+0x24>
 8000f20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f24:	b11a      	cbz	r2, 8000f2e <TransitionREVERSEstate+0x24>
		*state = DRIVE;
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
	else if ( input_flags.switch_pos_park && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
		*state = PARK;
}
 8000f2a:	b004      	add	sp, #16
 8000f2c:	4770      	bx	lr
	else if ( input_flags.switch_pos_park && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
 8000f2e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d0f9      	beq.n	8000f2a <TransitionREVERSEstate+0x20>
 8000f36:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d0f5      	beq.n	8000f2a <TransitionREVERSEstate+0x20>
 8000f3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d0f1      	beq.n	8000f2a <TransitionREVERSEstate+0x20>
		*state = PARK;
 8000f46:	2203      	movs	r2, #3
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	e7ee      	b.n	8000f2a <TransitionREVERSEstate+0x20>

08000f4c <TransitionPARKstate>:
{
	return GetMotorCommand(0.0, VELOCITY_REGEN_DISABLED);		// COASTING
}

void TransitionPARKstate(InputFlags input_flags, DriveState * state)
{
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	f10d 0c10 	add.w	ip, sp, #16
 8000f52:	e90c 0007 	stmdb	ip, {r0, r1, r2}
	if ( input_flags.switch_pos_drive && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed )
 8000f56:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8000f5a:	b14a      	cbz	r2, 8000f70 <TransitionPARKstate+0x24>
 8000f5c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000f60:	b132      	cbz	r2, 8000f70 <TransitionPARKstate+0x24>
 8000f62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f66:	b11a      	cbz	r2, 8000f70 <TransitionPARKstate+0x24>
		*state = DRIVE;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
	else if ( input_flags.switch_pos_reverse && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
		*state = REVERSE;
}
 8000f6c:	b004      	add	sp, #16
 8000f6e:	4770      	bx	lr
	else if ( input_flags.switch_pos_reverse && input_flags.velocity_under_threshold && input_flags.mech_brake_pressed)
 8000f70:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d0f9      	beq.n	8000f6c <TransitionPARKstate+0x20>
 8000f78:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d0f5      	beq.n	8000f6c <TransitionPARKstate+0x20>
 8000f80:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d0f1      	beq.n	8000f6c <TransitionPARKstate+0x20>
		*state = REVERSE;
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
}
 8000f8c:	e7ee      	b.n	8000f6c <TransitionPARKstate+0x20>
	...

08000f90 <ParseCANVelocity>:

/*
 *  Parses CAN message for velocity
 */
void ParseCANVelocity(uint8_t * CANMessageData)
{
 8000f90:	b510      	push	{r4, lr}
 8000f92:	b082      	sub	sp, #8
	FloatBytes velocity;
	for(int i = 0; i < (sizeof(float)/sizeof(uint8_t)); i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	e007      	b.n	8000fa8 <ParseCANVelocity+0x18>
	{
		velocity.bytes[i] = CANMessageData[i + 4]; // Vehicle Velocity is stored in bits 32-63.
 8000f98:	18c2      	adds	r2, r0, r3
 8000f9a:	7911      	ldrb	r1, [r2, #4]
 8000f9c:	f103 0208 	add.w	r2, r3, #8
 8000fa0:	446a      	add	r2, sp
 8000fa2:	f802 1c04 	strb.w	r1, [r2, #-4]
	for(int i = 0; i < (sizeof(float)/sizeof(uint8_t)); i++)
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d9f5      	bls.n	8000f98 <ParseCANVelocity+0x8>
	}
	SET_CYCLIC_DATA(vehicle_velocity, velocity.float_value);
 8000fac:	4c03      	ldr	r4, [pc, #12]	@ (8000fbc <ParseCANVelocity+0x2c>)
 8000fae:	9b01      	ldr	r3, [sp, #4]
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	f000 fba1 	bl	80016f8 <HAL_GetTick>
 8000fb6:	6060      	str	r0, [r4, #4]
}
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd10      	pop	{r4, pc}
 8000fbc:	2000007c 	.word	0x2000007c

08000fc0 <GetMotorCommand>:
 *  Returns a MotorCommand struct based on the input throttle and velocity arguments
 */
MotorCommand GetMotorCommand(float throttle, float velocity)
{
	MotorCommand motorCommand;
	motorCommand.throttle = throttle;
 8000fc0:	6001      	str	r1, [r0, #0]
	motorCommand.velocity = velocity;
 8000fc2:	6042      	str	r2, [r0, #4]
	return motorCommand;
}
 8000fc4:	4770      	bx	lr
	...

08000fc8 <DoStateDRIVE>:
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	4604      	mov	r4, r0
 8000fce:	a804      	add	r0, sp, #16
 8000fd0:	e900 000e 	stmdb	r0, {r1, r2, r3}
	if ( input_flags.mech_brake_pressed )
 8000fd4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000fd8:	b94b      	cbnz	r3, 8000fee <DoStateDRIVE+0x26>
	if (input_flags.regen_enabled) // regen switch on and battery isn't requesting regen to be turned off
 8000fda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000fde:	b173      	cbz	r3, 8000ffe <DoStateDRIVE+0x36>
		return GetMotorCommand(g_throttle, VELOCITY_FORWARD);
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <DoStateDRIVE+0x44>)
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <DoStateDRIVE+0x48>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ffea 	bl	8000fc0 <GetMotorCommand>
 8000fec:	e004      	b.n	8000ff8 <DoStateDRIVE+0x30>
		return GetMotorCommand(0.0, VELOCITY_REGEN_DISABLED);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff ffe4 	bl	8000fc0 <GetMotorCommand>
}
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd10      	pop	{r4, pc}
		return GetMotorCommand(g_throttle, VELOCITY_REGEN_DISABLED);
 8000ffe:	2200      	movs	r2, #0
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <DoStateDRIVE+0x48>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4620      	mov	r0, r4
 8001006:	f7ff ffdb 	bl	8000fc0 <GetMotorCommand>
 800100a:	e7f5      	b.n	8000ff8 <DoStateDRIVE+0x30>
 800100c:	42c80000 	.word	0x42c80000
 8001010:	20000168 	.word	0x20000168

08001014 <DoStateREVERSE>:
{
 8001014:	b510      	push	{r4, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	4604      	mov	r4, r0
 800101a:	a804      	add	r0, sp, #16
 800101c:	e900 000e 	stmdb	r0, {r1, r2, r3}
	if ( input_flags.mech_brake_pressed )
 8001020:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001024:	b943      	cbnz	r3, 8001038 <DoStateREVERSE+0x24>
	return GetMotorCommand(g_throttle, VELOCITY_REVERSE);
 8001026:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <DoStateREVERSE+0x30>)
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <DoStateREVERSE+0x34>)
 800102a:	6819      	ldr	r1, [r3, #0]
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff ffc7 	bl	8000fc0 <GetMotorCommand>
}
 8001032:	4620      	mov	r0, r4
 8001034:	b004      	add	sp, #16
 8001036:	bd10      	pop	{r4, pc}
		return GetMotorCommand(0.0, VELOCITY_REGEN_DISABLED);
 8001038:	2100      	movs	r1, #0
 800103a:	460a      	mov	r2, r1
 800103c:	4620      	mov	r0, r4
 800103e:	f7ff ffbf 	bl	8000fc0 <GetMotorCommand>
 8001042:	e7f6      	b.n	8001032 <DoStateREVERSE+0x1e>
 8001044:	c2c80000 	.word	0xc2c80000
 8001048:	20000168 	.word	0x20000168

0800104c <DoStatePARK>:
{
 800104c:	b510      	push	{r4, lr}
 800104e:	4604      	mov	r4, r0
	return GetMotorCommand(0.0, VELOCITY_REGEN_DISABLED);		// COASTING
 8001050:	2100      	movs	r1, #0
 8001052:	460a      	mov	r2, r1
 8001054:	f7ff ffb4 	bl	8000fc0 <GetMotorCommand>
}
 8001058:	4620      	mov	r0, r4
 800105a:	bd10      	pop	{r4, pc}

0800105c <SendCANMotorCommand>:

/*
 *   Takes current value and velocity float value and sends in via CAN as an array of bytes.
 */
void SendCANMotorCommand(MotorCommand motorCommand)
{
 800105c:	b510      	push	{r4, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	466b      	mov	r3, sp
 8001062:	e883 0003 	stmia.w	r3, {r0, r1}
	union FloatBytes throttle;
	union FloatBytes velocity;

	throttle.float_value = motorCommand.throttle;
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	9305      	str	r3, [sp, #20]
	velocity.float_value = motorCommand.velocity;
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	9304      	str	r3, [sp, #16]

	uint8_t data_send[CAN_DATA_LENGTH];
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	e00f      	b.n	8001092 <SendCANMotorCommand+0x36>
	{
		data_send[i] = velocity.bytes[i];
 8001072:	f103 0218 	add.w	r2, r3, #24
 8001076:	eb0d 0102 	add.w	r1, sp, r2
 800107a:	f811 2c08 	ldrb.w	r2, [r1, #-8]
 800107e:	f801 2c10 	strb.w	r2, [r1, #-16]
	    data_send[4 + i] = throttle.bytes[i];
 8001082:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 8001086:	f103 021c 	add.w	r2, r3, #28
 800108a:	446a      	add	r2, sp
 800108c:	f802 1c10 	strb.w	r1, [r2, #-16]
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 8001090:	3301      	adds	r3, #1
 8001092:	2b03      	cmp	r3, #3
 8001094:	dded      	ble.n	8001072 <SendCANMotorCommand+0x16>
	}
	
	if (HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox) == HAL_OK) {
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <SendCANMotorCommand+0x60>)
 8001098:	aa02      	add	r2, sp, #8
 800109a:	4909      	ldr	r1, [pc, #36]	@ (80010c0 <SendCANMotorCommand+0x64>)
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <SendCANMotorCommand+0x68>)
 800109e:	f000 ff69 	bl	8001f74 <HAL_CAN_AddTxMessage>
 80010a2:	b108      	cbz	r0, 80010a8 <SendCANMotorCommand+0x4c>
		HAL_GPIO_TogglePin(LED_OUT1_GPIO_Port, LED_OUT1_Pin);
		HAL_GPIO_TogglePin(LED_OUT2_GPIO_Port, LED_OUT2_Pin);
	}
	
}
 80010a4:	b006      	add	sp, #24
 80010a6:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(LED_OUT1_GPIO_Port, LED_OUT1_Pin);
 80010a8:	4c07      	ldr	r4, [pc, #28]	@ (80010c8 <SendCANMotorCommand+0x6c>)
 80010aa:	2108      	movs	r1, #8
 80010ac:	4620      	mov	r0, r4
 80010ae:	f001 fb5c 	bl	800276a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_OUT2_GPIO_Port, LED_OUT2_Pin);
 80010b2:	2104      	movs	r1, #4
 80010b4:	4620      	mov	r0, r4
 80010b6:	f001 fb58 	bl	800276a <HAL_GPIO_TogglePin>
}
 80010ba:	e7f3      	b.n	80010a4 <SendCANMotorCommand+0x48>
 80010bc:	2000010c 	.word	0x2000010c
 80010c0:	20000060 	.word	0x20000060
 80010c4:	200000e4 	.word	0x200000e4
 80010c8:	40010800 	.word	0x40010800

080010cc <normalize_adc_value>:

/*
 *  Function used for normalizing(0-1) and accounting for deadzone of ADC inputs.
 */
float normalize_adc_value(uint16_t value)
{
 80010cc:	b508      	push	{r3, lr}
	// TODO: Use a case statement + clean up
	if (value <= ADC_LOWER_DEADZONE || value > ADC_MAX_FOR_FULL_THROTTLE) {					// Shorted to ground or beyond pedal compression
 80010ce:	f2a0 3385 	subw	r3, r0, #901	@ 0x385
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f640 421b 	movw	r2, #3099	@ 0xc1b
 80010d8:	4293      	cmp	r3, r2
 80010da:	d812      	bhi.n	8001102 <normalize_adc_value+0x36>
		input_flags.throttle_ADC_out_of_range = true;
		return 0.0;
	} else if (value > ADC_FOR_NO_SPIN && value < ADC_MIN_FOR_FULL_THROTTLE) {				// Pedal compressed between initial and at brake cable
 80010dc:	f2a0 5315 	subw	r3, r0, #1301	@ 0x515
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	f5b3 7f09 	cmp.w	r3, #548	@ 0x224
 80010e6:	d911      	bls.n	800110c <normalize_adc_value+0x40>
		input_flags.throttle_ADC_out_of_range = false;
		float normalized_value = (float)((float)(value - ADC_FOR_NO_SPIN) / (float)(ADC_MIN_FOR_FULL_THROTTLE - ADC_FOR_NO_SPIN));
		return normalized_value;
	} else if (value >= ADC_MIN_FOR_FULL_THROTTLE && value <= ADC_MAX_FOR_FULL_THROTTLE) {	// Pedal compressed between brake cable to 1 inch past cable
 80010e8:	f2a0 703a 	subw	r0, r0, #1850	@ 0x73a
 80010ec:	b280      	uxth	r0, r0
 80010ee:	f640 0366 	movw	r3, #2150	@ 0x866
 80010f2:	4298      	cmp	r0, r3
 80010f4:	d815      	bhi.n	8001122 <normalize_adc_value+0x56>
		input_flags.throttle_ADC_out_of_range = false;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <normalize_adc_value+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	721a      	strb	r2, [r3, #8]
		return 1.0;
 80010fc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001100:	e003      	b.n	800110a <normalize_adc_value+0x3e>
		input_flags.throttle_ADC_out_of_range = true;
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <normalize_adc_value+0x60>)
 8001104:	2201      	movs	r2, #1
 8001106:	721a      	strb	r2, [r3, #8]
		return 0.0;
 8001108:	2000      	movs	r0, #0
	} else {																				// Default If pedal is not pressed
		input_flags.throttle_ADC_out_of_range = false;
		return 0.0;
	}
}
 800110a:	bd08      	pop	{r3, pc}
		input_flags.throttle_ADC_out_of_range = false;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <normalize_adc_value+0x60>)
 800110e:	2200      	movs	r2, #0
 8001110:	721a      	strb	r2, [r3, #8]
		float normalized_value = (float)((float)(value - ADC_FOR_NO_SPIN) / (float)(ADC_MIN_FOR_FULL_THROTTLE - ADC_FOR_NO_SPIN));
 8001112:	f2a0 5014 	subw	r0, r0, #1300	@ 0x514
 8001116:	f7ff f945 	bl	80003a4 <__aeabi_i2f>
 800111a:	4905      	ldr	r1, [pc, #20]	@ (8001130 <normalize_adc_value+0x64>)
 800111c:	f7ff fa4a 	bl	80005b4 <__aeabi_fdiv>
		return normalized_value;
 8001120:	e7f3      	b.n	800110a <normalize_adc_value+0x3e>
		input_flags.throttle_ADC_out_of_range = false;
 8001122:	4b02      	ldr	r3, [pc, #8]	@ (800112c <normalize_adc_value+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	721a      	strb	r2, [r3, #8]
		return 0.0;
 8001128:	2000      	movs	r0, #0
 800112a:	e7ee      	b.n	800110a <normalize_adc_value+0x3e>
 800112c:	20000174 	.word	0x20000174
 8001130:	44098000 	.word	0x44098000

08001134 <SendCANDIDNextPage>:

/*
 *  Function used for sending the Next Page command to DID.
 */
void SendCANDIDNextPage()
{
 8001134:	b500      	push	{lr}
 8001136:	b083      	sub	sp, #12
	uint8_t data_send[CAN_DATA_LENGTH] = {0};
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	9301      	str	r3, [sp, #4]
	SETBIT(data_send[0], 0);
 800113e:	2301      	movs	r3, #1
 8001140:	f88d 3000 	strb.w	r3, [sp]
	HAL_CAN_AddTxMessage(&hcan, &DID_next_page_header, data_send, &can_mailbox);
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <SendCANDIDNextPage+0x24>)
 8001146:	466a      	mov	r2, sp
 8001148:	4904      	ldr	r1, [pc, #16]	@ (800115c <SendCANDIDNextPage+0x28>)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <SendCANDIDNextPage+0x2c>)
 800114c:	f000 ff12 	bl	8001f74 <HAL_CAN_AddTxMessage>
}
 8001150:	b003      	add	sp, #12
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	2000010c 	.word	0x2000010c
 800115c:	20000048 	.word	0x20000048
 8001160:	200000e4 	.word	0x200000e4

08001164 <SendCANDIDDriveState>:

/*
 * 	Sends a CAN message to the DID that contains the drive state of the MCB to display to the driver
 */
void SendCANDIDDriveState()
{
 8001164:	b500      	push	{lr}
 8001166:	b083      	sub	sp, #12
	uint8_t data_send[CAN_DATA_LENGTH] = {0};
 8001168:	2300      	movs	r3, #0
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	9301      	str	r3, [sp, #4]
	data_send[0] = state;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <SendCANDIDDriveState+0x24>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	f88d 3000 	strb.w	r3, [sp]
	HAL_CAN_AddTxMessage(&hcan, &drive_state_header, data_send, &can_mailbox);
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <SendCANDIDDriveState+0x28>)
 8001178:	466a      	mov	r2, sp
 800117a:	4905      	ldr	r1, [pc, #20]	@ (8001190 <SendCANDIDDriveState+0x2c>)
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <SendCANDIDDriveState+0x30>)
 800117e:	f000 fef9 	bl	8001f74 <HAL_CAN_AddTxMessage>
}
 8001182:	b003      	add	sp, #12
 8001184:	f85d fb04 	ldr.w	pc, [sp], #4
 8001188:	20000078 	.word	0x20000078
 800118c:	2000010c 	.word	0x2000010c
 8001190:	20000030 	.word	0x20000030
 8001194:	200000e4 	.word	0x200000e4

08001198 <GetSwitchState>:

void GetSwitchState(InputFlags * input_flags)
{
 8001198:	b510      	push	{r4, lr}
 800119a:	4604      	mov	r4, r0
	if( !HAL_GPIO_ReadPin(SWITCH_IN1_GPIO_Port, SWITCH_IN1_Pin) && !HAL_GPIO_ReadPin(SWITCH_IN2_GPIO_Port, SWITCH_IN2_Pin) )
 800119c:	2104      	movs	r1, #4
 800119e:	4814      	ldr	r0, [pc, #80]	@ (80011f0 <GetSwitchState+0x58>)
 80011a0:	f001 fad6 	bl	8002750 <HAL_GPIO_ReadPin>
 80011a4:	b968      	cbnz	r0, 80011c2 <GetSwitchState+0x2a>
 80011a6:	2102      	movs	r1, #2
 80011a8:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 80011ac:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80011b0:	f001 face 	bl	8002750 <HAL_GPIO_ReadPin>
 80011b4:	b928      	cbnz	r0, 80011c2 <GetSwitchState+0x2a>
	{
		// Todo: Change to enum instead of a bool for each one
		input_flags->switch_pos_drive = false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	7163      	strb	r3, [r4, #5]
		input_flags->switch_pos_reverse = true;
 80011ba:	2201      	movs	r2, #1
 80011bc:	71a2      	strb	r2, [r4, #6]
		input_flags->switch_pos_park = false;
 80011be:	71e3      	strb	r3, [r4, #7]
 80011c0:	e009      	b.n	80011d6 <GetSwitchState+0x3e>
	}
	else if( HAL_GPIO_ReadPin(SWITCH_IN1_GPIO_Port, SWITCH_IN1_Pin) && HAL_GPIO_ReadPin(SWITCH_IN2_GPIO_Port, SWITCH_IN2_Pin) )
 80011c2:	2104      	movs	r1, #4
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <GetSwitchState+0x58>)
 80011c6:	f001 fac3 	bl	8002750 <HAL_GPIO_ReadPin>
 80011ca:	b928      	cbnz	r0, 80011d8 <GetSwitchState+0x40>
		input_flags->switch_pos_reverse = false;
		input_flags->switch_pos_park = false;
	}
	else
	{
		input_flags->switch_pos_drive = false;
 80011cc:	2300      	movs	r3, #0
 80011ce:	7163      	strb	r3, [r4, #5]
		input_flags->switch_pos_reverse = false;
 80011d0:	71a3      	strb	r3, [r4, #6]
		input_flags->switch_pos_park = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71e3      	strb	r3, [r4, #7]
	}
}
 80011d6:	bd10      	pop	{r4, pc}
	else if( HAL_GPIO_ReadPin(SWITCH_IN1_GPIO_Port, SWITCH_IN1_Pin) && HAL_GPIO_ReadPin(SWITCH_IN2_GPIO_Port, SWITCH_IN2_Pin) )
 80011d8:	2102      	movs	r1, #2
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <GetSwitchState+0x58>)
 80011dc:	f001 fab8 	bl	8002750 <HAL_GPIO_ReadPin>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0f3      	beq.n	80011cc <GetSwitchState+0x34>
		input_flags->switch_pos_drive = true;
 80011e4:	2301      	movs	r3, #1
 80011e6:	7163      	strb	r3, [r4, #5]
		input_flags->switch_pos_reverse = false;
 80011e8:	2300      	movs	r3, #0
 80011ea:	71a3      	strb	r3, [r4, #6]
		input_flags->switch_pos_park = false;
 80011ec:	71e3      	strb	r3, [r4, #7]
 80011ee:	e7f2      	b.n	80011d6 <GetSwitchState+0x3e>
 80011f0:	40011000 	.word	0x40011000

080011f4 <UpdateInputFlags>:
{
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	4604      	mov	r4, r0
	input_flags->mech_brake_pressed = HAL_GPIO_ReadPin(BRK_IN_GPIO_Port, BRK_IN_Pin);
 80011f8:	2101      	movs	r1, #1
 80011fa:	4819      	ldr	r0, [pc, #100]	@ (8001260 <UpdateInputFlags+0x6c>)
 80011fc:	f001 faa8 	bl	8002750 <HAL_GPIO_ReadPin>
 8001200:	3800      	subs	r0, #0
 8001202:	bf18      	it	ne
 8001204:	2001      	movne	r0, #1
 8001206:	7060      	strb	r0, [r4, #1]
	input_flags->regen_enabled = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin) && !input_flags->battery_regen_disabled;
 8001208:	2101      	movs	r1, #1
 800120a:	4816      	ldr	r0, [pc, #88]	@ (8001264 <UpdateInputFlags+0x70>)
 800120c:	f001 faa0 	bl	8002750 <HAL_GPIO_ReadPin>
 8001210:	b118      	cbz	r0, 800121a <UpdateInputFlags+0x26>
 8001212:	78e3      	ldrb	r3, [r4, #3]
 8001214:	b1eb      	cbz	r3, 8001252 <UpdateInputFlags+0x5e>
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <UpdateInputFlags+0x28>
 800121a:	2300      	movs	r3, #0
 800121c:	70a3      	strb	r3, [r4, #2]
	float* velocity = GET_CYCLIC_DATA(vehicle_velocity);
 800121e:	4d12      	ldr	r5, [pc, #72]	@ (8001268 <UpdateInputFlags+0x74>)
 8001220:	68ae      	ldr	r6, [r5, #8]
 8001222:	f000 fa69 	bl	80016f8 <HAL_GetTick>
 8001226:	686b      	ldr	r3, [r5, #4]
 8001228:	1ac0      	subs	r0, r0, r3
 800122a:	4286      	cmp	r6, r0
 800122c:	d913      	bls.n	8001256 <UpdateInputFlags+0x62>
		input_flags->velocity_under_threshold = *velocity < VELOCITY_THRESHOLD;
 800122e:	f04f 0501 	mov.w	r5, #1
 8001232:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <UpdateInputFlags+0x74>)
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	f7ff faa5 	bl	8000788 <__aeabi_fcmplt>
 800123e:	b908      	cbnz	r0, 8001244 <UpdateInputFlags+0x50>
 8001240:	f04f 0500 	mov.w	r5, #0
 8001244:	7125      	strb	r5, [r4, #4]
		input_flags->MDI_communication_fault = false;
 8001246:	2300      	movs	r3, #0
 8001248:	7263      	strb	r3, [r4, #9]
	GetSwitchState(input_flags);
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff ffa4 	bl	8001198 <GetSwitchState>
}
 8001250:	bd70      	pop	{r4, r5, r6, pc}
	input_flags->regen_enabled = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin) && !input_flags->battery_regen_disabled;
 8001252:	2301      	movs	r3, #1
 8001254:	e7e2      	b.n	800121c <UpdateInputFlags+0x28>
		input_flags->velocity_under_threshold = false;
 8001256:	2300      	movs	r3, #0
 8001258:	7123      	strb	r3, [r4, #4]
		input_flags->MDI_communication_fault = true;
 800125a:	2301      	movs	r3, #1
 800125c:	7263      	strb	r3, [r4, #9]
 800125e:	e7f4      	b.n	800124a <UpdateInputFlags+0x56>
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	2000007c 	.word	0x2000007c

0800126c <drive_state_machine_handler>:
{
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	b082      	sub	sp, #8
	UpdateInputFlags(&input_flags);
 8001270:	482d      	ldr	r0, [pc, #180]	@ (8001328 <drive_state_machine_handler+0xbc>)
 8001272:	f7ff ffbf 	bl	80011f4 <UpdateInputFlags>
	g_throttle_ADC = ReadADC(&hadc1);
 8001276:	482d      	ldr	r0, [pc, #180]	@ (800132c <drive_state_machine_handler+0xc0>)
 8001278:	f7ff fb0c 	bl	8000894 <ReadADC>
 800127c:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <drive_state_machine_handler+0xc4>)
 800127e:	8018      	strh	r0, [r3, #0]
	g_throttle = normalize_adc_value(g_throttle_ADC);
 8001280:	f7ff ff24 	bl	80010cc <normalize_adc_value>
 8001284:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <drive_state_machine_handler+0xc8>)
 8001286:	6018      	str	r0, [r3, #0]
	switch(state)
 8001288:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <drive_state_machine_handler+0xcc>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d039      	beq.n	8001304 <drive_state_machine_handler+0x98>
 8001290:	2b04      	cmp	r3, #4
 8001292:	d025      	beq.n	80012e0 <drive_state_machine_handler+0x74>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d00b      	beq.n	80012b0 <drive_state_machine_handler+0x44>
			motorCommand = GetMotorCommand(0.0, 0.0);
 8001298:	4d28      	ldr	r5, [pc, #160]	@ (800133c <drive_state_machine_handler+0xd0>)
 800129a:	466c      	mov	r4, sp
 800129c:	2100      	movs	r1, #0
 800129e:	460a      	mov	r2, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff fe8d 	bl	8000fc0 <GetMotorCommand>
 80012a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ae:	e010      	b.n	80012d2 <drive_state_machine_handler+0x66>
			motorCommand = DoStateDRIVE(input_flags);
 80012b0:	4e22      	ldr	r6, [pc, #136]	@ (800133c <drive_state_machine_handler+0xd0>)
 80012b2:	466d      	mov	r5, sp
 80012b4:	4c1c      	ldr	r4, [pc, #112]	@ (8001328 <drive_state_machine_handler+0xbc>)
 80012b6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012ba:	4628      	mov	r0, r5
 80012bc:	f7ff fe84 	bl	8000fc8 <DoStateDRIVE>
 80012c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c4:	e886 0003 	stmia.w	r6, {r0, r1}
			TransitionDRIVEstate(input_flags, &state);
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <drive_state_machine_handler+0xcc>)
 80012ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012ce:	f7ff fdfb 	bl	8000ec8 <TransitionDRIVEstate>
	SendCANMotorCommand(motorCommand);
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <drive_state_machine_handler+0xd0>)
 80012d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012d8:	f7ff fec0 	bl	800105c <SendCANMotorCommand>
}
 80012dc:	b002      	add	sp, #8
 80012de:	bd70      	pop	{r4, r5, r6, pc}
			motorCommand = DoStateREVERSE(input_flags);
 80012e0:	4e16      	ldr	r6, [pc, #88]	@ (800133c <drive_state_machine_handler+0xd0>)
 80012e2:	466d      	mov	r5, sp
 80012e4:	4c10      	ldr	r4, [pc, #64]	@ (8001328 <drive_state_machine_handler+0xbc>)
 80012e6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff fe92 	bl	8001014 <DoStateREVERSE>
 80012f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f4:	e886 0003 	stmia.w	r6, {r0, r1}
			TransitionREVERSEstate(input_flags, &state);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <drive_state_machine_handler+0xcc>)
 80012fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012fe:	f7ff fe04 	bl	8000f0a <TransitionREVERSEstate>
		break;
 8001302:	e7e6      	b.n	80012d2 <drive_state_machine_handler+0x66>
			motorCommand = DoStatePARK(input_flags);
 8001304:	4e0d      	ldr	r6, [pc, #52]	@ (800133c <drive_state_machine_handler+0xd0>)
 8001306:	466d      	mov	r5, sp
 8001308:	4c07      	ldr	r4, [pc, #28]	@ (8001328 <drive_state_machine_handler+0xbc>)
 800130a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fe9c 	bl	800104c <DoStatePARK>
 8001314:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001318:	e886 0003 	stmia.w	r6, {r0, r1}
			TransitionPARKstate(input_flags, &state);
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <drive_state_machine_handler+0xcc>)
 800131e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001322:	f7ff fe13 	bl	8000f4c <TransitionPARKstate>
		break;
 8001326:	e7d4      	b.n	80012d2 <drive_state_machine_handler+0x66>
 8001328:	20000174 	.word	0x20000174
 800132c:	200000b4 	.word	0x200000b4
 8001330:	20000164 	.word	0x20000164
 8001334:	20000168 	.word	0x20000168
 8001338:	20000078 	.word	0x20000078
 800133c:	2000016c 	.word	0x2000016c

08001340 <isBitSet>:

bool isBitSet(int num, int pos)
{
	return (num & (1 << pos)) != 0;
 8001340:	4108      	asrs	r0, r1
}
 8001342:	f000 0001 	and.w	r0, r0, #1
 8001346:	4770      	bx	lr

08001348 <isBitSetFromArray>:

bool isBitSetFromArray(uint8_t * num, int pos)
{
 8001348:	b508      	push	{r3, lr}
	int index = pos / 8;
 800134a:	460b      	mov	r3, r1
 800134c:	2900      	cmp	r1, #0
 800134e:	db0b      	blt.n	8001368 <isBitSetFromArray+0x20>
 8001350:	10db      	asrs	r3, r3, #3
	int remainder = pos % 8;
 8001352:	424a      	negs	r2, r1
 8001354:	f001 0107 	and.w	r1, r1, #7
 8001358:	f002 0207 	and.w	r2, r2, #7
	return isBitSet(num[index], remainder);
 800135c:	bf58      	it	pl
 800135e:	4251      	negpl	r1, r2
 8001360:	5cc0      	ldrb	r0, [r0, r3]
 8001362:	f7ff ffed 	bl	8001340 <isBitSet>
}
 8001366:	bd08      	pop	{r3, pc}
	int index = pos / 8;
 8001368:	1dcb      	adds	r3, r1, #7
 800136a:	e7f1      	b.n	8001350 <isBitSetFromArray+0x8>

0800136c <ParseCANBatteryStatus>:
{
 800136c:	b508      	push	{r3, lr}
	input_flags.battery_regen_disabled = isBitSetFromArray(CANMessageData, 17); // regen_disable bit is stored in bit 17
 800136e:	2111      	movs	r1, #17
 8001370:	f7ff ffea 	bl	8001348 <isBitSetFromArray>
 8001374:	4b01      	ldr	r3, [pc, #4]	@ (800137c <ParseCANBatteryStatus+0x10>)
 8001376:	70d8      	strb	r0, [r3, #3]
}
 8001378:	bd08      	pop	{r3, pc}
 800137a:	bf00      	nop
 800137c:	20000174 	.word	0x20000174

08001380 <TaskGetCANMessage>:
{
 8001380:	b500      	push	{lr}
 8001382:	b08b      	sub	sp, #44	@ 0x2c
 8001384:	e002      	b.n	800138c <TaskGetCANMessage+0xc>
				ParseCANVelocity(CAN_msg.data);
 8001386:	a808      	add	r0, sp, #32
 8001388:	f7ff fe02 	bl	8000f90 <ParseCANVelocity>
		if (xQueueReceive(CAN_rx_queue, &CAN_msg, portMAX_DELAY) == pdTRUE)
 800138c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001390:	a901      	add	r1, sp, #4
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <TaskGetCANMessage+0x38>)
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f002 fea5 	bl	80040e4 <xQueueReceive>
 800139a:	2801      	cmp	r0, #1
 800139c:	d1f6      	bne.n	800138c <TaskGetCANMessage+0xc>
			if (CAN_msg.header.StdId == CAN_ID_VELOCITY)
 800139e:	9b01      	ldr	r3, [sp, #4]
 80013a0:	f240 5203 	movw	r2, #1283	@ 0x503
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d0ee      	beq.n	8001386 <TaskGetCANMessage+0x6>
			else if (CAN_msg.header.StdId == CAN_ID_BATTERY_TEMP)
 80013a8:	f240 6222 	movw	r2, #1570	@ 0x622
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d1ed      	bne.n	800138c <TaskGetCANMessage+0xc>
				ParseCANBatteryStatus(CAN_msg.data);
 80013b0:	a808      	add	r0, sp, #32
 80013b2:	f7ff ffdb 	bl	800136c <ParseCANBatteryStatus>
 80013b6:	e7e9      	b.n	800138c <TaskGetCANMessage+0xc>
 80013b8:	20000110 	.word	0x20000110

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b500      	push	{lr}
 80013be:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_MspInit+0x4c>)
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	f002 0201 	and.w	r2, r2, #1
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80013da:	61da      	str	r2, [r3, #28]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	210f      	movs	r1, #15
 80013ea:	f06f 0001 	mvn.w	r0, #1
 80013ee:	f001 f875 	bl	80024dc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f2:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_MspInit+0x50>)
 80013f4:	6853      	ldr	r3, [r2, #4]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	b003      	add	sp, #12
 8001402:	f85d fb04 	ldr.w	pc, [sp], #4
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b530      	push	{r4, r5, lr}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_InitTick+0x8c>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	f042 0204 	orr.w	r2, r2, #4
 800141e:	61da      	str	r2, [r3, #28]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142a:	a902      	add	r1, sp, #8
 800142c:	a803      	add	r0, sp, #12
 800142e:	f001 fd09 	bl	8002e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001432:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001434:	b9cb      	cbnz	r3, 800146a <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001436:	f001 fce5 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 800143a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HAL_InitTick+0x90>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001446:	4817      	ldr	r0, [pc, #92]	@ (80014a4 <HAL_InitTick+0x94>)
 8001448:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_InitTick+0x98>)
 800144a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800144c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001450:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001452:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800145c:	f002 f826 	bl	80034ac <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001460:	4605      	mov	r5, r0
 8001462:	b130      	cbz	r0, 8001472 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8001464:	4628      	mov	r0, r5
 8001466:	b009      	add	sp, #36	@ 0x24
 8001468:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146a:	f001 fccb 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 800146e:	0043      	lsls	r3, r0, #1
 8001470:	e7e4      	b.n	800143c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001472:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <HAL_InitTick+0x94>)
 8001474:	f001 fed0 	bl	8003218 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001478:	4605      	mov	r5, r0
 800147a:	2800      	cmp	r0, #0
 800147c:	d1f2      	bne.n	8001464 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800147e:	201e      	movs	r0, #30
 8001480:	f001 f83c 	bl	80024fc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001484:	2c0f      	cmp	r4, #15
 8001486:	d901      	bls.n	800148c <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8001488:	2501      	movs	r5, #1
 800148a:	e7eb      	b.n	8001464 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	4621      	mov	r1, r4
 8001490:	201e      	movs	r0, #30
 8001492:	f001 f823 	bl	80024dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_InitTick+0x9c>)
 8001498:	601c      	str	r4, [r3, #0]
 800149a:	e7e3      	b.n	8001464 <HAL_InitTick+0x54>
 800149c:	40021000 	.word	0x40021000
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	20000180 	.word	0x20000180
 80014a8:	40000800 	.word	0x40000800
 80014ac:	20000090 	.word	0x20000090

080014b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler>

080014b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler>

080014b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler>

080014b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler>

080014b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler>

080014ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ba:	4770      	bx	lr

080014bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BRK_IN_Pin);
 80014be:	2001      	movs	r0, #1
 80014c0:	f001 f95c 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014c4:	bd08      	pop	{r3, pc}

080014c6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014c6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CRUISE_DWN_Pin);
 80014c8:	2010      	movs	r0, #16
 80014ca:	f001 f957 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014ce:	bd08      	pop	{r3, pc}

080014d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80014d2:	4802      	ldr	r0, [pc, #8]	@ (80014dc <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 80014d4:	f000 fe96 	bl	8002204 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014d8:	bd08      	pop	{r3, pc}
 80014da:	bf00      	nop
 80014dc:	200000e4 	.word	0x200000e4

080014e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CRUISE_UP_Pin);
 80014e2:	2020      	movs	r0, #32
 80014e4:	f001 f94a 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NEXT_SCREEN_Pin);
 80014e8:	2040      	movs	r0, #64	@ 0x40
 80014ea:	f001 f947 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRUISE_TOGGLE_Pin);
 80014ee:	2080      	movs	r0, #128	@ 0x80
 80014f0:	f001 f944 	bl	800277c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014f4:	bd08      	pop	{r3, pc}
	...

080014f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014fa:	4802      	ldr	r0, [pc, #8]	@ (8001504 <TIM4_IRQHandler+0xc>)
 80014fc:	f001 fecd 	bl	800329a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001500:	bd08      	pop	{r3, pc}
 8001502:	bf00      	nop
 8001504:	20000180 	.word	0x20000180

08001508 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001508:	b500      	push	{lr}
 800150a:	b083      	sub	sp, #12
  switch (GPIO_Pin)
 800150c:	2801      	cmp	r0, #1
 800150e:	d004      	beq.n	800151a <HAL_GPIO_EXTI_Callback+0x12>
 8001510:	2840      	cmp	r0, #64	@ 0x40
 8001512:	d00e      	beq.n	8001532 <HAL_GPIO_EXTI_Callback+0x2a>
      break;

    default:
      // Do nothing
  }
}
 8001514:	b003      	add	sp, #12
 8001516:	f85d fb04 	ldr.w	pc, [sp], #4
      motorCommand.velocity = 0.0;
 800151a:	2300      	movs	r3, #0
 800151c:	9301      	str	r3, [sp, #4]
      motorCommand.throttle = 0.0;
 800151e:	9300      	str	r3, [sp, #0]
      SendCANMotorCommand(motorCommand);
 8001520:	ab02      	add	r3, sp, #8
 8001522:	e913 0003 	ldmdb	r3, {r0, r1}
 8001526:	f7ff fd99 	bl	800105c <SendCANMotorCommand>
      input_flags.cruise_enabled = false;
 800152a:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <HAL_GPIO_EXTI_Callback+0x30>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
      break;
 8001530:	e7f0      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0xc>
      SendCANDIDNextPage();
 8001532:	f7ff fdff 	bl	8001134 <SendCANDIDNextPage>
      break;
 8001536:	e7ed      	b.n	8001514 <HAL_GPIO_EXTI_Callback+0xc>
 8001538:	20000174 	.word	0x20000174

0800153c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	4770      	bx	lr

0800153e <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 800153e:	6803      	ldr	r3, [r0, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001544:	d000      	beq.n	8001548 <HAL_TIM_Base_MspInit+0xa>
 8001546:	4770      	bx	lr
{
 8001548:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001560:	b002      	add	sp, #8
 8001562:	4770      	bx	lr

08001564 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001564:	b500      	push	{lr}
 8001566:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	2300      	movs	r3, #0
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	9303      	str	r3, [sp, #12]
 800156e:	9304      	str	r3, [sp, #16]
 8001570:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 8001572:	6803      	ldr	r3, [r0, #0]
 8001574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001578:	d002      	beq.n	8001580 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800157a:	b007      	add	sp, #28
 800157c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	f042 0204 	orr.w	r2, r2, #4
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CRUISE_STAT_Pin|TMR_OUT_Pin;
 8001596:	2303      	movs	r3, #3
 8001598:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	a902      	add	r1, sp, #8
 80015a2:	4802      	ldr	r0, [pc, #8]	@ (80015ac <HAL_TIM_MspPostInit+0x48>)
 80015a4:	f000 ffb8 	bl	8002518 <HAL_GPIO_Init>
}
 80015a8:	e7e7      	b.n	800157a <HAL_TIM_MspPostInit+0x16>
 80015aa:	bf00      	nop
 80015ac:	40010800 	.word	0x40010800

080015b0 <MX_TIM2_Init>:
{
 80015b0:	b500      	push	{lr}
 80015b2:	b08f      	sub	sp, #60	@ 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b4:	2300      	movs	r3, #0
 80015b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80015b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80015ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80015bc:	930d      	str	r3, [sp, #52]	@ 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	9308      	str	r3, [sp, #32]
 80015c0:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	9303      	str	r3, [sp, #12]
 80015c8:	9304      	str	r3, [sp, #16]
 80015ca:	9305      	str	r3, [sp, #20]
 80015cc:	9306      	str	r3, [sp, #24]
 80015ce:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80015d0:	4826      	ldr	r0, [pc, #152]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 6400;
 80015d8:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 80015dc:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 10000;
 80015e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015e4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ea:	f001 ff5f 	bl	80034ac <HAL_TIM_Base_Init>
 80015ee:	bb58      	cbnz	r0, 8001648 <MX_TIM2_Init+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015f4:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f6:	a90a      	add	r1, sp, #40	@ 0x28
 80015f8:	481c      	ldr	r0, [pc, #112]	@ (800166c <MX_TIM2_Init+0xbc>)
 80015fa:	f002 f861 	bl	80036c0 <HAL_TIM_ConfigClockSource>
 80015fe:	bb30      	cbnz	r0, 800164e <MX_TIM2_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001600:	481a      	ldr	r0, [pc, #104]	@ (800166c <MX_TIM2_Init+0xbc>)
 8001602:	f001 ff7f 	bl	8003504 <HAL_TIM_PWM_Init>
 8001606:	bb28      	cbnz	r0, 8001654 <MX_TIM2_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160e:	a908      	add	r1, sp, #32
 8001610:	4816      	ldr	r0, [pc, #88]	@ (800166c <MX_TIM2_Init+0xbc>)
 8001612:	f002 f95d 	bl	80038d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	bb00      	cbnz	r0, 800165a <MX_TIM2_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	@ 0x60
 800161a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800161c:	2200      	movs	r2, #0
 800161e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001624:	a901      	add	r1, sp, #4
 8001626:	4811      	ldr	r0, [pc, #68]	@ (800166c <MX_TIM2_Init+0xbc>)
 8001628:	f001 ffd0 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 800162c:	b9c0      	cbnz	r0, 8001660 <MX_TIM2_Init+0xb0>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162e:	2204      	movs	r2, #4
 8001630:	eb0d 0102 	add.w	r1, sp, r2
 8001634:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_TIM2_Init+0xbc>)
 8001636:	f001 ffc9 	bl	80035cc <HAL_TIM_PWM_ConfigChannel>
 800163a:	b9a0      	cbnz	r0, 8001666 <MX_TIM2_Init+0xb6>
  HAL_TIM_MspPostInit(&htim2);
 800163c:	480b      	ldr	r0, [pc, #44]	@ (800166c <MX_TIM2_Init+0xbc>)
 800163e:	f7ff ff91 	bl	8001564 <HAL_TIM_MspPostInit>
}
 8001642:	b00f      	add	sp, #60	@ 0x3c
 8001644:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001648:	f7ff fb6a 	bl	8000d20 <Error_Handler>
 800164c:	e7d0      	b.n	80015f0 <MX_TIM2_Init+0x40>
    Error_Handler();
 800164e:	f7ff fb67 	bl	8000d20 <Error_Handler>
 8001652:	e7d5      	b.n	8001600 <MX_TIM2_Init+0x50>
    Error_Handler();
 8001654:	f7ff fb64 	bl	8000d20 <Error_Handler>
 8001658:	e7d6      	b.n	8001608 <MX_TIM2_Init+0x58>
    Error_Handler();
 800165a:	f7ff fb61 	bl	8000d20 <Error_Handler>
 800165e:	e7db      	b.n	8001618 <MX_TIM2_Init+0x68>
    Error_Handler();
 8001660:	f7ff fb5e 	bl	8000d20 <Error_Handler>
 8001664:	e7e3      	b.n	800162e <MX_TIM2_Init+0x7e>
    Error_Handler();
 8001666:	f7ff fb5b 	bl	8000d20 <Error_Handler>
 800166a:	e7e7      	b.n	800163c <MX_TIM2_Init+0x8c>
 800166c:	200001c8 	.word	0x200001c8

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff ff64 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001676:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001678:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a09      	ldr	r2, [pc, #36]	@ (80016b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800168c:	4c09      	ldr	r4, [pc, #36]	@ (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 ff9b 	bl	80055d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fb83 	bl	8000da8 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80016ac:	0800578c 	.word	0x0800578c
  ldr r2, =_sbss
 80016b0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80016b4:	2000368c 	.word	0x2000368c

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016be:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x20>)
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fef5 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f7ff fe9e 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe72 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80016d8:	2000      	movs	r0, #0
 80016da:	bd08      	pop	{r3, pc}
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016e0:	4a03      	ldr	r2, [pc, #12]	@ (80016f0 <HAL_IncTick+0x10>)
 80016e2:	6811      	ldr	r1, [r2, #0]
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_IncTick+0x14>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	440b      	add	r3, r1
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000210 	.word	0x20000210
 80016f4:	2000008c 	.word	0x2000008c

080016f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016f8:	4b01      	ldr	r3, [pc, #4]	@ (8001700 <HAL_GetTick+0x8>)
 80016fa:	6818      	ldr	r0, [r3, #0]
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000210 	.word	0x20000210

08001704 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	4605      	mov	r5, r0
 800170a:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001710:	f7ff fff2 	bl	80016f8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800171c:	d123      	bne.n	8001766 <HAL_ADC_PollForConversion+0x62>
 800171e:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001726:	d103      	bne.n	8001730 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800172a:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 800172e:	d029      	beq.n	8001784 <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <HAL_ADC_PollForConversion+0x170>)
 8001732:	681e      	ldr	r6, [r3, #0]
 8001734:	2002      	movs	r0, #2
 8001736:	f001 fc2f 	bl	8002f98 <HAL_RCCEx_GetPeriphCLKFreq>
 800173a:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	4a4d      	ldr	r2, [pc, #308]	@ (8001878 <HAL_ADC_PollForConversion+0x174>)
 8001744:	4211      	tst	r1, r2
 8001746:	d136      	bne.n	80017b6 <HAL_ADC_PollForConversion+0xb2>
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	f102 425c 	add.w	r2, r2, #3690987520	@ 0xdc000000
 800174e:	4211      	tst	r1, r2
 8001750:	d131      	bne.n	80017b6 <HAL_ADC_PollForConversion+0xb2>
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	4a49      	ldr	r2, [pc, #292]	@ (800187c <HAL_ADC_PollForConversion+0x178>)
 8001756:	4211      	tst	r1, r2
 8001758:	d140      	bne.n	80017dc <HAL_ADC_PollForConversion+0xd8>
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b48      	ldr	r3, [pc, #288]	@ (8001880 <HAL_ADC_PollForConversion+0x17c>)
 800175e:	421a      	tst	r2, r3
 8001760:	d03e      	beq.n	80017e0 <HAL_ADC_PollForConversion+0xdc>
 8001762:	2329      	movs	r3, #41	@ 0x29
 8001764:	e041      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001766:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	62ab      	str	r3, [r5, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 800176e:	2300      	movs	r3, #0
 8001770:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
    return HAL_ERROR;
 8001774:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8001776:	b003      	add	sp, #12
 8001778:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800177a:	682b      	ldr	r3, [r5, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f013 0f02 	tst.w	r3, #2
 8001782:	d00f      	beq.n	80017a4 <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f013 0f02 	tst.w	r3, #2
 800178c:	d14f      	bne.n	800182e <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 800178e:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8001792:	d0f7      	beq.n	8001784 <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001794:	2c00      	cmp	r4, #0
 8001796:	d0f0      	beq.n	800177a <HAL_ADC_PollForConversion+0x76>
 8001798:	f7ff ffae 	bl	80016f8 <HAL_GetTick>
 800179c:	1bc3      	subs	r3, r0, r7
 800179e:	42a3      	cmp	r3, r4
 80017a0:	d9f0      	bls.n	8001784 <HAL_ADC_PollForConversion+0x80>
 80017a2:	e7ea      	b.n	800177a <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	62ab      	str	r3, [r5, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 80017ac:	2300      	movs	r3, #0
 80017ae:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
            return HAL_TIMEOUT;
 80017b2:	2003      	movs	r0, #3
 80017b4:	e7df      	b.n	8001776 <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017b6:	6919      	ldr	r1, [r3, #16]
 80017b8:	4a30      	ldr	r2, [pc, #192]	@ (800187c <HAL_ADC_PollForConversion+0x178>)
 80017ba:	4211      	tst	r1, r2
 80017bc:	d104      	bne.n	80017c8 <HAL_ADC_PollForConversion+0xc4>
 80017be:	68d9      	ldr	r1, [r3, #12]
 80017c0:	f102 426e 	add.w	r2, r2, #3992977408	@ 0xee000000
 80017c4:	4211      	tst	r1, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_ADC_PollForConversion+0xe0>
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001884 <HAL_ADC_PollForConversion+0x180>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	b95a      	cbnz	r2, 80017e8 <HAL_ADC_PollForConversion+0xe4>
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001884 <HAL_ADC_PollForConversion+0x180>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	b15b      	cbz	r3, 80017f0 <HAL_ADC_PollForConversion+0xec>
 80017d8:	23fc      	movs	r3, #252	@ 0xfc
 80017da:	e006      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
 80017dc:	2329      	movs	r3, #41	@ 0x29
 80017de:	e004      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
 80017e0:	2314      	movs	r3, #20
 80017e2:	e002      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
 80017e4:	2354      	movs	r3, #84	@ 0x54
 80017e6:	e000      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
 80017e8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017ea:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017ee:	e007      	b.n	8001800 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017f0:	2354      	movs	r3, #84	@ 0x54
 80017f2:	e7fa      	b.n	80017ea <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	42b3      	cmp	r3, r6
 80017f8:	d310      	bcc.n	800181c <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001800:	9b01      	ldr	r3, [sp, #4]
 8001802:	42b3      	cmp	r3, r6
 8001804:	d213      	bcs.n	800182e <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8001806:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800180a:	d0f6      	beq.n	80017fa <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800180c:	2c00      	cmp	r4, #0
 800180e:	d0f1      	beq.n	80017f4 <HAL_ADC_PollForConversion+0xf0>
 8001810:	f7ff ff72 	bl	80016f8 <HAL_GetTick>
 8001814:	1bc0      	subs	r0, r0, r7
 8001816:	42a0      	cmp	r0, r4
 8001818:	d9ef      	bls.n	80017fa <HAL_ADC_PollForConversion+0xf6>
 800181a:	e7eb      	b.n	80017f4 <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800181c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	62ab      	str	r3, [r5, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 8001824:	2300      	movs	r3, #0
 8001826:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
            return HAL_TIMEOUT;
 800182a:	2003      	movs	r0, #3
 800182c:	e7a3      	b.n	8001776 <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	f06f 0212 	mvn.w	r2, #18
 8001834:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001836:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001838:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183c:	62ab      	str	r3, [r5, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001846:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800184a:	d001      	beq.n	8001850 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 800184c:	2000      	movs	r0, #0
 800184e:	e792      	b.n	8001776 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001850:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001852:	b960      	cbnz	r0, 800186e <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001854:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800185a:	62ab      	str	r3, [r5, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800185e:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001862:	d188      	bne.n	8001776 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001864:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800186c:	e783      	b.n	8001776 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800186e:	2000      	movs	r0, #0
 8001870:	e781      	b.n	8001776 <HAL_ADC_PollForConversion+0x72>
 8001872:	bf00      	nop
 8001874:	20000088 	.word	0x20000088
 8001878:	24924924 	.word	0x24924924
 800187c:	12492492 	.word	0x12492492
 8001880:	00492492 	.word	0x00492492
 8001884:	00249249 	.word	0x00249249

08001888 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001888:	6803      	ldr	r3, [r0, #0]
 800188a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 800188c:	4770      	bx	lr
	...

08001890 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001890:	b430      	push	{r4, r5}
 8001892:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001894:	2200      	movs	r2, #0
 8001896:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800189c:	2a01      	cmp	r2, #1
 800189e:	f000 808f 	beq.w	80019c0 <HAL_ADC_ConfigChannel+0x130>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2201      	movs	r2, #1
 80018a6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018aa:	684a      	ldr	r2, [r1, #4]
 80018ac:	2a06      	cmp	r2, #6
 80018ae:	d82d      	bhi.n	800190c <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018b0:	6804      	ldr	r4, [r0, #0]
 80018b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80018b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018b8:	3a05      	subs	r2, #5
 80018ba:	f04f 0c1f 	mov.w	ip, #31
 80018be:	fa0c fc02 	lsl.w	ip, ip, r2
 80018c2:	ea20 000c 	bic.w	r0, r0, ip
 80018c6:	680d      	ldr	r5, [r1, #0]
 80018c8:	fa05 f202 	lsl.w	r2, r5, r2
 80018cc:	4302      	orrs	r2, r0
 80018ce:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018d0:	680a      	ldr	r2, [r1, #0]
 80018d2:	2a09      	cmp	r2, #9
 80018d4:	d938      	bls.n	8001948 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	68e0      	ldr	r0, [r4, #12]
 80018da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018de:	3a1e      	subs	r2, #30
 80018e0:	f04f 0c07 	mov.w	ip, #7
 80018e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80018e8:	ea20 000c 	bic.w	r0, r0, ip
 80018ec:	688d      	ldr	r5, [r1, #8]
 80018ee:	fa05 f202 	lsl.w	r2, r5, r2
 80018f2:	4302      	orrs	r2, r0
 80018f4:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018f6:	680a      	ldr	r2, [r1, #0]
 80018f8:	3a10      	subs	r2, #16
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d934      	bls.n	8001968 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fe:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001906:	b002      	add	sp, #8
 8001908:	bc30      	pop	{r4, r5}
 800190a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800190c:	2a0c      	cmp	r2, #12
 800190e:	d80d      	bhi.n	800192c <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001910:	6805      	ldr	r5, [r0, #0]
 8001912:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001914:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001918:	3a23      	subs	r2, #35	@ 0x23
 800191a:	241f      	movs	r4, #31
 800191c:	4094      	lsls	r4, r2
 800191e:	ea20 0004 	bic.w	r0, r0, r4
 8001922:	680c      	ldr	r4, [r1, #0]
 8001924:	4094      	lsls	r4, r2
 8001926:	4320      	orrs	r0, r4
 8001928:	6328      	str	r0, [r5, #48]	@ 0x30
 800192a:	e7d1      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800192c:	6805      	ldr	r5, [r0, #0]
 800192e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001930:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001934:	3a41      	subs	r2, #65	@ 0x41
 8001936:	241f      	movs	r4, #31
 8001938:	4094      	lsls	r4, r2
 800193a:	ea20 0004 	bic.w	r0, r0, r4
 800193e:	680c      	ldr	r4, [r1, #0]
 8001940:	4094      	lsls	r4, r2
 8001942:	4320      	orrs	r0, r4
 8001944:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8001946:	e7c3      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001948:	681c      	ldr	r4, [r3, #0]
 800194a:	6920      	ldr	r0, [r4, #16]
 800194c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001950:	f04f 0c07 	mov.w	ip, #7
 8001954:	fa0c fc02 	lsl.w	ip, ip, r2
 8001958:	ea20 000c 	bic.w	r0, r0, ip
 800195c:	688d      	ldr	r5, [r1, #8]
 800195e:	fa05 f202 	lsl.w	r2, r5, r2
 8001962:	4302      	orrs	r2, r0
 8001964:	6122      	str	r2, [r4, #16]
 8001966:	e7c6      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4816      	ldr	r0, [pc, #88]	@ (80019c4 <HAL_ADC_ConfigChannel+0x134>)
 800196c:	4282      	cmp	r2, r0
 800196e:	d005      	beq.n	800197c <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001978:	2001      	movs	r0, #1
 800197a:	e7c1      	b.n	8001900 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800197c:	6890      	ldr	r0, [r2, #8]
 800197e:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8001982:	d11b      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001984:	6890      	ldr	r0, [r2, #8]
 8001986:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800198a:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198c:	680a      	ldr	r2, [r1, #0]
 800198e:	2a10      	cmp	r2, #16
 8001990:	d001      	beq.n	8001996 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2000      	movs	r0, #0
 8001994:	e7b4      	b.n	8001900 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001996:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <HAL_ADC_ConfigChannel+0x138>)
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	490c      	ldr	r1, [pc, #48]	@ (80019cc <HAL_ADC_ConfigChannel+0x13c>)
 800199c:	fba1 1202 	umull	r1, r2, r1, r2
 80019a0:	0c92      	lsrs	r2, r2, #18
 80019a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019aa:	e002      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80019ac:	9a01      	ldr	r2, [sp, #4]
 80019ae:	3a01      	subs	r2, #1
 80019b0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019b2:	9a01      	ldr	r2, [sp, #4]
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d1f9      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2000      	movs	r0, #0
 80019ba:	e7a1      	b.n	8001900 <HAL_ADC_ConfigChannel+0x70>
 80019bc:	2000      	movs	r0, #0
 80019be:	e79f      	b.n	8001900 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80019c0:	2002      	movs	r0, #2
 80019c2:	e7a0      	b.n	8001906 <HAL_ADC_ConfigChannel+0x76>
 80019c4:	40012400 	.word	0x40012400
 80019c8:	20000088 	.word	0x20000088
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d0:	b530      	push	{r4, r5, lr}
 80019d2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	f012 0f01 	tst.w	r2, #1
 80019e0:	d133      	bne.n	8001a4a <ADC_Enable+0x7a>
 80019e2:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <ADC_Enable+0x80>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <ADC_Enable+0x84>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80019fa:	e002      	b.n	8001a02 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80019fc:	9b01      	ldr	r3, [sp, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f9      	bne.n	80019fc <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fe76 	bl	80016f8 <HAL_GetTick>
 8001a0c:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f013 0f01 	tst.w	r3, #1
 8001a16:	d116      	bne.n	8001a46 <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a18:	f7ff fe6e 	bl	80016f8 <HAL_GetTick>
 8001a1c:	1b43      	subs	r3, r0, r5
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d9f5      	bls.n	8001a0e <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a22:	6823      	ldr	r3, [r4, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f013 0f01 	tst.w	r3, #1
 8001a2a:	d1f0      	bne.n	8001a0e <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a2e:	f043 0310 	orr.w	r3, r3, #16
 8001a32:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
 8001a44:	e002      	b.n	8001a4c <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e000      	b.n	8001a4c <ADC_Enable+0x7c>
 8001a4a:	2000      	movs	r0, #0
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	bd30      	pop	{r4, r5, pc}
 8001a50:	20000088 	.word	0x20000088
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001a58:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d068      	beq.n	8001b32 <HAL_ADC_Start+0xda>
{
 8001a60:	b510      	push	{r4, lr}
 8001a62:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001a64:	2301      	movs	r3, #1
 8001a66:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001a6a:	f7ff ffb1 	bl	80019d0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	d15b      	bne.n	8001b2a <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8001a72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_ADC_Start+0xe0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d027      	beq.n	8001ada <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a8c:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001a90:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001a98:	d005      	beq.n	8001aa6 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a9a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a9c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001aa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001aa4:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001aa8:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001aac:	d02b      	beq.n	8001b06 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ab0:	f022 0206 	bic.w	r2, r2, #6
 8001ab4:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001abc:	f06f 0202 	mvn.w	r2, #2
 8001ac0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001aca:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001ace:	d01d      	beq.n	8001b0c <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e02a      	b.n	8001b30 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ada:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001ade:	6852      	ldr	r2, [r2, #4]
 8001ae0:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8001ae4:	d0d1      	beq.n	8001a8a <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001ae8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001aec:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aee:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <HAL_ADC_Start+0xe4>)
 8001af0:	6852      	ldr	r2, [r2, #4]
 8001af2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001af6:	d0d6      	beq.n	8001aa6 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001afa:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001afe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001b02:	62a2      	str	r2, [r4, #40]	@ 0x28
 8001b04:	e7cf      	b.n	8001aa6 <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	2200      	movs	r2, #0
 8001b08:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001b0a:	e7d4      	b.n	8001ab6 <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <HAL_ADC_Start+0xe0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	e009      	b.n	8001b30 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b1c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001b20:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b22:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8001b26:	d1d3      	bne.n	8001ad0 <HAL_ADC_Start+0x78>
 8001b28:	e7f3      	b.n	8001b12 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001b30:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001b32:	2002      	movs	r0, #2
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40012800 	.word	0x40012800
 8001b3c:	40012400 	.word	0x40012400

08001b40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b40:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	f012 0f01 	tst.w	r2, #1
 8001b4a:	d101      	bne.n	8001b50 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b4c:	2000      	movs	r0, #0
}
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b5a:	f7ff fdcd 	bl	80016f8 <HAL_GetTick>
 8001b5e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f013 0f01 	tst.w	r3, #1
 8001b68:	d013      	beq.n	8001b92 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b6a:	f7ff fdc5 	bl	80016f8 <HAL_GetTick>
 8001b6e:	1b43      	subs	r3, r0, r5
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d9f5      	bls.n	8001b60 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f013 0f01 	tst.w	r3, #1
 8001b7c:	d0f0      	beq.n	8001b60 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b86:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e7dd      	b.n	8001b4e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e7db      	b.n	8001b4e <ADC_ConversionStop_Disable+0xe>
	...

08001b98 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	f000 8088 	beq.w	8001cae <HAL_ADC_Init+0x116>
{
 8001b9e:	b570      	push	{r4, r5, r6, lr}
 8001ba0:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d052      	beq.n	8001c4e <HAL_ADC_Init+0xb6>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff ffc9 	bl	8001b40 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001bb0:	f013 0310 	ands.w	r3, r3, #16
 8001bb4:	d175      	bne.n	8001ca2 <HAL_ADC_Init+0x10a>
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d173      	bne.n	8001ca2 <HAL_ADC_Init+0x10a>
    ADC_STATE_CLR_SET(hadc->State,
 8001bba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001bbc:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001bc0:	f022 0202 	bic.w	r2, r2, #2
 8001bc4:	f042 0202 	orr.w	r2, r2, #2
 8001bc8:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bca:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bcc:	6826      	ldr	r6, [r4, #0]
 8001bce:	4939      	ldr	r1, [pc, #228]	@ (8001cb4 <HAL_ADC_Init+0x11c>)
 8001bd0:	428e      	cmp	r6, r1
 8001bd2:	d042      	beq.n	8001c5a <HAL_ADC_Init+0xc2>
 8001bd4:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd6:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bd8:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bda:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bde:	68a5      	ldr	r5, [r4, #8]
 8001be0:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001be4:	d002      	beq.n	8001bec <HAL_ADC_Init+0x54>
 8001be6:	2d01      	cmp	r5, #1
 8001be8:	d03e      	beq.n	8001c68 <HAL_ADC_Init+0xd0>
 8001bea:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bec:	f894 c014 	ldrb.w	ip, [r4, #20]
 8001bf0:	f1bc 0f01 	cmp.w	ip, #1
 8001bf4:	d03b      	beq.n	8001c6e <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->CR1,
 8001bf6:	6871      	ldr	r1, [r6, #4]
 8001bf8:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001bfc:	4329      	orrs	r1, r5
 8001bfe:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c00:	6825      	ldr	r5, [r4, #0]
 8001c02:	68ae      	ldr	r6, [r5, #8]
 8001c04:	492c      	ldr	r1, [pc, #176]	@ (8001cb8 <HAL_ADC_Init+0x120>)
 8001c06:	4031      	ands	r1, r6
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c0c:	68a1      	ldr	r1, [r4, #8]
 8001c0e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001c12:	d001      	beq.n	8001c18 <HAL_ADC_Init+0x80>
 8001c14:	2901      	cmp	r1, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_ADC_Init+0x86>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c18:	6923      	ldr	r3, [r4, #16]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001c1e:	6825      	ldr	r5, [r4, #0]
 8001c20:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001c22:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001c26:	430b      	orrs	r3, r1
 8001c28:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_ADC_Init+0x124>)
 8001c30:	400b      	ands	r3, r1
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d02c      	beq.n	8001c90 <HAL_ADC_Init+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 8001c36:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c38:	f023 0312 	bic.w	r3, r3, #18
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	e02e      	b.n	8001cac <HAL_ADC_Init+0x114>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001c50:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001c54:	f7fe fdee 	bl	8000834 <HAL_ADC_MspInit>
 8001c58:	e7a6      	b.n	8001ba8 <HAL_ADC_Init+0x10>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c5a:	69e1      	ldr	r1, [r4, #28]
 8001c5c:	f5b1 2f40 	cmp.w	r1, #786432	@ 0xc0000
 8001c60:	d1b9      	bne.n	8001bd6 <HAL_ADC_Init+0x3e>
 8001c62:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8001c66:	e7b6      	b.n	8001bd6 <HAL_ADC_Init+0x3e>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c68:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8001c6c:	e7be      	b.n	8001bec <HAL_ADC_Init+0x54>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c6e:	b931      	cbnz	r1, 8001c7e <HAL_ADC_Init+0xe6>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c70:	69a1      	ldr	r1, [r4, #24]
 8001c72:	3901      	subs	r1, #1
 8001c74:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001c78:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8001c7c:	e7bb      	b.n	8001bf6 <HAL_ADC_Init+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c80:	f041 0120 	orr.w	r1, r1, #32
 8001c84:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001c88:	f041 0101 	orr.w	r1, r1, #1
 8001c8c:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8001c8e:	e7b2      	b.n	8001bf6 <HAL_ADC_Init+0x5e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	2300      	movs	r3, #0
 8001c92:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001c94:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_Init+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001caa:	2001      	movs	r0, #1
}
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40013c00 	.word	0x40013c00
 8001cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cbc:	ff1f0efe 	.word	0xff1f0efe

08001cc0 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	f000 80a1 	beq.w	8001e08 <HAL_CAN_Init+0x148>
{
 8001cc6:	b538      	push	{r3, r4, r5, lr}
 8001cc8:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cca:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001cce:	b1d3      	cbz	r3, 8001d06 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cda:	f7ff fd0d 	bl	80016f8 <HAL_GetTick>
 8001cde:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	f012 0f01 	tst.w	r2, #1
 8001ce8:	d110      	bne.n	8001d0c <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cea:	f7ff fd05 	bl	80016f8 <HAL_GetTick>
 8001cee:	1b40      	subs	r0, r0, r5
 8001cf0:	280a      	cmp	r0, #10
 8001cf2:	d9f5      	bls.n	8001ce0 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfa:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8001d06:	f7fe fe19 	bl	800093c <HAL_CAN_MspInit>
 8001d0a:	e7e1      	b.n	8001cd0 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f022 0202 	bic.w	r2, r2, #2
 8001d12:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001d14:	f7ff fcf0 	bl	80016f8 <HAL_GetTick>
 8001d18:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	f012 0f02 	tst.w	r2, #2
 8001d22:	d00d      	beq.n	8001d40 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d24:	f7ff fce8 	bl	80016f8 <HAL_GetTick>
 8001d28:	1b40      	subs	r0, r0, r5
 8001d2a:	280a      	cmp	r0, #10
 8001d2c:	d9f5      	bls.n	8001d1a <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d34:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d36:	2305      	movs	r3, #5
 8001d38:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	e7e1      	b.n	8001d04 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d40:	7e22      	ldrb	r2, [r4, #24]
 8001d42:	2a01      	cmp	r2, #1
 8001d44:	d03d      	beq.n	8001dc2 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d4c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d4e:	7e63      	ldrb	r3, [r4, #25]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d03b      	beq.n	8001dcc <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d5c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d5e:	7ea3      	ldrb	r3, [r4, #26]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d039      	beq.n	8001dd8 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f023 0320 	bic.w	r3, r3, #32
 8001d6c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d6e:	7ee3      	ldrb	r3, [r4, #27]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d037      	beq.n	8001de4 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d74:	6822      	ldr	r2, [r4, #0]
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	f043 0310 	orr.w	r3, r3, #16
 8001d7c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d7e:	7f23      	ldrb	r3, [r4, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d035      	beq.n	8001df0 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d84:	6822      	ldr	r2, [r4, #0]
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f023 0308 	bic.w	r3, r3, #8
 8001d8c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d8e:	7f63      	ldrb	r3, [r4, #29]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d033      	beq.n	8001dfc <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d9e:	68a3      	ldr	r3, [r4, #8]
 8001da0:	68e2      	ldr	r2, [r4, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	6922      	ldr	r2, [r4, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	6962      	ldr	r2, [r4, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	6862      	ldr	r2, [r4, #4]
 8001dae:	3a01      	subs	r2, #1
 8001db0:	6821      	ldr	r1, [r4, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001db6:	2000      	movs	r0, #0
 8001db8:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8001dc0:	e7a0      	b.n	8001d04 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e7c0      	b.n	8001d4e <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e7c2      	b.n	8001d5e <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e7c4      	b.n	8001d6e <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de4:	6822      	ldr	r2, [r4, #0]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f023 0310 	bic.w	r3, r3, #16
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e7c6      	b.n	8001d7e <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e7c8      	b.n	8001d8e <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e7ca      	b.n	8001d9e <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8001e08:	2001      	movs	r0, #1
}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e0c:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e0e:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d905      	bls.n	8001e26 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e1a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e20:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
  }
}
 8001e24:	4770      	bx	lr
{
 8001e26:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e28:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e34:	694b      	ldr	r3, [r1, #20]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e40:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 8001e44:	ea6f 0c03 	mvn.w	ip, r3
 8001e48:	ea20 0003 	bic.w	r0, r0, r3
 8001e4c:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e50:	69c8      	ldr	r0, [r1, #28]
 8001e52:	b9c0      	cbnz	r0, 8001e86 <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e54:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 8001e58:	ea0c 0000 	and.w	r0, ip, r0
 8001e5c:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e60:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e62:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e64:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8001e68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e6c:	3048      	adds	r0, #72	@ 0x48
 8001e6e:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e72:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e74:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e76:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001e7a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e7e:	3048      	adds	r0, #72	@ 0x48
 8001e80:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001e84:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e86:	69c8      	ldr	r0, [r1, #28]
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	d01a      	beq.n	8001ec2 <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e8c:	6988      	ldr	r0, [r1, #24]
 8001e8e:	bb88      	cbnz	r0, 8001ef4 <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e90:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8001e94:	ea0c 0000 	and.w	r0, ip, r0
 8001e98:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e9c:	6908      	ldr	r0, [r1, #16]
 8001e9e:	bb78      	cbnz	r0, 8001f00 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ea0:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 8001ea4:	ea0c 0000 	and.w	r0, ip, r0
 8001ea8:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001eac:	6a09      	ldr	r1, [r1, #32]
 8001eae:	2901      	cmp	r1, #1
 8001eb0:	d02c      	beq.n	8001f0c <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eb2:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 8001ebe:	2000      	movs	r0, #0
}
 8001ec0:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ec2:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 8001ec6:	4318      	orrs	r0, r3
 8001ec8:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ecc:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ece:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ed0:	f8d1 e000 	ldr.w	lr, [r1]
 8001ed4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed8:	3048      	adds	r0, #72	@ 0x48
 8001eda:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ede:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee0:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee2:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001ee6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eea:	3048      	adds	r0, #72	@ 0x48
 8001eec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8001ef0:	6044      	str	r4, [r0, #4]
 8001ef2:	e7cb      	b.n	8001e8c <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8001ef8:	4318      	orrs	r0, r3
 8001efa:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 8001efe:	e7cd      	b.n	8001e9c <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f00:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 8001f04:	4318      	orrs	r0, r3
 8001f06:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 8001f0a:	e7cf      	b.n	8001eac <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f0c:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 8001f10:	430b      	orrs	r3, r1
 8001f12:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 8001f16:	e7cc      	b.n	8001eb2 <HAL_CAN_ConfigFilter+0xa6>

08001f18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f1c:	f890 5020 	ldrb.w	r5, [r0, #32]
 8001f20:	b2ed      	uxtb	r5, r5
 8001f22:	2d01      	cmp	r5, #1
 8001f24:	d006      	beq.n	8001f34 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f26:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001f28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f2c:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8001f2e:	2501      	movs	r5, #1
  }
}
 8001f30:	4628      	mov	r0, r5
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f3a:	6802      	ldr	r2, [r0, #0]
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f44:	f7ff fbd8 	bl	80016f8 <HAL_GetTick>
 8001f48:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f013 0f01 	tst.w	r3, #1
 8001f52:	d00c      	beq.n	8001f6e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f54:	f7ff fbd0 	bl	80016f8 <HAL_GetTick>
 8001f58:	1b83      	subs	r3, r0, r6
 8001f5a:	2b0a      	cmp	r3, #10
 8001f5c:	d9f5      	bls.n	8001f4a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f64:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f66:	2305      	movs	r3, #5
 8001f68:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001f6c:	e7e0      	b.n	8001f30 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f6e:	2500      	movs	r5, #0
 8001f70:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 8001f72:	e7dd      	b.n	8001f30 <HAL_CAN_Start+0x18>

08001f74 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f74:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f76:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f7a:	6804      	ldr	r4, [r0, #0]
 8001f7c:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f7e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001f82:	fa5f fc8c 	uxtb.w	ip, ip
 8001f86:	f1bc 0f01 	cmp.w	ip, #1
 8001f8a:	d862      	bhi.n	8002052 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f8c:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 8001f90:	d059      	beq.n	8002046 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f92:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f96:	2401      	movs	r4, #1
 8001f98:	fa04 f40c 	lsl.w	r4, r4, ip
 8001f9c:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f9e:	688b      	ldr	r3, [r1, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13d      	bne.n	8002020 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fa4:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 8001fa6:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001fa8:	6804      	ldr	r4, [r0, #0]
 8001faa:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8001fae:	f10c 0318 	add.w	r3, ip, #24
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fb6:	6803      	ldr	r3, [r0, #0]
 8001fb8:	690c      	ldr	r4, [r1, #16]
 8001fba:	f10c 0e18 	add.w	lr, ip, #24
 8001fbe:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 8001fc2:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fc4:	7d0b      	ldrb	r3, [r1, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d035      	beq.n	8002036 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fca:	79d1      	ldrb	r1, [r2, #7]
 8001fcc:	7993      	ldrb	r3, [r2, #6]
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001fd4:	7951      	ldrb	r1, [r2, #5]
 8001fd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001fda:	7914      	ldrb	r4, [r2, #4]
 8001fdc:	6801      	ldr	r1, [r0, #0]
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 8001fe4:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fe8:	78d1      	ldrb	r1, [r2, #3]
 8001fea:	7893      	ldrb	r3, [r2, #2]
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ff2:	7851      	ldrb	r1, [r2, #1]
 8001ff4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001ff8:	7811      	ldrb	r1, [r2, #0]
 8001ffa:	6802      	ldr	r2, [r0, #0]
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 8002002:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002006:	6802      	ldr	r2, [r0, #0]
 8002008:	f10c 0c18 	add.w	ip, ip, #24
 800200c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8002010:	f852 300c 	ldr.w	r3, [r2, ip]
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800201c:	2000      	movs	r0, #0
 800201e:	e01d      	b.n	800205c <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002020:	684c      	ldr	r4, [r1, #4]
 8002022:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8002026:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 8002028:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800202a:	f10c 0418 	add.w	r4, ip, #24
 800202e:	0124      	lsls	r4, r4, #4
 8002030:	6805      	ldr	r5, [r0, #0]
 8002032:	512b      	str	r3, [r5, r4]
 8002034:	e7bf      	b.n	8001fb6 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002036:	6803      	ldr	r3, [r0, #0]
 8002038:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800203c:	6859      	ldr	r1, [r3, #4]
 800203e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002042:	6059      	str	r1, [r3, #4]
 8002044:	e7c1      	b.n	8001fca <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002046:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800204c:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
 8002050:	e004      	b.n	800205c <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002052:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800205a:	2001      	movs	r0, #1
  }
}
 800205c:	bd30      	pop	{r4, r5, pc}

0800205e <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800205e:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002062:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8002066:	fa5f fc8c 	uxtb.w	ip, ip
 800206a:	f1bc 0f01 	cmp.w	ip, #1
 800206e:	f200 80a5 	bhi.w	80021bc <HAL_CAN_GetRxMessage+0x15e>
{
 8002072:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002074:	b951      	cbnz	r1, 800208c <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002076:	6804      	ldr	r4, [r0, #0]
 8002078:	68e4      	ldr	r4, [r4, #12]
 800207a:	f014 0f03 	tst.w	r4, #3
 800207e:	d110      	bne.n	80020a2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002080:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002082:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002086:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e07e      	b.n	800218a <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800208c:	6804      	ldr	r4, [r0, #0]
 800208e:	6924      	ldr	r4, [r4, #16]
 8002090:	f014 0f03 	tst.w	r4, #3
 8002094:	d105      	bne.n	80020a2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002096:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800209c:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800209e:	2001      	movs	r0, #1
 80020a0:	e073      	b.n	800218a <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020a2:	6805      	ldr	r5, [r0, #0]
 80020a4:	f101 041b 	add.w	r4, r1, #27
 80020a8:	0124      	lsls	r4, r4, #4
 80020aa:	592c      	ldr	r4, [r5, r4]
 80020ac:	f004 0404 	and.w	r4, r4, #4
 80020b0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020b2:	2c00      	cmp	r4, #0
 80020b4:	d16b      	bne.n	800218e <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020b6:	6805      	ldr	r5, [r0, #0]
 80020b8:	f101 041b 	add.w	r4, r1, #27
 80020bc:	0124      	lsls	r4, r4, #4
 80020be:	592c      	ldr	r4, [r5, r4]
 80020c0:	0d64      	lsrs	r4, r4, #21
 80020c2:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020c4:	6804      	ldr	r4, [r0, #0]
 80020c6:	f101 0c1b 	add.w	ip, r1, #27
 80020ca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80020ce:	f854 400c 	ldr.w	r4, [r4, ip]
 80020d2:	f004 0402 	and.w	r4, r4, #2
 80020d6:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020d8:	6804      	ldr	r4, [r0, #0]
 80020da:	44a4      	add	ip, r4
 80020dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80020e0:	f015 0f08 	tst.w	r5, #8
 80020e4:	d05b      	beq.n	800219e <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020e6:	2408      	movs	r4, #8
 80020e8:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020ea:	6804      	ldr	r4, [r0, #0]
 80020ec:	f101 0c1b 	add.w	ip, r1, #27
 80020f0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 80020f4:	6864      	ldr	r4, [r4, #4]
 80020f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80020fa:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020fc:	6804      	ldr	r4, [r0, #0]
 80020fe:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 8002102:	6864      	ldr	r4, [r4, #4]
 8002104:	0c24      	lsrs	r4, r4, #16
 8002106:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800210e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8002112:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002114:	6802      	ldr	r2, [r0, #0]
 8002116:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800211a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800211e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002122:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002124:	6802      	ldr	r2, [r0, #0]
 8002126:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800212a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800212e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002132:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002134:	6802      	ldr	r2, [r0, #0]
 8002136:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800213a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800213e:	0e12      	lsrs	r2, r2, #24
 8002140:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002142:	6802      	ldr	r2, [r0, #0]
 8002144:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002148:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800214c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800214e:	6802      	ldr	r2, [r0, #0]
 8002150:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002154:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8002158:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800215c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800215e:	6802      	ldr	r2, [r0, #0]
 8002160:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002164:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8002168:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800216c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800216e:	6802      	ldr	r2, [r0, #0]
 8002170:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002174:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8002178:	0e12      	lsrs	r2, r2, #24
 800217a:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800217c:	b9c1      	cbnz	r1, 80021b0 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800217e:	6802      	ldr	r2, [r0, #0]
 8002180:	68d3      	ldr	r3, [r2, #12]
 8002182:	f043 0320 	orr.w	r3, r3, #32
 8002186:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 8002188:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800218a:	bc30      	pop	{r4, r5}
 800218c:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800218e:	6805      	ldr	r5, [r0, #0]
 8002190:	f101 041b 	add.w	r4, r1, #27
 8002194:	0124      	lsls	r4, r4, #4
 8002196:	592c      	ldr	r4, [r5, r4]
 8002198:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800219a:	6054      	str	r4, [r2, #4]
 800219c:	e792      	b.n	80020c4 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800219e:	f101 051b 	add.w	r5, r1, #27
 80021a2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80021a6:	6864      	ldr	r4, [r4, #4]
 80021a8:	f004 040f 	and.w	r4, r4, #15
 80021ac:	6114      	str	r4, [r2, #16]
 80021ae:	e79c      	b.n	80020ea <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021b0:	6802      	ldr	r2, [r0, #0]
 80021b2:	6913      	ldr	r3, [r2, #16]
 80021b4:	f043 0320 	orr.w	r3, r3, #32
 80021b8:	6113      	str	r3, [r2, #16]
 80021ba:	e7e5      	b.n	8002188 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c2:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
}
 80021c6:	4770      	bx	lr

080021c8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80021c8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d905      	bls.n	80021e0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021da:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
  }
}
 80021de:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	6953      	ldr	r3, [r2, #20]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80021e8:	2000      	movs	r0, #0
 80021ea:	4770      	bx	lr

080021ec <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ee:	4770      	bx	lr

080021f0 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021f2:	4770      	bx	lr

080021f4 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021f4:	4770      	bx	lr

080021f6 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f6:	4770      	bx	lr

080021f8 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021fe:	4770      	bx	lr

08002200 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002200:	4770      	bx	lr

08002202 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_IRQHandler>:
{
 8002204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002208:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800220e:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002212:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002214:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002218:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800221c:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002220:	f014 0601 	ands.w	r6, r4, #1
 8002224:	d03b      	beq.n	800229e <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002226:	f017 0601 	ands.w	r6, r7, #1
 800222a:	d016      	beq.n	800225a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800222c:	2201      	movs	r2, #1
 800222e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002230:	f017 0f02 	tst.w	r7, #2
 8002234:	d108      	bne.n	8002248 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002236:	f017 0f04 	tst.w	r7, #4
 800223a:	d10c      	bne.n	8002256 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800223c:	f017 0608 	ands.w	r6, r7, #8
 8002240:	d006      	beq.n	8002250 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002242:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002246:	e008      	b.n	800225a <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002248:	f7ff ffd0 	bl	80021ec <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800224c:	2600      	movs	r6, #0
 800224e:	e004      	b.n	800225a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002250:	f7ff ffcf 	bl	80021f2 <HAL_CAN_TxMailbox0AbortCallback>
 8002254:	e001      	b.n	800225a <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002256:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800225a:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800225e:	d00d      	beq.n	800227c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002260:	682b      	ldr	r3, [r5, #0]
 8002262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002266:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002268:	f417 7f00 	tst.w	r7, #512	@ 0x200
 800226c:	f040 8086 	bne.w	800237c <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002270:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8002274:	f000 8086 	beq.w	8002384 <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002278:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800227c:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8002280:	d00d      	beq.n	800229e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002288:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800228a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800228e:	f040 8083 	bne.w	8002398 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002292:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 8002296:	f000 8083 	beq.w	80023a0 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800229a:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800229e:	f014 0f08 	tst.w	r4, #8
 80022a2:	d007      	beq.n	80022b4 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022a4:	f01b 0f10 	tst.w	fp, #16
 80022a8:	d004      	beq.n	80022b4 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022aa:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022b4:	f014 0f04 	tst.w	r4, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022ba:	f01b 0f08 	tst.w	fp, #8
 80022be:	d179      	bne.n	80023b4 <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022c0:	f014 0f02 	tst.w	r4, #2
 80022c4:	d004      	beq.n	80022d0 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f013 0f03 	tst.w	r3, #3
 80022ce:	d178      	bne.n	80023c2 <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022d0:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80022d4:	d007      	beq.n	80022e6 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022d6:	f01a 0f10 	tst.w	sl, #16
 80022da:	d004      	beq.n	80022e6 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022dc:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	2210      	movs	r2, #16
 80022e4:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022e6:	f014 0f20 	tst.w	r4, #32
 80022ea:	d002      	beq.n	80022f2 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022ec:	f01a 0f08 	tst.w	sl, #8
 80022f0:	d16b      	bne.n	80023ca <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022f2:	f014 0f10 	tst.w	r4, #16
 80022f6:	d004      	beq.n	8002302 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f013 0f03 	tst.w	r3, #3
 8002300:	d16a      	bne.n	80023d8 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002302:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 8002306:	d002      	beq.n	800230e <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002308:	f018 0f10 	tst.w	r8, #16
 800230c:	d168      	bne.n	80023e0 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800230e:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8002312:	d002      	beq.n	800231a <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002314:	f018 0f08 	tst.w	r8, #8
 8002318:	d169      	bne.n	80023ee <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800231a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800231e:	d07a      	beq.n	8002416 <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002320:	f018 0f04 	tst.w	r8, #4
 8002324:	d074      	beq.n	8002410 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002326:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800232a:	d004      	beq.n	8002336 <HAL_CAN_IRQHandler+0x132>
 800232c:	f019 0f01 	tst.w	r9, #1
 8002330:	d001      	beq.n	8002336 <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 8002332:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002336:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800233a:	d004      	beq.n	8002346 <HAL_CAN_IRQHandler+0x142>
 800233c:	f019 0f02 	tst.w	r9, #2
 8002340:	d001      	beq.n	8002346 <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 8002342:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002346:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 800234a:	d004      	beq.n	8002356 <HAL_CAN_IRQHandler+0x152>
 800234c:	f019 0f04 	tst.w	r9, #4
 8002350:	d001      	beq.n	8002356 <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 8002352:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002356:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800235a:	d059      	beq.n	8002410 <HAL_CAN_IRQHandler+0x20c>
 800235c:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8002360:	d056      	beq.n	8002410 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 8002362:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8002366:	d065      	beq.n	8002434 <HAL_CAN_IRQHandler+0x230>
 8002368:	d858      	bhi.n	800241c <HAL_CAN_IRQHandler+0x218>
 800236a:	f1b9 0f20 	cmp.w	r9, #32
 800236e:	d05e      	beq.n	800242e <HAL_CAN_IRQHandler+0x22a>
 8002370:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8002374:	d142      	bne.n	80023fc <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002376:	f046 0620 	orr.w	r6, r6, #32
            break;
 800237a:	e044      	b.n	8002406 <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff ff36 	bl	80021ee <HAL_CAN_TxMailbox1CompleteCallback>
 8002382:	e77b      	b.n	800227c <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002384:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 8002388:	d002      	beq.n	8002390 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800238a:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 800238e:	e775      	b.n	800227c <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002390:	4628      	mov	r0, r5
 8002392:	f7ff ff2f 	bl	80021f4 <HAL_CAN_TxMailbox1AbortCallback>
 8002396:	e771      	b.n	800227c <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002398:	4628      	mov	r0, r5
 800239a:	f7ff ff29 	bl	80021f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800239e:	e77e      	b.n	800229e <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023a0:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 80023a4:	d002      	beq.n	80023ac <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023a6:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 80023aa:	e778      	b.n	800229e <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023ac:	4628      	mov	r0, r5
 80023ae:	f7ff ff22 	bl	80021f6 <HAL_CAN_TxMailbox2AbortCallback>
 80023b2:	e774      	b.n	800229e <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	2208      	movs	r2, #8
 80023b8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ba:	4628      	mov	r0, r5
 80023bc:	f7ff ff1c 	bl	80021f8 <HAL_CAN_RxFifo0FullCallback>
 80023c0:	e77e      	b.n	80022c0 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023c2:	4628      	mov	r0, r5
 80023c4:	f7fe fb06 	bl	80009d4 <HAL_CAN_RxFifo0MsgPendingCallback>
 80023c8:	e782      	b.n	80022d0 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	2208      	movs	r2, #8
 80023ce:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7ff ff13 	bl	80021fc <HAL_CAN_RxFifo1FullCallback>
 80023d6:	e78c      	b.n	80022f2 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023d8:	4628      	mov	r0, r5
 80023da:	f7ff ff0e 	bl	80021fa <HAL_CAN_RxFifo1MsgPendingCallback>
 80023de:	e790      	b.n	8002302 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	2210      	movs	r2, #16
 80023e4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80023e6:	4628      	mov	r0, r5
 80023e8:	f7ff ff09 	bl	80021fe <HAL_CAN_SleepCallback>
 80023ec:	e78f      	b.n	800230e <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	2208      	movs	r2, #8
 80023f2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff ff03 	bl	8002200 <HAL_CAN_WakeUpFromRxMsgCallback>
 80023fa:	e78e      	b.n	800231a <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 80023fc:	f1b9 0f10 	cmp.w	r9, #16
 8002400:	d101      	bne.n	8002406 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 8002402:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002406:	682a      	ldr	r2, [r5, #0]
 8002408:	6993      	ldr	r3, [r2, #24]
 800240a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800240e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002410:	682b      	ldr	r3, [r5, #0]
 8002412:	2204      	movs	r2, #4
 8002414:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002416:	b99e      	cbnz	r6, 8002440 <HAL_CAN_IRQHandler+0x23c>
}
 8002418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 800241c:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8002420:	d00b      	beq.n	800243a <HAL_CAN_IRQHandler+0x236>
 8002422:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
 8002426:	d1ee      	bne.n	8002406 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002428:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 800242c:	e7eb      	b.n	8002406 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 800242e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8002432:	e7e8      	b.n	8002406 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 8002434:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 8002438:	e7e5      	b.n	8002406 <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 800243a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 800243e:	e7e2      	b.n	8002406 <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8002440:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002442:	4333      	orrs	r3, r6
 8002444:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002446:	4628      	mov	r0, r5
 8002448:	f7ff fedb 	bl	8002202 <HAL_CAN_ErrorCallback>
}
 800244c:	e7e4      	b.n	8002418 <HAL_CAN_IRQHandler+0x214>
	...

08002450 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002450:	2800      	cmp	r0, #0
 8002452:	db08      	blt.n	8002466 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	0109      	lsls	r1, r1, #4
 8002456:	b2c9      	uxtb	r1, r1
 8002458:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800245c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002460:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002464:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	f000 000f 	and.w	r0, r0, #15
 800246a:	0109      	lsls	r1, r1, #4
 800246c:	b2c9      	uxtb	r1, r1
 800246e:	4b01      	ldr	r3, [pc, #4]	@ (8002474 <__NVIC_SetPriority+0x24>)
 8002470:	5419      	strb	r1, [r3, r0]
  }
}
 8002472:	4770      	bx	lr
 8002474:	e000ed14 	.word	0xe000ed14

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247e:	f1c0 0c07 	rsb	ip, r0, #7
 8002482:	f1bc 0f04 	cmp.w	ip, #4
 8002486:	bf28      	it	cs
 8002488:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248c:	1d03      	adds	r3, r0, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d90f      	bls.n	80024b2 <NVIC_EncodePriority+0x3a>
 8002492:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8002498:	fa0e f00c 	lsl.w	r0, lr, ip
 800249c:	ea21 0100 	bic.w	r1, r1, r0
 80024a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80024a6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80024aa:	ea41 0002 	orr.w	r0, r1, r2
 80024ae:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	2300      	movs	r3, #0
 80024b4:	e7ee      	b.n	8002494 <NVIC_EncodePriority+0x1c>
	...

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80024ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024c4:	0200      	lsls	r0, r0, #8
 80024c6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80024cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80024d4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024dc:	b510      	push	{r4, lr}
 80024de:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_NVIC_SetPriority+0x1c>)
 80024e2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80024e8:	f7ff ffc6 	bl	8002478 <NVIC_EncodePriority>
 80024ec:	4601      	mov	r1, r0
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ffae 	bl	8002450 <__NVIC_SetPriority>
}
 80024f4:	bd10      	pop	{r4, pc}
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024fc:	2800      	cmp	r0, #0
 80024fe:	db07      	blt.n	8002510 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002500:	f000 021f 	and.w	r2, r0, #31
 8002504:	0940      	lsrs	r0, r0, #5
 8002506:	2301      	movs	r3, #1
 8002508:	4093      	lsls	r3, r2
 800250a:	4a02      	ldr	r2, [pc, #8]	@ (8002514 <HAL_NVIC_EnableIRQ+0x18>)
 800250c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800251c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800251e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002520:	e0ac      	b.n	800267c <HAL_GPIO_Init+0x164>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002522:	4d85      	ldr	r5, [pc, #532]	@ (8002738 <HAL_GPIO_Init+0x220>)
 8002524:	42ab      	cmp	r3, r5
 8002526:	d010      	beq.n	800254a <HAL_GPIO_Init+0x32>
 8002528:	d907      	bls.n	800253a <HAL_GPIO_Init+0x22>
 800252a:	4d84      	ldr	r5, [pc, #528]	@ (800273c <HAL_GPIO_Init+0x224>)
 800252c:	42ab      	cmp	r3, r5
 800252e:	d00c      	beq.n	800254a <HAL_GPIO_Init+0x32>
 8002530:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002534:	42ab      	cmp	r3, r5
 8002536:	d008      	beq.n	800254a <HAL_GPIO_Init+0x32>
 8002538:	e013      	b.n	8002562 <HAL_GPIO_Init+0x4a>
 800253a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800253e:	42ab      	cmp	r3, r5
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x32>
 8002542:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8002546:	42ab      	cmp	r3, r5
 8002548:	d107      	bne.n	800255a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800254a:	688b      	ldr	r3, [r1, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05f      	beq.n	8002610 <HAL_GPIO_Init+0xf8>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002550:	2b01      	cmp	r3, #1
 8002552:	d058      	beq.n	8002606 <HAL_GPIO_Init+0xee>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002554:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002556:	2408      	movs	r4, #8
 8002558:	e003      	b.n	8002562 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800255a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800255e:	42ab      	cmp	r3, r5
 8002560:	d0f3      	beq.n	800254a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002562:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8002566:	d855      	bhi.n	8002614 <HAL_GPIO_Init+0xfc>
 8002568:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800256a:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800256e:	6833      	ldr	r3, [r6, #0]
 8002570:	250f      	movs	r5, #15
 8002572:	4095      	lsls	r5, r2
 8002574:	ea23 0305 	bic.w	r3, r3, r5
 8002578:	fa04 f202 	lsl.w	r2, r4, r2
 800257c:	4313      	orrs	r3, r2
 800257e:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002580:	684b      	ldr	r3, [r1, #4]
 8002582:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002586:	d077      	beq.n	8002678 <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002588:	4b6d      	ldr	r3, [pc, #436]	@ (8002740 <HAL_GPIO_Init+0x228>)
 800258a:	699a      	ldr	r2, [r3, #24]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	619a      	str	r2, [r3, #24]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800259c:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80025a0:	1c95      	adds	r5, r2, #2
 80025a2:	4b68      	ldr	r3, [pc, #416]	@ (8002744 <HAL_GPIO_Init+0x22c>)
 80025a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025a8:	f00c 0503 	and.w	r5, ip, #3
 80025ac:	00ad      	lsls	r5, r5, #2
 80025ae:	230f      	movs	r3, #15
 80025b0:	40ab      	lsls	r3, r5
 80025b2:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025b6:	4b64      	ldr	r3, [pc, #400]	@ (8002748 <HAL_GPIO_Init+0x230>)
 80025b8:	4298      	cmp	r0, r3
 80025ba:	d032      	beq.n	8002622 <HAL_GPIO_Init+0x10a>
 80025bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025c0:	4298      	cmp	r0, r3
 80025c2:	f000 8097 	beq.w	80026f4 <HAL_GPIO_Init+0x1dc>
 80025c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025ca:	4298      	cmp	r0, r3
 80025cc:	f000 8094 	beq.w	80026f8 <HAL_GPIO_Init+0x1e0>
 80025d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025d4:	4298      	cmp	r0, r3
 80025d6:	f000 8091 	beq.w	80026fc <HAL_GPIO_Init+0x1e4>
 80025da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025de:	4298      	cmp	r0, r3
 80025e0:	f000 808e 	beq.w	8002700 <HAL_GPIO_Init+0x1e8>
 80025e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025e8:	4298      	cmp	r0, r3
 80025ea:	d018      	beq.n	800261e <HAL_GPIO_Init+0x106>
 80025ec:	2306      	movs	r3, #6
 80025ee:	e019      	b.n	8002624 <HAL_GPIO_Init+0x10c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025f0:	68cc      	ldr	r4, [r1, #12]
          break;
 80025f2:	e7b6      	b.n	8002562 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025f4:	68cc      	ldr	r4, [r1, #12]
 80025f6:	3404      	adds	r4, #4
          break;
 80025f8:	e7b3      	b.n	8002562 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025fa:	68cc      	ldr	r4, [r1, #12]
 80025fc:	3408      	adds	r4, #8
          break;
 80025fe:	e7b0      	b.n	8002562 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002600:	68cc      	ldr	r4, [r1, #12]
 8002602:	340c      	adds	r4, #12
          break;
 8002604:	e7ad      	b.n	8002562 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002606:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2408      	movs	r4, #8
 800260a:	e7aa      	b.n	8002562 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800260c:	2400      	movs	r4, #0
 800260e:	e7a8      	b.n	8002562 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002610:	2404      	movs	r4, #4
 8002612:	e7a6      	b.n	8002562 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002614:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002616:	f1ac 0208 	sub.w	r2, ip, #8
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	e7a7      	b.n	800256e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800261e:	2305      	movs	r3, #5
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x10c>
 8002622:	2300      	movs	r3, #0
 8002624:	40ab      	lsls	r3, r5
 8002626:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002628:	3202      	adds	r2, #2
 800262a:	4d46      	ldr	r5, [pc, #280]	@ (8002744 <HAL_GPIO_Init+0x22c>)
 800262c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002630:	684b      	ldr	r3, [r1, #4]
 8002632:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002636:	d065      	beq.n	8002704 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002638:	4a44      	ldr	r2, [pc, #272]	@ (800274c <HAL_GPIO_Init+0x234>)
 800263a:	6893      	ldr	r3, [r2, #8]
 800263c:	ea43 030e 	orr.w	r3, r3, lr
 8002640:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002642:	684b      	ldr	r3, [r1, #4]
 8002644:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002648:	d062      	beq.n	8002710 <HAL_GPIO_Init+0x1f8>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800264a:	4a40      	ldr	r2, [pc, #256]	@ (800274c <HAL_GPIO_Init+0x234>)
 800264c:	68d3      	ldr	r3, [r2, #12]
 800264e:	ea43 030e 	orr.w	r3, r3, lr
 8002652:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002654:	684b      	ldr	r3, [r1, #4]
 8002656:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800265a:	d05f      	beq.n	800271c <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800265c:	4a3b      	ldr	r2, [pc, #236]	@ (800274c <HAL_GPIO_Init+0x234>)
 800265e:	6853      	ldr	r3, [r2, #4]
 8002660:	ea43 030e 	orr.w	r3, r3, lr
 8002664:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002666:	684b      	ldr	r3, [r1, #4]
 8002668:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800266c:	d05c      	beq.n	8002728 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800266e:	4a37      	ldr	r2, [pc, #220]	@ (800274c <HAL_GPIO_Init+0x234>)
 8002670:	6813      	ldr	r3, [r2, #0]
 8002672:	ea43 030e 	orr.w	r3, r3, lr
 8002676:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8002678:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267c:	680b      	ldr	r3, [r1, #0]
 800267e:	fa33 f20c 	lsrs.w	r2, r3, ip
 8002682:	d057      	beq.n	8002734 <HAL_GPIO_Init+0x21c>
    ioposition = (0x01uL << position);
 8002684:	2201      	movs	r2, #1
 8002686:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268a:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800268e:	ea32 0303 	bics.w	r3, r2, r3
 8002692:	d1f1      	bne.n	8002678 <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8002694:	684b      	ldr	r3, [r1, #4]
 8002696:	2b12      	cmp	r3, #18
 8002698:	f63f af43 	bhi.w	8002522 <HAL_GPIO_Init+0xa>
 800269c:	2b12      	cmp	r3, #18
 800269e:	f63f af60 	bhi.w	8002562 <HAL_GPIO_Init+0x4a>
 80026a2:	a501      	add	r5, pc, #4	@ (adr r5, 80026a8 <HAL_GPIO_Init+0x190>)
 80026a4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80026a8:	0800254b 	.word	0x0800254b
 80026ac:	080025f1 	.word	0x080025f1
 80026b0:	080025fb 	.word	0x080025fb
 80026b4:	0800260d 	.word	0x0800260d
 80026b8:	08002563 	.word	0x08002563
 80026bc:	08002563 	.word	0x08002563
 80026c0:	08002563 	.word	0x08002563
 80026c4:	08002563 	.word	0x08002563
 80026c8:	08002563 	.word	0x08002563
 80026cc:	08002563 	.word	0x08002563
 80026d0:	08002563 	.word	0x08002563
 80026d4:	08002563 	.word	0x08002563
 80026d8:	08002563 	.word	0x08002563
 80026dc:	08002563 	.word	0x08002563
 80026e0:	08002563 	.word	0x08002563
 80026e4:	08002563 	.word	0x08002563
 80026e8:	08002563 	.word	0x08002563
 80026ec:	080025f5 	.word	0x080025f5
 80026f0:	08002601 	.word	0x08002601
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f4:	2301      	movs	r3, #1
 80026f6:	e795      	b.n	8002624 <HAL_GPIO_Init+0x10c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e793      	b.n	8002624 <HAL_GPIO_Init+0x10c>
 80026fc:	2303      	movs	r3, #3
 80026fe:	e791      	b.n	8002624 <HAL_GPIO_Init+0x10c>
 8002700:	2304      	movs	r3, #4
 8002702:	e78f      	b.n	8002624 <HAL_GPIO_Init+0x10c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002704:	4a11      	ldr	r2, [pc, #68]	@ (800274c <HAL_GPIO_Init+0x234>)
 8002706:	6893      	ldr	r3, [r2, #8]
 8002708:	ea23 030e 	bic.w	r3, r3, lr
 800270c:	6093      	str	r3, [r2, #8]
 800270e:	e798      	b.n	8002642 <HAL_GPIO_Init+0x12a>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002710:	4a0e      	ldr	r2, [pc, #56]	@ (800274c <HAL_GPIO_Init+0x234>)
 8002712:	68d3      	ldr	r3, [r2, #12]
 8002714:	ea23 030e 	bic.w	r3, r3, lr
 8002718:	60d3      	str	r3, [r2, #12]
 800271a:	e79b      	b.n	8002654 <HAL_GPIO_Init+0x13c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_GPIO_Init+0x234>)
 800271e:	6853      	ldr	r3, [r2, #4]
 8002720:	ea23 030e 	bic.w	r3, r3, lr
 8002724:	6053      	str	r3, [r2, #4]
 8002726:	e79e      	b.n	8002666 <HAL_GPIO_Init+0x14e>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <HAL_GPIO_Init+0x234>)
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	ea23 030e 	bic.w	r3, r3, lr
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e7a1      	b.n	8002678 <HAL_GPIO_Init+0x160>
  }
}
 8002734:	b002      	add	sp, #8
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	10220000 	.word	0x10220000
 800273c:	10310000 	.word	0x10310000
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	40010800 	.word	0x40010800
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	6883      	ldr	r3, [r0, #8]
 8002752:	4219      	tst	r1, r3
 8002754:	d001      	beq.n	800275a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002756:	2001      	movs	r0, #1
 8002758:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800275a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800275c:	4770      	bx	lr

0800275e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800275e:	b10a      	cbz	r2, 8002764 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002760:	6101      	str	r1, [r0, #16]
 8002762:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002764:	0409      	lsls	r1, r1, #16
 8002766:	6101      	str	r1, [r0, #16]
  }
}
 8002768:	4770      	bx	lr

0800276a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800276a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276c:	ea01 0203 	and.w	r2, r1, r3
 8002770:	ea21 0103 	bic.w	r1, r1, r3
 8002774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002778:	6101      	str	r1, [r0, #16]
}
 800277a:	4770      	bx	lr

0800277c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800277c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	4203      	tst	r3, r0
 8002784:	d100      	bne.n	8002788 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002786:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002788:	4b02      	ldr	r3, [pc, #8]	@ (8002794 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800278a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	f7fe febc 	bl	8001508 <HAL_GPIO_EXTI_Callback>
}
 8002790:	e7f9      	b.n	8002786 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002792:	bf00      	nop
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002798:	b340      	cbz	r0, 80027ec <HAL_IWDG_Init+0x54>
{
 800279a:	b538      	push	{r3, r4, r5, lr}
 800279c:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800279e:	6803      	ldr	r3, [r0, #0]
 80027a0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80027a4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80027a6:	6803      	ldr	r3, [r0, #0]
 80027a8:	f245 5255 	movw	r2, #21845	@ 0x5555
 80027ac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	6842      	ldr	r2, [r0, #4]
 80027b2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80027b4:	6803      	ldr	r3, [r0, #0]
 80027b6:	6882      	ldr	r2, [r0, #8]
 80027b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80027ba:	f7fe ff9d 	bl	80016f8 <HAL_GetTick>
 80027be:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	f012 0f03 	tst.w	r2, #3
 80027c8:	d00b      	beq.n	80027e2 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80027ca:	f7fe ff95 	bl	80016f8 <HAL_GetTick>
 80027ce:	1b40      	subs	r0, r0, r5
 80027d0:	2827      	cmp	r0, #39	@ 0x27
 80027d2:	d9f5      	bls.n	80027c0 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f013 0f03 	tst.w	r3, #3
 80027dc:	d0f0      	beq.n	80027c0 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 80027de:	2003      	movs	r0, #3
 80027e0:	e003      	b.n	80027ea <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027e2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80027e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027e8:	2000      	movs	r0, #0
}
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
}
 80027ee:	4770      	bx	lr

080027f0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027f0:	6803      	ldr	r3, [r0, #0]
 80027f2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80027f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80027f8:	2000      	movs	r0, #0
 80027fa:	4770      	bx	lr

080027fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027fc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <RCC_Delay+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <RCC_Delay+0x28>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0a5b      	lsrs	r3, r3, #9
 800280a:	fb00 f303 	mul.w	r3, r0, r3
 800280e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002810:	bf00      	nop
  }
  while (Delay --);
 8002812:	9b01      	ldr	r3, [sp, #4]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <RCC_Delay+0x14>
}
 800281c:	b002      	add	sp, #8
 800281e:	4770      	bx	lr
 8002820:	20000088 	.word	0x20000088
 8002824:	10624dd3 	.word	0x10624dd3

08002828 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002828:	2800      	cmp	r0, #0
 800282a:	f000 81f1 	beq.w	8002c10 <HAL_RCC_OscConfig+0x3e8>
{
 800282e:	b570      	push	{r4, r5, r6, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002834:	6803      	ldr	r3, [r0, #0]
 8002836:	f013 0f01 	tst.w	r3, #1
 800283a:	d02c      	beq.n	8002896 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283c:	4b99      	ldr	r3, [pc, #612]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b04      	cmp	r3, #4
 8002846:	d01d      	beq.n	8002884 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002848:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b08      	cmp	r3, #8
 8002852:	d012      	beq.n	800287a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285a:	d041      	beq.n	80028e0 <HAL_RCC_OscConfig+0xb8>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d155      	bne.n	800290c <HAL_RCC_OscConfig+0xe4>
 8002860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002864:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e037      	b.n	80028ea <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800287a:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002882:	d0e7      	beq.n	8002854 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	4b87      	ldr	r3, [pc, #540]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800288c:	d003      	beq.n	8002896 <HAL_RCC_OscConfig+0x6e>
 800288e:	6863      	ldr	r3, [r4, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 81bf 	beq.w	8002c14 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	f013 0f02 	tst.w	r3, #2
 800289c:	d075      	beq.n	800298a <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289e:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f013 0f0c 	tst.w	r3, #12
 80028a6:	d05f      	beq.n	8002968 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d054      	beq.n	800295e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808a 	beq.w	80029d0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80028bc:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028c2:	f7fe ff19 	bl	80016f8 <HAL_GetTick>
 80028c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c8:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f013 0f02 	tst.w	r3, #2
 80028d0:	d175      	bne.n	80029be <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe ff11 	bl	80016f8 <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	2802      	cmp	r0, #2
 80028da:	d9f5      	bls.n	80028c8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80028dc:	2003      	movs	r0, #3
 80028de:	e19e      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e0:	4a70      	ldr	r2, [pc, #448]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ea:	6863      	ldr	r3, [r4, #4]
 80028ec:	b343      	cbz	r3, 8002940 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80028ee:	f7fe ff03 	bl	80016f8 <HAL_GetTick>
 80028f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f4:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80028fc:	d1cb      	bne.n	8002896 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fe:	f7fe fefb 	bl	80016f8 <HAL_GetTick>
 8002902:	1b40      	subs	r0, r0, r5
 8002904:	2864      	cmp	r0, #100	@ 0x64
 8002906:	d9f5      	bls.n	80028f4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002908:	2003      	movs	r0, #3
 800290a:	e188      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002910:	d009      	beq.n	8002926 <HAL_RCC_OscConfig+0xfe>
 8002912:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e7e1      	b.n	80028ea <HAL_RCC_OscConfig+0xc2>
 8002926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800292a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e7d4      	b.n	80028ea <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002940:	f7fe feda 	bl	80016f8 <HAL_GetTick>
 8002944:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800294e:	d0a2      	beq.n	8002896 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe fed2 	bl	80016f8 <HAL_GetTick>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	2864      	cmp	r0, #100	@ 0x64
 8002958:	d9f5      	bls.n	8002946 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800295a:	2003      	movs	r0, #3
 800295c:	e15f      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b51      	ldr	r3, [pc, #324]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002966:	d1a5      	bne.n	80028b4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002968:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f013 0f02 	tst.w	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	f040 814f 	bne.w	8002c18 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002982:	6961      	ldr	r1, [r4, #20]
 8002984:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002988:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f013 0f08 	tst.w	r3, #8
 8002990:	d033      	beq.n	80029fa <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	69a3      	ldr	r3, [r4, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002998:	4b43      	ldr	r3, [pc, #268]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 800299a:	2201      	movs	r2, #1
 800299c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80029a0:	f7fe feaa 	bl	80016f8 <HAL_GetTick>
 80029a4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	f013 0f02 	tst.w	r3, #2
 80029ae:	d121      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fea2 	bl	80016f8 <HAL_GetTick>
 80029b4:	1b40      	subs	r0, r0, r5
 80029b6:	2802      	cmp	r0, #2
 80029b8:	d9f5      	bls.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80029ba:	2003      	movs	r0, #3
 80029bc:	e12f      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029be:	4a39      	ldr	r2, [pc, #228]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80029c6:	6961      	ldr	r1, [r4, #20]
 80029c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e7dc      	b.n	800298a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029d6:	f7fe fe8f 	bl	80016f8 <HAL_GetTick>
 80029da:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f013 0f02 	tst.w	r3, #2
 80029e4:	d0d1      	beq.n	800298a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e6:	f7fe fe87 	bl	80016f8 <HAL_GetTick>
 80029ea:	1b40      	subs	r0, r0, r5
 80029ec:	2802      	cmp	r0, #2
 80029ee:	d9f5      	bls.n	80029dc <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80029f0:	2003      	movs	r0, #3
 80029f2:	e114      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff ff01 	bl	80027fc <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	f013 0f04 	tst.w	r3, #4
 8002a00:	f000 8096 	beq.w	8002b30 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a0c:	d134      	bne.n	8002a78 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a16:	61da      	str	r2, [r3, #28]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a22:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_OscConfig+0x284>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a2c:	d026      	beq.n	8002a7c <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2e:	68e3      	ldr	r3, [r4, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d03d      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x288>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d153      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2b8>
 8002a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a3c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002a40:	6a1a      	ldr	r2, [r3, #32]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	621a      	str	r2, [r3, #32]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	e033      	b.n	8002aba <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_RCC_OscConfig+0x280>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe4d 	bl	80016f8 <HAL_GetTick>
 8002a5e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	f013 0f02 	tst.w	r3, #2
 8002a68:	d0c7      	beq.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fe45 	bl	80016f8 <HAL_GetTick>
 8002a6e:	1b40      	subs	r0, r0, r5
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d9f5      	bls.n	8002a60 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002a74:	2003      	movs	r0, #3
 8002a76:	e0d2      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002a78:	2500      	movs	r5, #0
 8002a7a:	e7d3      	b.n	8002a24 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002aac <HAL_RCC_OscConfig+0x284>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a86:	f7fe fe37 	bl	80016f8 <HAL_GetTick>
 8002a8a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_RCC_OscConfig+0x284>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a94:	d1cb      	bne.n	8002a2e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a96:	f7fe fe2f 	bl	80016f8 <HAL_GetTick>
 8002a9a:	1b80      	subs	r0, r0, r6
 8002a9c:	2864      	cmp	r0, #100	@ 0x64
 8002a9e:	d9f5      	bls.n	8002a8c <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	e0bc      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	42420000 	.word	0x42420000
 8002aac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002ab2:	6a13      	ldr	r3, [r2, #32]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aba:	68e3      	ldr	r3, [r4, #12]
 8002abc:	b333      	cbz	r3, 8002b0c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8002abe:	f7fe fe1b 	bl	80016f8 <HAL_GetTick>
 8002ac2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f013 0f02 	tst.w	r3, #2
 8002acc:	d12f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ace:	f7fe fe13 	bl	80016f8 <HAL_GetTick>
 8002ad2:	1b80      	subs	r0, r0, r6
 8002ad4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ad8:	4298      	cmp	r0, r3
 8002ada:	d9f3      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8002adc:	2003      	movs	r0, #3
 8002ade:	e09e      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2d0>
 8002ae4:	4b52      	ldr	r3, [pc, #328]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	621a      	str	r2, [r3, #32]
 8002aee:	6a1a      	ldr	r2, [r3, #32]
 8002af0:	f022 0204 	bic.w	r2, r2, #4
 8002af4:	621a      	str	r2, [r3, #32]
 8002af6:	e7e0      	b.n	8002aba <HAL_RCC_OscConfig+0x292>
 8002af8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	f042 0204 	orr.w	r2, r2, #4
 8002b00:	621a      	str	r2, [r3, #32]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	621a      	str	r2, [r3, #32]
 8002b0a:	e7d6      	b.n	8002aba <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fdf4 	bl	80016f8 <HAL_GetTick>
 8002b10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f013 0f02 	tst.w	r3, #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fdec 	bl	80016f8 <HAL_GetTick>
 8002b20:	1b80      	subs	r0, r0, r6
 8002b22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d9f3      	bls.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	e077      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8002b2e:	b9e5      	cbnz	r5, 8002b6a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	69e3      	ldr	r3, [r4, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d072      	beq.n	8002c1c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b36:	4a3e      	ldr	r2, [pc, #248]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002b38:	6852      	ldr	r2, [r2, #4]
 8002b3a:	f002 020c 	and.w	r2, r2, #12
 8002b3e:	2a08      	cmp	r2, #8
 8002b40:	d056      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d017      	beq.n	8002b76 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_RCC_OscConfig+0x40c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fdd4 	bl	80016f8 <HAL_GetTick>
 8002b50:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	4b37      	ldr	r3, [pc, #220]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b5a:	d047      	beq.n	8002bec <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7fe fdcc 	bl	80016f8 <HAL_GetTick>
 8002b60:	1b00      	subs	r0, r0, r4
 8002b62:	2802      	cmp	r0, #2
 8002b64:	d9f5      	bls.n	8002b52 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8002b66:	2003      	movs	r0, #3
 8002b68:	e059      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4a31      	ldr	r2, [pc, #196]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002b6c:	69d3      	ldr	r3, [r2, #28]
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	e7dc      	b.n	8002b30 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <HAL_RCC_OscConfig+0x40c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fdbc 	bl	80016f8 <HAL_GetTick>
 8002b80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002b8a:	d006      	beq.n	8002b9a <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe fdb4 	bl	80016f8 <HAL_GetTick>
 8002b90:	1b40      	subs	r0, r0, r5
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d9f5      	bls.n	8002b82 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
 8002b98:	e041      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b9a:	6a23      	ldr	r3, [r4, #32]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba2:	4923      	ldr	r1, [pc, #140]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002ba4:	684b      	ldr	r3, [r1, #4]
 8002ba6:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8002baa:	6a22      	ldr	r2, [r4, #32]
 8002bac:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002bae:	4302      	orrs	r2, r0
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c34 <HAL_RCC_OscConfig+0x40c>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002bba:	f7fe fd9d 	bl	80016f8 <HAL_GetTick>
 8002bbe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002bc8:	d10e      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fd95 	bl	80016f8 <HAL_GetTick>
 8002bce:	1b00      	subs	r0, r0, r4
 8002bd0:	2802      	cmp	r0, #2
 8002bd2:	d9f5      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002bd4:	2003      	movs	r0, #3
 8002bd6:	e022      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bd8:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002bda:	6853      	ldr	r3, [r2, #4]
 8002bdc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002be0:	68a1      	ldr	r1, [r4, #8]
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]
 8002be6:	e7dc      	b.n	8002ba2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002be8:	2000      	movs	r0, #0
 8002bea:	e018      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
 8002bec:	2000      	movs	r0, #0
 8002bee:	e016      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_RCC_OscConfig+0x408>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf8:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002bfc:	6a22      	ldr	r2, [r4, #32]
 8002bfe:	4291      	cmp	r1, r2
 8002c00:	d111      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c02:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002c06:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10e      	bne.n	8002c2a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e006      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
}
 8002c12:	4770      	bx	lr
        return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8002c1c:	2000      	movs	r0, #0
}
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e7fb      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
 8002c28:	e7f9      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	e7f7      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f6>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	42420000 	.word	0x42420000

08002c38 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x40>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	f003 020c 	and.w	r2, r3, #12
 8002c40:	2a08      	cmp	r2, #8
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002c44:	480d      	ldr	r0, [pc, #52]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002c46:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c48:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002c4c:	490c      	ldr	r1, [pc, #48]	@ (8002c80 <HAL_RCC_GetSysClockFreq+0x48>)
 8002c4e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c50:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002c54:	d00b      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c56:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x40>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c62:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <HAL_RCC_GetSysClockFreq+0x44>)
 8002c64:	fb02 f000 	mul.w	r0, r2, r0
 8002c68:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c6c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x50>)
 8002c70:	fb03 f000 	mul.w	r0, r3, r0
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	08005748 	.word	0x08005748
 8002c84:	08005744 	.word	0x08005744
 8002c88:	003d0900 	.word	0x003d0900

08002c8c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	f000 80a0 	beq.w	8002dd2 <HAL_RCC_ClockConfig+0x146>
{
 8002c92:	b570      	push	{r4, r5, r6, lr}
 8002c94:	460d      	mov	r5, r1
 8002c96:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <HAL_RCC_ClockConfig+0x158>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	d20b      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8002de4 <HAL_RCC_ClockConfig+0x158>)
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	f023 0307 	bic.w	r3, r3, #7
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb0:	6813      	ldr	r3, [r2, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	428b      	cmp	r3, r1
 8002cb8:	f040 808d 	bne.w	8002dd6 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	f013 0f02 	tst.w	r3, #2
 8002cc2:	d017      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	f013 0f04 	tst.w	r3, #4
 8002cc8:	d004      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cca:	4a47      	ldr	r2, [pc, #284]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002ccc:	6853      	ldr	r3, [r2, #4]
 8002cce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cd2:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f013 0f08 	tst.w	r3, #8
 8002cda:	d004      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4a42      	ldr	r2, [pc, #264]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002cde:	6853      	ldr	r3, [r2, #4]
 8002ce0:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ce4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce6:	4a40      	ldr	r2, [pc, #256]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002ce8:	6853      	ldr	r3, [r2, #4]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cee:	68a1      	ldr	r1, [r4, #8]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f013 0f01 	tst.w	r3, #1
 8002cfa:	d031      	beq.n	8002d60 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d020      	beq.n	8002d44 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d025      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4a38      	ldr	r2, [pc, #224]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f012 0f02 	tst.w	r2, #2
 8002d0e:	d064      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d10:	4935      	ldr	r1, [pc, #212]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d12:	684a      	ldr	r2, [r1, #4]
 8002d14:	f022 0203 	bic.w	r2, r2, #3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002d1c:	f7fe fcec 	bl	80016f8 <HAL_GetTick>
 8002d20:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	6862      	ldr	r2, [r4, #4]
 8002d2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d32:	f7fe fce1 	bl	80016f8 <HAL_GetTick>
 8002d36:	1b80      	subs	r0, r0, r6
 8002d38:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	d9f0      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002d40:	2003      	movs	r0, #3
 8002d42:	e045      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d44:	4a28      	ldr	r2, [pc, #160]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002d4c:	d1e0      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e03e      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4a25      	ldr	r2, [pc, #148]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002d5a:	d1d9      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	e037      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <HAL_RCC_ClockConfig+0x158>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	42ab      	cmp	r3, r5
 8002d6a:	d90a      	bls.n	8002d82 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_RCC_ClockConfig+0x158>)
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	f023 0307 	bic.w	r3, r3, #7
 8002d74:	432b      	orrs	r3, r5
 8002d76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	42ab      	cmp	r3, r5
 8002d80:	d12d      	bne.n	8002dde <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	f013 0f04 	tst.w	r3, #4
 8002d88:	d006      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8a:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002d8c:	6853      	ldr	r3, [r2, #4]
 8002d8e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d92:	68e1      	ldr	r1, [r4, #12]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	f013 0f08 	tst.w	r3, #8
 8002d9e:	d007      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002da2:	6853      	ldr	r3, [r2, #4]
 8002da4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002da8:	6921      	ldr	r1, [r4, #16]
 8002daa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dae:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db0:	f7ff ff42 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCC_ClockConfig+0x15c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_RCC_ClockConfig+0x160>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	40d8      	lsrs	r0, r3
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_ClockConfig+0x164>)
 8002dc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_ClockConfig+0x168>)
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	f7fe fb21 	bl	8001410 <HAL_InitTick>
  return HAL_OK;
 8002dce:	2000      	movs	r0, #0
}
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002dd2:	2001      	movs	r0, #1
}
 8002dd4:	4770      	bx	lr
    return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	e7fa      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002dda:	2001      	movs	r0, #1
 8002ddc:	e7f8      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002dde:	2001      	movs	r0, #1
 8002de0:	e7f6      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
 8002de2:	bf00      	nop
 8002de4:	40022000 	.word	0x40022000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08005734 	.word	0x08005734
 8002df0:	20000088 	.word	0x20000088
 8002df4:	20000090 	.word	0x20000090

08002df8 <HAL_RCC_GetHCLKFreq>:
}
 8002df8:	4b01      	ldr	r3, [pc, #4]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x8>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000088 	.word	0x20000088

08002e04 <HAL_RCC_GetPCLK1Freq>:
{
 8002e04:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e06:	f7ff fff7 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002e12:	4a03      	ldr	r2, [pc, #12]	@ (8002e20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e14:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e16:	40d8      	lsrs	r0, r3
 8002e18:	bd08      	pop	{r3, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	0800572c 	.word	0x0800572c

08002e24 <HAL_RCC_GetPCLK2Freq>:
{
 8002e24:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e26:	f7ff ffe7 	bl	8002df8 <HAL_RCC_GetHCLKFreq>
 8002e2a:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002e32:	4a03      	ldr	r2, [pc, #12]	@ (8002e40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
}
 8002e36:	40d8      	lsrs	r0, r3
 8002e38:	bd08      	pop	{r3, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	0800572c 	.word	0x0800572c

08002e44 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e44:	230f      	movs	r3, #15
 8002e46:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_GetClockConfig+0x34>)
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002e58:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002e60:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e6a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e6c:	4b03      	ldr	r3, [pc, #12]	@ (8002e7c <HAL_RCC_GetClockConfig+0x38>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	600b      	str	r3, [r1, #0]
}
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40022000 	.word	0x40022000

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e86:	6803      	ldr	r3, [r0, #0]
 8002e88:	f013 0f01 	tst.w	r3, #1
 8002e8c:	d036      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002e96:	d149      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b3c      	ldr	r3, [pc, #240]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002eac:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002eb6:	d03b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb8:	4b34      	ldr	r3, [pc, #208]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ebc:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002ec0:	d013      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d00e      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002ece:	6a13      	ldr	r3, [r2, #32]
 8002ed0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed4:	492f      	ldr	r1, [pc, #188]	@ (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002ed6:	2601      	movs	r6, #1
 8002ed8:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002edc:	2600      	movs	r6, #0
 8002ede:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee4:	f013 0f01 	tst.w	r3, #1
 8002ee8:	d136      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	4a28      	ldr	r2, [pc, #160]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002eec:	6a13      	ldr	r3, [r2, #32]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef2:	6861      	ldr	r1, [r4, #4]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef8:	2d00      	cmp	r5, #0
 8002efa:	d13e      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	f013 0f02 	tst.w	r3, #2
 8002f02:	d006      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f04:	4a21      	ldr	r2, [pc, #132]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f06:	6853      	ldr	r3, [r2, #4]
 8002f08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f0c:	68a1      	ldr	r1, [r4, #8]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	f013 0f10 	tst.w	r3, #16
 8002f18:	d034      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f22:	6961      	ldr	r1, [r4, #20]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e02c      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8002f2c:	2500      	movs	r5, #0
 8002f2e:	e7be      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f30:	4a17      	ldr	r2, [pc, #92]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fbdd 	bl	80016f8 <HAL_GetTick>
 8002f3e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b13      	ldr	r3, [pc, #76]	@ (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002f48:	d1b6      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4a:	f7fe fbd5 	bl	80016f8 <HAL_GetTick>
 8002f4e:	1b80      	subs	r0, r0, r6
 8002f50:	2864      	cmp	r0, #100	@ 0x64
 8002f52:	d9f5      	bls.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002f54:	2003      	movs	r0, #3
 8002f56:	e016      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002f58:	f7fe fbce 	bl	80016f8 <HAL_GetTick>
 8002f5c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f013 0f02 	tst.w	r3, #2
 8002f66:	d1c0      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fbc6 	bl	80016f8 <HAL_GetTick>
 8002f6c:	1b80      	subs	r0, r0, r6
 8002f6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002f72:	4298      	cmp	r0, r3
 8002f74:	d9f3      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8002f76:	2003      	movs	r0, #3
 8002f78:	e005      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	69d3      	ldr	r3, [r2, #28]
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	e7bb      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002f84:	2000      	movs	r0, #0
}
 8002f86:	b002      	add	sp, #8
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420000 	.word	0x42420000

08002f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f98:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f9a:	3801      	subs	r0, #1
 8002f9c:	280f      	cmp	r0, #15
 8002f9e:	d863      	bhi.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8002fa0:	e8df f000 	tbb	[pc, r0]
 8002fa4:	2f625735 	.word	0x2f625735
 8002fa8:	32626262 	.word	0x32626262
 8002fac:	62626262 	.word	0x62626262
 8002fb0:	08626262 	.word	0x08626262
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002fb6:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8002fbe:	d054      	beq.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fc0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8002fc4:	492c      	ldr	r1, [pc, #176]	@ (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8002fc6:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc8:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002fcc:	d015      	beq.n	8002ffa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002fd6:	4a29      	ldr	r2, [pc, #164]	@ (800307c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8002fd8:	5cd2      	ldrb	r2, [r2, r3]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fda:	4b29      	ldr	r3, [pc, #164]	@ (8003080 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe0:	fb03 f000 	mul.w	r0, r3, r0
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fe4:	4b23      	ldr	r3, [pc, #140]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002fec:	d13d      	bne.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8002fee:	0040      	lsls	r0, r0, #1
 8002ff0:	4b24      	ldr	r3, [pc, #144]	@ (8003084 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002ff2:	fba3 3000 	umull	r3, r0, r3, r0
 8002ff6:	0840      	lsrs	r0, r0, #1
 8002ff8:	e037      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ffa:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002ffc:	fb03 f000 	mul.w	r0, r3, r0
 8003000:	e7f0      	b.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003002:	f7ff fe19 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003006:	e030      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003008:	f7ff fe16 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800300c:	e02d      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800300e:	4b19      	ldr	r3, [pc, #100]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8003010:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003012:	f240 3202 	movw	r2, #770	@ 0x302
 8003016:	401a      	ands	r2, r3
 8003018:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 800301c:	d026      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800301e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003022:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003026:	d004      	beq.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800302c:	d009      	beq.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
  uint32_t temp_reg = 0U, frequency = 0U;
 800302e:	2000      	movs	r0, #0
 8003030:	e01b      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003032:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8003034:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003036:	f012 0f02 	tst.w	r2, #2
 800303a:	d0f5      	beq.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
        frequency = LSI_VALUE;
 800303c:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8003040:	e013      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003042:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800304a:	d00e      	beq.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      {
        frequency = HSE_VALUE / 128U;
 800304c:	f24f 4024 	movw	r0, #62500	@ 0xf424
    default:
    {
      break;
    }
  }
  return (frequency);
 8003050:	e00b      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003052:	f7ff fee7 	bl	8002e24 <HAL_RCC_GetPCLK2Freq>
 8003056:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  switch (PeriphClk)
 8003068:	2000      	movs	r0, #0
}
 800306a:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 800306c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003070:	e7fb      	b.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	0800575c 	.word	0x0800575c
 800307c:	08005758 	.word	0x08005758
 8003080:	007a1200 	.word	0x007a1200
 8003084:	aaaaaaab 	.word	0xaaaaaaab
 8003088:	003d0900 	.word	0x003d0900

0800308c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800308c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003090:	6a02      	ldr	r2, [r0, #32]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800309c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	680c      	ldr	r4, [r1, #0]
 80030a2:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a6:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030aa:	688b      	ldr	r3, [r1, #8]
 80030ac:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b0:	4d11      	ldr	r5, [pc, #68]	@ (80030f8 <TIM_OC1_SetConfig+0x6c>)
 80030b2:	42a8      	cmp	r0, r5
 80030b4:	d003      	beq.n	80030be <TIM_OC1_SetConfig+0x32>
 80030b6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80030ba:	42a8      	cmp	r0, r5
 80030bc:	d105      	bne.n	80030ca <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030be:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c2:	68cd      	ldr	r5, [r1, #12]
 80030c4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030c6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ca:	4d0b      	ldr	r5, [pc, #44]	@ (80030f8 <TIM_OC1_SetConfig+0x6c>)
 80030cc:	42a8      	cmp	r0, r5
 80030ce:	d003      	beq.n	80030d8 <TIM_OC1_SetConfig+0x4c>
 80030d0:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80030d4:	42a8      	cmp	r0, r5
 80030d6:	d107      	bne.n	80030e8 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030dc:	694d      	ldr	r5, [r1, #20]
 80030de:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e2:	698a      	ldr	r2, [r1, #24]
 80030e4:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ea:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ec:	684a      	ldr	r2, [r1, #4]
 80030ee:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f0:	6203      	str	r3, [r0, #32]
}
 80030f2:	bc30      	pop	{r4, r5}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00

080030fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003100:	6a02      	ldr	r2, [r0, #32]
 8003102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003106:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800310a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800310c:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003110:	680c      	ldr	r4, [r1, #0]
 8003112:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003116:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800311a:	688c      	ldr	r4, [r1, #8]
 800311c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003120:	4c11      	ldr	r4, [pc, #68]	@ (8003168 <TIM_OC3_SetConfig+0x6c>)
 8003122:	42a0      	cmp	r0, r4
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x32>
 8003126:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800312a:	42a0      	cmp	r0, r4
 800312c:	d106      	bne.n	800313c <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003132:	68cc      	ldr	r4, [r1, #12]
 8003134:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003138:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313c:	4c0a      	ldr	r4, [pc, #40]	@ (8003168 <TIM_OC3_SetConfig+0x6c>)
 800313e:	42a0      	cmp	r0, r4
 8003140:	d003      	beq.n	800314a <TIM_OC3_SetConfig+0x4e>
 8003142:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8003146:	42a0      	cmp	r0, r4
 8003148:	d107      	bne.n	800315a <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800314a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314e:	694c      	ldr	r4, [r1, #20]
 8003150:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003154:	698c      	ldr	r4, [r1, #24]
 8003156:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315c:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800315e:	684a      	ldr	r2, [r1, #4]
 8003160:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003162:	6203      	str	r3, [r0, #32]
}
 8003164:	bc30      	pop	{r4, r5}
 8003166:	4770      	bx	lr
 8003168:	40012c00 	.word	0x40012c00

0800316c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003170:	6a02      	ldr	r2, [r0, #32]
 8003172:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003176:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800317a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800317c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003180:	680d      	ldr	r5, [r1, #0]
 8003182:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003186:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800318a:	688d      	ldr	r5, [r1, #8]
 800318c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003190:	4d09      	ldr	r5, [pc, #36]	@ (80031b8 <TIM_OC4_SetConfig+0x4c>)
 8003192:	42a8      	cmp	r0, r5
 8003194:	d003      	beq.n	800319e <TIM_OC4_SetConfig+0x32>
 8003196:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800319a:	42a8      	cmp	r0, r5
 800319c:	d104      	bne.n	80031a8 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800319e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a2:	694d      	ldr	r5, [r1, #20]
 80031a4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031aa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031ac:	684a      	ldr	r2, [r1, #4]
 80031ae:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	6203      	str	r3, [r0, #32]
}
 80031b2:	bc30      	pop	{r4, r5}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00

080031bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031c0:	6a04      	ldr	r4, [r0, #32]
 80031c2:	f024 0401 	bic.w	r4, r4, #1
 80031c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ca:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ce:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80031d6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80031da:	6203      	str	r3, [r0, #32]
}
 80031dc:	bc10      	pop	{r4}
 80031de:	4770      	bx	lr

080031e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e4:	6a04      	ldr	r4, [r0, #32]
 80031e6:	f024 0410 	bic.w	r4, r4, #16
 80031ea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ee:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80031fa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003200:	6203      	str	r3, [r0, #32]
}
 8003202:	bc10      	pop	{r4}
 8003204:	4770      	bx	lr

08003206 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003206:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800320c:	430b      	orrs	r3, r1
 800320e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	6083      	str	r3, [r0, #8]
}
 8003214:	4770      	bx	lr
	...

08003218 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d12f      	bne.n	8003282 <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	6802      	ldr	r2, [r0, #0]
 800322a:	68d3      	ldr	r3, [r2, #12]
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	4a15      	ldr	r2, [pc, #84]	@ (800328c <HAL_TIM_Base_Start_IT+0x74>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d018      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
 800323a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323e:	4293      	cmp	r3, r2
 8003240:	d014      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003246:	d011      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
 8003248:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800324c:	4293      	cmp	r3, r2
 800324e:	d00d      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
 8003250:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003254:	4293      	cmp	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
 8003258:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800325c:	4293      	cmp	r3, r2
 800325e:	d005      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003268:	2000      	movs	r0, #0
 800326a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	2a06      	cmp	r2, #6
 8003274:	d007      	beq.n	8003286 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800327e:	2000      	movs	r0, #0
 8003280:	4770      	bx	lr
    return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
 8003284:	4770      	bx	lr
  return HAL_OK;
 8003286:	2000      	movs	r0, #0
}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40012c00 	.word	0x40012c00

08003290 <HAL_TIM_PWM_MspInit>:
}
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_IC_CaptureCallback>:
}
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_TriggerCallback>:
}
 8003298:	4770      	bx	lr

0800329a <HAL_TIM_IRQHandler>:
{
 800329a:	b510      	push	{r4, lr}
 800329c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	f012 0f02 	tst.w	r2, #2
 80032a6:	d011      	beq.n	80032cc <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	f012 0f02 	tst.w	r2, #2
 80032ae:	d00d      	beq.n	80032cc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b0:	f06f 0202 	mvn.w	r2, #2
 80032b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f013 0f03 	tst.w	r3, #3
 80032c2:	d070      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	f7ff ffe6 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c8:	2300      	movs	r3, #0
 80032ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	f012 0f04 	tst.w	r2, #4
 80032d4:	d012      	beq.n	80032fc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	f012 0f04 	tst.w	r2, #4
 80032dc:	d00e      	beq.n	80032fc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032de:	f06f 0204 	mvn.w	r2, #4
 80032e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e4:	2302      	movs	r3, #2
 80032e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80032f0:	d05f      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff ffce 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	2300      	movs	r3, #0
 80032fa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	f012 0f08 	tst.w	r2, #8
 8003304:	d012      	beq.n	800332c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	f012 0f08 	tst.w	r2, #8
 800330c:	d00e      	beq.n	800332c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800330e:	f06f 0208 	mvn.w	r2, #8
 8003312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003314:	2304      	movs	r3, #4
 8003316:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f013 0f03 	tst.w	r3, #3
 8003320:	d04e      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff ffb6 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	2300      	movs	r3, #0
 800332a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	f012 0f10 	tst.w	r2, #16
 8003334:	d012      	beq.n	800335c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	f012 0f10 	tst.w	r2, #16
 800333c:	d00e      	beq.n	800335c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800333e:	f06f 0210 	mvn.w	r2, #16
 8003342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003344:	2308      	movs	r3, #8
 8003346:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003350:	d03d      	beq.n	80033ce <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	4620      	mov	r0, r4
 8003354:	f7ff ff9e 	bl	8003294 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003358:	2300      	movs	r3, #0
 800335a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	f012 0f01 	tst.w	r2, #1
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	f012 0f01 	tst.w	r2, #1
 800336c:	d136      	bne.n	80033dc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003376:	d003      	beq.n	8003380 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800337e:	d134      	bne.n	80033ea <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003390:	d132      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	f012 0f20 	tst.w	r2, #32
 800339a:	d003      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	f012 0f20 	tst.w	r2, #32
 80033a2:	d130      	bne.n	8003406 <HAL_TIM_IRQHandler+0x16c>
}
 80033a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	f7ff ff74 	bl	8003292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033aa:	4620      	mov	r0, r4
 80033ac:	f7ff ff73 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
 80033b0:	e78a      	b.n	80032c8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff ff6d 	bl	8003292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff ff6c 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
 80033be:	e79b      	b.n	80032f8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff ff66 	bl	8003292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff ff65 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
 80033cc:	e7ac      	b.n	8003328 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff ff5f 	bl	8003292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	4620      	mov	r0, r4
 80033d6:	f7ff ff5e 	bl	8003296 <HAL_TIM_PWM_PulseFinishedCallback>
 80033da:	e7bd      	b.n	8003358 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033dc:	f06f 0201 	mvn.w	r2, #1
 80033e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7fd fc90 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
 80033e8:	e7c1      	b.n	800336e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 faac 	bl	800394e <HAL_TIMEx_BreakCallback>
 80033f6:	e7c3      	b.n	8003380 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80033fe:	4620      	mov	r0, r4
 8003400:	f7ff ff4a 	bl	8003298 <HAL_TIM_TriggerCallback>
 8003404:	e7c5      	b.n	8003392 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003406:	f06f 0220 	mvn.w	r2, #32
 800340a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800340c:	4620      	mov	r0, r4
 800340e:	f000 fa9d 	bl	800394c <HAL_TIMEx_CommutCallback>
}
 8003412:	e7c7      	b.n	80033a4 <HAL_TIM_IRQHandler+0x10a>

08003414 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003414:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003416:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <TIM_Base_SetConfig+0x94>)
 8003418:	4290      	cmp	r0, r2
 800341a:	d012      	beq.n	8003442 <TIM_Base_SetConfig+0x2e>
 800341c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003420:	4290      	cmp	r0, r2
 8003422:	d00e      	beq.n	8003442 <TIM_Base_SetConfig+0x2e>
 8003424:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003428:	d00b      	beq.n	8003442 <TIM_Base_SetConfig+0x2e>
 800342a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800342e:	4290      	cmp	r0, r2
 8003430:	d007      	beq.n	8003442 <TIM_Base_SetConfig+0x2e>
 8003432:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003436:	4290      	cmp	r0, r2
 8003438:	d003      	beq.n	8003442 <TIM_Base_SetConfig+0x2e>
 800343a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800343e:	4290      	cmp	r0, r2
 8003440:	d103      	bne.n	800344a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003446:	684a      	ldr	r2, [r1, #4]
 8003448:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <TIM_Base_SetConfig+0x94>)
 800344c:	4290      	cmp	r0, r2
 800344e:	d012      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 8003450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003454:	4290      	cmp	r0, r2
 8003456:	d00e      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 8003458:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800345c:	d00b      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800345e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003462:	4290      	cmp	r0, r2
 8003464:	d007      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 8003466:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800346a:	4290      	cmp	r0, r2
 800346c:	d003      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800346e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003472:	4290      	cmp	r0, r2
 8003474:	d103      	bne.n	800347e <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	68ca      	ldr	r2, [r1, #12]
 800347c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003482:	694a      	ldr	r2, [r1, #20]
 8003484:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003486:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	688b      	ldr	r3, [r1, #8]
 800348a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800348c:	680b      	ldr	r3, [r1, #0]
 800348e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <TIM_Base_SetConfig+0x94>)
 8003492:	4298      	cmp	r0, r3
 8003494:	d003      	beq.n	800349e <TIM_Base_SetConfig+0x8a>
 8003496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349a:	4298      	cmp	r0, r3
 800349c:	d101      	bne.n	80034a2 <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80034a2:	2301      	movs	r3, #1
 80034a4:	6143      	str	r3, [r0, #20]
}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00

080034ac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80034ac:	b340      	cbz	r0, 8003500 <HAL_TIM_Base_Init+0x54>
{
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80034b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80034b6:	b1f3      	cbz	r3, 80034f6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	2302      	movs	r3, #2
 80034ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034be:	4621      	mov	r1, r4
 80034c0:	f851 0b04 	ldr.w	r0, [r1], #4
 80034c4:	f7ff ffa6 	bl	8003414 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80034d2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80034d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80034da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80034ea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80034f2:	2000      	movs	r0, #0
}
 80034f4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034f6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034fa:	f7fe f820 	bl	800153e <HAL_TIM_Base_MspInit>
 80034fe:	e7db      	b.n	80034b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003500:	2001      	movs	r0, #1
}
 8003502:	4770      	bx	lr

08003504 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003504:	b340      	cbz	r0, 8003558 <HAL_TIM_PWM_Init+0x54>
{
 8003506:	b510      	push	{r4, lr}
 8003508:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800350e:	b1f3      	cbz	r3, 800354e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	2302      	movs	r3, #2
 8003512:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003516:	4621      	mov	r1, r4
 8003518:	f851 0b04 	ldr.w	r0, [r1], #4
 800351c:	f7ff ff7a 	bl	8003414 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003520:	2301      	movs	r3, #1
 8003522:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003526:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800352a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800352e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003532:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003536:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800353a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003542:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003546:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800354a:	2000      	movs	r0, #0
}
 800354c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800354e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003552:	f7ff fe9d 	bl	8003290 <HAL_TIM_PWM_MspInit>
 8003556:	e7db      	b.n	8003510 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
}
 800355a:	4770      	bx	lr

0800355c <TIM_OC2_SetConfig>:
{
 800355c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800355e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003560:	6a02      	ldr	r2, [r0, #32]
 8003562:	f022 0210 	bic.w	r2, r2, #16
 8003566:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003568:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800356a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800356c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	680d      	ldr	r5, [r1, #0]
 8003572:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003576:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800357a:	688d      	ldr	r5, [r1, #8]
 800357c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003580:	4d11      	ldr	r5, [pc, #68]	@ (80035c8 <TIM_OC2_SetConfig+0x6c>)
 8003582:	42a8      	cmp	r0, r5
 8003584:	d003      	beq.n	800358e <TIM_OC2_SetConfig+0x32>
 8003586:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800358a:	42a8      	cmp	r0, r5
 800358c:	d106      	bne.n	800359c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800358e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003592:	68cd      	ldr	r5, [r1, #12]
 8003594:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359c:	4d0a      	ldr	r5, [pc, #40]	@ (80035c8 <TIM_OC2_SetConfig+0x6c>)
 800359e:	42a8      	cmp	r0, r5
 80035a0:	d003      	beq.n	80035aa <TIM_OC2_SetConfig+0x4e>
 80035a2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80035a6:	42a8      	cmp	r0, r5
 80035a8:	d107      	bne.n	80035ba <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035aa:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035ae:	694d      	ldr	r5, [r1, #20]
 80035b0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b4:	698d      	ldr	r5, [r1, #24]
 80035b6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80035ba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80035bc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80035be:	684a      	ldr	r2, [r1, #4]
 80035c0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80035c2:	6203      	str	r3, [r0, #32]
}
 80035c4:	bc30      	pop	{r4, r5}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00

080035cc <HAL_TIM_PWM_ConfigChannel>:
{
 80035cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80035ce:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d066      	beq.n	80036a4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80035d6:	4604      	mov	r4, r0
 80035d8:	460d      	mov	r5, r1
 80035da:	2301      	movs	r3, #1
 80035dc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80035e0:	2a0c      	cmp	r2, #12
 80035e2:	d85a      	bhi.n	800369a <HAL_TIM_PWM_ConfigChannel+0xce>
 80035e4:	e8df f002 	tbb	[pc, r2]
 80035e8:	59595907 	.word	0x59595907
 80035ec:	5959591b 	.word	0x5959591b
 80035f0:	59595930 	.word	0x59595930
 80035f4:	44          	.byte	0x44
 80035f5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f6:	6800      	ldr	r0, [r0, #0]
 80035f8:	f7ff fd48 	bl	800308c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6993      	ldr	r3, [r2, #24]
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	6993      	ldr	r3, [r2, #24]
 800360a:	f023 0304 	bic.w	r3, r3, #4
 800360e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	6993      	ldr	r3, [r2, #24]
 8003614:	6929      	ldr	r1, [r5, #16]
 8003616:	430b      	orrs	r3, r1
 8003618:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2000      	movs	r0, #0
      break;
 800361c:	e03e      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361e:	6800      	ldr	r0, [r0, #0]
 8003620:	f7ff ff9c 	bl	800355c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003624:	6822      	ldr	r2, [r4, #0]
 8003626:	6993      	ldr	r3, [r2, #24]
 8003628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800362c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6993      	ldr	r3, [r2, #24]
 8003632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003636:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6993      	ldr	r3, [r2, #24]
 800363c:	6929      	ldr	r1, [r5, #16]
 800363e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003642:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2000      	movs	r0, #0
      break;
 8003646:	e029      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003648:	6800      	ldr	r0, [r0, #0]
 800364a:	f7ff fd57 	bl	80030fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800364e:	6822      	ldr	r2, [r4, #0]
 8003650:	69d3      	ldr	r3, [r2, #28]
 8003652:	f043 0308 	orr.w	r3, r3, #8
 8003656:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	69d3      	ldr	r3, [r2, #28]
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	69d3      	ldr	r3, [r2, #28]
 8003666:	6929      	ldr	r1, [r5, #16]
 8003668:	430b      	orrs	r3, r1
 800366a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2000      	movs	r0, #0
      break;
 800366e:	e015      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003670:	6800      	ldr	r0, [r0, #0]
 8003672:	f7ff fd7b 	bl	800316c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003676:	6822      	ldr	r2, [r4, #0]
 8003678:	69d3      	ldr	r3, [r2, #28]
 800367a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800367e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003680:	6822      	ldr	r2, [r4, #0]
 8003682:	69d3      	ldr	r3, [r2, #28]
 8003684:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003688:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	69d3      	ldr	r3, [r2, #28]
 800368e:	6929      	ldr	r1, [r5, #16]
 8003690:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003694:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2000      	movs	r0, #0
      break;
 8003698:	e000      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800369a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800369c:	2300      	movs	r3, #0
 800369e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80036a4:	2002      	movs	r0, #2
 80036a6:	e7fc      	b.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080036a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036aa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ac:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80036b4:	430a      	orrs	r2, r1
 80036b6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ba:	6082      	str	r2, [r0, #8]
}
 80036bc:	bc10      	pop	{r4}
 80036be:	4770      	bx	lr

080036c0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80036c0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d078      	beq.n	80037ba <HAL_TIM_ConfigClockSource+0xfa>
{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80036cc:	2301      	movs	r3, #1
 80036ce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80036d8:	6802      	ldr	r2, [r0, #0]
 80036da:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80036e4:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80036e6:	680b      	ldr	r3, [r1, #0]
 80036e8:	2b60      	cmp	r3, #96	@ 0x60
 80036ea:	d04c      	beq.n	8003786 <HAL_TIM_ConfigClockSource+0xc6>
 80036ec:	d829      	bhi.n	8003742 <HAL_TIM_ConfigClockSource+0x82>
 80036ee:	2b40      	cmp	r3, #64	@ 0x40
 80036f0:	d054      	beq.n	800379c <HAL_TIM_ConfigClockSource+0xdc>
 80036f2:	d90c      	bls.n	800370e <HAL_TIM_ConfigClockSource+0x4e>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d122      	bne.n	800373e <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f8:	68ca      	ldr	r2, [r1, #12]
 80036fa:	6849      	ldr	r1, [r1, #4]
 80036fc:	6800      	ldr	r0, [r0, #0]
 80036fe:	f7ff fd5d 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003702:	2150      	movs	r1, #80	@ 0x50
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	f7ff fd7e 	bl	8003206 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2000      	movs	r0, #0
      break;
 800370c:	e005      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800370e:	2b20      	cmp	r3, #32
 8003710:	d00d      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x6e>
 8003712:	d909      	bls.n	8003728 <HAL_TIM_ConfigClockSource+0x68>
 8003714:	2b30      	cmp	r3, #48	@ 0x30
 8003716:	d00a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8003718:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800371a:	2301      	movs	r3, #1
 800371c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003720:	2300      	movs	r3, #0
 8003722:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003726:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003728:	b10b      	cbz	r3, 800372e <HAL_TIM_ConfigClockSource+0x6e>
 800372a:	2b10      	cmp	r3, #16
 800372c:	d105      	bne.n	800373a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800372e:	4619      	mov	r1, r3
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	f7ff fd68 	bl	8003206 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2000      	movs	r0, #0
      break;
 8003738:	e7ef      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800373a:	2001      	movs	r0, #1
 800373c:	e7ed      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
 800373e:	2001      	movs	r0, #1
 8003740:	e7eb      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003746:	d034      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0xf2>
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374c:	d10c      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800374e:	68cb      	ldr	r3, [r1, #12]
 8003750:	684a      	ldr	r2, [r1, #4]
 8003752:	6889      	ldr	r1, [r1, #8]
 8003754:	6800      	ldr	r0, [r0, #0]
 8003756:	f7ff ffa7 	bl	80036a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	6893      	ldr	r3, [r2, #8]
 800375e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003762:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2000      	movs	r0, #0
      break;
 8003766:	e7d8      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003768:	2b70      	cmp	r3, #112	@ 0x70
 800376a:	d124      	bne.n	80037b6 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	68cb      	ldr	r3, [r1, #12]
 800376e:	684a      	ldr	r2, [r1, #4]
 8003770:	6889      	ldr	r1, [r1, #8]
 8003772:	6800      	ldr	r0, [r0, #0]
 8003774:	f7ff ff98 	bl	80036a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003778:	6822      	ldr	r2, [r4, #0]
 800377a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003780:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2000      	movs	r0, #0
      break;
 8003784:	e7c9      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003786:	68ca      	ldr	r2, [r1, #12]
 8003788:	6849      	ldr	r1, [r1, #4]
 800378a:	6800      	ldr	r0, [r0, #0]
 800378c:	f7ff fd28 	bl	80031e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003790:	2160      	movs	r1, #96	@ 0x60
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	f7ff fd37 	bl	8003206 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2000      	movs	r0, #0
      break;
 800379a:	e7be      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379c:	68ca      	ldr	r2, [r1, #12]
 800379e:	6849      	ldr	r1, [r1, #4]
 80037a0:	6800      	ldr	r0, [r0, #0]
 80037a2:	f7ff fd0b 	bl	80031bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a6:	2140      	movs	r1, #64	@ 0x40
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f7ff fd2c 	bl	8003206 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2000      	movs	r0, #0
      break;
 80037b0:	e7b3      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80037b2:	2000      	movs	r0, #0
 80037b4:	e7b1      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
 80037b8:	e7af      	b.n	800371a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80037ba:	2002      	movs	r0, #2
}
 80037bc:	4770      	bx	lr

080037be <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037be:	f001 011f 	and.w	r1, r1, #31
 80037c2:	f04f 0c01 	mov.w	ip, #1
 80037c6:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ca:	6a03      	ldr	r3, [r0, #32]
 80037cc:	ea23 030c 	bic.w	r3, r3, ip
 80037d0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037d2:	6a03      	ldr	r3, [r0, #32]
 80037d4:	408a      	lsls	r2, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	6203      	str	r3, [r0, #32]
}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_Start>:
{
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e0:	4608      	mov	r0, r1
 80037e2:	2900      	cmp	r1, #0
 80037e4:	d13a      	bne.n	800385c <HAL_TIM_PWM_Start+0x80>
 80037e6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	bf18      	it	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d166      	bne.n	80038c4 <HAL_TIM_PWM_Start+0xe8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d149      	bne.n	800388e <HAL_TIM_PWM_Start+0xb2>
 80037fa:	2302      	movs	r3, #2
 80037fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003800:	2201      	movs	r2, #1
 8003802:	4601      	mov	r1, r0
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f7ff ffda 	bl	80037be <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	4a2f      	ldr	r2, [pc, #188]	@ (80038cc <HAL_TIM_PWM_Start+0xf0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <HAL_TIM_PWM_Start+0x3e>
 8003812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003816:	4293      	cmp	r3, r2
 8003818:	d103      	bne.n	8003822 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 800381a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800381c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_TIM_PWM_Start+0xf0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d041      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
 800382a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382e:	4293      	cmp	r3, r2
 8003830:	d03d      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d03a      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
 8003838:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 800383c:	4293      	cmp	r3, r2
 800383e:	d036      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
 8003840:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003844:	4293      	cmp	r3, r2
 8003846:	d032      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
 8003848:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800384c:	4293      	cmp	r3, r2
 800384e:	d02e      	beq.n	80038ae <HAL_TIM_PWM_Start+0xd2>
    __HAL_TIM_ENABLE(htim);
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003858:	2000      	movs	r0, #0
 800385a:	e032      	b.n	80038c2 <HAL_TIM_PWM_Start+0xe6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385c:	2904      	cmp	r1, #4
 800385e:	d008      	beq.n	8003872 <HAL_TIM_PWM_Start+0x96>
 8003860:	2908      	cmp	r1, #8
 8003862:	d00d      	beq.n	8003880 <HAL_TIM_PWM_Start+0xa4>
 8003864:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	bf18      	it	ne
 800386e:	2301      	movne	r3, #1
 8003870:	e7bf      	b.n	80037f2 <HAL_TIM_PWM_Start+0x16>
 8003872:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	bf18      	it	ne
 800387c:	2301      	movne	r3, #1
 800387e:	e7b8      	b.n	80037f2 <HAL_TIM_PWM_Start+0x16>
 8003880:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	bf18      	it	ne
 800388a:	2301      	movne	r3, #1
 800388c:	e7b1      	b.n	80037f2 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800388e:	2804      	cmp	r0, #4
 8003890:	d005      	beq.n	800389e <HAL_TIM_PWM_Start+0xc2>
 8003892:	2808      	cmp	r0, #8
 8003894:	d007      	beq.n	80038a6 <HAL_TIM_PWM_Start+0xca>
 8003896:	2302      	movs	r3, #2
 8003898:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800389c:	e7b0      	b.n	8003800 <HAL_TIM_PWM_Start+0x24>
 800389e:	2302      	movs	r3, #2
 80038a0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038a4:	e7ac      	b.n	8003800 <HAL_TIM_PWM_Start+0x24>
 80038a6:	2302      	movs	r3, #2
 80038a8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80038ac:	e7a8      	b.n	8003800 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b4:	2a06      	cmp	r2, #6
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_PWM_Start+0xec>
      __HAL_TIM_ENABLE(htim);
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
 80038c6:	e7fc      	b.n	80038c2 <HAL_TIM_PWM_Start+0xe6>
  return HAL_OK;
 80038c8:	2000      	movs	r0, #0
 80038ca:	e7fa      	b.n	80038c2 <HAL_TIM_PWM_Start+0xe6>
 80038cc:	40012c00 	.word	0x40012c00

080038d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80038d4:	2a01      	cmp	r2, #1
 80038d6:	d034      	beq.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0x72>
{
 80038d8:	b410      	push	{r4}
 80038da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80038dc:	2201      	movs	r2, #1
 80038de:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e2:	2202      	movs	r2, #2
 80038e4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e8:	6802      	ldr	r2, [r0, #0]
 80038ea:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ee:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f2:	6808      	ldr	r0, [r1, #0]
 80038f4:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f8:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4812      	ldr	r0, [pc, #72]	@ (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80038fe:	4282      	cmp	r2, r0
 8003900:	d012      	beq.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003902:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8003906:	4282      	cmp	r2, r0
 8003908:	d00e      	beq.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 800390a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800390e:	d00b      	beq.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003910:	f5a0 3098 	sub.w	r0, r0, #77824	@ 0x13000
 8003914:	4282      	cmp	r2, r0
 8003916:	d007      	beq.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003918:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800391c:	4282      	cmp	r2, r0
 800391e:	d003      	beq.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8003920:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003924:	4282      	cmp	r2, r0
 8003926:	d104      	bne.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003928:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392c:	6849      	ldr	r1, [r1, #4]
 800392e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003930:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003938:	2000      	movs	r0, #0
 800393a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800393e:	bc10      	pop	{r4}
 8003940:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003942:	2002      	movs	r0, #2
}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00

0800394c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800394c:	4770      	bx	lr

0800394e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800394e:	4770      	bx	lr

08003950 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003950:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003954:	b993      	cbnz	r3, 800397c <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003956:	f3ef 8310 	mrs	r3, PRIMASK
 800395a:	b993      	cbnz	r3, 8003982 <osKernelInitialize+0x32>
 800395c:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <osKernelInitialize+0x40>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	2802      	cmp	r0, #2
 8003962:	d004      	beq.n	800396e <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003964:	b980      	cbnz	r0, 8003988 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <osKernelInitialize+0x40>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800396c:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800396e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f6      	beq.n	8003964 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8003976:	f06f 0005 	mvn.w	r0, #5
 800397a:	4770      	bx	lr
 800397c:	f06f 0005 	mvn.w	r0, #5
 8003980:	4770      	bx	lr
 8003982:	f06f 0005 	mvn.w	r0, #5
 8003986:	4770      	bx	lr
    } else {
      stat = osError;
 8003988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200008ec 	.word	0x200008ec

08003994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003994:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003996:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800399a:	b9b3      	cbnz	r3, 80039ca <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399c:	f3ef 8310 	mrs	r3, PRIMASK
 80039a0:	b9b3      	cbnz	r3, 80039d0 <osKernelStart+0x3c>
 80039a2:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <osKernelStart+0x48>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d008      	beq.n	80039bc <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d113      	bne.n	80039d6 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <osKernelStart+0x48>)
 80039b0:	2202      	movs	r2, #2
 80039b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80039b4:	f000 fe70 	bl	8004698 <vTaskStartScheduler>
      stat = osOK;
 80039b8:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80039ba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039bc:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d0f2      	beq.n	80039aa <osKernelStart+0x16>
    stat = osErrorISR;
 80039c4:	f06f 0005 	mvn.w	r0, #5
 80039c8:	e7f7      	b.n	80039ba <osKernelStart+0x26>
 80039ca:	f06f 0005 	mvn.w	r0, #5
 80039ce:	e7f4      	b.n	80039ba <osKernelStart+0x26>
 80039d0:	f06f 0005 	mvn.w	r0, #5
 80039d4:	e7f1      	b.n	80039ba <osKernelStart+0x26>
      stat = osError;
 80039d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return (stat);
 80039da:	e7ee      	b.n	80039ba <osKernelStart+0x26>
 80039dc:	200008ec 	.word	0x200008ec

080039e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039e4:	2400      	movs	r4, #0
 80039e6:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80039ec:	2c00      	cmp	r4, #0
 80039ee:	d143      	bne.n	8003a78 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f0:	f3ef 8310 	mrs	r3, PRIMASK
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13f      	bne.n	8003a78 <osThreadNew+0x98>
 80039f8:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <osThreadNew+0xe8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d016      	beq.n	8003a2e <osThreadNew+0x4e>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d039      	beq.n	8003a78 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8003a04:	2300      	movs	r3, #0
 8003a06:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8003a0a:	b362      	cbz	r2, 8003a66 <osThreadNew+0x86>
      if (attr->name != NULL) {
 8003a0c:	6815      	ldr	r5, [r2, #0]
 8003a0e:	b195      	cbz	r5, 8003a36 <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003a10:	6993      	ldr	r3, [r2, #24]
 8003a12:	b903      	cbnz	r3, 8003a16 <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8003a14:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a16:	1e5c      	subs	r4, r3, #1
 8003a18:	2c37      	cmp	r4, #55	@ 0x37
 8003a1a:	d851      	bhi.n	8003ac0 <osThreadNew+0xe0>
 8003a1c:	6854      	ldr	r4, [r2, #4]
 8003a1e:	f014 0f01 	tst.w	r4, #1
 8003a22:	d14f      	bne.n	8003ac4 <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003a24:	6956      	ldr	r6, [r2, #20]
 8003a26:	b14e      	cbz	r6, 8003a3c <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a28:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8003a2c:	e008      	b.n	8003a40 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a2e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8003a32:	bb0b      	cbnz	r3, 8003a78 <osThreadNew+0x98>
 8003a34:	e7e4      	b.n	8003a00 <osThreadNew+0x20>
    name  = &empty;
 8003a36:	f10d 0517 	add.w	r5, sp, #23
 8003a3a:	e7e9      	b.n	8003a10 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 8003a3c:	f04f 0c80 	mov.w	ip, #128	@ 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a40:	6894      	ldr	r4, [r2, #8]
 8003a42:	b12c      	cbz	r4, 8003a50 <osThreadNew+0x70>
 8003a44:	68d7      	ldr	r7, [r2, #12]
 8003a46:	2f6b      	cmp	r7, #107	@ 0x6b
 8003a48:	d902      	bls.n	8003a50 <osThreadNew+0x70>
 8003a4a:	6917      	ldr	r7, [r2, #16]
 8003a4c:	b107      	cbz	r7, 8003a50 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a4e:	b9b6      	cbnz	r6, 8003a7e <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a50:	b114      	cbz	r4, 8003a58 <osThreadNew+0x78>
    mem   = -1;
 8003a52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a56:	e00c      	b.n	8003a72 <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a58:	68d4      	ldr	r4, [r2, #12]
 8003a5a:	b994      	cbnz	r4, 8003a82 <osThreadNew+0xa2>
 8003a5c:	6914      	ldr	r4, [r2, #16]
 8003a5e:	b19c      	cbz	r4, 8003a88 <osThreadNew+0xa8>
    mem   = -1;
 8003a60:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a64:	e005      	b.n	8003a72 <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8003a66:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8003a68:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8003a6a:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    name  = &empty;
 8003a6e:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8003a72:	2c01      	cmp	r4, #1
 8003a74:	d00a      	beq.n	8003a8c <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8003a76:	b1ac      	cbz	r4, 8003aa4 <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a78:	9804      	ldr	r0, [sp, #16]
}
 8003a7a:	b007      	add	sp, #28
 8003a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8003a7e:	2401      	movs	r4, #1
 8003a80:	e7f7      	b.n	8003a72 <osThreadNew+0x92>
    mem   = -1;
 8003a82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a86:	e7f4      	b.n	8003a72 <osThreadNew+0x92>
          mem = 0;
 8003a88:	2400      	movs	r4, #0
 8003a8a:	e7f2      	b.n	8003a72 <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a8c:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a8e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a90:	9202      	str	r2, [sp, #8]
 8003a92:	9401      	str	r4, [sp, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	4662      	mov	r2, ip
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	f000 fd90 	bl	80045c0 <xTaskCreateStatic>
 8003aa0:	9004      	str	r0, [sp, #16]
 8003aa2:	e7e9      	b.n	8003a78 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aa4:	aa04      	add	r2, sp, #16
 8003aa6:	9201      	str	r2, [sp, #4]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	fa1f f28c 	uxth.w	r2, ip
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	f000 fdbf 	bl	8004634 <xTaskCreate>
 8003ab6:	2801      	cmp	r0, #1
 8003ab8:	d0de      	beq.n	8003a78 <osThreadNew+0x98>
          hTask = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	9304      	str	r3, [sp, #16]
 8003abe:	e7db      	b.n	8003a78 <osThreadNew+0x98>
        return (NULL);
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	e7da      	b.n	8003a7a <osThreadNew+0x9a>
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	e7d8      	b.n	8003a7a <osThreadNew+0x9a>
 8003ac8:	200008ec 	.word	0x200008ec

08003acc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003acc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ace:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ad2:	b9a3      	cbnz	r3, 8003afe <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad8:	b9a3      	cbnz	r3, 8003b04 <osDelay+0x38>
 8003ada:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <osDelay+0x40>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d002      	beq.n	8003ae8 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003ae2:	b940      	cbnz	r0, 8003af6 <osDelay+0x2a>
    stat = osOK;
 8003ae4:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003ae6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ae8:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f8      	beq.n	8003ae2 <osDelay+0x16>
    stat = osErrorISR;
 8003af0:	f06f 0005 	mvn.w	r0, #5
 8003af4:	e7f7      	b.n	8003ae6 <osDelay+0x1a>
      vTaskDelay(ticks);
 8003af6:	f000 ff31 	bl	800495c <vTaskDelay>
    stat = osOK;
 8003afa:	2000      	movs	r0, #0
 8003afc:	e7f3      	b.n	8003ae6 <osDelay+0x1a>
    stat = osErrorISR;
 8003afe:	f06f 0005 	mvn.w	r0, #5
 8003b02:	e7f0      	b.n	8003ae6 <osDelay+0x1a>
 8003b04:	f06f 0005 	mvn.w	r0, #5
 8003b08:	e7ed      	b.n	8003ae6 <osDelay+0x1a>
 8003b0a:	bf00      	nop
 8003b0c:	200008ec 	.word	0x200008ec

08003b10 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <vApplicationGetIdleTaskMemory+0x10>)
 8003b12:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b14:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <vApplicationGetIdleTaskMemory+0x14>)
 8003b16:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b18:	2380      	movs	r3, #128	@ 0x80
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000880 	.word	0x20000880
 8003b24:	20000680 	.word	0x20000680

08003b28 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <vApplicationGetTimerTaskMemory+0x10>)
 8003b2a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <vApplicationGetTimerTaskMemory+0x14>)
 8003b2e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]
}
 8003b36:	4770      	bx	lr
 8003b38:	20000614 	.word	0x20000614
 8003b3c:	20000214 	.word	0x20000214

08003b40 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b40:	f100 0308 	add.w	r3, r0, #8
 8003b44:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b4a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b54:	4770      	bx	lr

08003b56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b5a:	4770      	bx	lr

08003b5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b5c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b5e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b64:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b66:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003b6a:	6803      	ldr	r3, [r0, #0]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	6003      	str	r3, [r0, #0]
}
 8003b70:	4770      	bx	lr

08003b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b72:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b74:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b76:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8003b7a:	d011      	beq.n	8003ba0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7c:	f100 0308 	add.w	r3, r0, #8
 8003b80:	461c      	mov	r4, r3
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	42aa      	cmp	r2, r5
 8003b88:	d9fa      	bls.n	8003b80 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b8e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b90:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b92:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003b96:	6803      	ldr	r3, [r0, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	6003      	str	r3, [r0, #0]
}
 8003b9c:	bc30      	pop	{r4, r5}
 8003b9e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ba0:	6904      	ldr	r4, [r0, #16]
 8003ba2:	e7f2      	b.n	8003b8a <vListInsert+0x18>

08003ba4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ba4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ba6:	6841      	ldr	r1, [r0, #4]
 8003ba8:	6882      	ldr	r2, [r0, #8]
 8003baa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bac:	6841      	ldr	r1, [r0, #4]
 8003bae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4282      	cmp	r2, r0
 8003bb4:	d006      	beq.n	8003bc4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bc0:	6818      	ldr	r0, [r3, #0]
}
 8003bc2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bc4:	6882      	ldr	r2, [r0, #8]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	e7f5      	b.n	8003bb6 <uxListRemove+0x12>

08003bca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bce:	f001 fac9 	bl	8005164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003bd2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003bd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d004      	beq.n	8003be4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8003bda:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8003bdc:	f001 fae4 	bl	80051a8 <vPortExitCritical>

	return xReturn;
}
 8003be0:	4620      	mov	r0, r4
 8003be2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8003be4:	2401      	movs	r4, #1
 8003be6:	e7f9      	b.n	8003bdc <prvIsQueueFull+0x12>

08003be8 <prvIsQueueEmpty>:
{
 8003be8:	b510      	push	{r4, lr}
 8003bea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003bec:	f001 faba 	bl	8005164 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003bf0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003bf2:	b923      	cbnz	r3, 8003bfe <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8003bf4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003bf6:	f001 fad7 	bl	80051a8 <vPortExitCritical>
}
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8003bfe:	2400      	movs	r4, #0
 8003c00:	e7f9      	b.n	8003bf6 <prvIsQueueEmpty+0xe>

08003c02 <prvCopyDataToQueue>:
{
 8003c02:	b570      	push	{r4, r5, r6, lr}
 8003c04:	4604      	mov	r4, r0
 8003c06:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c08:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c0a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003c0c:	b95a      	cbnz	r2, 8003c26 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c0e:	6803      	ldr	r3, [r0, #0]
 8003c10:	b11b      	cbz	r3, 8003c1a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003c12:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c14:	3601      	adds	r6, #1
 8003c16:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c1a:	6840      	ldr	r0, [r0, #4]
 8003c1c:	f000 ffee 	bl	8004bfc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	e7f6      	b.n	8003c14 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003c26:	b96d      	cbnz	r5, 8003c44 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c28:	6880      	ldr	r0, [r0, #8]
 8003c2a:	f001 fcf7 	bl	800561c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c2e:	68a3      	ldr	r3, [r4, #8]
 8003c30:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c32:	4413      	add	r3, r2
 8003c34:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c36:	6862      	ldr	r2, [r4, #4]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d319      	bcc.n	8003c70 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003c40:	4628      	mov	r0, r5
 8003c42:	e7e7      	b.n	8003c14 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	68c0      	ldr	r0, [r0, #12]
 8003c46:	f001 fce9 	bl	800561c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003c4e:	4251      	negs	r1, r2
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c54:	6822      	ldr	r2, [r4, #0]
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d202      	bcs.n	8003c60 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	440b      	add	r3, r1
 8003c5e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003c60:	2d02      	cmp	r5, #2
 8003c62:	d001      	beq.n	8003c68 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003c64:	2000      	movs	r0, #0
 8003c66:	e7d5      	b.n	8003c14 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c68:	b126      	cbz	r6, 8003c74 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003c6a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e7d1      	b.n	8003c14 <prvCopyDataToQueue+0x12>
 8003c70:	4628      	mov	r0, r5
 8003c72:	e7cf      	b.n	8003c14 <prvCopyDataToQueue+0x12>
 8003c74:	2000      	movs	r0, #0
 8003c76:	e7cd      	b.n	8003c14 <prvCopyDataToQueue+0x12>

08003c78 <prvCopyDataFromQueue>:
{
 8003c78:	b508      	push	{r3, lr}
 8003c7a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c7c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003c7e:	b162      	cbz	r2, 8003c9a <prvCopyDataFromQueue+0x22>
 8003c80:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c82:	68d9      	ldr	r1, [r3, #12]
 8003c84:	4411      	add	r1, r2
 8003c86:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c88:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8003c8c:	4561      	cmp	r1, ip
 8003c8e:	d301      	bcc.n	8003c94 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c94:	68d9      	ldr	r1, [r3, #12]
 8003c96:	f001 fcc1 	bl	800561c <memcpy>
}
 8003c9a:	bd08      	pop	{r3, pc}

08003c9c <prvUnlockQueue>:
{
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003ca0:	f001 fa60 	bl	8005164 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003ca4:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8003ca8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003caa:	e001      	b.n	8003cb0 <prvUnlockQueue+0x14>
			--cTxLock;
 8003cac:	3c01      	subs	r4, #1
 8003cae:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cb0:	2c00      	cmp	r4, #0
 8003cb2:	dd0a      	ble.n	8003cca <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003cb6:	b143      	cbz	r3, 8003cca <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8003cbc:	f000 fef4 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0f3      	beq.n	8003cac <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8003cc4:	f000 ff84 	bl	8004bd0 <vTaskMissedYield>
 8003cc8:	e7f0      	b.n	8003cac <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8003cca:	23ff      	movs	r3, #255	@ 0xff
 8003ccc:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8003cd0:	f001 fa6a 	bl	80051a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003cd4:	f001 fa46 	bl	8005164 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003cd8:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8003cdc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cde:	e001      	b.n	8003ce4 <prvUnlockQueue+0x48>
				--cRxLock;
 8003ce0:	3c01      	subs	r4, #1
 8003ce2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	dd0a      	ble.n	8003cfe <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce8:	692b      	ldr	r3, [r5, #16]
 8003cea:	b143      	cbz	r3, 8003cfe <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cec:	f105 0010 	add.w	r0, r5, #16
 8003cf0:	f000 feda 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d0f3      	beq.n	8003ce0 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8003cf8:	f000 ff6a 	bl	8004bd0 <vTaskMissedYield>
 8003cfc:	e7f0      	b.n	8003ce0 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8003cfe:	23ff      	movs	r3, #255	@ 0xff
 8003d00:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8003d04:	f001 fa50 	bl	80051a8 <vPortExitCritical>
}
 8003d08:	bd38      	pop	{r3, r4, r5, pc}

08003d0a <xQueueGenericReset>:
{
 8003d0a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003d0c:	b1e0      	cbz	r0, 8003d48 <xQueueGenericReset+0x3e>
 8003d0e:	460d      	mov	r5, r1
 8003d10:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003d12:	f001 fa27 	bl	8005164 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003d1a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003d1c:	fb01 3002 	mla	r0, r1, r2, r3
 8003d20:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d22:	2000      	movs	r0, #0
 8003d24:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d26:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	fb02 3301 	mla	r3, r2, r1, r3
 8003d2e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d30:	23ff      	movs	r3, #255	@ 0xff
 8003d32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8003d3a:	b9fd      	cbnz	r5, 8003d7c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	b963      	cbnz	r3, 8003d5a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003d40:	f001 fa32 	bl	80051a8 <vPortExitCritical>
}
 8003d44:	2001      	movs	r0, #1
 8003d46:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003d58:	e7fe      	b.n	8003d58 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5a:	f104 0010 	add.w	r0, r4, #16
 8003d5e:	f000 fea3 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d0ec      	beq.n	8003d40 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003d66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	e7e1      	b.n	8003d40 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d7c:	f104 0010 	add.w	r0, r4, #16
 8003d80:	f7ff fede 	bl	8003b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d84:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003d88:	f7ff feda 	bl	8003b40 <vListInitialise>
 8003d8c:	e7d8      	b.n	8003d40 <xQueueGenericReset+0x36>

08003d8e <prvInitialiseNewQueue>:
{
 8003d8e:	b538      	push	{r3, r4, r5, lr}
 8003d90:	461d      	mov	r5, r3
 8003d92:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d94:	460b      	mov	r3, r1
 8003d96:	b949      	cbnz	r1, 8003dac <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d98:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003d9a:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d9c:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4620      	mov	r0, r4
 8003da2:	f7ff ffb2 	bl	8003d0a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003da6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dac:	6022      	str	r2, [r4, #0]
 8003dae:	e7f4      	b.n	8003d9a <prvInitialiseNewQueue+0xc>

08003db0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003db0:	b940      	cbnz	r0, 8003dc4 <xQueueGenericCreateStatic+0x14>
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueGenericCreateStatic+0x12>
	{
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	461c      	mov	r4, r3
 8003dca:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8003dcc:	b153      	cbz	r3, 8003de4 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dce:	b192      	cbz	r2, 8003df6 <xQueueGenericCreateStatic+0x46>
 8003dd0:	b989      	cbnz	r1, 8003df6 <xQueueGenericCreateStatic+0x46>
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	e7fe      	b.n	8003de2 <xQueueGenericCreateStatic+0x32>
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003df4:	e7fe      	b.n	8003df4 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003df6:	b16a      	cbz	r2, 8003e14 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003df8:	2350      	movs	r3, #80	@ 0x50
 8003dfa:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dfc:	9b03      	ldr	r3, [sp, #12]
 8003dfe:	2b50      	cmp	r3, #80	@ 0x50
 8003e00:	d013      	beq.n	8003e2a <xQueueGenericCreateStatic+0x7a>
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	e7fe      	b.n	8003e12 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d0ef      	beq.n	8003df8 <xQueueGenericCreateStatic+0x48>
 8003e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	e7fe      	b.n	8003e28 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e30:	9400      	str	r4, [sp, #0]
 8003e32:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003e36:	4660      	mov	r0, ip
 8003e38:	f7ff ffa9 	bl	8003d8e <prvInitialiseNewQueue>
	}
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	b004      	add	sp, #16
 8003e40:	bd10      	pop	{r4, pc}

08003e42 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e42:	b940      	cbnz	r0, 8003e56 <xQueueGenericCreate+0x14>
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	e7fe      	b.n	8003e54 <xQueueGenericCreate+0x12>
	{
 8003e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e60:	b1a1      	cbz	r1, 8003e8c <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e62:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e66:	3050      	adds	r0, #80	@ 0x50
 8003e68:	f001 faf8 	bl	800545c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003e6c:	4606      	mov	r6, r0
 8003e6e:	b150      	cbz	r0, 8003e86 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e76:	9000      	str	r0, [sp, #0]
 8003e78:	462b      	mov	r3, r5
 8003e7a:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4638      	mov	r0, r7
 8003e82:	f7ff ff84 	bl	8003d8e <prvInitialiseNewQueue>
	}
 8003e86:	4630      	mov	r0, r6
 8003e88:	b003      	add	sp, #12
 8003e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	e7ea      	b.n	8003e66 <xQueueGenericCreate+0x24>

08003e90 <xQueueGenericSend>:
{
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b085      	sub	sp, #20
 8003e94:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8003e96:	b188      	cbz	r0, 8003ebc <xQueueGenericSend+0x2c>
 8003e98:	460f      	mov	r7, r1
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e9e:	b1b1      	cbz	r1, 8003ece <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ea0:	2d02      	cmp	r5, #2
 8003ea2:	d120      	bne.n	8003ee6 <xQueueGenericSend+0x56>
 8003ea4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d01d      	beq.n	8003ee6 <xQueueGenericSend+0x56>
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	e7fe      	b.n	8003eba <xQueueGenericSend+0x2a>
 8003ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ece:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0e5      	beq.n	8003ea0 <xQueueGenericSend+0x10>
 8003ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	e7fe      	b.n	8003ee4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ee6:	f000 fe79 	bl	8004bdc <xTaskGetSchedulerState>
 8003eea:	4606      	mov	r6, r0
 8003eec:	b958      	cbnz	r0, 8003f06 <xQueueGenericSend+0x76>
 8003eee:	9b01      	ldr	r3, [sp, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d048      	beq.n	8003f86 <xQueueGenericSend+0xf6>
 8003ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericSend+0x74>
 8003f06:	2600      	movs	r6, #0
 8003f08:	e03d      	b.n	8003f86 <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f0a:	462a      	mov	r2, r5
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff fe77 	bl	8003c02 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f16:	b97b      	cbnz	r3, 8003f38 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8003f18:	b148      	cbz	r0, 8003f2e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003f2e:	f001 f93b 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 8003f32:	2001      	movs	r0, #1
}
 8003f34:	b005      	add	sp, #20
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003f3c:	f000 fdb4 	bl	8004aa8 <xTaskRemoveFromEventList>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d0f4      	beq.n	8003f2e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8003f44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	e7e9      	b.n	8003f2e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8003f5a:	f001 f925 	bl	80051a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e7e8      	b.n	8003f34 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f62:	a802      	add	r0, sp, #8
 8003f64:	f000 fde6 	bl	8004b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f68:	2601      	movs	r6, #1
 8003f6a:	e019      	b.n	8003fa0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003f72:	e021      	b.n	8003fb8 <xQueueGenericSend+0x128>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003f7a:	e023      	b.n	8003fc4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff fe8d 	bl	8003c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f82:	f000 fc6f 	bl	8004864 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8003f86:	f001 f8ed 	bl	8005164 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f8a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f8c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3bb      	bcc.n	8003f0a <xQueueGenericSend+0x7a>
 8003f92:	2d02      	cmp	r5, #2
 8003f94:	d0b9      	beq.n	8003f0a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f96:	9b01      	ldr	r3, [sp, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0de      	beq.n	8003f5a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	d0e0      	beq.n	8003f62 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8003fa0:	f001 f902 	bl	80051a8 <vPortExitCritical>
		vTaskSuspendAll();
 8003fa4:	f000 fbc4 	bl	8004730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fa8:	f001 f8dc 	bl	8005164 <vPortEnterCritical>
 8003fac:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8003fb0:	b252      	sxtb	r2, r2
 8003fb2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003fb6:	d0d9      	beq.n	8003f6c <xQueueGenericSend+0xdc>
 8003fb8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8003fbc:	b252      	sxtb	r2, r2
 8003fbe:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8003fc2:	d0d7      	beq.n	8003f74 <xQueueGenericSend+0xe4>
 8003fc4:	f001 f8f0 	bl	80051a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fc8:	a901      	add	r1, sp, #4
 8003fca:	a802      	add	r0, sp, #8
 8003fcc:	f000 fdbe 	bl	8004b4c <xTaskCheckForTimeOut>
 8003fd0:	b9d8      	cbnz	r0, 800400a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff fdf9 	bl	8003bca <prvIsQueueFull>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d0cf      	beq.n	8003f7c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fdc:	9901      	ldr	r1, [sp, #4]
 8003fde:	f104 0010 	add.w	r0, r4, #16
 8003fe2:	f000 fd2d 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7ff fe58 	bl	8003c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fec:	f000 fc3a 	bl	8004864 <xTaskResumeAll>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d1c8      	bne.n	8003f86 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8003ff4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ffc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	e7bd      	b.n	8003f86 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800400a:	4620      	mov	r0, r4
 800400c:	f7ff fe46 	bl	8003c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004010:	f000 fc28 	bl	8004864 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004014:	2000      	movs	r0, #0
 8004016:	e78d      	b.n	8003f34 <xQueueGenericSend+0xa4>

08004018 <xQueueGenericSendFromISR>:
{
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800401c:	b190      	cbz	r0, 8004044 <xQueueGenericSendFromISR+0x2c>
 800401e:	460f      	mov	r7, r1
 8004020:	4616      	mov	r6, r2
 8004022:	461c      	mov	r4, r3
 8004024:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004026:	b1b1      	cbz	r1, 8004056 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004028:	2c02      	cmp	r4, #2
 800402a:	d120      	bne.n	800406e <xQueueGenericSendFromISR+0x56>
 800402c:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800402e:	2b01      	cmp	r3, #1
 8004030:	d01d      	beq.n	800406e <xQueueGenericSendFromISR+0x56>
 8004032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	e7fe      	b.n	8004042 <xQueueGenericSendFromISR+0x2a>
 8004044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004054:	e7fe      	b.n	8004054 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004056:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0e5      	beq.n	8004028 <xQueueGenericSendFromISR+0x10>
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	e7fe      	b.n	800406c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406e:	f001 f963 	bl	8005338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004072:	f3ef 8811 	mrs	r8, BASEPRI
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004086:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004088:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800408a:	429a      	cmp	r2, r3
 800408c:	d306      	bcc.n	800409c <xQueueGenericSendFromISR+0x84>
 800408e:	2c02      	cmp	r4, #2
 8004090:	d004      	beq.n	800409c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004092:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004094:	f388 8811 	msr	BASEPRI, r8
}
 8004098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800409c:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 80040a0:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040a4:	4622      	mov	r2, r4
 80040a6:	4639      	mov	r1, r7
 80040a8:	4628      	mov	r0, r5
 80040aa:	f7ff fdaa 	bl	8003c02 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80040ae:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 80040b2:	d006      	beq.n	80040c2 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040b4:	f109 0301 	add.w	r3, r9, #1
 80040b8:	b25b      	sxtb	r3, r3
 80040ba:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 80040be:	2001      	movs	r0, #1
 80040c0:	e7e8      	b.n	8004094 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040c2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80040c4:	b90b      	cbnz	r3, 80040ca <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 80040c6:	2001      	movs	r0, #1
 80040c8:	e7e4      	b.n	8004094 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ca:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80040ce:	f000 fceb 	bl	8004aa8 <xTaskRemoveFromEventList>
 80040d2:	b118      	cbz	r0, 80040dc <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80040d4:	b126      	cbz	r6, 80040e0 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040d6:	2001      	movs	r0, #1
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	e7db      	b.n	8004094 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80040dc:	2001      	movs	r0, #1
 80040de:	e7d9      	b.n	8004094 <xQueueGenericSendFromISR+0x7c>
 80040e0:	2001      	movs	r0, #1
 80040e2:	e7d7      	b.n	8004094 <xQueueGenericSendFromISR+0x7c>

080040e4 <xQueueReceive>:
{
 80040e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e6:	b085      	sub	sp, #20
 80040e8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80040ea:	b190      	cbz	r0, 8004112 <xQueueReceive+0x2e>
 80040ec:	460f      	mov	r7, r1
 80040ee:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f0:	b1c1      	cbz	r1, 8004124 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f2:	f000 fd73 	bl	8004bdc <xTaskGetSchedulerState>
 80040f6:	4606      	mov	r6, r0
 80040f8:	bb00      	cbnz	r0, 800413c <xQueueReceive+0x58>
 80040fa:	9b01      	ldr	r3, [sp, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05e      	beq.n	80041be <xQueueReceive+0xda>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	e7fe      	b.n	8004110 <xQueueReceive+0x2c>
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004122:	e7fe      	b.n	8004122 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004124:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0e3      	beq.n	80040f2 <xQueueReceive+0xe>
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	e7fe      	b.n	800413a <xQueueReceive+0x56>
 800413c:	2600      	movs	r6, #0
 800413e:	e03e      	b.n	80041be <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004140:	4639      	mov	r1, r7
 8004142:	4620      	mov	r0, r4
 8004144:	f7ff fd98 	bl	8003c78 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004148:	3d01      	subs	r5, #1
 800414a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	b923      	cbnz	r3, 800415a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8004150:	f001 f82a 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 8004154:	2001      	movs	r0, #1
}
 8004156:	b005      	add	sp, #20
 8004158:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415a:	f104 0010 	add.w	r0, r4, #16
 800415e:	f000 fca3 	bl	8004aa8 <xTaskRemoveFromEventList>
 8004162:	2800      	cmp	r0, #0
 8004164:	d0f4      	beq.n	8004150 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8004166:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800416a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	e7e9      	b.n	8004150 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800417c:	f001 f814 	bl	80051a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004180:	2000      	movs	r0, #0
 8004182:	e7e8      	b.n	8004156 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004184:	a802      	add	r0, sp, #8
 8004186:	f000 fcd5 	bl	8004b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800418a:	2601      	movs	r6, #1
 800418c:	e021      	b.n	80041d2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800418e:	2300      	movs	r3, #0
 8004190:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004194:	e029      	b.n	80041ea <xQueueReceive+0x106>
 8004196:	2300      	movs	r3, #0
 8004198:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800419c:	e02b      	b.n	80041f6 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff fd7c 	bl	8003c9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041a4:	f000 fb5e 	bl	8004864 <xTaskResumeAll>
 80041a8:	e009      	b.n	80041be <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80041aa:	4620      	mov	r0, r4
 80041ac:	f7ff fd76 	bl	8003c9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041b0:	f000 fb58 	bl	8004864 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7ff fd17 	bl	8003be8 <prvIsQueueEmpty>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d13f      	bne.n	800423e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 80041be:	f000 ffd1 	bl	8005164 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041c2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041c4:	2d00      	cmp	r5, #0
 80041c6:	d1bb      	bne.n	8004140 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c8:	9b01      	ldr	r3, [sp, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0d6      	beq.n	800417c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	d0d8      	beq.n	8004184 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 80041d2:	f000 ffe9 	bl	80051a8 <vPortExitCritical>
		vTaskSuspendAll();
 80041d6:	f000 faab 	bl	8004730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041da:	f000 ffc3 	bl	8005164 <vPortEnterCritical>
 80041de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80041e2:	b25b      	sxtb	r3, r3
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e8:	d0d1      	beq.n	800418e <xQueueReceive+0xaa>
 80041ea:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f4:	d0cf      	beq.n	8004196 <xQueueReceive+0xb2>
 80041f6:	f000 ffd7 	bl	80051a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041fa:	a901      	add	r1, sp, #4
 80041fc:	a802      	add	r0, sp, #8
 80041fe:	f000 fca5 	bl	8004b4c <xTaskCheckForTimeOut>
 8004202:	2800      	cmp	r0, #0
 8004204:	d1d1      	bne.n	80041aa <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff fcee 	bl	8003be8 <prvIsQueueEmpty>
 800420c:	2800      	cmp	r0, #0
 800420e:	d0c6      	beq.n	800419e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004210:	9901      	ldr	r1, [sp, #4]
 8004212:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004216:	f000 fc13 	bl	8004a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff fd3e 	bl	8003c9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004220:	f000 fb20 	bl	8004864 <xTaskResumeAll>
 8004224:	2800      	cmp	r0, #0
 8004226:	d1ca      	bne.n	80041be <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8004228:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800422c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004230:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	e7bf      	b.n	80041be <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800423e:	2000      	movs	r0, #0
 8004240:	e789      	b.n	8004156 <xQueueReceive+0x72>
	...

08004244 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004244:	2300      	movs	r3, #0
 8004246:	2b07      	cmp	r3, #7
 8004248:	d80c      	bhi.n	8004264 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800424a:	4a07      	ldr	r2, [pc, #28]	@ (8004268 <vQueueAddToRegistry+0x24>)
 800424c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004250:	b10a      	cbz	r2, 8004256 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004252:	3301      	adds	r3, #1
 8004254:	e7f7      	b.n	8004246 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004256:	4a04      	ldr	r2, [pc, #16]	@ (8004268 <vQueueAddToRegistry+0x24>)
 8004258:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800425c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004260:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004262:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	200008f0 	.word	0x200008f0

0800426c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4604      	mov	r4, r0
 8004270:	460d      	mov	r5, r1
 8004272:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004274:	f000 ff76 	bl	8005164 <vPortEnterCritical>
 8004278:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800427c:	b25b      	sxtb	r3, r3
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004282:	d00d      	beq.n	80042a0 <vQueueWaitForMessageRestricted+0x34>
 8004284:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004288:	b25b      	sxtb	r3, r3
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800428e:	d00b      	beq.n	80042a8 <vQueueWaitForMessageRestricted+0x3c>
 8004290:	f000 ff8a 	bl	80051a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004294:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004296:	b15b      	cbz	r3, 80042b0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff fcff 	bl	8003c9c <prvUnlockQueue>
	}
 800429e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80042a0:	2300      	movs	r3, #0
 80042a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80042a6:	e7ed      	b.n	8004284 <vQueueWaitForMessageRestricted+0x18>
 80042a8:	2300      	movs	r3, #0
 80042aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80042ae:	e7ef      	b.n	8004290 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042b0:	4632      	mov	r2, r6
 80042b2:	4629      	mov	r1, r5
 80042b4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80042b8:	f000 fbda 	bl	8004a70 <vTaskPlaceOnEventListRestricted>
 80042bc:	e7ec      	b.n	8004298 <vQueueWaitForMessageRestricted+0x2c>
	...

080042c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c0:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <prvResetNextTaskUnblockTime+0x24>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	b923      	cbnz	r3, 80042d2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c8:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <prvResetNextTaskUnblockTime+0x28>)
 80042ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042d2:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <prvResetNextTaskUnblockTime+0x24>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b02      	ldr	r3, [pc, #8]	@ (80042e8 <prvResetNextTaskUnblockTime+0x28>)
 80042de:	601a      	str	r2, [r3, #0]
	}
}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	200009a0 	.word	0x200009a0
 80042e8:	20000938 	.word	0x20000938

080042ec <prvInitialiseNewTask>:
{
 80042ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	4680      	mov	r8, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	4617      	mov	r7, r2
 80042f6:	4699      	mov	r9, r3
 80042f8:	9e08      	ldr	r6, [sp, #32]
 80042fa:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80042fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	21a5      	movs	r1, #165	@ 0xa5
 8004304:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004306:	f001 f95d 	bl	80055c4 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800430a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800430c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8004310:	3a01      	subs	r2, #1
 8004312:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004316:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431a:	f04f 0c00 	mov.w	ip, #0
 800431e:	f1bc 0f1f 	cmp.w	ip, #31
 8004322:	d809      	bhi.n	8004338 <prvInitialiseNewTask+0x4c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004324:	f815 300c 	ldrb.w	r3, [r5, ip]
 8004328:	eb04 020c 	add.w	r2, r4, ip
 800432c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
		if( pcName[ x ] == 0x00 )
 8004330:	b113      	cbz	r3, 8004338 <prvInitialiseNewTask+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004332:	f10c 0c01 	add.w	ip, ip, #1
 8004336:	e7f2      	b.n	800431e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3053 	strb.w	r3, [r4, #83]	@ 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800433e:	2e37      	cmp	r6, #55	@ 0x37
 8004340:	d900      	bls.n	8004344 <prvInitialiseNewTask+0x58>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004342:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8004344:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8004346:	65e6      	str	r6, [r4, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004348:	2500      	movs	r5, #0
 800434a:	6625      	str	r5, [r4, #96]	@ 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800434c:	1d20      	adds	r0, r4, #4
 800434e:	f7ff fc02 	bl	8003b56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004352:	f104 0018 	add.w	r0, r4, #24
 8004356:	f7ff fbfe 	bl	8003b56 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800435a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8004360:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004362:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8004364:	6665      	str	r5, [r4, #100]	@ 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004366:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800436a:	464a      	mov	r2, r9
 800436c:	4641      	mov	r1, r8
 800436e:	4638      	mov	r0, r7
 8004370:	f000 fed2 	bl	8005118 <pxPortInitialiseStack>
 8004374:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004376:	f1ba 0f00 	cmp.w	sl, #0
 800437a:	d001      	beq.n	8004380 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800437c:	f8ca 4000 	str.w	r4, [sl]
}
 8004380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004384 <prvInitialiseTaskLists>:
{
 8004384:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004386:	2400      	movs	r4, #0
 8004388:	e007      	b.n	800439a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800438a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800438e:	0093      	lsls	r3, r2, #2
 8004390:	480e      	ldr	r0, [pc, #56]	@ (80043cc <prvInitialiseTaskLists+0x48>)
 8004392:	4418      	add	r0, r3
 8004394:	f7ff fbd4 	bl	8003b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004398:	3401      	adds	r4, #1
 800439a:	2c37      	cmp	r4, #55	@ 0x37
 800439c:	d9f5      	bls.n	800438a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800439e:	4d0c      	ldr	r5, [pc, #48]	@ (80043d0 <prvInitialiseTaskLists+0x4c>)
 80043a0:	4628      	mov	r0, r5
 80043a2:	f7ff fbcd 	bl	8003b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043a6:	4c0b      	ldr	r4, [pc, #44]	@ (80043d4 <prvInitialiseTaskLists+0x50>)
 80043a8:	4620      	mov	r0, r4
 80043aa:	f7ff fbc9 	bl	8003b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043ae:	480a      	ldr	r0, [pc, #40]	@ (80043d8 <prvInitialiseTaskLists+0x54>)
 80043b0:	f7ff fbc6 	bl	8003b40 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80043b4:	4809      	ldr	r0, [pc, #36]	@ (80043dc <prvInitialiseTaskLists+0x58>)
 80043b6:	f7ff fbc3 	bl	8003b40 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80043ba:	4809      	ldr	r0, [pc, #36]	@ (80043e0 <prvInitialiseTaskLists+0x5c>)
 80043bc:	f7ff fbc0 	bl	8003b40 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80043c0:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <prvInitialiseTaskLists+0x60>)
 80043c2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043c4:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <prvInitialiseTaskLists+0x64>)
 80043c6:	601c      	str	r4, [r3, #0]
}
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	200009cc 	.word	0x200009cc
 80043d0:	200009b8 	.word	0x200009b8
 80043d4:	200009a4 	.word	0x200009a4
 80043d8:	20000988 	.word	0x20000988
 80043dc:	20000974 	.word	0x20000974
 80043e0:	2000095c 	.word	0x2000095c
 80043e4:	200009a0 	.word	0x200009a0
 80043e8:	2000099c 	.word	0x2000099c

080043ec <prvAddNewTaskToReadyList>:
{
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80043f0:	f000 feb8 	bl	8005164 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80043f4:	4a22      	ldr	r2, [pc, #136]	@ (8004480 <prvAddNewTaskToReadyList+0x94>)
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043fc:	4b21      	ldr	r3, [pc, #132]	@ (8004484 <prvAddNewTaskToReadyList+0x98>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	b15b      	cbz	r3, 800441a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8004402:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <prvAddNewTaskToReadyList+0x9c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b96b      	cbnz	r3, 8004424 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004408:	4b1e      	ldr	r3, [pc, #120]	@ (8004484 <prvAddNewTaskToReadyList+0x98>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004410:	429a      	cmp	r2, r3
 8004412:	d807      	bhi.n	8004424 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8004414:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <prvAddNewTaskToReadyList+0x98>)
 8004416:	601c      	str	r4, [r3, #0]
 8004418:	e004      	b.n	8004424 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800441a:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <prvAddNewTaskToReadyList+0x98>)
 800441c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800441e:	6813      	ldr	r3, [r2, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d029      	beq.n	8004478 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <prvAddNewTaskToReadyList+0xa0>)
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800442c:	6563      	str	r3, [r4, #84]	@ 0x54
		prvAddTaskToReadyList( pxNewTCB );
 800442e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004430:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <prvAddNewTaskToReadyList+0xa4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4298      	cmp	r0, r3
 8004436:	d901      	bls.n	800443c <prvAddNewTaskToReadyList+0x50>
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <prvAddNewTaskToReadyList+0xa4>)
 800443a:	6018      	str	r0, [r3, #0]
 800443c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004440:	1d21      	adds	r1, r4, #4
 8004442:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <prvAddNewTaskToReadyList+0xa8>)
 8004444:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004448:	f7ff fb88 	bl	8003b5c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800444c:	f000 feac 	bl	80051a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <prvAddNewTaskToReadyList+0x9c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b17b      	cbz	r3, 8004476 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <prvAddNewTaskToReadyList+0x98>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800445e:	429a      	cmp	r2, r3
 8004460:	d209      	bcs.n	8004476 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8004462:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800446a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
}
 8004476:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8004478:	f7ff ff84 	bl	8004384 <prvInitialiseTaskLists>
 800447c:	e7d2      	b.n	8004424 <prvAddNewTaskToReadyList+0x38>
 800447e:	bf00      	nop
 8004480:	20000958 	.word	0x20000958
 8004484:	20000e2c 	.word	0x20000e2c
 8004488:	2000094c 	.word	0x2000094c
 800448c:	2000093c 	.word	0x2000093c
 8004490:	20000950 	.word	0x20000950
 8004494:	200009cc 	.word	0x200009cc

08004498 <prvDeleteTCB>:
	{
 8004498:	b510      	push	{r4, lr}
 800449a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800449c:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 80044a0:	b163      	cbz	r3, 80044bc <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d011      	beq.n	80044ca <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d00e      	beq.n	80044c8 <prvDeleteTCB+0x30>
 80044aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	e7fe      	b.n	80044ba <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80044bc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80044be:	f001 f849 	bl	8005554 <vPortFree>
				vPortFree( pxTCB );
 80044c2:	4620      	mov	r0, r4
 80044c4:	f001 f846 	bl	8005554 <vPortFree>
	}
 80044c8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80044ca:	f001 f843 	bl	8005554 <vPortFree>
 80044ce:	e7fb      	b.n	80044c8 <prvDeleteTCB+0x30>

080044d0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <prvCheckTasksWaitingTermination+0x40>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b1d3      	cbz	r3, 800450c <prvCheckTasksWaitingTermination+0x3c>
{
 80044d6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80044d8:	f000 fe44 	bl	8005164 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <prvCheckTasksWaitingTermination+0x44>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044e2:	1d20      	adds	r0, r4, #4
 80044e4:	f7ff fb5e 	bl	8003ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004518 <prvCheckTasksWaitingTermination+0x48>)
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044f0:	4a07      	ldr	r2, [pc, #28]	@ (8004510 <prvCheckTasksWaitingTermination+0x40>)
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80044f8:	f000 fe56 	bl	80051a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff ffcb 	bl	8004498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004502:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <prvCheckTasksWaitingTermination+0x40>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e6      	bne.n	80044d8 <prvCheckTasksWaitingTermination+0x8>
}
 800450a:	bd10      	pop	{r4, pc}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000970 	.word	0x20000970
 8004514:	20000974 	.word	0x20000974
 8004518:	20000958 	.word	0x20000958

0800451c <prvIdleTask>:
{
 800451c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800451e:	f7ff ffd7 	bl	80044d0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <prvIdleTask+0x24>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d9f9      	bls.n	800451e <prvIdleTask+0x2>
				taskYIELD();
 800452a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800452e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004532:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	e7ee      	b.n	800451e <prvIdleTask+0x2>
 8004540:	200009cc 	.word	0x200009cc

08004544 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4604      	mov	r4, r0
 8004548:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800454a:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <prvAddCurrentTaskToDelayedList+0x64>)
 800454c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800454e:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x68>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	3004      	adds	r0, #4
 8004554:	f7ff fb26 	bl	8003ba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004558:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800455c:	d00d      	beq.n	800457a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800455e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004560:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x68>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004566:	42a6      	cmp	r6, r4
 8004568:	d910      	bls.n	800458c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x68>)
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	3104      	adds	r1, #4
 8004574:	f7ff fafd 	bl	8003b72 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004578:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800457a:	2d00      	cmp	r5, #0
 800457c:	d0ef      	beq.n	800455e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800457e:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x68>)
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	3104      	adds	r1, #4
 8004584:	480b      	ldr	r0, [pc, #44]	@ (80045b4 <prvAddCurrentTaskToDelayedList+0x70>)
 8004586:	f7ff fae9 	bl	8003b5c <vListInsertEnd>
 800458a:	e7f5      	b.n	8004578 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <prvAddCurrentTaskToDelayedList+0x74>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <prvAddCurrentTaskToDelayedList+0x68>)
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	3104      	adds	r1, #4
 8004596:	f7ff faec 	bl	8003b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800459a:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <prvAddCurrentTaskToDelayedList+0x78>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	42a3      	cmp	r3, r4
 80045a0:	d9ea      	bls.n	8004578 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <prvAddCurrentTaskToDelayedList+0x78>)
 80045a4:	601c      	str	r4, [r3, #0]
}
 80045a6:	e7e7      	b.n	8004578 <prvAddCurrentTaskToDelayedList+0x34>
 80045a8:	20000954 	.word	0x20000954
 80045ac:	20000e2c 	.word	0x20000e2c
 80045b0:	2000099c 	.word	0x2000099c
 80045b4:	2000095c 	.word	0x2000095c
 80045b8:	200009a0 	.word	0x200009a0
 80045bc:	20000938 	.word	0x20000938

080045c0 <xTaskCreateStatic>:
	{
 80045c0:	b530      	push	{r4, r5, lr}
 80045c2:	b087      	sub	sp, #28
 80045c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80045c6:	b17c      	cbz	r4, 80045e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80045c8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80045ca:	b1b5      	cbz	r5, 80045fa <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80045cc:	256c      	movs	r5, #108	@ 0x6c
 80045ce:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045d0:	9d04      	ldr	r5, [sp, #16]
 80045d2:	2d6c      	cmp	r5, #108	@ 0x6c
 80045d4:	d01a      	beq.n	800460c <xTaskCreateStatic+0x4c>
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	e7fe      	b.n	80045e6 <xTaskCreateStatic+0x26>
 80045e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80045f8:	e7fe      	b.n	80045f8 <xTaskCreateStatic+0x38>
 80045fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800460a:	e7fe      	b.n	800460a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800460c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800460e:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004610:	2402      	movs	r4, #2
 8004612:	f885 4069 	strb.w	r4, [r5, #105]	@ 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004616:	2400      	movs	r4, #0
 8004618:	9403      	str	r4, [sp, #12]
 800461a:	9502      	str	r5, [sp, #8]
 800461c:	ac05      	add	r4, sp, #20
 800461e:	9401      	str	r4, [sp, #4]
 8004620:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004622:	9400      	str	r4, [sp, #0]
 8004624:	f7ff fe62 	bl	80042ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004628:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800462a:	f7ff fedf 	bl	80043ec <prvAddNewTaskToReadyList>
	}
 800462e:	9805      	ldr	r0, [sp, #20]
 8004630:	b007      	add	sp, #28
 8004632:	bd30      	pop	{r4, r5, pc}

08004634 <xTaskCreate>:
	{
 8004634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004638:	b085      	sub	sp, #20
 800463a:	4607      	mov	r7, r0
 800463c:	4688      	mov	r8, r1
 800463e:	4614      	mov	r4, r2
 8004640:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004642:	0090      	lsls	r0, r2, #2
 8004644:	f000 ff0a 	bl	800545c <pvPortMalloc>
			if( pxStack != NULL )
 8004648:	b308      	cbz	r0, 800468e <xTaskCreate+0x5a>
 800464a:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800464c:	206c      	movs	r0, #108	@ 0x6c
 800464e:	f000 ff05 	bl	800545c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004652:	4605      	mov	r5, r0
 8004654:	b1a8      	cbz	r0, 8004682 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004656:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800465a:	2300      	movs	r3, #0
 800465c:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	9002      	str	r0, [sp, #8]
 8004664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	4633      	mov	r3, r6
 800466e:	4622      	mov	r2, r4
 8004670:	4641      	mov	r1, r8
 8004672:	4638      	mov	r0, r7
 8004674:	f7ff fe3a 	bl	80042ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004678:	4628      	mov	r0, r5
 800467a:	f7ff feb7 	bl	80043ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800467e:	2001      	movs	r0, #1
 8004680:	e007      	b.n	8004692 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004682:	4648      	mov	r0, r9
 8004684:	f000 ff66 	bl	8005554 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800468c:	e001      	b.n	8004692 <xTaskCreate+0x5e>
 800468e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 8004692:	b005      	add	sp, #20
 8004694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004698 <vTaskStartScheduler>:
{
 8004698:	b510      	push	{r4, lr}
 800469a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469c:	2400      	movs	r4, #0
 800469e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046a0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a2:	aa07      	add	r2, sp, #28
 80046a4:	a906      	add	r1, sp, #24
 80046a6:	a805      	add	r0, sp, #20
 80046a8:	f7ff fa32 	bl	8003b10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046ac:	9b05      	ldr	r3, [sp, #20]
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	9b06      	ldr	r3, [sp, #24]
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	9400      	str	r4, [sp, #0]
 80046b6:	4623      	mov	r3, r4
 80046b8:	9a07      	ldr	r2, [sp, #28]
 80046ba:	4917      	ldr	r1, [pc, #92]	@ (8004718 <vTaskStartScheduler+0x80>)
 80046bc:	4817      	ldr	r0, [pc, #92]	@ (800471c <vTaskStartScheduler+0x84>)
 80046be:	f7ff ff7f 	bl	80045c0 <xTaskCreateStatic>
 80046c2:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <vTaskStartScheduler+0x88>)
 80046c4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80046c6:	b1c0      	cbz	r0, 80046fa <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 80046c8:	f000 fb4c 	bl	8004d64 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80046cc:	2801      	cmp	r0, #1
 80046ce:	d115      	bne.n	80046fc <vTaskStartScheduler+0x64>
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80046e0:	4b10      	ldr	r3, [pc, #64]	@ (8004724 <vTaskStartScheduler+0x8c>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004728 <vTaskStartScheduler+0x90>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046ee:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <vTaskStartScheduler+0x94>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80046f4:	f000 fdc0 	bl	8005278 <xPortStartScheduler>
 80046f8:	e003      	b.n	8004702 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 80046fa:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046fc:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8004700:	d001      	beq.n	8004706 <vTaskStartScheduler+0x6e>
}
 8004702:	b008      	add	sp, #32
 8004704:	bd10      	pop	{r4, pc}
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004716:	e7fe      	b.n	8004716 <vTaskStartScheduler+0x7e>
 8004718:	0800576c 	.word	0x0800576c
 800471c:	0800451d 	.word	0x0800451d
 8004720:	20000934 	.word	0x20000934
 8004724:	20000938 	.word	0x20000938
 8004728:	2000094c 	.word	0x2000094c
 800472c:	20000954 	.word	0x20000954

08004730 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004730:	4a02      	ldr	r2, [pc, #8]	@ (800473c <vTaskSuspendAll+0xc>)
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	6013      	str	r3, [r2, #0]
}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000930 	.word	0x20000930

08004740 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004740:	4b01      	ldr	r3, [pc, #4]	@ (8004748 <xTaskGetTickCount+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000954 	.word	0x20000954

0800474c <xTaskIncrementTick>:
{
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474e:	4b3a      	ldr	r3, [pc, #232]	@ (8004838 <xTaskIncrementTick+0xec>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d164      	bne.n	8004820 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004756:	4b39      	ldr	r3, [pc, #228]	@ (800483c <xTaskIncrementTick+0xf0>)
 8004758:	681d      	ldr	r5, [r3, #0]
 800475a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800475c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800475e:	b9c5      	cbnz	r5, 8004792 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004760:	4b37      	ldr	r3, [pc, #220]	@ (8004840 <xTaskIncrementTick+0xf4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b143      	cbz	r3, 800477a <xTaskIncrementTick+0x2e>
 8004768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	e7fe      	b.n	8004778 <xTaskIncrementTick+0x2c>
 800477a:	4a31      	ldr	r2, [pc, #196]	@ (8004840 <xTaskIncrementTick+0xf4>)
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	4b31      	ldr	r3, [pc, #196]	@ (8004844 <xTaskIncrementTick+0xf8>)
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	6010      	str	r0, [r2, #0]
 8004784:	6019      	str	r1, [r3, #0]
 8004786:	4a30      	ldr	r2, [pc, #192]	@ (8004848 <xTaskIncrementTick+0xfc>)
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	f7ff fd97 	bl	80042c0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004792:	4b2e      	ldr	r3, [pc, #184]	@ (800484c <xTaskIncrementTick+0x100>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	42ab      	cmp	r3, r5
 8004798:	d938      	bls.n	800480c <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800479a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800479c:	4b2c      	ldr	r3, [pc, #176]	@ (8004850 <xTaskIncrementTick+0x104>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047a6:	009a      	lsls	r2, r3, #2
 80047a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004854 <xTaskIncrementTick+0x108>)
 80047aa:	589b      	ldr	r3, [r3, r2]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d93c      	bls.n	800482a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80047b0:	2701      	movs	r7, #1
 80047b2:	e03a      	b.n	800482a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80047b4:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b6:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <xTaskIncrementTick+0xf4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	b343      	cbz	r3, 8004810 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047be:	4b20      	ldr	r3, [pc, #128]	@ (8004840 <xTaskIncrementTick+0xf4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047c6:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80047c8:	429d      	cmp	r5, r3
 80047ca:	d326      	bcc.n	800481a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047cc:	1d26      	adds	r6, r4, #4
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff f9e8 	bl	8003ba4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047d6:	b11b      	cbz	r3, 80047e0 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d8:	f104 0018 	add.w	r0, r4, #24
 80047dc:	f7ff f9e2 	bl	8003ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80047e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <xTaskIncrementTick+0x10c>)
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <xTaskIncrementTick+0xa2>
 80047ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <xTaskIncrementTick+0x10c>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047f2:	009a      	lsls	r2, r3, #2
 80047f4:	4631      	mov	r1, r6
 80047f6:	4817      	ldr	r0, [pc, #92]	@ (8004854 <xTaskIncrementTick+0x108>)
 80047f8:	4410      	add	r0, r2
 80047fa:	f7ff f9af 	bl	8003b5c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004800:	4b13      	ldr	r3, [pc, #76]	@ (8004850 <xTaskIncrementTick+0x104>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	429a      	cmp	r2, r3
 8004808:	d2d4      	bcs.n	80047b4 <xTaskIncrementTick+0x68>
 800480a:	e7d4      	b.n	80047b6 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800480c:	2700      	movs	r7, #0
 800480e:	e7d2      	b.n	80047b6 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004810:	4b0e      	ldr	r3, [pc, #56]	@ (800484c <xTaskIncrementTick+0x100>)
 8004812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004816:	601a      	str	r2, [r3, #0]
					break;
 8004818:	e7c0      	b.n	800479c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800481a:	4a0c      	ldr	r2, [pc, #48]	@ (800484c <xTaskIncrementTick+0x100>)
 800481c:	6013      	str	r3, [r2, #0]
						break;
 800481e:	e7bd      	b.n	800479c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8004820:	4a0e      	ldr	r2, [pc, #56]	@ (800485c <xTaskIncrementTick+0x110>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004828:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800482a:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <xTaskIncrementTick+0x114>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	b103      	cbz	r3, 8004832 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8004830:	2701      	movs	r7, #1
}
 8004832:	4638      	mov	r0, r7
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004836:	bf00      	nop
 8004838:	20000930 	.word	0x20000930
 800483c:	20000954 	.word	0x20000954
 8004840:	200009a0 	.word	0x200009a0
 8004844:	2000099c 	.word	0x2000099c
 8004848:	20000940 	.word	0x20000940
 800484c:	20000938 	.word	0x20000938
 8004850:	20000e2c 	.word	0x20000e2c
 8004854:	200009cc 	.word	0x200009cc
 8004858:	20000950 	.word	0x20000950
 800485c:	20000948 	.word	0x20000948
 8004860:	20000944 	.word	0x20000944

08004864 <xTaskResumeAll>:
{
 8004864:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <xTaskResumeAll+0xd8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b943      	cbnz	r3, 800487e <xTaskResumeAll+0x1a>
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	e7fe      	b.n	800487c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800487e:	f000 fc71 	bl	8005164 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004882:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <xTaskResumeAll+0xd8>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	3a01      	subs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d14f      	bne.n	8004930 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <xTaskResumeAll+0xdc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	b90b      	cbnz	r3, 800489a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004896:	2400      	movs	r4, #0
 8004898:	e04b      	b.n	8004932 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800489a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800489c:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <xTaskResumeAll+0xe0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	b31b      	cbz	r3, 80048ea <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048a2:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <xTaskResumeAll+0xe0>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a8:	f104 0018 	add.w	r0, r4, #24
 80048ac:	f7ff f97a 	bl	8003ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b0:	1d25      	adds	r5, r4, #4
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff f976 	bl	8003ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <xTaskResumeAll+0xe4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4298      	cmp	r0, r3
 80048c0:	d901      	bls.n	80048c6 <xTaskResumeAll+0x62>
 80048c2:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <xTaskResumeAll+0xe4>)
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048ca:	4629      	mov	r1, r5
 80048cc:	4b1f      	ldr	r3, [pc, #124]	@ (800494c <xTaskResumeAll+0xe8>)
 80048ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80048d2:	f7ff f943 	bl	8003b5c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80048d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <xTaskResumeAll+0xec>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	429a      	cmp	r2, r3
 80048e0:	d3dc      	bcc.n	800489c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80048e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <xTaskResumeAll+0xf0>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e7d8      	b.n	800489c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80048ea:	b10c      	cbz	r4, 80048f0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80048ec:	f7ff fce8 	bl	80042c0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048f0:	4b19      	ldr	r3, [pc, #100]	@ (8004958 <xTaskResumeAll+0xf4>)
 80048f2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048f4:	b984      	cbnz	r4, 8004918 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80048f6:	4b17      	ldr	r3, [pc, #92]	@ (8004954 <xTaskResumeAll+0xf0>)
 80048f8:	681c      	ldr	r4, [r3, #0]
 80048fa:	b1d4      	cbz	r4, 8004932 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80048fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004904:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004910:	2401      	movs	r4, #1
 8004912:	e00e      	b.n	8004932 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004914:	3c01      	subs	r4, #1
 8004916:	d007      	beq.n	8004928 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8004918:	f7ff ff18 	bl	800474c <xTaskIncrementTick>
 800491c:	2800      	cmp	r0, #0
 800491e:	d0f9      	beq.n	8004914 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <xTaskResumeAll+0xf0>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e7f5      	b.n	8004914 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <xTaskResumeAll+0xf4>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e7e2      	b.n	80048f6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8004930:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004932:	f000 fc39 	bl	80051a8 <vPortExitCritical>
}
 8004936:	4620      	mov	r0, r4
 8004938:	bd38      	pop	{r3, r4, r5, pc}
 800493a:	bf00      	nop
 800493c:	20000930 	.word	0x20000930
 8004940:	20000958 	.word	0x20000958
 8004944:	20000988 	.word	0x20000988
 8004948:	20000950 	.word	0x20000950
 800494c:	200009cc 	.word	0x200009cc
 8004950:	20000e2c 	.word	0x20000e2c
 8004954:	20000944 	.word	0x20000944
 8004958:	20000948 	.word	0x20000948

0800495c <vTaskDelay>:
	{
 800495c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800495e:	b1a8      	cbz	r0, 800498c <vTaskDelay+0x30>
 8004960:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <vTaskDelay+0x48>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b143      	cbz	r3, 800497a <vTaskDelay+0x1e>
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	e7fe      	b.n	8004978 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800497a:	f7ff fed9 	bl	8004730 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800497e:	2100      	movs	r1, #0
 8004980:	4620      	mov	r0, r4
 8004982:	f7ff fddf 	bl	8004544 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004986:	f7ff ff6d 	bl	8004864 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800498a:	b948      	cbnz	r0, 80049a0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800498c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004994:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
	}
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	20000930 	.word	0x20000930

080049a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049a8:	4b20      	ldr	r3, [pc, #128]	@ (8004a2c <vTaskSwitchContext+0x84>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b11b      	cbz	r3, 80049b6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80049ae:	4b20      	ldr	r3, [pc, #128]	@ (8004a30 <vTaskSwitchContext+0x88>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80049b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a30 <vTaskSwitchContext+0x88>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a34 <vTaskSwitchContext+0x8c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80049c4:	008a      	lsls	r2, r1, #2
 80049c6:	491c      	ldr	r1, [pc, #112]	@ (8004a38 <vTaskSwitchContext+0x90>)
 80049c8:	588a      	ldr	r2, [r1, r2]
 80049ca:	b95a      	cbnz	r2, 80049e4 <vTaskSwitchContext+0x3c>
 80049cc:	b10b      	cbz	r3, 80049d2 <vTaskSwitchContext+0x2a>
 80049ce:	3b01      	subs	r3, #1
 80049d0:	e7f6      	b.n	80049c0 <vTaskSwitchContext+0x18>
 80049d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	e7fe      	b.n	80049e2 <vTaskSwitchContext+0x3a>
 80049e4:	4608      	mov	r0, r1
 80049e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80049ea:	008a      	lsls	r2, r1, #2
 80049ec:	4402      	add	r2, r0
 80049ee:	6851      	ldr	r1, [r2, #4]
 80049f0:	6849      	ldr	r1, [r1, #4]
 80049f2:	6051      	str	r1, [r2, #4]
 80049f4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80049f8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80049fc:	3208      	adds	r2, #8
 80049fe:	4402      	add	r2, r0
 8004a00:	4291      	cmp	r1, r2
 8004a02:	d00b      	beq.n	8004a1c <vTaskSwitchContext+0x74>
 8004a04:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004a08:	0091      	lsls	r1, r2, #2
 8004a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8004a38 <vTaskSwitchContext+0x90>)
 8004a0c:	440a      	add	r2, r1
 8004a0e:	6852      	ldr	r2, [r2, #4]
 8004a10:	68d1      	ldr	r1, [r2, #12]
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <vTaskSwitchContext+0x94>)
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <vTaskSwitchContext+0x8c>)
 8004a18:	6013      	str	r3, [r2, #0]
}
 8004a1a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004a1c:	6848      	ldr	r0, [r1, #4]
 8004a1e:	4662      	mov	r2, ip
 8004a20:	0091      	lsls	r1, r2, #2
 8004a22:	4a05      	ldr	r2, [pc, #20]	@ (8004a38 <vTaskSwitchContext+0x90>)
 8004a24:	440a      	add	r2, r1
 8004a26:	6050      	str	r0, [r2, #4]
 8004a28:	e7ec      	b.n	8004a04 <vTaskSwitchContext+0x5c>
 8004a2a:	bf00      	nop
 8004a2c:	20000930 	.word	0x20000930
 8004a30:	20000944 	.word	0x20000944
 8004a34:	20000950 	.word	0x20000950
 8004a38:	200009cc 	.word	0x200009cc
 8004a3c:	20000e2c 	.word	0x20000e2c

08004a40 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8004a40:	b158      	cbz	r0, 8004a5a <vTaskPlaceOnEventList+0x1a>
{
 8004a42:	b510      	push	{r4, lr}
 8004a44:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a46:	4a09      	ldr	r2, [pc, #36]	@ (8004a6c <vTaskPlaceOnEventList+0x2c>)
 8004a48:	6811      	ldr	r1, [r2, #0]
 8004a4a:	3118      	adds	r1, #24
 8004a4c:	f7ff f891 	bl	8003b72 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a50:	2101      	movs	r1, #1
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff fd76 	bl	8004544 <prvAddCurrentTaskToDelayedList>
}
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8004a6a:	e7fe      	b.n	8004a6a <vTaskPlaceOnEventList+0x2a>
 8004a6c:	20000e2c 	.word	0x20000e2c

08004a70 <vTaskPlaceOnEventListRestricted>:
	{
 8004a70:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8004a72:	b170      	cbz	r0, 8004a92 <vTaskPlaceOnEventListRestricted+0x22>
 8004a74:	460d      	mov	r5, r1
 8004a76:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a78:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa4 <vTaskPlaceOnEventListRestricted+0x34>)
 8004a7a:	6811      	ldr	r1, [r2, #0]
 8004a7c:	3118      	adds	r1, #24
 8004a7e:	f7ff f86d 	bl	8003b5c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8004a82:	b10c      	cbz	r4, 8004a88 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8004a84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7ff fd5a 	bl	8004544 <prvAddCurrentTaskToDelayedList>
	}
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8004aa2:	e7fe      	b.n	8004aa2 <vTaskPlaceOnEventListRestricted+0x32>
 8004aa4:	20000e2c 	.word	0x20000e2c

08004aa8 <xTaskRemoveFromEventList>:
{
 8004aa8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004aaa:	68c3      	ldr	r3, [r0, #12]
 8004aac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004aae:	b324      	cbz	r4, 8004afa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ab0:	f104 0518 	add.w	r5, r4, #24
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7ff f875 	bl	8003ba4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aba:	4b18      	ldr	r3, [pc, #96]	@ (8004b1c <xTaskRemoveFromEventList+0x74>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	bb2b      	cbnz	r3, 8004b0c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ac0:	1d25      	adds	r5, r4, #4
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff f86e 	bl	8003ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ac8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004aca:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <xTaskRemoveFromEventList+0x78>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4298      	cmp	r0, r3
 8004ad0:	d901      	bls.n	8004ad6 <xTaskRemoveFromEventList+0x2e>
 8004ad2:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <xTaskRemoveFromEventList+0x78>)
 8004ad4:	6018      	str	r0, [r3, #0]
 8004ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ada:	4629      	mov	r1, r5
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <xTaskRemoveFromEventList+0x7c>)
 8004ade:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ae2:	f7ff f83b 	bl	8003b5c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ae6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <xTaskRemoveFromEventList+0x80>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d911      	bls.n	8004b16 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8004af2:	2001      	movs	r0, #1
 8004af4:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <xTaskRemoveFromEventList+0x84>)
 8004af6:	6018      	str	r0, [r3, #0]
}
 8004af8:	bd38      	pop	{r3, r4, r5, pc}
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8004b0a:	e7fe      	b.n	8004b0a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4808      	ldr	r0, [pc, #32]	@ (8004b30 <xTaskRemoveFromEventList+0x88>)
 8004b10:	f7ff f824 	bl	8003b5c <vListInsertEnd>
 8004b14:	e7e7      	b.n	8004ae6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8004b16:	2000      	movs	r0, #0
	return xReturn;
 8004b18:	e7ee      	b.n	8004af8 <xTaskRemoveFromEventList+0x50>
 8004b1a:	bf00      	nop
 8004b1c:	20000930 	.word	0x20000930
 8004b20:	20000950 	.word	0x20000950
 8004b24:	200009cc 	.word	0x200009cc
 8004b28:	20000e2c 	.word	0x20000e2c
 8004b2c:	20000944 	.word	0x20000944
 8004b30:	20000988 	.word	0x20000988

08004b34 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <vTaskInternalSetTimeOutState+0x10>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b3a:	4b03      	ldr	r3, [pc, #12]	@ (8004b48 <vTaskInternalSetTimeOutState+0x14>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6043      	str	r3, [r0, #4]
}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000940 	.word	0x20000940
 8004b48:	20000954 	.word	0x20000954

08004b4c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8004b4c:	b1d8      	cbz	r0, 8004b86 <xTaskCheckForTimeOut+0x3a>
{
 8004b4e:	b570      	push	{r4, r5, r6, lr}
 8004b50:	460c      	mov	r4, r1
 8004b52:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8004b54:	b301      	cbz	r1, 8004b98 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8004b56:	f000 fb05 	bl	8005164 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <xTaskCheckForTimeOut+0x7c>)
 8004b5c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b5e:	686b      	ldr	r3, [r5, #4]
 8004b60:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8004b68:	d027      	beq.n	8004bba <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6a:	4e18      	ldr	r6, [pc, #96]	@ (8004bcc <xTaskCheckForTimeOut+0x80>)
 8004b6c:	6836      	ldr	r6, [r6, #0]
 8004b6e:	f8d5 c000 	ldr.w	ip, [r5]
 8004b72:	45b4      	cmp	ip, r6
 8004b74:	d001      	beq.n	8004b7a <xTaskCheckForTimeOut+0x2e>
 8004b76:	428b      	cmp	r3, r1
 8004b78:	d924      	bls.n	8004bc4 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b7a:	4282      	cmp	r2, r0
 8004b7c:	d815      	bhi.n	8004baa <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004b82:	2401      	movs	r4, #1
 8004b84:	e01a      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8004b96:	e7fe      	b.n	8004b96 <xTaskCheckForTimeOut+0x4a>
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8004ba8:	e7fe      	b.n	8004ba8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8004baa:	1a5b      	subs	r3, r3, r1
 8004bac:	4413      	add	r3, r2
 8004bae:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7ff ffbf 	bl	8004b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bb6:	2400      	movs	r4, #0
 8004bb8:	e000      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8004bba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004bbc:	f000 faf4 	bl	80051a8 <vPortExitCritical>
}
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8004bc4:	2401      	movs	r4, #1
 8004bc6:	e7f9      	b.n	8004bbc <xTaskCheckForTimeOut+0x70>
 8004bc8:	20000954 	.word	0x20000954
 8004bcc:	20000940 	.word	0x20000940

08004bd0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004bd0:	4b01      	ldr	r3, [pc, #4]	@ (8004bd8 <vTaskMissedYield+0x8>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000944 	.word	0x20000944

08004bdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <xTaskGetSchedulerState+0x18>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	b133      	cbz	r3, 8004bf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <xTaskGetSchedulerState+0x1c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b10b      	cbz	r3, 8004bec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8004be8:	2000      	movs	r0, #0
	}
 8004bea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8004bec:	2002      	movs	r0, #2
 8004bee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	4770      	bx	lr
 8004bf4:	2000094c 	.word	0x2000094c
 8004bf8:	20000930 	.word	0x20000930

08004bfc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d03b      	beq.n	8004c78 <xTaskPriorityDisinherit+0x7c>
	{
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8004c04:	4b1e      	ldr	r3, [pc, #120]	@ (8004c80 <xTaskPriorityDisinherit+0x84>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4283      	cmp	r3, r0
 8004c0a:	d008      	beq.n	8004c1e <xTaskPriorityDisinherit+0x22>
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	e7fe      	b.n	8004c1c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c1e:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004c20:	b943      	cbnz	r3, 8004c34 <xTaskPriorityDisinherit+0x38>
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	e7fe      	b.n	8004c32 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8004c34:	3b01      	subs	r3, #1
 8004c36:	6603      	str	r3, [r0, #96]	@ 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c38:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004c3a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004c3c:	4291      	cmp	r1, r2
 8004c3e:	d01d      	beq.n	8004c7c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c40:	b10b      	cbz	r3, 8004c46 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8004c42:	2000      	movs	r0, #0
	}
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c46:	1d05      	adds	r5, r0, #4
 8004c48:	4628      	mov	r0, r5
 8004c4a:	f7fe ffab 	bl	8003ba4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c4e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004c50:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c52:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8004c56:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <xTaskPriorityDisinherit+0x88>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4298      	cmp	r0, r3
 8004c5e:	d901      	bls.n	8004c64 <xTaskPriorityDisinherit+0x68>
 8004c60:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <xTaskPriorityDisinherit+0x88>)
 8004c62:	6018      	str	r0, [r3, #0]
 8004c64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <xTaskPriorityDisinherit+0x8c>)
 8004c6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c70:	f7fe ff74 	bl	8003b5c <vListInsertEnd>
					xReturn = pdTRUE;
 8004c74:	2001      	movs	r0, #1
 8004c76:	e7e5      	b.n	8004c44 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8004c78:	2000      	movs	r0, #0
	}
 8004c7a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e7e1      	b.n	8004c44 <xTaskPriorityDisinherit+0x48>
 8004c80:	20000e2c 	.word	0x20000e2c
 8004c84:	20000950 	.word	0x20000950
 8004c88:	200009cc 	.word	0x200009cc

08004c8c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <prvGetNextExpireTime+0x1c>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c9a:	b913      	cbnz	r3, 8004ca2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9c:	68d3      	ldr	r3, [r2, #12]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ca2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000f30 	.word	0x20000f30

08004cac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cac:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cae:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cb0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d80c      	bhi.n	8004cd0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	6983      	ldr	r3, [r0, #24]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d301      	bcc.n	8004cc2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cbe:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8004cc0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cc2:	1d01      	adds	r1, r0, #4
 8004cc4:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <prvInsertTimerInActiveList+0x40>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	f7fe ff53 	bl	8003b72 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7f7      	b.n	8004cc0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d201      	bcs.n	8004cd8 <prvInsertTimerInActiveList+0x2c>
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d206      	bcs.n	8004ce6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cd8:	1d01      	adds	r1, r0, #4
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <prvInsertTimerInActiveList+0x44>)
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f7fe ff48 	bl	8003b72 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7ec      	b.n	8004cc0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8004ce6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004ce8:	e7ea      	b.n	8004cc0 <prvInsertTimerInActiveList+0x14>
 8004cea:	bf00      	nop
 8004cec:	20000f2c 	.word	0x20000f2c
 8004cf0:	20000f30 	.word	0x20000f30

08004cf4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cf4:	b530      	push	{r4, r5, lr}
 8004cf6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cf8:	f000 fa34 	bl	8005164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cfc:	4b11      	ldr	r3, [pc, #68]	@ (8004d44 <prvCheckForValidListAndQueue+0x50>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	b11b      	cbz	r3, 8004d0a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d02:	f000 fa51 	bl	80051a8 <vPortExitCritical>
}
 8004d06:	b003      	add	sp, #12
 8004d08:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8004d0a:	4d0f      	ldr	r5, [pc, #60]	@ (8004d48 <prvCheckForValidListAndQueue+0x54>)
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7fe ff17 	bl	8003b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d12:	4c0e      	ldr	r4, [pc, #56]	@ (8004d4c <prvCheckForValidListAndQueue+0x58>)
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7fe ff13 	bl	8003b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <prvCheckForValidListAndQueue+0x5c>)
 8004d1c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <prvCheckForValidListAndQueue+0x60>)
 8004d20:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d22:	2300      	movs	r3, #0
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <prvCheckForValidListAndQueue+0x64>)
 8004d28:	4a0c      	ldr	r2, [pc, #48]	@ (8004d5c <prvCheckForValidListAndQueue+0x68>)
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	200a      	movs	r0, #10
 8004d2e:	f7ff f83f 	bl	8003db0 <xQueueGenericCreateStatic>
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <prvCheckForValidListAndQueue+0x50>)
 8004d34:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d0e3      	beq.n	8004d02 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d3a:	4909      	ldr	r1, [pc, #36]	@ (8004d60 <prvCheckForValidListAndQueue+0x6c>)
 8004d3c:	f7ff fa82 	bl	8004244 <vQueueAddToRegistry>
 8004d40:	e7df      	b.n	8004d02 <prvCheckForValidListAndQueue+0xe>
 8004d42:	bf00      	nop
 8004d44:	20000f28 	.word	0x20000f28
 8004d48:	20000f48 	.word	0x20000f48
 8004d4c:	20000f34 	.word	0x20000f34
 8004d50:	20000f30 	.word	0x20000f30
 8004d54:	20000f2c 	.word	0x20000f2c
 8004d58:	20000e30 	.word	0x20000e30
 8004d5c:	20000e80 	.word	0x20000e80
 8004d60:	08005774 	.word	0x08005774

08004d64 <xTimerCreateTimerTask>:
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004d68:	f7ff ffc4 	bl	8004cf4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004d6c:	4b12      	ldr	r3, [pc, #72]	@ (8004db8 <xTimerCreateTimerTask+0x54>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	b1cb      	cbz	r3, 8004da6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d72:	2400      	movs	r4, #0
 8004d74:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d76:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d78:	aa07      	add	r2, sp, #28
 8004d7a:	a906      	add	r1, sp, #24
 8004d7c:	a805      	add	r0, sp, #20
 8004d7e:	f7fe fed3 	bl	8003b28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d82:	9b05      	ldr	r3, [sp, #20]
 8004d84:	9302      	str	r3, [sp, #8]
 8004d86:	9b06      	ldr	r3, [sp, #24]
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	4623      	mov	r3, r4
 8004d90:	9a07      	ldr	r2, [sp, #28]
 8004d92:	490a      	ldr	r1, [pc, #40]	@ (8004dbc <xTimerCreateTimerTask+0x58>)
 8004d94:	480a      	ldr	r0, [pc, #40]	@ (8004dc0 <xTimerCreateTimerTask+0x5c>)
 8004d96:	f7ff fc13 	bl	80045c0 <xTaskCreateStatic>
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc4 <xTimerCreateTimerTask+0x60>)
 8004d9c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004d9e:	b110      	cbz	r0, 8004da6 <xTimerCreateTimerTask+0x42>
}
 8004da0:	2001      	movs	r0, #1
 8004da2:	b008      	add	sp, #32
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8004db6:	e7fe      	b.n	8004db6 <xTimerCreateTimerTask+0x52>
 8004db8:	20000f28 	.word	0x20000f28
 8004dbc:	0800577c 	.word	0x0800577c
 8004dc0:	080050a1 	.word	0x080050a1
 8004dc4:	20000f24 	.word	0x20000f24

08004dc8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8004dc8:	b1b8      	cbz	r0, 8004dfa <xTimerGenericCommand+0x32>
 8004dca:	469c      	mov	ip, r3
 8004dcc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8004dce:	4818      	ldr	r0, [pc, #96]	@ (8004e30 <xTimerGenericCommand+0x68>)
 8004dd0:	6800      	ldr	r0, [r0, #0]
 8004dd2:	b358      	cbz	r0, 8004e2c <xTimerGenericCommand+0x64>
{
 8004dd4:	b500      	push	{lr}
 8004dd6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8004dd8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dda:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ddc:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dde:	2905      	cmp	r1, #5
 8004de0:	dc1c      	bgt.n	8004e1c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004de2:	f7ff fefb 	bl	8004bdc <xTaskGetSchedulerState>
 8004de6:	2802      	cmp	r0, #2
 8004de8:	d010      	beq.n	8004e0c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dea:	2300      	movs	r3, #0
 8004dec:	461a      	mov	r2, r3
 8004dee:	4669      	mov	r1, sp
 8004df0:	480f      	ldr	r0, [pc, #60]	@ (8004e30 <xTimerGenericCommand+0x68>)
 8004df2:	6800      	ldr	r0, [r0, #0]
 8004df4:	f7ff f84c 	bl	8003e90 <xQueueGenericSend>
 8004df8:	e015      	b.n	8004e26 <xTimerGenericCommand+0x5e>
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8004e0a:	e7fe      	b.n	8004e0a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9a06      	ldr	r2, [sp, #24]
 8004e10:	4669      	mov	r1, sp
 8004e12:	4807      	ldr	r0, [pc, #28]	@ (8004e30 <xTimerGenericCommand+0x68>)
 8004e14:	6800      	ldr	r0, [r0, #0]
 8004e16:	f7ff f83b 	bl	8003e90 <xQueueGenericSend>
 8004e1a:	e004      	b.n	8004e26 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4662      	mov	r2, ip
 8004e20:	4669      	mov	r1, sp
 8004e22:	f7ff f8f9 	bl	8004018 <xQueueGenericSendFromISR>
}
 8004e26:	b005      	add	sp, #20
 8004e28:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8004e2c:	2000      	movs	r0, #0
}
 8004e2e:	4770      	bx	lr
 8004e30:	20000f28 	.word	0x20000f28

08004e34 <prvSwitchTimerLists>:
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <prvSwitchTimerLists+0x70>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	b352      	cbz	r2, 8004e96 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e44:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e46:	1d25      	adds	r5, r4, #4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f7fe feab 	bl	8003ba4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004e50:	4620      	mov	r0, r4
 8004e52:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e54:	69e3      	ldr	r3, [r4, #28]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d1ee      	bne.n	8004e38 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e5a:	69a3      	ldr	r3, [r4, #24]
 8004e5c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	d207      	bcs.n	8004e72 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e62:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e64:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e66:	4629      	mov	r1, r5
 8004e68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea4 <prvSwitchTimerLists+0x70>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	f7fe fe81 	bl	8003b72 <vListInsert>
 8004e70:	e7e2      	b.n	8004e38 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e72:	2100      	movs	r1, #0
 8004e74:	9100      	str	r1, [sp, #0]
 8004e76:	460b      	mov	r3, r1
 8004e78:	4632      	mov	r2, r6
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f7ff ffa4 	bl	8004dc8 <xTimerGenericCommand>
				configASSERT( xResult );
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1d9      	bne.n	8004e38 <prvSwitchTimerLists+0x4>
 8004e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	e7fe      	b.n	8004e94 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8004e96:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <prvSwitchTimerLists+0x74>)
 8004e98:	6810      	ldr	r0, [r2, #0]
 8004e9a:	4902      	ldr	r1, [pc, #8]	@ (8004ea4 <prvSwitchTimerLists+0x70>)
 8004e9c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8004e9e:	6013      	str	r3, [r2, #0]
}
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	20000f30 	.word	0x20000f30
 8004ea8:	20000f2c 	.word	0x20000f2c

08004eac <prvSampleTimeNow>:
{
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8004eb0:	f7ff fc46 	bl	8004740 <xTaskGetTickCount>
 8004eb4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8004eb6:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <prvSampleTimeNow+0x28>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4283      	cmp	r3, r0
 8004ebc:	d805      	bhi.n	8004eca <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8004ec2:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <prvSampleTimeNow+0x28>)
 8004ec4:	601c      	str	r4, [r3, #0]
}
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8004eca:	f7ff ffb3 	bl	8004e34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	e7f6      	b.n	8004ec2 <prvSampleTimeNow+0x16>
 8004ed4:	20000f20 	.word	0x20000f20

08004ed8 <prvProcessExpiredTimer>:
{
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	4606      	mov	r6, r0
 8004ede:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee0:	4914      	ldr	r1, [pc, #80]	@ (8004f34 <prvProcessExpiredTimer+0x5c>)
 8004ee2:	6809      	ldr	r1, [r1, #0]
 8004ee4:	68c9      	ldr	r1, [r1, #12]
 8004ee6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee8:	1d20      	adds	r0, r4, #4
 8004eea:	f7fe fe5b 	bl	8003ba4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eee:	69e1      	ldr	r1, [r4, #28]
 8004ef0:	2901      	cmp	r1, #1
 8004ef2:	d004      	beq.n	8004efe <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ef4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4798      	blx	r3
}
 8004efa:	b002      	add	sp, #8
 8004efc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004efe:	69a1      	ldr	r1, [r4, #24]
 8004f00:	4633      	mov	r3, r6
 8004f02:	462a      	mov	r2, r5
 8004f04:	4431      	add	r1, r6
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fed0 	bl	8004cac <prvInsertTimerInActiveList>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0f1      	beq.n	8004ef4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f10:	2100      	movs	r1, #0
 8004f12:	9100      	str	r1, [sp, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	4632      	mov	r2, r6
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f7ff ff55 	bl	8004dc8 <xTimerGenericCommand>
			configASSERT( xResult );
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d1e8      	bne.n	8004ef4 <prvProcessExpiredTimer+0x1c>
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	e7fe      	b.n	8004f32 <prvProcessExpiredTimer+0x5a>
 8004f34:	20000f30 	.word	0x20000f30

08004f38 <prvProcessTimerOrBlockTask>:
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8004f40:	f7ff fbf6 	bl	8004730 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f44:	a801      	add	r0, sp, #4
 8004f46:	f7ff ffb1 	bl	8004eac <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8004f4a:	9b01      	ldr	r3, [sp, #4]
 8004f4c:	bb23      	cbnz	r3, 8004f98 <prvProcessTimerOrBlockTask+0x60>
 8004f4e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f50:	b944      	cbnz	r4, 8004f64 <prvProcessTimerOrBlockTask+0x2c>
 8004f52:	42b0      	cmp	r0, r6
 8004f54:	d30c      	bcc.n	8004f70 <prvProcessTimerOrBlockTask+0x38>
				( void ) xTaskResumeAll();
 8004f56:	f7ff fc85 	bl	8004864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f5a:	4629      	mov	r1, r5
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7ff ffbb 	bl	8004ed8 <prvProcessExpiredTimer>
 8004f62:	e01b      	b.n	8004f9c <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f64:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <prvProcessTimerOrBlockTask+0x68>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	fab4 f484 	clz	r4, r4
 8004f6e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f70:	4622      	mov	r2, r4
 8004f72:	1b71      	subs	r1, r6, r5
 8004f74:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <prvProcessTimerOrBlockTask+0x6c>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	f7ff f978 	bl	800426c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f7c:	f7ff fc72 	bl	8004864 <xTaskResumeAll>
 8004f80:	b960      	cbnz	r0, 8004f9c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 8004f82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	e001      	b.n	8004f9c <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
 8004f98:	f7ff fc64 	bl	8004864 <xTaskResumeAll>
}
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	20000f2c 	.word	0x20000f2c
 8004fa4:	20000f28 	.word	0x20000f28

08004fa8 <prvProcessReceivedCommands>:
{
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fac:	e002      	b.n	8004fb4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da0f      	bge.n	8004fd4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	a904      	add	r1, sp, #16
 8004fb8:	4b38      	ldr	r3, [pc, #224]	@ (800509c <prvProcessReceivedCommands+0xf4>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	f7ff f892 	bl	80040e4 <xQueueReceive>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d069      	beq.n	8005098 <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	daf1      	bge.n	8004fae <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fca:	9907      	ldr	r1, [sp, #28]
 8004fcc:	9806      	ldr	r0, [sp, #24]
 8004fce:	9b05      	ldr	r3, [sp, #20]
 8004fd0:	4798      	blx	r3
 8004fd2:	e7ec      	b.n	8004fae <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fd4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fd6:	6963      	ldr	r3, [r4, #20]
 8004fd8:	b113      	cbz	r3, 8004fe0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fda:	1d20      	adds	r0, r4, #4
 8004fdc:	f7fe fde2 	bl	8003ba4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fe0:	a803      	add	r0, sp, #12
 8004fe2:	f7ff ff63 	bl	8004eac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8004fe6:	9b04      	ldr	r3, [sp, #16]
 8004fe8:	2b09      	cmp	r3, #9
 8004fea:	d8e3      	bhi.n	8004fb4 <prvProcessReceivedCommands+0xc>
 8004fec:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff4 <prvProcessReceivedCommands+0x4c>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	0800501d 	.word	0x0800501d
 8005000:	08004fb5 	.word	0x08004fb5
 8005004:	08005063 	.word	0x08005063
 8005008:	08005089 	.word	0x08005089
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800501d 	.word	0x0800501d
 8005014:	08004fb5 	.word	0x08004fb5
 8005018:	08005063 	.word	0x08005063
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800501c:	9b05      	ldr	r3, [sp, #20]
 800501e:	69a1      	ldr	r1, [r4, #24]
 8005020:	4602      	mov	r2, r0
 8005022:	4419      	add	r1, r3
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff fe41 	bl	8004cac <prvInsertTimerInActiveList>
 800502a:	2800      	cmp	r0, #0
 800502c:	d0c2      	beq.n	8004fb4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800502e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005030:	4620      	mov	r0, r4
 8005032:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005034:	69e3      	ldr	r3, [r4, #28]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d1bc      	bne.n	8004fb4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800503a:	69a2      	ldr	r2, [r4, #24]
 800503c:	2100      	movs	r1, #0
 800503e:	9100      	str	r1, [sp, #0]
 8005040:	460b      	mov	r3, r1
 8005042:	9805      	ldr	r0, [sp, #20]
 8005044:	4402      	add	r2, r0
 8005046:	4620      	mov	r0, r4
 8005048:	f7ff febe 	bl	8004dc8 <xTimerGenericCommand>
							configASSERT( xResult );
 800504c:	2800      	cmp	r0, #0
 800504e:	d1b1      	bne.n	8004fb4 <prvProcessReceivedCommands+0xc>
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	e7fe      	b.n	8005060 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005062:	9905      	ldr	r1, [sp, #20]
 8005064:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005066:	b131      	cbz	r1, 8005076 <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005068:	4603      	mov	r3, r0
 800506a:	4602      	mov	r2, r0
 800506c:	4401      	add	r1, r0
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff fe1c 	bl	8004cac <prvInsertTimerInActiveList>
					break;
 8005074:	e79e      	b.n	8004fb4 <prvProcessReceivedCommands+0xc>
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005086:	e7fe      	b.n	8005086 <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005088:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d191      	bne.n	8004fb4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8005090:	4620      	mov	r0, r4
 8005092:	f000 fa5f 	bl	8005554 <vPortFree>
 8005096:	e78d      	b.n	8004fb4 <prvProcessReceivedCommands+0xc>
}
 8005098:	b008      	add	sp, #32
 800509a:	bd10      	pop	{r4, pc}
 800509c:	20000f28 	.word	0x20000f28

080050a0 <prvTimerTask>:
{
 80050a0:	b500      	push	{lr}
 80050a2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050a4:	a801      	add	r0, sp, #4
 80050a6:	f7ff fdf1 	bl	8004c8c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050aa:	9901      	ldr	r1, [sp, #4]
 80050ac:	f7ff ff44 	bl	8004f38 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80050b0:	f7ff ff7a 	bl	8004fa8 <prvProcessReceivedCommands>
	for( ;; )
 80050b4:	e7f6      	b.n	80050a4 <prvTimerTask+0x4>
	...

080050b8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050b8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050be:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <prvTaskExitError+0x3c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050c6:	d008      	beq.n	80050da <prvTaskExitError+0x22>
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	e7fe      	b.n	80050d8 <prvTaskExitError+0x20>
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050ea:	9b01      	ldr	r3, [sp, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0fc      	beq.n	80050ea <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050f0:	b002      	add	sp, #8
 80050f2:	4770      	bx	lr
 80050f4:	20000094 	.word	0x20000094

080050f8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80050f8:	4806      	ldr	r0, [pc, #24]	@ (8005114 <prvPortStartFirstTask+0x1c>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	b662      	cpsie	i
 8005104:	b661      	cpsie	f
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	df00      	svc	0
 8005110:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005112:	0000      	.short	0x0000
 8005114:	e000ed08 	.word	0xe000ed08

08005118 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800511c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005120:	f021 0101 	bic.w	r1, r1, #1
 8005124:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <pxPortInitialiseStack+0x20>)
 800512a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800512e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005132:	3840      	subs	r0, #64	@ 0x40
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	080050b9 	.word	0x080050b9
 800513c:	00000000 	.word	0x00000000

08005140 <SVC_Handler>:
	__asm volatile (
 8005140:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <pxCurrentTCBConst2>)
 8005142:	6819      	ldr	r1, [r3, #0]
 8005144:	6808      	ldr	r0, [r1, #0]
 8005146:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800514a:	f380 8809 	msr	PSP, r0
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8811 	msr	BASEPRI, r0
 800515a:	f04e 0e0d 	orr.w	lr, lr, #13
 800515e:	4770      	bx	lr

08005160 <pxCurrentTCBConst2>:
 8005160:	20000e2c 	.word	0x20000e2c

08005164 <vPortEnterCritical>:
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005174:	4a0b      	ldr	r2, [pc, #44]	@ (80051a4 <vPortEnterCritical+0x40>)
 8005176:	6813      	ldr	r3, [r2, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800517c:	2b01      	cmp	r3, #1
 800517e:	d000      	beq.n	8005182 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8005180:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005182:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005186:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800518a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800518e:	d0f7      	beq.n	8005180 <vPortEnterCritical+0x1c>
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	e7fe      	b.n	80051a0 <vPortEnterCritical+0x3c>
 80051a2:	bf00      	nop
 80051a4:	20000094 	.word	0x20000094

080051a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <vPortExitCritical+0x28>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b943      	cbnz	r3, 80051c0 <vPortExitCritical+0x18>
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	e7fe      	b.n	80051be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80051c0:	3b01      	subs	r3, #1
 80051c2:	4a03      	ldr	r2, [pc, #12]	@ (80051d0 <vPortExitCritical+0x28>)
 80051c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051c6:	b90b      	cbnz	r3, 80051cc <vPortExitCritical+0x24>
	__asm volatile
 80051c8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000094 	.word	0x20000094
	...

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f0:	6010      	str	r0, [r2, #0]
 80051f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051fa:	f380 8811 	msr	BASEPRI, r0
 80051fe:	f7ff fbd3 	bl	80049a8 <vTaskSwitchContext>
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005216:	f380 8809 	msr	PSP, r0
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	4770      	bx	lr

08005220 <pxCurrentTCBConst>:
 8005220:	20000e2c 	.word	0x20000e2c

08005224 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005224:	b508      	push	{r3, lr}
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005236:	f7ff fa89 	bl	800474c <xTaskIncrementTick>
 800523a:	b128      	cbz	r0, 8005248 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800523c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005244:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8005248:	2300      	movs	r3, #0
 800524a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800524e:	bd08      	pop	{r3, pc}

08005250 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8005254:	2300      	movs	r3, #0
 8005256:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005258:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <vPortSetupTimerInterrupt+0x20>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4905      	ldr	r1, [pc, #20]	@ (8005274 <vPortSetupTimerInterrupt+0x24>)
 8005260:	fba1 1303 	umull	r1, r3, r1, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	3b01      	subs	r3, #1
 8005268:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526a:	2307      	movs	r3, #7
 800526c:	6113      	str	r3, [r2, #16]
}
 800526e:	4770      	bx	lr
 8005270:	20000088 	.word	0x20000088
 8005274:	10624dd3 	.word	0x10624dd3

08005278 <xPortStartScheduler>:
{
 8005278:	b510      	push	{r4, lr}
 800527a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527c:	4b2a      	ldr	r3, [pc, #168]	@ (8005328 <xPortStartScheduler+0xb0>)
 800527e:	781a      	ldrb	r2, [r3, #0]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005284:	22ff      	movs	r2, #255	@ 0xff
 8005286:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005290:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005294:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005298:	4a24      	ldr	r2, [pc, #144]	@ (800532c <xPortStartScheduler+0xb4>)
 800529a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800529c:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <xPortStartScheduler+0xb8>)
 800529e:	2207      	movs	r2, #7
 80052a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a2:	e009      	b.n	80052b8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80052a4:	4a22      	ldr	r2, [pc, #136]	@ (8005330 <xPortStartScheduler+0xb8>)
 80052a6:	6813      	ldr	r3, [r2, #0]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052c0:	d1f0      	bne.n	80052a4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <xPortStartScheduler+0xb8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d008      	beq.n	80052dc <xPortStartScheduler+0x64>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	e7fe      	b.n	80052da <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	4a14      	ldr	r2, [pc, #80]	@ (8005330 <xPortStartScheduler+0xb8>)
 80052e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052e8:	9b01      	ldr	r3, [sp, #4]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005328 <xPortStartScheduler+0xb0>)
 80052ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80052f4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80052f8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80052fc:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005300:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8005304:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8005308:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800530c:	f7ff ffa0 	bl	8005250 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005310:	2400      	movs	r4, #0
 8005312:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <xPortStartScheduler+0xbc>)
 8005314:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8005316:	f7ff feef 	bl	80050f8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800531a:	f7ff fb45 	bl	80049a8 <vTaskSwitchContext>
	prvTaskExitError();
 800531e:	f7ff fecb 	bl	80050b8 <prvTaskExitError>
}
 8005322:	4620      	mov	r0, r4
 8005324:	b002      	add	sp, #8
 8005326:	bd10      	pop	{r4, pc}
 8005328:	e000e400 	.word	0xe000e400
 800532c:	20000f60 	.word	0x20000f60
 8005330:	20000f5c 	.word	0x20000f5c
 8005334:	20000094 	.word	0x20000094

08005338 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005338:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800533c:	2b0f      	cmp	r3, #15
 800533e:	d90f      	bls.n	8005360 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005340:	4a11      	ldr	r2, [pc, #68]	@ (8005388 <vPortValidateInterruptPriority+0x50>)
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005346:	4a11      	ldr	r2, [pc, #68]	@ (800538c <vPortValidateInterruptPriority+0x54>)
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d908      	bls.n	8005360 <vPortValidateInterruptPriority+0x28>
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	e7fe      	b.n	800535e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005360:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005364:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8005368:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800536c:	4a08      	ldr	r2, [pc, #32]	@ (8005390 <vPortValidateInterruptPriority+0x58>)
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	4293      	cmp	r3, r2
 8005372:	d908      	bls.n	8005386 <vPortValidateInterruptPriority+0x4e>
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	e7fe      	b.n	8005384 <vPortValidateInterruptPriority+0x4c>
	}
 8005386:	4770      	bx	lr
 8005388:	e000e3f0 	.word	0xe000e3f0
 800538c:	20000f60 	.word	0x20000f60
 8005390:	20000f5c 	.word	0x20000f5c

08005394 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005394:	4a13      	ldr	r2, [pc, #76]	@ (80053e4 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005396:	f012 0f07 	tst.w	r2, #7
 800539a:	d01f      	beq.n	80053dc <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800539c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800539e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053a2:	f5c1 531c 	rsb	r3, r1, #9984	@ 0x2700
 80053a6:	3310      	adds	r3, #16
 80053a8:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053aa:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ac:	480e      	ldr	r0, [pc, #56]	@ (80053e8 <prvHeapInit+0x54>)
 80053ae:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053b0:	2100      	movs	r1, #0
 80053b2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80053b6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80053bc:	480b      	ldr	r0, [pc, #44]	@ (80053ec <prvHeapInit+0x58>)
 80053be:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80053c0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053c2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053c4:	1a99      	subs	r1, r3, r2
 80053c6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053c8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ca:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <prvHeapInit+0x5c>)
 80053cc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <prvHeapInit+0x60>)
 80053d0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <prvHeapInit+0x64>)
 80053d4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053d8:	601a      	str	r2, [r3, #0]
}
 80053da:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053dc:	f242 7310 	movw	r3, #10000	@ 0x2710
 80053e0:	e7e4      	b.n	80053ac <prvHeapInit+0x18>
 80053e2:	bf00      	nop
 80053e4:	20000f7c 	.word	0x20000f7c
 80053e8:	20000f74 	.word	0x20000f74
 80053ec:	20000f70 	.word	0x20000f70
 80053f0:	20000f68 	.word	0x20000f68
 80053f4:	20000f6c 	.word	0x20000f6c
 80053f8:	20000f64 	.word	0x20000f64

080053fc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053fc:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <prvInsertBlockIntoFreeList+0x58>)
 80053fe:	461a      	mov	r2, r3
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4283      	cmp	r3, r0
 8005404:	d3fb      	bcc.n	80053fe <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005406:	6851      	ldr	r1, [r2, #4]
 8005408:	eb02 0c01 	add.w	ip, r2, r1
 800540c:	4584      	cmp	ip, r0
 800540e:	d009      	beq.n	8005424 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005410:	6841      	ldr	r1, [r0, #4]
 8005412:	eb00 0c01 	add.w	ip, r0, r1
 8005416:	4563      	cmp	r3, ip
 8005418:	d009      	beq.n	800542e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800541a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800541c:	4290      	cmp	r0, r2
 800541e:	d018      	beq.n	8005452 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005420:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005422:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005424:	6840      	ldr	r0, [r0, #4]
 8005426:	4401      	add	r1, r0
 8005428:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800542a:	4610      	mov	r0, r2
 800542c:	e7f0      	b.n	8005410 <prvInsertBlockIntoFreeList+0x14>
{
 800542e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005430:	4c09      	ldr	r4, [pc, #36]	@ (8005458 <prvInsertBlockIntoFreeList+0x5c>)
 8005432:	6824      	ldr	r4, [r4, #0]
 8005434:	42a3      	cmp	r3, r4
 8005436:	d00a      	beq.n	800544e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4419      	add	r1, r3
 800543c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005444:	4290      	cmp	r0, r2
 8005446:	d000      	beq.n	800544a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005448:	6010      	str	r0, [r2, #0]
	}
}
 800544a:	bc10      	pop	{r4}
 800544c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800544e:	6004      	str	r4, [r0, #0]
 8005450:	e7f8      	b.n	8005444 <prvInsertBlockIntoFreeList+0x48>
 8005452:	4770      	bx	lr
 8005454:	20000f74 	.word	0x20000f74
 8005458:	20000f70 	.word	0x20000f70

0800545c <pvPortMalloc>:
{
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005460:	f7ff f966 	bl	8004730 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005464:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <pvPortMalloc+0xe4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b1b3      	cbz	r3, 8005498 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800546a:	4b36      	ldr	r3, [pc, #216]	@ (8005544 <pvPortMalloc+0xe8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	421c      	tst	r4, r3
 8005470:	d14c      	bne.n	800550c <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8005472:	2c00      	cmp	r4, #0
 8005474:	d04c      	beq.n	8005510 <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8005476:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800547a:	f014 0f07 	tst.w	r4, #7
 800547e:	d002      	beq.n	8005486 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005480:	f022 0207 	bic.w	r2, r2, #7
 8005484:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005486:	2a00      	cmp	r2, #0
 8005488:	d051      	beq.n	800552e <pvPortMalloc+0xd2>
 800548a:	4b2f      	ldr	r3, [pc, #188]	@ (8005548 <pvPortMalloc+0xec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4293      	cmp	r3, r2
 8005490:	d34f      	bcc.n	8005532 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8005492:	492e      	ldr	r1, [pc, #184]	@ (800554c <pvPortMalloc+0xf0>)
 8005494:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005496:	e004      	b.n	80054a2 <pvPortMalloc+0x46>
			prvHeapInit();
 8005498:	f7ff ff7c 	bl	8005394 <prvHeapInit>
 800549c:	e7e5      	b.n	800546a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800549e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80054a0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a2:	6863      	ldr	r3, [r4, #4]
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d202      	bcs.n	80054ae <pvPortMalloc+0x52>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f7      	bne.n	800549e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 80054ae:	4b24      	ldr	r3, [pc, #144]	@ (8005540 <pvPortMalloc+0xe4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	42a3      	cmp	r3, r4
 80054b4:	d03f      	beq.n	8005536 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054b6:	680d      	ldr	r5, [r1, #0]
 80054b8:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054be:	6863      	ldr	r3, [r4, #4]
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d910      	bls.n	80054e8 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054c6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c8:	f010 0f07 	tst.w	r0, #7
 80054cc:	d008      	beq.n	80054e0 <pvPortMalloc+0x84>
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	e7fe      	b.n	80054de <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054e2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054e4:	f7ff ff8a 	bl	80053fc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054e8:	6862      	ldr	r2, [r4, #4]
 80054ea:	4917      	ldr	r1, [pc, #92]	@ (8005548 <pvPortMalloc+0xec>)
 80054ec:	680b      	ldr	r3, [r1, #0]
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054f2:	4917      	ldr	r1, [pc, #92]	@ (8005550 <pvPortMalloc+0xf4>)
 80054f4:	6809      	ldr	r1, [r1, #0]
 80054f6:	428b      	cmp	r3, r1
 80054f8:	d201      	bcs.n	80054fe <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054fa:	4915      	ldr	r1, [pc, #84]	@ (8005550 <pvPortMalloc+0xf4>)
 80054fc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054fe:	4b11      	ldr	r3, [pc, #68]	@ (8005544 <pvPortMalloc+0xe8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	e002      	b.n	8005512 <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 800550c:	2500      	movs	r5, #0
 800550e:	e000      	b.n	8005512 <pvPortMalloc+0xb6>
 8005510:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8005512:	f7ff f9a7 	bl	8004864 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005516:	f015 0f07 	tst.w	r5, #7
 800551a:	d00e      	beq.n	800553a <pvPortMalloc+0xde>
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	e7fe      	b.n	800552c <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 800552e:	2500      	movs	r5, #0
 8005530:	e7ef      	b.n	8005512 <pvPortMalloc+0xb6>
 8005532:	2500      	movs	r5, #0
 8005534:	e7ed      	b.n	8005512 <pvPortMalloc+0xb6>
 8005536:	2500      	movs	r5, #0
 8005538:	e7eb      	b.n	8005512 <pvPortMalloc+0xb6>
}
 800553a:	4628      	mov	r0, r5
 800553c:	bd38      	pop	{r3, r4, r5, pc}
 800553e:	bf00      	nop
 8005540:	20000f70 	.word	0x20000f70
 8005544:	20000f64 	.word	0x20000f64
 8005548:	20000f6c 	.word	0x20000f6c
 800554c:	20000f74 	.word	0x20000f74
 8005550:	20000f68 	.word	0x20000f68

08005554 <vPortFree>:
	if( pv != NULL )
 8005554:	b380      	cbz	r0, 80055b8 <vPortFree+0x64>
{
 8005556:	b538      	push	{r3, r4, r5, lr}
 8005558:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800555a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800555e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005562:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <vPortFree+0x68>)
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	4213      	tst	r3, r2
 8005568:	d108      	bne.n	800557c <vPortFree+0x28>
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	e7fe      	b.n	800557a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800557c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005580:	b141      	cbz	r1, 8005594 <vPortFree+0x40>
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	e7fe      	b.n	8005592 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005594:	ea23 0302 	bic.w	r3, r3, r2
 8005598:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800559c:	f7ff f8c8 	bl	8004730 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80055a4:	4a06      	ldr	r2, [pc, #24]	@ (80055c0 <vPortFree+0x6c>)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	440b      	add	r3, r1
 80055aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ac:	4628      	mov	r0, r5
 80055ae:	f7ff ff25 	bl	80053fc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80055b2:	f7ff f957 	bl	8004864 <xTaskResumeAll>
}
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000f64 	.word	0x20000f64
 80055c0:	20000f6c 	.word	0x20000f6c

080055c4 <memset>:
 80055c4:	4603      	mov	r3, r0
 80055c6:	4402      	add	r2, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	2600      	movs	r6, #0
 80055d8:	4d0c      	ldr	r5, [pc, #48]	@ (800560c <__libc_init_array+0x38>)
 80055da:	4c0d      	ldr	r4, [pc, #52]	@ (8005610 <__libc_init_array+0x3c>)
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	f000 f828 	bl	8005638 <_init>
 80055e8:	2600      	movs	r6, #0
 80055ea:	4d0a      	ldr	r5, [pc, #40]	@ (8005614 <__libc_init_array+0x40>)
 80055ec:	4c0a      	ldr	r4, [pc, #40]	@ (8005618 <__libc_init_array+0x44>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	f855 3b04 	ldr.w	r3, [r5], #4
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	08005784 	.word	0x08005784
 8005610:	08005784 	.word	0x08005784
 8005614:	08005784 	.word	0x08005784
 8005618:	08005788 	.word	0x08005788

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	4291      	cmp	r1, r2
 8005630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
