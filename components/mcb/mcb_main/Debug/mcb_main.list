
mcb_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800860c  0800860c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800860c  0800860c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fdc  200000a0  080086b4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000307c  080086b4  0002307c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a611  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd8  00000000  00000000  0003a6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3b4  00000000  00000000  00040ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019867  00000000  00000000  0005e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8223  00000000  00000000  00077b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fd36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  0011fd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a0 	.word	0x200000a0
 800020c:	00000000 	.word	0x00000000
 8000210:	080082c0 	.word	0x080082c0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a4 	.word	0x200000a4
 800022c:	080082c0 	.word	0x080082c0

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	; 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_fmul>:
 800044c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000454:	bf1e      	ittt	ne
 8000456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045a:	ea92 0f0c 	teqne	r2, ip
 800045e:	ea93 0f0c 	teqne	r3, ip
 8000462:	d06f      	beq.n	8000544 <__aeabi_fmul+0xf8>
 8000464:	441a      	add	r2, r3
 8000466:	ea80 0c01 	eor.w	ip, r0, r1
 800046a:	0240      	lsls	r0, r0, #9
 800046c:	bf18      	it	ne
 800046e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000472:	d01e      	beq.n	80004b2 <__aeabi_fmul+0x66>
 8000474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800047c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000480:	fba0 3101 	umull	r3, r1, r0, r1
 8000484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000488:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800048c:	bf3e      	ittt	cc
 800048e:	0049      	lslcc	r1, r1, #1
 8000490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000494:	005b      	lslcc	r3, r3, #1
 8000496:	ea40 0001 	orr.w	r0, r0, r1
 800049a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800049e:	2afd      	cmp	r2, #253	; 0xfd
 80004a0:	d81d      	bhi.n	80004de <__aeabi_fmul+0x92>
 80004a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004aa:	bf08      	it	eq
 80004ac:	f020 0001 	biceq.w	r0, r0, #1
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ba:	bf08      	it	eq
 80004bc:	0249      	lsleq	r1, r1, #9
 80004be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004c6:	3a7f      	subs	r2, #127	; 0x7f
 80004c8:	bfc2      	ittt	gt
 80004ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d2:	4770      	bxgt	lr
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	3a01      	subs	r2, #1
 80004de:	dc5d      	bgt.n	800059c <__aeabi_fmul+0x150>
 80004e0:	f112 0f19 	cmn.w	r2, #25
 80004e4:	bfdc      	itt	le
 80004e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ea:	4770      	bxle	lr
 80004ec:	f1c2 0200 	rsb	r2, r2, #0
 80004f0:	0041      	lsls	r1, r0, #1
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	f1c2 0220 	rsb	r2, r2, #32
 80004fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000502:	f140 0000 	adc.w	r0, r0, #0
 8000506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050a:	bf08      	it	eq
 800050c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000510:	4770      	bx	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051a:	bf02      	ittt	eq
 800051c:	0040      	lsleq	r0, r0, #1
 800051e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000522:	3a01      	subeq	r2, #1
 8000524:	d0f9      	beq.n	800051a <__aeabi_fmul+0xce>
 8000526:	ea40 000c 	orr.w	r0, r0, ip
 800052a:	f093 0f00 	teq	r3, #0
 800052e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000532:	bf02      	ittt	eq
 8000534:	0049      	lsleq	r1, r1, #1
 8000536:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053a:	3b01      	subeq	r3, #1
 800053c:	d0f9      	beq.n	8000532 <__aeabi_fmul+0xe6>
 800053e:	ea41 010c 	orr.w	r1, r1, ip
 8000542:	e78f      	b.n	8000464 <__aeabi_fmul+0x18>
 8000544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000548:	ea92 0f0c 	teq	r2, ip
 800054c:	bf18      	it	ne
 800054e:	ea93 0f0c 	teqne	r3, ip
 8000552:	d00a      	beq.n	800056a <__aeabi_fmul+0x11e>
 8000554:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000558:	bf18      	it	ne
 800055a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800055e:	d1d8      	bne.n	8000512 <__aeabi_fmul+0xc6>
 8000560:	ea80 0001 	eor.w	r0, r0, r1
 8000564:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000568:	4770      	bx	lr
 800056a:	f090 0f00 	teq	r0, #0
 800056e:	bf17      	itett	ne
 8000570:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000574:	4608      	moveq	r0, r1
 8000576:	f091 0f00 	teqne	r1, #0
 800057a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800057e:	d014      	beq.n	80005aa <__aeabi_fmul+0x15e>
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d101      	bne.n	800058a <__aeabi_fmul+0x13e>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	d10f      	bne.n	80005aa <__aeabi_fmul+0x15e>
 800058a:	ea93 0f0c 	teq	r3, ip
 800058e:	d103      	bne.n	8000598 <__aeabi_fmul+0x14c>
 8000590:	024b      	lsls	r3, r1, #9
 8000592:	bf18      	it	ne
 8000594:	4608      	movne	r0, r1
 8000596:	d108      	bne.n	80005aa <__aeabi_fmul+0x15e>
 8000598:	ea80 0001 	eor.w	r0, r0, r1
 800059c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a8:	4770      	bx	lr
 80005aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_fdiv>:
 80005b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005bc:	bf1e      	ittt	ne
 80005be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c2:	ea92 0f0c 	teqne	r2, ip
 80005c6:	ea93 0f0c 	teqne	r3, ip
 80005ca:	d069      	beq.n	80006a0 <__aeabi_fdiv+0xec>
 80005cc:	eba2 0203 	sub.w	r2, r2, r3
 80005d0:	ea80 0c01 	eor.w	ip, r0, r1
 80005d4:	0249      	lsls	r1, r1, #9
 80005d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005da:	d037      	beq.n	800064c <__aeabi_fdiv+0x98>
 80005dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005ec:	428b      	cmp	r3, r1
 80005ee:	bf38      	it	cc
 80005f0:	005b      	lslcc	r3, r3, #1
 80005f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fa:	428b      	cmp	r3, r1
 80005fc:	bf24      	itt	cs
 80005fe:	1a5b      	subcs	r3, r3, r1
 8000600:	ea40 000c 	orrcs.w	r0, r0, ip
 8000604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000608:	bf24      	itt	cs
 800060a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800060e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000616:	bf24      	itt	cs
 8000618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800061c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000624:	bf24      	itt	cs
 8000626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	bf18      	it	ne
 8000632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000636:	d1e0      	bne.n	80005fa <__aeabi_fdiv+0x46>
 8000638:	2afd      	cmp	r2, #253	; 0xfd
 800063a:	f63f af50 	bhi.w	80004de <__aeabi_fmul+0x92>
 800063e:	428b      	cmp	r3, r1
 8000640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000644:	bf08      	it	eq
 8000646:	f020 0001 	biceq.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000654:	327f      	adds	r2, #127	; 0x7f
 8000656:	bfc2      	ittt	gt
 8000658:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800065c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000660:	4770      	bxgt	lr
 8000662:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	3a01      	subs	r2, #1
 800066c:	e737      	b.n	80004de <__aeabi_fmul+0x92>
 800066e:	f092 0f00 	teq	r2, #0
 8000672:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0040      	lsleq	r0, r0, #1
 800067a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800067e:	3a01      	subeq	r2, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fdiv+0xc2>
 8000682:	ea40 000c 	orr.w	r0, r0, ip
 8000686:	f093 0f00 	teq	r3, #0
 800068a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800068e:	bf02      	ittt	eq
 8000690:	0049      	lsleq	r1, r1, #1
 8000692:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000696:	3b01      	subeq	r3, #1
 8000698:	d0f9      	beq.n	800068e <__aeabi_fdiv+0xda>
 800069a:	ea41 010c 	orr.w	r1, r1, ip
 800069e:	e795      	b.n	80005cc <__aeabi_fdiv+0x18>
 80006a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a4:	ea92 0f0c 	teq	r2, ip
 80006a8:	d108      	bne.n	80006bc <__aeabi_fdiv+0x108>
 80006aa:	0242      	lsls	r2, r0, #9
 80006ac:	f47f af7d 	bne.w	80005aa <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	f47f af70 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e776      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006bc:	ea93 0f0c 	teq	r3, ip
 80006c0:	d104      	bne.n	80006cc <__aeabi_fdiv+0x118>
 80006c2:	024b      	lsls	r3, r1, #9
 80006c4:	f43f af4c 	beq.w	8000560 <__aeabi_fmul+0x114>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e76e      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d0:	bf18      	it	ne
 80006d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006d6:	d1ca      	bne.n	800066e <__aeabi_fdiv+0xba>
 80006d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006dc:	f47f af5c 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e4:	f47f af3c 	bne.w	8000560 <__aeabi_fmul+0x114>
 80006e8:	e75f      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006ea:	bf00      	nop

080006ec <__gesf2>:
 80006ec:	f04f 3cff 	mov.w	ip, #4294967295
 80006f0:	e006      	b.n	8000700 <__cmpsf2+0x4>
 80006f2:	bf00      	nop

080006f4 <__lesf2>:
 80006f4:	f04f 0c01 	mov.w	ip, #1
 80006f8:	e002      	b.n	8000700 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__cmpsf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d011      	beq.n	800073c <__cmpsf2+0x40>
 8000718:	b001      	add	sp, #4
 800071a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800071e:	bf18      	it	ne
 8000720:	ea90 0f01 	teqne	r0, r1
 8000724:	bf58      	it	pl
 8000726:	ebb2 0003 	subspl.w	r0, r2, r3
 800072a:	bf88      	it	hi
 800072c:	17c8      	asrhi	r0, r1, #31
 800072e:	bf38      	it	cc
 8000730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000734:	bf18      	it	ne
 8000736:	f040 0001 	orrne.w	r0, r0, #1
 800073a:	4770      	bx	lr
 800073c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000740:	d102      	bne.n	8000748 <__cmpsf2+0x4c>
 8000742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000746:	d105      	bne.n	8000754 <__cmpsf2+0x58>
 8000748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800074c:	d1e4      	bne.n	8000718 <__cmpsf2+0x1c>
 800074e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000752:	d0e1      	beq.n	8000718 <__cmpsf2+0x1c>
 8000754:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <__aeabi_cfrcmple>:
 800075c:	4684      	mov	ip, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4661      	mov	r1, ip
 8000762:	e7ff      	b.n	8000764 <__aeabi_cfcmpeq>

08000764 <__aeabi_cfcmpeq>:
 8000764:	b50f      	push	{r0, r1, r2, r3, lr}
 8000766:	f7ff ffc9 	bl	80006fc <__cmpsf2>
 800076a:	2800      	cmp	r0, #0
 800076c:	bf48      	it	mi
 800076e:	f110 0f00 	cmnmi.w	r0, #0
 8000772:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000774 <__aeabi_fcmpeq>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff fff4 	bl	8000764 <__aeabi_cfcmpeq>
 800077c:	bf0c      	ite	eq
 800077e:	2001      	moveq	r0, #1
 8000780:	2000      	movne	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_fcmplt>:
 8000788:	f84d ed08 	str.w	lr, [sp, #-8]!
 800078c:	f7ff ffea 	bl	8000764 <__aeabi_cfcmpeq>
 8000790:	bf34      	ite	cc
 8000792:	2001      	movcc	r0, #1
 8000794:	2000      	movcs	r0, #0
 8000796:	f85d fb08 	ldr.w	pc, [sp], #8
 800079a:	bf00      	nop

0800079c <__aeabi_fcmple>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff ffe0 	bl	8000764 <__aeabi_cfcmpeq>
 80007a4:	bf94      	ite	ls
 80007a6:	2001      	movls	r0, #1
 80007a8:	2000      	movhi	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmpge>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffd2 	bl	800075c <__aeabi_cfrcmple>
 80007b8:	bf94      	ite	ls
 80007ba:	2001      	movls	r0, #1
 80007bc:	2000      	movhi	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmpgt>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffc8 	bl	800075c <__aeabi_cfrcmple>
 80007cc:	bf34      	ite	cc
 80007ce:	2001      	movcc	r0, #1
 80007d0:	2000      	movcs	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_ADC1_Init+0x74>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <MX_ADC1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ADC1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ADC1_Init+0x74>)
 8000802:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_ADC1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_ADC1_Init+0x74>)
 8000816:	f001 f931 	bl	8001a7c <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fe47 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000824:	230e      	movs	r3, #14
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0x74>)
 8000836:	f001 fbcb 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000840:	f000 fe37 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000bc 	.word	0x200000bc
 8000850:	40012400 	.word	0x40012400

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <HAL_ADC_MspInit+0x98>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d137      	bne.n	80008e4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4619      	mov	r1, r3
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <HAL_ADC_MspInit+0xa0>)
 80008cc:	f002 f944 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_ADC_MspInit+0xa4>)
 80008e0:	f002 f93a 	bl	8002b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40012400 	.word	0x40012400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40011000 	.word	0x40011000

080008fc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_CAN_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_CAN_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_CAN_Init+0x64>)
 8000908:	2208      	movs	r2, #8
 800090a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_CAN_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_CAN_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_CAN_Init+0x64>)
 800091a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800091e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_CAN_Init+0x64>)
 8000922:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000926:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_CAN_Init+0x64>)
 800092a:	2201      	movs	r2, #1
 800092c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_CAN_Init+0x64>)
 8000930:	2201      	movs	r2, #1
 8000932:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_CAN_Init+0x64>)
 8000936:	2201      	movs	r2, #1
 8000938:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_CAN_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_CAN_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CAN_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_CAN_Init+0x64>)
 800094e:	f001 fcd2 	bl	80022f6 <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fdab 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000010c 	.word	0x2000010c
 8000964:	40006400 	.word	0x40006400

08000968 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <HAL_CAN_MspInit+0xb0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d143      	bne.n	8000a10 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <HAL_CAN_MspInit+0xb8>)
 80009ce:	f002 f8c3 	bl	8002b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <HAL_CAN_MspInit+0xb8>)
 80009e8:	f002 f8b6 	bl	8002b58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_CAN_MspInit+0xbc>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_CAN_MspInit+0xbc>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40006400 	.word	0x40006400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40010000 	.word	0x40010000

08000a28 <EncoderInit>:
#include "stm32f1xx_hal.h"

/**
 * Initializes the encoder for the accelerator pedal.
 */
void EncoderInit(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

    // the APB2ENR enables clocks for the peripherals

    //Initialize AFIO Clock
    RCC->APB2ENR |= 0x1;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <EncoderInit+0xcc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <EncoderInit+0xcc>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6193      	str	r3, [r2, #24]

    //TIM 1 Enable
    RCC->APB2ENR |= 0x1 << 11;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <EncoderInit+0xcc>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <EncoderInit+0xcc>)
 8000a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a42:	6193      	str	r3, [r2, #24]

    //Initialize GPIOA Clock
    RCC->APB2ENR |= 0x1 << 2;
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <EncoderInit+0xcc>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <EncoderInit+0xcc>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= 0;
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <EncoderInit+0xd0>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <EncoderInit+0xd0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]

    // configures PA8 as floating input
    // also configures PA9 as floating input
    GPIOA->CRH |= 0x00000044;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <EncoderInit+0xd0>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <EncoderInit+0xd0>)
 8000a60:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000a64:	6053      	str	r3, [r2, #4]

    //TIM 1 No Remap
    AFIO->MAPR &= ~(0x11 << 6);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <EncoderInit+0xd4>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4a24      	ldr	r2, [pc, #144]	; (8000afc <EncoderInit+0xd4>)
 8000a6c:	f423 6388 	bic.w	r3, r3, #1088	; 0x440
 8000a70:	6053      	str	r3, [r2, #4]

    TIM1->CCMR1 |= 0x01;    //Map Channel 1 to TI1
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <EncoderInit+0xd8>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <EncoderInit+0xd8>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0x01 << 8; //Map Channel 2 to TI2
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <EncoderInit+0xd8>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <EncoderInit+0xd8>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6193      	str	r3, [r2, #24]

    TIM1->CCER &= ~(0x1 << 1);
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <EncoderInit+0xd8>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <EncoderInit+0xd8>)
 8000a90:	f023 0302 	bic.w	r3, r3, #2
 8000a94:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 3);
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <EncoderInit+0xd8>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <EncoderInit+0xd8>)
 8000a9c:	f023 0308 	bic.w	r3, r3, #8
 8000aa0:	6213      	str	r3, [r2, #32]

    TIM1->CCER &= ~(0x1 << 5);
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <EncoderInit+0xd8>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <EncoderInit+0xd8>)
 8000aa8:	f023 0320 	bic.w	r3, r3, #32
 8000aac:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 7);
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <EncoderInit+0xd8>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <EncoderInit+0xd8>)
 8000ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ab8:	6213      	str	r3, [r2, #32]

    TIM1->CCER |= 0x1;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <EncoderInit+0xd8>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <EncoderInit+0xd8>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= 0x1 << 4;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <EncoderInit+0xd8>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <EncoderInit+0xd8>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6213      	str	r3, [r2, #32]

    TIM1->SMCR |= 0x011;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <EncoderInit+0xd8>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <EncoderInit+0xd8>)
 8000ad8:	f043 0311 	orr.w	r3, r3, #17
 8000adc:	6093      	str	r3, [r2, #8]

    TIM1->CR1 |= 0x1;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <EncoderInit+0xd8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <EncoderInit+0xd8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6013      	str	r3, [r2, #0]

}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40012c00 	.word	0x40012c00

08000b04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

    encoderQueueHandle = osMessageQueueNew(ENCODER_QUEUE_MSG_CNT, ENCODER_QUEUE_MSG_SIZE, &encoderQueue_attributes);
 8000b08:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <MX_FREERTOS_Init+0xe4>)
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f003 feb5 	bl	800487c <osMessageQueueNew>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a35      	ldr	r2, [pc, #212]	; (8000bec <MX_FREERTOS_Init+0xe8>)
 8000b16:	6013      	str	r3, [r2, #0]

    readEncoderTaskHandle = osThreadNew(readEncoderTask, NULL, &readEncoderTask_attributes);
 8000b18:	4a35      	ldr	r2, [pc, #212]	; (8000bf0 <MX_FREERTOS_Init+0xec>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <MX_FREERTOS_Init+0xf0>)
 8000b1e:	f003 fb29 	bl	8004174 <osThreadNew>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a34      	ldr	r2, [pc, #208]	; (8000bf8 <MX_FREERTOS_Init+0xf4>)
 8000b26:	6013      	str	r3, [r2, #0]
    updateEventFlagsTaskHandle = osThreadNew(updateEventFlagsTask, NULL, &updateEventFlagsTask_attributes);
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <MX_FREERTOS_Init+0xf8>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_FREERTOS_Init+0xfc>)
 8000b2e:	f003 fb21 	bl	8004174 <osThreadNew>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <MX_FREERTOS_Init+0x100>)
 8000b36:	6013      	str	r3, [r2, #0]

    sendMotorCommandTaskHandle = osThreadNew(sendMotorCommandTask, NULL, &sendMotorCommandTask_attributes);
 8000b38:	4a33      	ldr	r2, [pc, #204]	; (8000c08 <MX_FREERTOS_Init+0x104>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_FREERTOS_Init+0x108>)
 8000b3e:	f003 fb19 	bl	8004174 <osThreadNew>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <MX_FREERTOS_Init+0x10c>)
 8000b46:	6013      	str	r3, [r2, #0]
    sendRegenCommandTaskHandle = osThreadNew(sendRegenCommandTask, NULL, &sendRegenCommandTask_attributes);
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <MX_FREERTOS_Init+0x110>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4832      	ldr	r0, [pc, #200]	; (8000c18 <MX_FREERTOS_Init+0x114>)
 8000b4e:	f003 fb11 	bl	8004174 <osThreadNew>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <MX_FREERTOS_Init+0x118>)
 8000b56:	6013      	str	r3, [r2, #0]
    sendCruiseCommandTaskHandle = osThreadNew(sendCruiseCommandTask, NULL, &sendCruiseCommandTask_attributes);
 8000b58:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <MX_FREERTOS_Init+0x11c>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4831      	ldr	r0, [pc, #196]	; (8000c24 <MX_FREERTOS_Init+0x120>)
 8000b5e:	f003 fb09 	bl	8004174 <osThreadNew>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_FREERTOS_Init+0x124>)
 8000b66:	6013      	str	r3, [r2, #0]
    sendIdleCommandTaskHandle = osThreadNew(sendIdleCommandTask, NULL, &sendIdleCommandTask_attributes);
 8000b68:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <MX_FREERTOS_Init+0x128>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4830      	ldr	r0, [pc, #192]	; (8000c30 <MX_FREERTOS_Init+0x12c>)
 8000b6e:	f003 fb01 	bl	8004174 <osThreadNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_FREERTOS_Init+0x130>)
 8000b76:	6013      	str	r3, [r2, #0]

    sendNextScreenMessageTaskHandle = osThreadNew(sendNextScreenMessageTask, NULL, &sendNextScreenTask_attributes);
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <MX_FREERTOS_Init+0x134>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	482f      	ldr	r0, [pc, #188]	; (8000c3c <MX_FREERTOS_Init+0x138>)
 8000b7e:	f003 faf9 	bl	8004174 <osThreadNew>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <MX_FREERTOS_Init+0x13c>)
 8000b86:	6013      	str	r3, [r2, #0]

    receiveBatteryMessageTaskHandle = osThreadNew(receiveBatteryMessageTask, NULL, &receiveBatteryMessageTask_attributes);
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <MX_FREERTOS_Init+0x140>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	482e      	ldr	r0, [pc, #184]	; (8000c48 <MX_FREERTOS_Init+0x144>)
 8000b8e:	f003 faf1 	bl	8004174 <osThreadNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <MX_FREERTOS_Init+0x148>)
 8000b96:	6013      	str	r3, [r2, #0]

	sendMotorOverheatTaskHandle = osThreadNew(sendMotorOverheatTask, NULL, &sendMotorOverheatTask_attributes);
 8000b98:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <MX_FREERTOS_Init+0x14c>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	482d      	ldr	r0, [pc, #180]	; (8000c54 <MX_FREERTOS_Init+0x150>)
 8000b9e:	f003 fae9 	bl	8004174 <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <MX_FREERTOS_Init+0x154>)
 8000ba6:	6013      	str	r3, [r2, #0]

	commandEventFlagsHandle = osEventFlagsNew(NULL);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f003 fbed 	bl	8004388 <osEventFlagsNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <MX_FREERTOS_Init+0x158>)
 8000bb2:	6013      	str	r3, [r2, #0]

    nextScreenSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f003 fd05 	bl	80045c8 <osSemaphoreNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_FREERTOS_Init+0x15c>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <MX_FREERTOS_Init+0x160>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_FREERTOS_Init+0x164>)
 8000bca:	f003 fad3 	bl	8004174 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <MX_FREERTOS_Init+0x168>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of checkThrottleAD */
  checkThrottleADHandle = osThreadNew(StartCheckThrottleADC, NULL, &checkThrottleAD_attributes);
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <MX_FREERTOS_Init+0x16c>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_FREERTOS_Init+0x170>)
 8000bda:	f003 facb 	bl	8004174 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <MX_FREERTOS_Init+0x174>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08008534 	.word	0x08008534
 8000bec:	20000158 	.word	0x20000158
 8000bf0:	080083f0 	.word	0x080083f0
 8000bf4:	08000d59 	.word	0x08000d59
 8000bf8:	20000134 	.word	0x20000134
 8000bfc:	080084c8 	.word	0x080084c8
 8000c00:	080010b1 	.word	0x080010b1
 8000c04:	20000138 	.word	0x20000138
 8000c08:	08008414 	.word	0x08008414
 8000c0c:	08000dc9 	.word	0x08000dc9
 8000c10:	2000013c 	.word	0x2000013c
 8000c14:	08008438 	.word	0x08008438
 8000c18:	08000ea9 	.word	0x08000ea9
 8000c1c:	20000140 	.word	0x20000140
 8000c20:	0800845c 	.word	0x0800845c
 8000c24:	08000f51 	.word	0x08000f51
 8000c28:	20000144 	.word	0x20000144
 8000c2c:	080084a4 	.word	0x080084a4
 8000c30:	08000fe9 	.word	0x08000fe9
 8000c34:	20000148 	.word	0x20000148
 8000c38:	08008480 	.word	0x08008480
 8000c3c:	08001075 	.word	0x08001075
 8000c40:	2000014c 	.word	0x2000014c
 8000c44:	080084ec 	.word	0x080084ec
 8000c48:	08001165 	.word	0x08001165
 8000c4c:	20000150 	.word	0x20000150
 8000c50:	08008510 	.word	0x08008510
 8000c54:	080011c1 	.word	0x080011c1
 8000c58:	20000154 	.word	0x20000154
 8000c5c:	2000015c 	.word	0x2000015c
 8000c60:	20000160 	.word	0x20000160
 8000c64:	0800854c 	.word	0x0800854c
 8000c68:	08000c7d 	.word	0x08000c7d
 8000c6c:	20000168 	.word	0x20000168
 8000c70:	08008570 	.word	0x08008570
 8000c74:	08000c8d 	.word	0x08000c8d
 8000c78:	2000016c 	.word	0x2000016c

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f003 fb51 	bl	800432c <osDelay>
 8000c8a:	e7fb      	b.n	8000c84 <StartDefaultTask+0x8>

08000c8c <StartCheckThrottleADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckThrottleADC */
void StartCheckThrottleADC(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint8_t data_send[CAN_DATA_LENGTH];
  /* Infinite loop */
  for(;;)
  {
	//Gets ADC
    HAL_ADC_Start(&hadc1);
 8000c94:	4827      	ldr	r0, [pc, #156]	; (8000d34 <StartCheckThrottleADC+0xa8>)
 8000c96:	f000 ffdb 	bl	8001c50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9e:	4825      	ldr	r0, [pc, #148]	; (8000d34 <StartCheckThrottleADC+0xa8>)
 8000ca0:	f001 f884 	bl	8001dac <HAL_ADC_PollForConversion>
  	ADCRaw = HAL_ADC_GetValue(&hadc1);
 8000ca4:	4823      	ldr	r0, [pc, #140]	; (8000d34 <StartCheckThrottleADC+0xa8>)
 8000ca6:	f001 f987 	bl	8001fb8 <HAL_ADC_GetValue>
 8000caa:	4603      	mov	r3, r0
 8000cac:	827b      	strh	r3, [r7, #18]

  	//Checks for reverse
	if (event_flags.reverse_enable)
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <StartCheckThrottleADC+0xac>)
 8000cb0:	785b      	ldrb	r3, [r3, #1]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <StartCheckThrottleADC+0x34>
	  velocity.float_value = -100.0;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <StartCheckThrottleADC+0xb0>)
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <StartCheckThrottleADC+0xb4>)
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e002      	b.n	8000cc6 <StartCheckThrottleADC+0x3a>
	else
	  velocity.float_value = 100.0;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <StartCheckThrottleADC+0xb0>)
 8000cc2:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <StartCheckThrottleADC+0xb8>)
 8000cc4:	601a      	str	r2, [r3, #0]


	//Sets current float values, includes deadzone
	current.float_value = (ADCRaw - THROTTLE_DEADZONE >= 0 ? (float)(ADCRaw - THROTTLE_DEADZONE) : 0.0);
 8000cc6:	8a7b      	ldrh	r3, [r7, #18]
 8000cc8:	2bf9      	cmp	r3, #249	; 0xf9
 8000cca:	d906      	bls.n	8000cda <StartCheckThrottleADC+0x4e>
 8000ccc:	8a7b      	ldrh	r3, [r7, #18]
 8000cce:	3bfa      	subs	r3, #250	; 0xfa
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fb67 	bl	80003a4 <__aeabi_i2f>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e001      	b.n	8000cde <StartCheckThrottleADC+0x52>
 8000cda:	f04f 0300 	mov.w	r3, #0
 8000cde:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <StartCheckThrottleADC+0xbc>)
 8000ce0:	6013      	str	r3, [r2, #0]

	//Writing data into data_send
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e016      	b.n	8000d16 <StartCheckThrottleADC+0x8a>
	{
	  data_send[i] = velocity.bytes[i];
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <StartCheckThrottleADC+0xb0>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	4413      	add	r3, r2
 8000cee:	7819      	ldrb	r1, [r3, #0]
 8000cf0:	f107 0208 	add.w	r2, r7, #8
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
	  data_send[i + 4] = current.bytes[i];
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	4911      	ldr	r1, [pc, #68]	; (8000d48 <StartCheckThrottleADC+0xbc>)
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	440a      	add	r2, r1
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	3318      	adds	r3, #24
 8000d0a:	443b      	add	r3, r7
 8000d0c:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	dde5      	ble.n	8000ce8 <StartCheckThrottleADC+0x5c>
	}

	//Sends CAN message to motor controller
	HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <StartCheckThrottleADC+0xc0>)
 8000d22:	490b      	ldr	r1, [pc, #44]	; (8000d50 <StartCheckThrottleADC+0xc4>)
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <StartCheckThrottleADC+0xc8>)
 8000d26:	f001 fc25 	bl	8002574 <HAL_CAN_AddTxMessage>

    osDelay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f003 fafe 	bl	800432c <osDelay>
    HAL_ADC_Start(&hadc1);
 8000d30:	e7b0      	b.n	8000c94 <StartCheckThrottleADC+0x8>
 8000d32:	bf00      	nop
 8000d34:	200000bc 	.word	0x200000bc
 8000d38:	20000180 	.word	0x20000180
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	c2c80000 	.word	0xc2c80000
 8000d44:	42c80000 	.word	0x42c80000
 8000d48:	20000174 	.word	0x20000174
 8000d4c:	20000108 	.word	0x20000108
 8000d50:	20000000 	.word	0x20000000
 8000d54:	2000010c 	.word	0x2000010c

08000d58 <readEncoderTask>:
/**
 * @brief  Reads the pedal quadrature encoder and places the read value in an RTOS queue.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void readEncoderTask(void *argument) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    static uint16_t old_encoder_reading = 0x0000;


    // TODO: replace with HAL library
    EncoderInit();
 8000d60:	f7ff fe62 	bl	8000a28 <EncoderInit>

    while (1) {
        encoder_reading = __HAL_TIM_GET_COUNTER(&htim1);
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <readEncoderTask+0x5c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <readEncoderTask+0x60>)
 8000d6e:	801a      	strh	r2, [r3, #0]

        // update the event flags struct
        event_flags.encoder_value_is_zero = (encoder_reading == 0);
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <readEncoderTask+0x60>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bf0c      	ite	eq
 8000d7a:	2301      	moveq	r3, #1
 8000d7c:	2300      	movne	r3, #0
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <readEncoderTask+0x64>)
 8000d84:	715a      	strb	r2, [r3, #5]

        if (encoder_reading != old_encoder_reading) {
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <readEncoderTask+0x60>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <readEncoderTask+0x68>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d006      	beq.n	8000da2 <readEncoderTask+0x4a>
            osMessageQueuePut(encoderQueueHandle, &encoder_reading, 0U, 0U);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <readEncoderTask+0x6c>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <readEncoderTask+0x60>)
 8000d9e:	f003 fdf3 	bl	8004988 <osMessageQueuePut>
        }

        old_encoder_reading = encoder_reading;
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <readEncoderTask+0x60>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <readEncoderTask+0x68>)
 8000daa:	801a      	strh	r2, [r3, #0]

        osDelay(ENCODER_READ_DELAY);
 8000dac:	2032      	movs	r0, #50	; 0x32
 8000dae:	f003 fabd 	bl	800432c <osDelay>
        encoder_reading = __HAL_TIM_GET_COUNTER(&htim1);
 8000db2:	e7d7      	b.n	8000d64 <readEncoderTask+0xc>
 8000db4:	200001d8 	.word	0x200001d8
 8000db8:	20000166 	.word	0x20000166
 8000dbc:	20000180 	.word	0x20000180
 8000dc0:	20000170 	.word	0x20000170
 8000dc4:	20000158 	.word	0x20000158

08000dc8 <sendMotorCommandTask>:
/**
 * @brief  Sends motor command (torque-control) CAN message once encoder value is read and the MCB state is NORMAL_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendMotorCommandTask(void *argument) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

    osStatus_t queue_status;

    while (1) {
        // blocks thread waiting for encoder value to be added to queue
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <sendMotorCommandTask+0xb4>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 010e 	add.w	r1, r7, #14
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f003 fe48 	bl	8004a70 <osMessageQueueGet>
 8000de0:	61b8      	str	r0, [r7, #24]

        if (queue_status == osOK) {
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10d      	bne.n	8000e04 <sendMotorCommandTask+0x3c>
            // motor current is linearly scaled to pedal position
            current.float_value = (float) encoder_value / (PEDAL_MAX - PEDAL_MIN);
 8000de8:	89fb      	ldrh	r3, [r7, #14]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fad6 	bl	800039c <__aeabi_ui2f>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4923      	ldr	r1, [pc, #140]	; (8000e80 <sendMotorCommandTask+0xb8>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fbdd 	bl	80005b4 <__aeabi_fdiv>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <sendMotorCommandTask+0xbc>)
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e001      	b.n	8000e08 <sendMotorCommandTask+0x40>
        } else {
            // TODO: send CAN message here that indicates the processor is failing to read the encoder
            osThreadYield();
 8000e04:	f003 fa60 	bl	80042c8 <osThreadYield>
        }

        osEventFlagsWait(commandEventFlagsHandle, NORMAL_READY, osFlagsWaitAll, osWaitForever);
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <sendMotorCommandTask+0xc0>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	2201      	movs	r2, #1
 8000e12:	2102      	movs	r1, #2
 8000e14:	f003 fb62 	bl	80044dc <osEventFlagsWait>

        // velocity is set to unattainable value for motor torque-control mode
        if (event_flags.reverse_enable) {
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <sendMotorCommandTask+0xc4>)
 8000e1a:	785b      	ldrb	r3, [r3, #1]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <sendMotorCommandTask+0x62>
            velocity.float_value = -100.0;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <sendMotorCommandTask+0xc8>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <sendMotorCommandTask+0xcc>)
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e002      	b.n	8000e30 <sendMotorCommandTask+0x68>
        } else {
            velocity.float_value = 100.0;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <sendMotorCommandTask+0xc8>)
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <sendMotorCommandTask+0xd0>)
 8000e2e:	601a      	str	r2, [r3, #0]
        }

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e016      	b.n	8000e64 <sendMotorCommandTask+0x9c>
            data_send[i] = velocity.bytes[i];
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <sendMotorCommandTask+0xc8>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	7819      	ldrb	r1, [r3, #0]
 8000e3e:	f107 0210 	add.w	r2, r7, #16
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	4413      	add	r3, r2
 8000e46:	460a      	mov	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	490d      	ldr	r1, [pc, #52]	; (8000e84 <sendMotorCommandTask+0xbc>)
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	440a      	add	r2, r1
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	3320      	adds	r3, #32
 8000e58:	443b      	add	r3, r7
 8000e5a:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	dde5      	ble.n	8000e36 <sendMotorCommandTask+0x6e>
        }

        // send CAN message to motor controller
        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000e6a:	f107 0210 	add.w	r2, r7, #16
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <sendMotorCommandTask+0xd4>)
 8000e70:	490b      	ldr	r1, [pc, #44]	; (8000ea0 <sendMotorCommandTask+0xd8>)
 8000e72:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <sendMotorCommandTask+0xdc>)
 8000e74:	f001 fb7e 	bl	8002574 <HAL_CAN_AddTxMessage>
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000e78:	e7aa      	b.n	8000dd0 <sendMotorCommandTask+0x8>
 8000e7a:	bf00      	nop
 8000e7c:	20000158 	.word	0x20000158
 8000e80:	437f0000 	.word	0x437f0000
 8000e84:	20000174 	.word	0x20000174
 8000e88:	2000015c 	.word	0x2000015c
 8000e8c:	20000180 	.word	0x20000180
 8000e90:	20000178 	.word	0x20000178
 8000e94:	c2c80000 	.word	0xc2c80000
 8000e98:	42c80000 	.word	0x42c80000
 8000e9c:	20000108 	.word	0x20000108
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	2000010c 	.word	0x2000010c

08000ea8 <sendRegenCommandTask>:
/**
 * @brief  Sends regen command (velocity control) CAN message once MCB state is REGEN_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendRegenCommandTask(void *argument) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a regen command
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <sendRegenCommandTask+0x88>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2104      	movs	r1, #4
 8000ebc:	f003 fb0e 	bl	80044dc <osEventFlagsWait>

        // velocity is set to zero for regen according to motor controller documentation
        velocity.float_value = 0.0;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <sendRegenCommandTask+0x8c>)
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        // current is linearly scaled with the regen value read from the ADC
        current.float_value = (float) regen_value / (ADC_MAX - ADC_MIN);
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <sendRegenCommandTask+0x90>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fa65 	bl	800039c <__aeabi_ui2f>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4919      	ldr	r1, [pc, #100]	; (8000f3c <sendRegenCommandTask+0x94>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fb6c 	bl	80005b4 <__aeabi_fdiv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <sendRegenCommandTask+0x98>)
 8000ee2:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e016      	b.n	8000f18 <sendRegenCommandTask+0x70>
            data_send[i] = velocity.bytes[i];
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <sendRegenCommandTask+0x8c>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	4413      	add	r3, r2
 8000ef0:	7819      	ldrb	r1, [r3, #0]
 8000ef2:	f107 020c 	add.w	r2, r7, #12
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	460a      	mov	r2, r1
 8000efc:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3304      	adds	r3, #4
 8000f02:	490f      	ldr	r1, [pc, #60]	; (8000f40 <sendRegenCommandTask+0x98>)
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	440a      	add	r2, r1
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	3318      	adds	r3, #24
 8000f0c:	443b      	add	r3, r7
 8000f0e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	dde5      	ble.n	8000eea <sendRegenCommandTask+0x42>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <sendRegenCommandTask+0x9c>)
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <sendRegenCommandTask+0xa0>)
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <sendRegenCommandTask+0xa4>)
 8000f28:	f001 fb24 	bl	8002574 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000f2c:	e7c0      	b.n	8000eb0 <sendRegenCommandTask+0x8>
 8000f2e:	bf00      	nop
 8000f30:	2000015c 	.word	0x2000015c
 8000f34:	20000178 	.word	0x20000178
 8000f38:	20000188 	.word	0x20000188
 8000f3c:	457ff000 	.word	0x457ff000
 8000f40:	20000174 	.word	0x20000174
 8000f44:	20000108 	.word	0x20000108
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	2000010c 	.word	0x2000010c

08000f50 <sendCruiseCommandTask>:
/**
 * @brief  Sends cruise-control command (velocity control) CAN message once MCB state is CRUISE_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendCruiseCommandTask (void *argument) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a cruise control command
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <sendCruiseCommandTask+0x78>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	f003 faba 	bl	80044dc <osEventFlagsWait>

        // current set to maximum for a cruise control message
        current.float_value = 100.0;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <sendCruiseCommandTask+0x7c>)
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <sendCruiseCommandTask+0x80>)
 8000f6c:	601a      	str	r2, [r3, #0]

        // set velocity to cruise value
        velocity.float_value = (float) cruise_value;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <sendCruiseCommandTask+0x84>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fa12 	bl	800039c <__aeabi_ui2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <sendCruiseCommandTask+0x88>)
 8000f7c:	6013      	str	r3, [r2, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e016      	b.n	8000fb2 <sendCruiseCommandTask+0x62>
            data_send[i] = velocity.bytes[i];
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <sendCruiseCommandTask+0x88>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	460a      	mov	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	490b      	ldr	r1, [pc, #44]	; (8000fcc <sendCruiseCommandTask+0x7c>)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	440a      	add	r2, r1
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	dde5      	ble.n	8000f84 <sendCruiseCommandTask+0x34>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <sendCruiseCommandTask+0x8c>)
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <sendCruiseCommandTask+0x90>)
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <sendCruiseCommandTask+0x94>)
 8000fc2:	f001 fad7 	bl	8002574 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000fc6:	e7c7      	b.n	8000f58 <sendCruiseCommandTask+0x8>
 8000fc8:	2000015c 	.word	0x2000015c
 8000fcc:	20000174 	.word	0x20000174
 8000fd0:	42c80000 	.word	0x42c80000
 8000fd4:	2000018c 	.word	0x2000018c
 8000fd8:	20000178 	.word	0x20000178
 8000fdc:	20000108 	.word	0x20000108
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	2000010c 	.word	0x2000010c

08000fe8 <sendIdleCommandTask>:
/**
 * @brief  Sends an idle CAN message when the MCB goes into the IDLE state.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendIdleCommandTask (void *argument) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send an idle command
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <sendIdleCommandTask+0x74>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	f003 fa6e 	bl	80044dc <osEventFlagsWait>

        // zeroed since car would not be moving in idle state
        current.float_value = 0.0;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <sendIdleCommandTask+0x78>)
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
        velocity.float_value = 0.0;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <sendIdleCommandTask+0x7c>)
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e016      	b.n	8001044 <sendIdleCommandTask+0x5c>
            data_send[i] = velocity.bytes[i];
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <sendIdleCommandTask+0x7c>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4413      	add	r3, r2
 800101c:	7819      	ldrb	r1, [r3, #0]
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	4413      	add	r3, r2
 8001026:	460a      	mov	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3304      	adds	r3, #4
 800102e:	490c      	ldr	r1, [pc, #48]	; (8001060 <sendIdleCommandTask+0x78>)
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	440a      	add	r2, r1
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	3318      	adds	r3, #24
 8001038:	443b      	add	r3, r7
 800103a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b03      	cmp	r3, #3
 8001048:	dde5      	ble.n	8001016 <sendIdleCommandTask+0x2e>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <sendIdleCommandTask+0x80>)
 8001050:	4906      	ldr	r1, [pc, #24]	; (800106c <sendIdleCommandTask+0x84>)
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <sendIdleCommandTask+0x88>)
 8001054:	f001 fa8e 	bl	8002574 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 8001058:	e7ca      	b.n	8000ff0 <sendIdleCommandTask+0x8>
 800105a:	bf00      	nop
 800105c:	2000015c 	.word	0x2000015c
 8001060:	20000174 	.word	0x20000174
 8001064:	20000178 	.word	0x20000178
 8001068:	20000108 	.word	0x20000108
 800106c:	20000000 	.word	0x20000000
 8001070:	2000010c 	.word	0x2000010c

08001074 <sendNextScreenMessageTask>:
 * @brief  	Sends CAN message that indicates intention to switch to next page on the driver LCD.
 * 			This message is picked up by the DID (driver information display) board.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendNextScreenMessageTask (void *argument) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_CONTROL_DATA_LENGTH];

    while (1) {
        // wait for next screen semaphore
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <sendNextScreenMessageTask+0x2c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	4618      	mov	r0, r3
 8001086:	f003 fb3b 	bl	8004700 <osSemaphoreAcquire>

        // sets MSB of byte 0 of CAN message to 1 to indicate the next_screen button has been pressed
        data_send[0] = 0x10;
 800108a:	2310      	movs	r3, #16
 800108c:	733b      	strb	r3, [r7, #12]

        HAL_CAN_AddTxMessage(&hcan, &screen_cruise_control_header, data_send, &can_mailbox);
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <sendNextScreenMessageTask+0x30>)
 8001094:	4904      	ldr	r1, [pc, #16]	; (80010a8 <sendNextScreenMessageTask+0x34>)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <sendNextScreenMessageTask+0x38>)
 8001098:	f001 fa6c 	bl	8002574 <HAL_CAN_AddTxMessage>
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 800109c:	e7ee      	b.n	800107c <sendNextScreenMessageTask+0x8>
 800109e:	bf00      	nop
 80010a0:	20000160 	.word	0x20000160
 80010a4:	20000108 	.word	0x20000108
 80010a8:	20000018 	.word	0x20000018
 80010ac:	2000010c 	.word	0x2000010c

080010b0 <updateEventFlagsTask>:
 * @brief  	Decides what state the main control board is in and therefore which thread will send a motor
 * 			controller CAN message.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void updateEventFlagsTask(void *argument) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	while (1) {
		// order of priorities beginning with most important: motor over heating, regen braking, encoder motor command, cruise control
		if (event_flags.motor_overheat) {
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <updateEventFlagsTask+0x9c>)
 80010ba:	799b      	ldrb	r3, [r3, #6]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <updateEventFlagsTask+0x1a>
			state = MOTOR_OVERHEAT;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <updateEventFlagsTask+0xa0>)
 80010c4:	2210      	movs	r2, #16
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e033      	b.n	8001132 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.regen_enable && regen_value > 0 && battery_soc < BATTERY_REGEN_THRESHOLD) {
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <updateEventFlagsTask+0x9c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <updateEventFlagsTask+0x3c>
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <updateEventFlagsTask+0xa4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <updateEventFlagsTask+0x3c>
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <updateEventFlagsTask+0xa8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b59      	cmp	r3, #89	; 0x59
 80010e2:	d803      	bhi.n	80010ec <updateEventFlagsTask+0x3c>
			state = REGEN_READY;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <updateEventFlagsTask+0xa0>)
 80010e6:	2204      	movs	r2, #4
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e022      	b.n	8001132 <updateEventFlagsTask+0x82>
		}
		else if (!event_flags.encoder_value_is_zero && !event_flags.cruise_status) {
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <updateEventFlagsTask+0x9c>)
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d108      	bne.n	8001108 <updateEventFlagsTask+0x58>
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <updateEventFlagsTask+0x9c>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <updateEventFlagsTask+0x58>
			state = NORMAL_READY;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <updateEventFlagsTask+0xa0>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e014      	b.n	8001132 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.cruise_status && cruise_value > 0 && !event_flags.brake_in) {
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <updateEventFlagsTask+0x9c>)
 800110a:	789b      	ldrb	r3, [r3, #2]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <updateEventFlagsTask+0x7c>
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <updateEventFlagsTask+0xac>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <updateEventFlagsTask+0x7c>
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <updateEventFlagsTask+0x9c>)
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <updateEventFlagsTask+0x7c>
			state = CRUISE_READY;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <updateEventFlagsTask+0xa0>)
 8001126:	2208      	movs	r2, #8
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e002      	b.n	8001132 <updateEventFlagsTask+0x82>
		}
		else {
			state = IDLE;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <updateEventFlagsTask+0xa0>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
		}

		// signals the MCB state to other threads
		osEventFlagsSet(commandEventFlagsHandle, state);
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <updateEventFlagsTask+0xb0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <updateEventFlagsTask+0xa0>)
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f003 f975 	bl	800442c <osEventFlagsSet>

		osDelay(EVENT_FLAG_UPDATE_DELAY);
 8001142:	2019      	movs	r0, #25
 8001144:	f003 f8f2 	bl	800432c <osDelay>
		if (event_flags.motor_overheat) {
 8001148:	e7b6      	b.n	80010b8 <updateEventFlagsTask+0x8>
 800114a:	bf00      	nop
 800114c:	20000180 	.word	0x20000180
 8001150:	20000164 	.word	0x20000164
 8001154:	20000188 	.word	0x20000188
 8001158:	2000018d 	.word	0x2000018d
 800115c:	2000018c 	.word	0x2000018c
 8001160:	2000015c 	.word	0x2000015c

08001164 <receiveBatteryMessageTask>:
 * 			battery.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void receiveBatteryMessageTask (void *argument) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	uint8_t battery_msg_data[8];

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 800116c:	2100      	movs	r1, #0
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <receiveBatteryMessageTask+0x50>)
 8001170:	f001 fbeb 	bl	800294a <HAL_CAN_GetRxFifoFillLevel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <receiveBatteryMessageTask+0x44>
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, battery_msg_data);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <receiveBatteryMessageTask+0x54>)
 8001180:	2100      	movs	r1, #0
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <receiveBatteryMessageTask+0x50>)
 8001184:	f001 fad0 	bl	8002728 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x626) {
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <receiveBatteryMessageTask+0x54>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f240 6226 	movw	r2, #1574	; 0x626
 8001190:	4293      	cmp	r3, r2
 8001192:	d109      	bne.n	80011a8 <receiveBatteryMessageTask+0x44>

				// if the battery SOC is out of range, assume it is at 100% as a safety measure
				if (battery_msg_data[0] < 0 || battery_msg_data[0] > 100) {
 8001194:	7a3b      	ldrb	r3, [r7, #8]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d903      	bls.n	80011a2 <receiveBatteryMessageTask+0x3e>
					// TODO: somehow indicate to the outside world that this has happened
					battery_soc = 100;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <receiveBatteryMessageTask+0x58>)
 800119c:	2264      	movs	r2, #100	; 0x64
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e002      	b.n	80011a8 <receiveBatteryMessageTask+0x44>
				} else {
					battery_soc = battery_msg_data[0];
 80011a2:	7a3a      	ldrb	r2, [r7, #8]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <receiveBatteryMessageTask+0x58>)
 80011a6:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		osDelay(READ_BATTERY_SOC_DELAY);
 80011a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80011ac:	f003 f8be 	bl	800432c <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 80011b0:	e7dc      	b.n	800116c <receiveBatteryMessageTask+0x8>
 80011b2:	bf00      	nop
 80011b4:	2000010c 	.word	0x2000010c
 80011b8:	200000ec 	.word	0x200000ec
 80011bc:	2000018d 	.word	0x2000018d

080011c0 <sendMotorOverheatTask>:
 * 			shutdown, the motor will need to stop sending commands when it reaches a temperature of MAX_MOTOR_TEMPERATURE.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendMotorOverheatTask (void *argument) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	uint8_t motor_temperature_data[CAN_DATA_LENGTH]; // the motor temperature is bytes [3:0] TODO: this is an assumption

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 80011c8:	2100      	movs	r1, #0
 80011ca:	481e      	ldr	r0, [pc, #120]	; (8001244 <sendMotorOverheatTask+0x84>)
 80011cc:	f001 fbbd 	bl	800294a <HAL_CAN_GetRxFifoFillLevel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d031      	beq.n	800123a <sendMotorOverheatTask+0x7a>
			// there are multiple CAN IDs being passed through the filter, check if the message is the motor temperature
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, motor_temperature_data);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <sendMotorOverheatTask+0x88>)
 80011dc:	2100      	movs	r1, #0
 80011de:	4819      	ldr	r0, [pc, #100]	; (8001244 <sendMotorOverheatTask+0x84>)
 80011e0:	f001 faa2 	bl	8002728 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x50B) {
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <sendMotorOverheatTask+0x88>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f240 520b 	movw	r2, #1291	; 0x50b
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d124      	bne.n	800123a <sendMotorOverheatTask+0x7a>

				// assign the values from the CAN message into the
				// use the union to convert the 4 bytes to a 32-bit float
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00e      	b.n	8001214 <sendMotorOverheatTask+0x54>
					 * 		received[0] = 0xDD -> copied[3] = 0xDD
					 * 		received[1] = 0xCC -> copied[2] - 0xCC
					 * 		received[2] = 0xBB -> copied[1] = 0xBB
					 * 		received[3] = 0xAA -> copied[0] - 0xAA
					 */
					motor_temperature.bytes[i] = motor_temperature_data[CAN_HALF_DATA_LENGTH - 1 - i];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f1c3 0303 	rsb	r3, r3, #3
 80011fc:	3318      	adds	r3, #24
 80011fe:	443b      	add	r3, r7
 8001200:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <sendMotorOverheatTask+0x8c>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	4413      	add	r3, r2
 800120a:	460a      	mov	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	2b03      	cmp	r3, #3
 8001218:	dded      	ble.n	80011f6 <sendMotorOverheatTask+0x36>
				}

				// if the motor temperature is over heating, stop sending commands
				if (motor_temperature.float_value >= MAX_MOTOR_TEMPERATURE) {
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <sendMotorOverheatTask+0x8c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	490c      	ldr	r1, [pc, #48]	; (8001250 <sendMotorOverheatTask+0x90>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fac5 	bl	80007b0 <__aeabi_fcmpge>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <sendMotorOverheatTask+0x74>
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x01;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <sendMotorOverheatTask+0x94>)
 800122e:	2201      	movs	r2, #1
 8001230:	719a      	strb	r2, [r3, #6]
 8001232:	e002      	b.n	800123a <sendMotorOverheatTask+0x7a>
				} else {
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x00;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <sendMotorOverheatTask+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	719a      	strb	r2, [r3, #6]
				}

			}
		}
		osDelay(MOTOR_OVERHEAT_DELAY);
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <sendMotorOverheatTask+0x98>)
 800123c:	f003 f876 	bl	800432c <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8001240:	e7c2      	b.n	80011c8 <sendMotorOverheatTask+0x8>
 8001242:	bf00      	nop
 8001244:	2000010c 	.word	0x2000010c
 8001248:	200000ec 	.word	0x200000ec
 800124c:	2000017c 	.word	0x2000017c
 8001250:	42700000 	.word	0x42700000
 8001254:	20000180 	.word	0x20000180
 8001258:	000493e0 	.word	0x000493e0

0800125c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA0-WKUP   ------> ADCx_IN0
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <MX_GPIO_Init+0x13c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <MX_GPIO_Init+0x13c>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b46      	ldr	r3, [pc, #280]	; (8001398 <MX_GPIO_Init+0x13c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MX_GPIO_Init+0x13c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a42      	ldr	r2, [pc, #264]	; (8001398 <MX_GPIO_Init+0x13c>)
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <MX_GPIO_Init+0x13c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a3c      	ldr	r2, [pc, #240]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a36      	ldr	r2, [pc, #216]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <MX_GPIO_Init+0x13c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CRUISE_STAT_GPIO_Port, CRUISE_STAT_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d6:	4831      	ldr	r0, [pc, #196]	; (800139c <MX_GPIO_Init+0x140>)
 80012d8:	f001 fde9 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_GPIO_Init+0x140>)
 80012ec:	f001 fc34 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = REGEN_EN_Pin|BRK_IN_Pin|RVRS_EN_Pin;
 80012f0:	230e      	movs	r3, #14
 80012f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_GPIO_Init+0x144>)
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	4826      	ldr	r0, [pc, #152]	; (800139c <MX_GPIO_Init+0x140>)
 8001304:	f001 fc28 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NEXT_SCREEN_Pin|CRUISE_DIS_Pin|CRUISE_UP_Pin|CRUISE_DOWN_Pin;
 8001308:	23f0      	movs	r3, #240	; 0xf0
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <MX_GPIO_Init+0x148>)
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4820      	ldr	r0, [pc, #128]	; (800139c <MX_GPIO_Init+0x140>)
 800131c:	f001 fc1c 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CRUISE_STAT_Pin;
 8001320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CRUISE_STAT_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4818      	ldr	r0, [pc, #96]	; (800139c <MX_GPIO_Init+0x140>)
 800133a:	f001 fc0d 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2105      	movs	r1, #5
 8001342:	2007      	movs	r0, #7
 8001344:	f001 fbdd 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001348:	2007      	movs	r0, #7
 800134a:	f001 fbf6 	bl	8002b3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2105      	movs	r1, #5
 8001352:	2008      	movs	r0, #8
 8001354:	f001 fbd5 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001358:	2008      	movs	r0, #8
 800135a:	f001 fbee 	bl	8002b3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2009      	movs	r0, #9
 8001364:	f001 fbcd 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001368:	2009      	movs	r0, #9
 800136a:	f001 fbe6 	bl	8002b3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	200a      	movs	r0, #10
 8001374:	f001 fbc5 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001378:	200a      	movs	r0, #10
 800137a:	f001 fbde 	bl	8002b3a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	2017      	movs	r0, #23
 8001384:	f001 fbbd 	bl	8002b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001388:	2017      	movs	r0, #23
 800138a:	f001 fbd6 	bl	8002b3a <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800
 80013a0:	10310000 	.word	0x10310000
 80013a4:	10110000 	.word	0x10110000

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ac:	f000 fb46 	bl	8001a3c <HAL_Init>

  /* USER CODE BEGIN Init */

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f001 fb9b 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f823 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f7ff ff4f 	bl	800125c <MX_GPIO_Init>
  MX_CAN_Init();
 80013be:	f7ff fa9d 	bl	80008fc <MX_CAN_Init>
  MX_ADC1_Init();
 80013c2:	f7ff fa09 	bl	80007d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013c6:	f000 fa3d 	bl	8001844 <MX_TIM3_Init>
  MX_TIM1_Init();
 80013ca:	f000 f9e5 	bl	8001798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  timer_status = HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013ce:	213c      	movs	r1, #60	; 0x3c
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <main+0x4c>)
 80013d2:	f002 fcd1 	bl	8003d78 <HAL_TIM_Encoder_Start>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <main+0x50>)
 80013dc:	701a      	strb	r2, [r3, #0]
    // <----- CAN setup ----->

	// CAN_Filter_Init();
	// HAL_CAN_ConfigFilter(&hcan, &mcb_filter);
	HAL_CAN_Start(&hcan);
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <main+0x54>)
 80013e0:	f001 f884 	bl	80024ec <HAL_CAN_Start>
    // HAL_ADC_Start_DMA(&hadc1, &regen_value, 1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013e4:	f002 fe60 	bl	80040a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80013e8:	f7ff fb8c 	bl	8000b04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013ec:	f002 fe8e 	bl	800410c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <main+0x48>
 80013f2:	bf00      	nop
 80013f4:	200001d8 	.word	0x200001d8
 80013f8:	2000018e 	.word	0x2000018e
 80013fc:	2000010c 	.word	0x2000010c

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140a:	2228      	movs	r2, #40	; 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f006 fe90 	bl	8008134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143c:	2310      	movs	r3, #16
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001444:	2300      	movs	r3, #0
 8001446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001448:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800144c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fd66 	bl	8002f24 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800145e:	f000 f828 	bl	80014b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ffd2 	bl	8003428 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800148a:	f000 f812 	bl	80014b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800148e:	2302      	movs	r3, #2
 8001490:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001496:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f978 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014a6:	f000 f804 	bl	80014b2 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3758      	adds	r7, #88	; 0x58
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_MspInit+0x60>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <HAL_MspInit+0x60>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_MspInit+0x60>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_MspInit+0x60>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <HAL_MspInit+0x60>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_MspInit+0x60>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	210f      	movs	r1, #15
 80014fa:	f06f 0001 	mvn.w	r0, #1
 80014fe:	f001 fb00 	bl	8002b02 <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x64>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_MspInit+0x64>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000

08001528 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_InitTick+0xd0>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_InitTick+0xd0>)
 8001544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_InitTick+0xd0>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f002 f8c7 	bl	80036f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001566:	f002 f8b1 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 800156a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_InitTick+0xd4>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_InitTick+0xd8>)
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <HAL_InitTick+0xdc>)
 800157e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_InitTick+0xd8>)
 8001582:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_InitTick+0xd8>)
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_InitTick+0xd8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_InitTick+0xd8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_InitTick+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <HAL_InitTick+0xd8>)
 80015a2:	f002 fa8f 	bl	8003ac4 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80015ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d11b      	bne.n	80015ec <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <HAL_InitTick+0xd8>)
 80015b6:	f002 fadd 	bl	8003b74 <HAL_TIM_Base_Start_IT>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80015c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_InitTick+0xc4>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80015c8:	202c      	movs	r0, #44	; 0x2c
 80015ca:	f001 fab6 	bl	8002b3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d808      	bhi.n	80015e6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	202c      	movs	r0, #44	; 0x2c
 80015da:	f001 fa92 	bl	8002b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_InitTick+0xe0>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e002      	b.n	80015ec <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	20000190 	.word	0x20000190
 8001604:	40013400 	.word	0x40013400
 8001608:	20000034 	.word	0x20000034

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <HardFault_Handler+0x4>

0800161e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <BusFault_Handler+0x4>

0800162a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <UsageFault_Handler+0x4>

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

    // EXTI1 corresponds to the REGEN_EN pin
    event_flags.regen_enable = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin);
 8001640:	2102      	movs	r1, #2
 8001642:	4806      	ldr	r0, [pc, #24]	; (800165c <EXTI1_IRQHandler+0x20>)
 8001644:	f001 fc1c 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <EXTI1_IRQHandler+0x24>)
 800164e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REGEN_EN_Pin);
 8001650:	2002      	movs	r0, #2
 8001652:	f001 fc45 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010800 	.word	0x40010800
 8001660:	20000180 	.word	0x20000180

08001664 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

    // EXTI2 corresponds to the BRK_IN pin

    // when brake_in goes high, cruise control should be disengaged
    event_flags.cruise_status = DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <EXTI2_IRQHandler+0x24>)
 800166a:	2200      	movs	r2, #0
 800166c:	709a      	strb	r2, [r3, #2]

    event_flags.brake_in = HAL_GPIO_ReadPin(BRK_IN_GPIO_Port, BRK_IN_Pin);
 800166e:	2104      	movs	r1, #4
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <EXTI2_IRQHandler+0x28>)
 8001672:	f001 fc05 	bl	8002e80 <HAL_GPIO_ReadPin>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	; (8001688 <EXTI2_IRQHandler+0x24>)
 800167c:	70da      	strb	r2, [r3, #3]


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BRK_IN_Pin);
 800167e:	2004      	movs	r0, #4
 8001680:	f001 fc2e 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000180 	.word	0x20000180
 800168c:	40010800 	.word	0x40010800

08001690 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

    // EXTI3 corresponds to the RVRS_EN pin

    event_flags.reverse_enable = HAL_GPIO_ReadPin(RVRS_EN_GPIO_Port, RVRS_EN_Pin);
 8001694:	2108      	movs	r1, #8
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <EXTI3_IRQHandler+0x20>)
 8001698:	f001 fbf2 	bl	8002e80 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <EXTI3_IRQHandler+0x24>)
 80016a2:	705a      	strb	r2, [r3, #1]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RVRS_EN_Pin);
 80016a4:	2008      	movs	r0, #8
 80016a6:	f001 fc1b 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010800 	.word	0x40010800
 80016b4:	20000180 	.word	0x20000180

080016b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

    // EXTI4 corresponds to the NEXT_SCREEN pin

    osSemaphoreRelease(nextScreenSemaphoreHandle);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <EXTI4_IRQHandler+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 f883 	bl	80047cc <osSemaphoreRelease>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NEXT_SCREEN_Pin);
 80016c6:	2010      	movs	r0, #16
 80016c8:	f001 fc0a 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000160 	.word	0x20000160

080016d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    // checks if the CRUISE_DIS external interrupt is triggered
    if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DIS_Pin))
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <EXTI9_5_IRQHandler+0x9c>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <EXTI9_5_IRQHandler+0x18>
    {
        event_flags.cruise_status = DISABLE;
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <EXTI9_5_IRQHandler+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	709a      	strb	r2, [r3, #2]
 80016ea:	e036      	b.n	800175a <EXTI9_5_IRQHandler+0x86>
    }

    // checks if the CRUISE_UP external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_UP_Pin))
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <EXTI9_5_IRQHandler+0x9c>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01c      	beq.n	8001732 <EXTI9_5_IRQHandler+0x5e>
    {
    	if(event_flags.cruise_status == DISABLE) {
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <EXTI9_5_IRQHandler+0xa0>)
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <EXTI9_5_IRQHandler+0x3a>
    		cruise_value = encoder_reading;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <EXTI9_5_IRQHandler+0xa4>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e00d      	b.n	800172a <EXTI9_5_IRQHandler+0x56>
    	}
    	else
    	{
			if ((cruise_value + CRUISE_INCREMENT_VALUE) > CRUISE_MAX)
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b63      	cmp	r3, #99	; 0x63
 8001714:	d903      	bls.n	800171e <EXTI9_5_IRQHandler+0x4a>
			{
				cruise_value = CRUISE_MAX;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001718:	2264      	movs	r2, #100	; 0x64
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e005      	b.n	800172a <EXTI9_5_IRQHandler+0x56>
			}
			else
			{
				cruise_value += CRUISE_INCREMENT_VALUE;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001728:	701a      	strb	r2, [r3, #0]
			}
    	}
        event_flags.cruise_status = ENABLE;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <EXTI9_5_IRQHandler+0xa0>)
 800172c:	2201      	movs	r2, #1
 800172e:	709a      	strb	r2, [r3, #2]
 8001730:	e013      	b.n	800175a <EXTI9_5_IRQHandler+0x86>
    }

    // checks if the CRUISE_DOWN external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DOWN_Pin))
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <EXTI9_5_IRQHandler+0x9c>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00d      	beq.n	800175a <EXTI9_5_IRQHandler+0x86>
    {
        if ((cruise_value - CRUISE_INCREMENT_VALUE) < CRUISE_MIN)
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <EXTI9_5_IRQHandler+0x7a>
        {
            cruise_value = CRUISE_MIN;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e005      	b.n	800175a <EXTI9_5_IRQHandler+0x86>
        }
        else
        {
            cruise_value -= CRUISE_INCREMENT_VALUE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <EXTI9_5_IRQHandler+0xa8>)
 8001758:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CRUISE_DIS_Pin);
 800175a:	2020      	movs	r0, #32
 800175c:	f001 fbc0 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRUISE_UP_Pin);
 8001760:	2040      	movs	r0, #64	; 0x40
 8001762:	f001 fbbd 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRUISE_DOWN_Pin);
 8001766:	2080      	movs	r0, #128	; 0x80
 8001768:	f001 fbba 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010400 	.word	0x40010400
 8001774:	20000180 	.word	0x20000180
 8001778:	20000166 	.word	0x20000166
 800177c:	2000018c 	.word	0x2000018c

08001780 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END TIM8_UP_IRQn 0 */
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <SystemInit>:
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2224      	movs	r2, #36	; 0x24
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fcc4 	bl	8008134 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <MX_TIM1_Init+0xa4>)
 80017b6:	4a22      	ldr	r2, [pc, #136]	; (8001840 <MX_TIM1_Init+0xa8>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_TIM1_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM1_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_TIM1_Init+0xa4>)
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_TIM1_Init+0xa4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_TIM1_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_TIM1_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017de:	2303      	movs	r3, #3
 80017e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_TIM1_Init+0xa4>)
 800180a:	f002 fa13 	bl	8003c34 <HAL_TIM_Encoder_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001814:	f7ff fe4d 	bl	80014b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_TIM1_Init+0xa4>)
 8001826:	f002 fbd3 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001830:	f7ff fe3f 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3730      	adds	r7, #48	; 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200001d8 	.word	0x200001d8
 8001840:	40012c00 	.word	0x40012c00

08001844 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2224      	movs	r2, #36	; 0x24
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fc6e 	bl	8008134 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_TIM3_Init+0xa0>)
 8001862:	4a21      	ldr	r2, [pc, #132]	; (80018e8 <MX_TIM3_Init+0xa4>)
 8001864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <MX_TIM3_Init+0xa0>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_TIM3_Init+0xa0>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <MX_TIM3_Init+0xa0>)
 8001874:	2240      	movs	r2, #64	; 0x40
 8001876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_TIM3_Init+0xa0>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <MX_TIM3_Init+0xa0>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001884:	2303      	movs	r3, #3
 8001886:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189c:	2301      	movs	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_TIM3_Init+0xa0>)
 80018b0:	f002 f9c0 	bl	8003c34 <HAL_TIM_Encoder_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80018ba:	f7ff fdfa 	bl	80014b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_TIM3_Init+0xa0>)
 80018cc:	f002 fb80 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80018d6:	f7ff fdec 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3730      	adds	r7, #48	; 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000220 	.word	0x20000220
 80018e8:	40000400 	.word	0x40000400

080018ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_TIM_Encoder_MspInit+0xec>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d125      	bne.n	8001958 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a32      	ldr	r2, [pc, #200]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a2c      	ldr	r2, [pc, #176]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_AS_Pin|ENC_BS_Pin;
 800193c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4823      	ldr	r0, [pc, #140]	; (80019e0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001952:	f001 f901 	bl	8002b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001956:	e03a      	b.n	80019ce <HAL_TIM_Encoder_MspInit+0xe2>
  else if(tim_encoderHandle->Instance==TIM3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d135      	bne.n	80019ce <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_TIM_Encoder_MspInit+0xf0>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001992:	23c0      	movs	r3, #192	; 0xc0
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80019a6:	f001 f8d7 	bl	8002b58 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_TIM_Encoder_MspInit+0x100>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_TIM_Encoder_MspInit+0x100>)
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	6053      	str	r3, [r2, #4]
}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40010000 	.word	0x40010000

080019f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019f2:	e003      	b.n	80019fc <LoopCopyDataInit>

080019f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019fc:	480a      	ldr	r0, [pc, #40]	; (8001a28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <CopyDataInit>
  ldr r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a16:	f7ff feb9 	bl	800178c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f006 fb57 	bl	80080cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7ff fcc3 	bl	80013a8 <main>
  bx lr
 8001a22:	4770      	bx	lr
  ldr r3, =_sidata
 8001a24:	08008614 	.word	0x08008614
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a2c:	200000a0 	.word	0x200000a0
  ldr r2, =_sbss
 8001a30:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 8001a34:	2000307c 	.word	0x2000307c

08001a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_2_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_Init+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_Init+0x28>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f001 f84d 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f7ff fd68 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fd32 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_GetTick+0x10>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000268 	.word	0x20000268

08001a7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0ce      	b.n	8001c3c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe feca 	bl	8000854 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fbd7 	bl	8002274 <ADC_ConversionStop_Disable>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 80a9 	bne.w	8001c2a <HAL_ADC_Init+0x1ae>
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 80a5 	bne.w	8001c2a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae8:	f023 0302 	bic.w	r3, r3, #2
 8001aec:	f043 0202 	orr.w	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4951      	ldr	r1, [pc, #324]	; (8001c44 <HAL_ADC_Init+0x1c8>)
 8001afe:	428b      	cmp	r3, r1
 8001b00:	d10a      	bne.n	8001b18 <HAL_ADC_Init+0x9c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b0a:	d002      	beq.n	8001b12 <HAL_ADC_Init+0x96>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	e004      	b.n	8001b1c <HAL_ADC_Init+0xa0>
 8001b12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b16:	e001      	b.n	8001b1c <HAL_ADC_Init+0xa0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7b1b      	ldrb	r3, [r3, #12]
 8001b22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b34:	d003      	beq.n	8001b3e <HAL_ADC_Init+0xc2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <HAL_ADC_Init+0xc8>
 8001b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b42:	e000      	b.n	8001b46 <HAL_ADC_Init+0xca>
 8001b44:	2300      	movs	r3, #0
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7d1b      	ldrb	r3, [r3, #20]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d119      	bne.n	8001b88 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7b1b      	ldrb	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	035a      	lsls	r2, r3, #13
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e00b      	b.n	8001b88 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f043 0220 	orr.w	r2, r3, #32
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_ADC_Init+0x1cc>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb8:	d003      	beq.n	8001bc2 <HAL_ADC_Init+0x146>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d104      	bne.n	8001bcc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_ADC_Init+0x1d0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c06:	e018      	b.n	8001c3a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f023 0312 	bic.w	r3, r3, #18
 8001c10:	f043 0210 	orr.w	r2, r3, #16
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c28:	e007      	b.n	8001c3a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013c00 	.word	0x40013c00
 8001c48:	ffe1f7fd 	.word	0xffe1f7fd
 8001c4c:	ff1f0efe 	.word	0xff1f0efe

08001c50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Start+0x1a>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e098      	b.n	8001d9c <HAL_ADC_Start+0x14c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 faa4 	bl	80021c0 <ADC_Enable>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8087 	bne.w	8001d92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a41      	ldr	r2, [pc, #260]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_Start+0x5e>
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d026      	beq.n	8001d16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd8:	e01d      	b.n	8001d16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Start+0xaa>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_ADC_Start+0xc6>
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f023 0206 	bic.w	r2, r3, #6
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d2e:	e002      	b.n	8001d36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0202 	mvn.w	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d56:	d113      	bne.n	8001d80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_ADC_Start+0x154>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_ADC_Start+0x158>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	e00c      	b.n	8001d9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e003      	b.n	8001d9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40012800 	.word	0x40012800
 8001da8:	40012400 	.word	0x40012400

08001dac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dc2:	f7ff fe51 	bl	8001a68 <HAL_GetTick>
 8001dc6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f043 0220 	orr.w	r2, r3, #32
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0d3      	b.n	8001f96 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d131      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d12a      	bne.n	8001e60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e0a:	e021      	b.n	8001e50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d01d      	beq.n	8001e50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x7e>
 8001e1a:	f7ff fe25 	bl	8001a68 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d212      	bcs.n	8001e50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0a2      	b.n	8001f96 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0d6      	beq.n	8001e0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e5e:	e070      	b.n	8001f42 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e60:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_ADC_PollForConversion+0x1f4>)
 8001e62:	681c      	ldr	r4, [r3, #0]
 8001e64:	2002      	movs	r0, #2
 8001e66:	f001 fd49 	bl	80038fc <HAL_RCCEx_GetPeriphCLKFreq>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_ADC_PollForConversion+0x1f8>)
 8001e78:	400b      	ands	r3, r1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x104>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <HAL_ADC_PollForConversion+0x1fc>)
 8001e86:	400b      	ands	r3, r1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x104>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6919      	ldr	r1, [r3, #16]
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_ADC_PollForConversion+0x200>)
 8001e94:	400b      	ands	r3, r1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d108      	bne.n	8001eac <HAL_ADC_PollForConversion+0x100>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68d9      	ldr	r1, [r3, #12]
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_ADC_PollForConversion+0x204>)
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_PollForConversion+0x100>
 8001ea8:	2314      	movs	r3, #20
 8001eaa:	e020      	b.n	8001eee <HAL_ADC_PollForConversion+0x142>
 8001eac:	2329      	movs	r3, #41	; 0x29
 8001eae:	e01e      	b.n	8001eee <HAL_ADC_PollForConversion+0x142>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_ADC_PollForConversion+0x200>)
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_ADC_PollForConversion+0x120>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68d9      	ldr	r1, [r3, #12]
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_ADC_PollForConversion+0x204>)
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <HAL_ADC_PollForConversion+0x13c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_ADC_PollForConversion+0x208>)
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <HAL_ADC_PollForConversion+0x140>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68d9      	ldr	r1, [r3, #12]
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_ADC_PollForConversion+0x208>)
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_PollForConversion+0x140>
 8001ee8:	2354      	movs	r3, #84	; 0x54
 8001eea:	e000      	b.n	8001eee <HAL_ADC_PollForConversion+0x142>
 8001eec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ef4:	e021      	b.n	8001f3a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d01a      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_ADC_PollForConversion+0x168>
 8001f04:	f7ff fdb0 	bl	8001a68 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d20f      	bcs.n	8001f34 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d90b      	bls.n	8001f34 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e030      	b.n	8001f96 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d8d9      	bhi.n	8001ef6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0212 	mvn.w	r2, #18
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f66:	d115      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000030 	.word	0x20000030
 8001fa4:	24924924 	.word	0x24924924
 8001fa8:	00924924 	.word	0x00924924
 8001fac:	12492492 	.word	0x12492492
 8001fb0:	00492492 	.word	0x00492492
 8001fb4:	00249249 	.word	0x00249249

08001fb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x20>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0dc      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1da>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d81c      	bhi.n	800203a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b05      	subs	r3, #5
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b05      	subs	r3, #5
 800202c:	fa00 f203 	lsl.w	r2, r0, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
 8002038:	e03c      	b.n	80020b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d81c      	bhi.n	800207c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b23      	subs	r3, #35	; 0x23
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	4019      	ands	r1, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	; 0x23
 800206e:	fa00 f203 	lsl.w	r2, r0, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
 800207a:	e01b      	b.n	80020b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b41      	subs	r3, #65	; 0x41
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b41      	subs	r3, #65	; 0x41
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d91c      	bls.n	80020f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68d9      	ldr	r1, [r3, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	2207      	movs	r2, #7
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4019      	ands	r1, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6898      	ldr	r0, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	3b1e      	subs	r3, #30
 80020e8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	e019      	b.n	800212a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	2207      	movs	r2, #7
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6898      	ldr	r0, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b10      	cmp	r3, #16
 8002130:	d003      	beq.n	800213a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002136:	2b11      	cmp	r3, #17
 8002138:	d132      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d125      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d126      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002160:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b10      	cmp	r3, #16
 8002168:	d11a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9a      	lsrs	r2, r3, #18
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x1b2>
 800218e:	e007      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40012400 	.word	0x40012400
 80021b8:	20000030 	.word	0x20000030
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d040      	beq.n	8002260 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <ADC_Enable+0xac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <ADC_Enable+0xb0>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021fc:	e002      	b.n	8002204 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800220a:	f7ff fc2d 	bl	8001a68 <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002210:	e01f      	b.n	8002252 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002212:	f7ff fc29 	bl	8001a68 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d918      	bls.n	8002252 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d011      	beq.n	8002252 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f043 0210 	orr.w	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e007      	b.n	8002262 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d1d8      	bne.n	8002212 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000030 	.word	0x20000030
 8002270:	431bde83 	.word	0x431bde83

08002274 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d12e      	bne.n	80022ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0201 	bic.w	r2, r2, #1
 800229c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800229e:	f7ff fbe3 	bl	8001a68 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022a4:	e01b      	b.n	80022de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022a6:	f7ff fbdf 	bl	8001a68 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d914      	bls.n	80022de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10d      	bne.n	80022de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d0dc      	beq.n	80022a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ed      	b.n	80024e4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7fe fb27 	bl	8000968 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232a:	f7ff fb9d 	bl	8001a68 <HAL_GetTick>
 800232e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002330:	e012      	b.n	8002358 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002332:	f7ff fb99 	bl	8001a68 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b0a      	cmp	r3, #10
 800233e:	d90b      	bls.n	8002358 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2205      	movs	r2, #5
 8002350:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0c5      	b.n	80024e4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0e5      	beq.n	8002332 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0202 	bic.w	r2, r2, #2
 8002374:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002376:	f7ff fb77 	bl	8001a68 <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800237c:	e012      	b.n	80023a4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237e:	f7ff fb73 	bl	8001a68 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b0a      	cmp	r3, #10
 800238a:	d90b      	bls.n	80023a4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2205      	movs	r2, #5
 800239c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e09f      	b.n	80024e4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e5      	bne.n	800237e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7e1b      	ldrb	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	e007      	b.n	80023dc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e5b      	ldrb	r3, [r3, #25]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d108      	bne.n	80023f6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e007      	b.n	8002406 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7e9b      	ldrb	r3, [r3, #26]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d108      	bne.n	8002420 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0220 	orr.w	r2, r2, #32
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e007      	b.n	8002430 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0220 	bic.w	r2, r2, #32
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7edb      	ldrb	r3, [r3, #27]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d108      	bne.n	800244a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0210 	bic.w	r2, r2, #16
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e007      	b.n	800245a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0210 	orr.w	r2, r2, #16
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7f1b      	ldrb	r3, [r3, #28]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0208 	orr.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e007      	b.n	8002484 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0208 	bic.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7f5b      	ldrb	r3, [r3, #29]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d108      	bne.n	800249e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0204 	orr.w	r2, r2, #4
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	e007      	b.n	80024ae <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0204 	bic.w	r2, r2, #4
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	ea42 0103 	orr.w	r1, r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d12e      	bne.n	800255e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff faa6 	bl	8001a68 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800251e:	e012      	b.n	8002546 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002520:	f7ff faa2 	bl	8001a68 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b0a      	cmp	r3, #10
 800252c:	d90b      	bls.n	8002546 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e012      	b.n	800256c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e006      	b.n	800256c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002588:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d003      	beq.n	80025a0 <HAL_CAN_AddTxMessage+0x2c>
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80b8 	bne.w	8002710 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80a0 	beq.w	8002700 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d907      	bls.n	80025e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e09e      	b.n	800271e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025e0:	2201      	movs	r2, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	409a      	lsls	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	6809      	ldr	r1, [r1, #0]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3318      	adds	r3, #24
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	440b      	add	r3, r1
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e00f      	b.n	800262e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002618:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002622:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3318      	adds	r3, #24
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	440b      	add	r3, r1
 800262c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3318      	adds	r3, #24
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	440b      	add	r3, r1
 800263e:	3304      	adds	r3, #4
 8002640:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	7d1b      	ldrb	r3, [r3, #20]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d111      	bne.n	800266e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3318      	adds	r3, #24
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6811      	ldr	r1, [r2, #0]
 800265e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3318      	adds	r3, #24
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	440b      	add	r3, r1
 800266a:	3304      	adds	r3, #4
 800266c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3307      	adds	r3, #7
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	061a      	lsls	r2, r3, #24
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3306      	adds	r3, #6
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3305      	adds	r3, #5
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4313      	orrs	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	3204      	adds	r2, #4
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	4610      	mov	r0, r2
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	6811      	ldr	r1, [r2, #0]
 8002696:	ea43 0200 	orr.w	r2, r3, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	440b      	add	r3, r1
 80026a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3303      	adds	r3, #3
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	061a      	lsls	r2, r3, #24
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3302      	adds	r3, #2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3301      	adds	r3, #1
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	4313      	orrs	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	4610      	mov	r0, r2
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	ea43 0200 	orr.w	r2, r3, r0
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80026da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3318      	adds	r3, #24
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6811      	ldr	r1, [r2, #0]
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3318      	adds	r3, #24
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	440b      	add	r3, r1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e00e      	b.n	800271e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e006      	b.n	800271e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d003      	beq.n	800274c <HAL_CAN_GetRxMessage+0x24>
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 80f3 	bne.w	8002932 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0e7      	b.n	8002940 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0d8      	b.n	8002940 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	331b      	adds	r3, #27
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	4413      	add	r3, r2
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0204 	and.w	r2, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10c      	bne.n	80027c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	331b      	adds	r3, #27
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e00b      	b.n	80027de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	331b      	adds	r3, #27
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	4413      	add	r3, r2
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0202 	and.w	r2, r3, #2
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	331b      	adds	r3, #27
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	331b      	adds	r3, #27
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	b2da      	uxtb	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	331b      	adds	r3, #27
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4413      	add	r3, r2
 800285c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0a1a      	lsrs	r2, r3, #8
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0c1a      	lsrs	r2, r3, #16
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3302      	adds	r3, #2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4413      	add	r3, r2
 8002890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e1a      	lsrs	r2, r3, #24
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3303      	adds	r3, #3
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3304      	adds	r3, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0a1a      	lsrs	r2, r3, #8
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3305      	adds	r3, #5
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0c1a      	lsrs	r2, r3, #16
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3306      	adds	r3, #6
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e1a      	lsrs	r2, r3, #24
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3307      	adds	r3, #7
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	e007      	b.n	800292e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e006      	b.n	8002940 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800294a:	b480      	push	{r7}
 800294c:	b085      	sub	sp, #20
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d002      	beq.n	800296c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d10f      	bne.n	800298c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e005      	b.n	800298c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800298c:	68fb      	ldr	r3, [r7, #12]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <__NVIC_SetPriorityGrouping+0x44>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4906      	ldr	r1, [pc, #24]	; (8002a30 <__NVIC_EnableIRQ+0x34>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff4f 	bl	8002998 <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff64 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ffb2 	bl	8002a88 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff81 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff57 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e179      	b.n	8002e60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8168 	bne.w	8002e5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a96      	ldr	r2, [pc, #600]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d05e      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
 8002b94:	4a94      	ldr	r2, [pc, #592]	; (8002de8 <HAL_GPIO_Init+0x290>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d875      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002b9a:	4a94      	ldr	r2, [pc, #592]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d058      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
 8002ba0:	4a92      	ldr	r2, [pc, #584]	; (8002dec <HAL_GPIO_Init+0x294>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d86f      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002ba6:	4a92      	ldr	r2, [pc, #584]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d052      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
 8002bac:	4a90      	ldr	r2, [pc, #576]	; (8002df0 <HAL_GPIO_Init+0x298>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d869      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002bb2:	4a90      	ldr	r2, [pc, #576]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d04c      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
 8002bb8:	4a8e      	ldr	r2, [pc, #568]	; (8002df4 <HAL_GPIO_Init+0x29c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d863      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002bbe:	4a8e      	ldr	r2, [pc, #568]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d046      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
 8002bc4:	4a8c      	ldr	r2, [pc, #560]	; (8002df8 <HAL_GPIO_Init+0x2a0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d85d      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002bca:	2b12      	cmp	r3, #18
 8002bcc:	d82a      	bhi.n	8002c24 <HAL_GPIO_Init+0xcc>
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d859      	bhi.n	8002c86 <HAL_GPIO_Init+0x12e>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_GPIO_Init+0x80>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c53 	.word	0x08002c53
 8002bdc:	08002c2d 	.word	0x08002c2d
 8002be0:	08002c3f 	.word	0x08002c3f
 8002be4:	08002c81 	.word	0x08002c81
 8002be8:	08002c87 	.word	0x08002c87
 8002bec:	08002c87 	.word	0x08002c87
 8002bf0:	08002c87 	.word	0x08002c87
 8002bf4:	08002c87 	.word	0x08002c87
 8002bf8:	08002c87 	.word	0x08002c87
 8002bfc:	08002c87 	.word	0x08002c87
 8002c00:	08002c87 	.word	0x08002c87
 8002c04:	08002c87 	.word	0x08002c87
 8002c08:	08002c87 	.word	0x08002c87
 8002c0c:	08002c87 	.word	0x08002c87
 8002c10:	08002c87 	.word	0x08002c87
 8002c14:	08002c87 	.word	0x08002c87
 8002c18:	08002c87 	.word	0x08002c87
 8002c1c:	08002c35 	.word	0x08002c35
 8002c20:	08002c49 	.word	0x08002c49
 8002c24:	4a75      	ldr	r2, [pc, #468]	; (8002dfc <HAL_GPIO_Init+0x2a4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c2a:	e02c      	b.n	8002c86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	623b      	str	r3, [r7, #32]
          break;
 8002c32:	e029      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	623b      	str	r3, [r7, #32]
          break;
 8002c3c:	e024      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	3308      	adds	r3, #8
 8002c44:	623b      	str	r3, [r7, #32]
          break;
 8002c46:	e01f      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e01a      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	623b      	str	r3, [r7, #32]
          break;
 8002c5e:	e013      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c68:	2308      	movs	r3, #8
 8002c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	611a      	str	r2, [r3, #16]
          break;
 8002c72:	e009      	b.n	8002c88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c74:	2308      	movs	r3, #8
 8002c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	615a      	str	r2, [r3, #20]
          break;
 8002c7e:	e003      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x130>
          break;
 8002c86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	d801      	bhi.n	8002c92 <HAL_GPIO_Init+0x13a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	e001      	b.n	8002c96 <HAL_GPIO_Init+0x13e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3304      	adds	r3, #4
 8002c96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2bff      	cmp	r3, #255	; 0xff
 8002c9c:	d802      	bhi.n	8002ca4 <HAL_GPIO_Init+0x14c>
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	e002      	b.n	8002caa <HAL_GPIO_Init+0x152>
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	3b08      	subs	r3, #8
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	210f      	movs	r1, #15
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	6a39      	ldr	r1, [r7, #32]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80c1 	beq.w	8002e5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a48      	ldr	r2, [pc, #288]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <HAL_GPIO_Init+0x2a8>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cf0:	4a44      	ldr	r2, [pc, #272]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3c      	ldr	r2, [pc, #240]	; (8002e08 <HAL_GPIO_Init+0x2b0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01f      	beq.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_GPIO_Init+0x2b4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d019      	beq.n	8002d58 <HAL_GPIO_Init+0x200>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3a      	ldr	r2, [pc, #232]	; (8002e10 <HAL_GPIO_Init+0x2b8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_GPIO_Init+0x1fc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_GPIO_Init+0x2bc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00d      	beq.n	8002d50 <HAL_GPIO_Init+0x1f8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_GPIO_Init+0x2c0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <HAL_GPIO_Init+0x1f4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <HAL_GPIO_Init+0x2c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d101      	bne.n	8002d48 <HAL_GPIO_Init+0x1f0>
 8002d44:	2305      	movs	r3, #5
 8002d46:	e00a      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d48:	2306      	movs	r3, #6
 8002d4a:	e008      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e006      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d50:	2303      	movs	r3, #3
 8002d52:	e004      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e002      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_GPIO_Init+0x206>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	f002 0203 	and.w	r2, r2, #3
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	4093      	lsls	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d6e:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_GPIO_Init+0x2ac>)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d88:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4924      	ldr	r1, [pc, #144]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e006      	b.n	8002da4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	4920      	ldr	r1, [pc, #128]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	491a      	ldr	r1, [pc, #104]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d025      	beq.n	8002e24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4910      	ldr	r1, [pc, #64]	; (8002e20 <HAL_GPIO_Init+0x2c8>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	608b      	str	r3, [r1, #8]
 8002de4:	e025      	b.n	8002e32 <HAL_GPIO_Init+0x2da>
 8002de6:	bf00      	nop
 8002de8:	10320000 	.word	0x10320000
 8002dec:	10310000 	.word	0x10310000
 8002df0:	10220000 	.word	0x10220000
 8002df4:	10210000 	.word	0x10210000
 8002df8:	10120000 	.word	0x10120000
 8002dfc:	10110000 	.word	0x10110000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40010800 	.word	0x40010800
 8002e0c:	40010c00 	.word	0x40010c00
 8002e10:	40011000 	.word	0x40011000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	40011800 	.word	0x40011800
 8002e1c:	40011c00 	.word	0x40011c00
 8002e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4913      	ldr	r1, [pc, #76]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60cb      	str	r3, [r1, #12]
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4909      	ldr	r1, [pc, #36]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f ae7e 	bne.w	8002b6c <HAL_GPIO_Init+0x14>
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	372c      	adds	r7, #44	; 0x2c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	807b      	strh	r3, [r7, #2]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec4:	887a      	ldrh	r2, [r7, #2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eca:	e003      	b.n	8002ed4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	041a      	lsls	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	611a      	str	r2, [r3, #16]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f806 	bl	8002f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e272      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f50:	4b8f      	ldr	r3, [pc, #572]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d112      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6a:	4b89      	ldr	r3, [pc, #548]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06c      	beq.n	8003050 <HAL_RCC_OscConfig+0x12c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d168      	bne.n	8003050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e24c      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x76>
 8002f8c:	4b80      	ldr	r3, [pc, #512]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a7f      	ldr	r2, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e02e      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x98>
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7a      	ldr	r2, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b78      	ldr	r3, [pc, #480]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a77      	ldr	r2, [pc, #476]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xbc>
 8002fc6:	4b72      	ldr	r3, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a71      	ldr	r2, [pc, #452]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a67      	ldr	r2, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fd32 	bl	8001a68 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fd2e 	bl	8001a68 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e200      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b5d      	ldr	r3, [pc, #372]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xe4>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fd1e 	bl	8001a68 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe fd1a 	bl	8001a68 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1ec      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x10c>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d063      	beq.n	8003126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305e:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
 8003076:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1c0      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4939      	ldr	r1, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e03a      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe fcd3 	bl	8001a68 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c6:	f7fe fccf 	bl	8001a68 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1a1      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4927      	ldr	r1, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	e015      	b.n	8003126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <HAL_RCC_OscConfig+0x270>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fcb2 	bl	8001a68 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003108:	f7fe fcae 	bl	8001a68 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e180      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03a      	beq.n	80031a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d019      	beq.n	800316e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCC_OscConfig+0x274>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe fc92 	bl	8001a68 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fc8e 	bl	8001a68 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e160      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_RCC_OscConfig+0x26c>)
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f000 faf4 	bl	8003754 <RCC_Delay>
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_RCC_OscConfig+0x274>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe fc78 	bl	8001a68 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317a:	e00f      	b.n	800319c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fc74 	bl	8001a68 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d908      	bls.n	800319c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e146      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	42420000 	.word	0x42420000
 8003198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b92      	ldr	r3, [pc, #584]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e9      	bne.n	800317c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a6 	beq.w	8003302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b8b      	ldr	r3, [pc, #556]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a87      	ldr	r2, [pc, #540]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b82      	ldr	r3, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d118      	bne.n	8003220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7e      	ldr	r2, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0x4c8>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fc35 	bl	8001a68 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003202:	f7fe fc31 	bl	8001a68 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b64      	cmp	r3, #100	; 0x64
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e103      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x4c8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x312>
 8003228:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e02d      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x334>
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a69      	ldr	r2, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b67      	ldr	r3, [pc, #412]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a66      	ldr	r2, [pc, #408]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	e01c      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x356>
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a60      	ldr	r2, [pc, #384]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x36e>
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a5a      	ldr	r2, [pc, #360]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6213      	str	r3, [r2, #32]
 8003286:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a57      	ldr	r2, [pc, #348]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d015      	beq.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329a:	f7fe fbe5 	bl	8001a68 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe fbe1 	bl	8001a68 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0b1      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RCC_OscConfig+0x37e>
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fbcf 	bl	8001a68 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe fbcb 	bl	8001a68 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e09b      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ee      	bne.n	80032ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8087 	beq.w	800341a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d061      	beq.n	80033dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d146      	bne.n	80033ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fb9f 	bl	8001a68 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe fb9b 	bl	8001a68 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e06d      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d108      	bne.n	8003368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4921      	ldr	r1, [pc, #132]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003368:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a19      	ldr	r1, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	430b      	orrs	r3, r1
 800337a:	491b      	ldr	r1, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fe fb6f 	bl	8001a68 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe fb6b 	bl	8001a68 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x46a>
 80033ac:	e035      	b.n	800341a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fb58 	bl	8001a68 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fe fb54 	bl	8001a68 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e026      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x498>
 80033da:	e01e      	b.n	800341a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e019      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000
 80033f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_OscConfig+0x500>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	429a      	cmp	r2, r3
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d001      	beq.n	800341a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0d0      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	4965      	ldr	r1, [pc, #404]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b63      	ldr	r3, [pc, #396]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0b8      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003484:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800348e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a52      	ldr	r2, [pc, #328]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	494d      	ldr	r1, [pc, #308]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d040      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d115      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07f      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e073      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e06b      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4936      	ldr	r1, [pc, #216]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe faa6 	bl	8001a68 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe faa2 	bl	8001a68 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e053      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d210      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 0207 	bic.w	r2, r3, #7
 800355e:	4922      	ldr	r1, [pc, #136]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e032      	b.n	80035de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4916      	ldr	r1, [pc, #88]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	490e      	ldr	r1, [pc, #56]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b6:	f000 f821 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490a      	ldr	r1, [pc, #40]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1cc>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035d2:	4b09      	ldr	r3, [pc, #36]	; (80035f8 <HAL_RCC_ClockConfig+0x1d0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd ffa6 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08008594 	.word	0x08008594
 80035f4:	20000030 	.word	0x20000030
 80035f8:	20000034 	.word	0x20000034

080035fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b490      	push	{r4, r7}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003602:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003604:	1d3c      	adds	r4, r7, #4
 8003606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800360c:	f240 2301 	movw	r3, #513	; 0x201
 8003610:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b04      	cmp	r3, #4
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x40>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d003      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x46>
 800363a:	e02b      	b.n	8003694 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800363c:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800363e:	623b      	str	r3, [r7, #32]
      break;
 8003640:	e02b      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	0c9b      	lsrs	r3, r3, #18
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	443b      	add	r3, r7
 800364e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003652:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0c5b      	lsrs	r3, r3, #17
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	3328      	adds	r3, #40	; 0x28
 800366a:	443b      	add	r3, r7
 800366c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003670:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a0e      	ldr	r2, [pc, #56]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003676:	fb03 f202 	mul.w	r2, r3, r2
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
 8003682:	e004      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	623b      	str	r3, [r7, #32]
      break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800369a:	6a3b      	ldr	r3, [r7, #32]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3728      	adds	r7, #40	; 0x28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc90      	pop	{r4, r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	080083b8 	.word	0x080083b8
 80036ac:	40021000 	.word	0x40021000
 80036b0:	007a1200 	.word	0x007a1200
 80036b4:	003d0900 	.word	0x003d0900

080036b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000030 	.word	0x20000030

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff fff2 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080085a4 	.word	0x080085a4

080036f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	220f      	movs	r2, #15
 8003702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetClockConfig+0x5c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40021000 	.word	0x40021000
 8003750:	40022000 	.word	0x40022000

08003754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCC_Delay+0x34>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <RCC_Delay+0x38>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a5b      	lsrs	r3, r3, #9
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003770:	bf00      	nop
  }
  while (Delay --);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	60fa      	str	r2, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f9      	bne.n	8003770 <RCC_Delay+0x1c>
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000030 	.word	0x20000030
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fe f93a 	bl	8001a68 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe f936 	bl	8001a68 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e06d      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d027      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f905 	bl	8001a68 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe f901 	bl	8001a68 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e036      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	490b      	ldr	r1, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420440 	.word	0x42420440

080038fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b08d      	sub	sp, #52	; 0x34
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8003906:	f107 040c 	add.w	r4, r7, #12
 800390a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800390c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003910:	f240 2301 	movw	r3, #513	; 0x201
 8003914:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3b01      	subs	r3, #1
 800392e:	2b0f      	cmp	r3, #15
 8003930:	f200 80b4 	bhi.w	8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003a1b 	.word	0x08003a1b
 8003940:	08003a81 	.word	0x08003a81
 8003944:	08003a9d 	.word	0x08003a9d
 8003948:	08003a0b 	.word	0x08003a0b
 800394c:	08003a9d 	.word	0x08003a9d
 8003950:	08003a9d 	.word	0x08003a9d
 8003954:	08003a9d 	.word	0x08003a9d
 8003958:	08003a13 	.word	0x08003a13
 800395c:	08003a9d 	.word	0x08003a9d
 8003960:	08003a9d 	.word	0x08003a9d
 8003964:	08003a9d 	.word	0x08003a9d
 8003968:	08003a9d 	.word	0x08003a9d
 800396c:	08003a9d 	.word	0x08003a9d
 8003970:	08003a9d 	.word	0x08003a9d
 8003974:	08003a9d 	.word	0x08003a9d
 8003978:	0800397d 	.word	0x0800397d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003982:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8088 	beq.w	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	3330      	adds	r3, #48	; 0x30
 800399a:	443b      	add	r3, r7
 800399c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039a0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	0c5b      	lsrs	r3, r3, #17
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	3330      	adds	r3, #48	; 0x30
 80039b8:	443b      	add	r3, r7
 80039ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	4a37      	ldr	r2, [pc, #220]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d102      	bne.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80039f8:	e052      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003a00:	fba2 2303 	umull	r2, r3, r2, r3
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a08:	e04a      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7ff fdf7 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8003a0e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003a10:	e049      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003a12:	f7ff fdf3 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8003a16:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003a18:	e045      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003a1a:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d108      	bne.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	e01f      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d109      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8003a56:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5c:	e00f      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8003a76:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003a7c:	e012      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8003a7e:	e011      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a80:	f7ff fe24 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0b9b      	lsrs	r3, r3, #14
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	3301      	adds	r3, #1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8003aa4:	bf00      	nop
    }
  }
  return (frequency);
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3734      	adds	r7, #52	; 0x34
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd90      	pop	{r4, r7, pc}
 8003ab0:	080083c8 	.word	0x080083c8
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	aaaaaaab 	.word	0xaaaaaaab

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f839 	bl	8003b62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f9c6 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d001      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e044      	b.n	8003c16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_TIM_Base_Start_IT+0xac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d00e      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIM_Base_Start_IT+0xb8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d111      	bne.n	8003c04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d010      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0201 	orr.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c02:	e007      	b.n	8003c14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40013400 	.word	0x40013400
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00

08003c34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e093      	b.n	8003d70 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fd fe45 	bl	80018ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c78:	f023 0307 	bic.w	r3, r3, #7
 8003c7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f000 f903 	bl	8003e94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003cd4:	f023 030c 	bic.w	r3, r3, #12
 8003cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	4313      	orrs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003da0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dae:	7b7b      	ldrb	r3, [r7, #13]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e069      	b.n	8003e8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	e031      	b.n	8003e2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d110      	bne.n	8003df2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d102      	bne.n	8003ddc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dd6:	7b3b      	ldrb	r3, [r7, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e055      	b.n	8003e8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df0:	e01d      	b.n	8003e2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d108      	bne.n	8003e0a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df8:	7bbb      	ldrb	r3, [r7, #14]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dfe:	7b7b      	ldrb	r3, [r7, #13]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e04:	7b3b      	ldrb	r3, [r7, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e03e      	b.n	8003e8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_TIM_Encoder_Start+0xc4>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d008      	beq.n	8003e4c <HAL_TIM_Encoder_Start+0xd4>
 8003e3a:	e00f      	b.n	8003e5c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f89f 	bl	8003f88 <TIM_CCxChannelCmd>
      break;
 8003e4a:	e016      	b.n	8003e7a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2201      	movs	r2, #1
 8003e52:	2104      	movs	r1, #4
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f897 	bl	8003f88 <TIM_CCxChannelCmd>
      break;
 8003e5a:	e00e      	b.n	8003e7a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f88f 	bl	8003f88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f888 	bl	8003f88 <TIM_CCxChannelCmd>
      break;
 8003e78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a33      	ldr	r2, [pc, #204]	; (8003f74 <TIM_Base_SetConfig+0xe0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a32      	ldr	r2, [pc, #200]	; (8003f78 <TIM_Base_SetConfig+0xe4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <TIM_Base_SetConfig+0xe8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <TIM_Base_SetConfig+0xec>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a2d      	ldr	r2, [pc, #180]	; (8003f84 <TIM_Base_SetConfig+0xf0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <TIM_Base_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0x82>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <TIM_Base_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0x82>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0x82>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <TIM_Base_SetConfig+0xe8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0x82>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <TIM_Base_SetConfig+0xec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0x82>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <TIM_Base_SetConfig+0xf0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <TIM_Base_SetConfig+0xe0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0xc8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <TIM_Base_SetConfig+0xe4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40013400 	.word	0x40013400
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00

08003f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 031f 	and.w	r3, r3, #31
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e050      	b.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d00e      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40013400 	.word	0x40013400
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00

080040a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ae:	f3ef 8305 	mrs	r3, IPSR
 80040b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80040b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	607b      	str	r3, [r7, #4]
  return(result);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <osKernelInitialize+0x32>
 80040c6:	4b10      	ldr	r3, [pc, #64]	; (8004108 <osKernelInitialize+0x60>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d109      	bne.n	80040e2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ce:	f3ef 8311 	mrs	r3, BASEPRI
 80040d2:	603b      	str	r3, [r7, #0]
  return(result);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80040da:	f06f 0305 	mvn.w	r3, #5
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e00c      	b.n	80040fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <osKernelInitialize+0x60>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <osKernelInitialize+0x60>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e002      	b.n	80040fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	2000026c 	.word	0x2000026c

0800410c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004112:	f3ef 8305 	mrs	r3, IPSR
 8004116:	60bb      	str	r3, [r7, #8]
  return(result);
 8004118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800411e:	f3ef 8310 	mrs	r3, PRIMASK
 8004122:	607b      	str	r3, [r7, #4]
  return(result);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <osKernelStart+0x32>
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <osKernelStart+0x64>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d109      	bne.n	8004146 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004132:	f3ef 8311 	mrs	r3, BASEPRI
 8004136:	603b      	str	r3, [r7, #0]
  return(result);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <osKernelStart+0x3a>
    stat = osErrorISR;
 800413e:	f06f 0305 	mvn.w	r3, #5
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e00e      	b.n	8004164 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <osKernelStart+0x64>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d107      	bne.n	800415e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <osKernelStart+0x64>)
 8004150:	2202      	movs	r2, #2
 8004152:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004154:	f002 f9bc 	bl	80064d0 <vTaskStartScheduler>
      stat = osOK;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e002      	b.n	8004164 <osKernelStart+0x58>
    } else {
      stat = osError;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
 8004162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	2000026c 	.word	0x2000026c

08004174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b092      	sub	sp, #72	; 0x48
 8004178:	af04      	add	r7, sp, #16
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004184:	f3ef 8305 	mrs	r3, IPSR
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 8094 	bne.w	80042ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	623b      	str	r3, [r7, #32]
  return(result);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 808d 	bne.w	80042ba <osThreadNew+0x146>
 80041a0:	4b48      	ldr	r3, [pc, #288]	; (80042c4 <osThreadNew+0x150>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d106      	bne.n	80041b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a8:	f3ef 8311 	mrs	r3, BASEPRI
 80041ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 8082 	bne.w	80042ba <osThreadNew+0x146>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d07e      	beq.n	80042ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041c0:	2318      	movs	r3, #24
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041c4:	2300      	movs	r3, #0
 80041c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041c8:	f107 031b 	add.w	r3, r7, #27
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d045      	beq.n	8004266 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <osThreadNew+0x74>
        name = attr->name;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <osThreadNew+0x9a>
 80041fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fe:	2b38      	cmp	r3, #56	; 0x38
 8004200:	d805      	bhi.n	800420e <osThreadNew+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <osThreadNew+0x9e>
        return (NULL);
 800420e:	2300      	movs	r3, #0
 8004210:	e054      	b.n	80042bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00e      	beq.n	8004248 <osThreadNew+0xd4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	2bbb      	cmp	r3, #187	; 0xbb
 8004230:	d90a      	bls.n	8004248 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <osThreadNew+0xd4>
        mem = 1;
 8004242:	2301      	movs	r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
 8004246:	e010      	b.n	800426a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10c      	bne.n	800426a <osThreadNew+0xf6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <osThreadNew+0xf6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <osThreadNew+0xf6>
          mem = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
 8004264:	e001      	b.n	800426a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	2b01      	cmp	r3, #1
 800426e:	d110      	bne.n	8004292 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004278:	9202      	str	r2, [sp, #8]
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004284:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f001 ff3e 	bl	8006108 <xTaskCreateStatic>
 800428c:	4603      	mov	r3, r0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e013      	b.n	80042ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d110      	bne.n	80042ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	b29a      	uxth	r2, r3
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f001 ff88 	bl	80061c0 <xTaskCreate>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <osThreadNew+0x146>
          hTask = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ba:	697b      	ldr	r3, [r7, #20]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3738      	adds	r7, #56	; 0x38
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	2000026c 	.word	0x2000026c

080042c8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ce:	f3ef 8305 	mrs	r3, IPSR
 80042d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	607b      	str	r3, [r7, #4]
  return(result);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <osThreadYield+0x32>
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <osThreadYield+0x5c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d109      	bne.n	8004302 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042ee:	f3ef 8311 	mrs	r3, BASEPRI
 80042f2:	603b      	str	r3, [r7, #0]
  return(result);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <osThreadYield+0x3a>
    stat = osErrorISR;
 80042fa:	f06f 0305 	mvn.w	r3, #5
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e009      	b.n	8004316 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <osThreadYield+0x60>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	2000026c 	.word	0x2000026c
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004334:	f3ef 8305 	mrs	r3, IPSR
 8004338:	613b      	str	r3, [r7, #16]
  return(result);
 800433a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	60fb      	str	r3, [r7, #12]
  return(result);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <osDelay+0x34>
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <osDelay+0x58>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d109      	bne.n	8004368 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	60bb      	str	r3, [r7, #8]
  return(result);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <osDelay+0x3c>
    stat = osErrorISR;
 8004360:	f06f 0305 	mvn.w	r3, #5
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e007      	b.n	8004378 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f002 f878 	bl	8006468 <vTaskDelay>
    }
  }

  return (stat);
 8004378:	697b      	ldr	r3, [r7, #20]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	2000026c 	.word	0x2000026c

08004388 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004394:	f3ef 8305 	mrs	r3, IPSR
 8004398:	617b      	str	r3, [r7, #20]
  return(result);
 800439a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800439c:	2b00      	cmp	r3, #0
 800439e:	d13d      	bne.n	800441c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a0:	f3ef 8310 	mrs	r3, PRIMASK
 80043a4:	613b      	str	r3, [r7, #16]
  return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d137      	bne.n	800441c <osEventFlagsNew+0x94>
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <osEventFlagsNew+0xa0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d105      	bne.n	80043c0 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043b4:	f3ef 8311 	mrs	r3, BASEPRI
 80043b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d12d      	bne.n	800441c <osEventFlagsNew+0x94>
    mem = -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d006      	beq.n	80043e2 <osEventFlagsNew+0x5a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b1f      	cmp	r3, #31
 80043da:	d902      	bls.n	80043e2 <osEventFlagsNew+0x5a>
        mem = 1;
 80043dc:	2301      	movs	r3, #1
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e00c      	b.n	80043fc <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <osEventFlagsNew+0x74>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <osEventFlagsNew+0x74>
          mem = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	e001      	b.n	80043fc <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d106      	bne.n	8004410 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fbd6 	bl	8004bb8 <xEventGroupCreateStatic>
 800440c:	61f8      	str	r0, [r7, #28]
 800440e:	e005      	b.n	800441c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004416:	f000 fc06 	bl	8004c26 <xEventGroupCreate>
 800441a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800441c:	69fb      	ldr	r3, [r7, #28]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	2000026c 	.word	0x2000026c

0800442c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <osEventFlagsSet+0x1e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800444a:	f06f 0303 	mvn.w	r3, #3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e03a      	b.n	80044c8 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004452:	f3ef 8305 	mrs	r3, IPSR
 8004456:	617b      	str	r3, [r7, #20]
  return(result);
 8004458:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	613b      	str	r3, [r7, #16]
  return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <osEventFlagsSet+0x52>
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <osEventFlagsSet+0xa8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d123      	bne.n	80044ba <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004472:	f3ef 8311 	mrs	r3, BASEPRI
 8004476:	60fb      	str	r3, [r7, #12]
  return(result);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01d      	beq.n	80044ba <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004482:	f107 0308 	add.w	r3, r7, #8
 8004486:	461a      	mov	r2, r3
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	69b8      	ldr	r0, [r7, #24]
 800448c:	f000 fd6e 	bl	8004f6c <xEventGroupSetBitsFromISR>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8004496:	f06f 0302 	mvn.w	r3, #2
 800449a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800449c:	e013      	b.n	80044c6 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <osEventFlagsSet+0x9a>
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <osEventFlagsSet+0xac>)
 80044aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80044b8:	e005      	b.n	80044c6 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	69b8      	ldr	r0, [r7, #24]
 80044be:	f000 fc9b 	bl	8004df8 <xEventGroupSetBits>
 80044c2:	61f8      	str	r0, [r7, #28]
 80044c4:	e000      	b.n	80044c8 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80044c6:	bf00      	nop
  }

  return (rflags);
 80044c8:	69fb      	ldr	r3, [r7, #28]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000026c 	.word	0x2000026c
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	; 0x38
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <osEventFlagsWait+0x22>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80044fe:	f06f 0303 	mvn.w	r3, #3
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	e059      	b.n	80045ba <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004506:	f3ef 8305 	mrs	r3, IPSR
 800450a:	61fb      	str	r3, [r7, #28]
  return(result);
 800450c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004512:	f3ef 8310 	mrs	r3, PRIMASK
 8004516:	61bb      	str	r3, [r7, #24]
  return(result);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <osEventFlagsWait+0x56>
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <osEventFlagsWait+0xe8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d109      	bne.n	800453a <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004526:	f3ef 8311 	mrs	r3, BASEPRI
 800452a:	617b      	str	r3, [r7, #20]
  return(result);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8004532:	f06f 0305 	mvn.w	r3, #5
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	e03f      	b.n	80045ba <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004548:	e001      	b.n	800454e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
 800455c:	e001      	b.n	8004562 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	6a38      	ldr	r0, [r7, #32]
 800456e:	f000 fb75 	bl	8004c5c <xEventGroupWaitBits>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	429a      	cmp	r2, r3
 8004584:	d019      	beq.n	80045ba <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 800458c:	f06f 0301 	mvn.w	r3, #1
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	e012      	b.n	80045ba <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004594:	f06f 0302 	mvn.w	r3, #2
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e00e      	b.n	80045ba <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80045ac:	f06f 0301 	mvn.w	r3, #1
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e002      	b.n	80045ba <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80045b4:	f06f 0302 	mvn.w	r3, #2
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3730      	adds	r7, #48	; 0x30
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	2000026c 	.word	0x2000026c

080045c8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08c      	sub	sp, #48	; 0x30
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d8:	f3ef 8305 	mrs	r3, IPSR
 80045dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80045de:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 8086 	bne.w	80046f2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e6:	f3ef 8310 	mrs	r3, PRIMASK
 80045ea:	617b      	str	r3, [r7, #20]
  return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d17f      	bne.n	80046f2 <osSemaphoreNew+0x12a>
 80045f2:	4b42      	ldr	r3, [pc, #264]	; (80046fc <osSemaphoreNew+0x134>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d105      	bne.n	8004606 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045fa:	f3ef 8311 	mrs	r3, BASEPRI
 80045fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d175      	bne.n	80046f2 <osSemaphoreNew+0x12a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d072      	beq.n	80046f2 <osSemaphoreNew+0x12a>
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d86e      	bhi.n	80046f2 <osSemaphoreNew+0x12a>
    mem = -1;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d006      	beq.n	8004636 <osSemaphoreNew+0x6e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b4f      	cmp	r3, #79	; 0x4f
 800462e:	d902      	bls.n	8004636 <osSemaphoreNew+0x6e>
        mem = 1;
 8004630:	2301      	movs	r3, #1
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	e00c      	b.n	8004650 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <osSemaphoreNew+0x88>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <osSemaphoreNew+0x88>
          mem = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	e001      	b.n	8004650 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d04c      	beq.n	80046f2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d128      	bne.n	80046b0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10a      	bne.n	800467a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2203      	movs	r2, #3
 800466a:	9200      	str	r2, [sp, #0]
 800466c:	2200      	movs	r2, #0
 800466e:	2100      	movs	r1, #0
 8004670:	2001      	movs	r0, #1
 8004672:	f000 fda7 	bl	80051c4 <xQueueGenericCreateStatic>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24
 8004678:	e005      	b.n	8004686 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800467a:	2203      	movs	r2, #3
 800467c:	2100      	movs	r1, #0
 800467e:	2001      	movs	r0, #1
 8004680:	f000 fe17 	bl	80052b2 <xQueueGenericCreate>
 8004684:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d022      	beq.n	80046d2 <osSemaphoreNew+0x10a>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01f      	beq.n	80046d2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004692:	2300      	movs	r3, #0
 8004694:	2200      	movs	r2, #0
 8004696:	2100      	movs	r1, #0
 8004698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800469a:	f000 fed5 	bl	8005448 <xQueueGenericSend>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d016      	beq.n	80046d2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80046a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a6:	f001 fb5f 	bl	8005d68 <vQueueDelete>
            hSemaphore = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
 80046ae:	e010      	b.n	80046d2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d108      	bne.n	80046c8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fe58 	bl	8005374 <xQueueCreateCountingSemaphoreStatic>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24
 80046c6:	e004      	b.n	80046d2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fe89 	bl	80053e2 <xQueueCreateCountingSemaphore>
 80046d0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osSemaphoreNew+0x11e>
          name = attr->name;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61fb      	str	r3, [r7, #28]
 80046e4:	e001      	b.n	80046ea <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80046ea:	69f9      	ldr	r1, [r7, #28]
 80046ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ee:	f001 fc85 	bl	8005ffc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	2000026c 	.word	0x2000026c

08004700 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004718:	f06f 0303 	mvn.w	r3, #3
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e04b      	b.n	80047b8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004720:	f3ef 8305 	mrs	r3, IPSR
 8004724:	617b      	str	r3, [r7, #20]
  return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472c:	f3ef 8310 	mrs	r3, PRIMASK
 8004730:	613b      	str	r3, [r7, #16]
  return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <osSemaphoreAcquire+0x4c>
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <osSemaphoreAcquire+0xc4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d128      	bne.n	8004792 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004740:	f3ef 8311 	mrs	r3, BASEPRI
 8004744:	60fb      	str	r3, [r7, #12]
  return(result);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d022      	beq.n	8004792 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004752:	f06f 0303 	mvn.w	r3, #3
 8004756:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004758:	e02d      	b.n	80047b6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	461a      	mov	r2, r3
 8004764:	2100      	movs	r1, #0
 8004766:	69b8      	ldr	r0, [r7, #24]
 8004768:	f001 fa7e 	bl	8005c68 <xQueueReceiveFromISR>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d003      	beq.n	800477a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004772:	f06f 0302 	mvn.w	r3, #2
 8004776:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004778:	e01d      	b.n	80047b6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <osSemaphoreAcquire+0xb6>
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <osSemaphoreAcquire+0xc8>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004790:	e011      	b.n	80047b6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	69b8      	ldr	r0, [r7, #24]
 8004796:	f001 f95b 	bl	8005a50 <xQueueSemaphoreTake>
 800479a:	4603      	mov	r3, r0
 800479c:	2b01      	cmp	r3, #1
 800479e:	d00b      	beq.n	80047b8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80047a6:	f06f 0301 	mvn.w	r3, #1
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e004      	b.n	80047b8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80047ae:	f06f 0302 	mvn.w	r3, #2
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	e000      	b.n	80047b8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80047b6:	bf00      	nop
      }
    }
  }

  return (stat);
 80047b8:	69fb      	ldr	r3, [r7, #28]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2000026c 	.word	0x2000026c
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80047e2:	f06f 0303 	mvn.w	r3, #3
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e03e      	b.n	8004868 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ea:	f3ef 8305 	mrs	r3, IPSR
 80047ee:	617b      	str	r3, [r7, #20]
  return(result);
 80047f0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	613b      	str	r3, [r7, #16]
  return(result);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <osSemaphoreRelease+0x4a>
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <osSemaphoreRelease+0xa8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d120      	bne.n	800484c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800480a:	f3ef 8311 	mrs	r3, BASEPRI
 800480e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	4619      	mov	r1, r3
 8004820:	69b8      	ldr	r0, [r7, #24]
 8004822:	f000 ffa7 	bl	8005774 <xQueueGiveFromISR>
 8004826:	4603      	mov	r3, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d003      	beq.n	8004834 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800482c:	f06f 0302 	mvn.w	r3, #2
 8004830:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004832:	e018      	b.n	8004866 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d015      	beq.n	8004866 <osSemaphoreRelease+0x9a>
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <osSemaphoreRelease+0xac>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800484a:	e00c      	b.n	8004866 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	2100      	movs	r1, #0
 8004852:	69b8      	ldr	r0, [r7, #24]
 8004854:	f000 fdf8 	bl	8005448 <xQueueGenericSend>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d004      	beq.n	8004868 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800485e:	f06f 0302 	mvn.w	r3, #2
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e000      	b.n	8004868 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004866:	bf00      	nop
    }
  }

  return (stat);
 8004868:	69fb      	ldr	r3, [r7, #28]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	2000026c 	.word	0x2000026c
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	; 0x30
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800488c:	f3ef 8305 	mrs	r3, IPSR
 8004890:	61bb      	str	r3, [r7, #24]
  return(result);
 8004892:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004894:	2b00      	cmp	r3, #0
 8004896:	d16f      	bne.n	8004978 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004898:	f3ef 8310 	mrs	r3, PRIMASK
 800489c:	617b      	str	r3, [r7, #20]
  return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d169      	bne.n	8004978 <osMessageQueueNew+0xfc>
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <osMessageQueueNew+0x108>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d105      	bne.n	80048b8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ac:	f3ef 8311 	mrs	r3, BASEPRI
 80048b0:	613b      	str	r3, [r7, #16]
  return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d15f      	bne.n	8004978 <osMessageQueueNew+0xfc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d05c      	beq.n	8004978 <osMessageQueueNew+0xfc>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d059      	beq.n	8004978 <osMessageQueueNew+0xfc>
    mem = -1;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d029      	beq.n	8004924 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <osMessageQueueNew+0x82>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b4f      	cmp	r3, #79	; 0x4f
 80048de:	d90e      	bls.n	80048fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68b9      	ldr	r1, [r7, #8]
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <osMessageQueueNew+0x82>
        mem = 1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	e014      	b.n	8004928 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d110      	bne.n	8004928 <osMessageQueueNew+0xac>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10c      	bne.n	8004928 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <osMessageQueueNew+0xac>
          mem = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	623b      	str	r3, [r7, #32]
 8004922:	e001      	b.n	8004928 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10b      	bne.n	8004946 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2100      	movs	r1, #0
 8004938:	9100      	str	r1, [sp, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fc41 	bl	80051c4 <xQueueGenericCreateStatic>
 8004942:	6278      	str	r0, [r7, #36]	; 0x24
 8004944:	e008      	b.n	8004958 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800494c:	2200      	movs	r2, #0
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fcae 	bl	80052b2 <xQueueGenericCreate>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e001      	b.n	8004970 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004974:	f001 fb42 	bl	8005ffc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800497a:	4618      	mov	r0, r3
 800497c:	3728      	adds	r7, #40	; 0x28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	2000026c 	.word	0x2000026c

08004988 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4613      	mov	r3, r2
 8004996:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800499c:	2300      	movs	r3, #0
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a0:	f3ef 8305 	mrs	r3, IPSR
 80049a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80049a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <osMessageQueuePut+0x44>
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <osMessageQueuePut+0xe0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d12e      	bne.n	8004a1e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c0:	f3ef 8311 	mrs	r3, BASEPRI
 80049c4:	617b      	str	r3, [r7, #20]
  return(result);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d028      	beq.n	8004a1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <osMessageQueuePut+0x56>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <osMessageQueuePut+0x56>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80049de:	f06f 0303 	mvn.w	r3, #3
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049e4:	e039      	b.n	8004a5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80049ea:	f107 0210 	add.w	r2, r7, #16
 80049ee:	2300      	movs	r3, #0
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	6a38      	ldr	r0, [r7, #32]
 80049f4:	f000 fe26 	bl	8005644 <xQueueGenericSendFromISR>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d003      	beq.n	8004a06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80049fe:	f06f 0302 	mvn.w	r3, #2
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a04:	e029      	b.n	8004a5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d026      	beq.n	8004a5a <osMessageQueuePut+0xd2>
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <osMessageQueuePut+0xe4>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a1c:	e01d      	b.n	8004a5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <osMessageQueuePut+0xa2>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004a2a:	f06f 0303 	mvn.w	r3, #3
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	e014      	b.n	8004a5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a32:	2300      	movs	r3, #0
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	6a38      	ldr	r0, [r7, #32]
 8004a3a:	f000 fd05 	bl	8005448 <xQueueGenericSend>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d00b      	beq.n	8004a5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004a4a:	f06f 0301 	mvn.w	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a50:	e004      	b.n	8004a5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004a52:	f06f 0302 	mvn.w	r3, #2
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	e000      	b.n	8004a5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000026c 	.word	0x2000026c
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a92:	f3ef 8310 	mrs	r3, PRIMASK
 8004a96:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <osMessageQueueGet+0x42>
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <osMessageQueueGet+0xdc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d12e      	bne.n	8004b04 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aaa:	617b      	str	r3, [r7, #20]
  return(result);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d028      	beq.n	8004b04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <osMessageQueueGet+0x54>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <osMessageQueueGet+0x54>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004ac4:	f06f 0303 	mvn.w	r3, #3
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aca:	e038      	b.n	8004b3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6a38      	ldr	r0, [r7, #32]
 8004ada:	f001 f8c5 	bl	8005c68 <xQueueReceiveFromISR>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d003      	beq.n	8004aec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004ae4:	f06f 0302 	mvn.w	r3, #2
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004aea:	e028      	b.n	8004b3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d025      	beq.n	8004b3e <osMessageQueueGet+0xce>
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <osMessageQueueGet+0xe0>)
 8004af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b02:	e01c      	b.n	8004b3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <osMessageQueueGet+0xa0>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004b10:	f06f 0303 	mvn.w	r3, #3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	e013      	b.n	8004b40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	6a38      	ldr	r0, [r7, #32]
 8004b1e:	f000 feb7 	bl	8005890 <xQueueReceive>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d00b      	beq.n	8004b40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004b2e:	f06f 0301 	mvn.w	r3, #1
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	e004      	b.n	8004b40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004b36:	f06f 0302 	mvn.w	r3, #2
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e000      	b.n	8004b40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3728      	adds	r7, #40	; 0x28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2000026c 	.word	0x2000026c
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <vApplicationGetIdleTaskMemory+0x28>)
 8004b64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2280      	movs	r2, #128	; 0x80
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	20000270 	.word	0x20000270
 8004b80:	2000032c 	.word	0x2000032c

08004b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a07      	ldr	r2, [pc, #28]	; (8004bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8004b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ba2:	601a      	str	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000052c 	.word	0x2000052c
 8004bb4:	200005e8 	.word	0x200005e8

08004bb8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004bdc:	2320      	movs	r3, #32
 8004bde:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d00a      	beq.n	8004bfc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60fb      	str	r3, [r7, #12]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f9bf 	bl	8004f94 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004c1c:	697b      	ldr	r3, [r7, #20]
	}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004c2c:	2020      	movs	r0, #32
 8004c2e:	f003 f875 	bl	8007d1c <pvPortMalloc>
 8004c32:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f9a5 	bl	8004f94 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004c50:	687b      	ldr	r3, [r7, #4]
	}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b090      	sub	sp, #64	; 0x40
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xEventGroupWaitBits+0x36>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	623b      	str	r3, [r7, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	61fb      	str	r3, [r7, #28]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xEventGroupWaitBits+0x72>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	61bb      	str	r3, [r7, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cce:	f002 f8ff 	bl	8006ed0 <xTaskGetSchedulerState>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <xEventGroupWaitBits+0x82>
 8004cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xEventGroupWaitBits+0x86>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <xEventGroupWaitBits+0x88>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	617b      	str	r3, [r7, #20]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004cfe:	f001 fc57 	bl	80065b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d0e:	f000 f90b 	bl	8004f28 <prvTestWaitCondition>
 8004d12:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d028      	beq.n	8004d7a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	401a      	ands	r2, r3
 8004d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e020      	b.n	8004d7a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	633b      	str	r3, [r7, #48]	; 0x30
 8004d46:	e018      	b.n	8004d7a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d62:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	1d18      	adds	r0, r3, #4
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d70:	4619      	mov	r1, r3
 8004d72:	f001 fe1d 	bl	80069b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004d7a:	f001 fc27 	bl	80065cc <xTaskResumeAll>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d031      	beq.n	8004dea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <xEventGroupWaitBits+0x198>)
 8004d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004d9c:	f002 fa18 	bl	80071d0 <uxTaskResetEventItemValue>
 8004da0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11a      	bne.n	8004de2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004dac:	f002 feb6 	bl	8007b1c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004dbc:	f000 f8b4 	bl	8004f28 <prvTestWaitCondition>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8004dde:	f002 fecd 	bl	8007b7c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3740      	adds	r7, #64	; 0x40
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08e      	sub	sp, #56	; 0x38
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004e02:	2300      	movs	r3, #0
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xEventGroupSetBits+0x32>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <xEventGroupSetBits+0x52>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	3308      	adds	r3, #8
 8004e54:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004e56:	f001 fbab 	bl	80065b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004e6c:	e03c      	b.n	8004ee8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e84:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e8c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d108      	bne.n	8004eaa <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea8:	e008      	b.n	8004ebc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d101      	bne.n	8004ebc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004edc:	4619      	mov	r1, r3
 8004ede:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ee0:	f001 fe32 	bl	8006b48 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1be      	bne.n	8004e6e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	401a      	ands	r2, r3
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004efe:	f001 fb65 	bl	80065cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	681b      	ldr	r3, [r3, #0]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3738      	adds	r7, #56	; 0x38
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff6c 	bl	8004df8 <xEventGroupSetBits>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e007      	b.n	8004f5e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d101      	bne.n	8004f5e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	4804      	ldr	r0, [pc, #16]	; (8004f90 <xEventGroupSetBitsFromISR+0x24>)
 8004f80:	f002 fcb8 	bl	80078f4 <xTimerPendFunctionCallFromISR>
 8004f84:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004f86:	697b      	ldr	r3, [r7, #20]
	}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	08004f0f 	.word	0x08004f0f

08004f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f103 0208 	add.w	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f103 0208 	add.w	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0208 	add.w	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bc80      	pop	{r7}
 8004fe8:	4770      	bx	lr

08004fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d103      	bne.n	8005050 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e00c      	b.n	800506a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3308      	adds	r3, #8
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e002      	b.n	800505e <vListInsert+0x2e>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	d2f6      	bcs.n	8005058 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6892      	ldr	r2, [r2, #8]
 80050b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6852      	ldr	r2, [r2, #4]
 80050c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d103      	bne.n	80050d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr
	...

080050f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericReset+0x2a>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60bb      	str	r3, [r7, #8]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800511e:	f002 fcfd 	bl	8007b1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	441a      	add	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	3b01      	subs	r3, #1
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	441a      	add	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d114      	bne.n	800519e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01a      	beq.n	80051b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3310      	adds	r3, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fc7d 	bl	8006a80 <xTaskRemoveFromEventList>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <xQueueGenericReset+0xcc>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	e009      	b.n	80051b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3310      	adds	r3, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fef6 	bl	8004f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3324      	adds	r3, #36	; 0x24
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fef1 	bl	8004f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051b2:	f002 fce3 	bl	8007b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b6:	2301      	movs	r3, #1
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08e      	sub	sp, #56	; 0x38
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x52>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x56>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x58>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <xQueueGenericCreateStatic+0x7e>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <xQueueGenericCreateStatic+0x82>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericCreateStatic+0x84>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	61fb      	str	r3, [r7, #28]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005262:	2350      	movs	r3, #80	; 0x50
 8005264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d00a      	beq.n	8005282 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	61bb      	str	r3, [r7, #24]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005294:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f843 	bl	800532e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3730      	adds	r7, #48	; 0x30
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08a      	sub	sp, #40	; 0x28
 80052b6:	af02      	add	r7, sp, #8
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <xQueueGenericCreate+0x2a>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	613b      	str	r3, [r7, #16]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d102      	bne.n	80052e8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e004      	b.n	80052f2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3350      	adds	r3, #80	; 0x50
 80052f6:	4618      	mov	r0, r3
 80052f8:	f002 fd10 	bl	8007d1c <pvPortMalloc>
 80052fc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00f      	beq.n	8005324 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3350      	adds	r3, #80	; 0x50
 8005308:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005312:	79fa      	ldrb	r2, [r7, #7]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f805 	bl	800532e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005324:	69bb      	ldr	r3, [r7, #24]
	}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e002      	b.n	8005350 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800535c:	2101      	movs	r1, #1
 800535e:	69b8      	ldr	r0, [r7, #24]
 8005360:	f7ff fec8 	bl	80050f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	61bb      	str	r3, [r7, #24]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d90a      	bls.n	80053ba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	617b      	str	r3, [r7, #20]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053ba:	2302      	movs	r3, #2
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	2100      	movs	r1, #0
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fefd 	bl	80051c4 <xQueueGenericCreateStatic>
 80053ca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053d8:	69fb      	ldr	r3, [r7, #28]
	}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	613b      	str	r3, [r7, #16]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	d90a      	bls.n	8005426 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005426:	2202      	movs	r2, #2
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ff41 	bl	80052b2 <xQueueGenericCreate>
 8005430:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800543e:	697b      	ldr	r3, [r7, #20]
	}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	; 0x38
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericSend+0x32>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <xQueueGenericSend+0x40>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <xQueueGenericSend+0x44>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <xQueueGenericSend+0x46>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x6e>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <xQueueGenericSend+0x72>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericSend+0x74>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	623b      	str	r3, [r7, #32]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054d6:	f001 fcfb 	bl	8006ed0 <xTaskGetSchedulerState>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericSend+0x9e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSend+0xa2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSend+0xa4>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericSend+0xbe>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005506:	f002 fb09 	bl	8007b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <xQueueGenericSend+0xd4>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d129      	bne.n	8005570 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005522:	f000 fc5b 	bl	8005ddc <prvCopyDataToQueue>
 8005526:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d010      	beq.n	8005552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	3324      	adds	r3, #36	; 0x24
 8005534:	4618      	mov	r0, r3
 8005536:	f001 faa3 	bl	8006a80 <xTaskRemoveFromEventList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	e00a      	b.n	8005568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005558:	4b39      	ldr	r3, [pc, #228]	; (8005640 <xQueueGenericSend+0x1f8>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005568:	f002 fb08 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	e063      	b.n	8005638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005576:	f002 fb01 	bl	8007b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800557a:	2300      	movs	r3, #0
 800557c:	e05c      	b.n	8005638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fb3f 	bl	8006c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558e:	2301      	movs	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005592:	f002 faf3 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005596:	f001 f80b 	bl	80065b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800559a:	f002 fabf 	bl	8007b1c <vPortEnterCritical>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d103      	bne.n	80055b4 <xQueueGenericSend+0x16c>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c0:	d103      	bne.n	80055ca <xQueueGenericSend+0x182>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ca:	f002 fad7 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ce:	1d3a      	adds	r2, r7, #4
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 fb2e 	bl	8006c38 <xTaskCheckForTimeOut>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d124      	bne.n	800562c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e4:	f000 fcf2 	bl	8005fcc <prvIsQueueFull>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3310      	adds	r3, #16
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f9b6 	bl	8006968 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 fc7d 	bl	8005efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005602:	f000 ffe3 	bl	80065cc <xTaskResumeAll>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af7c 	bne.w	8005506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	e772      	b.n	8005506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005622:	f000 fc6b 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005626:	f000 ffd1 	bl	80065cc <xTaskResumeAll>
 800562a:	e76c      	b.n	8005506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fc65 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005632:	f000 ffcb 	bl	80065cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005636:	2300      	movs	r3, #0
		}
	}
}
 8005638:	4618      	mov	r0, r3
 800563a:	3738      	adds	r7, #56	; 0x38
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <xQueueGenericSendFromISR+0x3c>
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <xQueueGenericSendFromISR+0x40>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueGenericSendFromISR+0x42>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	623b      	str	r3, [r7, #32]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSendFromISR+0x6a>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSendFromISR+0x6e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSendFromISR+0x70>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	61fb      	str	r3, [r7, #28]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ce:	f002 fae7 	bl	8007ca0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056d2:	f3ef 8211 	mrs	r2, BASEPRI
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61ba      	str	r2, [r7, #24]
 80056e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <xQueueGenericSendFromISR+0xbc>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d12c      	bne.n	800575a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005710:	f000 fb64 	bl	8005ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005714:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d112      	bne.n	8005744 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f001 f9a8 	bl	8006a80 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00e      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e007      	b.n	8005754 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005744:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005748:	3301      	adds	r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b25a      	sxtb	r2, r3
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005758:	e001      	b.n	800575e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800576c:	4618      	mov	r0, r3
 800576e:	3738      	adds	r7, #56	; 0x38
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08e      	sub	sp, #56	; 0x38
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	e7fe      	b.n	800579c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <xQueueGiveFromISR+0x48>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	61fb      	str	r3, [r7, #28]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <xQueueGiveFromISR+0x58>
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <xQueueGiveFromISR+0x5c>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <xQueueGiveFromISR+0x5e>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <xQueueGiveFromISR+0x78>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	61bb      	str	r3, [r7, #24]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ec:	f002 fa58 	bl	8007ca0 <vPortValidateInterruptPriority>
	__asm volatile
 80057f0:	f3ef 8211 	mrs	r2, BASEPRI
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	617a      	str	r2, [r7, #20]
 8005806:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005808:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005818:	429a      	cmp	r2, r3
 800581a:	d22b      	bcs.n	8005874 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800582e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d112      	bne.n	800585e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	3324      	adds	r3, #36	; 0x24
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f91b 	bl	8006a80 <xTaskRemoveFromEventList>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	e007      	b.n	800586e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800585e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005862:	3301      	adds	r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	b25a      	sxtb	r2, r3
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800586e:	2301      	movs	r3, #1
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	e001      	b.n	8005878 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005874:	2300      	movs	r3, #0
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f383 8811 	msr	BASEPRI, r3
}
 8005882:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005886:	4618      	mov	r0, r3
 8005888:	3738      	adds	r7, #56	; 0x38
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800589c:	2300      	movs	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <xQueueReceive+0x30>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	623b      	str	r3, [r7, #32]
}
 80058bc:	bf00      	nop
 80058be:	e7fe      	b.n	80058be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <xQueueReceive+0x3e>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <xQueueReceive+0x42>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <xQueueReceive+0x44>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueReceive+0x5e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	61fb      	str	r3, [r7, #28]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ee:	f001 faef 	bl	8006ed0 <xTaskGetSchedulerState>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <xQueueReceive+0x6e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <xQueueReceive+0x72>
 80058fe:	2301      	movs	r3, #1
 8005900:	e000      	b.n	8005904 <xQueueReceive+0x74>
 8005902:	2300      	movs	r3, #0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <xQueueReceive+0x8e>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	61bb      	str	r3, [r7, #24]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800591e:	f002 f8fd 	bl	8007b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d01f      	beq.n	800596e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005932:	f000 fabd 	bl	8005eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00f      	beq.n	8005966 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	3310      	adds	r3, #16
 800594a:	4618      	mov	r0, r3
 800594c:	f001 f898 	bl	8006a80 <xTaskRemoveFromEventList>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <xQueueReceive+0x1bc>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005966:	f002 f909 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 800596a:	2301      	movs	r3, #1
 800596c:	e069      	b.n	8005a42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d103      	bne.n	800597c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005974:	f002 f902 	bl	8007b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005978:	2300      	movs	r3, #0
 800597a:	e062      	b.n	8005a42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005982:	f107 0310 	add.w	r3, r7, #16
 8005986:	4618      	mov	r0, r3
 8005988:	f001 f940 	bl	8006c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005990:	f002 f8f4 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005994:	f000 fe0c 	bl	80065b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005998:	f002 f8c0 	bl	8007b1c <vPortEnterCritical>
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d103      	bne.n	80059b2 <xQueueReceive+0x122>
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d103      	bne.n	80059c8 <xQueueReceive+0x138>
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c8:	f002 f8d8 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059cc:	1d3a      	adds	r2, r7, #4
 80059ce:	f107 0310 	add.w	r3, r7, #16
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f92f 	bl	8006c38 <xTaskCheckForTimeOut>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d123      	bne.n	8005a28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e2:	f000 fadd 	bl	8005fa0 <prvIsQueueEmpty>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d017      	beq.n	8005a1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	3324      	adds	r3, #36	; 0x24
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 ffb7 	bl	8006968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fc:	f000 fa7e 	bl	8005efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a00:	f000 fde4 	bl	80065cc <xTaskResumeAll>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d189      	bne.n	800591e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a0a:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <xQueueReceive+0x1bc>)
 8005a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	e780      	b.n	800591e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1e:	f000 fa6d 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a22:	f000 fdd3 	bl	80065cc <xTaskResumeAll>
 8005a26:	e77a      	b.n	800591e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a2a:	f000 fa67 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a2e:	f000 fdcd 	bl	80065cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a34:	f000 fab4 	bl	8005fa0 <prvIsQueueEmpty>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f43f af6f 	beq.w	800591e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3730      	adds	r7, #48	; 0x30
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	; 0x38
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	623b      	str	r3, [r7, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	61fb      	str	r3, [r7, #28]
}
 8005a9c:	bf00      	nop
 8005a9e:	e7fe      	b.n	8005a9e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa0:	f001 fa16 	bl	8006ed0 <xTaskGetSchedulerState>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <xQueueSemaphoreTake+0x60>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <xQueueSemaphoreTake+0x64>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <xQueueSemaphoreTake+0x66>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	61bb      	str	r3, [r7, #24]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad0:	f002 f824 	bl	8007b1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d024      	beq.n	8005b2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	1e5a      	subs	r2, r3, #1
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005af0:	f001 fb86 	bl	8007200 <pvTaskIncrementMutexHeldCount>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00f      	beq.n	8005b22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	3310      	adds	r3, #16
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 ffba 	bl	8006a80 <xTaskRemoveFromEventList>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b12:	4b54      	ldr	r3, [pc, #336]	; (8005c64 <xQueueSemaphoreTake+0x214>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b22:	f002 f82b 	bl	8007b7c <vPortExitCritical>
				return pdPASS;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e097      	b.n	8005c5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d111      	bne.n	8005b54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	617b      	str	r3, [r7, #20]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b4c:	f002 f816 	bl	8007b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e082      	b.n	8005c5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5a:	f107 030c 	add.w	r3, r7, #12
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f854 	bl	8006c0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b64:	2301      	movs	r3, #1
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b68:	f002 f808 	bl	8007b7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6c:	f000 fd20 	bl	80065b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b70:	f001 ffd4 	bl	8007b1c <vPortEnterCritical>
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d103      	bne.n	8005b8a <xQueueSemaphoreTake+0x13a>
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d103      	bne.n	8005ba0 <xQueueSemaphoreTake+0x150>
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba0:	f001 ffec 	bl	8007b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 f843 	bl	8006c38 <xTaskCheckForTimeOut>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d132      	bne.n	8005c1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bba:	f000 f9f1 	bl	8005fa0 <prvIsQueueEmpty>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d026      	beq.n	8005c12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005bcc:	f001 ffa6 	bl	8007b1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 f999 	bl	8006f0c <xTaskPriorityInherit>
 8005bda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005bdc:	f001 ffce 	bl	8007b7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 febd 	bl	8006968 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bf0:	f000 f984 	bl	8005efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bf4:	f000 fcea 	bl	80065cc <xTaskResumeAll>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f af68 	bne.w	8005ad0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005c00:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <xQueueSemaphoreTake+0x214>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	e75e      	b.n	8005ad0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c14:	f000 f972 	bl	8005efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c18:	f000 fcd8 	bl	80065cc <xTaskResumeAll>
 8005c1c:	e758      	b.n	8005ad0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c20:	f000 f96c 	bl	8005efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c24:	f000 fcd2 	bl	80065cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c2a:	f000 f9b9 	bl	8005fa0 <prvIsQueueEmpty>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f43f af4d 	beq.w	8005ad0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005c3c:	f001 ff6e 	bl	8007b1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c42:	f000 f8b4 	bl	8005dae <prvGetDisinheritPriorityAfterTimeout>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f001 fa38 	bl	80070c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c54:	f001 ff92 	bl	8007b7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3738      	adds	r7, #56	; 0x38
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	623b      	str	r3, [r7, #32]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d103      	bne.n	8005ca2 <xQueueReceiveFromISR+0x3a>
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueReceiveFromISR+0x3e>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueReceiveFromISR+0x40>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10a      	bne.n	8005cc2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61fb      	str	r3, [r7, #28]
}
 8005cbe:	bf00      	nop
 8005cc0:	e7fe      	b.n	8005cc0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cc2:	f001 ffed 	bl	8007ca0 <vPortValidateInterruptPriority>
	__asm volatile
 8005cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	61ba      	str	r2, [r7, #24]
 8005cdc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005cde:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02f      	beq.n	8005d4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfc:	f000 f8d8 	bl	8005eb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	1e5a      	subs	r2, r3, #1
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d112      	bne.n	8005d38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 feae 	bl	8006a80 <xTaskRemoveFromEventList>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00e      	beq.n	8005d48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e007      	b.n	8005d48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	b25a      	sxtb	r2, r3
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4c:	e001      	b.n	8005d52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f383 8811 	msr	BASEPRI, r3
}
 8005d5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3738      	adds	r7, #56	; 0x38
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <vQueueDelete+0x28>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60bb      	str	r3, [r7, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f95b 	bl	800604c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f002 f87f 	bl	8007ea4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dae:	b480      	push	{r7}
 8005db0:	b085      	sub	sp, #20
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e001      	b.n	8005dd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
	}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10d      	bne.n	8005e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d14d      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 f8ee 	bl	8006fe8 <xTaskPriorityDisinherit>
 8005e0c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
 8005e14:	e043      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d119      	bne.n	8005e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6898      	ldr	r0, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	461a      	mov	r2, r3
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	f002 f976 	bl	8008118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d32b      	bcc.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	e026      	b.n	8005e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68d8      	ldr	r0, [r3, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	f002 f95c 	bl	8008118 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	425b      	negs	r3, r3
 8005e6a:	441a      	add	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d207      	bcs.n	8005e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	425b      	negs	r3, r3
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d105      	bne.n	8005e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ea6:	697b      	ldr	r3, [r7, #20]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d018      	beq.n	8005ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	441a      	add	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d303      	bcc.n	8005ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68d9      	ldr	r1, [r3, #12]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	6838      	ldr	r0, [r7, #0]
 8005ef0:	f002 f912 	bl	8008118 <memcpy>
	}
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f04:	f001 fe0a 	bl	8007b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f10:	e011      	b.n	8005f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d012      	beq.n	8005f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3324      	adds	r3, #36	; 0x24
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fdae 	bl	8006a80 <xTaskRemoveFromEventList>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f2a:	f000 fee7 	bl	8006cfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dce9      	bgt.n	8005f12 <prvUnlockQueue+0x16>
 8005f3e:	e000      	b.n	8005f42 <prvUnlockQueue+0x46>
					break;
 8005f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	22ff      	movs	r2, #255	; 0xff
 8005f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f4a:	f001 fe17 	bl	8007b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f4e:	f001 fde5 	bl	8007b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f5a:	e011      	b.n	8005f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3310      	adds	r3, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fd89 	bl	8006a80 <xTaskRemoveFromEventList>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f74:	f000 fec2 	bl	8006cfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dce9      	bgt.n	8005f5c <prvUnlockQueue+0x60>
 8005f88:	e000      	b.n	8005f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	22ff      	movs	r2, #255	; 0xff
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f94:	f001 fdf2 	bl	8007b7c <vPortExitCritical>
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fa8:	f001 fdb8 	bl	8007b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e001      	b.n	8005fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f001 fddd 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd4:	f001 fda2 	bl	8007b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	e001      	b.n	8005fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fee:	f001 fdc5 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e014      	b.n	8006036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800600c:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <vQueueAddToRegistry+0x4c>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006018:	490b      	ldr	r1, [pc, #44]	; (8006048 <vQueueAddToRegistry+0x4c>)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006022:	4a09      	ldr	r2, [pc, #36]	; (8006048 <vQueueAddToRegistry+0x4c>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800602e:	e006      	b.n	800603e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b07      	cmp	r3, #7
 800603a:	d9e7      	bls.n	800600c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	200009e8 	.word	0x200009e8

0800604c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e016      	b.n	8006088 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <vQueueUnregisterQueue+0x50>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4413      	add	r3, r2
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d10b      	bne.n	8006082 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800606a:	4a0c      	ldr	r2, [pc, #48]	; (800609c <vQueueUnregisterQueue+0x50>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2100      	movs	r1, #0
 8006070:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006074:	4a09      	ldr	r2, [pc, #36]	; (800609c <vQueueUnregisterQueue+0x50>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4413      	add	r3, r2
 800607c:	2200      	movs	r2, #0
 800607e:	605a      	str	r2, [r3, #4]
				break;
 8006080:	e006      	b.n	8006090 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b07      	cmp	r3, #7
 800608c:	d9e5      	bls.n	800605a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	200009e8 	.word	0x200009e8

080060a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060b0:	f001 fd34 	bl	8007b1c <vPortEnterCritical>
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d103      	bne.n	80060ca <vQueueWaitForMessageRestricted+0x2a>
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d103      	bne.n	80060e0 <vQueueWaitForMessageRestricted+0x40>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e0:	f001 fd4c 	bl	8007b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3324      	adds	r3, #36	; 0x24
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fc97 	bl	8006a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f7ff fefe 	bl	8005efc <prvUnlockQueue>
	}
 8006100:	bf00      	nop
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af04      	add	r7, sp, #16
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
 8006114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	623b      	str	r3, [r7, #32]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <xTaskCreateStatic+0x46>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	61fb      	str	r3, [r7, #28]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800614e:	23bc      	movs	r3, #188	; 0xbc
 8006150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	2bbc      	cmp	r3, #188	; 0xbc
 8006156:	d00a      	beq.n	800616e <xTaskCreateStatic+0x66>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	61bb      	str	r3, [r7, #24]
}
 800616a:	bf00      	nop
 800616c:	e7fe      	b.n	800616c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01e      	beq.n	80061b2 <xTaskCreateStatic+0xaa>
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01b      	beq.n	80061b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006182:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	2202      	movs	r2, #2
 8006188:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800618c:	2300      	movs	r3, #0
 800618e:	9303      	str	r3, [sp, #12]
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	9302      	str	r3, [sp, #8]
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	9301      	str	r3, [sp, #4]
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f851 	bl	800624c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061ac:	f000 f8ec 	bl	8006388 <prvAddNewTaskToReadyList>
 80061b0:	e001      	b.n	80061b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061b6:	697b      	ldr	r3, [r7, #20]
	}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f001 fda1 	bl	8007d1c <pvPortMalloc>
 80061da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061e2:	20bc      	movs	r0, #188	; 0xbc
 80061e4:	f001 fd9a 	bl	8007d1c <pvPortMalloc>
 80061e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
 80061f6:	e005      	b.n	8006204 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061f8:	6978      	ldr	r0, [r7, #20]
 80061fa:	f001 fe53 	bl	8007ea4 <vPortFree>
 80061fe:	e001      	b.n	8006204 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d017      	beq.n	800623a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	2300      	movs	r3, #0
 8006216:	9303      	str	r3, [sp, #12]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	9302      	str	r3, [sp, #8]
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f80f 	bl	800624c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800622e:	69f8      	ldr	r0, [r7, #28]
 8006230:	f000 f8aa 	bl	8006388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006234:	2301      	movs	r3, #1
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	e002      	b.n	8006240 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006240:	69bb      	ldr	r3, [r7, #24]
	}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	461a      	mov	r2, r3
 8006264:	21a5      	movs	r1, #165	; 0xa5
 8006266:	f001 ff65 	bl	8008134 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006274:	3b01      	subs	r3, #1
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	f023 0307 	bic.w	r3, r3, #7
 8006282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	617b      	str	r3, [r7, #20]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062a4:	2300      	movs	r3, #0
 80062a6:	61fb      	str	r3, [r7, #28]
 80062a8:	e012      	b.n	80062d0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	7819      	ldrb	r1, [r3, #0]
 80062b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	3334      	adds	r3, #52	; 0x34
 80062ba:	460a      	mov	r2, r1
 80062bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d006      	beq.n	80062d8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3301      	adds	r3, #1
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b0f      	cmp	r3, #15
 80062d4:	d9e9      	bls.n	80062aa <prvInitialiseNewTask+0x5e>
 80062d6:	e000      	b.n	80062da <prvInitialiseNewTask+0x8e>
		{
			break;
 80062d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	2b37      	cmp	r3, #55	; 0x37
 80062e6:	d901      	bls.n	80062ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062e8:	2337      	movs	r3, #55	; 0x37
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	2200      	movs	r2, #0
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	3304      	adds	r3, #4
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fe65 	bl	8004fd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	3318      	adds	r3, #24
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe fe60 	bl	8004fd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	3354      	adds	r3, #84	; 0x54
 800633c:	2260      	movs	r2, #96	; 0x60
 800633e:	2100      	movs	r1, #0
 8006340:	4618      	mov	r0, r3
 8006342:	f001 fef7 	bl	8008134 <memset>
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	4a0c      	ldr	r2, [pc, #48]	; (800637c <prvInitialiseNewTask+0x130>)
 800634a:	659a      	str	r2, [r3, #88]	; 0x58
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	4a0c      	ldr	r2, [pc, #48]	; (8006380 <prvInitialiseNewTask+0x134>)
 8006350:	65da      	str	r2, [r3, #92]	; 0x5c
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	4a0b      	ldr	r2, [pc, #44]	; (8006384 <prvInitialiseNewTask+0x138>)
 8006356:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	69b8      	ldr	r0, [r7, #24]
 800635e:	f001 fae9 	bl	8007934 <pxPortInitialiseStack>
 8006362:	4602      	mov	r2, r0
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006372:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006374:	bf00      	nop
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	080085cc 	.word	0x080085cc
 8006380:	080085ec 	.word	0x080085ec
 8006384:	080085ac 	.word	0x080085ac

08006388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006390:	f001 fbc4 	bl	8007b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a2c      	ldr	r2, [pc, #176]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 800639c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800639e:	4b2c      	ldr	r3, [pc, #176]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063ac:	4b27      	ldr	r3, [pc, #156]	; (800644c <prvAddNewTaskToReadyList+0xc4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d110      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063b4:	f000 fcc6 	bl	8006d44 <prvInitialiseTaskLists>
 80063b8:	e00d      	b.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c2:	4b23      	ldr	r3, [pc, #140]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d802      	bhi.n	80063d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063d0:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063d6:	4b20      	ldr	r3, [pc, #128]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <prvAddNewTaskToReadyList+0xd0>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <prvAddNewTaskToReadyList+0xd4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <prvAddNewTaskToReadyList+0x74>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <prvAddNewTaskToReadyList+0xd4>)
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4a15      	ldr	r2, [pc, #84]	; (8006460 <prvAddNewTaskToReadyList+0xd8>)
 800640a:	441a      	add	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7fe fde9 	bl	8004fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006418:	f001 fbb0 	bl	8007b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800641c:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <prvAddNewTaskToReadyList+0xcc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvAddNewTaskToReadyList+0xc8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642e:	429a      	cmp	r2, r3
 8006430:	d207      	bcs.n	8006442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <prvAddNewTaskToReadyList+0xdc>)
 8006434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000efc 	.word	0x20000efc
 8006450:	20000a28 	.word	0x20000a28
 8006454:	20000f08 	.word	0x20000f08
 8006458:	20000f18 	.word	0x20000f18
 800645c:	20000f04 	.word	0x20000f04
 8006460:	20000a2c 	.word	0x20000a2c
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d017      	beq.n	80064aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <vTaskDelay+0x60>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <vTaskDelay+0x30>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	60bb      	str	r3, [r7, #8]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006498:	f000 f88a 	bl	80065b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800649c:	2100      	movs	r1, #0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fec2 	bl	8007228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064a4:	f000 f892 	bl	80065cc <xTaskResumeAll>
 80064a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d107      	bne.n	80064c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <vTaskDelay+0x64>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000f24 	.word	0x20000f24
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064de:	463a      	mov	r2, r7
 80064e0:	1d39      	adds	r1, r7, #4
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe fb34 	bl	8004b54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	9202      	str	r2, [sp, #8]
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2300      	movs	r3, #0
 80064fc:	460a      	mov	r2, r1
 80064fe:	4924      	ldr	r1, [pc, #144]	; (8006590 <vTaskStartScheduler+0xc0>)
 8006500:	4824      	ldr	r0, [pc, #144]	; (8006594 <vTaskStartScheduler+0xc4>)
 8006502:	f7ff fe01 	bl	8006108 <xTaskCreateStatic>
 8006506:	4603      	mov	r3, r0
 8006508:	4a23      	ldr	r2, [pc, #140]	; (8006598 <vTaskStartScheduler+0xc8>)
 800650a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800650c:	4b22      	ldr	r3, [pc, #136]	; (8006598 <vTaskStartScheduler+0xc8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e001      	b.n	800651e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d102      	bne.n	800652a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006524:	f000 fed4 	bl	80072d0 <xTimerCreateTimerTask>
 8006528:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d11b      	bne.n	8006568 <vTaskStartScheduler+0x98>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
}
 8006542:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006544:	4b15      	ldr	r3, [pc, #84]	; (800659c <vTaskStartScheduler+0xcc>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3354      	adds	r3, #84	; 0x54
 800654a:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <vTaskStartScheduler+0xd0>)
 800654c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800654e:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <vTaskStartScheduler+0xd4>)
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <vTaskStartScheduler+0xd8>)
 8006558:	2201      	movs	r2, #1
 800655a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <vTaskStartScheduler+0xdc>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006562:	f001 fa69 	bl	8007a38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006566:	e00e      	b.n	8006586 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d10a      	bne.n	8006586 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	60fb      	str	r3, [r7, #12]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <vTaskStartScheduler+0xb4>
}
 8006586:	bf00      	nop
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	080083d8 	.word	0x080083d8
 8006594:	08006d15 	.word	0x08006d15
 8006598:	20000f20 	.word	0x20000f20
 800659c:	20000a28 	.word	0x20000a28
 80065a0:	2000003c 	.word	0x2000003c
 80065a4:	20000f1c 	.word	0x20000f1c
 80065a8:	20000f08 	.word	0x20000f08
 80065ac:	20000f00 	.word	0x20000f00

080065b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <vTaskSuspendAll+0x18>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <vTaskSuspendAll+0x18>)
 80065bc:	6013      	str	r3, [r2, #0]
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000f24 	.word	0x20000f24

080065cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065da:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <xTaskResumeAll+0x118>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	603b      	str	r3, [r7, #0]
}
 80065f4:	bf00      	nop
 80065f6:	e7fe      	b.n	80065f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065f8:	f001 fa90 	bl	8007b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065fc:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <xTaskResumeAll+0x118>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	4a38      	ldr	r2, [pc, #224]	; (80066e4 <xTaskResumeAll+0x118>)
 8006604:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006606:	4b37      	ldr	r3, [pc, #220]	; (80066e4 <xTaskResumeAll+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d162      	bne.n	80066d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800660e:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <xTaskResumeAll+0x11c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d05e      	beq.n	80066d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006616:	e02f      	b.n	8006678 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006618:	4b34      	ldr	r3, [pc, #208]	; (80066ec <xTaskResumeAll+0x120>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3318      	adds	r3, #24
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fd3b 	bl	80050a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fd36 	bl	80050a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <xTaskResumeAll+0x124>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d903      	bls.n	8006648 <xTaskResumeAll+0x7c>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <xTaskResumeAll+0x124>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <xTaskResumeAll+0x128>)
 8006656:	441a      	add	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f7fe fcc3 	bl	8004fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4b23      	ldr	r3, [pc, #140]	; (80066f8 <xTaskResumeAll+0x12c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <xTaskResumeAll+0x130>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006678:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <xTaskResumeAll+0x120>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1cb      	bne.n	8006618 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006686:	f000 fbff 	bl	8006e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800668a:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <xTaskResumeAll+0x134>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006696:	f000 f845 	bl	8006724 <xTaskIncrementTick>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066a0:	4b16      	ldr	r3, [pc, #88]	; (80066fc <xTaskResumeAll+0x130>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f1      	bne.n	8006696 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <xTaskResumeAll+0x134>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066b8:	4b10      	ldr	r3, [pc, #64]	; (80066fc <xTaskResumeAll+0x130>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <xTaskResumeAll+0x138>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066d4:	f001 fa52 	bl	8007b7c <vPortExitCritical>

	return xAlreadyYielded;
 80066d8:	68bb      	ldr	r3, [r7, #8]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000f24 	.word	0x20000f24
 80066e8:	20000efc 	.word	0x20000efc
 80066ec:	20000ebc 	.word	0x20000ebc
 80066f0:	20000f04 	.word	0x20000f04
 80066f4:	20000a2c 	.word	0x20000a2c
 80066f8:	20000a28 	.word	0x20000a28
 80066fc:	20000f10 	.word	0x20000f10
 8006700:	20000f0c 	.word	0x20000f0c
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <xTaskGetTickCount+0x18>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006714:	687b      	ldr	r3, [r7, #4]
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	20000f00 	.word	0x20000f00

08006724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b51      	ldr	r3, [pc, #324]	; (8006874 <xTaskIncrementTick+0x150>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 808e 	bne.w	8006854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006738:	4b4f      	ldr	r3, [pc, #316]	; (8006878 <xTaskIncrementTick+0x154>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006740:	4a4d      	ldr	r2, [pc, #308]	; (8006878 <xTaskIncrementTick+0x154>)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d120      	bne.n	800678e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800674c:	4b4b      	ldr	r3, [pc, #300]	; (800687c <xTaskIncrementTick+0x158>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <xTaskIncrementTick+0x48>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskIncrementTick+0x46>
 800676c:	4b43      	ldr	r3, [pc, #268]	; (800687c <xTaskIncrementTick+0x158>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4b43      	ldr	r3, [pc, #268]	; (8006880 <xTaskIncrementTick+0x15c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a41      	ldr	r2, [pc, #260]	; (800687c <xTaskIncrementTick+0x158>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4a41      	ldr	r2, [pc, #260]	; (8006880 <xTaskIncrementTick+0x15c>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	4b40      	ldr	r3, [pc, #256]	; (8006884 <xTaskIncrementTick+0x160>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a3f      	ldr	r2, [pc, #252]	; (8006884 <xTaskIncrementTick+0x160>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	f000 fb7d 	bl	8006e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678e:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <xTaskIncrementTick+0x164>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d34e      	bcc.n	8006836 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006798:	4b38      	ldr	r3, [pc, #224]	; (800687c <xTaskIncrementTick+0x158>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <xTaskIncrementTick+0x82>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <xTaskIncrementTick+0x84>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ac:	4b36      	ldr	r3, [pc, #216]	; (8006888 <xTaskIncrementTick+0x164>)
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	601a      	str	r2, [r3, #0]
					break;
 80067b4:	e03f      	b.n	8006836 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067b6:	4b31      	ldr	r3, [pc, #196]	; (800687c <xTaskIncrementTick+0x158>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d203      	bcs.n	80067d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067ce:	4a2e      	ldr	r2, [pc, #184]	; (8006888 <xTaskIncrementTick+0x164>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6013      	str	r3, [r2, #0]
						break;
 80067d4:	e02f      	b.n	8006836 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fc60 	bl	80050a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3318      	adds	r3, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fc57 	bl	80050a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	4b25      	ldr	r3, [pc, #148]	; (800688c <xTaskIncrementTick+0x168>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d903      	bls.n	8006806 <xTaskIncrementTick+0xe2>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	4a22      	ldr	r2, [pc, #136]	; (800688c <xTaskIncrementTick+0x168>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4a1f      	ldr	r2, [pc, #124]	; (8006890 <xTaskIncrementTick+0x16c>)
 8006814:	441a      	add	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fe fbe4 	bl	8004fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4b1b      	ldr	r3, [pc, #108]	; (8006894 <xTaskIncrementTick+0x170>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d3b3      	bcc.n	8006798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006834:	e7b0      	b.n	8006798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006836:	4b17      	ldr	r3, [pc, #92]	; (8006894 <xTaskIncrementTick+0x170>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	4914      	ldr	r1, [pc, #80]	; (8006890 <xTaskIncrementTick+0x16c>)
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d907      	bls.n	800685e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e004      	b.n	800685e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <xTaskIncrementTick+0x174>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3301      	adds	r3, #1
 800685a:	4a0f      	ldr	r2, [pc, #60]	; (8006898 <xTaskIncrementTick+0x174>)
 800685c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <xTaskIncrementTick+0x178>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800686a:	697b      	ldr	r3, [r7, #20]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000f24 	.word	0x20000f24
 8006878:	20000f00 	.word	0x20000f00
 800687c:	20000eb4 	.word	0x20000eb4
 8006880:	20000eb8 	.word	0x20000eb8
 8006884:	20000f14 	.word	0x20000f14
 8006888:	20000f1c 	.word	0x20000f1c
 800688c:	20000f04 	.word	0x20000f04
 8006890:	20000a2c 	.word	0x20000a2c
 8006894:	20000a28 	.word	0x20000a28
 8006898:	20000f0c 	.word	0x20000f0c
 800689c:	20000f10 	.word	0x20000f10

080068a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068a6:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <vTaskSwitchContext+0xb0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <vTaskSwitchContext+0xb4>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068b4:	e046      	b.n	8006944 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <vTaskSwitchContext+0xb4>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068bc:	4b26      	ldr	r3, [pc, #152]	; (8006958 <vTaskSwitchContext+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e010      	b.n	80068e6 <vTaskSwitchContext+0x46>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
}
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vTaskSwitchContext+0x3e>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	491d      	ldr	r1, [pc, #116]	; (800695c <vTaskSwitchContext+0xbc>)
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0e4      	beq.n	80068c4 <vTaskSwitchContext+0x24>
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a15      	ldr	r2, [pc, #84]	; (800695c <vTaskSwitchContext+0xbc>)
 8006906:	4413      	add	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	605a      	str	r2, [r3, #4]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	3308      	adds	r3, #8
 800691c:	429a      	cmp	r2, r3
 800691e:	d104      	bne.n	800692a <vTaskSwitchContext+0x8a>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <vTaskSwitchContext+0xc0>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	4a08      	ldr	r2, [pc, #32]	; (8006958 <vTaskSwitchContext+0xb8>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <vTaskSwitchContext+0xc0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3354      	adds	r3, #84	; 0x54
 8006940:	4a08      	ldr	r2, [pc, #32]	; (8006964 <vTaskSwitchContext+0xc4>)
 8006942:	6013      	str	r3, [r2, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000f24 	.word	0x20000f24
 8006954:	20000f10 	.word	0x20000f10
 8006958:	20000f04 	.word	0x20000f04
 800695c:	20000a2c 	.word	0x20000a2c
 8006960:	20000a28 	.word	0x20000a28
 8006964:	2000003c 	.word	0x2000003c

08006968 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	60fb      	str	r3, [r7, #12]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <vTaskPlaceOnEventList+0x44>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3318      	adds	r3, #24
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe fb4a 	bl	8005030 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800699c:	2101      	movs	r1, #1
 800699e:	6838      	ldr	r0, [r7, #0]
 80069a0:	f000 fc42 	bl	8007228 <prvAddCurrentTaskToDelayedList>
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000a28 	.word	0x20000a28

080069b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	617b      	str	r3, [r7, #20]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <vTaskPlaceOnUnorderedEventList+0x70>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	613b      	str	r3, [r7, #16]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <vTaskPlaceOnUnorderedEventList+0x74>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a00:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a02:	4b08      	ldr	r3, [pc, #32]	; (8006a24 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3318      	adds	r3, #24
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fe faed 	bl	8004fea <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a10:	2101      	movs	r1, #1
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc08 	bl	8007228 <prvAddCurrentTaskToDelayedList>
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000f24 	.word	0x20000f24
 8006a24:	20000a28 	.word	0x20000a28

08006a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	617b      	str	r3, [r7, #20]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a50:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3318      	adds	r3, #24
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7fe fac6 	bl	8004fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a64:	f04f 33ff 	mov.w	r3, #4294967295
 8006a68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f000 fbdb 	bl	8007228 <prvAddCurrentTaskToDelayedList>
	}
 8006a72:	bf00      	nop
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000a28 	.word	0x20000a28

08006a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10a      	bne.n	8006aac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	60fb      	str	r3, [r7, #12]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3318      	adds	r3, #24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe faf5 	bl	80050a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab6:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <xTaskRemoveFromEventList+0xb0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d11d      	bne.n	8006afa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe faec 	bl	80050a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <xTaskRemoveFromEventList+0xb4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d903      	bls.n	8006adc <xTaskRemoveFromEventList+0x5c>
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <xTaskRemoveFromEventList+0xb4>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <xTaskRemoveFromEventList+0xb8>)
 8006aea:	441a      	add	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7fe fa79 	bl	8004fea <vListInsertEnd>
 8006af8:	e005      	b.n	8006b06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3318      	adds	r3, #24
 8006afe:	4619      	mov	r1, r3
 8006b00:	480e      	ldr	r0, [pc, #56]	; (8006b3c <xTaskRemoveFromEventList+0xbc>)
 8006b02:	f7fe fa72 	bl	8004fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	; (8006b40 <xTaskRemoveFromEventList+0xc0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d905      	bls.n	8006b20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <xTaskRemoveFromEventList+0xc4>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e001      	b.n	8006b24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000f24 	.word	0x20000f24
 8006b34:	20000f04 	.word	0x20000f04
 8006b38:	20000a2c 	.word	0x20000a2c
 8006b3c:	20000ebc 	.word	0x20000ebc
 8006b40:	20000a28 	.word	0x20000a28
 8006b44:	20000f10 	.word	0x20000f10

08006b48 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006b52:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	613b      	str	r3, [r7, #16]
}
 8006b6c:	bf00      	nop
 8006b6e:	e7fe      	b.n	8006b6e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	60fb      	str	r3, [r7, #12]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fe fa7f 	bl	80050a0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fa7a 	bl	80050a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <vTaskRemoveFromUnorderedEventList+0x78>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a0f      	ldr	r2, [pc, #60]	; (8006bfc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006bce:	441a      	add	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fe fa07 	bl	8004fea <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d902      	bls.n	8006bf0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000f24 	.word	0x20000f24
 8006bfc:	20000f04 	.word	0x20000f04
 8006c00:	20000a2c 	.word	0x20000a2c
 8006c04:	20000a28 	.word	0x20000a28
 8006c08:	20000f10 	.word	0x20000f10

08006c0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <vTaskInternalSetTimeOutState+0x24>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <vTaskInternalSetTimeOutState+0x28>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	605a      	str	r2, [r3, #4]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000f14 	.word	0x20000f14
 8006c34:	20000f00 	.word	0x20000f00

08006c38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	613b      	str	r3, [r7, #16]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	60fb      	str	r3, [r7, #12]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c7a:	f000 ff4f 	bl	8007b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <xTaskCheckForTimeOut+0xbc>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d102      	bne.n	8006c9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e023      	b.n	8006ce6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <xTaskCheckForTimeOut+0xc0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d007      	beq.n	8006cba <xTaskCheckForTimeOut+0x82>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d302      	bcc.n	8006cba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e015      	b.n	8006ce6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d20b      	bcs.n	8006cdc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff9b 	bl	8006c0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e004      	b.n	8006ce6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ce6:	f000 ff49 	bl	8007b7c <vPortExitCritical>

	return xReturn;
 8006cea:	69fb      	ldr	r3, [r7, #28]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000f00 	.word	0x20000f00
 8006cf8:	20000f14 	.word	0x20000f14

08006cfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <vTaskMissedYield+0x14>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000f10 	.word	0x20000f10

08006d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d1c:	f000 f852 	bl	8006dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <prvIdleTask+0x28>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d9f9      	bls.n	8006d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <prvIdleTask+0x2c>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d38:	e7f0      	b.n	8006d1c <prvIdleTask+0x8>
 8006d3a:	bf00      	nop
 8006d3c:	20000a2c 	.word	0x20000a2c
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	e00c      	b.n	8006d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4a12      	ldr	r2, [pc, #72]	; (8006da4 <prvInitialiseTaskLists+0x60>)
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe f918 	bl	8004f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3301      	adds	r3, #1
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b37      	cmp	r3, #55	; 0x37
 8006d6e:	d9ef      	bls.n	8006d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d70:	480d      	ldr	r0, [pc, #52]	; (8006da8 <prvInitialiseTaskLists+0x64>)
 8006d72:	f7fe f90f 	bl	8004f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d76:	480d      	ldr	r0, [pc, #52]	; (8006dac <prvInitialiseTaskLists+0x68>)
 8006d78:	f7fe f90c 	bl	8004f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <prvInitialiseTaskLists+0x6c>)
 8006d7e:	f7fe f909 	bl	8004f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d82:	480c      	ldr	r0, [pc, #48]	; (8006db4 <prvInitialiseTaskLists+0x70>)
 8006d84:	f7fe f906 	bl	8004f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d88:	480b      	ldr	r0, [pc, #44]	; (8006db8 <prvInitialiseTaskLists+0x74>)
 8006d8a:	f7fe f903 	bl	8004f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <prvInitialiseTaskLists+0x78>)
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <prvInitialiseTaskLists+0x64>)
 8006d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <prvInitialiseTaskLists+0x7c>)
 8006d96:	4a05      	ldr	r2, [pc, #20]	; (8006dac <prvInitialiseTaskLists+0x68>)
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000a2c 	.word	0x20000a2c
 8006da8:	20000e8c 	.word	0x20000e8c
 8006dac:	20000ea0 	.word	0x20000ea0
 8006db0:	20000ebc 	.word	0x20000ebc
 8006db4:	20000ed0 	.word	0x20000ed0
 8006db8:	20000ee8 	.word	0x20000ee8
 8006dbc:	20000eb4 	.word	0x20000eb4
 8006dc0:	20000eb8 	.word	0x20000eb8

08006dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dca:	e019      	b.n	8006e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dcc:	f000 fea6 	bl	8007b1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <prvCheckTasksWaitingTermination+0x50>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe f95f 	bl	80050a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006de2:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <prvCheckTasksWaitingTermination+0x54>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	4a0b      	ldr	r2, [pc, #44]	; (8006e18 <prvCheckTasksWaitingTermination+0x54>)
 8006dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dec:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006df6:	f000 fec1 	bl	8007b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f810 	bl	8006e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e1      	bne.n	8006dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000ed0 	.word	0x20000ed0
 8006e18:	20000efc 	.word	0x20000efc
 8006e1c:	20000ee4 	.word	0x20000ee4

08006e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3354      	adds	r3, #84	; 0x54
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 f997 	bl	8008160 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f82f 	bl	8007ea4 <vPortFree>
				vPortFree( pxTCB );
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f82c 	bl	8007ea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e4c:	e018      	b.n	8006e80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d103      	bne.n	8006e60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f823 	bl	8007ea4 <vPortFree>
	}
 8006e5e:	e00f      	b.n	8006e80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d00a      	beq.n	8006e80 <prvDeleteTCB+0x60>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	60fb      	str	r3, [r7, #12]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <prvDeleteTCB+0x5e>
	}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8e:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <prvResetNextTaskUnblockTime+0x40>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <prvResetNextTaskUnblockTime+0x14>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <prvResetNextTaskUnblockTime+0x16>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <prvResetNextTaskUnblockTime+0x44>)
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eaa:	e008      	b.n	8006ebe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <prvResetNextTaskUnblockTime+0x40>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <prvResetNextTaskUnblockTime+0x44>)
 8006ebc:	6013      	str	r3, [r2, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr
 8006ec8:	20000eb4 	.word	0x20000eb4
 8006ecc:	20000f1c 	.word	0x20000f1c

08006ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <xTaskGetSchedulerState+0x34>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e008      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <xTaskGetSchedulerState+0x38>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006eec:	2302      	movs	r3, #2
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e001      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ef6:	687b      	ldr	r3, [r7, #4]
	}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000f08 	.word	0x20000f08
 8006f08:	20000f24 	.word	0x20000f24

08006f0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d056      	beq.n	8006fd0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <xTaskPriorityInherit+0xd0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d246      	bcs.n	8006fbe <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db06      	blt.n	8006f46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <xTaskPriorityInherit+0xd0>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <xTaskPriorityInherit+0xd4>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	d101      	bne.n	8006f62 <xTaskPriorityInherit+0x56>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <xTaskPriorityInherit+0x58>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d022      	beq.n	8006fae <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe f897 	bl	80050a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f72:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <xTaskPriorityInherit+0xd0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f80:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <xTaskPriorityInherit+0xd8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d903      	bls.n	8006f90 <xTaskPriorityInherit+0x84>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <xTaskPriorityInherit+0xd8>)
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4a10      	ldr	r2, [pc, #64]	; (8006fe0 <xTaskPriorityInherit+0xd4>)
 8006f9e:	441a      	add	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f7fe f81f 	bl	8004fea <vListInsertEnd>
 8006fac:	e004      	b.n	8006fb8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <xTaskPriorityInherit+0xd0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	e008      	b.n	8006fd0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <xTaskPriorityInherit+0xd0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d201      	bcs.n	8006fd0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000a28 	.word	0x20000a28
 8006fe0:	20000a2c 	.word	0x20000a2c
 8006fe4:	20000f04 	.word	0x20000f04

08006fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d056      	beq.n	80070ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ffe:	4b2e      	ldr	r3, [pc, #184]	; (80070b8 <xTaskPriorityDisinherit+0xd0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	429a      	cmp	r2, r3
 8007006:	d00a      	beq.n	800701e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	60fb      	str	r3, [r7, #12]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	1e5a      	subs	r2, r3, #1
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	429a      	cmp	r2, r3
 8007050:	d02c      	beq.n	80070ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007056:	2b00      	cmp	r3, #0
 8007058:	d128      	bne.n	80070ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3304      	adds	r3, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f81e 	bl	80050a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <xTaskPriorityDisinherit+0xd4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d903      	bls.n	800708c <xTaskPriorityDisinherit+0xa4>
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <xTaskPriorityDisinherit+0xd4>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <xTaskPriorityDisinherit+0xd8>)
 800709a:	441a      	add	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	3304      	adds	r3, #4
 80070a0:	4619      	mov	r1, r3
 80070a2:	4610      	mov	r0, r2
 80070a4:	f7fd ffa1 	bl	8004fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ac:	697b      	ldr	r3, [r7, #20]
	}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000a28 	.word	0x20000a28
 80070bc:	20000f04 	.word	0x20000f04
 80070c0:	20000a2c 	.word	0x20000a2c

080070c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d06f      	beq.n	80071bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60fb      	str	r3, [r7, #12]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d902      	bls.n	800710a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	61fb      	str	r3, [r7, #28]
 8007108:	e002      	b.n	8007110 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	429a      	cmp	r2, r3
 8007118:	d050      	beq.n	80071bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d14b      	bne.n	80071bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007124:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	429a      	cmp	r2, r3
 800712c:	d10a      	bne.n	8007144 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60bb      	str	r3, [r7, #8]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	db04      	blt.n	8007162 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	6959      	ldr	r1, [r3, #20]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007172:	4413      	add	r3, r2
 8007174:	4299      	cmp	r1, r3
 8007176:	d101      	bne.n	800717c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800717c:	2300      	movs	r3, #0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01c      	beq.n	80071bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fd ff8a 	bl	80050a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b0e      	ldr	r3, [pc, #56]	; (80071cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d903      	bls.n	80071a0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a06      	ldr	r2, [pc, #24]	; (80071c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071ae:	441a      	add	r2, r3
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fd ff17 	bl	8004fea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071bc:	bf00      	nop
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000a28 	.word	0x20000a28
 80071c8:	20000a2c 	.word	0x20000a2c
 80071cc:	20000f04 	.word	0x20000f04

080071d0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <uxTaskResetEventItemValue+0x2c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <uxTaskResetEventItemValue+0x2c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <uxTaskResetEventItemValue+0x2c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80071ec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80071ee:	687b      	ldr	r3, [r7, #4]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	20000a28 	.word	0x20000a28

08007200 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <pvTaskIncrementMutexHeldCount+0x24>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <pvTaskIncrementMutexHeldCount+0x24>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007212:	3201      	adds	r2, #1
 8007214:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <pvTaskIncrementMutexHeldCount+0x24>)
 8007218:	681b      	ldr	r3, [r3, #0]
	}
 800721a:	4618      	mov	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000a28 	.word	0x20000a28

08007228 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007232:	4b21      	ldr	r3, [pc, #132]	; (80072b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007238:	4b20      	ldr	r3, [pc, #128]	; (80072bc <prvAddCurrentTaskToDelayedList+0x94>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3304      	adds	r3, #4
 800723e:	4618      	mov	r0, r3
 8007240:	f7fd ff2e 	bl	80050a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d10a      	bne.n	8007262 <prvAddCurrentTaskToDelayedList+0x3a>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007252:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3304      	adds	r3, #4
 8007258:	4619      	mov	r1, r3
 800725a:	4819      	ldr	r0, [pc, #100]	; (80072c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800725c:	f7fd fec5 	bl	8004fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007260:	e026      	b.n	80072b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <prvAddCurrentTaskToDelayedList+0x94>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d209      	bcs.n	800728e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3304      	adds	r3, #4
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f7fd fed2 	bl	8005030 <vListInsert>
}
 800728c:	e010      	b.n	80072b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f7fd fec8 	bl	8005030 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d202      	bcs.n	80072b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072aa:	4a08      	ldr	r2, [pc, #32]	; (80072cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000f00 	.word	0x20000f00
 80072bc:	20000a28 	.word	0x20000a28
 80072c0:	20000ee8 	.word	0x20000ee8
 80072c4:	20000eb8 	.word	0x20000eb8
 80072c8:	20000eb4 	.word	0x20000eb4
 80072cc:	20000f1c 	.word	0x20000f1c

080072d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072da:	f000 facb 	bl	8007874 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <xTimerCreateTimerTask+0x80>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d021      	beq.n	800732a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072ee:	1d3a      	adds	r2, r7, #4
 80072f0:	f107 0108 	add.w	r1, r7, #8
 80072f4:	f107 030c 	add.w	r3, r7, #12
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd fc43 	bl	8004b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	9202      	str	r2, [sp, #8]
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	2302      	movs	r3, #2
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	460a      	mov	r2, r1
 8007310:	4910      	ldr	r1, [pc, #64]	; (8007354 <xTimerCreateTimerTask+0x84>)
 8007312:	4811      	ldr	r0, [pc, #68]	; (8007358 <xTimerCreateTimerTask+0x88>)
 8007314:	f7fe fef8 	bl	8006108 <xTaskCreateStatic>
 8007318:	4603      	mov	r3, r0
 800731a:	4a10      	ldr	r2, [pc, #64]	; (800735c <xTimerCreateTimerTask+0x8c>)
 800731c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <xTimerCreateTimerTask+0x8c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007326:	2301      	movs	r3, #1
 8007328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	613b      	str	r3, [r7, #16]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007346:	697b      	ldr	r3, [r7, #20]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20000f58 	.word	0x20000f58
 8007354:	080083e0 	.word	0x080083e0
 8007358:	0800747d 	.word	0x0800747d
 800735c:	20000f5c 	.word	0x20000f5c

08007360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	623b      	str	r3, [r7, #32]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <xTimerGenericCommand+0x98>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d02a      	beq.n	80073ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b05      	cmp	r3, #5
 80073a6:	dc18      	bgt.n	80073da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073a8:	f7ff fd92 	bl	8006ed0 <xTaskGetSchedulerState>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d109      	bne.n	80073c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073b2:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <xTimerGenericCommand+0x98>)
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f107 0110 	add.w	r1, r7, #16
 80073ba:	2300      	movs	r3, #0
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	f7fe f843 	bl	8005448 <xQueueGenericSend>
 80073c2:	6278      	str	r0, [r7, #36]	; 0x24
 80073c4:	e012      	b.n	80073ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <xTimerGenericCommand+0x98>)
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	f107 0110 	add.w	r1, r7, #16
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	f7fe f839 	bl	8005448 <xQueueGenericSend>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24
 80073d8:	e008      	b.n	80073ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <xTimerGenericCommand+0x98>)
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	f107 0110 	add.w	r1, r7, #16
 80073e2:	2300      	movs	r3, #0
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	f7fe f92d 	bl	8005644 <xQueueGenericSendFromISR>
 80073ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3728      	adds	r7, #40	; 0x28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000f58 	.word	0x20000f58

080073fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af02      	add	r7, sp, #8
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007406:	4b1c      	ldr	r3, [pc, #112]	; (8007478 <prvProcessExpiredTimer+0x7c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	3304      	adds	r3, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f7fd fe43 	bl	80050a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d122      	bne.n	8007468 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	18d1      	adds	r1, r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	6978      	ldr	r0, [r7, #20]
 8007430:	f000 f8c8 	bl	80075c4 <prvInsertTimerInActiveList>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800743a:	2300      	movs	r3, #0
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2300      	movs	r3, #0
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	2100      	movs	r1, #0
 8007444:	6978      	ldr	r0, [r7, #20]
 8007446:	f7ff ff8b 	bl	8007360 <xTimerGenericCommand>
 800744a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60fb      	str	r3, [r7, #12]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	4798      	blx	r3
}
 8007470:	bf00      	nop
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000f50 	.word	0x20000f50

0800747c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007484:	f107 0308 	add.w	r3, r7, #8
 8007488:	4618      	mov	r0, r3
 800748a:	f000 f857 	bl	800753c <prvGetNextExpireTime>
 800748e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4619      	mov	r1, r3
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f803 	bl	80074a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800749a:	f000 f8d5 	bl	8007648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800749e:	e7f1      	b.n	8007484 <prvTimerTask+0x8>

080074a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074aa:	f7ff f881 	bl	80065b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ae:	f107 0308 	add.w	r3, r7, #8
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f866 	bl	8007584 <prvSampleTimeNow>
 80074b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d130      	bne.n	8007522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <prvProcessTimerOrBlockTask+0x3c>
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d806      	bhi.n	80074dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074ce:	f7ff f87d 	bl	80065cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff ff91 	bl	80073fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074da:	e024      	b.n	8007526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d008      	beq.n	80074f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <prvProcessTimerOrBlockTask+0x90>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf0c      	ite	eq
 80074ec:	2301      	moveq	r3, #1
 80074ee:	2300      	movne	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074f4:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <prvProcessTimerOrBlockTask+0x94>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4619      	mov	r1, r3
 8007502:	f7fe fdcd 	bl	80060a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007506:	f7ff f861 	bl	80065cc <xTaskResumeAll>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007510:	4b09      	ldr	r3, [pc, #36]	; (8007538 <prvProcessTimerOrBlockTask+0x98>)
 8007512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
}
 8007520:	e001      	b.n	8007526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007522:	f7ff f853 	bl	80065cc <xTaskResumeAll>
}
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000f54 	.word	0x20000f54
 8007534:	20000f58 	.word	0x20000f58
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007544:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <prvGetNextExpireTime+0x44>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <prvGetNextExpireTime+0x44>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e001      	b.n	8007572 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007572:	68fb      	ldr	r3, [r7, #12]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	20000f50 	.word	0x20000f50

08007584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800758c:	f7ff f8bc 	bl	8006708 <xTaskGetTickCount>
 8007590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <prvSampleTimeNow+0x3c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d205      	bcs.n	80075a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800759c:	f000 f908 	bl	80077b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e002      	b.n	80075ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075ae:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <prvSampleTimeNow+0x3c>)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000f60 	.word	0x20000f60

080075c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d812      	bhi.n	8007610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d302      	bcc.n	80075fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075f8:	2301      	movs	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	e01b      	b.n	8007636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <prvInsertTimerInActiveList+0x7c>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f7fd fd11 	bl	8005030 <vListInsert>
 800760e:	e012      	b.n	8007636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d206      	bcs.n	8007626 <prvInsertTimerInActiveList+0x62>
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d302      	bcc.n	8007626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	e007      	b.n	8007636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <prvInsertTimerInActiveList+0x80>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3304      	adds	r3, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7fd fcfd 	bl	8005030 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007636:	697b      	ldr	r3, [r7, #20]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000f54 	.word	0x20000f54
 8007644:	20000f50 	.word	0x20000f50

08007648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800764e:	e09d      	b.n	800778c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	da18      	bge.n	8007688 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007656:	1d3b      	adds	r3, r7, #4
 8007658:	3304      	adds	r3, #4
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	61fb      	str	r3, [r7, #28]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767e:	6850      	ldr	r0, [r2, #4]
 8007680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007682:	6892      	ldr	r2, [r2, #8]
 8007684:	4611      	mov	r1, r2
 8007686:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	db7d      	blt.n	800778a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd fcfe 	bl	80050a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076a4:	463b      	mov	r3, r7
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff ff6c 	bl	8007584 <prvSampleTimeNow>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b09      	cmp	r3, #9
 80076b2:	d86b      	bhi.n	800778c <prvProcessReceivedCommands+0x144>
 80076b4:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <prvProcessReceivedCommands+0x74>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076e5 	.word	0x080076e5
 80076c8:	0800778d 	.word	0x0800778d
 80076cc:	08007741 	.word	0x08007741
 80076d0:	08007779 	.word	0x08007779
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076e5 	.word	0x080076e5
 80076dc:	0800778d 	.word	0x0800778d
 80076e0:	08007741 	.word	0x08007741
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	18d1      	adds	r1, r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f2:	f7ff ff67 	bl	80075c4 <prvInsertTimerInActiveList>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d047      	beq.n	800778c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007702:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d13f      	bne.n	800778c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	441a      	add	r2, r3
 8007714:	2300      	movs	r3, #0
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	2100      	movs	r1, #0
 800771c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800771e:	f7ff fe1f 	bl	8007360 <xTimerGenericCommand>
 8007722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d130      	bne.n	800778c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	61bb      	str	r3, [r7, #24]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	617b      	str	r3, [r7, #20]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	699a      	ldr	r2, [r3, #24]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	18d1      	adds	r1, r2, r3
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007772:	f7ff ff27 	bl	80075c4 <prvInsertTimerInActiveList>
					break;
 8007776:	e009      	b.n	800778c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007784:	f000 fb8e 	bl	8007ea4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007788:	e000      	b.n	800778c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800778a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <prvProcessReceivedCommands+0x164>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	1d39      	adds	r1, r7, #4
 8007792:	2200      	movs	r2, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe f87b 	bl	8005890 <xQueueReceive>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f af57 	bne.w	8007650 <prvProcessReceivedCommands+0x8>
	}
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3730      	adds	r7, #48	; 0x30
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000f58 	.word	0x20000f58

080077b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077b6:	e045      	b.n	8007844 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077b8:	4b2c      	ldr	r3, [pc, #176]	; (800786c <prvSwitchTimerLists+0xbc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077c2:	4b2a      	ldr	r3, [pc, #168]	; (800786c <prvSwitchTimerLists+0xbc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fd fc65 	bl	80050a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d12e      	bne.n	8007844 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4413      	add	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d90e      	bls.n	8007816 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007804:	4b19      	ldr	r3, [pc, #100]	; (800786c <prvSwitchTimerLists+0xbc>)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fd fc0e 	bl	8005030 <vListInsert>
 8007814:	e016      	b.n	8007844 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007816:	2300      	movs	r3, #0
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	2100      	movs	r1, #0
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff fd9d 	bl	8007360 <xTimerGenericCommand>
 8007826:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <prvSwitchTimerLists+0x94>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	603b      	str	r3, [r7, #0]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007844:	4b09      	ldr	r3, [pc, #36]	; (800786c <prvSwitchTimerLists+0xbc>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1b4      	bne.n	80077b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800784e:	4b07      	ldr	r3, [pc, #28]	; (800786c <prvSwitchTimerLists+0xbc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <prvSwitchTimerLists+0xc0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a04      	ldr	r2, [pc, #16]	; (800786c <prvSwitchTimerLists+0xbc>)
 800785a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800785c:	4a04      	ldr	r2, [pc, #16]	; (8007870 <prvSwitchTimerLists+0xc0>)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	6013      	str	r3, [r2, #0]
}
 8007862:	bf00      	nop
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000f50 	.word	0x20000f50
 8007870:	20000f54 	.word	0x20000f54

08007874 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800787a:	f000 f94f 	bl	8007b1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <prvCheckForValidListAndQueue+0x60>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d120      	bne.n	80078c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007886:	4814      	ldr	r0, [pc, #80]	; (80078d8 <prvCheckForValidListAndQueue+0x64>)
 8007888:	f7fd fb84 	bl	8004f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800788c:	4813      	ldr	r0, [pc, #76]	; (80078dc <prvCheckForValidListAndQueue+0x68>)
 800788e:	f7fd fb81 	bl	8004f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <prvCheckForValidListAndQueue+0x6c>)
 8007894:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <prvCheckForValidListAndQueue+0x64>)
 8007896:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <prvCheckForValidListAndQueue+0x70>)
 800789a:	4a10      	ldr	r2, [pc, #64]	; (80078dc <prvCheckForValidListAndQueue+0x68>)
 800789c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800789e:	2300      	movs	r3, #0
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <prvCheckForValidListAndQueue+0x74>)
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <prvCheckForValidListAndQueue+0x78>)
 80078a6:	2110      	movs	r1, #16
 80078a8:	200a      	movs	r0, #10
 80078aa:	f7fd fc8b 	bl	80051c4 <xQueueGenericCreateStatic>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <prvCheckForValidListAndQueue+0x60>)
 80078b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <prvCheckForValidListAndQueue+0x60>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <prvCheckForValidListAndQueue+0x60>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	490b      	ldr	r1, [pc, #44]	; (80078f0 <prvCheckForValidListAndQueue+0x7c>)
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fb9a 	bl	8005ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078c8:	f000 f958 	bl	8007b7c <vPortExitCritical>
}
 80078cc:	bf00      	nop
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000f58 	.word	0x20000f58
 80078d8:	20000f28 	.word	0x20000f28
 80078dc:	20000f3c 	.word	0x20000f3c
 80078e0:	20000f50 	.word	0x20000f50
 80078e4:	20000f54 	.word	0x20000f54
 80078e8:	20001004 	.word	0x20001004
 80078ec:	20000f64 	.word	0x20000f64
 80078f0:	080083e8 	.word	0x080083e8

080078f4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007902:	f06f 0301 	mvn.w	r3, #1
 8007906:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007914:	4b06      	ldr	r3, [pc, #24]	; (8007930 <xTimerPendFunctionCallFromISR+0x3c>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f107 0114 	add.w	r1, r7, #20
 800791c:	2300      	movs	r3, #0
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	f7fd fe90 	bl	8005644 <xQueueGenericSendFromISR>
 8007924:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007928:	4618      	mov	r0, r3
 800792a:	3728      	adds	r7, #40	; 0x28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000f58 	.word	0x20000f58

08007934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3b04      	subs	r3, #4
 8007944:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800794c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3b04      	subs	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b04      	subs	r3, #4
 8007962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007964:	4a08      	ldr	r2, [pc, #32]	; (8007988 <pxPortInitialiseStack+0x54>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3b14      	subs	r3, #20
 800796e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3b20      	subs	r3, #32
 800797a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800797c:	68fb      	ldr	r3, [r7, #12]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	0800798d 	.word	0x0800798d

0800798c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007996:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <prvTaskExitError+0x54>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d00a      	beq.n	80079b6 <prvTaskExitError+0x2a>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <prvTaskExitError+0x28>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	60bb      	str	r3, [r7, #8]
}
 80079c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079ca:	bf00      	nop
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0fc      	beq.n	80079cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	bc80      	pop	{r7}
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000038 	.word	0x20000038
	...

080079f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <pxCurrentTCBConst2>)
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	6808      	ldr	r0, [r1, #0]
 80079f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079fa:	f380 8809 	msr	PSP, r0
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007a0e:	4770      	bx	lr

08007a10 <pxCurrentTCBConst2>:
 8007a10:	20000a28 	.word	0x20000a28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a14:	bf00      	nop
 8007a16:	bf00      	nop

08007a18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007a18:	4806      	ldr	r0, [pc, #24]	; (8007a34 <prvPortStartFirstTask+0x1c>)
 8007a1a:	6800      	ldr	r0, [r0, #0]
 8007a1c:	6800      	ldr	r0, [r0, #0]
 8007a1e:	f380 8808 	msr	MSP, r0
 8007a22:	b662      	cpsie	i
 8007a24:	b661      	cpsie	f
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	df00      	svc	0
 8007a30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a32:	bf00      	nop
 8007a34:	e000ed08 	.word	0xe000ed08

08007a38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a3e:	4b32      	ldr	r3, [pc, #200]	; (8007b08 <xPortStartScheduler+0xd0>)
 8007a40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	22ff      	movs	r2, #255	; 0xff
 8007a4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	4b2a      	ldr	r3, [pc, #168]	; (8007b0c <xPortStartScheduler+0xd4>)
 8007a64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a66:	4b2a      	ldr	r3, [pc, #168]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007a68:	2207      	movs	r2, #7
 8007a6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a6c:	e009      	b.n	8007a82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007a6e:	4b28      	ldr	r3, [pc, #160]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	4a26      	ldr	r2, [pc, #152]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007a76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d0ef      	beq.n	8007a6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f1c3 0307 	rsb	r3, r3, #7
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d00a      	beq.n	8007ab0 <xPortStartScheduler+0x78>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	021b      	lsls	r3, r3, #8
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007ab8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <xPortStartScheduler+0xd8>)
 8007ac4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <xPortStartScheduler+0xdc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a10      	ldr	r2, [pc, #64]	; (8007b14 <xPortStartScheduler+0xdc>)
 8007ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ada:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <xPortStartScheduler+0xdc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a0d      	ldr	r2, [pc, #52]	; (8007b14 <xPortStartScheduler+0xdc>)
 8007ae0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ae4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ae6:	f000 f8b9 	bl	8007c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <xPortStartScheduler+0xe0>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007af0:	f7ff ff92 	bl	8007a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007af4:	f7fe fed4 	bl	80068a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007af8:	f7ff ff48 	bl	800798c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	e000e400 	.word	0xe000e400
 8007b0c:	20001054 	.word	0x20001054
 8007b10:	20001058 	.word	0x20001058
 8007b14:	e000ed20 	.word	0xe000ed20
 8007b18:	20000038 	.word	0x20000038

08007b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	607b      	str	r3, [r7, #4]
}
 8007b34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <vPortEnterCritical+0x58>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	4a0d      	ldr	r2, [pc, #52]	; (8007b74 <vPortEnterCritical+0x58>)
 8007b3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b40:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <vPortEnterCritical+0x58>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10f      	bne.n	8007b68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <vPortEnterCritical+0x5c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	603b      	str	r3, [r7, #0]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <vPortEnterCritical+0x4a>
	}
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000038 	.word	0x20000038
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b82:	4b11      	ldr	r3, [pc, #68]	; (8007bc8 <vPortExitCritical+0x4c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <vPortExitCritical+0x24>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	607b      	str	r3, [r7, #4]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <vPortExitCritical+0x4c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <vPortExitCritical+0x4c>)
 8007ba8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <vPortExitCritical+0x4c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <vPortExitCritical+0x42>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	f383 8811 	msr	BASEPRI, r3
}
 8007bbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	20000038 	.word	0x20000038
 8007bcc:	00000000 	.word	0x00000000

08007bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bd0:	f3ef 8009 	mrs	r0, PSP
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <pxCurrentTCBConst>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007be0:	6010      	str	r0, [r2, #0]
 8007be2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007be6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bea:	f380 8811 	msr	BASEPRI, r0
 8007bee:	f7fe fe57 	bl	80068a0 <vTaskSwitchContext>
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8811 	msr	BASEPRI, r0
 8007bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	6808      	ldr	r0, [r1, #0]
 8007c02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c06:	f380 8809 	msr	PSP, r0
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	4770      	bx	lr

08007c10 <pxCurrentTCBConst>:
 8007c10:	20000a28 	.word	0x20000a28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c32:	f7fe fd77 	bl	8006724 <xTaskIncrementTick>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <SysTick_Handler+0x40>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <vPortSetupTimerInterrupt+0x30>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <vPortSetupTimerInterrupt+0x38>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <vPortSetupTimerInterrupt+0x3c>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	099b      	lsrs	r3, r3, #6
 8007c78:	4a08      	ldr	r2, [pc, #32]	; (8007c9c <vPortSetupTimerInterrupt+0x40>)
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <vPortSetupTimerInterrupt+0x30>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	e000e010 	.word	0xe000e010
 8007c90:	e000e018 	.word	0xe000e018
 8007c94:	20000030 	.word	0x20000030
 8007c98:	10624dd3 	.word	0x10624dd3
 8007c9c:	e000e014 	.word	0xe000e014

08007ca0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ca6:	f3ef 8305 	mrs	r3, IPSR
 8007caa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b0f      	cmp	r3, #15
 8007cb0:	d914      	bls.n	8007cdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cb2:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <vPortValidateInterruptPriority+0x6c>)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cbc:	4b14      	ldr	r3, [pc, #80]	; (8007d10 <vPortValidateInterruptPriority+0x70>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	7afa      	ldrb	r2, [r7, #11]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d20a      	bcs.n	8007cdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	607b      	str	r3, [r7, #4]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <vPortValidateInterruptPriority+0x74>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <vPortValidateInterruptPriority+0x78>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d90a      	bls.n	8007d02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	603b      	str	r3, [r7, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	e7fe      	b.n	8007d00 <vPortValidateInterruptPriority+0x60>
	}
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	e000e3f0 	.word	0xe000e3f0
 8007d10:	20001054 	.word	0x20001054
 8007d14:	e000ed0c 	.word	0xe000ed0c
 8007d18:	20001058 	.word	0x20001058

08007d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d28:	f7fe fc42 	bl	80065b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d2c:	4b58      	ldr	r3, [pc, #352]	; (8007e90 <pvPortMalloc+0x174>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d34:	f000 f910 	bl	8007f58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d38:	4b56      	ldr	r3, [pc, #344]	; (8007e94 <pvPortMalloc+0x178>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f040 808e 	bne.w	8007e62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01d      	beq.n	8007d88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d014      	beq.n	8007d88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	3308      	adds	r3, #8
 8007d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <pvPortMalloc+0x6c>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	617b      	str	r3, [r7, #20]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d069      	beq.n	8007e62 <pvPortMalloc+0x146>
 8007d8e:	4b42      	ldr	r3, [pc, #264]	; (8007e98 <pvPortMalloc+0x17c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d864      	bhi.n	8007e62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d98:	4b40      	ldr	r3, [pc, #256]	; (8007e9c <pvPortMalloc+0x180>)
 8007d9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	; (8007e9c <pvPortMalloc+0x180>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007da2:	e004      	b.n	8007dae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d903      	bls.n	8007dc0 <pvPortMalloc+0xa4>
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f1      	bne.n	8007da4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dc0:	4b33      	ldr	r3, [pc, #204]	; (8007e90 <pvPortMalloc+0x174>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d04b      	beq.n	8007e62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	4413      	add	r3, r2
 8007dd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	2308      	movs	r3, #8
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d91f      	bls.n	8007e2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0xf8>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	613b      	str	r3, [r7, #16]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e26:	69b8      	ldr	r0, [r7, #24]
 8007e28:	f000 f8f8 	bl	800801c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	; (8007e98 <pvPortMalloc+0x17c>)
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <pvPortMalloc+0x17c>)
 8007e38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e3a:	4b17      	ldr	r3, [pc, #92]	; (8007e98 <pvPortMalloc+0x17c>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	4b18      	ldr	r3, [pc, #96]	; (8007ea0 <pvPortMalloc+0x184>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d203      	bcs.n	8007e4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <pvPortMalloc+0x17c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <pvPortMalloc+0x184>)
 8007e4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <pvPortMalloc+0x178>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e62:	f7fe fbb3 	bl	80065cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <pvPortMalloc+0x16a>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
}
 8007e82:	bf00      	nop
 8007e84:	e7fe      	b.n	8007e84 <pvPortMalloc+0x168>
	return pvReturn;
 8007e86:	69fb      	ldr	r3, [r7, #28]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	; 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20003064 	.word	0x20003064
 8007e94:	20003070 	.word	0x20003070
 8007e98:	20003068 	.word	0x20003068
 8007e9c:	2000305c 	.word	0x2000305c
 8007ea0:	2000306c 	.word	0x2000306c

08007ea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d048      	beq.n	8007f48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	425b      	negs	r3, r3
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	4b21      	ldr	r3, [pc, #132]	; (8007f50 <vPortFree+0xac>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <vPortFree+0x44>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	60fb      	str	r3, [r7, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <vPortFree+0x62>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	60bb      	str	r3, [r7, #8]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <vPortFree+0xac>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d019      	beq.n	8007f48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d115      	bne.n	8007f48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <vPortFree+0xac>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	401a      	ands	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f2c:	f7fe fb40 	bl	80065b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	4b07      	ldr	r3, [pc, #28]	; (8007f54 <vPortFree+0xb0>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4413      	add	r3, r2
 8007f3a:	4a06      	ldr	r2, [pc, #24]	; (8007f54 <vPortFree+0xb0>)
 8007f3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f3e:	6938      	ldr	r0, [r7, #16]
 8007f40:	f000 f86c 	bl	800801c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f44:	f7fe fb42 	bl	80065cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20003070 	.word	0x20003070
 8007f54:	20003068 	.word	0x20003068

08007f58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <prvHeapInit+0xac>)
 8007f66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00c      	beq.n	8007f8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3307      	adds	r3, #7
 8007f76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0307 	bic.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <prvHeapInit+0xac>)
 8007f88:	4413      	add	r3, r2
 8007f8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <prvHeapInit+0xb0>)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f96:	4b1c      	ldr	r3, [pc, #112]	; (8008008 <prvHeapInit+0xb0>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0307 	bic.w	r3, r3, #7
 8007fb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a15      	ldr	r2, [pc, #84]	; (800800c <prvHeapInit+0xb4>)
 8007fb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fba:	4b14      	ldr	r3, [pc, #80]	; (800800c <prvHeapInit+0xb4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <prvHeapInit+0xb4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <prvHeapInit+0xb4>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <prvHeapInit+0xb8>)
 8007fe6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <prvHeapInit+0xbc>)
 8007fee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ff0:	4b09      	ldr	r3, [pc, #36]	; (8008018 <prvHeapInit+0xc0>)
 8007ff2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ff6:	601a      	str	r2, [r3, #0]
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	2000105c 	.word	0x2000105c
 8008008:	2000305c 	.word	0x2000305c
 800800c:	20003064 	.word	0x20003064
 8008010:	2000306c 	.word	0x2000306c
 8008014:	20003068 	.word	0x20003068
 8008018:	20003070 	.word	0x20003070

0800801c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008024:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <prvInsertBlockIntoFreeList+0xa8>)
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e002      	b.n	8008030 <prvInsertBlockIntoFreeList+0x14>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d8f7      	bhi.n	800802a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4413      	add	r3, r2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	d108      	bne.n	800805e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	441a      	add	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d118      	bne.n	80080a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <prvInsertBlockIntoFreeList+0xac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d00d      	beq.n	800809a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	441a      	add	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e008      	b.n	80080ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <prvInsertBlockIntoFreeList+0xac>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e003      	b.n	80080ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d002      	beq.n	80080ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ba:	bf00      	nop
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	2000305c 	.word	0x2000305c
 80080c8:	20003064 	.word	0x20003064

080080cc <__libc_init_array>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	2600      	movs	r6, #0
 80080d0:	4d0c      	ldr	r5, [pc, #48]	; (8008104 <__libc_init_array+0x38>)
 80080d2:	4c0d      	ldr	r4, [pc, #52]	; (8008108 <__libc_init_array+0x3c>)
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	42a6      	cmp	r6, r4
 80080da:	d109      	bne.n	80080f0 <__libc_init_array+0x24>
 80080dc:	f000 f8f0 	bl	80082c0 <_init>
 80080e0:	2600      	movs	r6, #0
 80080e2:	4d0a      	ldr	r5, [pc, #40]	; (800810c <__libc_init_array+0x40>)
 80080e4:	4c0a      	ldr	r4, [pc, #40]	; (8008110 <__libc_init_array+0x44>)
 80080e6:	1b64      	subs	r4, r4, r5
 80080e8:	10a4      	asrs	r4, r4, #2
 80080ea:	42a6      	cmp	r6, r4
 80080ec:	d105      	bne.n	80080fa <__libc_init_array+0x2e>
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f4:	4798      	blx	r3
 80080f6:	3601      	adds	r6, #1
 80080f8:	e7ee      	b.n	80080d8 <__libc_init_array+0xc>
 80080fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fe:	4798      	blx	r3
 8008100:	3601      	adds	r6, #1
 8008102:	e7f2      	b.n	80080ea <__libc_init_array+0x1e>
 8008104:	0800860c 	.word	0x0800860c
 8008108:	0800860c 	.word	0x0800860c
 800810c:	0800860c 	.word	0x0800860c
 8008110:	08008610 	.word	0x08008610

08008114 <__retarget_lock_acquire_recursive>:
 8008114:	4770      	bx	lr

08008116 <__retarget_lock_release_recursive>:
 8008116:	4770      	bx	lr

08008118 <memcpy>:
 8008118:	440a      	add	r2, r1
 800811a:	4291      	cmp	r1, r2
 800811c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008120:	d100      	bne.n	8008124 <memcpy+0xc>
 8008122:	4770      	bx	lr
 8008124:	b510      	push	{r4, lr}
 8008126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800812a:	4291      	cmp	r1, r2
 800812c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008130:	d1f9      	bne.n	8008126 <memcpy+0xe>
 8008132:	bd10      	pop	{r4, pc}

08008134 <memset>:
 8008134:	4603      	mov	r3, r0
 8008136:	4402      	add	r2, r0
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <memset+0xa>
 800813c:	4770      	bx	lr
 800813e:	f803 1b01 	strb.w	r1, [r3], #1
 8008142:	e7f9      	b.n	8008138 <memset+0x4>

08008144 <cleanup_glue>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	460c      	mov	r4, r1
 8008148:	6809      	ldr	r1, [r1, #0]
 800814a:	4605      	mov	r5, r0
 800814c:	b109      	cbz	r1, 8008152 <cleanup_glue+0xe>
 800814e:	f7ff fff9 	bl	8008144 <cleanup_glue>
 8008152:	4621      	mov	r1, r4
 8008154:	4628      	mov	r0, r5
 8008156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800815a:	f000 b869 	b.w	8008230 <_free_r>
	...

08008160 <_reclaim_reent>:
 8008160:	4b2c      	ldr	r3, [pc, #176]	; (8008214 <_reclaim_reent+0xb4>)
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4604      	mov	r4, r0
 8008168:	4283      	cmp	r3, r0
 800816a:	d051      	beq.n	8008210 <_reclaim_reent+0xb0>
 800816c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800816e:	b143      	cbz	r3, 8008182 <_reclaim_reent+0x22>
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d14a      	bne.n	800820c <_reclaim_reent+0xac>
 8008176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	b111      	cbz	r1, 8008182 <_reclaim_reent+0x22>
 800817c:	4620      	mov	r0, r4
 800817e:	f000 f857 	bl	8008230 <_free_r>
 8008182:	6961      	ldr	r1, [r4, #20]
 8008184:	b111      	cbz	r1, 800818c <_reclaim_reent+0x2c>
 8008186:	4620      	mov	r0, r4
 8008188:	f000 f852 	bl	8008230 <_free_r>
 800818c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800818e:	b111      	cbz	r1, 8008196 <_reclaim_reent+0x36>
 8008190:	4620      	mov	r0, r4
 8008192:	f000 f84d 	bl	8008230 <_free_r>
 8008196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008198:	b111      	cbz	r1, 80081a0 <_reclaim_reent+0x40>
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f848 	bl	8008230 <_free_r>
 80081a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80081a2:	b111      	cbz	r1, 80081aa <_reclaim_reent+0x4a>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 f843 	bl	8008230 <_free_r>
 80081aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80081ac:	b111      	cbz	r1, 80081b4 <_reclaim_reent+0x54>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f83e 	bl	8008230 <_free_r>
 80081b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081b6:	b111      	cbz	r1, 80081be <_reclaim_reent+0x5e>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 f839 	bl	8008230 <_free_r>
 80081be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80081c0:	b111      	cbz	r1, 80081c8 <_reclaim_reent+0x68>
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 f834 	bl	8008230 <_free_r>
 80081c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ca:	b111      	cbz	r1, 80081d2 <_reclaim_reent+0x72>
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 f82f 	bl	8008230 <_free_r>
 80081d2:	69a3      	ldr	r3, [r4, #24]
 80081d4:	b1e3      	cbz	r3, 8008210 <_reclaim_reent+0xb0>
 80081d6:	4620      	mov	r0, r4
 80081d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081da:	4798      	blx	r3
 80081dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081de:	b1b9      	cbz	r1, 8008210 <_reclaim_reent+0xb0>
 80081e0:	4620      	mov	r0, r4
 80081e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081e6:	f7ff bfad 	b.w	8008144 <cleanup_glue>
 80081ea:	5949      	ldr	r1, [r1, r5]
 80081ec:	b941      	cbnz	r1, 8008200 <_reclaim_reent+0xa0>
 80081ee:	3504      	adds	r5, #4
 80081f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081f2:	2d80      	cmp	r5, #128	; 0x80
 80081f4:	68d9      	ldr	r1, [r3, #12]
 80081f6:	d1f8      	bne.n	80081ea <_reclaim_reent+0x8a>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 f819 	bl	8008230 <_free_r>
 80081fe:	e7ba      	b.n	8008176 <_reclaim_reent+0x16>
 8008200:	680e      	ldr	r6, [r1, #0]
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f814 	bl	8008230 <_free_r>
 8008208:	4631      	mov	r1, r6
 800820a:	e7ef      	b.n	80081ec <_reclaim_reent+0x8c>
 800820c:	2500      	movs	r5, #0
 800820e:	e7ef      	b.n	80081f0 <_reclaim_reent+0x90>
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	bf00      	nop
 8008214:	2000003c 	.word	0x2000003c

08008218 <__malloc_lock>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__malloc_lock+0x8>)
 800821a:	f7ff bf7b 	b.w	8008114 <__retarget_lock_acquire_recursive>
 800821e:	bf00      	nop
 8008220:	20003074 	.word	0x20003074

08008224 <__malloc_unlock>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__malloc_unlock+0x8>)
 8008226:	f7ff bf76 	b.w	8008116 <__retarget_lock_release_recursive>
 800822a:	bf00      	nop
 800822c:	20003074 	.word	0x20003074

08008230 <_free_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	d040      	beq.n	80082ba <_free_r+0x8a>
 8008238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800823c:	1f0c      	subs	r4, r1, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	bfb8      	it	lt
 8008242:	18e4      	addlt	r4, r4, r3
 8008244:	f7ff ffe8 	bl	8008218 <__malloc_lock>
 8008248:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <_free_r+0x8c>)
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	b933      	cbnz	r3, 800825c <_free_r+0x2c>
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	4628      	mov	r0, r5
 8008254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008258:	f7ff bfe4 	b.w	8008224 <__malloc_unlock>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d908      	bls.n	8008272 <_free_r+0x42>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	e7ed      	b.n	800824e <_free_r+0x1e>
 8008272:	461a      	mov	r2, r3
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b10b      	cbz	r3, 800827c <_free_r+0x4c>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d9fa      	bls.n	8008272 <_free_r+0x42>
 800827c:	6811      	ldr	r1, [r2, #0]
 800827e:	1850      	adds	r0, r2, r1
 8008280:	42a0      	cmp	r0, r4
 8008282:	d10b      	bne.n	800829c <_free_r+0x6c>
 8008284:	6820      	ldr	r0, [r4, #0]
 8008286:	4401      	add	r1, r0
 8008288:	1850      	adds	r0, r2, r1
 800828a:	4283      	cmp	r3, r0
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	d1e0      	bne.n	8008252 <_free_r+0x22>
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4401      	add	r1, r0
 8008296:	6011      	str	r1, [r2, #0]
 8008298:	6053      	str	r3, [r2, #4]
 800829a:	e7da      	b.n	8008252 <_free_r+0x22>
 800829c:	d902      	bls.n	80082a4 <_free_r+0x74>
 800829e:	230c      	movs	r3, #12
 80082a0:	602b      	str	r3, [r5, #0]
 80082a2:	e7d6      	b.n	8008252 <_free_r+0x22>
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	1821      	adds	r1, r4, r0
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf01      	itttt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	1809      	addeq	r1, r1, r0
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6054      	str	r4, [r2, #4]
 80082b8:	e7cb      	b.n	8008252 <_free_r+0x22>
 80082ba:	bd38      	pop	{r3, r4, r5, pc}
 80082bc:	20003078 	.word	0x20003078

080082c0 <_init>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	bf00      	nop
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr

080082cc <_fini>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr
