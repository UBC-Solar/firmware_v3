
mcb_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008208  08008208  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08008208  08008208  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008208  08008208  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008208  08008208  00018208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fdc  200000a4  080082b4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003080  080082b4  00023080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a91f  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004019  00000000  00000000  0003a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3bc  00000000  00000000  00041248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197ef  00000000  00000000  0005e604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a823b  00000000  00000000  00077df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012002e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  00120080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a4 	.word	0x200000a4
 800020c:	00000000 	.word	0x00000000
 8000210:	08007ed0 	.word	0x08007ed0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a8 	.word	0x200000a8
 800022c:	08007ed0 	.word	0x08007ed0

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	; 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_fmul>:
 800044c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000454:	bf1e      	ittt	ne
 8000456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045a:	ea92 0f0c 	teqne	r2, ip
 800045e:	ea93 0f0c 	teqne	r3, ip
 8000462:	d06f      	beq.n	8000544 <__aeabi_fmul+0xf8>
 8000464:	441a      	add	r2, r3
 8000466:	ea80 0c01 	eor.w	ip, r0, r1
 800046a:	0240      	lsls	r0, r0, #9
 800046c:	bf18      	it	ne
 800046e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000472:	d01e      	beq.n	80004b2 <__aeabi_fmul+0x66>
 8000474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800047c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000480:	fba0 3101 	umull	r3, r1, r0, r1
 8000484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000488:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800048c:	bf3e      	ittt	cc
 800048e:	0049      	lslcc	r1, r1, #1
 8000490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000494:	005b      	lslcc	r3, r3, #1
 8000496:	ea40 0001 	orr.w	r0, r0, r1
 800049a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800049e:	2afd      	cmp	r2, #253	; 0xfd
 80004a0:	d81d      	bhi.n	80004de <__aeabi_fmul+0x92>
 80004a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004aa:	bf08      	it	eq
 80004ac:	f020 0001 	biceq.w	r0, r0, #1
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ba:	bf08      	it	eq
 80004bc:	0249      	lsleq	r1, r1, #9
 80004be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004c6:	3a7f      	subs	r2, #127	; 0x7f
 80004c8:	bfc2      	ittt	gt
 80004ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d2:	4770      	bxgt	lr
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	3a01      	subs	r2, #1
 80004de:	dc5d      	bgt.n	800059c <__aeabi_fmul+0x150>
 80004e0:	f112 0f19 	cmn.w	r2, #25
 80004e4:	bfdc      	itt	le
 80004e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ea:	4770      	bxle	lr
 80004ec:	f1c2 0200 	rsb	r2, r2, #0
 80004f0:	0041      	lsls	r1, r0, #1
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	f1c2 0220 	rsb	r2, r2, #32
 80004fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000502:	f140 0000 	adc.w	r0, r0, #0
 8000506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050a:	bf08      	it	eq
 800050c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000510:	4770      	bx	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051a:	bf02      	ittt	eq
 800051c:	0040      	lsleq	r0, r0, #1
 800051e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000522:	3a01      	subeq	r2, #1
 8000524:	d0f9      	beq.n	800051a <__aeabi_fmul+0xce>
 8000526:	ea40 000c 	orr.w	r0, r0, ip
 800052a:	f093 0f00 	teq	r3, #0
 800052e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000532:	bf02      	ittt	eq
 8000534:	0049      	lsleq	r1, r1, #1
 8000536:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053a:	3b01      	subeq	r3, #1
 800053c:	d0f9      	beq.n	8000532 <__aeabi_fmul+0xe6>
 800053e:	ea41 010c 	orr.w	r1, r1, ip
 8000542:	e78f      	b.n	8000464 <__aeabi_fmul+0x18>
 8000544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000548:	ea92 0f0c 	teq	r2, ip
 800054c:	bf18      	it	ne
 800054e:	ea93 0f0c 	teqne	r3, ip
 8000552:	d00a      	beq.n	800056a <__aeabi_fmul+0x11e>
 8000554:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000558:	bf18      	it	ne
 800055a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800055e:	d1d8      	bne.n	8000512 <__aeabi_fmul+0xc6>
 8000560:	ea80 0001 	eor.w	r0, r0, r1
 8000564:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000568:	4770      	bx	lr
 800056a:	f090 0f00 	teq	r0, #0
 800056e:	bf17      	itett	ne
 8000570:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000574:	4608      	moveq	r0, r1
 8000576:	f091 0f00 	teqne	r1, #0
 800057a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800057e:	d014      	beq.n	80005aa <__aeabi_fmul+0x15e>
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d101      	bne.n	800058a <__aeabi_fmul+0x13e>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	d10f      	bne.n	80005aa <__aeabi_fmul+0x15e>
 800058a:	ea93 0f0c 	teq	r3, ip
 800058e:	d103      	bne.n	8000598 <__aeabi_fmul+0x14c>
 8000590:	024b      	lsls	r3, r1, #9
 8000592:	bf18      	it	ne
 8000594:	4608      	movne	r0, r1
 8000596:	d108      	bne.n	80005aa <__aeabi_fmul+0x15e>
 8000598:	ea80 0001 	eor.w	r0, r0, r1
 800059c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a8:	4770      	bx	lr
 80005aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_fdiv>:
 80005b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005bc:	bf1e      	ittt	ne
 80005be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c2:	ea92 0f0c 	teqne	r2, ip
 80005c6:	ea93 0f0c 	teqne	r3, ip
 80005ca:	d069      	beq.n	80006a0 <__aeabi_fdiv+0xec>
 80005cc:	eba2 0203 	sub.w	r2, r2, r3
 80005d0:	ea80 0c01 	eor.w	ip, r0, r1
 80005d4:	0249      	lsls	r1, r1, #9
 80005d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005da:	d037      	beq.n	800064c <__aeabi_fdiv+0x98>
 80005dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005ec:	428b      	cmp	r3, r1
 80005ee:	bf38      	it	cc
 80005f0:	005b      	lslcc	r3, r3, #1
 80005f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fa:	428b      	cmp	r3, r1
 80005fc:	bf24      	itt	cs
 80005fe:	1a5b      	subcs	r3, r3, r1
 8000600:	ea40 000c 	orrcs.w	r0, r0, ip
 8000604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000608:	bf24      	itt	cs
 800060a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800060e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000616:	bf24      	itt	cs
 8000618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800061c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000624:	bf24      	itt	cs
 8000626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	bf18      	it	ne
 8000632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000636:	d1e0      	bne.n	80005fa <__aeabi_fdiv+0x46>
 8000638:	2afd      	cmp	r2, #253	; 0xfd
 800063a:	f63f af50 	bhi.w	80004de <__aeabi_fmul+0x92>
 800063e:	428b      	cmp	r3, r1
 8000640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000644:	bf08      	it	eq
 8000646:	f020 0001 	biceq.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000654:	327f      	adds	r2, #127	; 0x7f
 8000656:	bfc2      	ittt	gt
 8000658:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800065c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000660:	4770      	bxgt	lr
 8000662:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	3a01      	subs	r2, #1
 800066c:	e737      	b.n	80004de <__aeabi_fmul+0x92>
 800066e:	f092 0f00 	teq	r2, #0
 8000672:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0040      	lsleq	r0, r0, #1
 800067a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800067e:	3a01      	subeq	r2, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fdiv+0xc2>
 8000682:	ea40 000c 	orr.w	r0, r0, ip
 8000686:	f093 0f00 	teq	r3, #0
 800068a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800068e:	bf02      	ittt	eq
 8000690:	0049      	lsleq	r1, r1, #1
 8000692:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000696:	3b01      	subeq	r3, #1
 8000698:	d0f9      	beq.n	800068e <__aeabi_fdiv+0xda>
 800069a:	ea41 010c 	orr.w	r1, r1, ip
 800069e:	e795      	b.n	80005cc <__aeabi_fdiv+0x18>
 80006a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a4:	ea92 0f0c 	teq	r2, ip
 80006a8:	d108      	bne.n	80006bc <__aeabi_fdiv+0x108>
 80006aa:	0242      	lsls	r2, r0, #9
 80006ac:	f47f af7d 	bne.w	80005aa <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	f47f af70 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e776      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006bc:	ea93 0f0c 	teq	r3, ip
 80006c0:	d104      	bne.n	80006cc <__aeabi_fdiv+0x118>
 80006c2:	024b      	lsls	r3, r1, #9
 80006c4:	f43f af4c 	beq.w	8000560 <__aeabi_fmul+0x114>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e76e      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d0:	bf18      	it	ne
 80006d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006d6:	d1ca      	bne.n	800066e <__aeabi_fdiv+0xba>
 80006d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006dc:	f47f af5c 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e4:	f47f af3c 	bne.w	8000560 <__aeabi_fmul+0x114>
 80006e8:	e75f      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006ea:	bf00      	nop

080006ec <__gesf2>:
 80006ec:	f04f 3cff 	mov.w	ip, #4294967295
 80006f0:	e006      	b.n	8000700 <__cmpsf2+0x4>
 80006f2:	bf00      	nop

080006f4 <__lesf2>:
 80006f4:	f04f 0c01 	mov.w	ip, #1
 80006f8:	e002      	b.n	8000700 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__cmpsf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d011      	beq.n	800073c <__cmpsf2+0x40>
 8000718:	b001      	add	sp, #4
 800071a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800071e:	bf18      	it	ne
 8000720:	ea90 0f01 	teqne	r0, r1
 8000724:	bf58      	it	pl
 8000726:	ebb2 0003 	subspl.w	r0, r2, r3
 800072a:	bf88      	it	hi
 800072c:	17c8      	asrhi	r0, r1, #31
 800072e:	bf38      	it	cc
 8000730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000734:	bf18      	it	ne
 8000736:	f040 0001 	orrne.w	r0, r0, #1
 800073a:	4770      	bx	lr
 800073c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000740:	d102      	bne.n	8000748 <__cmpsf2+0x4c>
 8000742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000746:	d105      	bne.n	8000754 <__cmpsf2+0x58>
 8000748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800074c:	d1e4      	bne.n	8000718 <__cmpsf2+0x1c>
 800074e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000752:	d0e1      	beq.n	8000718 <__cmpsf2+0x1c>
 8000754:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <__aeabi_cfrcmple>:
 800075c:	4684      	mov	ip, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4661      	mov	r1, ip
 8000762:	e7ff      	b.n	8000764 <__aeabi_cfcmpeq>

08000764 <__aeabi_cfcmpeq>:
 8000764:	b50f      	push	{r0, r1, r2, r3, lr}
 8000766:	f7ff ffc9 	bl	80006fc <__cmpsf2>
 800076a:	2800      	cmp	r0, #0
 800076c:	bf48      	it	mi
 800076e:	f110 0f00 	cmnmi.w	r0, #0
 8000772:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000774 <__aeabi_fcmpeq>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff fff4 	bl	8000764 <__aeabi_cfcmpeq>
 800077c:	bf0c      	ite	eq
 800077e:	2001      	moveq	r0, #1
 8000780:	2000      	movne	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_fcmplt>:
 8000788:	f84d ed08 	str.w	lr, [sp, #-8]!
 800078c:	f7ff ffea 	bl	8000764 <__aeabi_cfcmpeq>
 8000790:	bf34      	ite	cc
 8000792:	2001      	movcc	r0, #1
 8000794:	2000      	movcs	r0, #0
 8000796:	f85d fb08 	ldr.w	pc, [sp], #8
 800079a:	bf00      	nop

0800079c <__aeabi_fcmple>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff ffe0 	bl	8000764 <__aeabi_cfcmpeq>
 80007a4:	bf94      	ite	ls
 80007a6:	2001      	movls	r0, #1
 80007a8:	2000      	movhi	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmpge>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffd2 	bl	800075c <__aeabi_cfrcmple>
 80007b8:	bf94      	ite	ls
 80007ba:	2001      	movls	r0, #1
 80007bc:	2000      	movhi	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmpgt>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffc8 	bl	800075c <__aeabi_cfrcmple>
 80007cc:	bf34      	ite	cc
 80007ce:	2001      	movcc	r0, #1
 80007d0:	2000      	movcs	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_ADC1_Init+0x74>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <MX_ADC1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ADC1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ADC1_Init+0x74>)
 8000802:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_ADC1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_ADC1_Init+0x74>)
 8000816:	f001 f8fb 	bl	8001a10 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fdfc 	bl	800141c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000824:	230e      	movs	r3, #14
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0x74>)
 8000836:	f001 f9d5 	bl	8001be4 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000840:	f000 fdec 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000c0 	.word	0x200000c0
 8000850:	40012400 	.word	0x40012400

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <HAL_ADC_MspInit+0x98>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d137      	bne.n	80008e4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_ADC_MspInit+0x9c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	4619      	mov	r1, r3
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <HAL_ADC_MspInit+0xa0>)
 80008cc:	f001 fef4 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008d0:	2310      	movs	r3, #16
 80008d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	4619      	mov	r1, r3
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_ADC_MspInit+0xa4>)
 80008e0:	f001 feea 	bl	80026b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40012400 	.word	0x40012400
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40011000 	.word	0x40011000

080008fc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_CAN_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_CAN_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_CAN_Init+0x64>)
 8000908:	2208      	movs	r2, #8
 800090a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_CAN_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_CAN_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_CAN_Init+0x64>)
 800091a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800091e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_CAN_Init+0x64>)
 8000922:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000926:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = ENABLE;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_CAN_Init+0x64>)
 800092a:	2201      	movs	r2, #1
 800092c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_CAN_Init+0x64>)
 8000930:	2201      	movs	r2, #1
 8000932:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_CAN_Init+0x64>)
 8000936:	2201      	movs	r2, #1
 8000938:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_CAN_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_CAN_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_CAN_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_CAN_Init+0x64>)
 800094e:	f001 fa82 	bl	8001e56 <HAL_CAN_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fd60 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000110 	.word	0x20000110
 8000964:	40006400 	.word	0x40006400

08000968 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <HAL_CAN_MspInit+0xb0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d143      	bne.n	8000a10 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	61d3      	str	r3, [r2, #28]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 8000996:	69db      	ldr	r3, [r3, #28]
 8000998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_CAN_MspInit+0xb4>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <HAL_CAN_MspInit+0xb8>)
 80009ce:	f001 fe73 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <HAL_CAN_MspInit+0xb8>)
 80009e8:	f001 fe66 	bl	80026b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_CAN_MspInit+0xbc>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_CAN_MspInit+0xbc>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40006400 	.word	0x40006400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40010000 	.word	0x40010000

08000a28 <EncoderInit>:
#include "stm32f1xx_hal.h"

/**
 * Initializes the encoder for the accelerator pedal.
 */
void EncoderInit(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

    // the APB2ENR enables clocks for the peripherals

    //Initialize AFIO Clock
    RCC->APB2ENR |= 0x1;
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <EncoderInit+0xcc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <EncoderInit+0xcc>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6193      	str	r3, [r2, #24]

    //TIM 1 Enable
    RCC->APB2ENR |= 0x1 << 11;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <EncoderInit+0xcc>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <EncoderInit+0xcc>)
 8000a3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a42:	6193      	str	r3, [r2, #24]

    //Initialize GPIOA Clock
    RCC->APB2ENR |= 0x1 << 2;
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <EncoderInit+0xcc>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <EncoderInit+0xcc>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= 0;
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <EncoderInit+0xd0>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <EncoderInit+0xd0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]

    // configures PA8 as floating input
    // also configures PA9 as floating input
    GPIOA->CRH |= 0x00000044;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <EncoderInit+0xd0>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <EncoderInit+0xd0>)
 8000a60:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000a64:	6053      	str	r3, [r2, #4]

    //TIM 1 No Remap
    AFIO->MAPR &= ~(0x11 << 6);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <EncoderInit+0xd4>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	4a24      	ldr	r2, [pc, #144]	; (8000afc <EncoderInit+0xd4>)
 8000a6c:	f423 6388 	bic.w	r3, r3, #1088	; 0x440
 8000a70:	6053      	str	r3, [r2, #4]

    TIM1->CCMR1 |= 0x01;    //Map Channel 1 to TI1
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <EncoderInit+0xd8>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <EncoderInit+0xd8>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0x01 << 8; //Map Channel 2 to TI2
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <EncoderInit+0xd8>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <EncoderInit+0xd8>)
 8000a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a88:	6193      	str	r3, [r2, #24]

    TIM1->CCER &= ~(0x1 << 1);
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <EncoderInit+0xd8>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <EncoderInit+0xd8>)
 8000a90:	f023 0302 	bic.w	r3, r3, #2
 8000a94:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 3);
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <EncoderInit+0xd8>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <EncoderInit+0xd8>)
 8000a9c:	f023 0308 	bic.w	r3, r3, #8
 8000aa0:	6213      	str	r3, [r2, #32]

    TIM1->CCER &= ~(0x1 << 5);
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <EncoderInit+0xd8>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <EncoderInit+0xd8>)
 8000aa8:	f023 0320 	bic.w	r3, r3, #32
 8000aac:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 7);
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <EncoderInit+0xd8>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <EncoderInit+0xd8>)
 8000ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ab8:	6213      	str	r3, [r2, #32]

    TIM1->CCER |= 0x1;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <EncoderInit+0xd8>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <EncoderInit+0xd8>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= 0x1 << 4;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <EncoderInit+0xd8>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <EncoderInit+0xd8>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6213      	str	r3, [r2, #32]

    TIM1->SMCR |= 0x011;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <EncoderInit+0xd8>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <EncoderInit+0xd8>)
 8000ad8:	f043 0311 	orr.w	r3, r3, #17
 8000adc:	6093      	str	r3, [r2, #8]

    TIM1->CR1 |= 0x1;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <EncoderInit+0xd8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <EncoderInit+0xd8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6013      	str	r3, [r2, #0]

}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010000 	.word	0x40010000
 8000b00:	40012c00 	.word	0x40012c00

08000b04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

    encoderQueueHandle = osMessageQueueNew(ENCODER_QUEUE_MSG_CNT, ENCODER_QUEUE_MSG_SIZE, &encoderQueue_attributes);
 8000b08:	4a37      	ldr	r2, [pc, #220]	; (8000be8 <MX_FREERTOS_Init+0xe4>)
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f003 fcbf 	bl	8004490 <osMessageQueueNew>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a35      	ldr	r2, [pc, #212]	; (8000bec <MX_FREERTOS_Init+0xe8>)
 8000b16:	6013      	str	r3, [r2, #0]

    readEncoderTaskHandle = osThreadNew(readEncoderTask, NULL, &readEncoderTask_attributes);
 8000b18:	4a35      	ldr	r2, [pc, #212]	; (8000bf0 <MX_FREERTOS_Init+0xec>)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <MX_FREERTOS_Init+0xf0>)
 8000b1e:	f003 f933 	bl	8003d88 <osThreadNew>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a34      	ldr	r2, [pc, #208]	; (8000bf8 <MX_FREERTOS_Init+0xf4>)
 8000b26:	6013      	str	r3, [r2, #0]
    updateEventFlagsTaskHandle = osThreadNew(updateEventFlagsTask, NULL, &updateEventFlagsTask_attributes);
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <MX_FREERTOS_Init+0xf8>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_FREERTOS_Init+0xfc>)
 8000b2e:	f003 f92b 	bl	8003d88 <osThreadNew>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <MX_FREERTOS_Init+0x100>)
 8000b36:	6013      	str	r3, [r2, #0]

    sendMotorCommandTaskHandle = osThreadNew(sendMotorCommandTask, NULL, &sendMotorCommandTask_attributes);
 8000b38:	4a33      	ldr	r2, [pc, #204]	; (8000c08 <MX_FREERTOS_Init+0x104>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_FREERTOS_Init+0x108>)
 8000b3e:	f003 f923 	bl	8003d88 <osThreadNew>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <MX_FREERTOS_Init+0x10c>)
 8000b46:	6013      	str	r3, [r2, #0]
    sendRegenCommandTaskHandle = osThreadNew(sendRegenCommandTask, NULL, &sendRegenCommandTask_attributes);
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <MX_FREERTOS_Init+0x110>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4832      	ldr	r0, [pc, #200]	; (8000c18 <MX_FREERTOS_Init+0x114>)
 8000b4e:	f003 f91b 	bl	8003d88 <osThreadNew>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <MX_FREERTOS_Init+0x118>)
 8000b56:	6013      	str	r3, [r2, #0]
    sendCruiseCommandTaskHandle = osThreadNew(sendCruiseCommandTask, NULL, &sendCruiseCommandTask_attributes);
 8000b58:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <MX_FREERTOS_Init+0x11c>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4831      	ldr	r0, [pc, #196]	; (8000c24 <MX_FREERTOS_Init+0x120>)
 8000b5e:	f003 f913 	bl	8003d88 <osThreadNew>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_FREERTOS_Init+0x124>)
 8000b66:	6013      	str	r3, [r2, #0]
    sendIdleCommandTaskHandle = osThreadNew(sendIdleCommandTask, NULL, &sendIdleCommandTask_attributes);
 8000b68:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <MX_FREERTOS_Init+0x128>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4830      	ldr	r0, [pc, #192]	; (8000c30 <MX_FREERTOS_Init+0x12c>)
 8000b6e:	f003 f90b 	bl	8003d88 <osThreadNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_FREERTOS_Init+0x130>)
 8000b76:	6013      	str	r3, [r2, #0]

    sendNextScreenMessageTaskHandle = osThreadNew(sendNextScreenMessageTask, NULL, &sendNextScreenTask_attributes);
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <MX_FREERTOS_Init+0x134>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	482f      	ldr	r0, [pc, #188]	; (8000c3c <MX_FREERTOS_Init+0x138>)
 8000b7e:	f003 f903 	bl	8003d88 <osThreadNew>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <MX_FREERTOS_Init+0x13c>)
 8000b86:	6013      	str	r3, [r2, #0]

    receiveBatteryMessageTaskHandle = osThreadNew(receiveBatteryMessageTask, NULL, &receiveBatteryMessageTask_attributes);
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <MX_FREERTOS_Init+0x140>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	482e      	ldr	r0, [pc, #184]	; (8000c48 <MX_FREERTOS_Init+0x144>)
 8000b8e:	f003 f8fb 	bl	8003d88 <osThreadNew>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <MX_FREERTOS_Init+0x148>)
 8000b96:	6013      	str	r3, [r2, #0]

	sendMotorOverheatTaskHandle = osThreadNew(sendMotorOverheatTask, NULL, &sendMotorOverheatTask_attributes);
 8000b98:	4a2d      	ldr	r2, [pc, #180]	; (8000c50 <MX_FREERTOS_Init+0x14c>)
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	482d      	ldr	r0, [pc, #180]	; (8000c54 <MX_FREERTOS_Init+0x150>)
 8000b9e:	f003 f8f3 	bl	8003d88 <osThreadNew>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <MX_FREERTOS_Init+0x154>)
 8000ba6:	6013      	str	r3, [r2, #0]

	commandEventFlagsHandle = osEventFlagsNew(NULL);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f003 f9f7 	bl	8003f9c <osEventFlagsNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <MX_FREERTOS_Init+0x158>)
 8000bb2:	6013      	str	r3, [r2, #0]

    nextScreenSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f003 fb0f 	bl	80041dc <osSemaphoreNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <MX_FREERTOS_Init+0x15c>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <MX_FREERTOS_Init+0x160>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_FREERTOS_Init+0x164>)
 8000bca:	f003 f8dd 	bl	8003d88 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <MX_FREERTOS_Init+0x168>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of throttleADC */
  throttleADCHandle = osThreadNew(checkThrottleADC, NULL, &throttleADC_attributes);
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <MX_FREERTOS_Init+0x16c>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4826      	ldr	r0, [pc, #152]	; (8000c74 <MX_FREERTOS_Init+0x170>)
 8000bda:	f003 f8d5 	bl	8003d88 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <MX_FREERTOS_Init+0x174>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08008130 	.word	0x08008130
 8000bec:	2000015c 	.word	0x2000015c
 8000bf0:	08007fec 	.word	0x08007fec
 8000bf4:	08000c9d 	.word	0x08000c9d
 8000bf8:	20000138 	.word	0x20000138
 8000bfc:	080080c4 	.word	0x080080c4
 8000c00:	08000ff5 	.word	0x08000ff5
 8000c04:	2000013c 	.word	0x2000013c
 8000c08:	08008010 	.word	0x08008010
 8000c0c:	08000d0d 	.word	0x08000d0d
 8000c10:	20000140 	.word	0x20000140
 8000c14:	08008034 	.word	0x08008034
 8000c18:	08000ded 	.word	0x08000ded
 8000c1c:	20000144 	.word	0x20000144
 8000c20:	08008058 	.word	0x08008058
 8000c24:	08000e95 	.word	0x08000e95
 8000c28:	20000148 	.word	0x20000148
 8000c2c:	080080a0 	.word	0x080080a0
 8000c30:	08000f2d 	.word	0x08000f2d
 8000c34:	2000014c 	.word	0x2000014c
 8000c38:	0800807c 	.word	0x0800807c
 8000c3c:	08000fb9 	.word	0x08000fb9
 8000c40:	20000150 	.word	0x20000150
 8000c44:	080080e8 	.word	0x080080e8
 8000c48:	080010a9 	.word	0x080010a9
 8000c4c:	20000154 	.word	0x20000154
 8000c50:	0800810c 	.word	0x0800810c
 8000c54:	08001105 	.word	0x08001105
 8000c58:	20000158 	.word	0x20000158
 8000c5c:	20000160 	.word	0x20000160
 8000c60:	20000164 	.word	0x20000164
 8000c64:	08008148 	.word	0x08008148
 8000c68:	08000c7d 	.word	0x08000c7d
 8000c6c:	2000016c 	.word	0x2000016c
 8000c70:	0800816c 	.word	0x0800816c
 8000c74:	08000c8d 	.word	0x08000c8d
 8000c78:	20000170 	.word	0x20000170

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f003 f95b 	bl	8003f40 <osDelay>
 8000c8a:	e7fb      	b.n	8000c84 <StartDefaultTask+0x8>

08000c8c <checkThrottleADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkThrottleADC */
void checkThrottleADC(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkThrottleADC */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f003 f953 	bl	8003f40 <osDelay>
 8000c9a:	e7fb      	b.n	8000c94 <checkThrottleADC+0x8>

08000c9c <readEncoderTask>:
/**
 * @brief  Reads the pedal quadrature encoder and places the read value in an RTOS queue.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void readEncoderTask(void *argument) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    static uint16_t old_encoder_reading = 0x0000;


    // TODO: replace with HAL library
    EncoderInit();
 8000ca4:	f7ff fec0 	bl	8000a28 <EncoderInit>

    while (1) {
        encoder_reading = __HAL_TIM_GET_COUNTER(&htim1);
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <readEncoderTask+0x5c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <readEncoderTask+0x60>)
 8000cb2:	801a      	strh	r2, [r3, #0]

        // update the event flags struct
        event_flags.encoder_value_is_zero = (encoder_reading == 0);
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <readEncoderTask+0x60>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2301      	moveq	r3, #1
 8000cc0:	2300      	movne	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <readEncoderTask+0x64>)
 8000cc8:	715a      	strb	r2, [r3, #5]

        if (encoder_reading != old_encoder_reading) {
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <readEncoderTask+0x60>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <readEncoderTask+0x68>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d006      	beq.n	8000ce6 <readEncoderTask+0x4a>
            osMessageQueuePut(encoderQueueHandle, &encoder_reading, 0U, 0U);
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <readEncoderTask+0x6c>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4906      	ldr	r1, [pc, #24]	; (8000cfc <readEncoderTask+0x60>)
 8000ce2:	f003 fc5b 	bl	800459c <osMessageQueuePut>
        }

        old_encoder_reading = encoder_reading;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <readEncoderTask+0x60>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <readEncoderTask+0x68>)
 8000cee:	801a      	strh	r2, [r3, #0]

        osDelay(ENCODER_READ_DELAY);
 8000cf0:	2032      	movs	r0, #50	; 0x32
 8000cf2:	f003 f925 	bl	8003f40 <osDelay>
        encoder_reading = __HAL_TIM_GET_COUNTER(&htim1);
 8000cf6:	e7d7      	b.n	8000ca8 <readEncoderTask+0xc>
 8000cf8:	200001dc 	.word	0x200001dc
 8000cfc:	2000016a 	.word	0x2000016a
 8000d00:	20000184 	.word	0x20000184
 8000d04:	20000174 	.word	0x20000174
 8000d08:	2000015c 	.word	0x2000015c

08000d0c <sendMotorCommandTask>:
/**
 * @brief  Sends motor command (torque-control) CAN message once encoder value is read and the MCB state is NORMAL_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendMotorCommandTask(void *argument) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

    osStatus_t queue_status;

    while (1) {
        // blocks thread waiting for encoder value to be added to queue
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <sendMotorCommandTask+0xb4>)
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	f107 010e 	add.w	r1, r7, #14
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f003 fcb0 	bl	8004684 <osMessageQueueGet>
 8000d24:	61b8      	str	r0, [r7, #24]

        if (queue_status == osOK) {
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10d      	bne.n	8000d48 <sendMotorCommandTask+0x3c>
            // motor current is linearly scaled to pedal position
            current.float_value = (float) encoder_value / (PEDAL_MAX - PEDAL_MIN);
 8000d2c:	89fb      	ldrh	r3, [r7, #14]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb34 	bl	800039c <__aeabi_ui2f>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4923      	ldr	r1, [pc, #140]	; (8000dc4 <sendMotorCommandTask+0xb8>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fc3b 	bl	80005b4 <__aeabi_fdiv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <sendMotorCommandTask+0xbc>)
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e001      	b.n	8000d4c <sendMotorCommandTask+0x40>
        } else {
            // TODO: send CAN message here that indicates the processor is failing to read the encoder
            osThreadYield();
 8000d48:	f003 f8c8 	bl	8003edc <osThreadYield>
        }

        osEventFlagsWait(commandEventFlagsHandle, NORMAL_READY, osFlagsWaitAll, osWaitForever);
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <sendMotorCommandTask+0xc0>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	2201      	movs	r2, #1
 8000d56:	2102      	movs	r1, #2
 8000d58:	f003 f9ca 	bl	80040f0 <osEventFlagsWait>

        // velocity is set to unattainable value for motor torque-control mode
        if (event_flags.reverse_enable) {
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <sendMotorCommandTask+0xc4>)
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <sendMotorCommandTask+0x62>
            velocity.float_value = -100.0;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <sendMotorCommandTask+0xc8>)
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <sendMotorCommandTask+0xcc>)
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e002      	b.n	8000d74 <sendMotorCommandTask+0x68>
        } else {
            velocity.float_value = 100.0;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <sendMotorCommandTask+0xc8>)
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <sendMotorCommandTask+0xd0>)
 8000d72:	601a      	str	r2, [r3, #0]
        }

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	e016      	b.n	8000da8 <sendMotorCommandTask+0x9c>
            data_send[i] = velocity.bytes[i];
 8000d7a:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <sendMotorCommandTask+0xc8>)
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	4413      	add	r3, r2
 8000d80:	7819      	ldrb	r1, [r3, #0]
 8000d82:	f107 0210 	add.w	r2, r7, #16
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <sendMotorCommandTask+0xbc>)
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	440a      	add	r2, r1
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	3320      	adds	r3, #32
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3301      	adds	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	dde5      	ble.n	8000d7a <sendMotorCommandTask+0x6e>
        }

        // send CAN message to motor controller
        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000dae:	f107 0210 	add.w	r2, r7, #16
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <sendMotorCommandTask+0xd4>)
 8000db4:	490b      	ldr	r1, [pc, #44]	; (8000de4 <sendMotorCommandTask+0xd8>)
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <sendMotorCommandTask+0xdc>)
 8000db8:	f001 f98c 	bl	80020d4 <HAL_CAN_AddTxMessage>
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000dbc:	e7aa      	b.n	8000d14 <sendMotorCommandTask+0x8>
 8000dbe:	bf00      	nop
 8000dc0:	2000015c 	.word	0x2000015c
 8000dc4:	437f0000 	.word	0x437f0000
 8000dc8:	20000178 	.word	0x20000178
 8000dcc:	20000160 	.word	0x20000160
 8000dd0:	20000184 	.word	0x20000184
 8000dd4:	2000017c 	.word	0x2000017c
 8000dd8:	c2c80000 	.word	0xc2c80000
 8000ddc:	42c80000 	.word	0x42c80000
 8000de0:	2000010c 	.word	0x2000010c
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000110 	.word	0x20000110

08000dec <sendRegenCommandTask>:
/**
 * @brief  Sends regen command (velocity control) CAN message once MCB state is REGEN_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendRegenCommandTask(void *argument) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a regen command
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <sendRegenCommandTask+0x88>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2104      	movs	r1, #4
 8000e00:	f003 f976 	bl	80040f0 <osEventFlagsWait>

        // velocity is set to zero for regen according to motor controller documentation
        velocity.float_value = 0.0;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <sendRegenCommandTask+0x8c>)
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

        // current is linearly scaled with the regen value read from the ADC
        current.float_value = (float) regen_value / (ADC_MAX - ADC_MIN);
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <sendRegenCommandTask+0x90>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fac3 	bl	800039c <__aeabi_ui2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4919      	ldr	r1, [pc, #100]	; (8000e80 <sendRegenCommandTask+0x94>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fbca 	bl	80005b4 <__aeabi_fdiv>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <sendRegenCommandTask+0x98>)
 8000e26:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	e016      	b.n	8000e5c <sendRegenCommandTask+0x70>
            data_send[i] = velocity.bytes[i];
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <sendRegenCommandTask+0x8c>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4413      	add	r3, r2
 8000e34:	7819      	ldrb	r1, [r3, #0]
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	460a      	mov	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3304      	adds	r3, #4
 8000e46:	490f      	ldr	r1, [pc, #60]	; (8000e84 <sendRegenCommandTask+0x98>)
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	440a      	add	r2, r1
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	3318      	adds	r3, #24
 8000e50:	443b      	add	r3, r7
 8000e52:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	dde5      	ble.n	8000e2e <sendRegenCommandTask+0x42>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000e62:	f107 020c 	add.w	r2, r7, #12
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <sendRegenCommandTask+0x9c>)
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <sendRegenCommandTask+0xa0>)
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <sendRegenCommandTask+0xa4>)
 8000e6c:	f001 f932 	bl	80020d4 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000e70:	e7c0      	b.n	8000df4 <sendRegenCommandTask+0x8>
 8000e72:	bf00      	nop
 8000e74:	20000160 	.word	0x20000160
 8000e78:	2000017c 	.word	0x2000017c
 8000e7c:	2000018c 	.word	0x2000018c
 8000e80:	457ff000 	.word	0x457ff000
 8000e84:	20000178 	.word	0x20000178
 8000e88:	2000010c 	.word	0x2000010c
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000110 	.word	0x20000110

08000e94 <sendCruiseCommandTask>:
/**
 * @brief  Sends cruise-control command (velocity control) CAN message once MCB state is CRUISE_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendCruiseCommandTask (void *argument) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a cruise control command
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <sendCruiseCommandTask+0x78>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	f003 f922 	bl	80040f0 <osEventFlagsWait>

        // current set to maximum for a cruise control message
        current.float_value = 100.0;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <sendCruiseCommandTask+0x7c>)
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <sendCruiseCommandTask+0x80>)
 8000eb0:	601a      	str	r2, [r3, #0]

        // set velocity to cruise value
        velocity.float_value = (float) cruise_value;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <sendCruiseCommandTask+0x84>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fa70 	bl	800039c <__aeabi_ui2f>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <sendCruiseCommandTask+0x88>)
 8000ec0:	6013      	str	r3, [r2, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e016      	b.n	8000ef6 <sendCruiseCommandTask+0x62>
            data_send[i] = velocity.bytes[i];
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <sendCruiseCommandTask+0x88>)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4413      	add	r3, r2
 8000ece:	7819      	ldrb	r1, [r3, #0]
 8000ed0:	f107 020c 	add.w	r2, r7, #12
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	460a      	mov	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	490b      	ldr	r1, [pc, #44]	; (8000f10 <sendCruiseCommandTask+0x7c>)
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	440a      	add	r2, r1
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	3318      	adds	r3, #24
 8000eea:	443b      	add	r3, r7
 8000eec:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dde5      	ble.n	8000ec8 <sendCruiseCommandTask+0x34>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <sendCruiseCommandTask+0x8c>)
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <sendCruiseCommandTask+0x90>)
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <sendCruiseCommandTask+0x94>)
 8000f06:	f001 f8e5 	bl	80020d4 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000f0a:	e7c7      	b.n	8000e9c <sendCruiseCommandTask+0x8>
 8000f0c:	20000160 	.word	0x20000160
 8000f10:	20000178 	.word	0x20000178
 8000f14:	42c80000 	.word	0x42c80000
 8000f18:	20000190 	.word	0x20000190
 8000f1c:	2000017c 	.word	0x2000017c
 8000f20:	2000010c 	.word	0x2000010c
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000110 	.word	0x20000110

08000f2c <sendIdleCommandTask>:
/**
 * @brief  Sends an idle CAN message when the MCB goes into the IDLE state.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendIdleCommandTask (void *argument) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send an idle command
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <sendIdleCommandTask+0x74>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2101      	movs	r1, #1
 8000f40:	f003 f8d6 	bl	80040f0 <osEventFlagsWait>

        // zeroed since car would not be moving in idle state
        current.float_value = 0.0;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <sendIdleCommandTask+0x78>)
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
        velocity.float_value = 0.0;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <sendIdleCommandTask+0x7c>)
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e016      	b.n	8000f88 <sendIdleCommandTask+0x5c>
            data_send[i] = velocity.bytes[i];
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <sendIdleCommandTask+0x7c>)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	4413      	add	r3, r2
 8000f60:	7819      	ldrb	r1, [r3, #0]
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3304      	adds	r3, #4
 8000f72:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <sendIdleCommandTask+0x78>)
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	440a      	add	r2, r1
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	443b      	add	r3, r7
 8000f7e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	dde5      	ble.n	8000f5a <sendIdleCommandTask+0x2e>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <sendIdleCommandTask+0x80>)
 8000f94:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <sendIdleCommandTask+0x84>)
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <sendIdleCommandTask+0x88>)
 8000f98:	f001 f89c 	bl	80020d4 <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 8000f9c:	e7ca      	b.n	8000f34 <sendIdleCommandTask+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	20000160 	.word	0x20000160
 8000fa4:	20000178 	.word	0x20000178
 8000fa8:	2000017c 	.word	0x2000017c
 8000fac:	2000010c 	.word	0x2000010c
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000110 	.word	0x20000110

08000fb8 <sendNextScreenMessageTask>:
 * @brief  	Sends CAN message that indicates intention to switch to next page on the driver LCD.
 * 			This message is picked up by the DID (driver information display) board.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendNextScreenMessageTask (void *argument) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_CONTROL_DATA_LENGTH];

    while (1) {
        // wait for next screen semaphore
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <sendNextScreenMessageTask+0x2c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 f9a3 	bl	8004314 <osSemaphoreAcquire>

        // sets MSB of byte 0 of CAN message to 1 to indicate the next_screen button has been pressed
        data_send[0] = 0x10;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	733b      	strb	r3, [r7, #12]

        HAL_CAN_AddTxMessage(&hcan, &screen_cruise_control_header, data_send, &can_mailbox);
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <sendNextScreenMessageTask+0x30>)
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <sendNextScreenMessageTask+0x34>)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <sendNextScreenMessageTask+0x38>)
 8000fdc:	f001 f87a 	bl	80020d4 <HAL_CAN_AddTxMessage>
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 8000fe0:	e7ee      	b.n	8000fc0 <sendNextScreenMessageTask+0x8>
 8000fe2:	bf00      	nop
 8000fe4:	20000164 	.word	0x20000164
 8000fe8:	2000010c 	.word	0x2000010c
 8000fec:	20000018 	.word	0x20000018
 8000ff0:	20000110 	.word	0x20000110

08000ff4 <updateEventFlagsTask>:
 * @brief  	Decides what state the main control board is in and therefore which thread will send a motor
 * 			controller CAN message.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void updateEventFlagsTask(void *argument) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	while (1) {
		// order of priorities beginning with most important: motor over heating, regen braking, encoder motor command, cruise control
		if (event_flags.motor_overheat) {
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <updateEventFlagsTask+0x9c>)
 8000ffe:	799b      	ldrb	r3, [r3, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <updateEventFlagsTask+0x1a>
			state = MOTOR_OVERHEAT;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <updateEventFlagsTask+0xa0>)
 8001008:	2210      	movs	r2, #16
 800100a:	701a      	strb	r2, [r3, #0]
 800100c:	e033      	b.n	8001076 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.regen_enable && regen_value > 0 && battery_soc < BATTERY_REGEN_THRESHOLD) {
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <updateEventFlagsTask+0x9c>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <updateEventFlagsTask+0x3c>
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <updateEventFlagsTask+0xa4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <updateEventFlagsTask+0x3c>
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <updateEventFlagsTask+0xa8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b59      	cmp	r3, #89	; 0x59
 8001026:	d803      	bhi.n	8001030 <updateEventFlagsTask+0x3c>
			state = REGEN_READY;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <updateEventFlagsTask+0xa0>)
 800102a:	2204      	movs	r2, #4
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e022      	b.n	8001076 <updateEventFlagsTask+0x82>
		}
		else if (!event_flags.encoder_value_is_zero && !event_flags.cruise_status) {
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <updateEventFlagsTask+0x9c>)
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d108      	bne.n	800104c <updateEventFlagsTask+0x58>
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <updateEventFlagsTask+0x9c>)
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <updateEventFlagsTask+0x58>
			state = NORMAL_READY;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <updateEventFlagsTask+0xa0>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e014      	b.n	8001076 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.cruise_status && cruise_value > 0 && !event_flags.brake_in) {
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <updateEventFlagsTask+0x9c>)
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00c      	beq.n	8001070 <updateEventFlagsTask+0x7c>
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <updateEventFlagsTask+0xac>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <updateEventFlagsTask+0x7c>
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <updateEventFlagsTask+0x9c>)
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <updateEventFlagsTask+0x7c>
			state = CRUISE_READY;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <updateEventFlagsTask+0xa0>)
 800106a:	2208      	movs	r2, #8
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e002      	b.n	8001076 <updateEventFlagsTask+0x82>
		}
		else {
			state = IDLE;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <updateEventFlagsTask+0xa0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
		}

		// signals the MCB state to other threads
		osEventFlagsSet(commandEventFlagsHandle, state);
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <updateEventFlagsTask+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <updateEventFlagsTask+0xa0>)
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f002 ffdd 	bl	8004040 <osEventFlagsSet>

		osDelay(EVENT_FLAG_UPDATE_DELAY);
 8001086:	2019      	movs	r0, #25
 8001088:	f002 ff5a 	bl	8003f40 <osDelay>
		if (event_flags.motor_overheat) {
 800108c:	e7b6      	b.n	8000ffc <updateEventFlagsTask+0x8>
 800108e:	bf00      	nop
 8001090:	20000184 	.word	0x20000184
 8001094:	20000168 	.word	0x20000168
 8001098:	2000018c 	.word	0x2000018c
 800109c:	20000191 	.word	0x20000191
 80010a0:	20000190 	.word	0x20000190
 80010a4:	20000160 	.word	0x20000160

080010a8 <receiveBatteryMessageTask>:
 * 			battery.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void receiveBatteryMessageTask (void *argument) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	uint8_t battery_msg_data[8];

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 80010b0:	2100      	movs	r1, #0
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <receiveBatteryMessageTask+0x50>)
 80010b4:	f001 f9f9 	bl	80024aa <HAL_CAN_GetRxFifoFillLevel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d016      	beq.n	80010ec <receiveBatteryMessageTask+0x44>
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, battery_msg_data);
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <receiveBatteryMessageTask+0x54>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <receiveBatteryMessageTask+0x50>)
 80010c8:	f001 f8de 	bl	8002288 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x626) {
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <receiveBatteryMessageTask+0x54>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f240 6226 	movw	r2, #1574	; 0x626
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d109      	bne.n	80010ec <receiveBatteryMessageTask+0x44>

				// if the battery SOC is out of range, assume it is at 100% as a safety measure
				if (battery_msg_data[0] < 0 || battery_msg_data[0] > 100) {
 80010d8:	7a3b      	ldrb	r3, [r7, #8]
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d903      	bls.n	80010e6 <receiveBatteryMessageTask+0x3e>
					// TODO: somehow indicate to the outside world that this has happened
					battery_soc = 100;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <receiveBatteryMessageTask+0x58>)
 80010e0:	2264      	movs	r2, #100	; 0x64
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e002      	b.n	80010ec <receiveBatteryMessageTask+0x44>
				} else {
					battery_soc = battery_msg_data[0];
 80010e6:	7a3a      	ldrb	r2, [r7, #8]
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <receiveBatteryMessageTask+0x58>)
 80010ea:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		osDelay(READ_BATTERY_SOC_DELAY);
 80010ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f0:	f002 ff26 	bl	8003f40 <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 80010f4:	e7dc      	b.n	80010b0 <receiveBatteryMessageTask+0x8>
 80010f6:	bf00      	nop
 80010f8:	20000110 	.word	0x20000110
 80010fc:	200000f0 	.word	0x200000f0
 8001100:	20000191 	.word	0x20000191

08001104 <sendMotorOverheatTask>:
 * 			shutdown, the motor will need to stop sending commands when it reaches a temperature of MAX_MOTOR_TEMPERATURE.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendMotorOverheatTask (void *argument) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	uint8_t motor_temperature_data[CAN_DATA_LENGTH]; // the motor temperature is bytes [3:0] TODO: this is an assumption

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 800110c:	2100      	movs	r1, #0
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <sendMotorOverheatTask+0x84>)
 8001110:	f001 f9cb 	bl	80024aa <HAL_CAN_GetRxFifoFillLevel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d031      	beq.n	800117e <sendMotorOverheatTask+0x7a>
			// there are multiple CAN IDs being passed through the filter, check if the message is the motor temperature
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, motor_temperature_data);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <sendMotorOverheatTask+0x88>)
 8001120:	2100      	movs	r1, #0
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <sendMotorOverheatTask+0x84>)
 8001124:	f001 f8b0 	bl	8002288 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x50B) {
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <sendMotorOverheatTask+0x88>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f240 520b 	movw	r2, #1291	; 0x50b
 8001130:	4293      	cmp	r3, r2
 8001132:	d124      	bne.n	800117e <sendMotorOverheatTask+0x7a>

				// assign the values from the CAN message into the
				// use the union to convert the 4 bytes to a 32-bit float
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00e      	b.n	8001158 <sendMotorOverheatTask+0x54>
					 * 		received[0] = 0xDD -> copied[3] = 0xDD
					 * 		received[1] = 0xCC -> copied[2] - 0xCC
					 * 		received[2] = 0xBB -> copied[1] = 0xBB
					 * 		received[3] = 0xAA -> copied[0] - 0xAA
					 */
					motor_temperature.bytes[i] = motor_temperature_data[CAN_HALF_DATA_LENGTH - 1 - i];
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f1c3 0303 	rsb	r3, r3, #3
 8001140:	3318      	adds	r3, #24
 8001142:	443b      	add	r3, r7
 8001144:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <sendMotorOverheatTask+0x8c>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	460a      	mov	r2, r1
 8001150:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b03      	cmp	r3, #3
 800115c:	dded      	ble.n	800113a <sendMotorOverheatTask+0x36>
				}

				// if the motor temperature is over heating, stop sending commands
				if (motor_temperature.float_value >= MAX_MOTOR_TEMPERATURE) {
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <sendMotorOverheatTask+0x8c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <sendMotorOverheatTask+0x90>)
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fb23 	bl	80007b0 <__aeabi_fcmpge>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <sendMotorOverheatTask+0x74>
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x01;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <sendMotorOverheatTask+0x94>)
 8001172:	2201      	movs	r2, #1
 8001174:	719a      	strb	r2, [r3, #6]
 8001176:	e002      	b.n	800117e <sendMotorOverheatTask+0x7a>
				} else {
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x00;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <sendMotorOverheatTask+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	719a      	strb	r2, [r3, #6]
				}

			}
		}
		osDelay(MOTOR_OVERHEAT_DELAY);
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <sendMotorOverheatTask+0x98>)
 8001180:	f002 fede 	bl	8003f40 <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8001184:	e7c2      	b.n	800110c <sendMotorOverheatTask+0x8>
 8001186:	bf00      	nop
 8001188:	20000110 	.word	0x20000110
 800118c:	200000f0 	.word	0x200000f0
 8001190:	20000180 	.word	0x20000180
 8001194:	42700000 	.word	0x42700000
 8001198:	20000184 	.word	0x20000184
 800119c:	000493e0 	.word	0x000493e0

080011a0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA0-WKUP   ------> ADCx_IN0
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b49      	ldr	r3, [pc, #292]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a48      	ldr	r2, [pc, #288]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b43      	ldr	r3, [pc, #268]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a42      	ldr	r2, [pc, #264]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011d2:	f043 0320 	orr.w	r3, r3, #32
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a3c      	ldr	r2, [pc, #240]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <MX_GPIO_Init+0x13c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a36      	ldr	r2, [pc, #216]	; (80012dc <MX_GPIO_Init+0x13c>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <MX_GPIO_Init+0x13c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CRUISE_STAT_GPIO_Port, CRUISE_STAT_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121a:	4831      	ldr	r0, [pc, #196]	; (80012e0 <MX_GPIO_Init+0x140>)
 800121c:	f001 fbf7 	bl	8002a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	482c      	ldr	r0, [pc, #176]	; (80012e0 <MX_GPIO_Init+0x140>)
 8001230:	f001 fa42 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = REGEN_EN_Pin|BRK_IN_Pin|RVRS_EN_Pin;
 8001234:	230e      	movs	r3, #14
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001238:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_GPIO_Init+0x144>)
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4619      	mov	r1, r3
 8001246:	4826      	ldr	r0, [pc, #152]	; (80012e0 <MX_GPIO_Init+0x140>)
 8001248:	f001 fa36 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NEXT_SCREEN_Pin|CRUISE_DIS_Pin|CRUISE_UP_Pin|CRUISE_DOWN_Pin;
 800124c:	23f0      	movs	r3, #240	; 0xf0
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_GPIO_Init+0x148>)
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <MX_GPIO_Init+0x140>)
 8001260:	f001 fa2a 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CRUISE_STAT_Pin;
 8001264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CRUISE_STAT_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4619      	mov	r1, r3
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <MX_GPIO_Init+0x140>)
 800127e:	f001 fa1b 	bl	80026b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2007      	movs	r0, #7
 8001288:	f001 f9eb 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800128c:	2007      	movs	r0, #7
 800128e:	f001 fa04 	bl	800269a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2008      	movs	r0, #8
 8001298:	f001 f9e3 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800129c:	2008      	movs	r0, #8
 800129e:	f001 f9fc 	bl	800269a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2009      	movs	r0, #9
 80012a8:	f001 f9db 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80012ac:	2009      	movs	r0, #9
 80012ae:	f001 f9f4 	bl	800269a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	200a      	movs	r0, #10
 80012b8:	f001 f9d3 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012bc:	200a      	movs	r0, #10
 80012be:	f001 f9ec 	bl	800269a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2017      	movs	r0, #23
 80012c8:	f001 f9cb 	bl	8002662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012cc:	2017      	movs	r0, #23
 80012ce:	f001 f9e4 	bl	800269a <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800
 80012e4:	10310000 	.word	0x10310000
 80012e8:	10110000 	.word	0x10110000

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fb5c 	bl	80019ac <HAL_Init>

  /* USER CODE BEGIN Init */

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f001 f9a9 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f823 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f7ff ff4f 	bl	80011a0 <MX_GPIO_Init>
  MX_CAN_Init();
 8001302:	f7ff fafb 	bl	80008fc <MX_CAN_Init>
  MX_ADC1_Init();
 8001306:	f7ff fa67 	bl	80007d8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800130a:	f000 fa53 	bl	80017b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 800130e:	f000 f9fb 	bl	8001708 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  timer_status = HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001312:	213c      	movs	r1, #60	; 0x3c
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <main+0x4c>)
 8001316:	f002 f9fb 	bl	8003710 <HAL_TIM_Encoder_Start>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <main+0x50>)
 8001320:	701a      	strb	r2, [r3, #0]
    // <----- CAN setup ----->

	// CAN_Filter_Init();
	// HAL_CAN_ConfigFilter(&hcan, &mcb_filter);
	HAL_CAN_Start(&hcan);
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <main+0x54>)
 8001324:	f000 fe92 	bl	800204c <HAL_CAN_Start>
    // HAL_ADC_Start_DMA(&hadc1, &regen_value, 1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001328:	f002 fcc8 	bl	8003cbc <osKernelInitialize>
  MX_FREERTOS_Init();
 800132c:	f7ff fbea 	bl	8000b04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001330:	f002 fcf6 	bl	8003d20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001334:	e7fe      	b.n	8001334 <main+0x48>
 8001336:	bf00      	nop
 8001338:	200001dc 	.word	0x200001dc
 800133c:	20000192 	.word	0x20000192
 8001340:	20000110 	.word	0x20000110

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b096      	sub	sp, #88	; 0x58
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f006 fcf6 	bl	8007d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001388:	2300      	movs	r3, #0
 800138a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800138c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fb74 	bl	8002a84 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013a2:	f000 f83b 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fde0 	bl	8002f88 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013ce:	f000 f825 	bl	800141c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013d2:	2302      	movs	r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 ff86 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013ea:	f000 f817 	bl	800141c <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3758      	adds	r7, #88	; 0x58
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140a:	f000 fae5 	bl	80019d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40013400 	.word	0x40013400

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_MspInit+0x60>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <HAL_MspInit+0x60>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_MspInit+0x60>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x60>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x60>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x60>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f001 f8fc 	bl	8002662 <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x64>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_MspInit+0x64>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000

08001490 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_InitTick+0xd0>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <HAL_InitTick+0xd0>)
 80014ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_InitTick+0xd0>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fec3 	bl	8003254 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014ce:	f001 fead 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 80014d2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_InitTick+0xd4>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3b01      	subs	r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_InitTick+0xd8>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_InitTick+0xdc>)
 80014e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_InitTick+0xd8>)
 80014ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ee:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_InitTick+0xd8>)
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_InitTick+0xd8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_InitTick+0xd8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_InitTick+0xd8>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <HAL_InitTick+0xd8>)
 800150a:	f001 ffa7 	bl	800345c <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11b      	bne.n	8001554 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <HAL_InitTick+0xd8>)
 800151e:	f001 fff5 	bl	800350c <HAL_TIM_Base_Start_IT>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001530:	202c      	movs	r0, #44	; 0x2c
 8001532:	f001 f8b2 	bl	800269a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d808      	bhi.n	800154e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	202c      	movs	r0, #44	; 0x2c
 8001542:	f001 f88e 	bl	8002662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0xe0>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e002      	b.n	8001554 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001558:	4618      	mov	r0, r3
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	431bde83 	.word	0x431bde83
 8001568:	20000194 	.word	0x20000194
 800156c:	40013400 	.word	0x40013400
 8001570:	20000034 	.word	0x20000034

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <HardFault_Handler+0x4>

08001586 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <BusFault_Handler+0x4>

08001592 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <UsageFault_Handler+0x4>

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

    // EXTI1 corresponds to the REGEN_EN pin
    event_flags.regen_enable = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin);
 80015a8:	2102      	movs	r1, #2
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <EXTI1_IRQHandler+0x20>)
 80015ac:	f001 fa18 	bl	80029e0 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <EXTI1_IRQHandler+0x24>)
 80015b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REGEN_EN_Pin);
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 fa41 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40010800 	.word	0x40010800
 80015c8:	20000184 	.word	0x20000184

080015cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

    // EXTI2 corresponds to the BRK_IN pin

    // when brake_in goes high, cruise control should be disengaged
    event_flags.cruise_status = DISABLE;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <EXTI2_IRQHandler+0x24>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	709a      	strb	r2, [r3, #2]

    event_flags.brake_in = HAL_GPIO_ReadPin(BRK_IN_GPIO_Port, BRK_IN_Pin);
 80015d6:	2104      	movs	r1, #4
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <EXTI2_IRQHandler+0x28>)
 80015da:	f001 fa01 	bl	80029e0 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <EXTI2_IRQHandler+0x24>)
 80015e4:	70da      	strb	r2, [r3, #3]


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BRK_IN_Pin);
 80015e6:	2004      	movs	r0, #4
 80015e8:	f001 fa2a 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000184 	.word	0x20000184
 80015f4:	40010800 	.word	0x40010800

080015f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

    // EXTI3 corresponds to the RVRS_EN pin

    event_flags.reverse_enable = HAL_GPIO_ReadPin(RVRS_EN_GPIO_Port, RVRS_EN_Pin);
 80015fc:	2108      	movs	r1, #8
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <EXTI3_IRQHandler+0x20>)
 8001600:	f001 f9ee 	bl	80029e0 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <EXTI3_IRQHandler+0x24>)
 800160a:	705a      	strb	r2, [r3, #1]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RVRS_EN_Pin);
 800160c:	2008      	movs	r0, #8
 800160e:	f001 fa17 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40010800 	.word	0x40010800
 800161c:	20000184 	.word	0x20000184

08001620 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

    // EXTI4 corresponds to the NEXT_SCREEN pin

    osSemaphoreRelease(nextScreenSemaphoreHandle);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <EXTI4_IRQHandler+0x18>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fed9 	bl	80043e0 <osSemaphoreRelease>

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NEXT_SCREEN_Pin);
 800162e:	2010      	movs	r0, #16
 8001630:	f001 fa06 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000164 	.word	0x20000164

0800163c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    // checks if the CRUISE_DIS external interrupt is triggered
    if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DIS_Pin))
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <EXTI9_5_IRQHandler+0x9c>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <EXTI9_5_IRQHandler+0x18>
    {
        event_flags.cruise_status = DISABLE;
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <EXTI9_5_IRQHandler+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	709a      	strb	r2, [r3, #2]
 8001652:	e036      	b.n	80016c2 <EXTI9_5_IRQHandler+0x86>
    }

    // checks if the CRUISE_UP external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_UP_Pin))
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <EXTI9_5_IRQHandler+0x9c>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01c      	beq.n	800169a <EXTI9_5_IRQHandler+0x5e>
    {
    	if(event_flags.cruise_status == DISABLE) {
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <EXTI9_5_IRQHandler+0xa0>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <EXTI9_5_IRQHandler+0x3a>
    		cruise_value = encoder_reading;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <EXTI9_5_IRQHandler+0xa4>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e00d      	b.n	8001692 <EXTI9_5_IRQHandler+0x56>
    	}
    	else
    	{
			if ((cruise_value + CRUISE_INCREMENT_VALUE) > CRUISE_MAX)
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b63      	cmp	r3, #99	; 0x63
 800167c:	d903      	bls.n	8001686 <EXTI9_5_IRQHandler+0x4a>
			{
				cruise_value = CRUISE_MAX;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 8001680:	2264      	movs	r2, #100	; 0x64
 8001682:	701a      	strb	r2, [r3, #0]
 8001684:	e005      	b.n	8001692 <EXTI9_5_IRQHandler+0x56>
			}
			else
			{
				cruise_value += CRUISE_INCREMENT_VALUE;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 8001690:	701a      	strb	r2, [r3, #0]
			}
    	}
        event_flags.cruise_status = ENABLE;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <EXTI9_5_IRQHandler+0xa0>)
 8001694:	2201      	movs	r2, #1
 8001696:	709a      	strb	r2, [r3, #2]
 8001698:	e013      	b.n	80016c2 <EXTI9_5_IRQHandler+0x86>
    }

    // checks if the CRUISE_DOWN external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DOWN_Pin))
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <EXTI9_5_IRQHandler+0x9c>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00d      	beq.n	80016c2 <EXTI9_5_IRQHandler+0x86>
    {
        if ((cruise_value - CRUISE_INCREMENT_VALUE) < CRUISE_MIN)
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <EXTI9_5_IRQHandler+0x7a>
        {
            cruise_value = CRUISE_MIN;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e005      	b.n	80016c2 <EXTI9_5_IRQHandler+0x86>
        }
        else
        {
            cruise_value -= CRUISE_INCREMENT_VALUE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <EXTI9_5_IRQHandler+0xa8>)
 80016c0:	701a      	strb	r2, [r3, #0]
        }
    }

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CRUISE_DIS_Pin);
 80016c2:	2020      	movs	r0, #32
 80016c4:	f001 f9bc 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRUISE_UP_Pin);
 80016c8:	2040      	movs	r0, #64	; 0x40
 80016ca:	f001 f9b9 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CRUISE_DOWN_Pin);
 80016ce:	2080      	movs	r0, #128	; 0x80
 80016d0:	f001 f9b6 	bl	8002a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40010400 	.word	0x40010400
 80016dc:	20000184 	.word	0x20000184
 80016e0:	2000016a 	.word	0x2000016a
 80016e4:	20000190 	.word	0x20000190

080016e8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM8_UP_IRQHandler+0x10>)
 80016ee:	f002 f89d 	bl	800382c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000194 	.word	0x20000194

080016fc <SystemInit>:
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2224      	movs	r2, #36	; 0x24
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f006 fb14 	bl	8007d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_TIM1_Init+0xa4>)
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <MX_TIM1_Init+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <MX_TIM1_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM1_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_TIM1_Init+0xa4>)
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM1_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_TIM1_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM1_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800174e:	2303      	movs	r3, #3
 8001750:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001766:	2301      	movs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_TIM1_Init+0xa4>)
 800177a:	f001 ff27 	bl	80035cc <HAL_TIM_Encoder_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001784:	f7ff fe4a 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_TIM1_Init+0xa4>)
 8001796:	f002 fa13 	bl	8003bc0 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80017a0:	f7ff fe3c 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200001dc 	.word	0x200001dc
 80017b0:	40012c00 	.word	0x40012c00

080017b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2224      	movs	r2, #36	; 0x24
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fabe 	bl	8007d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017d2:	4a21      	ldr	r2, [pc, #132]	; (8001858 <MX_TIM3_Init+0xa4>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017e4:	2240      	movs	r2, #64	; 0x40
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM3_Init+0xa0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017f4:	2303      	movs	r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_TIM3_Init+0xa0>)
 8001820:	f001 fed4 	bl	80035cc <HAL_TIM_Encoder_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800182a:	f7ff fdf7 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_TIM3_Init+0xa0>)
 800183c:	f002 f9c0 	bl	8003bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001846:	f7ff fde9 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	; 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000224 	.word	0x20000224
 8001858:	40000400 	.word	0x40000400

0800185c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_TIM_Encoder_MspInit+0xec>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d125      	bne.n	80018c8 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187c:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a2c      	ldr	r2, [pc, #176]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_AS_Pin|ENC_BS_Pin;
 80018ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4823      	ldr	r0, [pc, #140]	; (8001950 <HAL_TIM_Encoder_MspInit+0xf4>)
 80018c2:	f000 fef9 	bl	80026b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80018c6:	e03a      	b.n	800193e <HAL_TIM_Encoder_MspInit+0xe2>
  else if(tim_encoderHandle->Instance==TIM3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a21      	ldr	r2, [pc, #132]	; (8001954 <HAL_TIM_Encoder_MspInit+0xf8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d135      	bne.n	800193e <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_TIM_Encoder_MspInit+0xf0>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001916:	f000 fecf 	bl	80026b8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_TIM_Encoder_MspInit+0x100>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_TIM_Encoder_MspInit+0x100>)
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	6053      	str	r3, [r2, #4]
}
 800193e:	bf00      	nop
 8001940:	3730      	adds	r7, #48	; 0x30
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800
 8001954:	40000400 	.word	0x40000400
 8001958:	40011000 	.word	0x40011000
 800195c:	40010000 	.word	0x40010000

08001960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001960:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001962:	e003      	b.n	800196c <LoopCopyDataInit>

08001964 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001966:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001968:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800196a:	3104      	adds	r1, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001970:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001972:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001974:	d3f6      	bcc.n	8001964 <CopyDataInit>
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001978:	e002      	b.n	8001980 <LoopFillZerobss>

0800197a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800197c:	f842 3b04 	str.w	r3, [r2], #4

08001980 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001984:	d3f9      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001986:	f7ff feb9 	bl	80016fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198a:	f006 f9a7 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198e:	f7ff fcad 	bl	80012ec <main>
  bx lr
 8001992:	4770      	bx	lr
  ldr r3, =_sidata
 8001994:	08008210 	.word	0x08008210
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800199c:	200000a4 	.word	0x200000a4
  ldr r2, =_sbss
 80019a0:	200000a4 	.word	0x200000a4
  ldr r3, = _ebss
 80019a4:	20003080 	.word	0x20003080

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x28>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fe45 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff fd64 	bl	8001490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fd2e 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_IncTick+0x1c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_IncTick+0x20>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a03      	ldr	r2, [pc, #12]	; (80019f8 <HAL_IncTick+0x20>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000038 	.word	0x20000038
 80019f8:	2000026c 	.word	0x2000026c

080019fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <HAL_GetTick+0x10>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	2000026c 	.word	0x2000026c

08001a10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ce      	b.n	8001bd0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe ff00 	bl	8000854 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f9bd 	bl	8001dd4 <ADC_ConversionStop_Disable>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f040 80a9 	bne.w	8001bbe <HAL_ADC_Init+0x1ae>
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80a5 	bne.w	8001bbe <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a7c:	f023 0302 	bic.w	r3, r3, #2
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4951      	ldr	r1, [pc, #324]	; (8001bd8 <HAL_ADC_Init+0x1c8>)
 8001a92:	428b      	cmp	r3, r1
 8001a94:	d10a      	bne.n	8001aac <HAL_ADC_Init+0x9c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001a9e:	d002      	beq.n	8001aa6 <HAL_ADC_Init+0x96>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_Init+0xa0>
 8001aa6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001aaa:	e001      	b.n	8001ab0 <HAL_ADC_Init+0xa0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7b1b      	ldrb	r3, [r3, #12]
 8001ab6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ab8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d003      	beq.n	8001ad2 <HAL_ADC_Init+0xc2>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_ADC_Init+0xc8>
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	e000      	b.n	8001ada <HAL_ADC_Init+0xca>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7d1b      	ldrb	r3, [r3, #20]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d119      	bne.n	8001b1c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	035a      	lsls	r2, r3, #13
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e00b      	b.n	8001b1c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_ADC_Init+0x1cc>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4c:	d003      	beq.n	8001b56 <HAL_ADC_Init+0x146>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d104      	bne.n	8001b60 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	051b      	lsls	r3, r3, #20
 8001b5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_ADC_Init+0x1d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d10b      	bne.n	8001b9c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b9a:	e018      	b.n	8001bce <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f023 0312 	bic.w	r3, r3, #18
 8001ba4:	f043 0210 	orr.w	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bbc:	e007      	b.n	8001bce <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	f043 0210 	orr.w	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40013c00 	.word	0x40013c00
 8001bdc:	ffe1f7fd 	.word	0xffe1f7fd
 8001be0:	ff1f0efe 	.word	0xff1f0efe

08001be4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x20>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e0dc      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x1da>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d81c      	bhi.n	8001c4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b05      	subs	r3, #5
 8001c26:	221f      	movs	r2, #31
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4019      	ands	r1, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b05      	subs	r3, #5
 8001c40:	fa00 f203 	lsl.w	r2, r0, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4c:	e03c      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d81c      	bhi.n	8001c90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b23      	subs	r3, #35	; 0x23
 8001c68:	221f      	movs	r2, #31
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4019      	ands	r1, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	3b23      	subs	r3, #35	; 0x23
 8001c82:	fa00 f203 	lsl.w	r2, r0, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c8e:	e01b      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b41      	subs	r3, #65	; 0x41
 8001ca2:	221f      	movs	r2, #31
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4019      	ands	r1, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b41      	subs	r3, #65	; 0x41
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b09      	cmp	r3, #9
 8001cce:	d91c      	bls.n	8001d0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68d9      	ldr	r1, [r3, #12]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b1e      	subs	r3, #30
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4019      	ands	r1, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6898      	ldr	r0, [r3, #8]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b1e      	subs	r3, #30
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	e019      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6919      	ldr	r1, [r3, #16]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4019      	ands	r1, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6898      	ldr	r0, [r3, #8]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d4a:	2b11      	cmp	r3, #17
 8001d4c:	d132      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d125      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d126      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d11a      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_ADC_ConfigChannel+0x1e8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9a      	lsrs	r2, r3, #18
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d94:	e002      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f9      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x1b2>
 8001da2:	e007      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	40012400 	.word	0x40012400
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	431bde83 	.word	0x431bde83

08001dd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d12e      	bne.n	8001e4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfe:	f7ff fdfd 	bl	80019fc <HAL_GetTick>
 8001e02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	e01b      	b.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e06:	f7ff fdf9 	bl	80019fc <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d914      	bls.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10d      	bne.n	8001e3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e007      	b.n	8001e4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d0dc      	beq.n	8001e06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0ed      	b.n	8002044 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fd77 	bl	8000968 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8a:	f7ff fdb7 	bl	80019fc <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e90:	e012      	b.n	8001eb8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e92:	f7ff fdb3 	bl	80019fc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b0a      	cmp	r3, #10
 8001e9e:	d90b      	bls.n	8001eb8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2205      	movs	r2, #5
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0c5      	b.n	8002044 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0e5      	beq.n	8001e92 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0202 	bic.w	r2, r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed6:	f7ff fd91 	bl	80019fc <HAL_GetTick>
 8001eda:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001edc:	e012      	b.n	8001f04 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ede:	f7ff fd8d 	bl	80019fc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b0a      	cmp	r3, #10
 8001eea:	d90b      	bls.n	8001f04 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2205      	movs	r2, #5
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e09f      	b.n	8002044 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e5      	bne.n	8001ede <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7e1b      	ldrb	r3, [r3, #24]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e5b      	ldrb	r3, [r3, #25]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e9b      	ldrb	r3, [r3, #26]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0220 	orr.w	r2, r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7edb      	ldrb	r3, [r3, #27]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d108      	bne.n	8001faa <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0210 	bic.w	r2, r2, #16
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e007      	b.n	8001fba <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0210 	orr.w	r2, r2, #16
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7f1b      	ldrb	r3, [r3, #28]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d108      	bne.n	8001fd4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0208 	orr.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e007      	b.n	8001fe4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0208 	bic.w	r2, r2, #8
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7f5b      	ldrb	r3, [r3, #29]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0204 	orr.w	r2, r2, #4
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e007      	b.n	800200e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0204 	bic.w	r2, r2, #4
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	ea42 0103 	orr.w	r1, r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d12e      	bne.n	80020be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff fcc0 	bl	80019fc <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800207e:	e012      	b.n	80020a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002080:	f7ff fcbc 	bl	80019fc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b0a      	cmp	r3, #10
 800208c:	d90b      	bls.n	80020a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2205      	movs	r2, #5
 800209e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e012      	b.n	80020cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e5      	bne.n	8002080 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e006      	b.n	80020cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
  }
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d003      	beq.n	8002100 <HAL_CAN_AddTxMessage+0x2c>
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	f040 80b8 	bne.w	8002270 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a0 	beq.w	8002260 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	0e1b      	lsrs	r3, r3, #24
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d907      	bls.n	8002140 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e09e      	b.n	800227e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002140:	2201      	movs	r2, #1
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	409a      	lsls	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	6809      	ldr	r1, [r1, #0]
 8002160:	431a      	orrs	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3318      	adds	r3, #24
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	440b      	add	r3, r1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e00f      	b.n	800218e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002178:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002182:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3318      	adds	r3, #24
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	440b      	add	r3, r1
 800218c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3318      	adds	r3, #24
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	440b      	add	r3, r1
 800219e:	3304      	adds	r3, #4
 80021a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	7d1b      	ldrb	r3, [r3, #20]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d111      	bne.n	80021ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3318      	adds	r3, #24
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	3304      	adds	r3, #4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	6811      	ldr	r1, [r2, #0]
 80021be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3318      	adds	r3, #24
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	440b      	add	r3, r1
 80021ca:	3304      	adds	r3, #4
 80021cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3307      	adds	r3, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	061a      	lsls	r2, r3, #24
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3306      	adds	r3, #6
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3305      	adds	r3, #5
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4313      	orrs	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	3204      	adds	r2, #4
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	4610      	mov	r0, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	6811      	ldr	r1, [r2, #0]
 80021f6:	ea43 0200 	orr.w	r2, r3, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002204:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	061a      	lsls	r2, r3, #24
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3302      	adds	r3, #2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	4313      	orrs	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	4610      	mov	r0, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	ea43 0200 	orr.w	r2, r3, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	440b      	add	r3, r1
 8002236:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800223a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3318      	adds	r3, #24
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	4413      	add	r3, r2
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3318      	adds	r3, #24
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	440b      	add	r3, r1
 800225a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e00e      	b.n	800227e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e006      	b.n	800227e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d003      	beq.n	80022ac <HAL_CAN_GetRxMessage+0x24>
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	f040 80f3 	bne.w	8002492 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d116      	bne.n	80022ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0e7      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0d8      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	331b      	adds	r3, #27
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4413      	add	r3, r2
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0204 	and.w	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10c      	bne.n	8002326 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	331b      	adds	r3, #27
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0d5b      	lsrs	r3, r3, #21
 800231c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e00b      	b.n	800233e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	331b      	adds	r3, #27
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	331b      	adds	r3, #27
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0202 	and.w	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	331b      	adds	r3, #27
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	331b      	adds	r3, #27
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	331b      	adds	r3, #27
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	b29a      	uxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0a1a      	lsrs	r2, r3, #8
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0c1a      	lsrs	r2, r3, #16
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3302      	adds	r3, #2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e1a      	lsrs	r2, r3, #24
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3303      	adds	r3, #3
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3304      	adds	r3, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0a1a      	lsrs	r2, r3, #8
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3305      	adds	r3, #5
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0c1a      	lsrs	r2, r3, #16
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3306      	adds	r3, #6
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e1a      	lsrs	r2, r3, #24
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3307      	adds	r3, #7
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	e007      	b.n	800248e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e006      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024be:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d002      	beq.n	80024cc <HAL_CAN_GetRxFifoFillLevel+0x22>
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d10f      	bne.n	80024ec <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e005      	b.n	80024ec <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80024ec:	68fb      	ldr	r3, [r7, #12]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4906      	ldr	r1, [pc, #24]	; (8002590 <__NVIC_EnableIRQ+0x34>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff4f 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff64 	bl	8002540 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ffb2 	bl	80025e8 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff81 	bl	8002594 <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff57 	bl	800255c <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08b      	sub	sp, #44	; 0x2c
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	e179      	b.n	80029c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026cc:	2201      	movs	r2, #1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8168 	bne.w	80029ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a96      	ldr	r2, [pc, #600]	; (8002948 <HAL_GPIO_Init+0x290>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d05e      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 80026f4:	4a94      	ldr	r2, [pc, #592]	; (8002948 <HAL_GPIO_Init+0x290>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d875      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 80026fa:	4a94      	ldr	r2, [pc, #592]	; (800294c <HAL_GPIO_Init+0x294>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d058      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002700:	4a92      	ldr	r2, [pc, #584]	; (800294c <HAL_GPIO_Init+0x294>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d86f      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002706:	4a92      	ldr	r2, [pc, #584]	; (8002950 <HAL_GPIO_Init+0x298>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d052      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 800270c:	4a90      	ldr	r2, [pc, #576]	; (8002950 <HAL_GPIO_Init+0x298>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d869      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002712:	4a90      	ldr	r2, [pc, #576]	; (8002954 <HAL_GPIO_Init+0x29c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04c      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002718:	4a8e      	ldr	r2, [pc, #568]	; (8002954 <HAL_GPIO_Init+0x29c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d863      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800271e:	4a8e      	ldr	r2, [pc, #568]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d046      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002724:	4a8c      	ldr	r2, [pc, #560]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d85d      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d82a      	bhi.n	8002784 <HAL_GPIO_Init+0xcc>
 800272e:	2b12      	cmp	r3, #18
 8002730:	d859      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <HAL_GPIO_Init+0x80>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	080027b3 	.word	0x080027b3
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800279f 	.word	0x0800279f
 8002744:	080027e1 	.word	0x080027e1
 8002748:	080027e7 	.word	0x080027e7
 800274c:	080027e7 	.word	0x080027e7
 8002750:	080027e7 	.word	0x080027e7
 8002754:	080027e7 	.word	0x080027e7
 8002758:	080027e7 	.word	0x080027e7
 800275c:	080027e7 	.word	0x080027e7
 8002760:	080027e7 	.word	0x080027e7
 8002764:	080027e7 	.word	0x080027e7
 8002768:	080027e7 	.word	0x080027e7
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027e7 	.word	0x080027e7
 8002774:	080027e7 	.word	0x080027e7
 8002778:	080027e7 	.word	0x080027e7
 800277c:	08002795 	.word	0x08002795
 8002780:	080027a9 	.word	0x080027a9
 8002784:	4a75      	ldr	r2, [pc, #468]	; (800295c <HAL_GPIO_Init+0x2a4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800278a:	e02c      	b.n	80027e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e029      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e024      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	3308      	adds	r3, #8
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e01f      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	330c      	adds	r3, #12
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e01a      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ba:	2304      	movs	r3, #4
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e013      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	611a      	str	r2, [r3, #16]
          break;
 80027d2:	e009      	b.n	80027e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	615a      	str	r2, [r3, #20]
          break;
 80027de:	e003      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          break;
 80027e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d801      	bhi.n	80027f2 <HAL_GPIO_Init+0x13a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_Init+0x13e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d802      	bhi.n	8002804 <HAL_GPIO_Init+0x14c>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x152>
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3b08      	subs	r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	210f      	movs	r1, #15
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80c1 	beq.w	80029ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002838:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002850:	4a44      	ldr	r2, [pc, #272]	; (8002964 <HAL_GPIO_Init+0x2ac>)
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_GPIO_Init+0x2b0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01f      	beq.n	80028bc <HAL_GPIO_Init+0x204>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3b      	ldr	r2, [pc, #236]	; (800296c <HAL_GPIO_Init+0x2b4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d019      	beq.n	80028b8 <HAL_GPIO_Init+0x200>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1fc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1f8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_GPIO_Init+0x2c0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1f4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a37      	ldr	r2, [pc, #220]	; (800297c <HAL_GPIO_Init+0x2c4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1f0>
 80028a4:	2305      	movs	r3, #5
 80028a6:	e00a      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028a8:	2306      	movs	r3, #6
 80028aa:	e008      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028bc:	2300      	movs	r3, #0
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ce:	4925      	ldr	r1, [pc, #148]	; (8002964 <HAL_GPIO_Init+0x2ac>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4924      	ldr	r1, [pc, #144]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4920      	ldr	r1, [pc, #128]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002900:	4013      	ands	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	491a      	ldr	r1, [pc, #104]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	4916      	ldr	r1, [pc, #88]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002928:	4013      	ands	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d025      	beq.n	8002984 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4910      	ldr	r1, [pc, #64]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
 8002944:	e025      	b.n	8002992 <HAL_GPIO_Init+0x2da>
 8002946:	bf00      	nop
 8002948:	10320000 	.word	0x10320000
 800294c:	10310000 	.word	0x10310000
 8002950:	10220000 	.word	0x10220000
 8002954:	10210000 	.word	0x10210000
 8002958:	10120000 	.word	0x10120000
 800295c:	10110000 	.word	0x10110000
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	40010800 	.word	0x40010800
 800296c:	40010c00 	.word	0x40010c00
 8002970:	40011000 	.word	0x40011000
 8002974:	40011400 	.word	0x40011400
 8002978:	40011800 	.word	0x40011800
 800297c:	40011c00 	.word	0x40011c00
 8002980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_GPIO_Init+0x324>)
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	43db      	mvns	r3, r3
 800298c:	4913      	ldr	r1, [pc, #76]	; (80029dc <HAL_GPIO_Init+0x324>)
 800298e:	4013      	ands	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60cb      	str	r3, [r1, #12]
 80029aa:	e006      	b.n	80029ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4909      	ldr	r1, [pc, #36]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3301      	adds	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f47f ae7e 	bne.w	80026cc <HAL_GPIO_Init+0x14>
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1e:	787b      	ldrb	r3, [r7, #1]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a2a:	e003      	b.n	8002a34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f806 	bl	8002a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40010400 	.word	0x40010400

08002a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e272      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e24c      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x76>
 8002aec:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e02e      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbc>
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b40:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7fe ff4c 	bl	80019fc <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe ff48 	bl	80019fc <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e200      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe4>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe ff38 	bl	80019fc <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe ff34 	bl	80019fc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1ec      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x10c>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bca:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c0      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7fe feed 	bl	80019fc <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fee9 	bl	80019fc <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1a1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fecc 	bl	80019fc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7fe fec8 	bl	80019fc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e180      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe feac 	bl	80019fc <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fea8 	bl	80019fc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e160      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 faf4 	bl	80032b4 <RCC_Delay>
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fe92 	bl	80019fc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe fe8e 	bl	80019fc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e146      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	42420000 	.word	0x42420000
 8002cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e9      	bne.n	8002cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a6 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a87      	ldr	r2, [pc, #540]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b82      	ldr	r3, [pc, #520]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7e      	ldr	r2, [pc, #504]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fe4f 	bl	80019fc <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7fe fe4b 	bl	80019fc <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e103      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a66      	ldr	r2, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x356>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a60      	ldr	r2, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fdff 	bl	80019fc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe fdfb 	bl	80019fc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0b1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x37e>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fde9 	bl	80019fc <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fe fde5 	bl	80019fc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e09b      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d146      	bne.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fdb9 	bl	80019fc <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fdb5 	bl	80019fc <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e06d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4921      	ldr	r1, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a19      	ldr	r1, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fd89 	bl	80019fc <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fd85 	bl	80019fc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e03d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
 8002f0c:	e035      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fd72 	bl	80019fc <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fd6e 	bl	80019fc <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
 8002f3a:	e01e      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e019      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_OscConfig+0x500>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0d0      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4965      	ldr	r1, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d040      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e073      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4936      	ldr	r1, [pc, #216]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fe fcc0 	bl	80019fc <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fe fcbc 	bl	80019fc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e053      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d210      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0207 	bic.w	r2, r3, #7
 80030be:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1cc>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f9aa 	bl	8001490 <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08008190 	.word	0x08008190
 8003154:	20000030 	.word	0x20000030
 8003158:	20000034 	.word	0x20000034

0800315c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b490      	push	{r4, r7}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_GetSysClockFreq+0xac>)
 8003164:	1d3c      	adds	r4, r7, #4
 8003166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800316c:	f240 2301 	movw	r3, #513	; 0x201
 8003170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b04      	cmp	r3, #4
 8003194:	d002      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x40>
 8003196:	2b08      	cmp	r3, #8
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x46>
 800319a:	e02b      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb4>)
 800319e:	623b      	str	r3, [r7, #32]
      break;
 80031a0:	e02b      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	0c9b      	lsrs	r3, r3, #18
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	443b      	add	r3, r7
 80031ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d012      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_RCC_GetSysClockFreq+0xb0>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	0c5b      	lsrs	r3, r3, #17
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	3328      	adds	r3, #40	; 0x28
 80031ca:	443b      	add	r3, r7
 80031cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e004      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	623b      	str	r3, [r7, #32]
      break;
 80031f2:	e002      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031f6:	623b      	str	r3, [r7, #32]
      break;
 80031f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc90      	pop	{r4, r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	08007fc4 	.word	0x08007fc4
 800320c:	40021000 	.word	0x40021000
 8003210:	007a1200 	.word	0x007a1200
 8003214:	003d0900 	.word	0x003d0900

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <HAL_RCC_GetHCLKFreq+0x10>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000030 	.word	0x20000030

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff fff2 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0adb      	lsrs	r3, r3, #11
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	080081a0 	.word	0x080081a0

08003254 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	220f      	movs	r2, #15
 8003262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCC_GetClockConfig+0x58>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0207 	and.w	r2, r3, #7
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40022000 	.word	0x40022000

080032b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <RCC_Delay+0x34>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <RCC_Delay+0x38>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0a5b      	lsrs	r3, r3, #9
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d0:	bf00      	nop
  }
  while (Delay --);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	60fa      	str	r2, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f9      	bne.n	80032d0 <RCC_Delay+0x1c>
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	20000030 	.word	0x20000030
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d07d      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003310:	4b4f      	ldr	r3, [pc, #316]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b49      	ldr	r3, [pc, #292]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a42      	ldr	r2, [pc, #264]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003350:	f7fe fb54 	bl	80019fc <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fe fb50 	bl	80019fc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e06d      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003376:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02e      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	429a      	cmp	r2, r3
 8003392:	d027      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003394:	4b2e      	ldr	r3, [pc, #184]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339e:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033aa:	4a29      	ldr	r2, [pc, #164]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fb1f 	bl	80019fc <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fb1b 	bl	80019fc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4917      	ldr	r1, [pc, #92]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003406:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4904      	ldr	r1, [pc, #16]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	42420440 	.word	0x42420440

0800345c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e041      	b.n	80034f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f839 	bl	80034fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 faf2 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e044      	b.n	80035ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_TIM_Base_Start_IT+0xac>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d018      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <HAL_TIM_Base_Start_IT+0xb0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d00e      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x6c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d111      	bne.n	800359c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d010      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	e007      	b.n	80035ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00

080035cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e093      	b.n	8003708 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7fe f931 	bl	800185c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003610:	f023 0307 	bic.w	r3, r3, #7
 8003614:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f000 fa2f 	bl	8003a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	4313      	orrs	r3, r2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800366c:	f023 030c 	bic.w	r3, r3, #12
 8003670:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4313      	orrs	r3, r2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	011a      	lsls	r2, r3, #4
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	031b      	lsls	r3, r3, #12
 800369c:	4313      	orrs	r3, r2
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4313      	orrs	r3, r2
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d110      	bne.n	8003762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003746:	7b7b      	ldrb	r3, [r7, #13]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d001      	beq.n	8003750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e069      	b.n	8003824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003760:	e031      	b.n	80037c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d110      	bne.n	800378a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003768:	7bbb      	ldrb	r3, [r7, #14]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d001      	beq.n	8003778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e055      	b.n	8003824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003788:	e01d      	b.n	80037c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d108      	bne.n	80037a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003790:	7bbb      	ldrb	r3, [r7, #14]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d105      	bne.n	80037a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003796:	7b7b      	ldrb	r3, [r7, #13]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800379c:	7b3b      	ldrb	r3, [r7, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e03e      	b.n	8003824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_Encoder_Start+0xc4>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d008      	beq.n	80037e4 <HAL_TIM_Encoder_Start+0xd4>
 80037d2:	e00f      	b.n	80037f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f9cb 	bl	8003b78 <TIM_CCxChannelCmd>
      break;
 80037e2:	e016      	b.n	8003812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	2104      	movs	r1, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f9c3 	bl	8003b78 <TIM_CCxChannelCmd>
      break;
 80037f2:	e00e      	b.n	8003812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f9bb 	bl	8003b78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	2104      	movs	r1, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f9b4 	bl	8003b78 <TIM_CCxChannelCmd>
      break;
 8003810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	d122      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d11b      	bne.n	8003888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8ed 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8e0 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8ef 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d122      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d11b      	bne.n	80038dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0204 	mvn.w	r2, #4
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8c3 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8b6 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8c5 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0208 	mvn.w	r2, #8
 8003900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2204      	movs	r2, #4
 8003906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f899 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f88c 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f89b 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b10      	cmp	r3, #16
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b10      	cmp	r3, #16
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0210 	mvn.w	r2, #16
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2208      	movs	r2, #8
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f86f 	bl	8003a4e <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f862 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f871 	bl	8003a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0201 	mvn.w	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fd24 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f967 	bl	8003caa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d10e      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d107      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f835 	bl	8003a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0220 	mvn.w	r2, #32
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f932 	bl	8003c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <TIM_Base_SetConfig+0xe0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <TIM_Base_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <TIM_Base_SetConfig+0xe8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <TIM_Base_SetConfig+0xec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <TIM_Base_SetConfig+0xf0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <TIM_Base_SetConfig+0xe0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0x82>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <TIM_Base_SetConfig+0xe4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0x82>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <TIM_Base_SetConfig+0xe8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0x82>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <TIM_Base_SetConfig+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0x82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_Base_SetConfig+0xf0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <TIM_Base_SetConfig+0xe0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0xc8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <TIM_Base_SetConfig+0xe4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40013400 	.word	0x40013400
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40000800 	.word	0x40000800
 8003b74:	40000c00 	.word	0x40000c00

08003b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e050      	b.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d00e      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40013400 	.word	0x40013400
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00

08003c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc2:	f3ef 8305 	mrs	r3, IPSR
 8003cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cce:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <osKernelInitialize+0x32>
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <osKernelInitialize+0x60>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d109      	bne.n	8003cf6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003cee:	f06f 0305 	mvn.w	r3, #5
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e00c      	b.n	8003d10 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <osKernelInitialize+0x60>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <osKernelInitialize+0x60>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e002      	b.n	8003d10 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d10:	68fb      	ldr	r3, [r7, #12]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	20000270 	.word	0x20000270

08003d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d26:	f3ef 8305 	mrs	r3, IPSR
 8003d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	607b      	str	r3, [r7, #4]
  return(result);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <osKernelStart+0x32>
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <osKernelStart+0x64>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d46:	f3ef 8311 	mrs	r3, BASEPRI
 8003d4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d52:	f06f 0305 	mvn.w	r3, #5
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e00e      	b.n	8003d78 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <osKernelStart+0x64>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <osKernelStart+0x64>)
 8003d64:	2202      	movs	r2, #2
 8003d66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d68:	f002 f9bc 	bl	80060e4 <vTaskStartScheduler>
      stat = osOK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e002      	b.n	8003d78 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d78:	68fb      	ldr	r3, [r7, #12]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000270 	.word	0x20000270

08003d88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b092      	sub	sp, #72	; 0x48
 8003d8c:	af04      	add	r7, sp, #16
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d98:	f3ef 8305 	mrs	r3, IPSR
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 8094 	bne.w	8003ece <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8310 	mrs	r3, PRIMASK
 8003daa:	623b      	str	r3, [r7, #32]
  return(result);
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 808d 	bne.w	8003ece <osThreadNew+0x146>
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <osThreadNew+0x150>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d106      	bne.n	8003dca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8082 	bne.w	8003ece <osThreadNew+0x146>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d07e      	beq.n	8003ece <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003dd4:	2318      	movs	r3, #24
 8003dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003dd8:	2300      	movs	r3, #0
 8003dda:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003ddc:	f107 031b 	add.w	r3, r7, #27
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d045      	beq.n	8003e7a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <osThreadNew+0x74>
        name = attr->name;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <osThreadNew+0x9a>
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	2b38      	cmp	r3, #56	; 0x38
 8003e14:	d805      	bhi.n	8003e22 <osThreadNew+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <osThreadNew+0x9e>
        return (NULL);
 8003e22:	2300      	movs	r3, #0
 8003e24:	e054      	b.n	8003ed0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <osThreadNew+0xd4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2bbb      	cmp	r3, #187	; 0xbb
 8003e44:	d90a      	bls.n	8003e5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <osThreadNew+0xd4>
        mem = 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	e010      	b.n	8003e7e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10c      	bne.n	8003e7e <osThreadNew+0xf6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <osThreadNew+0xf6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <osThreadNew+0xf6>
          mem = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e78:	e001      	b.n	8003e7e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d110      	bne.n	8003ea6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e8c:	9202      	str	r2, [sp, #8]
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f001 ff3e 	bl	8005d1c <xTaskCreateStatic>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e013      	b.n	8003ece <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d110      	bne.n	8003ece <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f001 ff88 	bl	8005dd4 <xTaskCreate>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <osThreadNew+0x146>
          hTask = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ece:	697b      	ldr	r3, [r7, #20]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3738      	adds	r7, #56	; 0x38
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000270 	.word	0x20000270

08003edc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee2:	f3ef 8305 	mrs	r3, IPSR
 8003ee6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <osThreadYield+0x32>
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <osThreadYield+0x5c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d109      	bne.n	8003f16 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f02:	f3ef 8311 	mrs	r3, BASEPRI
 8003f06:	603b      	str	r3, [r7, #0]
  return(result);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <osThreadYield+0x3a>
    stat = osErrorISR;
 8003f0e:	f06f 0305 	mvn.w	r3, #5
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e009      	b.n	8003f2a <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <osThreadYield+0x60>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000270 	.word	0x20000270
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f48:	f3ef 8305 	mrs	r3, IPSR
 8003f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <osDelay+0x34>
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <osDelay+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d109      	bne.n	8003f7c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f68:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <osDelay+0x3c>
    stat = osErrorISR;
 8003f74:	f06f 0305 	mvn.w	r3, #5
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e007      	b.n	8003f8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f002 f878 	bl	800607c <vTaskDelay>
    }
  }

  return (stat);
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000270 	.word	0x20000270

08003f9c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa8:	f3ef 8305 	mrs	r3, IPSR
 8003fac:	617b      	str	r3, [r7, #20]
  return(result);
 8003fae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d13d      	bne.n	8004030 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	613b      	str	r3, [r7, #16]
  return(result);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d137      	bne.n	8004030 <osEventFlagsNew+0x94>
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <osEventFlagsNew+0xa0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d105      	bne.n	8003fd4 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fc8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d12d      	bne.n	8004030 <osEventFlagsNew+0x94>
    mem = -1;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <osEventFlagsNew+0x5a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b1f      	cmp	r3, #31
 8003fee:	d902      	bls.n	8003ff6 <osEventFlagsNew+0x5a>
        mem = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e00c      	b.n	8004010 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <osEventFlagsNew+0x74>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <osEventFlagsNew+0x74>
          mem = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e001      	b.n	8004010 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d106      	bne.n	8004024 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fbd6 	bl	80047cc <xEventGroupCreateStatic>
 8004020:	61f8      	str	r0, [r7, #28]
 8004022:	e005      	b.n	8004030 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800402a:	f000 fc06 	bl	800483a <xEventGroupCreate>
 800402e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004030:	69fb      	ldr	r3, [r7, #28]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000270 	.word	0x20000270

08004040 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <osEventFlagsSet+0x1e>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800405e:	f06f 0303 	mvn.w	r3, #3
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	e03a      	b.n	80040dc <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004066:	f3ef 8305 	mrs	r3, IPSR
 800406a:	617b      	str	r3, [r7, #20]
  return(result);
 800406c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004072:	f3ef 8310 	mrs	r3, PRIMASK
 8004076:	613b      	str	r3, [r7, #16]
  return(result);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <osEventFlagsSet+0x52>
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <osEventFlagsSet+0xa8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d123      	bne.n	80040ce <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004086:	f3ef 8311 	mrs	r3, BASEPRI
 800408a:	60fb      	str	r3, [r7, #12]
  return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01d      	beq.n	80040ce <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	461a      	mov	r2, r3
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f000 fd6e 	bl	8004b80 <xEventGroupSetBitsFromISR>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80040aa:	f06f 0302 	mvn.w	r3, #2
 80040ae:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80040b0:	e013      	b.n	80040da <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <osEventFlagsSet+0x9a>
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <osEventFlagsSet+0xac>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80040cc:	e005      	b.n	80040da <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80040ce:	6839      	ldr	r1, [r7, #0]
 80040d0:	69b8      	ldr	r0, [r7, #24]
 80040d2:	f000 fc9b 	bl	8004a0c <xEventGroupSetBits>
 80040d6:	61f8      	str	r0, [r7, #28]
 80040d8:	e000      	b.n	80040dc <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80040da:	bf00      	nop
  }

  return (rflags);
 80040dc:	69fb      	ldr	r3, [r7, #28]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000270 	.word	0x20000270
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08e      	sub	sp, #56	; 0x38
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <osEventFlagsWait+0x22>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004112:	f06f 0303 	mvn.w	r3, #3
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	e059      	b.n	80041ce <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411a:	f3ef 8305 	mrs	r3, IPSR
 800411e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004120:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004126:	f3ef 8310 	mrs	r3, PRIMASK
 800412a:	61bb      	str	r3, [r7, #24]
  return(result);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <osEventFlagsWait+0x56>
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <osEventFlagsWait+0xe8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d109      	bne.n	800414e <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800413a:	f3ef 8311 	mrs	r3, BASEPRI
 800413e:	617b      	str	r3, [r7, #20]
  return(result);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8004146:	f06f 0305 	mvn.w	r3, #5
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e03f      	b.n	80041ce <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415c:	e001      	b.n	8004162 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800415e:	2300      	movs	r3, #0
 8004160:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004170:	e001      	b.n	8004176 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8004172:	2301      	movs	r3, #1
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	6a38      	ldr	r0, [r7, #32]
 8004182:	f000 fb75 	bl	8004870 <xEventGroupWaitBits>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00e      	beq.n	80041b0 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	429a      	cmp	r2, r3
 8004198:	d019      	beq.n	80041ce <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80041a0:	f06f 0301 	mvn.w	r3, #1
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e012      	b.n	80041ce <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80041a8:	f06f 0302 	mvn.w	r3, #2
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	e00e      	b.n	80041ce <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80041c0:	f06f 0301 	mvn.w	r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	e002      	b.n	80041ce <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80041c8:	f06f 0302 	mvn.w	r3, #2
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000270 	.word	0x20000270

080041dc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	; 0x30
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ec:	f3ef 8305 	mrs	r3, IPSR
 80041f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80041f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 8086 	bne.w	8004306 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d17f      	bne.n	8004306 <osSemaphoreNew+0x12a>
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <osSemaphoreNew+0x134>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d105      	bne.n	800421a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800420e:	f3ef 8311 	mrs	r3, BASEPRI
 8004212:	613b      	str	r3, [r7, #16]
  return(result);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d175      	bne.n	8004306 <osSemaphoreNew+0x12a>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d072      	beq.n	8004306 <osSemaphoreNew+0x12a>
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d86e      	bhi.n	8004306 <osSemaphoreNew+0x12a>
    mem = -1;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d015      	beq.n	8004260 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <osSemaphoreNew+0x6e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b4f      	cmp	r3, #79	; 0x4f
 8004242:	d902      	bls.n	800424a <osSemaphoreNew+0x6e>
        mem = 1;
 8004244:	2301      	movs	r3, #1
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	e00c      	b.n	8004264 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <osSemaphoreNew+0x88>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <osSemaphoreNew+0x88>
          mem = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e001      	b.n	8004264 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d04c      	beq.n	8004306 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d128      	bne.n	80042c4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10a      	bne.n	800428e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2203      	movs	r2, #3
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2001      	movs	r0, #1
 8004286:	f000 fda7 	bl	8004dd8 <xQueueGenericCreateStatic>
 800428a:	6278      	str	r0, [r7, #36]	; 0x24
 800428c:	e005      	b.n	800429a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800428e:	2203      	movs	r2, #3
 8004290:	2100      	movs	r1, #0
 8004292:	2001      	movs	r0, #1
 8004294:	f000 fe17 	bl	8004ec6 <xQueueGenericCreate>
 8004298:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d022      	beq.n	80042e6 <osSemaphoreNew+0x10a>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01f      	beq.n	80042e6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80042a6:	2300      	movs	r3, #0
 80042a8:	2200      	movs	r2, #0
 80042aa:	2100      	movs	r1, #0
 80042ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ae:	f000 fed5 	bl	800505c <xQueueGenericSend>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d016      	beq.n	80042e6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80042b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ba:	f001 fb5f 	bl	800597c <vQueueDelete>
            hSemaphore = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
 80042c2:	e010      	b.n	80042e6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d108      	bne.n	80042dc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	461a      	mov	r2, r3
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fe58 	bl	8004f88 <xQueueCreateCountingSemaphoreStatic>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24
 80042da:	e004      	b.n	80042e6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 fe89 	bl	8004ff6 <xQueueCreateCountingSemaphore>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00c      	beq.n	8004306 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <osSemaphoreNew+0x11e>
          name = attr->name;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e001      	b.n	80042fe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80042fe:	69f9      	ldr	r1, [r7, #28]
 8004300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004302:	f001 fc85 	bl	8005c10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004308:	4618      	mov	r0, r3
 800430a:	3728      	adds	r7, #40	; 0x28
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000270 	.word	0x20000270

08004314 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800432c:	f06f 0303 	mvn.w	r3, #3
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e04b      	b.n	80043cc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004334:	f3ef 8305 	mrs	r3, IPSR
 8004338:	617b      	str	r3, [r7, #20]
  return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004340:	f3ef 8310 	mrs	r3, PRIMASK
 8004344:	613b      	str	r3, [r7, #16]
  return(result);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <osSemaphoreAcquire+0x4c>
 800434c:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <osSemaphoreAcquire+0xc4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d128      	bne.n	80043a6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004354:	f3ef 8311 	mrs	r3, BASEPRI
 8004358:	60fb      	str	r3, [r7, #12]
  return(result);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d022      	beq.n	80043a6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004366:	f06f 0303 	mvn.w	r3, #3
 800436a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800436c:	e02d      	b.n	80043ca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004372:	f107 0308 	add.w	r3, r7, #8
 8004376:	461a      	mov	r2, r3
 8004378:	2100      	movs	r1, #0
 800437a:	69b8      	ldr	r0, [r7, #24]
 800437c:	f001 fa7e 	bl	800587c <xQueueReceiveFromISR>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d003      	beq.n	800438e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004386:	f06f 0302 	mvn.w	r3, #2
 800438a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800438c:	e01d      	b.n	80043ca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <osSemaphoreAcquire+0xb6>
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <osSemaphoreAcquire+0xc8>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80043a4:	e011      	b.n	80043ca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f001 f95b 	bl	8005664 <xQueueSemaphoreTake>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d00b      	beq.n	80043cc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80043ba:	f06f 0301 	mvn.w	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e004      	b.n	80043cc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80043c2:	f06f 0302 	mvn.w	r3, #2
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e000      	b.n	80043cc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80043ca:	bf00      	nop
      }
    }
  }

  return (stat);
 80043cc:	69fb      	ldr	r3, [r7, #28]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000270 	.word	0x20000270
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80043f6:	f06f 0303 	mvn.w	r3, #3
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e03e      	b.n	800447c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043fe:	f3ef 8305 	mrs	r3, IPSR
 8004402:	617b      	str	r3, [r7, #20]
  return(result);
 8004404:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440a:	f3ef 8310 	mrs	r3, PRIMASK
 800440e:	613b      	str	r3, [r7, #16]
  return(result);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <osSemaphoreRelease+0x4a>
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <osSemaphoreRelease+0xa8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d120      	bne.n	8004460 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800441e:	f3ef 8311 	mrs	r3, BASEPRI
 8004422:	60fb      	str	r3, [r7, #12]
  return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01a      	beq.n	8004460 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800442e:	f107 0308 	add.w	r3, r7, #8
 8004432:	4619      	mov	r1, r3
 8004434:	69b8      	ldr	r0, [r7, #24]
 8004436:	f000 ffa7 	bl	8005388 <xQueueGiveFromISR>
 800443a:	4603      	mov	r3, r0
 800443c:	2b01      	cmp	r3, #1
 800443e:	d003      	beq.n	8004448 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004440:	f06f 0302 	mvn.w	r3, #2
 8004444:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004446:	e018      	b.n	800447a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <osSemaphoreRelease+0x9a>
 800444e:	4b0f      	ldr	r3, [pc, #60]	; (800448c <osSemaphoreRelease+0xac>)
 8004450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800445e:	e00c      	b.n	800447a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004460:	2300      	movs	r3, #0
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f000 fdf8 	bl	800505c <xQueueGenericSend>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d004      	beq.n	800447c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004472:	f06f 0302 	mvn.w	r3, #2
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e000      	b.n	800447c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800447a:	bf00      	nop
    }
  }

  return (stat);
 800447c:	69fb      	ldr	r3, [r7, #28]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000270 	.word	0x20000270
 800448c:	e000ed04 	.word	0xe000ed04

08004490 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a0:	f3ef 8305 	mrs	r3, IPSR
 80044a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80044a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d16f      	bne.n	800458c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	617b      	str	r3, [r7, #20]
  return(result);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d169      	bne.n	800458c <osMessageQueueNew+0xfc>
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <osMessageQueueNew+0x108>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d105      	bne.n	80044cc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	613b      	str	r3, [r7, #16]
  return(result);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15f      	bne.n	800458c <osMessageQueueNew+0xfc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d05c      	beq.n	800458c <osMessageQueueNew+0xfc>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d059      	beq.n	800458c <osMessageQueueNew+0xfc>
    mem = -1;
 80044d8:	f04f 33ff 	mov.w	r3, #4294967295
 80044dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d029      	beq.n	8004538 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <osMessageQueueNew+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b4f      	cmp	r3, #79	; 0x4f
 80044f2:	d90e      	bls.n	8004512 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <osMessageQueueNew+0x82>
        mem = 1;
 800450c:	2301      	movs	r3, #1
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	e014      	b.n	800453c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d110      	bne.n	800453c <osMessageQueueNew+0xac>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004526:	2b00      	cmp	r3, #0
 8004528:	d108      	bne.n	800453c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <osMessageQueueNew+0xac>
          mem = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
 8004536:	e001      	b.n	800453c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d10b      	bne.n	800455a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2100      	movs	r1, #0
 800454c:	9100      	str	r1, [sp, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fc41 	bl	8004dd8 <xQueueGenericCreateStatic>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24
 8004558:	e008      	b.n	800456c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004560:	2200      	movs	r2, #0
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fcae 	bl	8004ec6 <xQueueGenericCreate>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e001      	b.n	8004584 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004584:	69f9      	ldr	r1, [r7, #28]
 8004586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004588:	f001 fb42 	bl	8005c10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800458e:	4618      	mov	r0, r3
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000270 	.word	0x20000270

0800459c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b4:	f3ef 8305 	mrs	r3, IPSR
 80045b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80045ba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c0:	f3ef 8310 	mrs	r3, PRIMASK
 80045c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <osMessageQueuePut+0x44>
 80045cc:	4b2b      	ldr	r3, [pc, #172]	; (800467c <osMessageQueuePut+0xe0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d12e      	bne.n	8004632 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045d4:	f3ef 8311 	mrs	r3, BASEPRI
 80045d8:	617b      	str	r3, [r7, #20]
  return(result);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d028      	beq.n	8004632 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <osMessageQueuePut+0x56>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <osMessageQueuePut+0x56>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80045f2:	f06f 0303 	mvn.w	r3, #3
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045f8:	e039      	b.n	800466e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80045fe:	f107 0210 	add.w	r2, r7, #16
 8004602:	2300      	movs	r3, #0
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	6a38      	ldr	r0, [r7, #32]
 8004608:	f000 fe26 	bl	8005258 <xQueueGenericSendFromISR>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d003      	beq.n	800461a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004612:	f06f 0302 	mvn.w	r3, #2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004618:	e029      	b.n	800466e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d026      	beq.n	800466e <osMessageQueuePut+0xd2>
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <osMessageQueuePut+0xe4>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004630:	e01d      	b.n	800466e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <osMessageQueuePut+0xa2>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800463e:	f06f 0303 	mvn.w	r3, #3
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	e014      	b.n	8004670 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004646:	2300      	movs	r3, #0
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	6a38      	ldr	r0, [r7, #32]
 800464e:	f000 fd05 	bl	800505c <xQueueGenericSend>
 8004652:	4603      	mov	r3, r0
 8004654:	2b01      	cmp	r3, #1
 8004656:	d00b      	beq.n	8004670 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800465e:	f06f 0301 	mvn.w	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
 8004664:	e004      	b.n	8004670 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004666:	f06f 0302 	mvn.w	r3, #2
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e000      	b.n	8004670 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800466e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	; 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000270 	.word	0x20000270
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469a:	f3ef 8305 	mrs	r3, IPSR
 800469e:	61fb      	str	r3, [r7, #28]
  return(result);
 80046a0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a6:	f3ef 8310 	mrs	r3, PRIMASK
 80046aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <osMessageQueueGet+0x42>
 80046b2:	4b2b      	ldr	r3, [pc, #172]	; (8004760 <osMessageQueueGet+0xdc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d12e      	bne.n	8004718 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ba:	f3ef 8311 	mrs	r3, BASEPRI
 80046be:	617b      	str	r3, [r7, #20]
  return(result);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d028      	beq.n	8004718 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <osMessageQueueGet+0x54>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <osMessageQueueGet+0x54>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80046d8:	f06f 0303 	mvn.w	r3, #3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046de:	e038      	b.n	8004752 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80046e4:	f107 0310 	add.w	r3, r7, #16
 80046e8:	461a      	mov	r2, r3
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	6a38      	ldr	r0, [r7, #32]
 80046ee:	f001 f8c5 	bl	800587c <xQueueReceiveFromISR>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d003      	beq.n	8004700 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80046f8:	f06f 0302 	mvn.w	r3, #2
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80046fe:	e028      	b.n	8004752 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d025      	beq.n	8004752 <osMessageQueueGet+0xce>
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <osMessageQueueGet+0xe0>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004716:	e01c      	b.n	8004752 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <osMessageQueueGet+0xa0>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004724:	f06f 0303 	mvn.w	r3, #3
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
 800472a:	e013      	b.n	8004754 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6a38      	ldr	r0, [r7, #32]
 8004732:	f000 feb7 	bl	80054a4 <xQueueReceive>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d00b      	beq.n	8004754 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004742:	f06f 0301 	mvn.w	r3, #1
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	e004      	b.n	8004754 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800474a:	f06f 0302 	mvn.w	r3, #2
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e000      	b.n	8004754 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004752:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000270 	.word	0x20000270
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a06      	ldr	r2, [pc, #24]	; (8004790 <vApplicationGetIdleTaskMemory+0x28>)
 8004778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4a05      	ldr	r2, [pc, #20]	; (8004794 <vApplicationGetIdleTaskMemory+0x2c>)
 800477e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	20000274 	.word	0x20000274
 8004794:	20000330 	.word	0x20000330

08004798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80047a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a06      	ldr	r2, [pc, #24]	; (80047c8 <vApplicationGetTimerTaskMemory+0x30>)
 80047ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000530 	.word	0x20000530
 80047c8:	200005ec 	.word	0x200005ec

080047cc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80047f0:	2320      	movs	r3, #32
 80047f2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d00a      	beq.n	8004810 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60fb      	str	r3, [r7, #12]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f9bf 	bl	8004ba8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2201      	movs	r2, #1
 800482e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004830:	697b      	ldr	r3, [r7, #20]
	}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004840:	2020      	movs	r0, #32
 8004842:	f003 f873 	bl	800792c <pvPortMalloc>
 8004846:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f9a5 	bl	8004ba8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004864:	687b      	ldr	r3, [r7, #4]
	}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b090      	sub	sp, #64	; 0x40
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	623b      	str	r3, [r7, #32]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	61bb      	str	r3, [r7, #24]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e2:	f002 f8ff 	bl	8006ae4 <xTaskGetSchedulerState>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <xEventGroupWaitBits+0x82>
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <xEventGroupWaitBits+0x86>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <xEventGroupWaitBits+0x88>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	617b      	str	r3, [r7, #20]
}
 800490e:	bf00      	nop
 8004910:	e7fe      	b.n	8004910 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004912:	f001 fc57 	bl	80061c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	68b9      	ldr	r1, [r7, #8]
 8004920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004922:	f000 f90b 	bl	8004b3c <prvTestWaitCondition>
 8004926:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004932:	2300      	movs	r3, #0
 8004934:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d028      	beq.n	800498e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	43db      	mvns	r3, r3
 8004944:	401a      	ands	r2, r3
 8004946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e020      	b.n	800498e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800494c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	633b      	str	r3, [r7, #48]	; 0x30
 800495a:	e018      	b.n	800498e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004968:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004976:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	1d18      	adds	r0, r3, #4
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	4313      	orrs	r3, r2
 8004982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004984:	4619      	mov	r1, r3
 8004986:	f001 fe1d 	bl	80065c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800498e:	f001 fc27 	bl	80061e0 <xTaskResumeAll>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004996:	2b00      	cmp	r3, #0
 8004998:	d031      	beq.n	80049fe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d107      	bne.n	80049b0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <xEventGroupWaitBits+0x198>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80049b0:	f002 fa18 	bl	8006de4 <uxTaskResetEventItemValue>
 80049b4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11a      	bne.n	80049f6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80049c0:	f002 feb4 	bl	800772c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80049c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049d0:	f000 f8b4 	bl	8004b3c <prvTestWaitCondition>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	401a      	ands	r2, r3
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80049f2:	f002 fecb 	bl	800778c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3740      	adds	r7, #64	; 0x40
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004a16:	2300      	movs	r3, #0
 8004a18:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xEventGroupSetBits+0x32>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	613b      	str	r3, [r7, #16]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <xEventGroupSetBits+0x52>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	60fb      	str	r3, [r7, #12]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	3304      	adds	r3, #4
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	3308      	adds	r3, #8
 8004a68:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004a6a:	f001 fbab 	bl	80061c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004a80:	e03c      	b.n	8004afc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004aa0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00b      	beq.n	8004ad0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abc:	e008      	b.n	8004ad0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d101      	bne.n	8004ad0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004af0:	4619      	mov	r1, r3
 8004af2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004af4:	f001 fe32 	bl	800675c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8004afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d1be      	bne.n	8004a82 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	401a      	ands	r2, r3
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004b12:	f001 fb65 	bl	80061e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	681b      	ldr	r3, [r3, #0]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3738      	adds	r7, #56	; 0x38
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff ff6c 	bl	8004a0c <xEventGroupSetBits>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e007      	b.n	8004b72 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4013      	ands	r3, r2
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d101      	bne.n	8004b72 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004b72:	697b      	ldr	r3, [r7, #20]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
	...

08004b80 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	68f9      	ldr	r1, [r7, #12]
 8004b92:	4804      	ldr	r0, [pc, #16]	; (8004ba4 <xEventGroupSetBitsFromISR+0x24>)
 8004b94:	f002 fcb8 	bl	8007508 <xTimerPendFunctionCallFromISR>
 8004b98:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004b9a:	697b      	ldr	r3, [r7, #20]
	}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	08004b23 	.word	0x08004b23

08004ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f103 0208 	add.w	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0208 	add.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d103      	bne.n	8004c64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	e00c      	b.n	8004c7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3308      	adds	r3, #8
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <vListInsert+0x2e>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d2f6      	bcs.n	8004c6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d103      	bne.n	8004ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xQueueGenericReset+0x2a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	60bb      	str	r3, [r7, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d32:	f002 fcfb 	bl	800772c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	441a      	add	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	3b01      	subs	r3, #1
 8004d64:	68f9      	ldr	r1, [r7, #12]
 8004d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	441a      	add	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d114      	bne.n	8004db2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3310      	adds	r3, #16
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fc7d 	bl	8006694 <xTaskRemoveFromEventList>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <xQueueGenericReset+0xcc>)
 8004da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	e009      	b.n	8004dc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fef6 	bl	8004ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3324      	adds	r3, #36	; 0x24
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fef1 	bl	8004ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dc6:	f002 fce1 	bl	800778c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dca:	2301      	movs	r3, #1
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	e000ed04 	.word	0xe000ed04

08004dd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	; 0x38
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <xQueueGenericCreateStatic+0x52>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <xQueueGenericCreateStatic+0x56>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericCreateStatic+0x58>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	623b      	str	r3, [r7, #32]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xQueueGenericCreateStatic+0x7e>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueGenericCreateStatic+0x82>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericCreateStatic+0x84>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61fb      	str	r3, [r7, #28]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e76:	2350      	movs	r3, #80	; 0x50
 8004e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d00a      	beq.n	8004e96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61bb      	str	r3, [r7, #24]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f843 	bl	8004f42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	; 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	; 0x28
 8004eca:	af02      	add	r7, sp, #8
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	613b      	str	r3, [r7, #16]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e004      	b.n	8004f06 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3350      	adds	r3, #80	; 0x50
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 fd0e 	bl	800792c <pvPortMalloc>
 8004f10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00f      	beq.n	8004f38 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3350      	adds	r3, #80	; 0x50
 8004f1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f26:	79fa      	ldrb	r2, [r7, #7]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f805 	bl	8004f42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f38:	69bb      	ldr	r3, [r7, #24]
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e002      	b.n	8004f64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f70:	2101      	movs	r1, #1
 8004f72:	69b8      	ldr	r0, [r7, #24]
 8004f74:	f7ff fec8 	bl	8004d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af02      	add	r7, sp, #8
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	61bb      	str	r3, [r7, #24]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d90a      	bls.n	8004fce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	617b      	str	r3, [r7, #20]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fce:	2302      	movs	r3, #2
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff fefd 	bl	8004dd8 <xQueueGenericCreateStatic>
 8004fde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fec:	69fb      	ldr	r3, [r7, #28]
	}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	613b      	str	r3, [r7, #16]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d90a      	bls.n	800503a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800503a:	2202      	movs	r2, #2
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ff41 	bl	8004ec6 <xQueueGenericCreate>
 8005044:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005052:	697b      	ldr	r3, [r7, #20]
	}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGenericSend+0x32>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <xQueueGenericSend+0x40>
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xQueueGenericSend+0x44>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <xQueueGenericSend+0x46>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xQueueGenericSend+0x60>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSend+0x6e>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSend+0x72>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSend+0x74>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xQueueGenericSend+0x8e>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ea:	f001 fcfb 	bl	8006ae4 <xTaskGetSchedulerState>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <xQueueGenericSend+0x9e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <xQueueGenericSend+0xa2>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericSend+0xa4>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericSend+0xbe>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	61fb      	str	r3, [r7, #28]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800511a:	f002 fb07 	bl	800772c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <xQueueGenericSend+0xd4>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d129      	bne.n	8005184 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005136:	f000 fc5b 	bl	80059f0 <prvCopyDataToQueue>
 800513a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d010      	beq.n	8005166 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f001 faa3 	bl	8006694 <xTaskRemoveFromEventList>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005154:	4b3f      	ldr	r3, [pc, #252]	; (8005254 <xQueueGenericSend+0x1f8>)
 8005156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	e00a      	b.n	800517c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800516c:	4b39      	ldr	r3, [pc, #228]	; (8005254 <xQueueGenericSend+0x1f8>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800517c:	f002 fb06 	bl	800778c <vPortExitCritical>
				return pdPASS;
 8005180:	2301      	movs	r3, #1
 8005182:	e063      	b.n	800524c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800518a:	f002 faff 	bl	800778c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800518e:	2300      	movs	r3, #0
 8005190:	e05c      	b.n	800524c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fb3f 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051a6:	f002 faf1 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051aa:	f001 f80b 	bl	80061c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ae:	f002 fabd 	bl	800772c <vPortEnterCritical>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d103      	bne.n	80051c8 <xQueueGenericSend+0x16c>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d103      	bne.n	80051de <xQueueGenericSend+0x182>
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051de:	f002 fad5 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051e2:	1d3a      	adds	r2, r7, #4
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f001 fb2e 	bl	800684c <xTaskCheckForTimeOut>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d124      	bne.n	8005240 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f8:	f000 fcf2 	bl	8005be0 <prvIsQueueFull>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	3310      	adds	r3, #16
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f001 f9b6 	bl	800657c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005212:	f000 fc7d 	bl	8005b10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005216:	f000 ffe3 	bl	80061e0 <xTaskResumeAll>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f af7c 	bne.w	800511a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <xQueueGenericSend+0x1f8>)
 8005224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	e772      	b.n	800511a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005236:	f000 fc6b 	bl	8005b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800523a:	f000 ffd1 	bl	80061e0 <xTaskResumeAll>
 800523e:	e76c      	b.n	800511a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005242:	f000 fc65 	bl	8005b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005246:	f000 ffcb 	bl	80061e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800524a:	2300      	movs	r3, #0
		}
	}
}
 800524c:	4618      	mov	r0, r3
 800524e:	3738      	adds	r7, #56	; 0x38
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <xQueueGenericSendFromISR+0x3c>
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <xQueueGenericSendFromISR+0x40>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <xQueueGenericSendFromISR+0x42>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	623b      	str	r3, [r7, #32]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSendFromISR+0x6a>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSendFromISR+0x6e>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSendFromISR+0x70>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	61fb      	str	r3, [r7, #28]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052e2:	f002 fae5 	bl	80078b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052e6:	f3ef 8211 	mrs	r2, BASEPRI
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	61ba      	str	r2, [r7, #24]
 80052fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xQueueGenericSendFromISR+0xbc>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d12c      	bne.n	800536e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005324:	f000 fb64 	bl	80059f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005328:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d112      	bne.n	8005358 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d016      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	3324      	adds	r3, #36	; 0x24
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f9a8 	bl	8006694 <xTaskRemoveFromEventList>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e007      	b.n	8005368 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800535c:	3301      	adds	r3, #1
 800535e:	b2db      	uxtb	r3, r3
 8005360:	b25a      	sxtb	r2, r3
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005368:	2301      	movs	r3, #1
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800536c:	e001      	b.n	8005372 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800536e:	2300      	movs	r3, #0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800537c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005380:	4618      	mov	r0, r3
 8005382:	3738      	adds	r7, #56	; 0x38
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08e      	sub	sp, #56	; 0x38
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	623b      	str	r3, [r7, #32]
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	61fb      	str	r3, [r7, #28]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <xQueueGiveFromISR+0x58>
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <xQueueGiveFromISR+0x5c>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <xQueueGiveFromISR+0x5e>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <xQueueGiveFromISR+0x78>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61bb      	str	r3, [r7, #24]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005400:	f002 fa56 	bl	80078b0 <vPortValidateInterruptPriority>
	__asm volatile
 8005404:	f3ef 8211 	mrs	r2, BASEPRI
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	617a      	str	r2, [r7, #20]
 800541a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800541c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	429a      	cmp	r2, r3
 800542e:	d22b      	bcs.n	8005488 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005442:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d112      	bne.n	8005472 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f001 f91b 	bl	8006694 <xTaskRemoveFromEventList>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00e      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e007      	b.n	8005482 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005476:	3301      	adds	r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	b25a      	sxtb	r2, r3
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005482:	2301      	movs	r3, #1
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	e001      	b.n	800548c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005488:	2300      	movs	r3, #0
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f383 8811 	msr	BASEPRI, r3
}
 8005496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800549a:	4618      	mov	r0, r3
 800549c:	3738      	adds	r7, #56	; 0x38
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	; 0x30
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <xQueueReceive+0x30>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	623b      	str	r3, [r7, #32]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueReceive+0x3e>
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <xQueueReceive+0x42>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <xQueueReceive+0x44>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueReceive+0x5e>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61fb      	str	r3, [r7, #28]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005502:	f001 faef 	bl	8006ae4 <xTaskGetSchedulerState>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <xQueueReceive+0x6e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueReceive+0x72>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueReceive+0x74>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueReceive+0x8e>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61bb      	str	r3, [r7, #24]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005532:	f002 f8fb 	bl	800772c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01f      	beq.n	8005582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005546:	f000 fabd 	bl	8005ac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00f      	beq.n	800557a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	3310      	adds	r3, #16
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f898 	bl	8006694 <xTaskRemoveFromEventList>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800556a:	4b3d      	ldr	r3, [pc, #244]	; (8005660 <xQueueReceive+0x1bc>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800557a:	f002 f907 	bl	800778c <vPortExitCritical>
				return pdPASS;
 800557e:	2301      	movs	r3, #1
 8005580:	e069      	b.n	8005656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005588:	f002 f900 	bl	800778c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800558c:	2300      	movs	r3, #0
 800558e:	e062      	b.n	8005656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005596:	f107 0310 	add.w	r3, r7, #16
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f940 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a4:	f002 f8f2 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055a8:	f000 fe0c 	bl	80061c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ac:	f002 f8be 	bl	800772c <vPortEnterCritical>
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d103      	bne.n	80055c6 <xQueueReceive+0x122>
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d103      	bne.n	80055dc <xQueueReceive+0x138>
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055dc:	f002 f8d6 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e0:	1d3a      	adds	r2, r7, #4
 80055e2:	f107 0310 	add.w	r3, r7, #16
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f92f 	bl	800684c <xTaskCheckForTimeOut>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d123      	bne.n	800563c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 fadd 	bl	8005bb4 <prvIsQueueEmpty>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d017      	beq.n	8005630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	3324      	adds	r3, #36	; 0x24
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4611      	mov	r1, r2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ffb7 	bl	800657c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800560e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005610:	f000 fa7e 	bl	8005b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005614:	f000 fde4 	bl	80061e0 <xTaskResumeAll>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d189      	bne.n	8005532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xQueueReceive+0x1bc>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	e780      	b.n	8005532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005632:	f000 fa6d 	bl	8005b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005636:	f000 fdd3 	bl	80061e0 <xTaskResumeAll>
 800563a:	e77a      	b.n	8005532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 fa67 	bl	8005b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005642:	f000 fdcd 	bl	80061e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005648:	f000 fab4 	bl	8005bb4 <prvIsQueueEmpty>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	f43f af6f 	beq.w	8005532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005656:	4618      	mov	r0, r3
 8005658:	3730      	adds	r7, #48	; 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	; 0x38
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	623b      	str	r3, [r7, #32]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	61fb      	str	r3, [r7, #28]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056b4:	f001 fa16 	bl	8006ae4 <xTaskGetSchedulerState>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <xQueueSemaphoreTake+0x60>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <xQueueSemaphoreTake+0x64>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <xQueueSemaphoreTake+0x66>
 80056c8:	2300      	movs	r3, #0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10a      	bne.n	80056e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61bb      	str	r3, [r7, #24]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056e4:	f002 f822 	bl	800772c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d024      	beq.n	800573e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005704:	f001 fb86 	bl	8006e14 <pvTaskIncrementMutexHeldCount>
 8005708:	4602      	mov	r2, r0
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00f      	beq.n	8005736 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	3310      	adds	r3, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f000 ffba 	bl	8006694 <xTaskRemoveFromEventList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005726:	4b54      	ldr	r3, [pc, #336]	; (8005878 <xQueueSemaphoreTake+0x214>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005736:	f002 f829 	bl	800778c <vPortExitCritical>
				return pdPASS;
 800573a:	2301      	movs	r3, #1
 800573c:	e097      	b.n	800586e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	617b      	str	r3, [r7, #20]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005760:	f002 f814 	bl	800778c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005764:	2300      	movs	r3, #0
 8005766:	e082      	b.n	800586e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4618      	mov	r0, r3
 8005774:	f001 f854 	bl	8006820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800577c:	f002 f806 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005780:	f000 fd20 	bl	80061c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005784:	f001 ffd2 	bl	800772c <vPortEnterCritical>
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578e:	b25b      	sxtb	r3, r3
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d103      	bne.n	800579e <xQueueSemaphoreTake+0x13a>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a4:	b25b      	sxtb	r3, r3
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d103      	bne.n	80057b4 <xQueueSemaphoreTake+0x150>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b4:	f001 ffea 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b8:	463a      	mov	r2, r7
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 f843 	bl	800684c <xTaskCheckForTimeOut>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d132      	bne.n	8005832 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057ce:	f000 f9f1 	bl	8005bb4 <prvIsQueueEmpty>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d026      	beq.n	8005826 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057e0:	f001 ffa4 	bl	800772c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f999 	bl	8006b20 <xTaskPriorityInherit>
 80057ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057f0:	f001 ffcc 	bl	800778c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 febd 	bl	800657c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005804:	f000 f984 	bl	8005b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005808:	f000 fcea 	bl	80061e0 <xTaskResumeAll>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	f47f af68 	bne.w	80056e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <xQueueSemaphoreTake+0x214>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	e75e      	b.n	80056e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005828:	f000 f972 	bl	8005b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800582c:	f000 fcd8 	bl	80061e0 <xTaskResumeAll>
 8005830:	e758      	b.n	80056e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005834:	f000 f96c 	bl	8005b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005838:	f000 fcd2 	bl	80061e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800583c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800583e:	f000 f9b9 	bl	8005bb4 <prvIsQueueEmpty>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f43f af4d 	beq.w	80056e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005850:	f001 ff6c 	bl	800772c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005856:	f000 f8b4 	bl	80059c2 <prvGetDisinheritPriorityAfterTimeout>
 800585a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005862:	4618      	mov	r0, r3
 8005864:	f001 fa38 	bl	8006cd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005868:	f001 ff90 	bl	800778c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800586e:	4618      	mov	r0, r3
 8005870:	3738      	adds	r7, #56	; 0x38
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08e      	sub	sp, #56	; 0x38
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	623b      	str	r3, [r7, #32]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <xQueueReceiveFromISR+0x3a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <xQueueReceiveFromISR+0x3e>
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <xQueueReceiveFromISR+0x40>
 80058ba:	2300      	movs	r3, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	61fb      	str	r3, [r7, #28]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058d6:	f001 ffeb 	bl	80078b0 <vPortValidateInterruptPriority>
	__asm volatile
 80058da:	f3ef 8211 	mrs	r2, BASEPRI
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61ba      	str	r2, [r7, #24]
 80058f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02f      	beq.n	8005962 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005910:	f000 f8d8 	bl	8005ac4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800591c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d112      	bne.n	800594c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	3310      	adds	r3, #16
 8005932:	4618      	mov	r0, r3
 8005934:	f000 feae 	bl	8006694 <xTaskRemoveFromEventList>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e007      	b.n	800595c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800594c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005950:	3301      	adds	r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	b25a      	sxtb	r2, r3
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800595c:	2301      	movs	r3, #1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	e001      	b.n	8005966 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	613b      	str	r3, [r7, #16]
	__asm volatile
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f383 8811 	msr	BASEPRI, r3
}
 8005970:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005974:	4618      	mov	r0, r3
 8005976:	3738      	adds	r7, #56	; 0x38
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10a      	bne.n	80059a4 <vQueueDelete+0x28>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60bb      	str	r3, [r7, #8]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f95b 	bl	8005c60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f002 f87d 	bl	8007ab4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e001      	b.n	80059e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059e4:	68fb      	ldr	r3, [r7, #12]
	}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d14d      	bne.n	8005ab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 f8ee 	bl	8006bfc <xTaskPriorityDisinherit>
 8005a20:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	e043      	b.n	8005ab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d119      	bne.n	8005a64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6898      	ldr	r0, [r3, #8]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	f002 f974 	bl	8007d28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	441a      	add	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d32b      	bcc.n	8005ab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	609a      	str	r2, [r3, #8]
 8005a62:	e026      	b.n	8005ab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68d8      	ldr	r0, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	f002 f95a 	bl	8007d28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d207      	bcs.n	8005aa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	425b      	negs	r3, r3
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d105      	bne.n	8005ab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	441a      	add	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d303      	bcc.n	8005af8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68d9      	ldr	r1, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	461a      	mov	r2, r3
 8005b02:	6838      	ldr	r0, [r7, #0]
 8005b04:	f002 f910 	bl	8007d28 <memcpy>
	}
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b18:	f001 fe08 	bl	800772c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b24:	e011      	b.n	8005b4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d012      	beq.n	8005b54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3324      	adds	r3, #36	; 0x24
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fdae 	bl	8006694 <xTaskRemoveFromEventList>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b3e:	f000 fee7 	bl	8006910 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dce9      	bgt.n	8005b26 <prvUnlockQueue+0x16>
 8005b52:	e000      	b.n	8005b56 <prvUnlockQueue+0x46>
					break;
 8005b54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	22ff      	movs	r2, #255	; 0xff
 8005b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b5e:	f001 fe15 	bl	800778c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b62:	f001 fde3 	bl	800772c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b6e:	e011      	b.n	8005b94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3310      	adds	r3, #16
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fd89 	bl	8006694 <xTaskRemoveFromEventList>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b88:	f000 fec2 	bl	8006910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dce9      	bgt.n	8005b70 <prvUnlockQueue+0x60>
 8005b9c:	e000      	b.n	8005ba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	22ff      	movs	r2, #255	; 0xff
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ba8:	f001 fdf0 	bl	800778c <vPortExitCritical>
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bbc:	f001 fdb6 	bl	800772c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e001      	b.n	8005bd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bd2:	f001 fddb 	bl	800778c <vPortExitCritical>

	return xReturn;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005be8:	f001 fda0 	bl	800772c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d102      	bne.n	8005bfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e001      	b.n	8005c02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c02:	f001 fdc3 	bl	800778c <vPortExitCritical>

	return xReturn;
 8005c06:	68fb      	ldr	r3, [r7, #12]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e014      	b.n	8005c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c20:	4a0e      	ldr	r2, [pc, #56]	; (8005c5c <vQueueAddToRegistry+0x4c>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c2c:	490b      	ldr	r1, [pc, #44]	; (8005c5c <vQueueAddToRegistry+0x4c>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <vQueueAddToRegistry+0x4c>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c42:	e006      	b.n	8005c52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d9e7      	bls.n	8005c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr
 8005c5c:	200009ec 	.word	0x200009ec

08005c60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	e016      	b.n	8005c9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <vQueueUnregisterQueue+0x50>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4413      	add	r3, r2
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d10b      	bne.n	8005c96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <vQueueUnregisterQueue+0x50>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2100      	movs	r1, #0
 8005c84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c88:	4a09      	ldr	r2, [pc, #36]	; (8005cb0 <vQueueUnregisterQueue+0x50>)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	2200      	movs	r2, #0
 8005c92:	605a      	str	r2, [r3, #4]
				break;
 8005c94:	e006      	b.n	8005ca4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b07      	cmp	r3, #7
 8005ca0:	d9e5      	bls.n	8005c6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	200009ec 	.word	0x200009ec

08005cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cc4:	f001 fd32 	bl	800772c <vPortEnterCritical>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d103      	bne.n	8005cde <vQueueWaitForMessageRestricted+0x2a>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce4:	b25b      	sxtb	r3, r3
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d103      	bne.n	8005cf4 <vQueueWaitForMessageRestricted+0x40>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf4:	f001 fd4a 	bl	800778c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	3324      	adds	r3, #36	; 0x24
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fc97 	bl	800663c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	f7ff fefe 	bl	8005b10 <prvUnlockQueue>
	}
 8005d14:	bf00      	nop
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08e      	sub	sp, #56	; 0x38
 8005d20:	af04      	add	r7, sp, #16
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	623b      	str	r3, [r7, #32]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61fb      	str	r3, [r7, #28]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d62:	23bc      	movs	r3, #188	; 0xbc
 8005d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2bbc      	cmp	r3, #188	; 0xbc
 8005d6a:	d00a      	beq.n	8005d82 <xTaskCreateStatic+0x66>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	61bb      	str	r3, [r7, #24]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01e      	beq.n	8005dc6 <xTaskCreateStatic+0xaa>
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01b      	beq.n	8005dc6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005da0:	2300      	movs	r3, #0
 8005da2:	9303      	str	r3, [sp, #12]
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	9302      	str	r3, [sp, #8]
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f851 	bl	8005e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dc0:	f000 f8ec 	bl	8005f9c <prvAddNewTaskToReadyList>
 8005dc4:	e001      	b.n	8005dca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dca:	697b      	ldr	r3, [r7, #20]
	}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3728      	adds	r7, #40	; 0x28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fd9f 	bl	800792c <pvPortMalloc>
 8005dee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005df6:	20bc      	movs	r0, #188	; 0xbc
 8005df8:	f001 fd98 	bl	800792c <pvPortMalloc>
 8005dfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
 8005e0a:	e005      	b.n	8005e18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e0c:	6978      	ldr	r0, [r7, #20]
 8005e0e:	f001 fe51 	bl	8007ab4 <vPortFree>
 8005e12:	e001      	b.n	8005e18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d017      	beq.n	8005e4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9303      	str	r3, [sp, #12]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f80f 	bl	8005e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e42:	69f8      	ldr	r0, [r7, #28]
 8005e44:	f000 f8aa 	bl	8005f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e002      	b.n	8005e54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e54:	69bb      	ldr	r3, [r7, #24]
	}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	461a      	mov	r2, r3
 8005e78:	21a5      	movs	r1, #165	; 0xa5
 8005e7a:	f001 ff63 	bl	8007d44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f023 0307 	bic.w	r3, r3, #7
 8005e96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	617b      	str	r3, [r7, #20]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e012      	b.n	8005ee4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	7819      	ldrb	r1, [r3, #0]
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	3334      	adds	r3, #52	; 0x34
 8005ece:	460a      	mov	r2, r1
 8005ed0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d9e9      	bls.n	8005ebe <prvInitialiseNewTask+0x5e>
 8005eea:	e000      	b.n	8005eee <prvInitialiseNewTask+0x8e>
		{
			break;
 8005eec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	2b37      	cmp	r3, #55	; 0x37
 8005efa:	d901      	bls.n	8005f00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005efc:	2337      	movs	r3, #55	; 0x37
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	3304      	adds	r3, #4
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fe65 	bl	8004be6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fe60 	bl	8004be6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	3354      	adds	r3, #84	; 0x54
 8005f50:	2260      	movs	r2, #96	; 0x60
 8005f52:	2100      	movs	r1, #0
 8005f54:	4618      	mov	r0, r3
 8005f56:	f001 fef5 	bl	8007d44 <memset>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	4a0c      	ldr	r2, [pc, #48]	; (8005f90 <prvInitialiseNewTask+0x130>)
 8005f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	4a0c      	ldr	r2, [pc, #48]	; (8005f94 <prvInitialiseNewTask+0x134>)
 8005f64:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	4a0b      	ldr	r2, [pc, #44]	; (8005f98 <prvInitialiseNewTask+0x138>)
 8005f6a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	69b8      	ldr	r0, [r7, #24]
 8005f72:	f001 fae9 	bl	8007548 <pxPortInitialiseStack>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f88:	bf00      	nop
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	080081c8 	.word	0x080081c8
 8005f94:	080081e8 	.word	0x080081e8
 8005f98:	080081a8 	.word	0x080081a8

08005f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fa4:	f001 fbc2 	bl	800772c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fa8:	4b2d      	ldr	r3, [pc, #180]	; (8006060 <prvAddNewTaskToReadyList+0xc4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <prvAddNewTaskToReadyList+0xc4>)
 8005fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <prvAddNewTaskToReadyList+0xc8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <prvAddNewTaskToReadyList+0xc8>)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fc0:	4b27      	ldr	r3, [pc, #156]	; (8006060 <prvAddNewTaskToReadyList+0xc4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d110      	bne.n	8005fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fc8:	f000 fcc6 	bl	8006958 <prvInitialiseTaskLists>
 8005fcc:	e00d      	b.n	8005fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <prvAddNewTaskToReadyList+0xcc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fd6:	4b23      	ldr	r3, [pc, #140]	; (8006064 <prvAddNewTaskToReadyList+0xc8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d802      	bhi.n	8005fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <prvAddNewTaskToReadyList+0xc8>)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <prvAddNewTaskToReadyList+0xd0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	4a1e      	ldr	r2, [pc, #120]	; (800606c <prvAddNewTaskToReadyList+0xd0>)
 8005ff2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ff4:	4b1d      	ldr	r3, [pc, #116]	; (800606c <prvAddNewTaskToReadyList+0xd0>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <prvAddNewTaskToReadyList+0xd4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d903      	bls.n	8006010 <prvAddNewTaskToReadyList+0x74>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <prvAddNewTaskToReadyList+0xd4>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a15      	ldr	r2, [pc, #84]	; (8006074 <prvAddNewTaskToReadyList+0xd8>)
 800601e:	441a      	add	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe fde9 	bl	8004bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800602c:	f001 fbae 	bl	800778c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006030:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <prvAddNewTaskToReadyList+0xcc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00e      	beq.n	8006056 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <prvAddNewTaskToReadyList+0xc8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	429a      	cmp	r2, r3
 8006044:	d207      	bcs.n	8006056 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <prvAddNewTaskToReadyList+0xdc>)
 8006048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006056:	bf00      	nop
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000f00 	.word	0x20000f00
 8006064:	20000a2c 	.word	0x20000a2c
 8006068:	20000f0c 	.word	0x20000f0c
 800606c:	20000f1c 	.word	0x20000f1c
 8006070:	20000f08 	.word	0x20000f08
 8006074:	20000a30 	.word	0x20000a30
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d017      	beq.n	80060be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <vTaskDelay+0x60>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <vTaskDelay+0x30>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060ac:	f000 f88a 	bl	80061c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060b0:	2100      	movs	r1, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fec2 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060b8:	f000 f892 	bl	80061e0 <xTaskResumeAll>
 80060bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <vTaskDelay+0x64>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000f28 	.word	0x20000f28
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060f2:	463a      	mov	r2, r7
 80060f4:	1d39      	adds	r1, r7, #4
 80060f6:	f107 0308 	add.w	r3, r7, #8
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fb34 	bl	8004768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	9202      	str	r2, [sp, #8]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	2300      	movs	r3, #0
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	460a      	mov	r2, r1
 8006112:	4924      	ldr	r1, [pc, #144]	; (80061a4 <vTaskStartScheduler+0xc0>)
 8006114:	4824      	ldr	r0, [pc, #144]	; (80061a8 <vTaskStartScheduler+0xc4>)
 8006116:	f7ff fe01 	bl	8005d1c <xTaskCreateStatic>
 800611a:	4603      	mov	r3, r0
 800611c:	4a23      	ldr	r2, [pc, #140]	; (80061ac <vTaskStartScheduler+0xc8>)
 800611e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006120:	4b22      	ldr	r3, [pc, #136]	; (80061ac <vTaskStartScheduler+0xc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006128:	2301      	movs	r3, #1
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e001      	b.n	8006132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d102      	bne.n	800613e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006138:	f000 fed4 	bl	8006ee4 <xTimerCreateTimerTask>
 800613c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d11b      	bne.n	800617c <vTaskStartScheduler+0x98>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006158:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <vTaskStartScheduler+0xcc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3354      	adds	r3, #84	; 0x54
 800615e:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <vTaskStartScheduler+0xd0>)
 8006160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <vTaskStartScheduler+0xd4>)
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800616a:	4b14      	ldr	r3, [pc, #80]	; (80061bc <vTaskStartScheduler+0xd8>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <vTaskStartScheduler+0xdc>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006176:	f001 fa67 	bl	8007648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800617a:	e00e      	b.n	800619a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d10a      	bne.n	800619a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <vTaskStartScheduler+0xb4>
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	08007fd4 	.word	0x08007fd4
 80061a8:	08006929 	.word	0x08006929
 80061ac:	20000f24 	.word	0x20000f24
 80061b0:	20000a2c 	.word	0x20000a2c
 80061b4:	20000040 	.word	0x20000040
 80061b8:	20000f20 	.word	0x20000f20
 80061bc:	20000f0c 	.word	0x20000f0c
 80061c0:	20000f04 	.word	0x20000f04

080061c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <vTaskSuspendAll+0x18>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a03      	ldr	r2, [pc, #12]	; (80061dc <vTaskSuspendAll+0x18>)
 80061d0:	6013      	str	r3, [r2, #0]
}
 80061d2:	bf00      	nop
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000f28 	.word	0x20000f28

080061e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061ee:	4b42      	ldr	r3, [pc, #264]	; (80062f8 <xTaskResumeAll+0x118>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <xTaskResumeAll+0x2c>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	603b      	str	r3, [r7, #0]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800620c:	f001 fa8e 	bl	800772c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006210:	4b39      	ldr	r3, [pc, #228]	; (80062f8 <xTaskResumeAll+0x118>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3b01      	subs	r3, #1
 8006216:	4a38      	ldr	r2, [pc, #224]	; (80062f8 <xTaskResumeAll+0x118>)
 8006218:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621a:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <xTaskResumeAll+0x118>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d162      	bne.n	80062e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006222:	4b36      	ldr	r3, [pc, #216]	; (80062fc <xTaskResumeAll+0x11c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d05e      	beq.n	80062e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800622a:	e02f      	b.n	800628c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800622c:	4b34      	ldr	r3, [pc, #208]	; (8006300 <xTaskResumeAll+0x120>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3318      	adds	r3, #24
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fd3b 	bl	8004cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3304      	adds	r3, #4
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe fd36 	bl	8004cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <xTaskResumeAll+0x124>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <xTaskResumeAll+0x7c>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4a2a      	ldr	r2, [pc, #168]	; (8006304 <xTaskResumeAll+0x124>)
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <xTaskResumeAll+0x128>)
 800626a:	441a      	add	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fcc3 	bl	8004bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627c:	4b23      	ldr	r3, [pc, #140]	; (800630c <xTaskResumeAll+0x12c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	429a      	cmp	r2, r3
 8006284:	d302      	bcc.n	800628c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <xTaskResumeAll+0x130>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800628c:	4b1c      	ldr	r3, [pc, #112]	; (8006300 <xTaskResumeAll+0x120>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1cb      	bne.n	800622c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800629a:	f000 fbff 	bl	8006a9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800629e:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <xTaskResumeAll+0x134>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d010      	beq.n	80062cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062aa:	f000 f845 	bl	8006338 <xTaskIncrementTick>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <xTaskResumeAll+0x130>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3b01      	subs	r3, #1
 80062be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f1      	bne.n	80062aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062c6:	4b13      	ldr	r3, [pc, #76]	; (8006314 <xTaskResumeAll+0x134>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <xTaskResumeAll+0x130>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d009      	beq.n	80062e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <xTaskResumeAll+0x138>)
 80062da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e8:	f001 fa50 	bl	800778c <vPortExitCritical>

	return xAlreadyYielded;
 80062ec:	68bb      	ldr	r3, [r7, #8]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000f28 	.word	0x20000f28
 80062fc:	20000f00 	.word	0x20000f00
 8006300:	20000ec0 	.word	0x20000ec0
 8006304:	20000f08 	.word	0x20000f08
 8006308:	20000a30 	.word	0x20000a30
 800630c:	20000a2c 	.word	0x20000a2c
 8006310:	20000f14 	.word	0x20000f14
 8006314:	20000f10 	.word	0x20000f10
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <xTaskGetTickCount+0x18>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006328:	687b      	ldr	r3, [r7, #4]
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	20000f04 	.word	0x20000f04

08006338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006342:	4b51      	ldr	r3, [pc, #324]	; (8006488 <xTaskIncrementTick+0x150>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f040 808e 	bne.w	8006468 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800634c:	4b4f      	ldr	r3, [pc, #316]	; (800648c <xTaskIncrementTick+0x154>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006354:	4a4d      	ldr	r2, [pc, #308]	; (800648c <xTaskIncrementTick+0x154>)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d120      	bne.n	80063a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006360:	4b4b      	ldr	r3, [pc, #300]	; (8006490 <xTaskIncrementTick+0x158>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <xTaskIncrementTick+0x48>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskIncrementTick+0x46>
 8006380:	4b43      	ldr	r3, [pc, #268]	; (8006490 <xTaskIncrementTick+0x158>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	4b43      	ldr	r3, [pc, #268]	; (8006494 <xTaskIncrementTick+0x15c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a41      	ldr	r2, [pc, #260]	; (8006490 <xTaskIncrementTick+0x158>)
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	4a41      	ldr	r2, [pc, #260]	; (8006494 <xTaskIncrementTick+0x15c>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	4b40      	ldr	r3, [pc, #256]	; (8006498 <xTaskIncrementTick+0x160>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a3f      	ldr	r2, [pc, #252]	; (8006498 <xTaskIncrementTick+0x160>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	f000 fb7d 	bl	8006a9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063a2:	4b3e      	ldr	r3, [pc, #248]	; (800649c <xTaskIncrementTick+0x164>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d34e      	bcc.n	800644a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ac:	4b38      	ldr	r3, [pc, #224]	; (8006490 <xTaskIncrementTick+0x158>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <xTaskIncrementTick+0x82>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xTaskIncrementTick+0x84>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c0:	4b36      	ldr	r3, [pc, #216]	; (800649c <xTaskIncrementTick+0x164>)
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	601a      	str	r2, [r3, #0]
					break;
 80063c8:	e03f      	b.n	800644a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063ca:	4b31      	ldr	r3, [pc, #196]	; (8006490 <xTaskIncrementTick+0x158>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d203      	bcs.n	80063ea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063e2:	4a2e      	ldr	r2, [pc, #184]	; (800649c <xTaskIncrementTick+0x164>)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6013      	str	r3, [r2, #0]
						break;
 80063e8:	e02f      	b.n	800644a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fc60 	bl	8004cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	3318      	adds	r3, #24
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fc57 	bl	8004cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640a:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <xTaskIncrementTick+0x168>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d903      	bls.n	800641a <xTaskIncrementTick+0xe2>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <xTaskIncrementTick+0x168>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <xTaskIncrementTick+0x16c>)
 8006428:	441a      	add	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe fbe4 	bl	8004bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <xTaskIncrementTick+0x170>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	429a      	cmp	r2, r3
 8006442:	d3b3      	bcc.n	80063ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006448:	e7b0      	b.n	80063ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800644a:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <xTaskIncrementTick+0x170>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006450:	4914      	ldr	r1, [pc, #80]	; (80064a4 <xTaskIncrementTick+0x16c>)
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d907      	bls.n	8006472 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e004      	b.n	8006472 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <xTaskIncrementTick+0x174>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <xTaskIncrementTick+0x174>)
 8006470:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006472:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <xTaskIncrementTick+0x178>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800647a:	2301      	movs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800647e:	697b      	ldr	r3, [r7, #20]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000f28 	.word	0x20000f28
 800648c:	20000f04 	.word	0x20000f04
 8006490:	20000eb8 	.word	0x20000eb8
 8006494:	20000ebc 	.word	0x20000ebc
 8006498:	20000f18 	.word	0x20000f18
 800649c:	20000f20 	.word	0x20000f20
 80064a0:	20000f08 	.word	0x20000f08
 80064a4:	20000a30 	.word	0x20000a30
 80064a8:	20000a2c 	.word	0x20000a2c
 80064ac:	20000f10 	.word	0x20000f10
 80064b0:	20000f14 	.word	0x20000f14

080064b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ba:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <vTaskSwitchContext+0xb0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <vTaskSwitchContext+0xb4>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064c8:	e046      	b.n	8006558 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064ca:	4b27      	ldr	r3, [pc, #156]	; (8006568 <vTaskSwitchContext+0xb4>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064d0:	4b26      	ldr	r3, [pc, #152]	; (800656c <vTaskSwitchContext+0xb8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e010      	b.n	80064fa <vTaskSwitchContext+0x46>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <vTaskSwitchContext+0x3e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	491d      	ldr	r1, [pc, #116]	; (8006570 <vTaskSwitchContext+0xbc>)
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0e4      	beq.n	80064d8 <vTaskSwitchContext+0x24>
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4a15      	ldr	r2, [pc, #84]	; (8006570 <vTaskSwitchContext+0xbc>)
 800651a:	4413      	add	r3, r2
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3308      	adds	r3, #8
 8006530:	429a      	cmp	r2, r3
 8006532:	d104      	bne.n	800653e <vTaskSwitchContext+0x8a>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <vTaskSwitchContext+0xc0>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4a08      	ldr	r2, [pc, #32]	; (800656c <vTaskSwitchContext+0xb8>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <vTaskSwitchContext+0xc0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3354      	adds	r3, #84	; 0x54
 8006554:	4a08      	ldr	r2, [pc, #32]	; (8006578 <vTaskSwitchContext+0xc4>)
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000f28 	.word	0x20000f28
 8006568:	20000f14 	.word	0x20000f14
 800656c:	20000f08 	.word	0x20000f08
 8006570:	20000a30 	.word	0x20000a30
 8006574:	20000a2c 	.word	0x20000a2c
 8006578:	20000040 	.word	0x20000040

0800657c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a2:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <vTaskPlaceOnEventList+0x44>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3318      	adds	r3, #24
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fe fb4a 	bl	8004c44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b0:	2101      	movs	r1, #1
 80065b2:	6838      	ldr	r0, [r7, #0]
 80065b4:	f000 fc42 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	20000a2c 	.word	0x20000a2c

080065c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	617b      	str	r3, [r7, #20]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80065ec:	4b11      	ldr	r3, [pc, #68]	; (8006634 <vTaskPlaceOnUnorderedEventList+0x70>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	613b      	str	r3, [r7, #16]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <vTaskPlaceOnUnorderedEventList+0x74>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006614:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3318      	adds	r3, #24
 800661c:	4619      	mov	r1, r3
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f7fe faed 	bl	8004bfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fc08 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000f28 	.word	0x20000f28
 8006638:	20000a2c 	.word	0x20000a2c

0800663c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	617b      	str	r3, [r7, #20]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <vTaskPlaceOnEventListRestricted+0x54>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3318      	adds	r3, #24
 800666a:	4619      	mov	r1, r3
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7fe fac6 	bl	8004bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f000 fbdb 	bl	8006e3c <prvAddCurrentTaskToDelayedList>
	}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000a2c 	.word	0x20000a2c

08006694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10a      	bne.n	80066c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60fb      	str	r3, [r7, #12]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3318      	adds	r3, #24
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe faf5 	bl	8004cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ca:	4b1e      	ldr	r3, [pc, #120]	; (8006744 <xTaskRemoveFromEventList+0xb0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d11d      	bne.n	800670e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe faec 	bl	8004cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e0:	4b19      	ldr	r3, [pc, #100]	; (8006748 <xTaskRemoveFromEventList+0xb4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d903      	bls.n	80066f0 <xTaskRemoveFromEventList+0x5c>
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <xTaskRemoveFromEventList+0xb4>)
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4a13      	ldr	r2, [pc, #76]	; (800674c <xTaskRemoveFromEventList+0xb8>)
 80066fe:	441a      	add	r2, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3304      	adds	r3, #4
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fe fa79 	bl	8004bfe <vListInsertEnd>
 800670c:	e005      	b.n	800671a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3318      	adds	r3, #24
 8006712:	4619      	mov	r1, r3
 8006714:	480e      	ldr	r0, [pc, #56]	; (8006750 <xTaskRemoveFromEventList+0xbc>)
 8006716:	f7fe fa72 	bl	8004bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <xTaskRemoveFromEventList+0xc0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	429a      	cmp	r2, r3
 8006726:	d905      	bls.n	8006734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <xTaskRemoveFromEventList+0xc4>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e001      	b.n	8006738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006738:	697b      	ldr	r3, [r7, #20]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000f28 	.word	0x20000f28
 8006748:	20000f08 	.word	0x20000f08
 800674c:	20000a30 	.word	0x20000a30
 8006750:	20000ec0 	.word	0x20000ec0
 8006754:	20000a2c 	.word	0x20000a2c
 8006758:	20000f14 	.word	0x20000f14

0800675c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	613b      	str	r3, [r7, #16]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60fb      	str	r3, [r7, #12]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fe fa7f 	bl	8004cb4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fa7a 	bl	8004cb4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b12      	ldr	r3, [pc, #72]	; (8006810 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d903      	bls.n	80067d4 <vTaskRemoveFromUnorderedEventList+0x78>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4a0f      	ldr	r2, [pc, #60]	; (8006810 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4a0c      	ldr	r2, [pc, #48]	; (8006814 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80067e2:	441a      	add	r2, r3
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe fa07 	bl	8004bfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	4b08      	ldr	r3, [pc, #32]	; (8006818 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d902      	bls.n	8006804 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80067fe:	4b07      	ldr	r3, [pc, #28]	; (800681c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006800:	2201      	movs	r2, #1
 8006802:	601a      	str	r2, [r3, #0]
	}
}
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000f28 	.word	0x20000f28
 8006810:	20000f08 	.word	0x20000f08
 8006814:	20000a30 	.word	0x20000a30
 8006818:	20000a2c 	.word	0x20000a2c
 800681c:	20000f14 	.word	0x20000f14

08006820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <vTaskInternalSetTimeOutState+0x24>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <vTaskInternalSetTimeOutState+0x28>)
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	605a      	str	r2, [r3, #4]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000f18 	.word	0x20000f18
 8006848:	20000f04 	.word	0x20000f04

0800684c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800688e:	f000 ff4d 	bl	800772c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006892:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <xTaskCheckForTimeOut+0xbc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d102      	bne.n	80068b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e023      	b.n	80068fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <xTaskCheckForTimeOut+0xc0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d007      	beq.n	80068ce <xTaskCheckForTimeOut+0x82>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068c8:	2301      	movs	r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	e015      	b.n	80068fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d20b      	bcs.n	80068f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ff9b 	bl	8006820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	e004      	b.n	80068fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068f6:	2301      	movs	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068fa:	f000 ff47 	bl	800778c <vPortExitCritical>

	return xReturn;
 80068fe:	69fb      	ldr	r3, [r7, #28]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3720      	adds	r7, #32
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000f04 	.word	0x20000f04
 800690c:	20000f18 	.word	0x20000f18

08006910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006914:	4b03      	ldr	r3, [pc, #12]	; (8006924 <vTaskMissedYield+0x14>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
}
 800691a:	bf00      	nop
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000f14 	.word	0x20000f14

08006928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006930:	f000 f852 	bl	80069d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <prvIdleTask+0x28>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d9f9      	bls.n	8006930 <prvIdleTask+0x8>
			{
				taskYIELD();
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <prvIdleTask+0x2c>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800694c:	e7f0      	b.n	8006930 <prvIdleTask+0x8>
 800694e:	bf00      	nop
 8006950:	20000a30 	.word	0x20000a30
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800695e:	2300      	movs	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	e00c      	b.n	800697e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4a12      	ldr	r2, [pc, #72]	; (80069b8 <prvInitialiseTaskLists+0x60>)
 8006970:	4413      	add	r3, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe f918 	bl	8004ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3301      	adds	r3, #1
 800697c:	607b      	str	r3, [r7, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b37      	cmp	r3, #55	; 0x37
 8006982:	d9ef      	bls.n	8006964 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006984:	480d      	ldr	r0, [pc, #52]	; (80069bc <prvInitialiseTaskLists+0x64>)
 8006986:	f7fe f90f 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800698a:	480d      	ldr	r0, [pc, #52]	; (80069c0 <prvInitialiseTaskLists+0x68>)
 800698c:	f7fe f90c 	bl	8004ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006990:	480c      	ldr	r0, [pc, #48]	; (80069c4 <prvInitialiseTaskLists+0x6c>)
 8006992:	f7fe f909 	bl	8004ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006996:	480c      	ldr	r0, [pc, #48]	; (80069c8 <prvInitialiseTaskLists+0x70>)
 8006998:	f7fe f906 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800699c:	480b      	ldr	r0, [pc, #44]	; (80069cc <prvInitialiseTaskLists+0x74>)
 800699e:	f7fe f903 	bl	8004ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <prvInitialiseTaskLists+0x78>)
 80069a4:	4a05      	ldr	r2, [pc, #20]	; (80069bc <prvInitialiseTaskLists+0x64>)
 80069a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <prvInitialiseTaskLists+0x7c>)
 80069aa:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <prvInitialiseTaskLists+0x68>)
 80069ac:	601a      	str	r2, [r3, #0]
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000a30 	.word	0x20000a30
 80069bc:	20000e90 	.word	0x20000e90
 80069c0:	20000ea4 	.word	0x20000ea4
 80069c4:	20000ec0 	.word	0x20000ec0
 80069c8:	20000ed4 	.word	0x20000ed4
 80069cc:	20000eec 	.word	0x20000eec
 80069d0:	20000eb8 	.word	0x20000eb8
 80069d4:	20000ebc 	.word	0x20000ebc

080069d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069de:	e019      	b.n	8006a14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069e0:	f000 fea4 	bl	800772c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <prvCheckTasksWaitingTermination+0x50>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe f95f 	bl	8004cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <prvCheckTasksWaitingTermination+0x54>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4a0b      	ldr	r2, [pc, #44]	; (8006a2c <prvCheckTasksWaitingTermination+0x54>)
 80069fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <prvCheckTasksWaitingTermination+0x58>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <prvCheckTasksWaitingTermination+0x58>)
 8006a08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a0a:	f000 febf 	bl	800778c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f810 	bl	8006a34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <prvCheckTasksWaitingTermination+0x58>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e1      	bne.n	80069e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000ed4 	.word	0x20000ed4
 8006a2c:	20000f00 	.word	0x20000f00
 8006a30:	20000ee8 	.word	0x20000ee8

08006a34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3354      	adds	r3, #84	; 0x54
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f995 	bl	8007d70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d108      	bne.n	8006a62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 f82d 	bl	8007ab4 <vPortFree>
				vPortFree( pxTCB );
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f82a 	bl	8007ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a60:	e018      	b.n	8006a94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d103      	bne.n	8006a74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f821 	bl	8007ab4 <vPortFree>
	}
 8006a72:	e00f      	b.n	8006a94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d00a      	beq.n	8006a94 <prvDeleteTCB+0x60>
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	60fb      	str	r3, [r7, #12]
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <prvDeleteTCB+0x5e>
	}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <prvResetNextTaskUnblockTime+0x40>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <prvResetNextTaskUnblockTime+0x14>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <prvResetNextTaskUnblockTime+0x16>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <prvResetNextTaskUnblockTime+0x44>)
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006abe:	e008      	b.n	8006ad2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <prvResetNextTaskUnblockTime+0x40>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	4a04      	ldr	r2, [pc, #16]	; (8006ae0 <prvResetNextTaskUnblockTime+0x44>)
 8006ad0:	6013      	str	r3, [r2, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	20000eb8 	.word	0x20000eb8
 8006ae0:	20000f20 	.word	0x20000f20

08006ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006aea:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <xTaskGetSchedulerState+0x34>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006af2:	2301      	movs	r3, #1
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	e008      	b.n	8006b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <xTaskGetSchedulerState+0x38>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b00:	2302      	movs	r3, #2
 8006b02:	607b      	str	r3, [r7, #4]
 8006b04:	e001      	b.n	8006b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b0a:	687b      	ldr	r3, [r7, #4]
	}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20000f0c 	.word	0x20000f0c
 8006b1c:	20000f28 	.word	0x20000f28

08006b20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d056      	beq.n	8006be4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <xTaskPriorityInherit+0xd0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d246      	bcs.n	8006bd2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db06      	blt.n	8006b5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <xTaskPriorityInherit+0xd0>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6959      	ldr	r1, [r3, #20]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <xTaskPriorityInherit+0xd4>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	4299      	cmp	r1, r3
 8006b70:	d101      	bne.n	8006b76 <xTaskPriorityInherit+0x56>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xTaskPriorityInherit+0x58>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d022      	beq.n	8006bc2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe f897 	bl	8004cb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b86:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <xTaskPriorityInherit+0xd0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <xTaskPriorityInherit+0xd8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d903      	bls.n	8006ba4 <xTaskPriorityInherit+0x84>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <xTaskPriorityInherit+0xd8>)
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a10      	ldr	r2, [pc, #64]	; (8006bf4 <xTaskPriorityInherit+0xd4>)
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fe f81f 	bl	8004bfe <vListInsertEnd>
 8006bc0:	e004      	b.n	8006bcc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <xTaskPriorityInherit+0xd0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e008      	b.n	8006be4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <xTaskPriorityInherit+0xd0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d201      	bcs.n	8006be4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be4:	68fb      	ldr	r3, [r7, #12]
	}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000a2c 	.word	0x20000a2c
 8006bf4:	20000a30 	.word	0x20000a30
 8006bf8:	20000f08 	.word	0x20000f08

08006bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d056      	beq.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c12:	4b2e      	ldr	r3, [pc, #184]	; (8006ccc <xTaskPriorityDisinherit+0xd0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d00a      	beq.n	8006c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	60fb      	str	r3, [r7, #12]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	1e5a      	subs	r2, r3, #1
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d02c      	beq.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d128      	bne.n	8006cc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe f81e 	bl	8004cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <xTaskPriorityDisinherit+0xd4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d903      	bls.n	8006ca0 <xTaskPriorityDisinherit+0xa4>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <xTaskPriorityDisinherit+0xd4>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <xTaskPriorityDisinherit+0xd8>)
 8006cae:	441a      	add	r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fd ffa1 	bl	8004bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cc0:	697b      	ldr	r3, [r7, #20]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000a2c 	.word	0x20000a2c
 8006cd0:	20000f08 	.word	0x20000f08
 8006cd4:	20000a30 	.word	0x20000a30

08006cd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d06f      	beq.n	8006dd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d902      	bls.n	8006d1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	e002      	b.n	8006d24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	69fa      	ldr	r2, [r7, #28]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d050      	beq.n	8006dd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d14b      	bne.n	8006dd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d38:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d10a      	bne.n	8006d58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	60bb      	str	r3, [r7, #8]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db04      	blt.n	8006d76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	6959      	ldr	r1, [r3, #20]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d86:	4413      	add	r3, r2
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d101      	bne.n	8006d90 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01c      	beq.n	8006dd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd ff8a 	bl	8004cb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b0e      	ldr	r3, [pc, #56]	; (8006de0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d903      	bls.n	8006db4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	4a0b      	ldr	r2, [pc, #44]	; (8006de0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4a06      	ldr	r2, [pc, #24]	; (8006ddc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006dc2:	441a      	add	r2, r3
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f7fd ff17 	bl	8004bfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd0:	bf00      	nop
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000a2c 	.word	0x20000a2c
 8006ddc:	20000a30 	.word	0x20000a30
 8006de0:	20000f08 	.word	0x20000f08

08006de4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006dea:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <uxTaskResetEventItemValue+0x2c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <uxTaskResetEventItemValue+0x2c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <uxTaskResetEventItemValue+0x2c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006e00:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006e02:	687b      	ldr	r3, [r7, #4]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000a2c 	.word	0x20000a2c

08006e14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e26:	3201      	adds	r2, #1
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	; (8006e38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000a2c 	.word	0x20000a2c

08006e3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e46:	4b21      	ldr	r3, [pc, #132]	; (8006ecc <prvAddCurrentTaskToDelayedList+0x90>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e4c:	4b20      	ldr	r3, [pc, #128]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd ff2e 	bl	8004cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d10a      	bne.n	8006e76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e66:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	4819      	ldr	r0, [pc, #100]	; (8006ed4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e70:	f7fd fec5 	bl	8004bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e74:	e026      	b.n	8006ec4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d209      	bcs.n	8006ea2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f7fd fed2 	bl	8004c44 <vListInsert>
}
 8006ea0:	e010      	b.n	8006ec4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ea2:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7fd fec8 	bl	8004c44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006eb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d202      	bcs.n	8006ec4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ebe:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6013      	str	r3, [r2, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000f04 	.word	0x20000f04
 8006ed0:	20000a2c 	.word	0x20000a2c
 8006ed4:	20000eec 	.word	0x20000eec
 8006ed8:	20000ebc 	.word	0x20000ebc
 8006edc:	20000eb8 	.word	0x20000eb8
 8006ee0:	20000f20 	.word	0x20000f20

08006ee4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006eee:	f000 facb 	bl	8007488 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <xTimerCreateTimerTask+0x80>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d021      	beq.n	8006f3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f02:	1d3a      	adds	r2, r7, #4
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	f107 030c 	add.w	r3, r7, #12
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fd fc43 	bl	8004798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	9202      	str	r2, [sp, #8]
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	460a      	mov	r2, r1
 8006f24:	4910      	ldr	r1, [pc, #64]	; (8006f68 <xTimerCreateTimerTask+0x84>)
 8006f26:	4811      	ldr	r0, [pc, #68]	; (8006f6c <xTimerCreateTimerTask+0x88>)
 8006f28:	f7fe fef8 	bl	8005d1c <xTaskCreateStatic>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4a10      	ldr	r2, [pc, #64]	; (8006f70 <xTimerCreateTimerTask+0x8c>)
 8006f30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <xTimerCreateTimerTask+0x8c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	613b      	str	r3, [r7, #16]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f5a:	697b      	ldr	r3, [r7, #20]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000f5c 	.word	0x20000f5c
 8006f68:	08007fdc 	.word	0x08007fdc
 8006f6c:	08007091 	.word	0x08007091
 8006f70:	20000f60 	.word	0x20000f60

08006f74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	623b      	str	r3, [r7, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fa2:	4b1a      	ldr	r3, [pc, #104]	; (800700c <xTimerGenericCommand+0x98>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d02a      	beq.n	8007000 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	dc18      	bgt.n	8006fee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fbc:	f7ff fd92 	bl	8006ae4 <xTaskGetSchedulerState>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d109      	bne.n	8006fda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <xTimerGenericCommand+0x98>)
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f107 0110 	add.w	r1, r7, #16
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd2:	f7fe f843 	bl	800505c <xQueueGenericSend>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fd8:	e012      	b.n	8007000 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006fda:	4b0c      	ldr	r3, [pc, #48]	; (800700c <xTimerGenericCommand+0x98>)
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f107 0110 	add.w	r1, r7, #16
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f7fe f839 	bl	800505c <xQueueGenericSend>
 8006fea:	6278      	str	r0, [r7, #36]	; 0x24
 8006fec:	e008      	b.n	8007000 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <xTimerGenericCommand+0x98>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f107 0110 	add.w	r1, r7, #16
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	f7fe f92d 	bl	8005258 <xQueueGenericSendFromISR>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007002:	4618      	mov	r0, r3
 8007004:	3728      	adds	r7, #40	; 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000f5c 	.word	0x20000f5c

08007010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800701a:	4b1c      	ldr	r3, [pc, #112]	; (800708c <prvProcessExpiredTimer+0x7c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fd fe43 	bl	8004cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d122      	bne.n	800707c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	18d1      	adds	r1, r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	6978      	ldr	r0, [r7, #20]
 8007044:	f000 f8c8 	bl	80071d8 <prvInsertTimerInActiveList>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d016      	beq.n	800707c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800704e:	2300      	movs	r3, #0
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2300      	movs	r3, #0
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	2100      	movs	r1, #0
 8007058:	6978      	ldr	r0, [r7, #20]
 800705a:	f7ff ff8b 	bl	8006f74 <xTimerGenericCommand>
 800705e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60fb      	str	r3, [r7, #12]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	6978      	ldr	r0, [r7, #20]
 8007082:	4798      	blx	r3
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000f54 	.word	0x20000f54

08007090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007098:	f107 0308 	add.w	r3, r7, #8
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f857 	bl	8007150 <prvGetNextExpireTime>
 80070a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4619      	mov	r1, r3
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f803 	bl	80070b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ae:	f000 f8d5 	bl	800725c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070b2:	e7f1      	b.n	8007098 <prvTimerTask+0x8>

080070b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070be:	f7ff f881 	bl	80061c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f866 	bl	8007198 <prvSampleTimeNow>
 80070cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d130      	bne.n	8007136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <prvProcessTimerOrBlockTask+0x3c>
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d806      	bhi.n	80070f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070e2:	f7ff f87d 	bl	80061e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff91 	bl	8007010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070ee:	e024      	b.n	800713a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <prvProcessTimerOrBlockTask+0x90>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf0c      	ite	eq
 8007100:	2301      	moveq	r3, #1
 8007102:	2300      	movne	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <prvProcessTimerOrBlockTask+0x94>)
 800710a:	6818      	ldr	r0, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4619      	mov	r1, r3
 8007116:	f7fe fdcd 	bl	8005cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800711a:	f7ff f861 	bl	80061e0 <xTaskResumeAll>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <prvProcessTimerOrBlockTask+0x98>)
 8007126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	f3bf 8f6f 	isb	sy
}
 8007134:	e001      	b.n	800713a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007136:	f7ff f853 	bl	80061e0 <xTaskResumeAll>
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000f58 	.word	0x20000f58
 8007148:	20000f5c 	.word	0x20000f5c
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007158:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <prvGetNextExpireTime+0x44>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	bf0c      	ite	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	2300      	movne	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007176:	4b07      	ldr	r3, [pc, #28]	; (8007194 <prvGetNextExpireTime+0x44>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e001      	b.n	8007186 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000f54 	.word	0x20000f54

08007198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071a0:	f7ff f8bc 	bl	800631c <xTaskGetTickCount>
 80071a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071a6:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvSampleTimeNow+0x3c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d205      	bcs.n	80071bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071b0:	f000 f908 	bl	80073c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80071c2:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <prvSampleTimeNow+0x3c>)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000f64 	.word	0x20000f64

080071d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d812      	bhi.n	8007224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	1ad2      	subs	r2, r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	e01b      	b.n	800724a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <prvInsertTimerInActiveList+0x7c>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3304      	adds	r3, #4
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7fd fd11 	bl	8004c44 <vListInsert>
 8007222:	e012      	b.n	800724a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d206      	bcs.n	800723a <prvInsertTimerInActiveList+0x62>
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e007      	b.n	800724a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <prvInsertTimerInActiveList+0x80>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fd fcfd 	bl	8004c44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800724a:	697b      	ldr	r3, [r7, #20]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000f58 	.word	0x20000f58
 8007258:	20000f54 	.word	0x20000f54

0800725c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007262:	e09d      	b.n	80073a0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	da18      	bge.n	800729c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800726a:	1d3b      	adds	r3, r7, #4
 800726c:	3304      	adds	r3, #4
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	61fb      	str	r3, [r7, #28]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800728c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007292:	6850      	ldr	r0, [r2, #4]
 8007294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007296:	6892      	ldr	r2, [r2, #8]
 8007298:	4611      	mov	r1, r2
 800729a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	db7d      	blt.n	800739e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	3304      	adds	r3, #4
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fd fcfe 	bl	8004cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072b8:	463b      	mov	r3, r7
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff ff6c 	bl	8007198 <prvSampleTimeNow>
 80072c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b09      	cmp	r3, #9
 80072c6:	d86b      	bhi.n	80073a0 <prvProcessReceivedCommands+0x144>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <prvProcessReceivedCommands+0x74>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	080072f9 	.word	0x080072f9
 80072d4:	080072f9 	.word	0x080072f9
 80072d8:	080072f9 	.word	0x080072f9
 80072dc:	080073a1 	.word	0x080073a1
 80072e0:	08007355 	.word	0x08007355
 80072e4:	0800738d 	.word	0x0800738d
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	080072f9 	.word	0x080072f9
 80072f0:	080073a1 	.word	0x080073a1
 80072f4:	08007355 	.word	0x08007355
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	18d1      	adds	r1, r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007306:	f7ff ff67 	bl	80071d8 <prvInsertTimerInActiveList>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d047      	beq.n	80073a0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d13f      	bne.n	80073a0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	441a      	add	r2, r3
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	2300      	movs	r3, #0
 800732e:	2100      	movs	r1, #0
 8007330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007332:	f7ff fe1f 	bl	8006f74 <xTimerGenericCommand>
 8007336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d130      	bne.n	80073a0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	61bb      	str	r3, [r7, #24]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
}
 8007374:	bf00      	nop
 8007376:	e7fe      	b.n	8007376 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	699a      	ldr	r2, [r3, #24]
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	18d1      	adds	r1, r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007386:	f7ff ff27 	bl	80071d8 <prvInsertTimerInActiveList>
					break;
 800738a:	e009      	b.n	80073a0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d104      	bne.n	80073a0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007398:	f000 fb8c 	bl	8007ab4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800739c:	e000      	b.n	80073a0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800739e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <prvProcessReceivedCommands+0x164>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	1d39      	adds	r1, r7, #4
 80073a6:	2200      	movs	r2, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe f87b 	bl	80054a4 <xQueueReceive>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f af57 	bne.w	8007264 <prvProcessReceivedCommands+0x8>
	}
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	3730      	adds	r7, #48	; 0x30
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000f5c 	.word	0x20000f5c

080073c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ca:	e045      	b.n	8007458 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073cc:	4b2c      	ldr	r3, [pc, #176]	; (8007480 <prvSwitchTimerLists+0xbc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <prvSwitchTimerLists+0xbc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd fc65 	bl	8004cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d12e      	bne.n	8007458 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4413      	add	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	429a      	cmp	r2, r3
 800740a:	d90e      	bls.n	800742a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007418:	4b19      	ldr	r3, [pc, #100]	; (8007480 <prvSwitchTimerLists+0xbc>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f7fd fc0e 	bl	8004c44 <vListInsert>
 8007428:	e016      	b.n	8007458 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800742a:	2300      	movs	r3, #0
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2300      	movs	r3, #0
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	2100      	movs	r1, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fd9d 	bl	8006f74 <xTimerGenericCommand>
 800743a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	603b      	str	r3, [r7, #0]
}
 8007454:	bf00      	nop
 8007456:	e7fe      	b.n	8007456 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <prvSwitchTimerLists+0xbc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1b4      	bne.n	80073cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <prvSwitchTimerLists+0xbc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <prvSwitchTimerLists+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a04      	ldr	r2, [pc, #16]	; (8007480 <prvSwitchTimerLists+0xbc>)
 800746e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007470:	4a04      	ldr	r2, [pc, #16]	; (8007484 <prvSwitchTimerLists+0xc0>)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000f54 	.word	0x20000f54
 8007484:	20000f58 	.word	0x20000f58

08007488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800748e:	f000 f94d 	bl	800772c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <prvCheckForValidListAndQueue+0x60>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d120      	bne.n	80074dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800749a:	4814      	ldr	r0, [pc, #80]	; (80074ec <prvCheckForValidListAndQueue+0x64>)
 800749c:	f7fd fb84 	bl	8004ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074a0:	4813      	ldr	r0, [pc, #76]	; (80074f0 <prvCheckForValidListAndQueue+0x68>)
 80074a2:	f7fd fb81 	bl	8004ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074a6:	4b13      	ldr	r3, [pc, #76]	; (80074f4 <prvCheckForValidListAndQueue+0x6c>)
 80074a8:	4a10      	ldr	r2, [pc, #64]	; (80074ec <prvCheckForValidListAndQueue+0x64>)
 80074aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <prvCheckForValidListAndQueue+0x70>)
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <prvCheckForValidListAndQueue+0x68>)
 80074b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074b2:	2300      	movs	r3, #0
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <prvCheckForValidListAndQueue+0x74>)
 80074b8:	4a11      	ldr	r2, [pc, #68]	; (8007500 <prvCheckForValidListAndQueue+0x78>)
 80074ba:	2110      	movs	r1, #16
 80074bc:	200a      	movs	r0, #10
 80074be:	f7fd fc8b 	bl	8004dd8 <xQueueGenericCreateStatic>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <prvCheckForValidListAndQueue+0x60>)
 80074c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <prvCheckForValidListAndQueue+0x60>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <prvCheckForValidListAndQueue+0x60>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	490b      	ldr	r1, [pc, #44]	; (8007504 <prvCheckForValidListAndQueue+0x7c>)
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fb9a 	bl	8005c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074dc:	f000 f956 	bl	800778c <vPortExitCritical>
}
 80074e0:	bf00      	nop
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000f5c 	.word	0x20000f5c
 80074ec:	20000f2c 	.word	0x20000f2c
 80074f0:	20000f40 	.word	0x20000f40
 80074f4:	20000f54 	.word	0x20000f54
 80074f8:	20000f58 	.word	0x20000f58
 80074fc:	20001008 	.word	0x20001008
 8007500:	20000f68 	.word	0x20000f68
 8007504:	08007fe4 	.word	0x08007fe4

08007508 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08a      	sub	sp, #40	; 0x28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007516:	f06f 0301 	mvn.w	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <xTimerPendFunctionCallFromISR+0x3c>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	f107 0114 	add.w	r1, r7, #20
 8007530:	2300      	movs	r3, #0
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	f7fd fe90 	bl	8005258 <xQueueGenericSendFromISR>
 8007538:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800753c:	4618      	mov	r0, r3
 800753e:	3728      	adds	r7, #40	; 0x28
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000f5c 	.word	0x20000f5c

08007548 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3b04      	subs	r3, #4
 8007558:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b04      	subs	r3, #4
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b04      	subs	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007578:	4a08      	ldr	r2, [pc, #32]	; (800759c <pxPortInitialiseStack+0x54>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3b14      	subs	r3, #20
 8007582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3b20      	subs	r3, #32
 800758e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007590:	68fb      	ldr	r3, [r7, #12]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr
 800759c:	080075a1 	.word	0x080075a1

080075a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <prvTaskExitError+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b2:	d00a      	beq.n	80075ca <prvTaskExitError+0x2a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	60fb      	str	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <prvTaskExitError+0x28>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60bb      	str	r3, [r7, #8]
}
 80075dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075de:	bf00      	nop
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0fc      	beq.n	80075e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	2000003c 	.word	0x2000003c
	...

08007600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007600:	4b07      	ldr	r3, [pc, #28]	; (8007620 <pxCurrentTCBConst2>)
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	6808      	ldr	r0, [r1, #0]
 8007606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800760a:	f380 8809 	msr	PSP, r0
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f380 8811 	msr	BASEPRI, r0
 800761a:	f04e 0e0d 	orr.w	lr, lr, #13
 800761e:	4770      	bx	lr

08007620 <pxCurrentTCBConst2>:
 8007620:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop

08007628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007628:	4806      	ldr	r0, [pc, #24]	; (8007644 <prvPortStartFirstTask+0x1c>)
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f380 8808 	msr	MSP, r0
 8007632:	b662      	cpsie	i
 8007634:	b661      	cpsie	f
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	df00      	svc	0
 8007640:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007642:	bf00      	nop
 8007644:	e000ed08 	.word	0xe000ed08

08007648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800764e:	4b32      	ldr	r3, [pc, #200]	; (8007718 <xPortStartScheduler+0xd0>)
 8007650:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007670:	b2da      	uxtb	r2, r3
 8007672:	4b2a      	ldr	r3, [pc, #168]	; (800771c <xPortStartScheduler+0xd4>)
 8007674:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007676:	4b2a      	ldr	r3, [pc, #168]	; (8007720 <xPortStartScheduler+0xd8>)
 8007678:	2207      	movs	r2, #7
 800767a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800767c:	e009      	b.n	8007692 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800767e:	4b28      	ldr	r3, [pc, #160]	; (8007720 <xPortStartScheduler+0xd8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a26      	ldr	r2, [pc, #152]	; (8007720 <xPortStartScheduler+0xd8>)
 8007686:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	b2db      	uxtb	r3, r3
 8007690:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d0ef      	beq.n	800767e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800769e:	4b20      	ldr	r3, [pc, #128]	; (8007720 <xPortStartScheduler+0xd8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1c3 0307 	rsb	r3, r3, #7
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d00a      	beq.n	80076c0 <xPortStartScheduler+0x78>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60bb      	str	r3, [r7, #8]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <xPortStartScheduler+0xd8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <xPortStartScheduler+0xd8>)
 80076c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <xPortStartScheduler+0xd8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <xPortStartScheduler+0xd8>)
 80076d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <xPortStartScheduler+0xdc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a10      	ldr	r2, [pc, #64]	; (8007724 <xPortStartScheduler+0xdc>)
 80076e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <xPortStartScheduler+0xdc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <xPortStartScheduler+0xdc>)
 80076f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076f6:	f000 f8b9 	bl	800786c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <xPortStartScheduler+0xe0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007700:	f7ff ff92 	bl	8007628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007704:	f7fe fed6 	bl	80064b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007708:	f7ff ff4a 	bl	80075a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	e000e400 	.word	0xe000e400
 800771c:	20001058 	.word	0x20001058
 8007720:	2000105c 	.word	0x2000105c
 8007724:	e000ed20 	.word	0xe000ed20
 8007728:	2000003c 	.word	0x2000003c

0800772c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	607b      	str	r3, [r7, #4]
}
 8007744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <vPortEnterCritical+0x58>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a0d      	ldr	r2, [pc, #52]	; (8007784 <vPortEnterCritical+0x58>)
 800774e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <vPortEnterCritical+0x58>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d10f      	bne.n	8007778 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007758:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <vPortEnterCritical+0x5c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <vPortEnterCritical+0x4c>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	603b      	str	r3, [r7, #0]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vPortEnterCritical+0x4a>
	}
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000003c 	.word	0x2000003c
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007792:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <vPortExitCritical+0x4c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <vPortExitCritical+0x24>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	607b      	str	r3, [r7, #4]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <vPortExitCritical+0x4c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <vPortExitCritical+0x4c>)
 80077b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <vPortExitCritical+0x4c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d105      	bne.n	80077ce <vPortExitCritical+0x42>
 80077c2:	2300      	movs	r3, #0
 80077c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	f383 8811 	msr	BASEPRI, r3
}
 80077cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	2000003c 	.word	0x2000003c
 80077dc:	00000000 	.word	0x00000000

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077f0:	6010      	str	r0, [r2, #0]
 80077f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077fa:	f380 8811 	msr	BASEPRI, r0
 80077fe:	f7fe fe59 	bl	80064b4 <vTaskSwitchContext>
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	6808      	ldr	r0, [r1, #0]
 8007812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007816:	f380 8809 	msr	PSP, r0
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	4770      	bx	lr

08007820 <pxCurrentTCBConst>:
 8007820:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007842:	f7fe fd79 	bl	8006338 <xTaskIncrementTick>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800784c:	4b06      	ldr	r3, [pc, #24]	; (8007868 <SysTick_Handler+0x40>)
 800784e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	2300      	movs	r3, #0
 8007856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f383 8811 	msr	BASEPRI, r3
}
 800785e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <vPortSetupTimerInterrupt+0x30>)
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <vPortSetupTimerInterrupt+0x34>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <vPortSetupTimerInterrupt+0x38>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <vPortSetupTimerInterrupt+0x3c>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	099b      	lsrs	r3, r3, #6
 8007888:	4a08      	ldr	r2, [pc, #32]	; (80078ac <vPortSetupTimerInterrupt+0x40>)
 800788a:	3b01      	subs	r3, #1
 800788c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800788e:	4b03      	ldr	r3, [pc, #12]	; (800789c <vPortSetupTimerInterrupt+0x30>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr
 800789c:	e000e010 	.word	0xe000e010
 80078a0:	e000e018 	.word	0xe000e018
 80078a4:	20000030 	.word	0x20000030
 80078a8:	10624dd3 	.word	0x10624dd3
 80078ac:	e000e014 	.word	0xe000e014

080078b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078b6:	f3ef 8305 	mrs	r3, IPSR
 80078ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d914      	bls.n	80078ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078c2:	4a16      	ldr	r2, [pc, #88]	; (800791c <vPortValidateInterruptPriority+0x6c>)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078cc:	4b14      	ldr	r3, [pc, #80]	; (8007920 <vPortValidateInterruptPriority+0x70>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	7afa      	ldrb	r2, [r7, #11]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d20a      	bcs.n	80078ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	607b      	str	r3, [r7, #4]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <vPortValidateInterruptPriority+0x74>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <vPortValidateInterruptPriority+0x78>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d90a      	bls.n	8007912 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	603b      	str	r3, [r7, #0]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <vPortValidateInterruptPriority+0x60>
	}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	e000e3f0 	.word	0xe000e3f0
 8007920:	20001058 	.word	0x20001058
 8007924:	e000ed0c 	.word	0xe000ed0c
 8007928:	2000105c 	.word	0x2000105c

0800792c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007938:	f7fe fc44 	bl	80061c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800793c:	4b58      	ldr	r3, [pc, #352]	; (8007aa0 <pvPortMalloc+0x174>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007944:	f000 f910 	bl	8007b68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007948:	4b56      	ldr	r3, [pc, #344]	; (8007aa4 <pvPortMalloc+0x178>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 808e 	bne.w	8007a72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01d      	beq.n	8007998 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800795c:	2208      	movs	r2, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4413      	add	r3, r2
 8007962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	2b00      	cmp	r3, #0
 800796c:	d014      	beq.n	8007998 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f023 0307 	bic.w	r3, r3, #7
 8007974:	3308      	adds	r3, #8
 8007976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <pvPortMalloc+0x6c>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	617b      	str	r3, [r7, #20]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d069      	beq.n	8007a72 <pvPortMalloc+0x146>
 800799e:	4b42      	ldr	r3, [pc, #264]	; (8007aa8 <pvPortMalloc+0x17c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d864      	bhi.n	8007a72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079a8:	4b40      	ldr	r3, [pc, #256]	; (8007aac <pvPortMalloc+0x180>)
 80079aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079ac:	4b3f      	ldr	r3, [pc, #252]	; (8007aac <pvPortMalloc+0x180>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079b2:	e004      	b.n	80079be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d903      	bls.n	80079d0 <pvPortMalloc+0xa4>
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f1      	bne.n	80079b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079d0:	4b33      	ldr	r3, [pc, #204]	; (8007aa0 <pvPortMalloc+0x174>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d04b      	beq.n	8007a72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2208      	movs	r2, #8
 80079e0:	4413      	add	r3, r2
 80079e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	2308      	movs	r3, #8
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d91f      	bls.n	8007a3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <pvPortMalloc+0xf8>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	613b      	str	r3, [r7, #16]
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a36:	69b8      	ldr	r0, [r7, #24]
 8007a38:	f000 f8f8 	bl	8007c2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <pvPortMalloc+0x17c>)
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	4a18      	ldr	r2, [pc, #96]	; (8007aa8 <pvPortMalloc+0x17c>)
 8007a48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a4a:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <pvPortMalloc+0x17c>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <pvPortMalloc+0x184>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d203      	bcs.n	8007a5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <pvPortMalloc+0x17c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <pvPortMalloc+0x184>)
 8007a5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <pvPortMalloc+0x178>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a72:	f7fe fbb5 	bl	80061e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <pvPortMalloc+0x16a>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60fb      	str	r3, [r7, #12]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <pvPortMalloc+0x168>
	return pvReturn;
 8007a96:	69fb      	ldr	r3, [r7, #28]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20003068 	.word	0x20003068
 8007aa4:	20003074 	.word	0x20003074
 8007aa8:	2000306c 	.word	0x2000306c
 8007aac:	20003060 	.word	0x20003060
 8007ab0:	20003070 	.word	0x20003070

08007ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d048      	beq.n	8007b58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	425b      	negs	r3, r3
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	4413      	add	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4b21      	ldr	r3, [pc, #132]	; (8007b60 <vPortFree+0xac>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4013      	ands	r3, r2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortFree+0x44>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00a      	beq.n	8007b16 <vPortFree+0x62>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60bb      	str	r3, [r7, #8]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <vPortFree+0xac>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d019      	beq.n	8007b58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d115      	bne.n	8007b58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <vPortFree+0xac>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	43db      	mvns	r3, r3
 8007b36:	401a      	ands	r2, r3
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b3c:	f7fe fb42 	bl	80061c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <vPortFree+0xb0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4413      	add	r3, r2
 8007b4a:	4a06      	ldr	r2, [pc, #24]	; (8007b64 <vPortFree+0xb0>)
 8007b4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f000 f86c 	bl	8007c2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b54:	f7fe fb44 	bl	80061e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b58:	bf00      	nop
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20003074 	.word	0x20003074
 8007b64:	2000306c 	.word	0x2000306c

08007b68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b74:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <prvHeapInit+0xac>)
 8007b76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3307      	adds	r3, #7
 8007b86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <prvHeapInit+0xac>)
 8007b98:	4413      	add	r3, r2
 8007b9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <prvHeapInit+0xb0>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ba6:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <prvHeapInit+0xb0>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0307 	bic.w	r3, r3, #7
 8007bc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a15      	ldr	r2, [pc, #84]	; (8007c1c <prvHeapInit+0xb4>)
 8007bc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bca:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <prvHeapInit+0xb4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <prvHeapInit+0xb4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <prvHeapInit+0xb4>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <prvHeapInit+0xb8>)
 8007bf6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <prvHeapInit+0xbc>)
 8007bfe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c00:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <prvHeapInit+0xc0>)
 8007c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c06:	601a      	str	r2, [r3, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	20001060 	.word	0x20001060
 8007c18:	20003060 	.word	0x20003060
 8007c1c:	20003068 	.word	0x20003068
 8007c20:	20003070 	.word	0x20003070
 8007c24:	2000306c 	.word	0x2000306c
 8007c28:	20003074 	.word	0x20003074

08007c2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c34:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <prvInsertBlockIntoFreeList+0xa8>)
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e002      	b.n	8007c40 <prvInsertBlockIntoFreeList+0x14>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d8f7      	bhi.n	8007c3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	4413      	add	r3, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d108      	bne.n	8007c6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	441a      	add	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d118      	bne.n	8007cb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <prvInsertBlockIntoFreeList+0xac>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d00d      	beq.n	8007caa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	441a      	add	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	e008      	b.n	8007cbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007caa:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <prvInsertBlockIntoFreeList+0xac>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	e003      	b.n	8007cbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d002      	beq.n	8007cca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr
 8007cd4:	20003060 	.word	0x20003060
 8007cd8:	20003068 	.word	0x20003068

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	2600      	movs	r6, #0
 8007ce0:	4d0c      	ldr	r5, [pc, #48]	; (8007d14 <__libc_init_array+0x38>)
 8007ce2:	4c0d      	ldr	r4, [pc, #52]	; (8007d18 <__libc_init_array+0x3c>)
 8007ce4:	1b64      	subs	r4, r4, r5
 8007ce6:	10a4      	asrs	r4, r4, #2
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	f000 f8f0 	bl	8007ed0 <_init>
 8007cf0:	2600      	movs	r6, #0
 8007cf2:	4d0a      	ldr	r5, [pc, #40]	; (8007d1c <__libc_init_array+0x40>)
 8007cf4:	4c0a      	ldr	r4, [pc, #40]	; (8007d20 <__libc_init_array+0x44>)
 8007cf6:	1b64      	subs	r4, r4, r5
 8007cf8:	10a4      	asrs	r4, r4, #2
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	08008208 	.word	0x08008208
 8007d18:	08008208 	.word	0x08008208
 8007d1c:	08008208 	.word	0x08008208
 8007d20:	0800820c 	.word	0x0800820c

08007d24 <__retarget_lock_acquire_recursive>:
 8007d24:	4770      	bx	lr

08007d26 <__retarget_lock_release_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <memcpy>:
 8007d28:	440a      	add	r2, r1
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d30:	d100      	bne.n	8007d34 <memcpy+0xc>
 8007d32:	4770      	bx	lr
 8007d34:	b510      	push	{r4, lr}
 8007d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3a:	4291      	cmp	r1, r2
 8007d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d40:	d1f9      	bne.n	8007d36 <memcpy+0xe>
 8007d42:	bd10      	pop	{r4, pc}

08007d44 <memset>:
 8007d44:	4603      	mov	r3, r0
 8007d46:	4402      	add	r2, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d100      	bne.n	8007d4e <memset+0xa>
 8007d4c:	4770      	bx	lr
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d52:	e7f9      	b.n	8007d48 <memset+0x4>

08007d54 <cleanup_glue>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	460c      	mov	r4, r1
 8007d58:	6809      	ldr	r1, [r1, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	b109      	cbz	r1, 8007d62 <cleanup_glue+0xe>
 8007d5e:	f7ff fff9 	bl	8007d54 <cleanup_glue>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d6a:	f000 b869 	b.w	8007e40 <_free_r>
	...

08007d70 <_reclaim_reent>:
 8007d70:	4b2c      	ldr	r3, [pc, #176]	; (8007e24 <_reclaim_reent+0xb4>)
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4604      	mov	r4, r0
 8007d78:	4283      	cmp	r3, r0
 8007d7a:	d051      	beq.n	8007e20 <_reclaim_reent+0xb0>
 8007d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d7e:	b143      	cbz	r3, 8007d92 <_reclaim_reent+0x22>
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d14a      	bne.n	8007e1c <_reclaim_reent+0xac>
 8007d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	b111      	cbz	r1, 8007d92 <_reclaim_reent+0x22>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 f857 	bl	8007e40 <_free_r>
 8007d92:	6961      	ldr	r1, [r4, #20]
 8007d94:	b111      	cbz	r1, 8007d9c <_reclaim_reent+0x2c>
 8007d96:	4620      	mov	r0, r4
 8007d98:	f000 f852 	bl	8007e40 <_free_r>
 8007d9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d9e:	b111      	cbz	r1, 8007da6 <_reclaim_reent+0x36>
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 f84d 	bl	8007e40 <_free_r>
 8007da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007da8:	b111      	cbz	r1, 8007db0 <_reclaim_reent+0x40>
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f848 	bl	8007e40 <_free_r>
 8007db0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007db2:	b111      	cbz	r1, 8007dba <_reclaim_reent+0x4a>
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 f843 	bl	8007e40 <_free_r>
 8007dba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007dbc:	b111      	cbz	r1, 8007dc4 <_reclaim_reent+0x54>
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 f83e 	bl	8007e40 <_free_r>
 8007dc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007dc6:	b111      	cbz	r1, 8007dce <_reclaim_reent+0x5e>
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 f839 	bl	8007e40 <_free_r>
 8007dce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007dd0:	b111      	cbz	r1, 8007dd8 <_reclaim_reent+0x68>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 f834 	bl	8007e40 <_free_r>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dda:	b111      	cbz	r1, 8007de2 <_reclaim_reent+0x72>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 f82f 	bl	8007e40 <_free_r>
 8007de2:	69a3      	ldr	r3, [r4, #24]
 8007de4:	b1e3      	cbz	r3, 8007e20 <_reclaim_reent+0xb0>
 8007de6:	4620      	mov	r0, r4
 8007de8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dea:	4798      	blx	r3
 8007dec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dee:	b1b9      	cbz	r1, 8007e20 <_reclaim_reent+0xb0>
 8007df0:	4620      	mov	r0, r4
 8007df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007df6:	f7ff bfad 	b.w	8007d54 <cleanup_glue>
 8007dfa:	5949      	ldr	r1, [r1, r5]
 8007dfc:	b941      	cbnz	r1, 8007e10 <_reclaim_reent+0xa0>
 8007dfe:	3504      	adds	r5, #4
 8007e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e02:	2d80      	cmp	r5, #128	; 0x80
 8007e04:	68d9      	ldr	r1, [r3, #12]
 8007e06:	d1f8      	bne.n	8007dfa <_reclaim_reent+0x8a>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 f819 	bl	8007e40 <_free_r>
 8007e0e:	e7ba      	b.n	8007d86 <_reclaim_reent+0x16>
 8007e10:	680e      	ldr	r6, [r1, #0]
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f814 	bl	8007e40 <_free_r>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	e7ef      	b.n	8007dfc <_reclaim_reent+0x8c>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	e7ef      	b.n	8007e00 <_reclaim_reent+0x90>
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	bf00      	nop
 8007e24:	20000040 	.word	0x20000040

08007e28 <__malloc_lock>:
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <__malloc_lock+0x8>)
 8007e2a:	f7ff bf7b 	b.w	8007d24 <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	20003078 	.word	0x20003078

08007e34 <__malloc_unlock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_unlock+0x8>)
 8007e36:	f7ff bf76 	b.w	8007d26 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20003078 	.word	0x20003078

08007e40 <_free_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4605      	mov	r5, r0
 8007e44:	2900      	cmp	r1, #0
 8007e46:	d040      	beq.n	8007eca <_free_r+0x8a>
 8007e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e4c:	1f0c      	subs	r4, r1, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bfb8      	it	lt
 8007e52:	18e4      	addlt	r4, r4, r3
 8007e54:	f7ff ffe8 	bl	8007e28 <__malloc_lock>
 8007e58:	4a1c      	ldr	r2, [pc, #112]	; (8007ecc <_free_r+0x8c>)
 8007e5a:	6813      	ldr	r3, [r2, #0]
 8007e5c:	b933      	cbnz	r3, 8007e6c <_free_r+0x2c>
 8007e5e:	6063      	str	r3, [r4, #4]
 8007e60:	6014      	str	r4, [r2, #0]
 8007e62:	4628      	mov	r0, r5
 8007e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e68:	f7ff bfe4 	b.w	8007e34 <__malloc_unlock>
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	d908      	bls.n	8007e82 <_free_r+0x42>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	1821      	adds	r1, r4, r0
 8007e74:	428b      	cmp	r3, r1
 8007e76:	bf01      	itttt	eq
 8007e78:	6819      	ldreq	r1, [r3, #0]
 8007e7a:	685b      	ldreq	r3, [r3, #4]
 8007e7c:	1809      	addeq	r1, r1, r0
 8007e7e:	6021      	streq	r1, [r4, #0]
 8007e80:	e7ed      	b.n	8007e5e <_free_r+0x1e>
 8007e82:	461a      	mov	r2, r3
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	b10b      	cbz	r3, 8007e8c <_free_r+0x4c>
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d9fa      	bls.n	8007e82 <_free_r+0x42>
 8007e8c:	6811      	ldr	r1, [r2, #0]
 8007e8e:	1850      	adds	r0, r2, r1
 8007e90:	42a0      	cmp	r0, r4
 8007e92:	d10b      	bne.n	8007eac <_free_r+0x6c>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	4401      	add	r1, r0
 8007e98:	1850      	adds	r0, r2, r1
 8007e9a:	4283      	cmp	r3, r0
 8007e9c:	6011      	str	r1, [r2, #0]
 8007e9e:	d1e0      	bne.n	8007e62 <_free_r+0x22>
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4401      	add	r1, r0
 8007ea6:	6011      	str	r1, [r2, #0]
 8007ea8:	6053      	str	r3, [r2, #4]
 8007eaa:	e7da      	b.n	8007e62 <_free_r+0x22>
 8007eac:	d902      	bls.n	8007eb4 <_free_r+0x74>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	602b      	str	r3, [r5, #0]
 8007eb2:	e7d6      	b.n	8007e62 <_free_r+0x22>
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	1821      	adds	r1, r4, r0
 8007eb8:	428b      	cmp	r3, r1
 8007eba:	bf01      	itttt	eq
 8007ebc:	6819      	ldreq	r1, [r3, #0]
 8007ebe:	685b      	ldreq	r3, [r3, #4]
 8007ec0:	1809      	addeq	r1, r1, r0
 8007ec2:	6021      	streq	r1, [r4, #0]
 8007ec4:	6063      	str	r3, [r4, #4]
 8007ec6:	6054      	str	r4, [r2, #4]
 8007ec8:	e7cb      	b.n	8007e62 <_free_r+0x22>
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	2000307c 	.word	0x2000307c

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
