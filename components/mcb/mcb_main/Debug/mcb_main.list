
mcb_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008330  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08008520  08008520  00018520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087e0  080087e0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080087e0  080087e0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087e0  080087e0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087e0  080087e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087e4  080087e4  000187e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080087e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fbc  200000a4  0800888c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005060  0800888c  00025060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024066  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004875  00000000  00000000  00044133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  000489a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  00049f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5af  00000000  00000000  0004b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aac4  00000000  00000000  00068857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a851f  00000000  00000000  0008331b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b83a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  0012b890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000a4 	.word	0x200000a4
 800020c:	00000000 	.word	0x00000000
 8000210:	08008508 	.word	0x08008508

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a8 	.word	0x200000a8
 800022c:	08008508 	.word	0x08008508

08000230 <__aeabi_frsub>:
 8000230:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__addsf3>
 8000236:	bf00      	nop

08000238 <__aeabi_fsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800023c <__addsf3>:
 800023c:	0042      	lsls	r2, r0, #1
 800023e:	bf1f      	itttt	ne
 8000240:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000244:	ea92 0f03 	teqne	r2, r3
 8000248:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800024c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000250:	d06a      	beq.n	8000328 <__addsf3+0xec>
 8000252:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000256:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025a:	bfc1      	itttt	gt
 800025c:	18d2      	addgt	r2, r2, r3
 800025e:	4041      	eorgt	r1, r0
 8000260:	4048      	eorgt	r0, r1
 8000262:	4041      	eorgt	r1, r0
 8000264:	bfb8      	it	lt
 8000266:	425b      	neglt	r3, r3
 8000268:	2b19      	cmp	r3, #25
 800026a:	bf88      	it	hi
 800026c:	4770      	bxhi	lr
 800026e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000272:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000276:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027a:	bf18      	it	ne
 800027c:	4240      	negne	r0, r0
 800027e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000282:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000286:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028a:	bf18      	it	ne
 800028c:	4249      	negne	r1, r1
 800028e:	ea92 0f03 	teq	r2, r3
 8000292:	d03f      	beq.n	8000314 <__addsf3+0xd8>
 8000294:	f1a2 0201 	sub.w	r2, r2, #1
 8000298:	fa41 fc03 	asr.w	ip, r1, r3
 800029c:	eb10 000c 	adds.w	r0, r0, ip
 80002a0:	f1c3 0320 	rsb	r3, r3, #32
 80002a4:	fa01 f103 	lsl.w	r1, r1, r3
 80002a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ac:	d502      	bpl.n	80002b4 <__addsf3+0x78>
 80002ae:	4249      	negs	r1, r1
 80002b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002b8:	d313      	bcc.n	80002e2 <__addsf3+0xa6>
 80002ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002be:	d306      	bcc.n	80002ce <__addsf3+0x92>
 80002c0:	0840      	lsrs	r0, r0, #1
 80002c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002c6:	f102 0201 	add.w	r2, r2, #1
 80002ca:	2afe      	cmp	r2, #254	; 0xfe
 80002cc:	d251      	bcs.n	8000372 <__addsf3+0x136>
 80002ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002d6:	bf08      	it	eq
 80002d8:	f020 0001 	biceq.w	r0, r0, #1
 80002dc:	ea40 0003 	orr.w	r0, r0, r3
 80002e0:	4770      	bx	lr
 80002e2:	0049      	lsls	r1, r1, #1
 80002e4:	eb40 0000 	adc.w	r0, r0, r0
 80002e8:	3a01      	subs	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f0:	d2ed      	bcs.n	80002ce <__addsf3+0x92>
 80002f2:	fab0 fc80 	clz	ip, r0
 80002f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fa:	ebb2 020c 	subs.w	r2, r2, ip
 80002fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000302:	bfaa      	itet	ge
 8000304:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000308:	4252      	neglt	r2, r2
 800030a:	4318      	orrge	r0, r3
 800030c:	bfbc      	itt	lt
 800030e:	40d0      	lsrlt	r0, r2
 8000310:	4318      	orrlt	r0, r3
 8000312:	4770      	bx	lr
 8000314:	f092 0f00 	teq	r2, #0
 8000318:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800031c:	bf06      	itte	eq
 800031e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000322:	3201      	addeq	r2, #1
 8000324:	3b01      	subne	r3, #1
 8000326:	e7b5      	b.n	8000294 <__addsf3+0x58>
 8000328:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800032c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000330:	bf18      	it	ne
 8000332:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000336:	d021      	beq.n	800037c <__addsf3+0x140>
 8000338:	ea92 0f03 	teq	r2, r3
 800033c:	d004      	beq.n	8000348 <__addsf3+0x10c>
 800033e:	f092 0f00 	teq	r2, #0
 8000342:	bf08      	it	eq
 8000344:	4608      	moveq	r0, r1
 8000346:	4770      	bx	lr
 8000348:	ea90 0f01 	teq	r0, r1
 800034c:	bf1c      	itt	ne
 800034e:	2000      	movne	r0, #0
 8000350:	4770      	bxne	lr
 8000352:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000356:	d104      	bne.n	8000362 <__addsf3+0x126>
 8000358:	0040      	lsls	r0, r0, #1
 800035a:	bf28      	it	cs
 800035c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000360:	4770      	bx	lr
 8000362:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000366:	bf3c      	itt	cc
 8000368:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800036c:	4770      	bxcc	lr
 800036e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000372:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000376:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037a:	4770      	bx	lr
 800037c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000380:	bf16      	itet	ne
 8000382:	4608      	movne	r0, r1
 8000384:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000388:	4601      	movne	r1, r0
 800038a:	0242      	lsls	r2, r0, #9
 800038c:	bf06      	itte	eq
 800038e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000392:	ea90 0f01 	teqeq	r0, r1
 8000396:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039a:	4770      	bx	lr

0800039c <__aeabi_ui2f>:
 800039c:	f04f 0300 	mov.w	r3, #0
 80003a0:	e004      	b.n	80003ac <__aeabi_i2f+0x8>
 80003a2:	bf00      	nop

080003a4 <__aeabi_i2f>:
 80003a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003a8:	bf48      	it	mi
 80003aa:	4240      	negmi	r0, r0
 80003ac:	ea5f 0c00 	movs.w	ip, r0
 80003b0:	bf08      	it	eq
 80003b2:	4770      	bxeq	lr
 80003b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003b8:	4601      	mov	r1, r0
 80003ba:	f04f 0000 	mov.w	r0, #0
 80003be:	e01c      	b.n	80003fa <__aeabi_l2f+0x2a>

080003c0 <__aeabi_ul2f>:
 80003c0:	ea50 0201 	orrs.w	r2, r0, r1
 80003c4:	bf08      	it	eq
 80003c6:	4770      	bxeq	lr
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e00a      	b.n	80003e4 <__aeabi_l2f+0x14>
 80003ce:	bf00      	nop

080003d0 <__aeabi_l2f>:
 80003d0:	ea50 0201 	orrs.w	r2, r0, r1
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003dc:	d502      	bpl.n	80003e4 <__aeabi_l2f+0x14>
 80003de:	4240      	negs	r0, r0
 80003e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e4:	ea5f 0c01 	movs.w	ip, r1
 80003e8:	bf02      	ittt	eq
 80003ea:	4684      	moveq	ip, r0
 80003ec:	4601      	moveq	r1, r0
 80003ee:	2000      	moveq	r0, #0
 80003f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f4:	bf08      	it	eq
 80003f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003fe:	fabc f28c 	clz	r2, ip
 8000402:	3a08      	subs	r2, #8
 8000404:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000408:	db10      	blt.n	800042c <__aeabi_l2f+0x5c>
 800040a:	fa01 fc02 	lsl.w	ip, r1, r2
 800040e:	4463      	add	r3, ip
 8000410:	fa00 fc02 	lsl.w	ip, r0, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	fa20 f202 	lsr.w	r2, r0, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	f020 0001 	biceq.w	r0, r0, #1
 800042a:	4770      	bx	lr
 800042c:	f102 0220 	add.w	r2, r2, #32
 8000430:	fa01 fc02 	lsl.w	ip, r1, r2
 8000434:	f1c2 0220 	rsb	r2, r2, #32
 8000438:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800043c:	fa21 f202 	lsr.w	r2, r1, r2
 8000440:	eb43 0002 	adc.w	r0, r3, r2
 8000444:	bf08      	it	eq
 8000446:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044a:	4770      	bx	lr

0800044c <__aeabi_fmul>:
 800044c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000450:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000454:	bf1e      	ittt	ne
 8000456:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045a:	ea92 0f0c 	teqne	r2, ip
 800045e:	ea93 0f0c 	teqne	r3, ip
 8000462:	d06f      	beq.n	8000544 <__aeabi_fmul+0xf8>
 8000464:	441a      	add	r2, r3
 8000466:	ea80 0c01 	eor.w	ip, r0, r1
 800046a:	0240      	lsls	r0, r0, #9
 800046c:	bf18      	it	ne
 800046e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000472:	d01e      	beq.n	80004b2 <__aeabi_fmul+0x66>
 8000474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000478:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800047c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000480:	fba0 3101 	umull	r3, r1, r0, r1
 8000484:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000488:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800048c:	bf3e      	ittt	cc
 800048e:	0049      	lslcc	r1, r1, #1
 8000490:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000494:	005b      	lslcc	r3, r3, #1
 8000496:	ea40 0001 	orr.w	r0, r0, r1
 800049a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800049e:	2afd      	cmp	r2, #253	; 0xfd
 80004a0:	d81d      	bhi.n	80004de <__aeabi_fmul+0x92>
 80004a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004aa:	bf08      	it	eq
 80004ac:	f020 0001 	biceq.w	r0, r0, #1
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ba:	bf08      	it	eq
 80004bc:	0249      	lsleq	r1, r1, #9
 80004be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004c6:	3a7f      	subs	r2, #127	; 0x7f
 80004c8:	bfc2      	ittt	gt
 80004ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d2:	4770      	bxgt	lr
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	3a01      	subs	r2, #1
 80004de:	dc5d      	bgt.n	800059c <__aeabi_fmul+0x150>
 80004e0:	f112 0f19 	cmn.w	r2, #25
 80004e4:	bfdc      	itt	le
 80004e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ea:	4770      	bxle	lr
 80004ec:	f1c2 0200 	rsb	r2, r2, #0
 80004f0:	0041      	lsls	r1, r0, #1
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	f1c2 0220 	rsb	r2, r2, #32
 80004fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000502:	f140 0000 	adc.w	r0, r0, #0
 8000506:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050a:	bf08      	it	eq
 800050c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000510:	4770      	bx	lr
 8000512:	f092 0f00 	teq	r2, #0
 8000516:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051a:	bf02      	ittt	eq
 800051c:	0040      	lsleq	r0, r0, #1
 800051e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000522:	3a01      	subeq	r2, #1
 8000524:	d0f9      	beq.n	800051a <__aeabi_fmul+0xce>
 8000526:	ea40 000c 	orr.w	r0, r0, ip
 800052a:	f093 0f00 	teq	r3, #0
 800052e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000532:	bf02      	ittt	eq
 8000534:	0049      	lsleq	r1, r1, #1
 8000536:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053a:	3b01      	subeq	r3, #1
 800053c:	d0f9      	beq.n	8000532 <__aeabi_fmul+0xe6>
 800053e:	ea41 010c 	orr.w	r1, r1, ip
 8000542:	e78f      	b.n	8000464 <__aeabi_fmul+0x18>
 8000544:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000548:	ea92 0f0c 	teq	r2, ip
 800054c:	bf18      	it	ne
 800054e:	ea93 0f0c 	teqne	r3, ip
 8000552:	d00a      	beq.n	800056a <__aeabi_fmul+0x11e>
 8000554:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000558:	bf18      	it	ne
 800055a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800055e:	d1d8      	bne.n	8000512 <__aeabi_fmul+0xc6>
 8000560:	ea80 0001 	eor.w	r0, r0, r1
 8000564:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000568:	4770      	bx	lr
 800056a:	f090 0f00 	teq	r0, #0
 800056e:	bf17      	itett	ne
 8000570:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000574:	4608      	moveq	r0, r1
 8000576:	f091 0f00 	teqne	r1, #0
 800057a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800057e:	d014      	beq.n	80005aa <__aeabi_fmul+0x15e>
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d101      	bne.n	800058a <__aeabi_fmul+0x13e>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	d10f      	bne.n	80005aa <__aeabi_fmul+0x15e>
 800058a:	ea93 0f0c 	teq	r3, ip
 800058e:	d103      	bne.n	8000598 <__aeabi_fmul+0x14c>
 8000590:	024b      	lsls	r3, r1, #9
 8000592:	bf18      	it	ne
 8000594:	4608      	movne	r0, r1
 8000596:	d108      	bne.n	80005aa <__aeabi_fmul+0x15e>
 8000598:	ea80 0001 	eor.w	r0, r0, r1
 800059c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a8:	4770      	bx	lr
 80005aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b2:	4770      	bx	lr

080005b4 <__aeabi_fdiv>:
 80005b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005bc:	bf1e      	ittt	ne
 80005be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c2:	ea92 0f0c 	teqne	r2, ip
 80005c6:	ea93 0f0c 	teqne	r3, ip
 80005ca:	d069      	beq.n	80006a0 <__aeabi_fdiv+0xec>
 80005cc:	eba2 0203 	sub.w	r2, r2, r3
 80005d0:	ea80 0c01 	eor.w	ip, r0, r1
 80005d4:	0249      	lsls	r1, r1, #9
 80005d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005da:	d037      	beq.n	800064c <__aeabi_fdiv+0x98>
 80005dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005ec:	428b      	cmp	r3, r1
 80005ee:	bf38      	it	cc
 80005f0:	005b      	lslcc	r3, r3, #1
 80005f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fa:	428b      	cmp	r3, r1
 80005fc:	bf24      	itt	cs
 80005fe:	1a5b      	subcs	r3, r3, r1
 8000600:	ea40 000c 	orrcs.w	r0, r0, ip
 8000604:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000608:	bf24      	itt	cs
 800060a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800060e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000612:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000616:	bf24      	itt	cs
 8000618:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800061c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000620:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000624:	bf24      	itt	cs
 8000626:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800062e:	011b      	lsls	r3, r3, #4
 8000630:	bf18      	it	ne
 8000632:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000636:	d1e0      	bne.n	80005fa <__aeabi_fdiv+0x46>
 8000638:	2afd      	cmp	r2, #253	; 0xfd
 800063a:	f63f af50 	bhi.w	80004de <__aeabi_fmul+0x92>
 800063e:	428b      	cmp	r3, r1
 8000640:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000644:	bf08      	it	eq
 8000646:	f020 0001 	biceq.w	r0, r0, #1
 800064a:	4770      	bx	lr
 800064c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000650:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000654:	327f      	adds	r2, #127	; 0x7f
 8000656:	bfc2      	ittt	gt
 8000658:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800065c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000660:	4770      	bxgt	lr
 8000662:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000666:	f04f 0300 	mov.w	r3, #0
 800066a:	3a01      	subs	r2, #1
 800066c:	e737      	b.n	80004de <__aeabi_fmul+0x92>
 800066e:	f092 0f00 	teq	r2, #0
 8000672:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0040      	lsleq	r0, r0, #1
 800067a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800067e:	3a01      	subeq	r2, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fdiv+0xc2>
 8000682:	ea40 000c 	orr.w	r0, r0, ip
 8000686:	f093 0f00 	teq	r3, #0
 800068a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800068e:	bf02      	ittt	eq
 8000690:	0049      	lsleq	r1, r1, #1
 8000692:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000696:	3b01      	subeq	r3, #1
 8000698:	d0f9      	beq.n	800068e <__aeabi_fdiv+0xda>
 800069a:	ea41 010c 	orr.w	r1, r1, ip
 800069e:	e795      	b.n	80005cc <__aeabi_fdiv+0x18>
 80006a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a4:	ea92 0f0c 	teq	r2, ip
 80006a8:	d108      	bne.n	80006bc <__aeabi_fdiv+0x108>
 80006aa:	0242      	lsls	r2, r0, #9
 80006ac:	f47f af7d 	bne.w	80005aa <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	f47f af70 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006b8:	4608      	mov	r0, r1
 80006ba:	e776      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006bc:	ea93 0f0c 	teq	r3, ip
 80006c0:	d104      	bne.n	80006cc <__aeabi_fdiv+0x118>
 80006c2:	024b      	lsls	r3, r1, #9
 80006c4:	f43f af4c 	beq.w	8000560 <__aeabi_fmul+0x114>
 80006c8:	4608      	mov	r0, r1
 80006ca:	e76e      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d0:	bf18      	it	ne
 80006d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006d6:	d1ca      	bne.n	800066e <__aeabi_fdiv+0xba>
 80006d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006dc:	f47f af5c 	bne.w	8000598 <__aeabi_fmul+0x14c>
 80006e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e4:	f47f af3c 	bne.w	8000560 <__aeabi_fmul+0x114>
 80006e8:	e75f      	b.n	80005aa <__aeabi_fmul+0x15e>
 80006ea:	bf00      	nop

080006ec <__gesf2>:
 80006ec:	f04f 3cff 	mov.w	ip, #4294967295
 80006f0:	e006      	b.n	8000700 <__cmpsf2+0x4>
 80006f2:	bf00      	nop

080006f4 <__lesf2>:
 80006f4:	f04f 0c01 	mov.w	ip, #1
 80006f8:	e002      	b.n	8000700 <__cmpsf2+0x4>
 80006fa:	bf00      	nop

080006fc <__cmpsf2>:
 80006fc:	f04f 0c01 	mov.w	ip, #1
 8000700:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d011      	beq.n	800073c <__cmpsf2+0x40>
 8000718:	b001      	add	sp, #4
 800071a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800071e:	bf18      	it	ne
 8000720:	ea90 0f01 	teqne	r0, r1
 8000724:	bf58      	it	pl
 8000726:	ebb2 0003 	subspl.w	r0, r2, r3
 800072a:	bf88      	it	hi
 800072c:	17c8      	asrhi	r0, r1, #31
 800072e:	bf38      	it	cc
 8000730:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000734:	bf18      	it	ne
 8000736:	f040 0001 	orrne.w	r0, r0, #1
 800073a:	4770      	bx	lr
 800073c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000740:	d102      	bne.n	8000748 <__cmpsf2+0x4c>
 8000742:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000746:	d105      	bne.n	8000754 <__cmpsf2+0x58>
 8000748:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800074c:	d1e4      	bne.n	8000718 <__cmpsf2+0x1c>
 800074e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000752:	d0e1      	beq.n	8000718 <__cmpsf2+0x1c>
 8000754:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop

0800075c <__aeabi_cfrcmple>:
 800075c:	4684      	mov	ip, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4661      	mov	r1, ip
 8000762:	e7ff      	b.n	8000764 <__aeabi_cfcmpeq>

08000764 <__aeabi_cfcmpeq>:
 8000764:	b50f      	push	{r0, r1, r2, r3, lr}
 8000766:	f7ff ffc9 	bl	80006fc <__cmpsf2>
 800076a:	2800      	cmp	r0, #0
 800076c:	bf48      	it	mi
 800076e:	f110 0f00 	cmnmi.w	r0, #0
 8000772:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000774 <__aeabi_fcmpeq>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff fff4 	bl	8000764 <__aeabi_cfcmpeq>
 800077c:	bf0c      	ite	eq
 800077e:	2001      	moveq	r0, #1
 8000780:	2000      	movne	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_fcmplt>:
 8000788:	f84d ed08 	str.w	lr, [sp, #-8]!
 800078c:	f7ff ffea 	bl	8000764 <__aeabi_cfcmpeq>
 8000790:	bf34      	ite	cc
 8000792:	2001      	movcc	r0, #1
 8000794:	2000      	movcs	r0, #0
 8000796:	f85d fb08 	ldr.w	pc, [sp], #8
 800079a:	bf00      	nop

0800079c <__aeabi_fcmple>:
 800079c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a0:	f7ff ffe0 	bl	8000764 <__aeabi_cfcmpeq>
 80007a4:	bf94      	ite	ls
 80007a6:	2001      	movls	r0, #1
 80007a8:	2000      	movhi	r0, #0
 80007aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ae:	bf00      	nop

080007b0 <__aeabi_fcmpge>:
 80007b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b4:	f7ff ffd2 	bl	800075c <__aeabi_cfrcmple>
 80007b8:	bf94      	ite	ls
 80007ba:	2001      	movls	r0, #1
 80007bc:	2000      	movhi	r0, #0
 80007be:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c2:	bf00      	nop

080007c4 <__aeabi_fcmpgt>:
 80007c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c8:	f7ff ffc8 	bl	800075c <__aeabi_cfrcmple>
 80007cc:	bf34      	ite	cc
 80007ce:	2001      	movcc	r0, #1
 80007d0:	2000      	movcs	r0, #0
 80007d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d6:	bf00      	nop

080007d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_ADC1_Init+0x74>)
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <MX_ADC1_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ADC1_Init+0x74>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ADC1_Init+0x74>)
 8000802:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_ADC1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_ADC1_Init+0x74>)
 8000816:	f001 f813 	bl	8001840 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 fe5e 	bl	80014e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0x74>)
 8000836:	f001 f9e7 	bl	8001c08 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000840:	f000 fe4e 	bl	80014e0 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20004e90 	.word	0x20004e90
 8000850:	40012400 	.word	0x40012400

08000854 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <HAL_ADC_MspInit+0xbc>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d149      	bne.n	8000908 <HAL_ADC_MspInit+0xb4>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_ADC_MspInit+0xc0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 80008a4:	2301      	movs	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <HAL_ADC_MspInit+0xc4>)
 80008b4:	f002 fbdc 	bl	8003070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_ADC_MspInit+0xcc>)
 80008bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <HAL_ADC_MspInit+0xc8>)
 80008ee:	f002 f87f 	bl	80029f0 <HAL_DMA_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008f8:	f000 fdf2 	bl	80014e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_ADC_MspInit+0xc8>)
 8000900:	621a      	str	r2, [r3, #32]
 8000902:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_ADC_MspInit+0xc8>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40012400 	.word	0x40012400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	20004ec0 	.word	0x20004ec0
 8000920:	40020008 	.word	0x40020008

08000924 <MX_CAN_Init>:

/**
 *  @brief 	CAN initialization function.
 *  */
void MX_CAN_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    hcan.Instance = CAN1;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_CAN_Init+0x64>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <MX_CAN_Init+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 16;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_CAN_Init+0x64>)
 8000930:	2210      	movs	r2, #16
 8000932:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_CAN_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_CAN_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_CAN_Init+0x64>)
 8000942:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000946:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_CAN_Init+0x64>)
 800094a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800094e:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = ENABLE;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_CAN_Init+0x64>)
 8000952:	2201      	movs	r2, #1
 8000954:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = ENABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_CAN_Init+0x64>)
 8000958:	2201      	movs	r2, #1
 800095a:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = ENABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_CAN_Init+0x64>)
 800095e:	2201      	movs	r2, #1
 8000960:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = DISABLE;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_CAN_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_CAN_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_CAN_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_CAN_Init+0x64>)
 8000976:	f001 fb40 	bl	8001ffa <HAL_CAN_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_CAN_Init+0x60>
    {
        Error_Handler();
 8000980:	f000 fdae 	bl	80014e0 <Error_Handler>
    }
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20004f20 	.word	0x20004f20
 800098c:	40006400 	.word	0x40006400

08000990 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
    if (canHandle->Instance == CAN1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <HAL_CAN_MspInit+0xb0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d143      	bne.n	8000a38 <HAL_CAN_MspInit+0xa8>
    {
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* CAN1 clock enable */
        __HAL_RCC_CAN1_CLK_ENABLE();
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ba:	61d3      	str	r3, [r2, #28]
 80009bc:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_CAN_MspInit+0xb4>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
        /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
        GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <HAL_CAN_MspInit+0xb8>)
 80009f6:	f002 fb3b 	bl	8003070 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fe:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <HAL_CAN_MspInit+0xb8>)
 8000a10:	f002 fb2e 	bl	8003070 <HAL_GPIO_Init>

        __HAL_AFIO_REMAP_CAN1_2();
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_CAN_MspInit+0xbc>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_CAN_MspInit+0xbc>)
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	6053      	str	r3, [r2, #4]
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40006400 	.word	0x40006400
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40010000 	.word	0x40010000

08000a50 <CAN_Filter_Init>:
/**
 * 	@brief 	Initializes a hardware CAN filter that filters for CAN messages that have the standard IDs 0x50B and 0x626.
 *          Filters are configured in list mode and 16 bit scale allowing for 4 IDs to be filtered.
 */
void CAN_Filter_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
    * Filter 4 seperate 11 bit IDs.
    * Currently, only 2 out of the 4 available filters are being used. The remaining 2 are filled in as duplicates.
    * Duplicates are in place because empty or random values will let through IDs that we have not specified to filter.
    */

    mcb_filter.FilterIdHigh = (uint32_t)((BATTERY_BASE + 6) << 5);            // Battery SOC
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a56:	f24c 42c0 	movw	r2, #50368	; 0xc4c0
 8000a5a:	601a      	str	r2, [r3, #0]
    mcb_filter.FilterIdLow = (uint32_t)((MOTOR_CTRL_BASE + 11) << 5);         // Motor Temperature
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a5e:	f24a 1260 	movw	r2, #41312	; 0xa160
 8000a62:	605a      	str	r2, [r3, #4]

    // TODO: this might not work
    mcb_filter.FilterMaskIdHigh = (uint32_t)((MOTOR_CTRL_BASE + 11) << 5);    // unused
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a66:	f24a 1260 	movw	r2, #41312	; 0xa160
 8000a6a:	609a      	str	r2, [r3, #8]
    mcb_filter.FilterMaskIdLow = (uint32_t)((MOTOR_CTRL_BASE + 11) << 5);     // unused
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a6e:	f24a 1260 	movw	r2, #41312	; 0xa160
 8000a72:	60da      	str	r2, [r3, #12]

    mcb_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
    mcb_filter.FilterBank = (uint32_t)0;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
    mcb_filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	619a      	str	r2, [r3, #24]
    mcb_filter.FilterScale = CAN_FILTERSCALE_16BIT;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
    mcb_filter.FilterActivation = CAN_FILTER_ENABLE;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <CAN_Filter_Init+0x4c>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	621a      	str	r2, [r3, #32]
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20004f4c 	.word	0x20004f4c

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	200b      	movs	r0, #11
 8000ac4:	f001 ff69 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ac8:	200b      	movs	r0, #11
 8000aca:	f001 ff82 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <EncoderInit>:
#include "stm32f1xx_hal.h"

/**
 * Initializes the encoder for the accelerator pedal.
 */
void EncoderInit(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

    // the APB2ENR enables clocks for the peripherals

    //Initialize AFIO Clock
    RCC->APB2ENR |= 0x1;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <EncoderInit+0xcc>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <EncoderInit+0xcc>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]

    //TIM 1 Enable
    RCC->APB2ENR |= 0x1 << 11;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <EncoderInit+0xcc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <EncoderInit+0xcc>)
 8000af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af6:	6193      	str	r3, [r2, #24]

    //Initialize GPIOA Clock
    RCC->APB2ENR |= 0x1 << 2;
 8000af8:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <EncoderInit+0xcc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2a      	ldr	r2, [pc, #168]	; (8000ba8 <EncoderInit+0xcc>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
    GPIOA->CRH &= 0;
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <EncoderInit+0xd0>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <EncoderInit+0xd0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]

    // configures PA8 as floating input
    // also configures PA9 as floating input
    GPIOA->CRH |= 0x00000044;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <EncoderInit+0xd0>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <EncoderInit+0xd0>)
 8000b14:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000b18:	6053      	str	r3, [r2, #4]

    //TIM 1 No Remap
    AFIO->MAPR &= ~(0x11 << 6);
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <EncoderInit+0xd4>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <EncoderInit+0xd4>)
 8000b20:	f423 6388 	bic.w	r3, r3, #1088	; 0x440
 8000b24:	6053      	str	r3, [r2, #4]

    TIM1->CCMR1 |= 0x01;    //Map Channel 1 to TI1
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <EncoderInit+0xd8>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <EncoderInit+0xd8>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1 |= 0x01 << 8; //Map Channel 2 to TI2
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <EncoderInit+0xd8>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <EncoderInit+0xd8>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6193      	str	r3, [r2, #24]

    TIM1->CCER &= ~(0x1 << 1);
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <EncoderInit+0xd8>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <EncoderInit+0xd8>)
 8000b44:	f023 0302 	bic.w	r3, r3, #2
 8000b48:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 3);
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <EncoderInit+0xd8>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <EncoderInit+0xd8>)
 8000b50:	f023 0308 	bic.w	r3, r3, #8
 8000b54:	6213      	str	r3, [r2, #32]

    TIM1->CCER &= ~(0x1 << 5);
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <EncoderInit+0xd8>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a16      	ldr	r2, [pc, #88]	; (8000bb4 <EncoderInit+0xd8>)
 8000b5c:	f023 0320 	bic.w	r3, r3, #32
 8000b60:	6213      	str	r3, [r2, #32]
    TIM1->CCER &= ~(0x1 << 7);
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <EncoderInit+0xd8>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <EncoderInit+0xd8>)
 8000b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b6c:	6213      	str	r3, [r2, #32]

    TIM1->CCER |= 0x1;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <EncoderInit+0xd8>)
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <EncoderInit+0xd8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6213      	str	r3, [r2, #32]
    TIM1->CCER |= 0x1 << 4;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <EncoderInit+0xd8>)
 8000b7c:	6a1b      	ldr	r3, [r3, #32]
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <EncoderInit+0xd8>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6213      	str	r3, [r2, #32]

    TIM1->SMCR |= 0x011;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <EncoderInit+0xd8>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <EncoderInit+0xd8>)
 8000b8c:	f043 0311 	orr.w	r3, r3, #17
 8000b90:	6093      	str	r3, [r2, #8]

    TIM1->CR1 |= 0x1;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <EncoderInit+0xd8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <EncoderInit+0xd8>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]

}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <EncoderRead>:

/**
 * Reads a value from the encoder.
 */
uint16_t EncoderRead(void) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

    uint16_t Encoder_Reading = TIM1->CNT;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <EncoderRead+0x40>)
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	80fb      	strh	r3, [r7, #6]
    //SendLine();
    //ENDTEST

    if (Encoder_Reading < PEDAL_MIN) {
        Encoder_Reading = 0;
    } else if (Encoder_Reading < PEDAL_MAX) {
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	2bfe      	cmp	r3, #254	; 0xfe
 8000bc8:	d808      	bhi.n	8000bdc <EncoderRead+0x24>
        Encoder_Reading = Encoder_Reading - PEDAL_MIN;

        if (Encoder_Reading > 0x40) {
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	2b40      	cmp	r3, #64	; 0x40
 8000bce:	d902      	bls.n	8000bd6 <EncoderRead+0x1e>
            Encoder_Reading = 0x10;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	e00a      	b.n	8000bec <EncoderRead+0x34>
        } else {
            Encoder_Reading = 0x00;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	e007      	b.n	8000bec <EncoderRead+0x34>
        }

    } else if (Encoder_Reading < PEDAL_OVERLOAD) {
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2bfe      	cmp	r3, #254	; 0xfe
 8000be0:	d802      	bhi.n	8000be8 <EncoderRead+0x30>
        Encoder_Reading = 0x10;
 8000be2:	2310      	movs	r3, #16
 8000be4:	80fb      	strh	r3, [r7, #6]
 8000be6:	e001      	b.n	8000bec <EncoderRead+0x34>
    } else {
        Encoder_Reading = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	80fb      	strh	r3, [r7, #6]
    }

    return Encoder_Reading;
 8000bec:	88fb      	ldrh	r3, [r7, #6]

}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40012c00 	.word	0x40012c00

08000bfc <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization function.
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */

    encoderQueueHandle = osMessageQueueNew(ENCODER_QUEUE_MSG_CNT, ENCODER_QUEUE_MSG_SIZE, &encoderQueue_attributes);
 8000c00:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <MX_FREERTOS_Init+0xc4>)
 8000c02:	2102      	movs	r1, #2
 8000c04:	2005      	movs	r0, #5
 8000c06:	f003 ff5f 	bl	8004ac8 <osMessageQueueNew>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a2d      	ldr	r2, [pc, #180]	; (8000cc4 <MX_FREERTOS_Init+0xc8>)
 8000c0e:	6013      	str	r3, [r2, #0]

    readEncoderTaskHandle = osThreadNew(readEncoderTask, NULL, &readEncoderTask_attributes);
 8000c10:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <MX_FREERTOS_Init+0xcc>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	482d      	ldr	r0, [pc, #180]	; (8000ccc <MX_FREERTOS_Init+0xd0>)
 8000c16:	f003 fbd3 	bl	80043c0 <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <MX_FREERTOS_Init+0xd4>)
 8000c1e:	6013      	str	r3, [r2, #0]
    updateEventFlagsTaskHandle = osThreadNew(updateEventFlagsTask, NULL, &updateEventFlagsTask_attributes);
 8000c20:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_FREERTOS_Init+0xd8>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	482c      	ldr	r0, [pc, #176]	; (8000cd8 <MX_FREERTOS_Init+0xdc>)
 8000c26:	f003 fbcb 	bl	80043c0 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	; (8000cdc <MX_FREERTOS_Init+0xe0>)
 8000c2e:	6013      	str	r3, [r2, #0]

    sendMotorCommandTaskHandle = osThreadNew(sendMotorCommandTask, NULL, &sendMotorCommandTask_attributes);
 8000c30:	4a2b      	ldr	r2, [pc, #172]	; (8000ce0 <MX_FREERTOS_Init+0xe4>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	482b      	ldr	r0, [pc, #172]	; (8000ce4 <MX_FREERTOS_Init+0xe8>)
 8000c36:	f003 fbc3 	bl	80043c0 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <MX_FREERTOS_Init+0xec>)
 8000c3e:	6013      	str	r3, [r2, #0]
    sendRegenCommandTaskHandle = osThreadNew(sendRegenCommandTask, NULL, &sendRegenCommandTask_attributes);
 8000c40:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <MX_FREERTOS_Init+0xf0>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	482a      	ldr	r0, [pc, #168]	; (8000cf0 <MX_FREERTOS_Init+0xf4>)
 8000c46:	f003 fbbb 	bl	80043c0 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <MX_FREERTOS_Init+0xf8>)
 8000c4e:	6013      	str	r3, [r2, #0]
    sendCruiseCommandTaskHandle = osThreadNew(sendCruiseCommandTask, NULL, &sendCruiseCommandTask_attributes);
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <MX_FREERTOS_Init+0xfc>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4829      	ldr	r0, [pc, #164]	; (8000cfc <MX_FREERTOS_Init+0x100>)
 8000c56:	f003 fbb3 	bl	80043c0 <osThreadNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <MX_FREERTOS_Init+0x104>)
 8000c5e:	6013      	str	r3, [r2, #0]
    sendIdleCommandTaskHandle = osThreadNew(sendIdleCommandTask, NULL, &sendIdleCommandTask_attributes);
 8000c60:	4a28      	ldr	r2, [pc, #160]	; (8000d04 <MX_FREERTOS_Init+0x108>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4828      	ldr	r0, [pc, #160]	; (8000d08 <MX_FREERTOS_Init+0x10c>)
 8000c66:	f003 fbab 	bl	80043c0 <osThreadNew>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <MX_FREERTOS_Init+0x110>)
 8000c6e:	6013      	str	r3, [r2, #0]

    sendNextScreenMessageTaskHandle = osThreadNew(sendNextScreenMessageTask, NULL, &sendNextScreenTask_attributes);
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <MX_FREERTOS_Init+0x114>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4827      	ldr	r0, [pc, #156]	; (8000d14 <MX_FREERTOS_Init+0x118>)
 8000c76:	f003 fba3 	bl	80043c0 <osThreadNew>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <MX_FREERTOS_Init+0x11c>)
 8000c7e:	6013      	str	r3, [r2, #0]

    receiveBatteryMessageTaskHandle = osThreadNew(receiveBatteryMessageTask, NULL, &receiveBatteryMessageTask_attributes);
 8000c80:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <MX_FREERTOS_Init+0x120>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <MX_FREERTOS_Init+0x124>)
 8000c86:	f003 fb9b 	bl	80043c0 <osThreadNew>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <MX_FREERTOS_Init+0x128>)
 8000c8e:	6013      	str	r3, [r2, #0]

	sendMotorOverheatTaskHandle = osThreadNew(sendMotorOverheatTask, NULL, &sendMotorOverheatTask_attributes);
 8000c90:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <MX_FREERTOS_Init+0x12c>)
 8000c92:	2100      	movs	r1, #0
 8000c94:	4825      	ldr	r0, [pc, #148]	; (8000d2c <MX_FREERTOS_Init+0x130>)
 8000c96:	f003 fb93 	bl	80043c0 <osThreadNew>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <MX_FREERTOS_Init+0x134>)
 8000c9e:	6013      	str	r3, [r2, #0]

	commandEventFlagsHandle = osEventFlagsNew(NULL);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f003 fc97 	bl	80045d4 <osEventFlagsNew>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <MX_FREERTOS_Init+0x138>)
 8000caa:	6013      	str	r3, [r2, #0]

    nextScreenSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f003 fdaf 	bl	8004814 <osSemaphoreNew>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_FREERTOS_Init+0x13c>)
 8000cba:	6013      	str	r3, [r2, #0]

    /* USER CODE END Init */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	08008750 	.word	0x08008750
 8000cc4:	20004f88 	.word	0x20004f88
 8000cc8:	0800860c 	.word	0x0800860c
 8000ccc:	08000d3d 	.word	0x08000d3d
 8000cd0:	20004f7c 	.word	0x20004f7c
 8000cd4:	080086e4 	.word	0x080086e4
 8000cd8:	08001091 	.word	0x08001091
 8000cdc:	20004f84 	.word	0x20004f84
 8000ce0:	08008630 	.word	0x08008630
 8000ce4:	08000da5 	.word	0x08000da5
 8000ce8:	20004f80 	.word	0x20004f80
 8000cec:	08008654 	.word	0x08008654
 8000cf0:	08000e85 	.word	0x08000e85
 8000cf4:	20004f9c 	.word	0x20004f9c
 8000cf8:	08008678 	.word	0x08008678
 8000cfc:	08000f2d 	.word	0x08000f2d
 8000d00:	20004f90 	.word	0x20004f90
 8000d04:	080086c0 	.word	0x080086c0
 8000d08:	08000fc9 	.word	0x08000fc9
 8000d0c:	20004fa0 	.word	0x20004fa0
 8000d10:	0800869c 	.word	0x0800869c
 8000d14:	08001055 	.word	0x08001055
 8000d18:	20004f74 	.word	0x20004f74
 8000d1c:	08008708 	.word	0x08008708
 8000d20:	08001145 	.word	0x08001145
 8000d24:	20004f98 	.word	0x20004f98
 8000d28:	0800872c 	.word	0x0800872c
 8000d2c:	080011a1 	.word	0x080011a1
 8000d30:	20004f94 	.word	0x20004f94
 8000d34:	20004fa4 	.word	0x20004fa4
 8000d38:	20004f78 	.word	0x20004f78

08000d3c <readEncoderTask>:
/**
 * @brief  Reads the pedal quadrature encoder and places the read value in an RTOS queue.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void readEncoderTask(void *argument) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    static uint16_t old_encoder_reading = 0x0000;
    static uint16_t encoder_reading = 0x0000;

    // TODO: replace with HAL library
    EncoderInit();
 8000d44:	f7ff feca 	bl	8000adc <EncoderInit>

    while (1) {
        encoder_reading = EncoderRead();
 8000d48:	f7ff ff36 	bl	8000bb8 <EncoderRead>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <readEncoderTask+0x58>)
 8000d52:	801a      	strh	r2, [r3, #0]

        // update the event flags struct
        event_flags.encoder_value_is_zero = (encoder_reading == 0);
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <readEncoderTask+0x58>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <readEncoderTask+0x5c>)
 8000d66:	715a      	strb	r2, [r3, #5]

        if (encoder_reading != old_encoder_reading) {
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <readEncoderTask+0x58>)
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <readEncoderTask+0x60>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d006      	beq.n	8000d82 <readEncoderTask+0x46>
            osMessageQueuePut(encoderQueueHandle, &encoder_reading, 0U, 0U);
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <readEncoderTask+0x64>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4905      	ldr	r1, [pc, #20]	; (8000d94 <readEncoderTask+0x58>)
 8000d7e:	f003 ff29 	bl	8004bd4 <osMessageQueuePut>
        }

        old_encoder_reading = encoder_reading;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <readEncoderTask+0x58>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <readEncoderTask+0x60>)
 8000d88:	801a      	strh	r2, [r3, #0]

        osDelay(ENCODER_READ_DELAY);
 8000d8a:	2032      	movs	r0, #50	; 0x32
 8000d8c:	f003 fbf4 	bl	8004578 <osDelay>
        encoder_reading = EncoderRead();
 8000d90:	e7da      	b.n	8000d48 <readEncoderTask+0xc>
 8000d92:	bf00      	nop
 8000d94:	200000c0 	.word	0x200000c0
 8000d98:	20004fac 	.word	0x20004fac
 8000d9c:	200000c2 	.word	0x200000c2
 8000da0:	20004f88 	.word	0x20004f88

08000da4 <sendMotorCommandTask>:
/**
 * @brief  Sends motor command (torque-control) CAN message once encoder value is read and the MCB state is NORMAL_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendMotorCommandTask(void *argument) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

    osStatus_t queue_status;

    while (1) {
        // blocks thread waiting for encoder value to be added to queue
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <sendMotorCommandTask+0xb4>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	f107 010e 	add.w	r1, r7, #14
 8000db4:	2300      	movs	r3, #0
 8000db6:	2200      	movs	r2, #0
 8000db8:	f003 ff80 	bl	8004cbc <osMessageQueueGet>
 8000dbc:	61b8      	str	r0, [r7, #24]

        if (queue_status == osOK) {
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10d      	bne.n	8000de0 <sendMotorCommandTask+0x3c>
            // motor current is linearly scaled to pedal position
            current.float_value = (float) encoder_value / (PEDAL_MAX - PEDAL_MIN);
 8000dc4:	89fb      	ldrh	r3, [r7, #14]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fae8 	bl	800039c <__aeabi_ui2f>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4923      	ldr	r1, [pc, #140]	; (8000e5c <sendMotorCommandTask+0xb8>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fbef 	bl	80005b4 <__aeabi_fdiv>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <sendMotorCommandTask+0xbc>)
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e001      	b.n	8000de4 <sendMotorCommandTask+0x40>
        } else {
            // TODO: send CAN message here that indicates the processor is failing to read the encoder
            osThreadYield();
 8000de0:	f003 fb98 	bl	8004514 <osThreadYield>
        }

        osEventFlagsWait(commandEventFlagsHandle, NORMAL_READY, osFlagsWaitAll, osWaitForever);
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <sendMotorCommandTask+0xc0>)
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	2201      	movs	r2, #1
 8000dee:	2102      	movs	r1, #2
 8000df0:	f003 fc9a 	bl	8004728 <osEventFlagsWait>

        // velocity is set to unattainable value for motor torque-control mode
        if (event_flags.reverse_enable) {
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <sendMotorCommandTask+0xc4>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <sendMotorCommandTask+0x62>
            velocity.float_value = -100.0;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <sendMotorCommandTask+0xc8>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <sendMotorCommandTask+0xcc>)
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e002      	b.n	8000e0c <sendMotorCommandTask+0x68>
        } else {
            velocity.float_value = 100.0;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <sendMotorCommandTask+0xc8>)
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <sendMotorCommandTask+0xd0>)
 8000e0a:	601a      	str	r2, [r3, #0]
        }

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e017      	b.n	8000e42 <sendMotorCommandTask+0x9e>
            data_send[i] = velocity.bytes[i];
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <sendMotorCommandTask+0xc8>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	4413      	add	r3, r2
 8000e18:	7819      	ldrb	r1, [r3, #0]
 8000e1a:	f107 0210 	add.w	r2, r7, #16
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4413      	add	r3, r2
 8000e22:	460a      	mov	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <sendMotorCommandTask+0xbc>)
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	440a      	add	r2, r1
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	f107 0120 	add.w	r1, r7, #32
 8000e36:	440b      	add	r3, r1
 8000e38:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	dde4      	ble.n	8000e12 <sendMotorCommandTask+0x6e>
        }

        // send CAN message to motor controller
        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000e48:	f107 0210 	add.w	r2, r7, #16
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <sendMotorCommandTask+0xd4>)
 8000e4e:	490b      	ldr	r1, [pc, #44]	; (8000e7c <sendMotorCommandTask+0xd8>)
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <sendMotorCommandTask+0xdc>)
 8000e52:	f001 fada 	bl	800240a <HAL_CAN_AddTxMessage>
        queue_status = osMessageQueueGet(encoderQueueHandle, &encoder_value, NULL, 0U);
 8000e56:	e7a9      	b.n	8000dac <sendMotorCommandTask+0x8>
 8000e58:	20004f88 	.word	0x20004f88
 8000e5c:	437f0000 	.word	0x437f0000
 8000e60:	20004fb4 	.word	0x20004fb4
 8000e64:	20004fa4 	.word	0x20004fa4
 8000e68:	20004fac 	.word	0x20004fac
 8000e6c:	20004fb8 	.word	0x20004fb8
 8000e70:	c2c80000 	.word	0xc2c80000
 8000e74:	42c80000 	.word	0x42c80000
 8000e78:	20004f48 	.word	0x20004f48
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20004f20 	.word	0x20004f20

08000e84 <sendRegenCommandTask>:
/**
 * @brief  Sends regen command (velocity control) CAN message once MCB state is REGEN_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendRegenCommandTask(void *argument) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a regen command
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <sendRegenCommandTask+0x88>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2201      	movs	r2, #1
 8000e96:	2104      	movs	r1, #4
 8000e98:	f003 fc46 	bl	8004728 <osEventFlagsWait>

        // velocity is set to zero for regen according to motor controller documentation
        velocity.float_value = 0.0;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <sendRegenCommandTask+0x8c>)
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        // current is linearly scaled with the regen value read from the ADC
        current.float_value = (float) regen_value / (ADC_MAX - ADC_MIN);
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <sendRegenCommandTask+0x90>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fa77 	bl	800039c <__aeabi_ui2f>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4919      	ldr	r1, [pc, #100]	; (8000f18 <sendRegenCommandTask+0x94>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fb7e 	bl	80005b4 <__aeabi_fdiv>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <sendRegenCommandTask+0x98>)
 8000ebe:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e017      	b.n	8000ef6 <sendRegenCommandTask+0x72>
            data_send[i] = velocity.bytes[i];
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <sendRegenCommandTask+0x8c>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	7819      	ldrb	r1, [r3, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3304      	adds	r3, #4
 8000ede:	490f      	ldr	r1, [pc, #60]	; (8000f1c <sendRegenCommandTask+0x98>)
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	440a      	add	r2, r1
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	f107 0118 	add.w	r1, r7, #24
 8000eea:	440b      	add	r3, r1
 8000eec:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dde4      	ble.n	8000ec6 <sendRegenCommandTask+0x42>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <sendRegenCommandTask+0x9c>)
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <sendRegenCommandTask+0xa0>)
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <sendRegenCommandTask+0xa4>)
 8000f06:	f001 fa80 	bl	800240a <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, REGEN_READY, osFlagsWaitAll, osWaitForever);
 8000f0a:	e7bf      	b.n	8000e8c <sendRegenCommandTask+0x8>
 8000f0c:	20004fa4 	.word	0x20004fa4
 8000f10:	20004fb8 	.word	0x20004fb8
 8000f14:	20004fc0 	.word	0x20004fc0
 8000f18:	457ff000 	.word	0x457ff000
 8000f1c:	20004fb4 	.word	0x20004fb4
 8000f20:	20004f48 	.word	0x20004f48
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20004f20 	.word	0x20004f20

08000f2c <sendCruiseCommandTask>:
/**
 * @brief  Sends cruise-control command (velocity control) CAN message once MCB state is CRUISE_READY.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendCruiseCommandTask (void *argument) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send a cruise control command
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <sendCruiseCommandTask+0x7c>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2108      	movs	r1, #8
 8000f40:	f003 fbf2 	bl	8004728 <osEventFlagsWait>

        // current set to maximum for a cruise control message
        current.float_value = 100.0;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <sendCruiseCommandTask+0x80>)
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <sendCruiseCommandTask+0x84>)
 8000f48:	601a      	str	r2, [r3, #0]

        // set velocity to cruise value
        velocity.float_value = (float) cruise_value;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <sendCruiseCommandTask+0x88>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa24 	bl	800039c <__aeabi_ui2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <sendCruiseCommandTask+0x8c>)
 8000f58:	6013      	str	r3, [r2, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e017      	b.n	8000f90 <sendCruiseCommandTask+0x64>
            data_send[i] = velocity.bytes[i];
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <sendCruiseCommandTask+0x8c>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4413      	add	r3, r2
 8000f66:	7819      	ldrb	r1, [r3, #0]
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4413      	add	r3, r2
 8000f70:	460a      	mov	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3304      	adds	r3, #4
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <sendCruiseCommandTask+0x80>)
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	440a      	add	r2, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	f107 0118 	add.w	r1, r7, #24
 8000f84:	440b      	add	r3, r1
 8000f86:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	dde4      	ble.n	8000f60 <sendCruiseCommandTask+0x34>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <sendCruiseCommandTask+0x90>)
 8000f9c:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <sendCruiseCommandTask+0x94>)
 8000f9e:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <sendCruiseCommandTask+0x98>)
 8000fa0:	f001 fa33 	bl	800240a <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, CRUISE_READY, osFlagsWaitAll, osWaitForever);
 8000fa4:	e7c6      	b.n	8000f34 <sendCruiseCommandTask+0x8>
 8000fa6:	bf00      	nop
 8000fa8:	20004fa4 	.word	0x20004fa4
 8000fac:	20004fb4 	.word	0x20004fb4
 8000fb0:	42c80000 	.word	0x42c80000
 8000fb4:	20004fa8 	.word	0x20004fa8
 8000fb8:	20004fb8 	.word	0x20004fb8
 8000fbc:	20004f48 	.word	0x20004f48
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20004f20 	.word	0x20004f20

08000fc8 <sendIdleCommandTask>:
/**
 * @brief  Sends an idle CAN message when the MCB goes into the IDLE state.
 * @param  argument: Not used
 * @retval None
 */
__NO_RETURN void sendIdleCommandTask (void *argument) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_DATA_LENGTH];

    while (1) {
        // waits for event flag that signals the decision to send an idle command
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <sendIdleCommandTask+0x74>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f003 fba4 	bl	8004728 <osEventFlagsWait>

        // zeroed since car would not be moving in idle state
        current.float_value = 0.0;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <sendIdleCommandTask+0x78>)
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
        velocity.float_value = 0.0;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <sendIdleCommandTask+0x7c>)
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        // writing data into data_send array which will be sent as a CAN message
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e017      	b.n	8001026 <sendIdleCommandTask+0x5e>
            data_send[i] = velocity.bytes[i];
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <sendIdleCommandTask+0x7c>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
            data_send[4 + i] = current.bytes[i];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3304      	adds	r3, #4
 800100e:	490c      	ldr	r1, [pc, #48]	; (8001040 <sendIdleCommandTask+0x78>)
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	f107 0118 	add.w	r1, r7, #24
 800101a:	440b      	add	r3, r1
 800101c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++) {
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b03      	cmp	r3, #3
 800102a:	dde4      	ble.n	8000ff6 <sendIdleCommandTask+0x2e>
        }

        HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <sendIdleCommandTask+0x80>)
 8001032:	4906      	ldr	r1, [pc, #24]	; (800104c <sendIdleCommandTask+0x84>)
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <sendIdleCommandTask+0x88>)
 8001036:	f001 f9e8 	bl	800240a <HAL_CAN_AddTxMessage>
        osEventFlagsWait(commandEventFlagsHandle, IDLE, osFlagsWaitAll, osWaitForever);
 800103a:	e7c9      	b.n	8000fd0 <sendIdleCommandTask+0x8>
 800103c:	20004fa4 	.word	0x20004fa4
 8001040:	20004fb4 	.word	0x20004fb4
 8001044:	20004fb8 	.word	0x20004fb8
 8001048:	20004f48 	.word	0x20004f48
 800104c:	20000000 	.word	0x20000000
 8001050:	20004f20 	.word	0x20004f20

08001054 <sendNextScreenMessageTask>:
 * @brief  	Sends CAN message that indicates intention to switch to next page on the driver LCD.
 * 			This message is picked up by the DID (driver information display) board.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendNextScreenMessageTask (void *argument) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    uint8_t data_send[CAN_CONTROL_DATA_LENGTH];

    while (1) {
        // wait for next screen semaphore
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <sendNextScreenMessageTask+0x2c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fc71 	bl	800494c <osSemaphoreAcquire>

        // sets MSB of byte 0 of CAN message to 1 to indicate the next_screen button has been pressed
        data_send[0] = 0x10;
 800106a:	2310      	movs	r3, #16
 800106c:	733b      	strb	r3, [r7, #12]

        HAL_CAN_AddTxMessage(&hcan, &screen_cruise_control_header, data_send, &can_mailbox);
 800106e:	f107 020c 	add.w	r2, r7, #12
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <sendNextScreenMessageTask+0x30>)
 8001074:	4904      	ldr	r1, [pc, #16]	; (8001088 <sendNextScreenMessageTask+0x34>)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <sendNextScreenMessageTask+0x38>)
 8001078:	f001 f9c7 	bl	800240a <HAL_CAN_AddTxMessage>
        osSemaphoreAcquire(nextScreenSemaphoreHandle, osWaitForever);
 800107c:	e7ee      	b.n	800105c <sendNextScreenMessageTask+0x8>
 800107e:	bf00      	nop
 8001080:	20004f78 	.word	0x20004f78
 8001084:	20004f48 	.word	0x20004f48
 8001088:	20000018 	.word	0x20000018
 800108c:	20004f20 	.word	0x20004f20

08001090 <updateEventFlagsTask>:
 * @brief  	Decides what state the main control board is in and therefore which thread will send a motor
 * 			controller CAN message.
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void updateEventFlagsTask(void *argument) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	while (1) {
		// order of priorities beginning with most important: motor over heating, regen braking, encoder motor command, cruise control
		if (event_flags.motor_overheat) {
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <updateEventFlagsTask+0x9c>)
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <updateEventFlagsTask+0x1a>
			state = MOTOR_OVERHEAT;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <updateEventFlagsTask+0xa0>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e033      	b.n	8001112 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.regen_enable && regen_value > 0 && battery_soc < BATTERY_REGEN_THRESHOLD) {
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <updateEventFlagsTask+0x9c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <updateEventFlagsTask+0x3c>
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <updateEventFlagsTask+0xa4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <updateEventFlagsTask+0x3c>
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <updateEventFlagsTask+0xa8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b59      	cmp	r3, #89	; 0x59
 80010c2:	d803      	bhi.n	80010cc <updateEventFlagsTask+0x3c>
			state = REGEN_READY;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <updateEventFlagsTask+0xa0>)
 80010c6:	2204      	movs	r2, #4
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e022      	b.n	8001112 <updateEventFlagsTask+0x82>
		}
		else if (!event_flags.encoder_value_is_zero && !event_flags.cruise_status) {
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <updateEventFlagsTask+0x9c>)
 80010ce:	795b      	ldrb	r3, [r3, #5]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <updateEventFlagsTask+0x58>
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <updateEventFlagsTask+0x9c>)
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <updateEventFlagsTask+0x58>
			state = NORMAL_READY;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <updateEventFlagsTask+0xa0>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e014      	b.n	8001112 <updateEventFlagsTask+0x82>
		}
		else if (event_flags.cruise_status && cruise_value > 0 && !event_flags.brake_in) {
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <updateEventFlagsTask+0x9c>)
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <updateEventFlagsTask+0x7c>
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <updateEventFlagsTask+0xac>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <updateEventFlagsTask+0x7c>
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <updateEventFlagsTask+0x9c>)
 80010fc:	78db      	ldrb	r3, [r3, #3]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d103      	bne.n	800110c <updateEventFlagsTask+0x7c>
			state = CRUISE_READY;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <updateEventFlagsTask+0xa0>)
 8001106:	2208      	movs	r2, #8
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e002      	b.n	8001112 <updateEventFlagsTask+0x82>
		}
		else {
			state = IDLE;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <updateEventFlagsTask+0xa0>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
		}

		// signals the MCB state to other threads
		osEventFlagsSet(commandEventFlagsHandle, state);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <updateEventFlagsTask+0xb0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <updateEventFlagsTask+0xa0>)
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f003 faab 	bl	8004678 <osEventFlagsSet>

		osDelay(EVENT_FLAG_UPDATE_DELAY);
 8001122:	2019      	movs	r0, #25
 8001124:	f003 fa28 	bl	8004578 <osDelay>
		if (event_flags.motor_overheat) {
 8001128:	e7b6      	b.n	8001098 <updateEventFlagsTask+0x8>
 800112a:	bf00      	nop
 800112c:	20004fac 	.word	0x20004fac
 8001130:	20004f8c 	.word	0x20004f8c
 8001134:	20004fc0 	.word	0x20004fc0
 8001138:	20004fc4 	.word	0x20004fc4
 800113c:	20004fa8 	.word	0x20004fa8
 8001140:	20004fa4 	.word	0x20004fa4

08001144 <receiveBatteryMessageTask>:
 * 			battery.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void receiveBatteryMessageTask (void *argument) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t battery_msg_data[8];

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 800114c:	2100      	movs	r1, #0
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <receiveBatteryMessageTask+0x50>)
 8001150:	f001 fb46 	bl	80027e0 <HAL_CAN_GetRxFifoFillLevel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d016      	beq.n	8001188 <receiveBatteryMessageTask+0x44>
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, battery_msg_data);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <receiveBatteryMessageTask+0x54>)
 8001160:	2100      	movs	r1, #0
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <receiveBatteryMessageTask+0x50>)
 8001164:	f001 fa2b 	bl	80025be <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x626) {
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <receiveBatteryMessageTask+0x54>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f240 6226 	movw	r2, #1574	; 0x626
 8001170:	4293      	cmp	r3, r2
 8001172:	d109      	bne.n	8001188 <receiveBatteryMessageTask+0x44>

				// if the battery SOC is out of range, assume it is at 100% as a safety measure
				if (battery_msg_data[0] < 0 || battery_msg_data[0] > 100) {
 8001174:	7a3b      	ldrb	r3, [r7, #8]
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d903      	bls.n	8001182 <receiveBatteryMessageTask+0x3e>
					// TODO: somehow indicate to the outside world that this has happened
					battery_soc = 100;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <receiveBatteryMessageTask+0x58>)
 800117c:	2264      	movs	r2, #100	; 0x64
 800117e:	701a      	strb	r2, [r3, #0]
 8001180:	e002      	b.n	8001188 <receiveBatteryMessageTask+0x44>
				} else {
					battery_soc = battery_msg_data[0];
 8001182:	7a3a      	ldrb	r2, [r7, #8]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <receiveBatteryMessageTask+0x58>)
 8001186:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		osDelay(READ_BATTERY_SOC_DELAY);
 8001188:	f241 3088 	movw	r0, #5000	; 0x1388
 800118c:	f003 f9f4 	bl	8004578 <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8001190:	e7dc      	b.n	800114c <receiveBatteryMessageTask+0x8>
 8001192:	bf00      	nop
 8001194:	20004f20 	.word	0x20004f20
 8001198:	20004f04 	.word	0x20004f04
 800119c:	20004fc4 	.word	0x20004fc4

080011a0 <sendMotorOverheatTask>:
 * 			shutdown, the motor will need to stop sending commands when it reaches a temperature of MAX_MOTOR_TEMPERATURE.
 *
 * @param  	argument: Not used
 * @retval 	None
 */
__NO_RETURN void sendMotorOverheatTask (void *argument) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	uint8_t motor_temperature_data[CAN_DATA_LENGTH]; // the motor temperature is bytes [3:0] TODO: this is an assumption

	while (1) {
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 80011a8:	2100      	movs	r1, #0
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <sendMotorOverheatTask+0x84>)
 80011ac:	f001 fb18 	bl	80027e0 <HAL_CAN_GetRxFifoFillLevel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d032      	beq.n	800121c <sendMotorOverheatTask+0x7c>
			// there are multiple CAN IDs being passed through the filter, check if the message is the motor temperature
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, motor_temperature_data);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <sendMotorOverheatTask+0x88>)
 80011bc:	2100      	movs	r1, #0
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <sendMotorOverheatTask+0x84>)
 80011c0:	f001 f9fd 	bl	80025be <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x50B) {
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <sendMotorOverheatTask+0x88>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f240 520b 	movw	r2, #1291	; 0x50b
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d125      	bne.n	800121c <sendMotorOverheatTask+0x7c>

				// assign the values from the CAN message into the
				// use the union to convert the 4 bytes to a 32-bit float
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00f      	b.n	80011f6 <sendMotorOverheatTask+0x56>
					 * 		received[0] = 0xDD -> copied[3] = 0xDD
					 * 		received[1] = 0xCC -> copied[2] - 0xCC
					 * 		received[2] = 0xBB -> copied[1] = 0xBB
					 * 		received[3] = 0xAA -> copied[0] - 0xAA
					 */
					motor_temperature.bytes[i] = motor_temperature_data[CAN_HALF_DATA_LENGTH - 1 - i];
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f1c3 0303 	rsb	r3, r3, #3
 80011dc:	f107 0218 	add.w	r2, r7, #24
 80011e0:	4413      	add	r3, r2
 80011e2:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <sendMotorOverheatTask+0x8c>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	4413      	add	r3, r2
 80011ec:	460a      	mov	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < (uint8_t)CAN_DATA_LENGTH / 2; i++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	ddec      	ble.n	80011d6 <sendMotorOverheatTask+0x36>
				}

				// if the motor temperature is over heating, stop sending commands
				if (motor_temperature.float_value >= MAX_MOTOR_TEMPERATURE) {
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <sendMotorOverheatTask+0x8c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	490b      	ldr	r1, [pc, #44]	; (8001230 <sendMotorOverheatTask+0x90>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fad4 	bl	80007b0 <__aeabi_fcmpge>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <sendMotorOverheatTask+0x76>
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x01;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <sendMotorOverheatTask+0x94>)
 8001210:	2201      	movs	r2, #1
 8001212:	719a      	strb	r2, [r3, #6]
 8001214:	e002      	b.n	800121c <sendMotorOverheatTask+0x7c>
				} else {
					// change the state so that sendMotorCommandTask will not run
					event_flags.motor_overheat = 0x00;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <sendMotorOverheatTask+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	719a      	strb	r2, [r3, #6]
				}

			}
		}
		osDelay(MOTOR_OVERHEAT_DELAY);
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <sendMotorOverheatTask+0x98>)
 800121e:	f003 f9ab 	bl	8004578 <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)) {
 8001222:	e7c1      	b.n	80011a8 <sendMotorOverheatTask+0x8>
 8001224:	20004f20 	.word	0x20004f20
 8001228:	20004f04 	.word	0x20004f04
 800122c:	20004fbc 	.word	0x20004fbc
 8001230:	42700000 	.word	0x42700000
 8001234:	20004fac 	.word	0x20004fac
 8001238:	000493e0 	.word	0x000493e0

0800123c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA0-WKUP   ------> ADCx_IN0
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <MX_GPIO_Init+0x154>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <MX_GPIO_Init+0x154>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <MX_GPIO_Init+0x154>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <MX_GPIO_Init+0x154>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <MX_GPIO_Init+0x154>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <MX_GPIO_Init+0x154>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_GPIO_Init+0x154>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a42      	ldr	r2, [pc, #264]	; (8001390 <MX_GPIO_Init+0x154>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_GPIO_Init+0x154>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CRUISE_STAT_GPIO_Port, CRUISE_STAT_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	483d      	ldr	r0, [pc, #244]	; (8001394 <MX_GPIO_Init+0x158>)
 80012a0:	f002 f891 	bl	80033c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 80012a4:	2301      	movs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a8:	2303      	movs	r3, #3
 80012aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	4838      	ldr	r0, [pc, #224]	; (8001394 <MX_GPIO_Init+0x158>)
 80012b4:	f001 fedc 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = REGEN_EN_Pin|BRK_IN_Pin|RVRS_EN_Pin;
 80012b8:	230e      	movs	r3, #14
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <MX_GPIO_Init+0x15c>)
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4832      	ldr	r0, [pc, #200]	; (8001394 <MX_GPIO_Init+0x158>)
 80012cc:	f001 fed0 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NEXT_SCREEN_Pin|CRUISE_DIS_Pin|CRUISE_UP_Pin|CRUISE_DOWN_Pin;
 80012d0:	23f0      	movs	r3, #240	; 0xf0
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <MX_GPIO_Init+0x160>)
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d8:	2302      	movs	r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	482c      	ldr	r0, [pc, #176]	; (8001394 <MX_GPIO_Init+0x158>)
 80012e4:	f001 fec4 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ENC_AS_Pin|ENC_BS_Pin|ENC_ZS_Pin;
 80012e8:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4825      	ldr	r0, [pc, #148]	; (8001394 <MX_GPIO_Init+0x158>)
 80012fe:	f001 feb7 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CRUISE_STAT_Pin;
 8001302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CRUISE_STAT_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	481e      	ldr	r0, [pc, #120]	; (8001394 <MX_GPIO_Init+0x158>)
 800131c:	f001 fea8 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_YS_Pin;
 8001320:	2308      	movs	r3, #8
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_YS_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	481b      	ldr	r0, [pc, #108]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001334:	f001 fe9c 	bl	8003070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2105      	movs	r1, #5
 800133c:	2007      	movs	r0, #7
 800133e:	f001 fb2c 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001342:	2007      	movs	r0, #7
 8001344:	f001 fb45 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2105      	movs	r1, #5
 800134c:	2008      	movs	r0, #8
 800134e:	f001 fb24 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001352:	2008      	movs	r0, #8
 8001354:	f001 fb3d 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2105      	movs	r1, #5
 800135c:	2009      	movs	r0, #9
 800135e:	f001 fb1c 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001362:	2009      	movs	r0, #9
 8001364:	f001 fb35 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2105      	movs	r1, #5
 800136c:	200a      	movs	r0, #10
 800136e:	f001 fb14 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001372:	200a      	movs	r0, #10
 8001374:	f001 fb2d 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2105      	movs	r1, #5
 800137c:	2017      	movs	r0, #23
 800137e:	f001 fb0c 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001382:	2017      	movs	r0, #23
 8001384:	f001 fb25 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40010800 	.word	0x40010800
 8001398:	10310000 	.word	0x10310000
 800139c:	10110000 	.word	0x10110000
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80013a8:	f000 fa18 	bl	80017dc <HAL_Init>

    /* USER CODE BEGIN Init */

    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f001 fae9 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80013b2:	f000 f825 	bl	8001400 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80013b6:	f7ff ff41 	bl	800123c <MX_GPIO_Init>
    MX_DMA_Init();
 80013ba:	f7ff fb71 	bl	8000aa0 <MX_DMA_Init>
    MX_CAN_Init();
 80013be:	f7ff fab1 	bl	8000924 <MX_CAN_Init>
    MX_ADC1_Init();
 80013c2:	f7ff fa09 	bl	80007d8 <MX_ADC1_Init>

    /* USER CODE BEGIN 2 */

    // <----- CAN setup ----->

	CAN_Filter_Init();
 80013c6:	f7ff fb43 	bl	8000a50 <CAN_Filter_Init>
	HAL_CAN_ConfigFilter(&hcan, &mcb_filter);
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <main+0x4c>)
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <main+0x50>)
 80013ce:	f000 ff0f 	bl	80021f0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <main+0x50>)
 80013d4:	f000 ffd5 	bl	8002382 <HAL_CAN_Start>

    // <----- ADC setup ----->

    // ISR is the HAL_ADC_ConvCpltCallback function
    HAL_ADC_Start_DMA(&hadc1, &regen_value, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	4907      	ldr	r1, [pc, #28]	; (80013f8 <main+0x54>)
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <main+0x58>)
 80013de:	f000 fb19 	bl	8001a14 <HAL_ADC_Start_DMA>

    /* USER CODE END 2 */

    osKernelInitialize();
 80013e2:	f002 ff87 	bl	80042f4 <osKernelInitialize>
    MX_FREERTOS_Init();
 80013e6:	f7ff fc09 	bl	8000bfc <MX_FREERTOS_Init>
    osKernelStart();
 80013ea:	f002 ffb5 	bl	8004358 <osKernelStart>

    // should not reach here after kernel is started
    while (1);
 80013ee:	e7fe      	b.n	80013ee <main+0x4a>
 80013f0:	20004f4c 	.word	0x20004f4c
 80013f4:	20004f20 	.word	0x20004f20
 80013f8:	20004fc0 	.word	0x20004fc0
 80013fc:	20004e90 	.word	0x20004e90

08001400 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140a:	2228      	movs	r2, #40	; 0x28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f006 ffb0 	bl	8008374 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2301      	movs	r3, #1
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001442:	2301      	movs	r3, #1
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001446:	2302      	movs	r3, #2
 8001448:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144e:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001450:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145a:	4618      	mov	r0, r3
 800145c:	f001 ffee 	bl	800343c <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x6a>
    {
        Error_Handler();
 8001466:	f000 f83b 	bl	80014e0 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146a:	230f      	movs	r3, #15
 800146c:	61fb      	str	r3, [r7, #28]
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2102      	movs	r1, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fa58 	bl	800393c <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8001492:	f000 f825 	bl	80014e0 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001496:	2302      	movs	r3, #2
 8001498:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800149a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800149e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fc00 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xb2>
    {
        Error_Handler();
 80014ae:	f000 f817 	bl	80014e0 <Error_Handler>
    }
}
 80014b2:	bf00      	nop
 80014b4:	3758      	adds	r7, #88	; 0x58
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 80014ce:	f000 f99b 	bl	8001808 <HAL_IncTick>
    }
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40013400 	.word	0x40013400

080014e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_MspInit+0x68>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_MspInit+0x68>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_MspInit+0x68>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_MspInit+0x68>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_MspInit+0x68>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x68>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	f06f 0001 	mvn.w	r0, #1
 800152a:	f001 fa36 	bl	800299a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_MspInit+0x6c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_MspInit+0x6c>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000

0800155c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority ,0);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	202c      	movs	r0, #44	; 0x2c
 8001572:	f001 fa12 	bl	800299a <HAL_NVIC_SetPriority>

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001576:	202c      	movs	r0, #44	; 0x2c
 8001578:	f001 fa2b 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_InitTick+0x9c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_InitTick+0x9c>)
 8001582:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_InitTick+0x9c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001594:	f107 0210 	add.w	r2, r7, #16
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fb34 	bl	8003c0c <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80015a4:	f002 fb1e 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 80015a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_InitTick+0xa0>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_InitTick+0xa4>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_InitTick+0xa8>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_InitTick+0xa4>)
 80015c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_InitTick+0xa4>)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_InitTick+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_InitTick+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <HAL_InitTick+0xa4>)
 80015da:	f002 fc1b 	bl	8003e14 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_InitTick+0xa4>)
 80015e6:	f002 fc6d 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	20004fc8 	.word	0x20004fc8
 8001604:	40013400 	.word	0x40013400

08001608 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

    /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8001618:	e7fe      	b.n	8001618 <HardFault_Handler+0x4>

0800161a <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 800161e:	e7fe      	b.n	800161e <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8001624:	e7fe      	b.n	8001624 <BusFault_Handler+0x4>

08001626 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 800162a:	e7fe      	b.n	800162a <UsageFault_Handler+0x4>

0800162c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <EXTI1_IRQHandler>:

/**
 * @brief This function handles the REGEN_EN interrupt.
 */
void EXTI1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI1_IRQn 0 */

    // EXTI1 corresponds to the REGEN_EN pin
    event_flags.regen_enable = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin);
 800163c:	2102      	movs	r1, #2
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <EXTI1_IRQHandler+0x20>)
 8001640:	f001 feaa 	bl	8003398 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <EXTI1_IRQHandler+0x24>)
 800164a:	701a      	strb	r2, [r3, #0]

    /* USER CODE END EXTI1_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800164c:	2002      	movs	r0, #2
 800164e:	f001 fed3 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40010800 	.word	0x40010800
 800165c:	20004fac 	.word	0x20004fac

08001660 <EXTI2_IRQHandler>:

/**
 * @brief This function handles the BRK_IN interrupt.
 */
void EXTI2_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI2_IRQn 0 */

    // EXTI2 corresponds to the BRK_IN pin

    event_flags.brake_in = HAL_GPIO_ReadPin(BRK_IN_GPIO_Port, BRK_IN_Pin);
 8001664:	2104      	movs	r1, #4
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <EXTI2_IRQHandler+0x24>)
 8001668:	f001 fe96 	bl	8003398 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <EXTI2_IRQHandler+0x28>)
 8001672:	70da      	strb	r2, [r3, #3]

    // when brake_in goes high, cruise control should be disengaged
    event_flags.cruise_status = DISABLE;
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <EXTI2_IRQHandler+0x28>)
 8001676:	2200      	movs	r2, #0
 8001678:	709a      	strb	r2, [r3, #2]

    /* USER CODE END EXTI2_IRQn 0 */

    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800167a:	2004      	movs	r0, #4
 800167c:	f001 febc 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40010800 	.word	0x40010800
 8001688:	20004fac 	.word	0x20004fac

0800168c <EXTI3_IRQHandler>:

/**
 * @brief This function handles the RVRS_EN interrupt.
 */
void EXTI3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI3_IRQn 0 */

    // EXTI3 corresponds to the RVRS_EN pin

    event_flags.reverse_enable = HAL_GPIO_ReadPin(RVRS_EN_GPIO_Port, RVRS_EN_Pin);
 8001690:	2108      	movs	r1, #8
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <EXTI3_IRQHandler+0x20>)
 8001694:	f001 fe80 	bl	8003398 <HAL_GPIO_ReadPin>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <EXTI3_IRQHandler+0x24>)
 800169e:	705a      	strb	r2, [r3, #1]

    /* USER CODE END EXTI3_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016a0:	2008      	movs	r0, #8
 80016a2:	f001 fea9 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010800 	.word	0x40010800
 80016b0:	20004fac 	.word	0x20004fac

080016b4 <EXTI4_IRQHandler>:

/**
 * @brief This function handles the NEXT_SCREEN interrupt.
 */
void EXTI4_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI4_IRQn 0 */

    // EXTI4 corresponds to the NEXT_SCREEN pin

    osSemaphoreRelease(nextScreenSemaphoreHandle);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <EXTI4_IRQHandler+0x18>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 f9ab 	bl	8004a18 <osSemaphoreRelease>

    /* USER CODE END EXTI4_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016c2:	2010      	movs	r0, #16
 80016c4:	f001 fe98 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20004f78 	.word	0x20004f78

080016d0 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_adc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Channel1_IRQHandler+0x10>)
 80016d6:	f001 fa61 	bl	8002b9c <HAL_DMA_IRQHandler>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20004ec0 	.word	0x20004ec0

080016e4 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI9_5_IRQn 0 */

    // checks if the CRUISE_DIS external interrupt is triggered
    if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DIS_Pin))
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <EXTI9_5_IRQHandler+0x80>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <EXTI9_5_IRQHandler+0x18>
    {
        event_flags.cruise_status = DISABLE;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <EXTI9_5_IRQHandler+0x84>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	709a      	strb	r2, [r3, #2]
 80016fa:	e028      	b.n	800174e <EXTI9_5_IRQHandler+0x6a>
    }

    // checks if the CRUISE_UP external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_UP_Pin))
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <EXTI9_5_IRQHandler+0x80>)
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <EXTI9_5_IRQHandler+0x42>
    {
        if ((cruise_value + CRUISE_INCREMENT_VALUE) > CRUISE_MAX)
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b63      	cmp	r3, #99	; 0x63
 800170e:	d903      	bls.n	8001718 <EXTI9_5_IRQHandler+0x34>
        {
            cruise_value = CRUISE_MAX;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 8001712:	2264      	movs	r2, #100	; 0x64
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e01a      	b.n	800174e <EXTI9_5_IRQHandler+0x6a>
        }
        else
        {
            cruise_value += CRUISE_INCREMENT_VALUE;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	e013      	b.n	800174e <EXTI9_5_IRQHandler+0x6a>
        }
    }

    // checks if the CRUISE_DOWN external interrupt is triggered
    else if (__HAL_GPIO_EXTI_GET_FLAG(CRUISE_DOWN_Pin))
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <EXTI9_5_IRQHandler+0x80>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <EXTI9_5_IRQHandler+0x6a>
    {
        if ((cruise_value - CRUISE_INCREMENT_VALUE) < CRUISE_MIN)
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <EXTI9_5_IRQHandler+0x5e>
        {
            cruise_value = CRUISE_MIN;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e005      	b.n	800174e <EXTI9_5_IRQHandler+0x6a>
        }
        else
        {
            cruise_value -= CRUISE_INCREMENT_VALUE;
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3b01      	subs	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <EXTI9_5_IRQHandler+0x88>)
 800174c:	701a      	strb	r2, [r3, #0]
        }
    }

    /* USER CODE END EXTI9_5_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800174e:	2020      	movs	r0, #32
 8001750:	f001 fe52 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001754:	2040      	movs	r0, #64	; 0x40
 8001756:	f001 fe4f 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800175a:	2080      	movs	r0, #128	; 0x80
 800175c:	f001 fe4c 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40010400 	.word	0x40010400
 8001768:	20004fac 	.word	0x20004fac
 800176c:	20004fa8 	.word	0x20004fa8

08001770 <TIM8_UP_IRQHandler>:

/**
 * @brief This function handles TIM8 update interrupt.
 */
void TIM8_UP_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim8);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM8_UP_IRQHandler+0x10>)
 8001776:	f002 fc05 	bl	8003f84 <HAL_TIM_IRQHandler>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20004fc8 	.word	0x20004fc8

08001784 <SystemInit>:
  *         SystemCoreClock variable.
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit(void) {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001790:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001792:	e003      	b.n	800179c <LoopCopyDataInit>

08001794 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001796:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001798:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800179a:	3104      	adds	r1, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017a4:	d3f6      	bcc.n	8001794 <CopyDataInit>
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017a8:	e002      	b.n	80017b0 <LoopFillZerobss>

080017aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017ac:	f842 3b04 	str.w	r3, [r2], #4

080017b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017b4:	d3f9      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b6:	f7ff ffe5 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f006 fda7 	bl	800830c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017be:	f7ff fdf1 	bl	80013a4 <main>
  bx lr
 80017c2:	4770      	bx	lr
  ldr r3, =_sidata
 80017c4:	080087e8 	.word	0x080087e8
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017cc:	200000a4 	.word	0x200000a4
  ldr r2, =_sbss
 80017d0:	200000a4 	.word	0x200000a4
  ldr r3, = _ebss
 80017d4:	20005060 	.word	0x20005060

080017d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_2_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x28>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x28>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f001 f8c9 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff feb2 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fe78 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40022000 	.word	0x40022000

08001808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x1c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_IncTick+0x20>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_IncTick+0x20>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000038 	.word	0x20000038
 8001828:	20005010 	.word	0x20005010

0800182c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <HAL_GetTick+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20005010 	.word	0x20005010

08001840 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0ce      	b.n	8001a00 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe ffe8 	bl	8000854 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fb11 	bl	8001eac <ADC_ConversionStop_Disable>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 80a9 	bne.w	80019ee <HAL_ADC_Init+0x1ae>
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80a5 	bne.w	80019ee <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ac:	f023 0302 	bic.w	r3, r3, #2
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4951      	ldr	r1, [pc, #324]	; (8001a08 <HAL_ADC_Init+0x1c8>)
 80018c2:	428b      	cmp	r3, r1
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_Init+0x9c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_Init+0x96>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	e004      	b.n	80018e0 <HAL_ADC_Init+0xa0>
 80018d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80018da:	e001      	b.n	80018e0 <HAL_ADC_Init+0xa0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7b1b      	ldrb	r3, [r3, #12]
 80018e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f8:	d003      	beq.n	8001902 <HAL_ADC_Init+0xc2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_ADC_Init+0xc8>
 8001902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001906:	e000      	b.n	800190a <HAL_ADC_Init+0xca>
 8001908:	2300      	movs	r3, #0
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7d1b      	ldrb	r3, [r3, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d119      	bne.n	800194c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	3b01      	subs	r3, #1
 8001926:	035a      	lsls	r2, r3, #13
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	e00b      	b.n	800194c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	f043 0201 	orr.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	430a      	orrs	r2, r1
 800195e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_ADC_Init+0x1cc>)
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	430b      	orrs	r3, r1
 8001972:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197c:	d003      	beq.n	8001986 <HAL_ADC_Init+0x146>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d104      	bne.n	8001990 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	3b01      	subs	r3, #1
 800198c:	051b      	lsls	r3, r3, #20
 800198e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_ADC_Init+0x1d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ca:	e018      	b.n	80019fe <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f023 0312 	bic.w	r3, r3, #18
 80019d4:	f043 0210 	orr.w	r2, r3, #16
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40013c00 	.word	0x40013c00
 8001a0c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a10:	ff1f0efe 	.word	0xff1f0efe

08001a14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a64      	ldr	r2, [pc, #400]	; (8001bbc <HAL_ADC_Start_DMA+0x1a8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d004      	beq.n	8001a38 <HAL_ADC_Start_DMA+0x24>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d106      	bne.n	8001a46 <HAL_ADC_Start_DMA+0x32>
 8001a38:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <HAL_ADC_Start_DMA+0x1a8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 80b3 	bne.w	8001bac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x40>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e0ae      	b.n	8001bb2 <HAL_ADC_Start_DMA+0x19e>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f9cb 	bl	8001df8 <ADC_Enable>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 809a 	bne.w	8001ba2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4e      	ldr	r2, [pc, #312]	; (8001bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_Start_DMA+0x84>
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_ADC_Start_DMA+0x1a8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d115      	bne.n	8001ac4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d026      	beq.n	8001b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac2:	e01d      	b.n	8001b00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a39      	ldr	r2, [pc, #228]	; (8001bbc <HAL_ADC_Start_DMA+0x1a8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_Start_DMA+0xd0>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a38      	ldr	r2, [pc, #224]	; (8001bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10d      	bne.n	8001b00 <HAL_ADC_Start_DMA+0xec>
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_ADC_Start_DMA+0x1a8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001af8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	f023 0206 	bic.w	r2, r3, #6
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b18:	e002      	b.n	8001b20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a25      	ldr	r2, [pc, #148]	; (8001bc4 <HAL_ADC_Start_DMA+0x1b0>)
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a24      	ldr	r2, [pc, #144]	; (8001bc8 <HAL_ADC_Start_DMA+0x1b4>)
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_ADC_Start_DMA+0x1b8>)
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a18      	ldr	r0, [r3, #32]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	334c      	adds	r3, #76	; 0x4c
 8001b64:	4619      	mov	r1, r3
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f000 ffb7 	bl	8002adc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b7c:	d108      	bne.n	8001b90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b8e:	e00f      	b.n	8001bb0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ba0:	e006      	b.n	8001bb0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001baa:	e001      	b.n	8001bb0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012400 	.word	0x40012400
 8001bc0:	40012800 	.word	0x40012800
 8001bc4:	08001f2f 	.word	0x08001f2f
 8001bc8:	08001fab 	.word	0x08001fab
 8001bcc:	08001fc7 	.word	0x08001fc7

08001bd0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x20>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0dc      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x1da>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d81c      	bhi.n	8001c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	221f      	movs	r2, #31
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c70:	e03c      	b.n	8001cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d81c      	bhi.n	8001cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b23      	subs	r3, #35	; 0x23
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	4019      	ands	r1, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b23      	subs	r3, #35	; 0x23
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb2:	e01b      	b.n	8001cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	; 0x41
 8001cc6:	221f      	movs	r2, #31
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b41      	subs	r3, #65	; 0x41
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d91c      	bls.n	8001d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	2207      	movs	r2, #7
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6898      	ldr	r0, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b1e      	subs	r3, #30
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	e019      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6919      	ldr	r1, [r3, #16]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	2207      	movs	r2, #7
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	4019      	ands	r1, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6898      	ldr	r0, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d132      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_ADC_ConfigChannel+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d125      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d126      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d11a      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x1b2>
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40012400 	.word	0x40012400
 8001df0:	20000030 	.word	0x20000030
 8001df4:	431bde83 	.word	0x431bde83

08001df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d040      	beq.n	8001e98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <ADC_Enable+0xac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <ADC_Enable+0xb0>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e34:	e002      	b.n	8001e3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e42:	f7ff fcf3 	bl	800182c <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e48:	e01f      	b.n	8001e8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e4a:	f7ff fcef 	bl	800182c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d918      	bls.n	8001e8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d011      	beq.n	8001e8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	f043 0210 	orr.w	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e007      	b.n	8001e9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d1d8      	bne.n	8001e4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000030 	.word	0x20000030
 8001ea8:	431bde83 	.word	0x431bde83

08001eac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d12e      	bne.n	8001f24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fca9 	bl	800182c <HAL_GetTick>
 8001eda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001edc:	e01b      	b.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ede:	f7ff fca5 	bl	800182c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d914      	bls.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d10d      	bne.n	8001f16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d0dc      	beq.n	8001ede <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d127      	bne.n	8001f98 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f62:	d115      	bne.n	8001f90 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d111      	bne.n	8001f90 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fe1d 	bl	8001bd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f96:	e004      	b.n	8001fa2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fe12 	bl	8001be2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fe01 	bl	8001bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0ed      	b.n	80021e8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe fcb9 	bl	8000990 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202e:	f7ff fbfd 	bl	800182c <HAL_GetTick>
 8002032:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002034:	e012      	b.n	800205c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002036:	f7ff fbf9 	bl	800182c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b0a      	cmp	r3, #10
 8002042:	d90b      	bls.n	800205c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2205      	movs	r2, #5
 8002054:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0c5      	b.n	80021e8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0e5      	beq.n	8002036 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0202 	bic.w	r2, r2, #2
 8002078:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800207a:	f7ff fbd7 	bl	800182c <HAL_GetTick>
 800207e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002080:	e012      	b.n	80020a8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002082:	f7ff fbd3 	bl	800182c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b0a      	cmp	r3, #10
 800208e:	d90b      	bls.n	80020a8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2205      	movs	r2, #5
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e09f      	b.n	80021e8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e5      	bne.n	8002082 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e1b      	ldrb	r3, [r3, #24]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d108      	bne.n	80020d0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e007      	b.n	80020e0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7e5b      	ldrb	r3, [r3, #25]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e007      	b.n	800210a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e9b      	ldrb	r3, [r3, #26]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e007      	b.n	8002134 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0220 	bic.w	r2, r2, #32
 8002132:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7edb      	ldrb	r3, [r3, #27]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e007      	b.n	800215e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0210 	orr.w	r2, r2, #16
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7f1b      	ldrb	r3, [r3, #28]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0208 	orr.w	r2, r2, #8
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0208 	bic.w	r2, r2, #8
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7f5b      	ldrb	r3, [r3, #29]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0204 	orr.w	r2, r2, #4
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e007      	b.n	80021b2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0204 	bic.w	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	ea42 0103 	orr.w	r1, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	1e5a      	subs	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002206:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d003      	beq.n	8002216 <HAL_CAN_ConfigFilter+0x26>
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b02      	cmp	r3, #2
 8002212:	f040 80aa 	bne.w	800236a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2201      	movs	r2, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	401a      	ands	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d123      	bne.n	8002298 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002272:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3248      	adds	r2, #72	; 0x48
 8002278:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800228c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800228e:	6979      	ldr	r1, [r7, #20]
 8002290:	3348      	adds	r3, #72	; 0x48
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d122      	bne.n	80022e6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3248      	adds	r2, #72	; 0x48
 80022c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	3348      	adds	r3, #72	; 0x48
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002300:	e007      	b.n	8002312 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	431a      	orrs	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	401a      	ands	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800232c:	e007      	b.n	800233e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	431a      	orrs	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	431a      	orrs	r2, r3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800235c:	f023 0201 	bic.w	r2, r3, #1
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e006      	b.n	8002378 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d12e      	bne.n	80023f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ae:	f7ff fa3d 	bl	800182c <HAL_GetTick>
 80023b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023b4:	e012      	b.n	80023dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023b6:	f7ff fa39 	bl	800182c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d90b      	bls.n	80023dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e012      	b.n	8002402 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e5      	bne.n	80023b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e006      	b.n	8002402 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800240a:	b480      	push	{r7}
 800240c:	b089      	sub	sp, #36	; 0x24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002428:	7ffb      	ldrb	r3, [r7, #31]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d003      	beq.n	8002436 <HAL_CAN_AddTxMessage+0x2c>
 800242e:	7ffb      	ldrb	r3, [r7, #31]
 8002430:	2b02      	cmp	r3, #2
 8002432:	f040 80b8 	bne.w	80025a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a0 	beq.w	8002596 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	0e1b      	lsrs	r3, r3, #24
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d907      	bls.n	8002476 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e09e      	b.n	80025b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002476:	2201      	movs	r2, #1
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10d      	bne.n	80024a4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002492:	68f9      	ldr	r1, [r7, #12]
 8002494:	6809      	ldr	r1, [r1, #0]
 8002496:	431a      	orrs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3318      	adds	r3, #24
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	440b      	add	r3, r1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e00f      	b.n	80024c4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80024b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3318      	adds	r3, #24
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	440b      	add	r3, r1
 80024c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3318      	adds	r3, #24
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	440b      	add	r3, r1
 80024d4:	3304      	adds	r3, #4
 80024d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	7d1b      	ldrb	r3, [r3, #20]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d111      	bne.n	8002504 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3318      	adds	r3, #24
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6811      	ldr	r1, [r2, #0]
 80024f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3318      	adds	r3, #24
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	440b      	add	r3, r1
 8002500:	3304      	adds	r3, #4
 8002502:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3307      	adds	r3, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	061a      	lsls	r2, r3, #24
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3306      	adds	r3, #6
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3305      	adds	r3, #5
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	4313      	orrs	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	3204      	adds	r2, #4
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	4610      	mov	r0, r2
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6811      	ldr	r1, [r2, #0]
 800252c:	ea43 0200 	orr.w	r2, r3, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	440b      	add	r3, r1
 8002536:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800253a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3303      	adds	r3, #3
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	061a      	lsls	r2, r3, #24
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3302      	adds	r3, #2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3301      	adds	r3, #1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	4313      	orrs	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	4610      	mov	r0, r2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6811      	ldr	r1, [r2, #0]
 8002562:	ea43 0200 	orr.w	r2, r3, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	440b      	add	r3, r1
 800256c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002570:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3318      	adds	r3, #24
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	6811      	ldr	r1, [r2, #0]
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3318      	adds	r3, #24
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	440b      	add	r3, r1
 8002590:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e00e      	b.n	80025b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e006      	b.n	80025b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3724      	adds	r7, #36	; 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d003      	beq.n	80025e2 <HAL_CAN_GetRxMessage+0x24>
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 80f3 	bne.w	80027c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10e      	bne.n	8002606 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0e7      	b.n	80027d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d107      	bne.n	8002624 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0d8      	b.n	80027d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	331b      	adds	r3, #27
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0204 	and.w	r2, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	331b      	adds	r3, #27
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0d5b      	lsrs	r3, r3, #21
 8002652:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	331b      	adds	r3, #27
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	331b      	adds	r3, #27
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0202 	and.w	r2, r3, #2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	331b      	adds	r3, #27
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 020f 	and.w	r2, r3, #15
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	331b      	adds	r3, #27
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	331b      	adds	r3, #27
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	3304      	adds	r3, #4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	4413      	add	r3, r2
 80026dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0a1a      	lsrs	r2, r3, #8
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4413      	add	r3, r2
 800270c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0c1a      	lsrs	r2, r3, #16
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3302      	adds	r3, #2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0e1a      	lsrs	r2, r3, #24
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3303      	adds	r3, #3
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3304      	adds	r3, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	4413      	add	r3, r2
 8002758:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0a1a      	lsrs	r2, r3, #8
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	3305      	adds	r3, #5
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4413      	add	r3, r2
 8002772:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0c1a      	lsrs	r2, r3, #16
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3306      	adds	r3, #6
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	4413      	add	r3, r2
 800278c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e1a      	lsrs	r2, r3, #24
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3307      	adds	r3, #7
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	e007      	b.n	80027c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e006      	b.n	80027d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d002      	beq.n	8002802 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80027fc:	7afb      	ldrb	r3, [r7, #11]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d10f      	bne.n	8002822 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e005      	b.n	8002822 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
	...

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4906      	ldr	r1, [pc, #24]	; (80028c8 <__NVIC_EnableIRQ+0x34>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff4f 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff64 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ffb2 	bl	8002920 <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff81 	bl	80028cc <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff57 	bl	8002894 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e059      	b.n	8002aba <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_DMA_Init+0xd4>)
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d80f      	bhi.n	8002a32 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_DMA_Init+0xd8>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_DMA_Init+0xdc>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <HAL_DMA_Init+0xe0>)
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a30:	e00e      	b.n	8002a50 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_DMA_Init+0xe4>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a23      	ldr	r2, [pc, #140]	; (8002acc <HAL_DMA_Init+0xdc>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_DMA_Init+0xe8>)
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40020407 	.word	0x40020407
 8002ac8:	bffdfff8 	.word	0xbffdfff8
 8002acc:	cccccccd 	.word	0xcccccccd
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	bffdfbf8 	.word	0xbffdfbf8
 8002ad8:	40020400 	.word	0x40020400

08002adc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Start_IT+0x20>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e04a      	b.n	8002b92 <HAL_DMA_Start_IT+0xb6>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d13a      	bne.n	8002b84 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa6e 	bl	8003014 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 020e 	orr.w	r2, r2, #14
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e00f      	b.n	8002b72 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0204 	bic.w	r2, r2, #4
 8002b60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 020a 	orr.w	r2, r2, #10
 8002b70:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e005      	b.n	8002b90 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2204      	movs	r2, #4
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80d6 	beq.w	8002d72 <HAL_DMA_IRQHandler+0x1d6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80d0 	beq.w	8002d72 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b9b      	ldr	r3, [pc, #620]	; (8002e64 <HAL_DMA_IRQHandler+0x2c8>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d958      	bls.n	8002cae <HAL_DMA_IRQHandler+0x112>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a99      	ldr	r2, [pc, #612]	; (8002e68 <HAL_DMA_IRQHandler+0x2cc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d04f      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x10a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a98      	ldr	r2, [pc, #608]	; (8002e6c <HAL_DMA_IRQHandler+0x2d0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d048      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x106>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a96      	ldr	r2, [pc, #600]	; (8002e70 <HAL_DMA_IRQHandler+0x2d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d040      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x100>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a95      	ldr	r2, [pc, #596]	; (8002e74 <HAL_DMA_IRQHandler+0x2d8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d038      	beq.n	8002c96 <HAL_DMA_IRQHandler+0xfa>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a93      	ldr	r2, [pc, #588]	; (8002e78 <HAL_DMA_IRQHandler+0x2dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d030      	beq.n	8002c90 <HAL_DMA_IRQHandler+0xf4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a92      	ldr	r2, [pc, #584]	; (8002e7c <HAL_DMA_IRQHandler+0x2e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d028      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xee>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a89      	ldr	r2, [pc, #548]	; (8002e64 <HAL_DMA_IRQHandler+0x2c8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d020      	beq.n	8002c84 <HAL_DMA_IRQHandler+0xe8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a8e      	ldr	r2, [pc, #568]	; (8002e80 <HAL_DMA_IRQHandler+0x2e4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d019      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xe4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a8c      	ldr	r2, [pc, #560]	; (8002e84 <HAL_DMA_IRQHandler+0x2e8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d012      	beq.n	8002c7c <HAL_DMA_IRQHandler+0xe0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a8b      	ldr	r2, [pc, #556]	; (8002e88 <HAL_DMA_IRQHandler+0x2ec>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00a      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xda>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a89      	ldr	r2, [pc, #548]	; (8002e8c <HAL_DMA_IRQHandler+0x2f0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d102      	bne.n	8002c70 <HAL_DMA_IRQHandler+0xd4>
 8002c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c6e:	e01b      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c74:	e018      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	e015      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	e013      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c80:	2304      	movs	r3, #4
 8002c82:	e011      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c88:	e00e      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c8e:	e00b      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c94:	e008      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c9a:	e005      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca0:	e002      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002ca2:	2340      	movs	r3, #64	; 0x40
 8002ca4:	e000      	b.n	8002ca8 <HAL_DMA_IRQHandler+0x10c>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	4a79      	ldr	r2, [pc, #484]	; (8002e90 <HAL_DMA_IRQHandler+0x2f4>)
 8002caa:	6053      	str	r3, [r2, #4]
 8002cac:	e057      	b.n	8002d5e <HAL_DMA_IRQHandler+0x1c2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6d      	ldr	r2, [pc, #436]	; (8002e68 <HAL_DMA_IRQHandler+0x2cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04f      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x1bc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6b      	ldr	r2, [pc, #428]	; (8002e6c <HAL_DMA_IRQHandler+0x2d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d048      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x1b8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_DMA_IRQHandler+0x2d4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d040      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x1b2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a68      	ldr	r2, [pc, #416]	; (8002e74 <HAL_DMA_IRQHandler+0x2d8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d038      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x1ac>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_DMA_IRQHandler+0x2dc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d030      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1a6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <HAL_DMA_IRQHandler+0x2e0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d028      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x1a0>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a5d      	ldr	r2, [pc, #372]	; (8002e64 <HAL_DMA_IRQHandler+0x2c8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d020      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x19a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a61      	ldr	r2, [pc, #388]	; (8002e80 <HAL_DMA_IRQHandler+0x2e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x196>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a60      	ldr	r2, [pc, #384]	; (8002e84 <HAL_DMA_IRQHandler+0x2e8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d012      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x192>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5e      	ldr	r2, [pc, #376]	; (8002e88 <HAL_DMA_IRQHandler+0x2ec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00a      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x18c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_DMA_IRQHandler+0x2f0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x186>
 8002d1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d20:	e01b      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d26:	e018      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2c:	e015      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d2e:	2340      	movs	r3, #64	; 0x40
 8002d30:	e013      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d32:	2304      	movs	r3, #4
 8002d34:	e011      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d3a:	e00e      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d40:	e00b      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d46:	e008      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4c:	e005      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d52:	e002      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	e000      	b.n	8002d5a <HAL_DMA_IRQHandler+0x1be>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	; (8002e94 <HAL_DMA_IRQHandler+0x2f8>)
 8002d5c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 8136 	beq.w	8002fd4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d70:	e130      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2202      	movs	r2, #2
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80f8 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x3d8>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 80f2 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 020a 	bic.w	r2, r2, #10
 8002dac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_DMA_IRQHandler+0x2c8>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d973      	bls.n	8002eaa <HAL_DMA_IRQHandler+0x30e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_DMA_IRQHandler+0x2cc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d06a      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x306>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_DMA_IRQHandler+0x2d0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d063      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x302>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <HAL_DMA_IRQHandler+0x2d4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d05b      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2fc>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_DMA_IRQHandler+0x2d8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d038      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x2c0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_DMA_IRQHandler+0x2dc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d030      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x2ba>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_DMA_IRQHandler+0x2e0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d028      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x2b4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_DMA_IRQHandler+0x2c8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d020      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2ae>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_DMA_IRQHandler+0x2e4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x2aa>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_DMA_IRQHandler+0x2e8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x2a6>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_DMA_IRQHandler+0x2ec>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00a      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2a0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_DMA_IRQHandler+0x2f0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x29a>
 8002e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e34:	e036      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3a:	e033      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e40:	e030      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e42:	2320      	movs	r3, #32
 8002e44:	e02e      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e02c      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4e:	e029      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e54:	e026      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5a:	e023      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e60:	e020      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e62:	bf00      	nop
 8002e64:	40020080 	.word	0x40020080
 8002e68:	40020008 	.word	0x40020008
 8002e6c:	4002001c 	.word	0x4002001c
 8002e70:	40020030 	.word	0x40020030
 8002e74:	40020044 	.word	0x40020044
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	4002006c 	.word	0x4002006c
 8002e80:	40020408 	.word	0x40020408
 8002e84:	4002041c 	.word	0x4002041c
 8002e88:	40020430 	.word	0x40020430
 8002e8c:	40020444 	.word	0x40020444
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40020000 	.word	0x40020000
 8002e98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9c:	e002      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e000      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x308>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	; (8002fe0 <HAL_DMA_IRQHandler+0x444>)
 8002ea6:	6053      	str	r3, [r2, #4]
 8002ea8:	e057      	b.n	8002f5a <HAL_DMA_IRQHandler+0x3be>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4d      	ldr	r2, [pc, #308]	; (8002fe4 <HAL_DMA_IRQHandler+0x448>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d04f      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x3b8>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a4b      	ldr	r2, [pc, #300]	; (8002fe8 <HAL_DMA_IRQHandler+0x44c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d048      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x3b4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <HAL_DMA_IRQHandler+0x450>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d040      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x3ae>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a48      	ldr	r2, [pc, #288]	; (8002ff0 <HAL_DMA_IRQHandler+0x454>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d038      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x3a8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a47      	ldr	r2, [pc, #284]	; (8002ff4 <HAL_DMA_IRQHandler+0x458>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d030      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x3a2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a45      	ldr	r2, [pc, #276]	; (8002ff8 <HAL_DMA_IRQHandler+0x45c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d028      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x39c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a44      	ldr	r2, [pc, #272]	; (8002ffc <HAL_DMA_IRQHandler+0x460>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d020      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x396>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_DMA_IRQHandler+0x464>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x392>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a41      	ldr	r2, [pc, #260]	; (8003004 <HAL_DMA_IRQHandler+0x468>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d012      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x38e>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3f      	ldr	r2, [pc, #252]	; (8003008 <HAL_DMA_IRQHandler+0x46c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00a      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x388>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3e      	ldr	r2, [pc, #248]	; (800300c <HAL_DMA_IRQHandler+0x470>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d102      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x382>
 8002f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f1c:	e01b      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f22:	e018      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f28:	e015      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e013      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e011      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f36:	e00e      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f3c:	e00b      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f42:	e008      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f48:	e005      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4e:	e002      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f50:	2320      	movs	r3, #32
 8002f52:	e000      	b.n	8002f56 <HAL_DMA_IRQHandler+0x3ba>
 8002f54:	2302      	movs	r3, #2
 8002f56:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <HAL_DMA_IRQHandler+0x474>)
 8002f58:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d034      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f72:	e02f      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2208      	movs	r2, #8
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d028      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x43a>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d023      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 020e 	bic.w	r2, r2, #14
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
    }
  }
  return;
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
}
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020008 	.word	0x40020008
 8002fe8:	4002001c 	.word	0x4002001c
 8002fec:	40020030 	.word	0x40020030
 8002ff0:	40020044 	.word	0x40020044
 8002ff4:	40020058 	.word	0x40020058
 8002ff8:	4002006c 	.word	0x4002006c
 8002ffc:	40020080 	.word	0x40020080
 8003000:	40020408 	.word	0x40020408
 8003004:	4002041c 	.word	0x4002041c
 8003008:	40020430 	.word	0x40020430
 800300c:	40020444 	.word	0x40020444
 8003010:	40020000 	.word	0x40020000

08003014 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d108      	bne.n	8003054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003052:	e007      	b.n	8003064 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e179      	b.n	8003378 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003084:	2201      	movs	r2, #1
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 8168 	bne.w	8003372 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4aa0      	ldr	r2, [pc, #640]	; (8003328 <HAL_GPIO_Init+0x2b8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d05e      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030ac:	4a9e      	ldr	r2, [pc, #632]	; (8003328 <HAL_GPIO_Init+0x2b8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d875      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030b2:	4a9e      	ldr	r2, [pc, #632]	; (800332c <HAL_GPIO_Init+0x2bc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d058      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030b8:	4a9c      	ldr	r2, [pc, #624]	; (800332c <HAL_GPIO_Init+0x2bc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d86f      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030be:	4a9c      	ldr	r2, [pc, #624]	; (8003330 <HAL_GPIO_Init+0x2c0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d052      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030c4:	4a9a      	ldr	r2, [pc, #616]	; (8003330 <HAL_GPIO_Init+0x2c0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d869      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ca:	4a9a      	ldr	r2, [pc, #616]	; (8003334 <HAL_GPIO_Init+0x2c4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04c      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030d0:	4a98      	ldr	r2, [pc, #608]	; (8003334 <HAL_GPIO_Init+0x2c4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d863      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030d6:	4a98      	ldr	r2, [pc, #608]	; (8003338 <HAL_GPIO_Init+0x2c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d046      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030dc:	4a96      	ldr	r2, [pc, #600]	; (8003338 <HAL_GPIO_Init+0x2c8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d85d      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d82a      	bhi.n	800313c <HAL_GPIO_Init+0xcc>
 80030e6:	2b12      	cmp	r3, #18
 80030e8:	d859      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_GPIO_Init+0x80>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800316b 	.word	0x0800316b
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003157 	.word	0x08003157
 80030fc:	08003199 	.word	0x08003199
 8003100:	0800319f 	.word	0x0800319f
 8003104:	0800319f 	.word	0x0800319f
 8003108:	0800319f 	.word	0x0800319f
 800310c:	0800319f 	.word	0x0800319f
 8003110:	0800319f 	.word	0x0800319f
 8003114:	0800319f 	.word	0x0800319f
 8003118:	0800319f 	.word	0x0800319f
 800311c:	0800319f 	.word	0x0800319f
 8003120:	0800319f 	.word	0x0800319f
 8003124:	0800319f 	.word	0x0800319f
 8003128:	0800319f 	.word	0x0800319f
 800312c:	0800319f 	.word	0x0800319f
 8003130:	0800319f 	.word	0x0800319f
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003161 	.word	0x08003161
 800313c:	4a7f      	ldr	r2, [pc, #508]	; (800333c <HAL_GPIO_Init+0x2cc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003142:	e02c      	b.n	800319e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	623b      	str	r3, [r7, #32]
          break;
 800314a:	e029      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	623b      	str	r3, [r7, #32]
          break;
 8003154:	e024      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	3308      	adds	r3, #8
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e01f      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	330c      	adds	r3, #12
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e01a      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003172:	2304      	movs	r3, #4
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e013      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003180:	2308      	movs	r3, #8
 8003182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	611a      	str	r2, [r3, #16]
          break;
 800318a:	e009      	b.n	80031a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800318c:	2308      	movs	r3, #8
 800318e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	615a      	str	r2, [r3, #20]
          break;
 8003196:	e003      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          break;
 800319e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2bff      	cmp	r3, #255	; 0xff
 80031a4:	d801      	bhi.n	80031aa <HAL_GPIO_Init+0x13a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_Init+0x13e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d802      	bhi.n	80031bc <HAL_GPIO_Init+0x14c>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	e002      	b.n	80031c2 <HAL_GPIO_Init+0x152>
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	3b08      	subs	r3, #8
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	210f      	movs	r1, #15
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	401a      	ands	r2, r3
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	431a      	orrs	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80c1 	beq.w	8003372 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031f0:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6193      	str	r3, [r2, #24]
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003208:	4a4e      	ldr	r2, [pc, #312]	; (8003344 <HAL_GPIO_Init+0x2d4>)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2d8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d01f      	beq.n	8003274 <HAL_GPIO_Init+0x204>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x2dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d019      	beq.n	8003270 <HAL_GPIO_Init+0x200>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a44      	ldr	r2, [pc, #272]	; (8003350 <HAL_GPIO_Init+0x2e0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d013      	beq.n	800326c <HAL_GPIO_Init+0x1fc>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_GPIO_Init+0x2e4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00d      	beq.n	8003268 <HAL_GPIO_Init+0x1f8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d007      	beq.n	8003264 <HAL_GPIO_Init+0x1f4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_GPIO_Init+0x2ec>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_GPIO_Init+0x1f0>
 800325c:	2305      	movs	r3, #5
 800325e:	e00a      	b.n	8003276 <HAL_GPIO_Init+0x206>
 8003260:	2306      	movs	r3, #6
 8003262:	e008      	b.n	8003276 <HAL_GPIO_Init+0x206>
 8003264:	2304      	movs	r3, #4
 8003266:	e006      	b.n	8003276 <HAL_GPIO_Init+0x206>
 8003268:	2303      	movs	r3, #3
 800326a:	e004      	b.n	8003276 <HAL_GPIO_Init+0x206>
 800326c:	2302      	movs	r3, #2
 800326e:	e002      	b.n	8003276 <HAL_GPIO_Init+0x206>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_GPIO_Init+0x206>
 8003274:	2300      	movs	r3, #0
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	f002 0203 	and.w	r2, r2, #3
 800327c:	0092      	lsls	r2, r2, #2
 800327e:	4093      	lsls	r3, r2
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003286:	492f      	ldr	r1, [pc, #188]	; (8003344 <HAL_GPIO_Init+0x2d4>)
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	492e      	ldr	r1, [pc, #184]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e006      	b.n	80032bc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	492a      	ldr	r1, [pc, #168]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4924      	ldr	r1, [pc, #144]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
 80032d4:	e006      	b.n	80032e4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	43db      	mvns	r3, r3
 80032de:	4920      	ldr	r1, [pc, #128]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d006      	beq.n	80032fe <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	491a      	ldr	r1, [pc, #104]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	43db      	mvns	r3, r3
 8003306:	4916      	ldr	r1, [pc, #88]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 8003308:	4013      	ands	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d025      	beq.n	8003364 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	4910      	ldr	r1, [pc, #64]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
 8003324:	e025      	b.n	8003372 <HAL_GPIO_Init+0x302>
 8003326:	bf00      	nop
 8003328:	10320000 	.word	0x10320000
 800332c:	10310000 	.word	0x10310000
 8003330:	10220000 	.word	0x10220000
 8003334:	10210000 	.word	0x10210000
 8003338:	10120000 	.word	0x10120000
 800333c:	10110000 	.word	0x10110000
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000
 8003348:	40010800 	.word	0x40010800
 800334c:	40010c00 	.word	0x40010c00
 8003350:	40011000 	.word	0x40011000
 8003354:	40011400 	.word	0x40011400
 8003358:	40011800 	.word	0x40011800
 800335c:	40011c00 	.word	0x40011c00
 8003360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_GPIO_Init+0x324>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	43db      	mvns	r3, r3
 800336c:	4909      	ldr	r1, [pc, #36]	; (8003394 <HAL_GPIO_Init+0x324>)
 800336e:	4013      	ands	r3, r2
 8003370:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	3301      	adds	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	f47f ae7e 	bne.w	8003084 <HAL_GPIO_Init+0x14>
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	372c      	adds	r7, #44	; 0x2c
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e001      	b.n	80033ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	807b      	strh	r3, [r7, #2]
 80033d2:	4613      	mov	r3, r2
 80033d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d6:	787b      	ldrb	r3, [r7, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033e2:	e003      	b.n	80033ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033e4:	887b      	ldrh	r3, [r7, #2]
 80033e6:	041a      	lsls	r2, r3, #16
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f806 	bl	8003428 <HAL_GPIO_EXTI_Callback>
  }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e26c      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8087 	beq.w	800356a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800345c:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d00c      	beq.n	8003482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003468:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d112      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
 8003474:	4b8c      	ldr	r3, [pc, #560]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d10b      	bne.n	800349a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d06c      	beq.n	8003568 <HAL_RCC_OscConfig+0x12c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d168      	bne.n	8003568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e246      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x76>
 80034a4:	4b80      	ldr	r3, [pc, #512]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7f      	ldr	r2, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e02e      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x98>
 80034ba:	4b7b      	ldr	r3, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7a      	ldr	r2, [pc, #488]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0xbc>
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a71      	ldr	r2, [pc, #452]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6e      	ldr	r2, [pc, #440]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xd4>
 80034f8:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a67      	ldr	r2, [pc, #412]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fe f988 	bl	800182c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f984 	bl	800182c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1fa      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xe4>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe f974 	bl	800182c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f970 	bl	800182c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e1e6      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x10c>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d063      	beq.n	800363e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003582:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b08      	cmp	r3, #8
 800358c:	d11c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d116      	bne.n	80035c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1ba      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4939      	ldr	r1, [pc, #228]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e03a      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe f929 	bl	800182c <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7fe f925 	bl	800182c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e19b      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4927      	ldr	r1, [pc, #156]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b26      	ldr	r3, [pc, #152]	; (80036ac <HAL_RCC_OscConfig+0x270>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe f908 	bl	800182c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003620:	f7fe f904 	bl	800182c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e17a      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d03a      	beq.n	80036c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d019      	beq.n	8003686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fe f8e8 	bl	800182c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fe f8e4 	bl	800182c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e15a      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800367e:	2001      	movs	r0, #1
 8003680:	f000 faf4 	bl	8003c6c <RCC_Delay>
 8003684:	e01c      	b.n	80036c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_RCC_OscConfig+0x274>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368c:	f7fe f8ce 	bl	800182c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003692:	e00f      	b.n	80036b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7fe f8ca 	bl	800182c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d908      	bls.n	80036b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e140      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	42420000 	.word	0x42420000
 80036b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b9e      	ldr	r3, [pc, #632]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e9      	bne.n	8003694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80a6 	beq.w	800381a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b97      	ldr	r3, [pc, #604]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	4b94      	ldr	r3, [pc, #592]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4a93      	ldr	r2, [pc, #588]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	61d3      	str	r3, [r2, #28]
 80036ea:	4b91      	ldr	r3, [pc, #580]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f6:	2301      	movs	r3, #1
 80036f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d118      	bne.n	8003738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800370c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003712:	f7fe f88b 	bl	800182c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371a:	f7fe f887 	bl	800182c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b64      	cmp	r3, #100	; 0x64
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0fd      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x312>
 8003740:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a7a      	ldr	r2, [pc, #488]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6213      	str	r3, [r2, #32]
 800374c:	e02d      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x334>
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a75      	ldr	r2, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6213      	str	r3, [r2, #32]
 8003762:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a72      	ldr	r2, [pc, #456]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	6213      	str	r3, [r2, #32]
 800376e:	e01c      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d10c      	bne.n	8003792 <HAL_RCC_OscConfig+0x356>
 8003778:	4b6d      	ldr	r3, [pc, #436]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a6c      	ldr	r2, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	4b6a      	ldr	r3, [pc, #424]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4a69      	ldr	r2, [pc, #420]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6213      	str	r3, [r2, #32]
 8003790:	e00b      	b.n	80037aa <HAL_RCC_OscConfig+0x36e>
 8003792:	4b67      	ldr	r3, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6213      	str	r3, [r2, #32]
 800379e:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d015      	beq.n	80037de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fe f83b 	bl	800182c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe f837 	bl	800182c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0ab      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b57      	ldr	r3, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCC_OscConfig+0x37e>
 80037dc:	e014      	b.n	8003808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fe f825 	bl	800182c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe f821 	bl	800182c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e095      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ee      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380e:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	4a47      	ldr	r2, [pc, #284]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8081 	beq.w	8003926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d061      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d146      	bne.n	80038c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fd fff5 	bl	800182c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fd fff1 	bl	800182c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e067      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	492d      	ldr	r1, [pc, #180]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a19      	ldr	r1, [r3, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	430b      	orrs	r3, r1
 8003892:	4927      	ldr	r1, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b27      	ldr	r3, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd ffc5 	bl	800182c <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fd ffc1 	bl	800182c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e037      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x46a>
 80038c4:	e02f      	b.n	8003926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_RCC_OscConfig+0x4fc>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fd ffae 	bl	800182c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd ffaa 	bl	800182c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e020      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x498>
 80038f2:	e018      	b.n	8003926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e013      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	429a      	cmp	r2, r3
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	42420060 	.word	0x42420060

0800393c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d0      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b67      	ldr	r3, [pc, #412]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4965      	ldr	r1, [pc, #404]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d040      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e073      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4936      	ldr	r1, [pc, #216]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fefe 	bl	800182c <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd fefa 	bl	800182c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e053      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d210      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4922      	ldr	r1, [pc, #136]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490a      	ldr	r1, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fd36 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08008768 	.word	0x08008768
 8003b08:	20000030 	.word	0x20000030
 8003b0c:	20000034 	.word	0x20000034

08003b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b490      	push	{r4, r7}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b16:	4b2a      	ldr	r3, [pc, #168]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b18:	1d3c      	adds	r4, r7, #4
 8003b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b20:	f240 2301 	movw	r3, #513	; 0x201
 8003b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d002      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d003      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x46>
 8003b4e:	e02d      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b52:	623b      	str	r3, [r7, #32]
      break;
 8003b54:	e02d      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	0c9b      	lsrs	r3, r3, #18
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b62:	4413      	add	r3, r2
 8003b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c5b      	lsrs	r3, r3, #17
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b82:	4413      	add	r3, r2
 8003b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4a0e      	ldr	r2, [pc, #56]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8e:	fb02 f203 	mul.w	r2, r2, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	623b      	str	r3, [r7, #32]
      break;
 8003baa:	e002      	b.n	8003bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bae:	623b      	str	r3, [r7, #32]
      break;
 8003bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3728      	adds	r7, #40	; 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc90      	pop	{r4, r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	080085e4 	.word	0x080085e4
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	007a1200 	.word	0x007a1200
 8003bcc:	003d0900 	.word	0x003d0900

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b02      	ldr	r3, [pc, #8]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	20000030 	.word	0x20000030

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be8:	f7ff fff2 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	0adb      	lsrs	r3, r3, #11
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4903      	ldr	r1, [pc, #12]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	08008778 	.word	0x08008778

08003c0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	220f      	movs	r2, #15
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_RCC_GetClockConfig+0x58>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0203 	and.w	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_RCC_GetClockConfig+0x58>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_GetClockConfig+0x58>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_GetClockConfig+0x58>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_GetClockConfig+0x5c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40022000 	.word	0x40022000

08003c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <RCC_Delay+0x34>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <RCC_Delay+0x38>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0a5b      	lsrs	r3, r3, #9
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c88:	bf00      	nop
  }
  while (Delay --);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e5a      	subs	r2, r3, #1
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f9      	bne.n	8003c88 <RCC_Delay+0x1c>
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	20000030 	.word	0x20000030
 8003ca4:	10624dd3 	.word	0x10624dd3

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d07d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a4b      	ldr	r2, [pc, #300]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
 8003ce0:	4b49      	ldr	r3, [pc, #292]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d118      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a42      	ldr	r2, [pc, #264]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d08:	f7fd fd90 	bl	800182c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d10:	f7fd fd8c 	bl	800182c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e06d      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d2e:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d02e      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d027      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d56:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5c:	4b2c      	ldr	r3, [pc, #176]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d62:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fd fd5b 	bl	800182c <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d78:	e00a      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fd fd57 	bl	800182c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e036      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ee      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4917      	ldr	r1, [pc, #92]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	490b      	ldr	r1, [pc, #44]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dea:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4904      	ldr	r1, [pc, #16]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	42420440 	.word	0x42420440

08003e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f839 	bl	8003eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 f9c2 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e044      	b.n	8003f66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_TIM_Base_Start_IT+0xac>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x6c>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x6c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d00e      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x6c>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_TIM_Base_Start_IT+0xb4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x6c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <HAL_TIM_Base_Start_IT+0xb8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x6c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d111      	bne.n	8003f54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d010      	beq.n	8003f64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	e007      	b.n	8003f64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40013400 	.word	0x40013400
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00

08003f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8ed 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8e0 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8ef 	bl	80041b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0204 	mvn.w	r2, #4
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8c3 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8b6 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8c5 	bl	80041b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b08      	cmp	r3, #8
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0208 	mvn.w	r2, #8
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f899 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f88c 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f89b 	bl	80041b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0210 	mvn.w	r2, #16
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2208      	movs	r2, #8
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f86f 	bl	80041a6 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f862 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f871 	bl	80041b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0201 	mvn.w	r2, #1
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd f9da 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004120:	2b80      	cmp	r3, #128	; 0x80
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8d7 	bl	80042e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d10e      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d107      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f835 	bl	80041ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8a2 	bl	80042d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr

080041ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a33      	ldr	r2, [pc, #204]	; (80042bc <TIM_Base_SetConfig+0xe0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a32      	ldr	r2, [pc, #200]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00f      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d00b      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a2f      	ldr	r2, [pc, #188]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d007      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a22      	ldr	r2, [pc, #136]	; (80042bc <TIM_Base_SetConfig+0xe0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0x82>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a21      	ldr	r2, [pc, #132]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0x82>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0x82>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0x82>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0x82>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a09      	ldr	r2, [pc, #36]	; (80042bc <TIM_Base_SetConfig+0xe0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0xc8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40013400 	.word	0x40013400
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00

080042d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fa:	f3ef 8305 	mrs	r3, IPSR
 80042fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004306:	f3ef 8310 	mrs	r3, PRIMASK
 800430a:	607b      	str	r3, [r7, #4]
  return(result);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <osKernelInitialize+0x32>
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <osKernelInitialize+0x60>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d109      	bne.n	800432e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431a:	f3ef 8311 	mrs	r3, BASEPRI
 800431e:	603b      	str	r3, [r7, #0]
  return(result);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004326:	f06f 0305 	mvn.w	r3, #5
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e00c      	b.n	8004348 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <osKernelInitialize+0x60>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d105      	bne.n	8004342 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <osKernelInitialize+0x60>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e002      	b.n	8004348 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004342:	f04f 33ff 	mov.w	r3, #4294967295
 8004346:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004348:	68fb      	ldr	r3, [r7, #12]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	200000c4 	.word	0x200000c4

08004358 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800435e:	f3ef 8305 	mrs	r3, IPSR
 8004362:	60bb      	str	r3, [r7, #8]
  return(result);
 8004364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	607b      	str	r3, [r7, #4]
  return(result);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <osKernelStart+0x32>
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <osKernelStart+0x64>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d109      	bne.n	8004392 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800437e:	f3ef 8311 	mrs	r3, BASEPRI
 8004382:	603b      	str	r3, [r7, #0]
  return(result);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <osKernelStart+0x3a>
    stat = osErrorISR;
 800438a:	f06f 0305 	mvn.w	r3, #5
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e00e      	b.n	80043b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <osKernelStart+0x64>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <osKernelStart+0x64>)
 800439c:	2202      	movs	r2, #2
 800439e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80043a0:	f002 f9bc 	bl	800671c <vTaskStartScheduler>
      stat = osOK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e002      	b.n	80043b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	200000c4 	.word	0x200000c4

080043c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b092      	sub	sp, #72	; 0x48
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d0:	f3ef 8305 	mrs	r3, IPSR
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f040 8094 	bne.w	8004506 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043de:	f3ef 8310 	mrs	r3, PRIMASK
 80043e2:	623b      	str	r3, [r7, #32]
  return(result);
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 808d 	bne.w	8004506 <osThreadNew+0x146>
 80043ec:	4b48      	ldr	r3, [pc, #288]	; (8004510 <osThreadNew+0x150>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d106      	bne.n	8004402 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043f4:	f3ef 8311 	mrs	r3, BASEPRI
 80043f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f040 8082 	bne.w	8004506 <osThreadNew+0x146>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d07e      	beq.n	8004506 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800440c:	2318      	movs	r3, #24
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004410:	2300      	movs	r3, #0
 8004412:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004414:	f107 031b 	add.w	r3, r7, #27
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d045      	beq.n	80044b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <osThreadNew+0x74>
        name = attr->name;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <osThreadNew+0x9a>
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	2b38      	cmp	r3, #56	; 0x38
 800444c:	d805      	bhi.n	800445a <osThreadNew+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <osThreadNew+0x9e>
        return (NULL);
 800445a:	2300      	movs	r3, #0
 800445c:	e054      	b.n	8004508 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00e      	beq.n	8004494 <osThreadNew+0xd4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2bbb      	cmp	r3, #187	; 0xbb
 800447c:	d90a      	bls.n	8004494 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <osThreadNew+0xd4>
        mem = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
 8004492:	e010      	b.n	80044b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10c      	bne.n	80044b6 <osThreadNew+0xf6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <osThreadNew+0xf6>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d104      	bne.n	80044b6 <osThreadNew+0xf6>
          mem = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b0:	e001      	b.n	80044b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d110      	bne.n	80044de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044c4:	9202      	str	r2, [sp, #8]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 ff3e 	bl	8006354 <xTaskCreateStatic>
 80044d8:	4603      	mov	r3, r0
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e013      	b.n	8004506 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d110      	bne.n	8004506 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	f107 0314 	add.w	r3, r7, #20
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f001 ff88 	bl	800640c <xTaskCreate>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d001      	beq.n	8004506 <osThreadNew+0x146>
          hTask = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004506:	697b      	ldr	r3, [r7, #20]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3738      	adds	r7, #56	; 0x38
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200000c4 	.word	0x200000c4

08004514 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451a:	f3ef 8305 	mrs	r3, IPSR
 800451e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004520:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004526:	f3ef 8310 	mrs	r3, PRIMASK
 800452a:	607b      	str	r3, [r7, #4]
  return(result);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <osThreadYield+0x32>
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <osThreadYield+0x5c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d109      	bne.n	800454e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800453a:	f3ef 8311 	mrs	r3, BASEPRI
 800453e:	603b      	str	r3, [r7, #0]
  return(result);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <osThreadYield+0x3a>
    stat = osErrorISR;
 8004546:	f06f 0305 	mvn.w	r3, #5
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e009      	b.n	8004562 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <osThreadYield+0x60>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004562:	68fb      	ldr	r3, [r7, #12]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	200000c4 	.word	0x200000c4
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004580:	f3ef 8305 	mrs	r3, IPSR
 8004584:	613b      	str	r3, [r7, #16]
  return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10f      	bne.n	80045ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458c:	f3ef 8310 	mrs	r3, PRIMASK
 8004590:	60fb      	str	r3, [r7, #12]
  return(result);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <osDelay+0x34>
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <osDelay+0x58>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d109      	bne.n	80045b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045a0:	f3ef 8311 	mrs	r3, BASEPRI
 80045a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <osDelay+0x3c>
    stat = osErrorISR;
 80045ac:	f06f 0305 	mvn.w	r3, #5
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e007      	b.n	80045c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f002 f878 	bl	80066b4 <vTaskDelay>
    }
  }

  return (stat);
 80045c4:	697b      	ldr	r3, [r7, #20]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200000c4 	.word	0x200000c4

080045d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e0:	f3ef 8305 	mrs	r3, IPSR
 80045e4:	617b      	str	r3, [r7, #20]
  return(result);
 80045e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d13d      	bne.n	8004668 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	613b      	str	r3, [r7, #16]
  return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d137      	bne.n	8004668 <osEventFlagsNew+0x94>
 80045f8:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <osEventFlagsNew+0xa0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d105      	bne.n	800460c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004600:	f3ef 8311 	mrs	r3, BASEPRI
 8004604:	60fb      	str	r3, [r7, #12]
  return(result);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d12d      	bne.n	8004668 <osEventFlagsNew+0x94>
    mem = -1;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d006      	beq.n	800462e <osEventFlagsNew+0x5a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b1f      	cmp	r3, #31
 8004626:	d902      	bls.n	800462e <osEventFlagsNew+0x5a>
        mem = 1;
 8004628:	2301      	movs	r3, #1
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	e00c      	b.n	8004648 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <osEventFlagsNew+0x74>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <osEventFlagsNew+0x74>
          mem = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e001      	b.n	8004648 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fbd6 	bl	8004e04 <xEventGroupCreateStatic>
 8004658:	61f8      	str	r0, [r7, #28]
 800465a:	e005      	b.n	8004668 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004662:	f000 fc06 	bl	8004e72 <xEventGroupCreate>
 8004666:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004668:	69fb      	ldr	r3, [r7, #28]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	200000c4 	.word	0x200000c4

08004678 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <osEventFlagsSet+0x1e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004696:	f06f 0303 	mvn.w	r3, #3
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	e03a      	b.n	8004714 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469e:	f3ef 8305 	mrs	r3, IPSR
 80046a2:	617b      	str	r3, [r7, #20]
  return(result);
 80046a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046aa:	f3ef 8310 	mrs	r3, PRIMASK
 80046ae:	613b      	str	r3, [r7, #16]
  return(result);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <osEventFlagsSet+0x52>
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <osEventFlagsSet+0xa8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d123      	bne.n	8004706 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046be:	f3ef 8311 	mrs	r3, BASEPRI
 80046c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01d      	beq.n	8004706 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	461a      	mov	r2, r3
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	69b8      	ldr	r0, [r7, #24]
 80046d8:	f000 fd6e 	bl	80051b8 <xEventGroupSetBitsFromISR>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80046e2:	f06f 0302 	mvn.w	r3, #2
 80046e6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80046e8:	e013      	b.n	8004712 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00e      	beq.n	8004712 <osEventFlagsSet+0x9a>
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <osEventFlagsSet+0xac>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004704:	e005      	b.n	8004712 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	69b8      	ldr	r0, [r7, #24]
 800470a:	f000 fc9b 	bl	8005044 <xEventGroupSetBits>
 800470e:	61f8      	str	r0, [r7, #28]
 8004710:	e000      	b.n	8004714 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004712:	bf00      	nop
  }

  return (rflags);
 8004714:	69fb      	ldr	r3, [r7, #28]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200000c4 	.word	0x200000c4
 8004724:	e000ed04 	.word	0xe000ed04

08004728 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b08e      	sub	sp, #56	; 0x38
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <osEventFlagsWait+0x22>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800474a:	f06f 0303 	mvn.w	r3, #3
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e059      	b.n	8004806 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004752:	f3ef 8305 	mrs	r3, IPSR
 8004756:	61fb      	str	r3, [r7, #28]
  return(result);
 8004758:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475e:	f3ef 8310 	mrs	r3, PRIMASK
 8004762:	61bb      	str	r3, [r7, #24]
  return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <osEventFlagsWait+0x56>
 800476a:	4b29      	ldr	r3, [pc, #164]	; (8004810 <osEventFlagsWait+0xe8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d109      	bne.n	8004786 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004772:	f3ef 8311 	mrs	r3, BASEPRI
 8004776:	617b      	str	r3, [r7, #20]
  return(result);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800477e:	f06f 0305 	mvn.w	r3, #5
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	e03f      	b.n	8004806 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004794:	e001      	b.n	800479a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a8:	e001      	b.n	80047ae <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	6a38      	ldr	r0, [r7, #32]
 80047ba:	f000 fb75 	bl	8004ea8 <xEventGroupWaitBits>
 80047be:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d019      	beq.n	8004806 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80047d8:	f06f 0301 	mvn.w	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
 80047de:	e012      	b.n	8004806 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80047e0:	f06f 0302 	mvn.w	r3, #2
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e00e      	b.n	8004806 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80047f8:	f06f 0301 	mvn.w	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	e002      	b.n	8004806 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004800:	f06f 0302 	mvn.w	r3, #2
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004808:	4618      	mov	r0, r3
 800480a:	3730      	adds	r7, #48	; 0x30
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	200000c4 	.word	0x200000c4

08004814 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b08c      	sub	sp, #48	; 0x30
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004824:	f3ef 8305 	mrs	r3, IPSR
 8004828:	61bb      	str	r3, [r7, #24]
  return(result);
 800482a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8086 	bne.w	800493e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	617b      	str	r3, [r7, #20]
  return(result);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d17f      	bne.n	800493e <osSemaphoreNew+0x12a>
 800483e:	4b42      	ldr	r3, [pc, #264]	; (8004948 <osSemaphoreNew+0x134>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d105      	bne.n	8004852 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004846:	f3ef 8311 	mrs	r3, BASEPRI
 800484a:	613b      	str	r3, [r7, #16]
  return(result);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d175      	bne.n	800493e <osSemaphoreNew+0x12a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d072      	beq.n	800493e <osSemaphoreNew+0x12a>
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d86e      	bhi.n	800493e <osSemaphoreNew+0x12a>
    mem = -1;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <osSemaphoreNew+0x6e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b4f      	cmp	r3, #79	; 0x4f
 800487a:	d902      	bls.n	8004882 <osSemaphoreNew+0x6e>
        mem = 1;
 800487c:	2301      	movs	r3, #1
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	e00c      	b.n	800489c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <osSemaphoreNew+0x88>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <osSemaphoreNew+0x88>
          mem = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	e001      	b.n	800489c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d04c      	beq.n	800493e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d128      	bne.n	80048fc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10a      	bne.n	80048c6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2203      	movs	r2, #3
 80048b6:	9200      	str	r2, [sp, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	2100      	movs	r1, #0
 80048bc:	2001      	movs	r0, #1
 80048be:	f000 fda7 	bl	8005410 <xQueueGenericCreateStatic>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24
 80048c4:	e005      	b.n	80048d2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80048c6:	2203      	movs	r2, #3
 80048c8:	2100      	movs	r1, #0
 80048ca:	2001      	movs	r0, #1
 80048cc:	f000 fe17 	bl	80054fe <xQueueGenericCreate>
 80048d0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d022      	beq.n	800491e <osSemaphoreNew+0x10a>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01f      	beq.n	800491e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048de:	2300      	movs	r3, #0
 80048e0:	2200      	movs	r2, #0
 80048e2:	2100      	movs	r1, #0
 80048e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048e6:	f000 fed5 	bl	8005694 <xQueueGenericSend>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d016      	beq.n	800491e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80048f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f2:	f001 fb5f 	bl	8005fb4 <vQueueDelete>
            hSemaphore = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e010      	b.n	800491e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d108      	bne.n	8004914 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	461a      	mov	r2, r3
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fe58 	bl	80055c0 <xQueueCreateCountingSemaphoreStatic>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24
 8004912:	e004      	b.n	800491e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fe89 	bl	800562e <xQueueCreateCountingSemaphore>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <osSemaphoreNew+0x11e>
          name = attr->name;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e001      	b.n	8004936 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004936:	69f9      	ldr	r1, [r7, #28]
 8004938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800493a:	f001 fc85 	bl	8006248 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200000c4 	.word	0x200000c4

0800494c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004964:	f06f 0303 	mvn.w	r3, #3
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e04b      	b.n	8004a04 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800496c:	f3ef 8305 	mrs	r3, IPSR
 8004970:	617b      	str	r3, [r7, #20]
  return(result);
 8004972:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10f      	bne.n	8004998 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	613b      	str	r3, [r7, #16]
  return(result);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <osSemaphoreAcquire+0x4c>
 8004984:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <osSemaphoreAcquire+0xc4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d128      	bne.n	80049de <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800498c:	f3ef 8311 	mrs	r3, BASEPRI
 8004990:	60fb      	str	r3, [r7, #12]
  return(result);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d022      	beq.n	80049de <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800499e:	f06f 0303 	mvn.w	r3, #3
 80049a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80049a4:	e02d      	b.n	8004a02 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	461a      	mov	r2, r3
 80049b0:	2100      	movs	r1, #0
 80049b2:	69b8      	ldr	r0, [r7, #24]
 80049b4:	f001 fa7e 	bl	8005eb4 <xQueueReceiveFromISR>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d003      	beq.n	80049c6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80049be:	f06f 0302 	mvn.w	r3, #2
 80049c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80049c4:	e01d      	b.n	8004a02 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01a      	beq.n	8004a02 <osSemaphoreAcquire+0xb6>
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <osSemaphoreAcquire+0xc8>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80049dc:	e011      	b.n	8004a02 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	69b8      	ldr	r0, [r7, #24]
 80049e2:	f001 f95b 	bl	8005c9c <xQueueSemaphoreTake>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d00b      	beq.n	8004a04 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80049f2:	f06f 0301 	mvn.w	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	e004      	b.n	8004a04 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80049fa:	f06f 0302 	mvn.w	r3, #2
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	e000      	b.n	8004a04 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004a02:	bf00      	nop
      }
    }
  }

  return (stat);
 8004a04:	69fb      	ldr	r3, [r7, #28]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200000c4 	.word	0x200000c4
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004a2e:	f06f 0303 	mvn.w	r3, #3
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e03e      	b.n	8004ab4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a36:	f3ef 8305 	mrs	r3, IPSR
 8004a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a42:	f3ef 8310 	mrs	r3, PRIMASK
 8004a46:	613b      	str	r3, [r7, #16]
  return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <osSemaphoreRelease+0x4a>
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <osSemaphoreRelease+0xa8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d120      	bne.n	8004a98 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a56:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004a66:	f107 0308 	add.w	r3, r7, #8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	69b8      	ldr	r0, [r7, #24]
 8004a6e:	f000 ffa7 	bl	80059c0 <xQueueGiveFromISR>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d003      	beq.n	8004a80 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004a78:	f06f 0302 	mvn.w	r3, #2
 8004a7c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004a7e:	e018      	b.n	8004ab2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d015      	beq.n	8004ab2 <osSemaphoreRelease+0x9a>
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <osSemaphoreRelease+0xac>)
 8004a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004a96:	e00c      	b.n	8004ab2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	69b8      	ldr	r0, [r7, #24]
 8004aa0:	f000 fdf8 	bl	8005694 <xQueueGenericSend>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d004      	beq.n	8004ab4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004aaa:	f06f 0302 	mvn.w	r3, #2
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e000      	b.n	8004ab4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004ab2:	bf00      	nop
    }
  }

  return (stat);
 8004ab4:	69fb      	ldr	r3, [r7, #28]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	200000c4 	.word	0x200000c4
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad8:	f3ef 8305 	mrs	r3, IPSR
 8004adc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ade:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d16f      	bne.n	8004bc4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d169      	bne.n	8004bc4 <osMessageQueueNew+0xfc>
 8004af0:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <osMessageQueueNew+0x108>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d105      	bne.n	8004b04 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af8:	f3ef 8311 	mrs	r3, BASEPRI
 8004afc:	613b      	str	r3, [r7, #16]
  return(result);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d15f      	bne.n	8004bc4 <osMessageQueueNew+0xfc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d05c      	beq.n	8004bc4 <osMessageQueueNew+0xfc>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d059      	beq.n	8004bc4 <osMessageQueueNew+0xfc>
    mem = -1;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d029      	beq.n	8004b70 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <osMessageQueueNew+0x82>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2b4f      	cmp	r3, #79	; 0x4f
 8004b2a:	d90e      	bls.n	8004b4a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <osMessageQueueNew+0x82>
        mem = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	e014      	b.n	8004b74 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d110      	bne.n	8004b74 <osMessageQueueNew+0xac>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <osMessageQueueNew+0xac>
          mem = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	e001      	b.n	8004b74 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10b      	bne.n	8004b92 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2100      	movs	r1, #0
 8004b84:	9100      	str	r1, [sp, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fc41 	bl	8005410 <xQueueGenericCreateStatic>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8004b90:	e008      	b.n	8004ba4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fcae 	bl	80054fe <xQueueGenericCreate>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e001      	b.n	8004bbc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc0:	f001 fb42 	bl	8006248 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3728      	adds	r7, #40	; 0x28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200000c4 	.word	0x200000c4

08004bd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bec:	f3ef 8305 	mrs	r3, IPSR
 8004bf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bf2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <osMessageQueuePut+0x44>
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <osMessageQueuePut+0xe0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d12e      	bne.n	8004c6a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c10:	617b      	str	r3, [r7, #20]
  return(result);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d028      	beq.n	8004c6a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <osMessageQueuePut+0x56>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <osMessageQueuePut+0x56>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004c2a:	f06f 0303 	mvn.w	r3, #3
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c30:	e039      	b.n	8004ca6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c36:	f107 0210 	add.w	r2, r7, #16
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	6a38      	ldr	r0, [r7, #32]
 8004c40:	f000 fe26 	bl	8005890 <xQueueGenericSendFromISR>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d003      	beq.n	8004c52 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004c4a:	f06f 0302 	mvn.w	r3, #2
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c50:	e029      	b.n	8004ca6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d026      	beq.n	8004ca6 <osMessageQueuePut+0xd2>
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <osMessageQueuePut+0xe4>)
 8004c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c68:	e01d      	b.n	8004ca6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <osMessageQueuePut+0xa2>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004c76:	f06f 0303 	mvn.w	r3, #3
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7c:	e014      	b.n	8004ca8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c7e:	2300      	movs	r3, #0
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6a38      	ldr	r0, [r7, #32]
 8004c86:	f000 fd05 	bl	8005694 <xQueueGenericSend>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d00b      	beq.n	8004ca8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004c96:	f06f 0301 	mvn.w	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9c:	e004      	b.n	8004ca8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004c9e:	f06f 0302 	mvn.w	r3, #2
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	e000      	b.n	8004ca8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ca6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3728      	adds	r7, #40	; 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200000c4 	.word	0x200000c4
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	; 0x28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd2:	f3ef 8305 	mrs	r3, IPSR
 8004cd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cd8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cde:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d109      	bne.n	8004cfe <osMessageQueueGet+0x42>
 8004cea:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <osMessageQueueGet+0xdc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d12e      	bne.n	8004d50 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf6:	617b      	str	r3, [r7, #20]
  return(result);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d028      	beq.n	8004d50 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <osMessageQueueGet+0x54>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <osMessageQueueGet+0x54>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004d10:	f06f 0303 	mvn.w	r3, #3
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d16:	e038      	b.n	8004d8a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d1c:	f107 0310 	add.w	r3, r7, #16
 8004d20:	461a      	mov	r2, r3
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	6a38      	ldr	r0, [r7, #32]
 8004d26:	f001 f8c5 	bl	8005eb4 <xQueueReceiveFromISR>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d003      	beq.n	8004d38 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004d30:	f06f 0302 	mvn.w	r3, #2
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d36:	e028      	b.n	8004d8a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d025      	beq.n	8004d8a <osMessageQueueGet+0xce>
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <osMessageQueueGet+0xe0>)
 8004d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d4e:	e01c      	b.n	8004d8a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <osMessageQueueGet+0xa0>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004d5c:	f06f 0303 	mvn.w	r3, #3
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e013      	b.n	8004d8c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6a38      	ldr	r0, [r7, #32]
 8004d6a:	f000 feb7 	bl	8005adc <xQueueReceive>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d00b      	beq.n	8004d8c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004d7a:	f06f 0301 	mvn.w	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d80:	e004      	b.n	8004d8c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004d82:	f06f 0302 	mvn.w	r3, #2
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	e000      	b.n	8004d8c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3728      	adds	r7, #40	; 0x28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200000c4 	.word	0x200000c4
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <vApplicationGetIdleTaskMemory+0x28>)
 8004db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8004db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	200000c8 	.word	0x200000c8
 8004dcc:	20000184 	.word	0x20000184

08004dd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <vApplicationGetTimerTaskMemory+0x2c>)
 8004de0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <vApplicationGetTimerTaskMemory+0x30>)
 8004de6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dee:	601a      	str	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000384 	.word	0x20000384
 8004e00:	20000440 	.word	0x20000440

08004e04 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004e28:	2320      	movs	r3, #32
 8004e2a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d00a      	beq.n	8004e48 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	60fb      	str	r3, [r7, #12]
}
 8004e44:	bf00      	nop
 8004e46:	e7fe      	b.n	8004e46 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f9bf 	bl	80051e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2201      	movs	r2, #1
 8004e66:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004e68:	697b      	ldr	r3, [r7, #20]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8004e78:	2020      	movs	r0, #32
 8004e7a:	f003 f86f 	bl	8007f5c <pvPortMalloc>
 8004e7e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f9a5 	bl	80051e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8004e9c:	687b      	ldr	r3, [r7, #4]
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b090      	sub	sp, #64	; 0x40
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xEventGroupWaitBits+0x36>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	623b      	str	r3, [r7, #32]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <xEventGroupWaitBits+0x56>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61fb      	str	r3, [r7, #28]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xEventGroupWaitBits+0x72>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61bb      	str	r3, [r7, #24]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1a:	f002 f8ff 	bl	800711c <xTaskGetSchedulerState>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xEventGroupWaitBits+0x82>
 8004f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <xEventGroupWaitBits+0x86>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xEventGroupWaitBits+0x88>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	617b      	str	r3, [r7, #20]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004f4a:	f001 fc57 	bl	80067fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f5a:	f000 f90b 	bl	8005174 <prvTestWaitCondition>
 8004f5e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00e      	beq.n	8004f84 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d028      	beq.n	8004fc6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e020      	b.n	8004fc6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
 8004f92:	e018      	b.n	8004fc6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb2:	1d18      	adds	r0, r3, #4
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f001 fe1d 	bl	8006bfc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004fc6:	f001 fc27 	bl	8006818 <xTaskResumeAll>
 8004fca:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d031      	beq.n	8005036 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <xEventGroupWaitBits+0x198>)
 8004fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004fe8:	f002 fa18 	bl	800741c <uxTaskResetEventItemValue>
 8004fec:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11a      	bne.n	800502e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8004ff8:	f002 feb0 	bl	8007d5c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005008:	f000 f8b4 	bl	8005174 <prvTestWaitCondition>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	43db      	mvns	r3, r3
 8005020:	401a      	ands	r2, r3
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005026:	2301      	movs	r3, #1
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800502a:	f002 fec7 	bl	8007dbc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005038:	4618      	mov	r0, r3
 800503a:	3740      	adds	r7, #64	; 0x40
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08e      	sub	sp, #56	; 0x38
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800504e:	2300      	movs	r3, #0
 8005050:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005056:	2300      	movs	r3, #0
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xEventGroupSetBits+0x32>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <xEventGroupSetBits+0x52>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	3304      	adds	r3, #4
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	3308      	adds	r3, #8
 80050a0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80050a2:	f001 fbab 	bl	80067fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80050b8:	e03c      	b.n	8005134 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f4:	e008      	b.n	8005108 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	429a      	cmp	r2, r3
 8005102:	d101      	bne.n	8005108 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	4313      	orrs	r3, r2
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005128:	4619      	mov	r1, r3
 800512a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800512c:	f001 fe32 	bl	8006d94 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	429a      	cmp	r2, r3
 800513a:	d1be      	bne.n	80050ba <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	43db      	mvns	r3, r3
 8005144:	401a      	ands	r2, r3
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800514a:	f001 fb65 	bl	8006818 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	681b      	ldr	r3, [r3, #0]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3738      	adds	r7, #56	; 0x38
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ff6c 	bl	8005044 <xEventGroupSetBits>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d107      	bne.n	800519a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e007      	b.n	80051aa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d101      	bne.n	80051aa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80051a6:	2301      	movs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
	...

080051b8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	4804      	ldr	r0, [pc, #16]	; (80051dc <xEventGroupSetBitsFromISR+0x24>)
 80051cc:	f002 fcb8 	bl	8007b40 <xTimerPendFunctionCallFromISR>
 80051d0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80051d2:	697b      	ldr	r3, [r7, #20]
	}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	0800515b 	.word	0x0800515b

080051e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f103 0208 	add.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f103 0208 	add.w	r2, r3, #8
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f103 0208 	add.w	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d103      	bne.n	800529c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e00c      	b.n	80052b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3308      	adds	r3, #8
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e002      	b.n	80052aa <vListInsert+0x2e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d2f6      	bcs.n	80052a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6892      	ldr	r2, [r2, #8]
 8005302:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6852      	ldr	r2, [r2, #4]
 800530c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d103      	bne.n	8005320 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	1e5a      	subs	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
	...

08005340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericReset+0x2a>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60bb      	str	r3, [r7, #8]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800536a:	f002 fcf7 	bl	8007d5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	68f9      	ldr	r1, [r7, #12]
 8005378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800537a:	fb01 f303 	mul.w	r3, r1, r3
 800537e:	441a      	add	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	3b01      	subs	r3, #1
 800539c:	68f9      	ldr	r1, [r7, #12]
 800539e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	441a      	add	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d114      	bne.n	80053ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01a      	beq.n	80053fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3310      	adds	r3, #16
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fc7d 	bl	8006ccc <xTaskRemoveFromEventList>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053d8:	4b0c      	ldr	r3, [pc, #48]	; (800540c <xQueueGenericReset+0xcc>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	e009      	b.n	80053fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3310      	adds	r3, #16
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fef6 	bl	80051e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3324      	adds	r3, #36	; 0x24
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fef1 	bl	80051e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053fe:	f002 fcdd 	bl	8007dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005402:	2301      	movs	r3, #1
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	e000ed04 	.word	0xe000ed04

08005410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08e      	sub	sp, #56	; 0x38
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <xQueueGenericCreateStatic+0x52>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <xQueueGenericCreateStatic+0x56>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <xQueueGenericCreateStatic+0x58>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	623b      	str	r3, [r7, #32]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xQueueGenericCreateStatic+0x7e>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <xQueueGenericCreateStatic+0x82>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueGenericCreateStatic+0x84>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61fb      	str	r3, [r7, #28]
}
 80054aa:	bf00      	nop
 80054ac:	e7fe      	b.n	80054ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054ae:	2350      	movs	r3, #80	; 0x50
 80054b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d00a      	beq.n	80054ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61bb      	str	r3, [r7, #24]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f843 	bl	800557a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3730      	adds	r7, #48	; 0x30
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b08a      	sub	sp, #40	; 0x28
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	4613      	mov	r3, r2
 800550a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	613b      	str	r3, [r7, #16]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e004      	b.n	800553e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	3350      	adds	r3, #80	; 0x50
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fd0a 	bl	8007f5c <pvPortMalloc>
 8005548:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00f      	beq.n	8005570 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3350      	adds	r3, #80	; 0x50
 8005554:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800555e:	79fa      	ldrb	r2, [r7, #7]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f805 	bl	800557a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005570:	69bb      	ldr	r3, [r7, #24]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e002      	b.n	800559c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055a8:	2101      	movs	r1, #1
 80055aa:	69b8      	ldr	r0, [r7, #24]
 80055ac:	f7ff fec8 	bl	8005340 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61bb      	str	r3, [r7, #24]
}
 80055e4:	bf00      	nop
 80055e6:	e7fe      	b.n	80055e6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d90a      	bls.n	8005606 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	617b      	str	r3, [r7, #20]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005606:	2302      	movs	r3, #2
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff fefd 	bl	8005410 <xQueueGenericCreateStatic>
 8005616:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005624:	69fb      	ldr	r3, [r7, #28]
	}
 8005626:	4618      	mov	r0, r3
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	613b      	str	r3, [r7, #16]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d90a      	bls.n	8005672 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60fb      	str	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005672:	2202      	movs	r2, #2
 8005674:	2100      	movs	r1, #0
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff41 	bl	80054fe <xQueueGenericCreate>
 800567c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800568a:	697b      	ldr	r3, [r7, #20]
	}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	; 0x38
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10a      	bne.n	80056c6 <xQueueGenericSend+0x32>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056c2:	bf00      	nop
 80056c4:	e7fe      	b.n	80056c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <xQueueGenericSend+0x40>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <xQueueGenericSend+0x44>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <xQueueGenericSend+0x46>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <xQueueGenericSend+0x60>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d103      	bne.n	8005702 <xQueueGenericSend+0x6e>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <xQueueGenericSend+0x72>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueGenericSend+0x74>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueGenericSend+0x8e>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005722:	f001 fcfb 	bl	800711c <xTaskGetSchedulerState>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <xQueueGenericSend+0x9e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <xQueueGenericSend+0xa2>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericSend+0xa4>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericSend+0xbe>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	61fb      	str	r3, [r7, #28]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005752:	f002 fb03 	bl	8007d5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	429a      	cmp	r2, r3
 8005760:	d302      	bcc.n	8005768 <xQueueGenericSend+0xd4>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d129      	bne.n	80057bc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800576e:	f000 fc5b 	bl	8006028 <prvCopyDataToQueue>
 8005772:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	3324      	adds	r3, #36	; 0x24
 8005780:	4618      	mov	r0, r3
 8005782:	f001 faa3 	bl	8006ccc <xTaskRemoveFromEventList>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <xQueueGenericSend+0x1f8>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	e00a      	b.n	80057b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057a4:	4b39      	ldr	r3, [pc, #228]	; (800588c <xQueueGenericSend+0x1f8>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057b4:	f002 fb02 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e063      	b.n	8005884 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c2:	f002 fafb 	bl	8007dbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e05c      	b.n	8005884 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fb3f 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057de:	f002 faed 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e2:	f001 f80b 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e6:	f002 fab9 	bl	8007d5c <vPortEnterCritical>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f0:	b25b      	sxtb	r3, r3
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d103      	bne.n	8005800 <xQueueGenericSend+0x16c>
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005806:	b25b      	sxtb	r3, r3
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d103      	bne.n	8005816 <xQueueGenericSend+0x182>
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005816:	f002 fad1 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581a:	1d3a      	adds	r2, r7, #4
 800581c:	f107 0314 	add.w	r3, r7, #20
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f001 fb2e 	bl	8006e84 <xTaskCheckForTimeOut>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d124      	bne.n	8005878 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800582e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005830:	f000 fcf2 	bl	8006218 <prvIsQueueFull>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d018      	beq.n	800586c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3310      	adds	r3, #16
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 f9b6 	bl	8006bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584a:	f000 fc7d 	bl	8006148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800584e:	f000 ffe3 	bl	8006818 <xTaskResumeAll>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f af7c 	bne.w	8005752 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <xQueueGenericSend+0x1f8>)
 800585c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	e772      	b.n	8005752 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586e:	f000 fc6b 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005872:	f000 ffd1 	bl	8006818 <xTaskResumeAll>
 8005876:	e76c      	b.n	8005752 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fc65 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800587e:	f000 ffcb 	bl	8006818 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005882:	2300      	movs	r3, #0
		}
	}
}
 8005884:	4618      	mov	r0, r3
 8005886:	3738      	adds	r7, #56	; 0x38
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	e000ed04 	.word	0xe000ed04

08005890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08e      	sub	sp, #56	; 0x38
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <xQueueGenericSendFromISR+0x3c>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <xQueueGenericSendFromISR+0x40>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <xQueueGenericSendFromISR+0x42>
 80058d0:	2300      	movs	r3, #0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	623b      	str	r3, [r7, #32]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d103      	bne.n	80058fa <xQueueGenericSendFromISR+0x6a>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <xQueueGenericSendFromISR+0x6e>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <xQueueGenericSendFromISR+0x70>
 80058fe:	2300      	movs	r3, #0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	61fb      	str	r3, [r7, #28]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800591a:	f002 fae1 	bl	8007ee0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800591e:	f3ef 8211 	mrs	r2, BASEPRI
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	61ba      	str	r2, [r7, #24]
 8005934:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005936:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <xQueueGenericSendFromISR+0xbc>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d12c      	bne.n	80059a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595c:	f000 fb64 	bl	8006028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005960:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d112      	bne.n	8005990 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	3324      	adds	r3, #36	; 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f001 f9a8 	bl	8006ccc <xTaskRemoveFromEventList>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00e      	beq.n	80059a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e007      	b.n	80059a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005990:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005994:	3301      	adds	r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	b25a      	sxtb	r2, r3
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059a0:	2301      	movs	r3, #1
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80059a4:	e001      	b.n	80059aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3738      	adds	r7, #56	; 0x38
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGiveFromISR+0x2a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <xQueueGiveFromISR+0x48>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	61fb      	str	r3, [r7, #28]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <xQueueGiveFromISR+0x58>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <xQueueGiveFromISR+0x5c>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <xQueueGiveFromISR+0x5e>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	61bb      	str	r3, [r7, #24]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a38:	f002 fa52 	bl	8007ee0 <vPortValidateInterruptPriority>
	__asm volatile
 8005a3c:	f3ef 8211 	mrs	r2, BASEPRI
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	617a      	str	r2, [r7, #20]
 8005a52:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a54:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d22b      	bcs.n	8005ac0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d112      	bne.n	8005aaa <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d016      	beq.n	8005aba <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f91b 	bl	8006ccc <xTaskRemoveFromEventList>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e007      	b.n	8005aba <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	b25a      	sxtb	r2, r3
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e001      	b.n	8005ac4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f383 8811 	msr	BASEPRI, r3
}
 8005ace:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3738      	adds	r7, #56	; 0x38
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <xQueueReceive+0x30>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	623b      	str	r3, [r7, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <xQueueReceive+0x3e>
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueReceive+0x42>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueReceive+0x44>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueReceive+0x5e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61fb      	str	r3, [r7, #28]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3a:	f001 faef 	bl	800711c <xTaskGetSchedulerState>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xQueueReceive+0x6e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <xQueueReceive+0x72>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueReceive+0x74>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueReceive+0x8e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61bb      	str	r3, [r7, #24]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6a:	f002 f8f7 	bl	8007d5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01f      	beq.n	8005bba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7e:	f000 fabd 	bl	80060fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00f      	beq.n	8005bb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 f898 	bl	8006ccc <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <xQueueReceive+0x1bc>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bb2:	f002 f903 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e069      	b.n	8005c8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc0:	f002 f8fc 	bl	8007dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e062      	b.n	8005c8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bce:	f107 0310 	add.w	r3, r7, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 f940 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bdc:	f002 f8ee 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be0:	f000 fe0c 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005be4:	f002 f8ba 	bl	8007d5c <vPortEnterCritical>
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d103      	bne.n	8005bfe <xQueueReceive+0x122>
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d103      	bne.n	8005c14 <xQueueReceive+0x138>
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c14:	f002 f8d2 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c18:	1d3a      	adds	r2, r7, #4
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f92f 	bl	8006e84 <xTaskCheckForTimeOut>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d123      	bne.n	8005c74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2e:	f000 fadd 	bl	80061ec <prvIsQueueEmpty>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d017      	beq.n	8005c68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 ffb7 	bl	8006bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f000 fa7e 	bl	8006148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c4c:	f000 fde4 	bl	8006818 <xTaskResumeAll>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d189      	bne.n	8005b6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <xQueueReceive+0x1bc>)
 8005c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	e780      	b.n	8005b6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6a:	f000 fa6d 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c6e:	f000 fdd3 	bl	8006818 <xTaskResumeAll>
 8005c72:	e77a      	b.n	8005b6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c76:	f000 fa67 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c7a:	f000 fdcd 	bl	8006818 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c80:	f000 fab4 	bl	80061ec <prvIsQueueEmpty>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f43f af6f 	beq.w	8005b6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3730      	adds	r7, #48	; 0x30
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08e      	sub	sp, #56	; 0x38
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	623b      	str	r3, [r7, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	61fb      	str	r3, [r7, #28]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cec:	f001 fa16 	bl	800711c <xTaskGetSchedulerState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <xQueueSemaphoreTake+0x60>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueSemaphoreTake+0x64>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueSemaphoreTake+0x66>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	61bb      	str	r3, [r7, #24]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d1c:	f002 f81e 	bl	8007d5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d024      	beq.n	8005d76 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d3c:	f001 fb86 	bl	800744c <pvTaskIncrementMutexHeldCount>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	3310      	adds	r3, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 ffba 	bl	8006ccc <xTaskRemoveFromEventList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d5e:	4b54      	ldr	r3, [pc, #336]	; (8005eb0 <xQueueSemaphoreTake+0x214>)
 8005d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d6e:	f002 f825 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e097      	b.n	8005ea6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d111      	bne.n	8005da0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	617b      	str	r3, [r7, #20]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d98:	f002 f810 	bl	8007dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e082      	b.n	8005ea6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da6:	f107 030c 	add.w	r3, r7, #12
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f854 	bl	8006e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db4:	f002 f802 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005db8:	f000 fd20 	bl	80067fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dbc:	f001 ffce 	bl	8007d5c <vPortEnterCritical>
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d103      	bne.n	8005dd6 <xQueueSemaphoreTake+0x13a>
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de2:	d103      	bne.n	8005dec <xQueueSemaphoreTake+0x150>
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dec:	f001 ffe6 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005df0:	463a      	mov	r2, r7
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f843 	bl	8006e84 <xTaskCheckForTimeOut>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d132      	bne.n	8005e6a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e06:	f000 f9f1 	bl	80061ec <prvIsQueueEmpty>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d026      	beq.n	8005e5e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e18:	f001 ffa0 	bl	8007d5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f999 	bl	8007158 <xTaskPriorityInherit>
 8005e26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e28:	f001 ffc8 	bl	8007dbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	3324      	adds	r3, #36	; 0x24
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 febd 	bl	8006bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e3c:	f000 f984 	bl	8006148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e40:	f000 fcea 	bl	8006818 <xTaskResumeAll>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f47f af68 	bne.w	8005d1c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <xQueueSemaphoreTake+0x214>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e75e      	b.n	8005d1c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e60:	f000 f972 	bl	8006148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fcd8 	bl	8006818 <xTaskResumeAll>
 8005e68:	e758      	b.n	8005d1c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e6c:	f000 f96c 	bl	8006148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fcd2 	bl	8006818 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e76:	f000 f9b9 	bl	80061ec <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af4d 	beq.w	8005d1c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005e88:	f001 ff68 	bl	8007d5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e8e:	f000 f8b4 	bl	8005ffa <prvGetDisinheritPriorityAfterTimeout>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fa38 	bl	8007310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ea0:	f001 ff8c 	bl	8007dbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3738      	adds	r7, #56	; 0x38
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08e      	sub	sp, #56	; 0x38
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	623b      	str	r3, [r7, #32]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <xQueueReceiveFromISR+0x3a>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueReceiveFromISR+0x3e>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueReceiveFromISR+0x40>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	61fb      	str	r3, [r7, #28]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f0e:	f001 ffe7 	bl	8007ee0 <vPortValidateInterruptPriority>
	__asm volatile
 8005f12:	f3ef 8211 	mrs	r2, BASEPRI
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	61ba      	str	r2, [r7, #24]
 8005f28:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f2a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02f      	beq.n	8005f9a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f48:	f000 f8d8 	bl	80060fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d112      	bne.n	8005f84 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d016      	beq.n	8005f94 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	3310      	adds	r3, #16
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 feae 	bl	8006ccc <xTaskRemoveFromEventList>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e007      	b.n	8005f94 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	b25a      	sxtb	r2, r3
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f94:	2301      	movs	r3, #1
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
 8005f98:	e001      	b.n	8005f9e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f383 8811 	msr	BASEPRI, r3
}
 8005fa8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3738      	adds	r7, #56	; 0x38
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10a      	bne.n	8005fdc <vQueueDelete+0x28>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	60bb      	str	r3, [r7, #8]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f95b 	bl	8006298 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f002 f879 	bl	80080e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e001      	b.n	800601c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800601c:	68fb      	ldr	r3, [r7, #12]
	}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d14d      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f8ee 	bl	8007234 <xTaskPriorityDisinherit>
 8006058:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	e043      	b.n	80060ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d119      	bne.n	800609c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6898      	ldr	r0, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006070:	461a      	mov	r2, r3
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	f002 f970 	bl	8008358 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d32b      	bcc.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	609a      	str	r2, [r3, #8]
 800609a:	e026      	b.n	80060ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68d8      	ldr	r0, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	f002 f956 	bl	8008358 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	425b      	negs	r3, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d207      	bcs.n	80060d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	425b      	negs	r3, r3
 80060d2:	441a      	add	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d105      	bne.n	80060ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060f2:	697b      	ldr	r3, [r7, #20]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d303      	bcc.n	8006130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68d9      	ldr	r1, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	461a      	mov	r2, r3
 800613a:	6838      	ldr	r0, [r7, #0]
 800613c:	f002 f90c 	bl	8008358 <memcpy>
	}
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006150:	f001 fe04 	bl	8007d5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800615c:	e011      	b.n	8006182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3324      	adds	r3, #36	; 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fdae 	bl	8006ccc <xTaskRemoveFromEventList>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006176:	f000 fee7 	bl	8006f48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dce9      	bgt.n	800615e <prvUnlockQueue+0x16>
 800618a:	e000      	b.n	800618e <prvUnlockQueue+0x46>
					break;
 800618c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	22ff      	movs	r2, #255	; 0xff
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006196:	f001 fe11 	bl	8007dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800619a:	f001 fddf 	bl	8007d5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a6:	e011      	b.n	80061cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d012      	beq.n	80061d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3310      	adds	r3, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd89 	bl	8006ccc <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c0:	f000 fec2 	bl	8006f48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	dce9      	bgt.n	80061a8 <prvUnlockQueue+0x60>
 80061d4:	e000      	b.n	80061d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061e0:	f001 fdec 	bl	8007dbc <vPortExitCritical>
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f4:	f001 fdb2 	bl	8007d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620a:	f001 fdd7 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006220:	f001 fd9c 	bl	8007d5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	429a      	cmp	r2, r3
 800622e:	d102      	bne.n	8006236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e001      	b.n	800623a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800623a:	f001 fdbf 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e014      	b.n	8006282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006258:	4a0e      	ldr	r2, [pc, #56]	; (8006294 <vQueueAddToRegistry+0x4c>)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006264:	490b      	ldr	r1, [pc, #44]	; (8006294 <vQueueAddToRegistry+0x4c>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <vQueueAddToRegistry+0x4c>)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800627a:	e006      	b.n	800628a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b07      	cmp	r3, #7
 8006286:	d9e7      	bls.n	8006258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	20005014 	.word	0x20005014

08006298 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e016      	b.n	80062d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <vQueueUnregisterQueue+0x50>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d10b      	bne.n	80062ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062b6:	4a0c      	ldr	r2, [pc, #48]	; (80062e8 <vQueueUnregisterQueue+0x50>)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2100      	movs	r1, #0
 80062bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062c0:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <vQueueUnregisterQueue+0x50>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	2200      	movs	r2, #0
 80062ca:	605a      	str	r2, [r3, #4]
				break;
 80062cc:	e006      	b.n	80062dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b07      	cmp	r3, #7
 80062d8:	d9e5      	bls.n	80062a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20005014 	.word	0x20005014

080062ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062fc:	f001 fd2e 	bl	8007d5c <vPortEnterCritical>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006306:	b25b      	sxtb	r3, r3
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d103      	bne.n	8006316 <vQueueWaitForMessageRestricted+0x2a>
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <vQueueWaitForMessageRestricted+0x40>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800632c:	f001 fd46 	bl	8007dbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	3324      	adds	r3, #36	; 0x24
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fc97 	bl	8006c74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff fefe 	bl	8006148 <prvUnlockQueue>
	}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af04      	add	r7, sp, #16
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xTaskCreateStatic+0x46>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61fb      	str	r3, [r7, #28]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800639a:	23bc      	movs	r3, #188	; 0xbc
 800639c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2bbc      	cmp	r3, #188	; 0xbc
 80063a2:	d00a      	beq.n	80063ba <xTaskCreateStatic+0x66>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	61bb      	str	r3, [r7, #24]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <xTaskCreateStatic+0xaa>
 80063c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01b      	beq.n	80063fe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063d8:	2300      	movs	r3, #0
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	9302      	str	r3, [sp, #8]
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f851 	bl	8006498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063f8:	f000 f8ec 	bl	80065d4 <prvAddNewTaskToReadyList>
 80063fc:	e001      	b.n	8006402 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006402:	697b      	ldr	r3, [r7, #20]
	}
 8006404:	4618      	mov	r0, r3
 8006406:	3728      	adds	r7, #40	; 0x28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af04      	add	r7, sp, #16
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4618      	mov	r0, r3
 8006422:	f001 fd9b 	bl	8007f5c <pvPortMalloc>
 8006426:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800642e:	20bc      	movs	r0, #188	; 0xbc
 8006430:	f001 fd94 	bl	8007f5c <pvPortMalloc>
 8006434:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
 8006442:	e005      	b.n	8006450 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006444:	6978      	ldr	r0, [r7, #20]
 8006446:	f001 fe4d 	bl	80080e4 <vPortFree>
 800644a:	e001      	b.n	8006450 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d017      	beq.n	8006486 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	2300      	movs	r3, #0
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	9302      	str	r3, [sp, #8]
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f80f 	bl	8006498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800647a:	69f8      	ldr	r0, [r7, #28]
 800647c:	f000 f8aa 	bl	80065d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006480:	2301      	movs	r3, #1
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e002      	b.n	800648c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800648c:	69bb      	ldr	r3, [r7, #24]
	}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	461a      	mov	r2, r3
 80064b0:	21a5      	movs	r1, #165	; 0xa5
 80064b2:	f001 ff5f 	bl	8008374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064c0:	3b01      	subs	r3, #1
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f023 0307 	bic.w	r3, r3, #7
 80064ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	617b      	str	r3, [r7, #20]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e012      	b.n	800651c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	7819      	ldrb	r1, [r3, #0]
 80064fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	3334      	adds	r3, #52	; 0x34
 8006506:	460a      	mov	r2, r1
 8006508:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d006      	beq.n	8006524 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b0f      	cmp	r3, #15
 8006520:	d9e9      	bls.n	80064f6 <prvInitialiseNewTask+0x5e>
 8006522:	e000      	b.n	8006526 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006524:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2b37      	cmp	r3, #55	; 0x37
 8006532:	d901      	bls.n	8006538 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006534:	2337      	movs	r3, #55	; 0x37
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	3304      	adds	r3, #4
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe fe65 	bl	800521e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	3318      	adds	r3, #24
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fe60 	bl	800521e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	2200      	movs	r2, #0
 8006580:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	3354      	adds	r3, #84	; 0x54
 8006588:	2260      	movs	r2, #96	; 0x60
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fef1 	bl	8008374 <memset>
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <prvInitialiseNewTask+0x130>)
 8006596:	659a      	str	r2, [r3, #88]	; 0x58
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	4a0c      	ldr	r2, [pc, #48]	; (80065cc <prvInitialiseNewTask+0x134>)
 800659c:	65da      	str	r2, [r3, #92]	; 0x5c
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	4a0b      	ldr	r2, [pc, #44]	; (80065d0 <prvInitialiseNewTask+0x138>)
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	69b8      	ldr	r0, [r7, #24]
 80065aa:	f001 fae9 	bl	8007b80 <pxPortInitialiseStack>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c0:	bf00      	nop
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	080087a0 	.word	0x080087a0
 80065cc:	080087c0 	.word	0x080087c0
 80065d0:	08008780 	.word	0x08008780

080065d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065dc:	f001 fbbe 	bl	8007d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065e0:	4b2d      	ldr	r3, [pc, #180]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a2c      	ldr	r2, [pc, #176]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065f2:	4a2a      	ldr	r2, [pc, #168]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f8:	4b27      	ldr	r3, [pc, #156]	; (8006698 <prvAddNewTaskToReadyList+0xc4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d110      	bne.n	8006622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006600:	f000 fcc6 	bl	8006f90 <prvInitialiseTaskLists>
 8006604:	e00d      	b.n	8006622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006606:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <prvAddNewTaskToReadyList+0xcc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	429a      	cmp	r2, r3
 800661a:	d802      	bhi.n	8006622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800661c:	4a1f      	ldr	r2, [pc, #124]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006622:	4b20      	ldr	r3, [pc, #128]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 800662a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800662c:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <prvAddNewTaskToReadyList+0xd0>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006638:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <prvAddNewTaskToReadyList+0xd4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d903      	bls.n	8006648 <prvAddNewTaskToReadyList+0x74>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <prvAddNewTaskToReadyList+0xd4>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	4613      	mov	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <prvAddNewTaskToReadyList+0xd8>)
 8006656:	441a      	add	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f7fe fde9 	bl	8005236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006664:	f001 fbaa 	bl	8007dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006668:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <prvAddNewTaskToReadyList+0xcc>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <prvAddNewTaskToReadyList+0xc8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	429a      	cmp	r2, r3
 800667c:	d207      	bcs.n	800668e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <prvAddNewTaskToReadyList+0xdc>)
 8006680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000d14 	.word	0x20000d14
 800669c:	20000840 	.word	0x20000840
 80066a0:	20000d20 	.word	0x20000d20
 80066a4:	20000d30 	.word	0x20000d30
 80066a8:	20000d1c 	.word	0x20000d1c
 80066ac:	20000844 	.word	0x20000844
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <vTaskDelay+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <vTaskDelay+0x30>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066e4:	f000 f88a 	bl	80067fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066e8:	2100      	movs	r1, #0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fec2 	bl	8007474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066f0:	f000 f892 	bl	8006818 <xTaskResumeAll>
 80066f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <vTaskDelay+0x64>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000d3c 	.word	0x20000d3c
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800672a:	463a      	mov	r2, r7
 800672c:	1d39      	adds	r1, r7, #4
 800672e:	f107 0308 	add.w	r3, r7, #8
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fb34 	bl	8004da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	9202      	str	r2, [sp, #8]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	2300      	movs	r3, #0
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	460a      	mov	r2, r1
 800674a:	4924      	ldr	r1, [pc, #144]	; (80067dc <vTaskStartScheduler+0xc0>)
 800674c:	4824      	ldr	r0, [pc, #144]	; (80067e0 <vTaskStartScheduler+0xc4>)
 800674e:	f7ff fe01 	bl	8006354 <xTaskCreateStatic>
 8006752:	4603      	mov	r3, r0
 8006754:	4a23      	ldr	r2, [pc, #140]	; (80067e4 <vTaskStartScheduler+0xc8>)
 8006756:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006758:	4b22      	ldr	r3, [pc, #136]	; (80067e4 <vTaskStartScheduler+0xc8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d002      	beq.n	8006766 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e001      	b.n	800676a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d102      	bne.n	8006776 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006770:	f000 fed4 	bl	800751c <xTimerCreateTimerTask>
 8006774:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d11b      	bne.n	80067b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	613b      	str	r3, [r7, #16]
}
 800678e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <vTaskStartScheduler+0xcc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3354      	adds	r3, #84	; 0x54
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <vTaskStartScheduler+0xd0>)
 8006798:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <vTaskStartScheduler+0xd4>)
 800679c:	f04f 32ff 	mov.w	r2, #4294967295
 80067a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80067a2:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <vTaskStartScheduler+0xd8>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <vTaskStartScheduler+0xdc>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067ae:	f001 fa63 	bl	8007c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067b2:	e00e      	b.n	80067d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d10a      	bne.n	80067d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <vTaskStartScheduler+0xb4>
}
 80067d2:	bf00      	nop
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	080085f4 	.word	0x080085f4
 80067e0:	08006f61 	.word	0x08006f61
 80067e4:	20000d38 	.word	0x20000d38
 80067e8:	20000840 	.word	0x20000840
 80067ec:	20000040 	.word	0x20000040
 80067f0:	20000d34 	.word	0x20000d34
 80067f4:	20000d20 	.word	0x20000d20
 80067f8:	20000d18 	.word	0x20000d18

080067fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <vTaskSuspendAll+0x18>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	4a03      	ldr	r2, [pc, #12]	; (8006814 <vTaskSuspendAll+0x18>)
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	bc80      	pop	{r7}
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000d3c 	.word	0x20000d3c

08006818 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006826:	4b42      	ldr	r3, [pc, #264]	; (8006930 <xTaskResumeAll+0x118>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <xTaskResumeAll+0x2c>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	603b      	str	r3, [r7, #0]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006844:	f001 fa8a 	bl	8007d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006848:	4b39      	ldr	r3, [pc, #228]	; (8006930 <xTaskResumeAll+0x118>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3b01      	subs	r3, #1
 800684e:	4a38      	ldr	r2, [pc, #224]	; (8006930 <xTaskResumeAll+0x118>)
 8006850:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <xTaskResumeAll+0x118>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d162      	bne.n	8006920 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800685a:	4b36      	ldr	r3, [pc, #216]	; (8006934 <xTaskResumeAll+0x11c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d05e      	beq.n	8006920 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006862:	e02f      	b.n	80068c4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006864:	4b34      	ldr	r3, [pc, #208]	; (8006938 <xTaskResumeAll+0x120>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3318      	adds	r3, #24
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fd3b 	bl	80052ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fd36 	bl	80052ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <xTaskResumeAll+0x124>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <xTaskResumeAll+0x7c>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a2a      	ldr	r2, [pc, #168]	; (800693c <xTaskResumeAll+0x124>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a27      	ldr	r2, [pc, #156]	; (8006940 <xTaskResumeAll+0x128>)
 80068a2:	441a      	add	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fcc3 	bl	8005236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b4:	4b23      	ldr	r3, [pc, #140]	; (8006944 <xTaskResumeAll+0x12c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068be:	4b22      	ldr	r3, [pc, #136]	; (8006948 <xTaskResumeAll+0x130>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c4:	4b1c      	ldr	r3, [pc, #112]	; (8006938 <xTaskResumeAll+0x120>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1cb      	bne.n	8006864 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068d2:	f000 fbff 	bl	80070d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068d6:	4b1d      	ldr	r3, [pc, #116]	; (800694c <xTaskResumeAll+0x134>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d010      	beq.n	8006904 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068e2:	f000 f845 	bl	8006970 <xTaskIncrementTick>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068ec:	4b16      	ldr	r3, [pc, #88]	; (8006948 <xTaskResumeAll+0x130>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f1      	bne.n	80068e2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <xTaskResumeAll+0x134>)
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006904:	4b10      	ldr	r3, [pc, #64]	; (8006948 <xTaskResumeAll+0x130>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006910:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <xTaskResumeAll+0x138>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006920:	f001 fa4c 	bl	8007dbc <vPortExitCritical>

	return xAlreadyYielded;
 8006924:	68bb      	ldr	r3, [r7, #8]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000d3c 	.word	0x20000d3c
 8006934:	20000d14 	.word	0x20000d14
 8006938:	20000cd4 	.word	0x20000cd4
 800693c:	20000d1c 	.word	0x20000d1c
 8006940:	20000844 	.word	0x20000844
 8006944:	20000840 	.word	0x20000840
 8006948:	20000d28 	.word	0x20000d28
 800694c:	20000d24 	.word	0x20000d24
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <xTaskGetTickCount+0x18>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006960:	687b      	ldr	r3, [r7, #4]
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	20000d18 	.word	0x20000d18

08006970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697a:	4b51      	ldr	r3, [pc, #324]	; (8006ac0 <xTaskIncrementTick+0x150>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 808e 	bne.w	8006aa0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006984:	4b4f      	ldr	r3, [pc, #316]	; (8006ac4 <xTaskIncrementTick+0x154>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800698c:	4a4d      	ldr	r2, [pc, #308]	; (8006ac4 <xTaskIncrementTick+0x154>)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d120      	bne.n	80069da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006998:	4b4b      	ldr	r3, [pc, #300]	; (8006ac8 <xTaskIncrementTick+0x158>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	603b      	str	r3, [r7, #0]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xTaskIncrementTick+0x46>
 80069b8:	4b43      	ldr	r3, [pc, #268]	; (8006ac8 <xTaskIncrementTick+0x158>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	4b43      	ldr	r3, [pc, #268]	; (8006acc <xTaskIncrementTick+0x15c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a41      	ldr	r2, [pc, #260]	; (8006ac8 <xTaskIncrementTick+0x158>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	4a41      	ldr	r2, [pc, #260]	; (8006acc <xTaskIncrementTick+0x15c>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <xTaskIncrementTick+0x160>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a3f      	ldr	r2, [pc, #252]	; (8006ad0 <xTaskIncrementTick+0x160>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	f000 fb7d 	bl	80070d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069da:	4b3e      	ldr	r3, [pc, #248]	; (8006ad4 <xTaskIncrementTick+0x164>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d34e      	bcc.n	8006a82 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e4:	4b38      	ldr	r3, [pc, #224]	; (8006ac8 <xTaskIncrementTick+0x158>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <xTaskIncrementTick+0x82>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xTaskIncrementTick+0x84>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <xTaskIncrementTick+0x164>)
 80069fa:	f04f 32ff 	mov.w	r2, #4294967295
 80069fe:	601a      	str	r2, [r3, #0]
					break;
 8006a00:	e03f      	b.n	8006a82 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a02:	4b31      	ldr	r3, [pc, #196]	; (8006ac8 <xTaskIncrementTick+0x158>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d203      	bcs.n	8006a22 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a1a:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <xTaskIncrementTick+0x164>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
						break;
 8006a20:	e02f      	b.n	8006a82 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fc60 	bl	80052ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	3318      	adds	r3, #24
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fc57 	bl	80052ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <xTaskIncrementTick+0x168>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d903      	bls.n	8006a52 <xTaskIncrementTick+0xe2>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <xTaskIncrementTick+0x168>)
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4a1f      	ldr	r2, [pc, #124]	; (8006adc <xTaskIncrementTick+0x16c>)
 8006a60:	441a      	add	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7fe fbe4 	bl	8005236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <xTaskIncrementTick+0x170>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d3b3      	bcc.n	80069e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a80:	e7b0      	b.n	80069e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <xTaskIncrementTick+0x170>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4914      	ldr	r1, [pc, #80]	; (8006adc <xTaskIncrementTick+0x16c>)
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d907      	bls.n	8006aaa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e004      	b.n	8006aaa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <xTaskIncrementTick+0x174>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <xTaskIncrementTick+0x174>)
 8006aa8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <xTaskIncrementTick+0x178>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20000d3c 	.word	0x20000d3c
 8006ac4:	20000d18 	.word	0x20000d18
 8006ac8:	20000ccc 	.word	0x20000ccc
 8006acc:	20000cd0 	.word	0x20000cd0
 8006ad0:	20000d2c 	.word	0x20000d2c
 8006ad4:	20000d34 	.word	0x20000d34
 8006ad8:	20000d1c 	.word	0x20000d1c
 8006adc:	20000844 	.word	0x20000844
 8006ae0:	20000840 	.word	0x20000840
 8006ae4:	20000d24 	.word	0x20000d24
 8006ae8:	20000d28 	.word	0x20000d28

08006aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006af2:	4b2a      	ldr	r3, [pc, #168]	; (8006b9c <vTaskSwitchContext+0xb0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006afa:	4b29      	ldr	r3, [pc, #164]	; (8006ba0 <vTaskSwitchContext+0xb4>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b00:	e046      	b.n	8006b90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b02:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <vTaskSwitchContext+0xb4>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <vTaskSwitchContext+0xb8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e010      	b.n	8006b32 <vTaskSwitchContext+0x46>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <vTaskSwitchContext+0x40>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	607b      	str	r3, [r7, #4]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <vTaskSwitchContext+0x3e>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	491d      	ldr	r1, [pc, #116]	; (8006ba8 <vTaskSwitchContext+0xbc>)
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0e4      	beq.n	8006b10 <vTaskSwitchContext+0x24>
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <vTaskSwitchContext+0xbc>)
 8006b52:	4413      	add	r3, r2
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	605a      	str	r2, [r3, #4]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	3308      	adds	r3, #8
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d104      	bne.n	8006b76 <vTaskSwitchContext+0x8a>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <vTaskSwitchContext+0xc0>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <vTaskSwitchContext+0xb8>)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <vTaskSwitchContext+0xc0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3354      	adds	r3, #84	; 0x54
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <vTaskSwitchContext+0xc4>)
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000d3c 	.word	0x20000d3c
 8006ba0:	20000d28 	.word	0x20000d28
 8006ba4:	20000d1c 	.word	0x20000d1c
 8006ba8:	20000844 	.word	0x20000844
 8006bac:	20000840 	.word	0x20000840
 8006bb0:	20000040 	.word	0x20000040

08006bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <vTaskPlaceOnEventList+0x44>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3318      	adds	r3, #24
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe fb4a 	bl	800527c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006be8:	2101      	movs	r1, #1
 8006bea:	6838      	ldr	r0, [r7, #0]
 8006bec:	f000 fc42 	bl	8007474 <prvAddCurrentTaskToDelayedList>
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000840 	.word	0x20000840

08006bfc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	617b      	str	r3, [r7, #20]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <vTaskPlaceOnUnorderedEventList+0x70>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	613b      	str	r3, [r7, #16]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006c4c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c4e:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3318      	adds	r3, #24
 8006c54:	4619      	mov	r1, r3
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7fe faed 	bl	8005236 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fc08 	bl	8007474 <prvAddCurrentTaskToDelayedList>
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000d3c 	.word	0x20000d3c
 8006c70:	20000840 	.word	0x20000840

08006c74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	617b      	str	r3, [r7, #20]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3318      	adds	r3, #24
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7fe fac6 	bl	8005236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	68b8      	ldr	r0, [r7, #8]
 8006cba:	f000 fbdb 	bl	8007474 <prvAddCurrentTaskToDelayedList>
	}
 8006cbe:	bf00      	nop
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000840 	.word	0x20000840

08006ccc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60fb      	str	r3, [r7, #12]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe faf5 	bl	80052ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d02:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <xTaskRemoveFromEventList+0xb0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d11d      	bne.n	8006d46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe faec 	bl	80052ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <xTaskRemoveFromEventList+0xb4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d903      	bls.n	8006d28 <xTaskRemoveFromEventList+0x5c>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	4a16      	ldr	r2, [pc, #88]	; (8006d80 <xTaskRemoveFromEventList+0xb4>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <xTaskRemoveFromEventList+0xb8>)
 8006d36:	441a      	add	r2, r3
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7fe fa79 	bl	8005236 <vListInsertEnd>
 8006d44:	e005      	b.n	8006d52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	480e      	ldr	r0, [pc, #56]	; (8006d88 <xTaskRemoveFromEventList+0xbc>)
 8006d4e:	f7fe fa72 	bl	8005236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <xTaskRemoveFromEventList+0xc0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d905      	bls.n	8006d6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d60:	2301      	movs	r3, #1
 8006d62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <xTaskRemoveFromEventList+0xc4>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	e001      	b.n	8006d70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006d70:	697b      	ldr	r3, [r7, #20]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000d3c 	.word	0x20000d3c
 8006d80:	20000d1c 	.word	0x20000d1c
 8006d84:	20000844 	.word	0x20000844
 8006d88:	20000cd4 	.word	0x20000cd4
 8006d8c:	20000840 	.word	0x20000840
 8006d90:	20000d28 	.word	0x20000d28

08006d94 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	613b      	str	r3, [r7, #16]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60fb      	str	r3, [r7, #12]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fe fa7f 	bl	80052ec <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fa7a 	bl	80052ec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <vTaskRemoveFromUnorderedEventList+0x78>
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a0f      	ldr	r2, [pc, #60]	; (8006e48 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fa07 	bl	8005236 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d902      	bls.n	8006e3c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006e36:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
	}
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000d3c 	.word	0x20000d3c
 8006e48:	20000d1c 	.word	0x20000d1c
 8006e4c:	20000844 	.word	0x20000844
 8006e50:	20000840 	.word	0x20000840
 8006e54:	20000d28 	.word	0x20000d28

08006e58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <vTaskInternalSetTimeOutState+0x24>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <vTaskInternalSetTimeOutState+0x28>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000d2c 	.word	0x20000d2c
 8006e80:	20000d18 	.word	0x20000d18

08006e84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	613b      	str	r3, [r7, #16]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ec6:	f000 ff49 	bl	8007d5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <xTaskCheckForTimeOut+0xbc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d102      	bne.n	8006eea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	e023      	b.n	8006f32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b15      	ldr	r3, [pc, #84]	; (8006f44 <xTaskCheckForTimeOut+0xc0>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d007      	beq.n	8006f06 <xTaskCheckForTimeOut+0x82>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	e015      	b.n	8006f32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d20b      	bcs.n	8006f28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ff9b 	bl	8006e58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	e004      	b.n	8006f32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f32:	f000 ff43 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 8006f36:	69fb      	ldr	r3, [r7, #28]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3720      	adds	r7, #32
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000d18 	.word	0x20000d18
 8006f44:	20000d2c 	.word	0x20000d2c

08006f48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <vTaskMissedYield+0x14>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000d28 	.word	0x20000d28

08006f60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f68:	f000 f852 	bl	8007010 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <prvIdleTask+0x28>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d9f9      	bls.n	8006f68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <prvIdleTask+0x2c>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f84:	e7f0      	b.n	8006f68 <prvIdleTask+0x8>
 8006f86:	bf00      	nop
 8006f88:	20000844 	.word	0x20000844
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
 8006f9a:	e00c      	b.n	8006fb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4a12      	ldr	r2, [pc, #72]	; (8006ff0 <prvInitialiseTaskLists+0x60>)
 8006fa8:	4413      	add	r3, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe f918 	bl	80051e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b37      	cmp	r3, #55	; 0x37
 8006fba:	d9ef      	bls.n	8006f9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fbc:	480d      	ldr	r0, [pc, #52]	; (8006ff4 <prvInitialiseTaskLists+0x64>)
 8006fbe:	f7fe f90f 	bl	80051e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fc2:	480d      	ldr	r0, [pc, #52]	; (8006ff8 <prvInitialiseTaskLists+0x68>)
 8006fc4:	f7fe f90c 	bl	80051e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fc8:	480c      	ldr	r0, [pc, #48]	; (8006ffc <prvInitialiseTaskLists+0x6c>)
 8006fca:	f7fe f909 	bl	80051e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fce:	480c      	ldr	r0, [pc, #48]	; (8007000 <prvInitialiseTaskLists+0x70>)
 8006fd0:	f7fe f906 	bl	80051e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <prvInitialiseTaskLists+0x74>)
 8006fd6:	f7fe f903 	bl	80051e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <prvInitialiseTaskLists+0x78>)
 8006fdc:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <prvInitialiseTaskLists+0x64>)
 8006fde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <prvInitialiseTaskLists+0x7c>)
 8006fe2:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <prvInitialiseTaskLists+0x68>)
 8006fe4:	601a      	str	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000844 	.word	0x20000844
 8006ff4:	20000ca4 	.word	0x20000ca4
 8006ff8:	20000cb8 	.word	0x20000cb8
 8006ffc:	20000cd4 	.word	0x20000cd4
 8007000:	20000ce8 	.word	0x20000ce8
 8007004:	20000d00 	.word	0x20000d00
 8007008:	20000ccc 	.word	0x20000ccc
 800700c:	20000cd0 	.word	0x20000cd0

08007010 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007016:	e019      	b.n	800704c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007018:	f000 fea0 	bl	8007d5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800701c:	4b10      	ldr	r3, [pc, #64]	; (8007060 <prvCheckTasksWaitingTermination+0x50>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe f95f 	bl	80052ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800702e:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <prvCheckTasksWaitingTermination+0x54>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	4a0b      	ldr	r2, [pc, #44]	; (8007064 <prvCheckTasksWaitingTermination+0x54>)
 8007036:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <prvCheckTasksWaitingTermination+0x58>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3b01      	subs	r3, #1
 800703e:	4a0a      	ldr	r2, [pc, #40]	; (8007068 <prvCheckTasksWaitingTermination+0x58>)
 8007040:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007042:	f000 febb 	bl	8007dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f810 	bl	800706c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <prvCheckTasksWaitingTermination+0x58>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e1      	bne.n	8007018 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000ce8 	.word	0x20000ce8
 8007064:	20000d14 	.word	0x20000d14
 8007068:	20000cfc 	.word	0x20000cfc

0800706c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3354      	adds	r3, #84	; 0x54
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f991 	bl	80083a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	4618      	mov	r0, r3
 800708e:	f001 f829 	bl	80080e4 <vPortFree>
				vPortFree( pxTCB );
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 f826 	bl	80080e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007098:	e018      	b.n	80070cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d103      	bne.n	80070ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f81d 	bl	80080e4 <vPortFree>
	}
 80070aa:	e00f      	b.n	80070cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d00a      	beq.n	80070cc <prvDeleteTCB+0x60>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	60fb      	str	r3, [r7, #12]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <prvDeleteTCB+0x5e>
	}
 80070cc:	bf00      	nop
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070da:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <prvResetNextTaskUnblockTime+0x40>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <prvResetNextTaskUnblockTime+0x14>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <prvResetNextTaskUnblockTime+0x16>
 80070e8:	2300      	movs	r3, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <prvResetNextTaskUnblockTime+0x44>)
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295
 80070f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070f6:	e008      	b.n	800710a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <prvResetNextTaskUnblockTime+0x40>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	4a04      	ldr	r2, [pc, #16]	; (8007118 <prvResetNextTaskUnblockTime+0x44>)
 8007108:	6013      	str	r3, [r2, #0]
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr
 8007114:	20000ccc 	.word	0x20000ccc
 8007118:	20000d34 	.word	0x20000d34

0800711c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <xTaskGetSchedulerState+0x34>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800712a:	2301      	movs	r3, #1
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	e008      	b.n	8007142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <xTaskGetSchedulerState+0x38>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007138:	2302      	movs	r3, #2
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	e001      	b.n	8007142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007142:	687b      	ldr	r3, [r7, #4]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000d20 	.word	0x20000d20
 8007154:	20000d3c 	.word	0x20000d3c

08007158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d056      	beq.n	800721c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <xTaskPriorityInherit+0xd0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	429a      	cmp	r2, r3
 800717a:	d246      	bcs.n	800720a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	db06      	blt.n	8007192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <xTaskPriorityInherit+0xd0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4a22      	ldr	r2, [pc, #136]	; (800722c <xTaskPriorityInherit+0xd4>)
 80071a4:	4413      	add	r3, r2
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d101      	bne.n	80071ae <xTaskPriorityInherit+0x56>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <xTaskPriorityInherit+0x58>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe f897 	bl	80052ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071be:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <xTaskPriorityInherit+0xd0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4b18      	ldr	r3, [pc, #96]	; (8007230 <xTaskPriorityInherit+0xd8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d903      	bls.n	80071dc <xTaskPriorityInherit+0x84>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a15      	ldr	r2, [pc, #84]	; (8007230 <xTaskPriorityInherit+0xd8>)
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4a10      	ldr	r2, [pc, #64]	; (800722c <xTaskPriorityInherit+0xd4>)
 80071ea:	441a      	add	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	3304      	adds	r3, #4
 80071f0:	4619      	mov	r1, r3
 80071f2:	4610      	mov	r0, r2
 80071f4:	f7fe f81f 	bl	8005236 <vListInsertEnd>
 80071f8:	e004      	b.n	8007204 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <xTaskPriorityInherit+0xd0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e008      	b.n	800721c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <xTaskPriorityInherit+0xd0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	429a      	cmp	r2, r3
 8007216:	d201      	bcs.n	800721c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800721c:	68fb      	ldr	r3, [r7, #12]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20000840 	.word	0x20000840
 800722c:	20000844 	.word	0x20000844
 8007230:	20000d1c 	.word	0x20000d1c

08007234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d056      	beq.n	80072f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <xTaskPriorityDisinherit+0xd0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	429a      	cmp	r2, r3
 8007252:	d00a      	beq.n	800726a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	60bb      	str	r3, [r7, #8]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	1e5a      	subs	r2, r3, #1
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729a:	429a      	cmp	r2, r3
 800729c:	d02c      	beq.n	80072f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d128      	bne.n	80072f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe f81e 	bl	80052ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <xTaskPriorityDisinherit+0xd4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d903      	bls.n	80072d8 <xTaskPriorityDisinherit+0xa4>
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <xTaskPriorityDisinherit+0xd4>)
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4a09      	ldr	r2, [pc, #36]	; (800730c <xTaskPriorityDisinherit+0xd8>)
 80072e6:	441a      	add	r2, r3
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7fd ffa1 	bl	8005236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072f8:	697b      	ldr	r3, [r7, #20]
	}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000840 	.word	0x20000840
 8007308:	20000d1c 	.word	0x20000d1c
 800730c:	20000844 	.word	0x20000844

08007310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d06f      	beq.n	8007408 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60fb      	str	r3, [r7, #12]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d902      	bls.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	e002      	b.n	800735c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	429a      	cmp	r2, r3
 8007364:	d050      	beq.n	8007408 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	429a      	cmp	r2, r3
 800736e:	d14b      	bne.n	8007408 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007370:	4b27      	ldr	r3, [pc, #156]	; (8007410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	429a      	cmp	r2, r3
 8007378:	d10a      	bne.n	8007390 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60bb      	str	r3, [r7, #8]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db04      	blt.n	80073ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	6959      	ldr	r1, [r3, #20]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a15      	ldr	r2, [pc, #84]	; (8007414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80073be:	4413      	add	r3, r2
 80073c0:	4299      	cmp	r1, r3
 80073c2:	d101      	bne.n	80073c8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <vTaskPriorityDisinheritAfterTimeout+0xba>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d01c      	beq.n	8007408 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fd ff8a 	bl	80052ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	4a0b      	ldr	r2, [pc, #44]	; (8007418 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4a06      	ldr	r2, [pc, #24]	; (8007414 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80073fa:	441a      	add	r2, r3
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7fd ff17 	bl	8005236 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007408:	bf00      	nop
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20000840 	.word	0x20000840
 8007414:	20000844 	.word	0x20000844
 8007418:	20000d1c 	.word	0x20000d1c

0800741c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <uxTaskResetEventItemValue+0x2c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <uxTaskResetEventItemValue+0x2c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <uxTaskResetEventItemValue+0x2c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007438:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800743a:	687b      	ldr	r3, [r7, #4]
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000840 	.word	0x20000840

0800744c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <pvTaskIncrementMutexHeldCount+0x24>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <pvTaskIncrementMutexHeldCount+0x24>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800745e:	3201      	adds	r2, #1
 8007460:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007462:	4b03      	ldr	r3, [pc, #12]	; (8007470 <pvTaskIncrementMutexHeldCount+0x24>)
 8007464:	681b      	ldr	r3, [r3, #0]
	}
 8007466:	4618      	mov	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	20000840 	.word	0x20000840

08007474 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800747e:	4b21      	ldr	r3, [pc, #132]	; (8007504 <prvAddCurrentTaskToDelayedList+0x90>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007484:	4b20      	ldr	r3, [pc, #128]	; (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fd ff2e 	bl	80052ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d10a      	bne.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800749e:	4b1a      	ldr	r3, [pc, #104]	; (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3304      	adds	r3, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4819      	ldr	r0, [pc, #100]	; (800750c <prvAddCurrentTaskToDelayedList+0x98>)
 80074a8:	f7fd fec5 	bl	8005236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80074ac:	e026      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d209      	bcs.n	80074da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <prvAddCurrentTaskToDelayedList+0x9c>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7fd fed2 	bl	800527c <vListInsert>
}
 80074d8:	e010      	b.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80074da:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <prvAddCurrentTaskToDelayedList+0xa0>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <prvAddCurrentTaskToDelayedList+0x94>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fd fec8 	bl	800527c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d202      	bcs.n	80074fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80074f6:	4a08      	ldr	r2, [pc, #32]	; (8007518 <prvAddCurrentTaskToDelayedList+0xa4>)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20000d18 	.word	0x20000d18
 8007508:	20000840 	.word	0x20000840
 800750c:	20000d00 	.word	0x20000d00
 8007510:	20000cd0 	.word	0x20000cd0
 8007514:	20000ccc 	.word	0x20000ccc
 8007518:	20000d34 	.word	0x20000d34

0800751c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007526:	f000 facb 	bl	8007ac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800752a:	4b1c      	ldr	r3, [pc, #112]	; (800759c <xTimerCreateTimerTask+0x80>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d021      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0108 	add.w	r1, r7, #8
 8007540:	f107 030c 	add.w	r3, r7, #12
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd fc43 	bl	8004dd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	9202      	str	r2, [sp, #8]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	2302      	movs	r3, #2
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	460a      	mov	r2, r1
 800755c:	4910      	ldr	r1, [pc, #64]	; (80075a0 <xTimerCreateTimerTask+0x84>)
 800755e:	4811      	ldr	r0, [pc, #68]	; (80075a4 <xTimerCreateTimerTask+0x88>)
 8007560:	f7fe fef8 	bl	8006354 <xTaskCreateStatic>
 8007564:	4603      	mov	r3, r0
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <xTimerCreateTimerTask+0x8c>)
 8007568:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800756a:	4b0f      	ldr	r3, [pc, #60]	; (80075a8 <xTimerCreateTimerTask+0x8c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	613b      	str	r3, [r7, #16]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007592:	697b      	ldr	r3, [r7, #20]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20000d70 	.word	0x20000d70
 80075a0:	080085fc 	.word	0x080085fc
 80075a4:	080076c9 	.word	0x080076c9
 80075a8:	20000d74 	.word	0x20000d74

080075ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	; 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xTimerGenericCommand+0x2e>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <xTimerGenericCommand+0x98>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d02a      	beq.n	8007638 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	dc18      	bgt.n	8007626 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80075f4:	f7ff fd92 	bl	800711c <xTaskGetSchedulerState>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d109      	bne.n	8007612 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <xTimerGenericCommand+0x98>)
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f107 0110 	add.w	r1, r7, #16
 8007606:	2300      	movs	r3, #0
 8007608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800760a:	f7fe f843 	bl	8005694 <xQueueGenericSend>
 800760e:	6278      	str	r0, [r7, #36]	; 0x24
 8007610:	e012      	b.n	8007638 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <xTimerGenericCommand+0x98>)
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	f107 0110 	add.w	r1, r7, #16
 800761a:	2300      	movs	r3, #0
 800761c:	2200      	movs	r2, #0
 800761e:	f7fe f839 	bl	8005694 <xQueueGenericSend>
 8007622:	6278      	str	r0, [r7, #36]	; 0x24
 8007624:	e008      	b.n	8007638 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007626:	4b07      	ldr	r3, [pc, #28]	; (8007644 <xTimerGenericCommand+0x98>)
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	f107 0110 	add.w	r1, r7, #16
 800762e:	2300      	movs	r3, #0
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	f7fe f92d 	bl	8005890 <xQueueGenericSendFromISR>
 8007636:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800763a:	4618      	mov	r0, r3
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000d70 	.word	0x20000d70

08007648 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af02      	add	r7, sp, #8
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007652:	4b1c      	ldr	r3, [pc, #112]	; (80076c4 <prvProcessExpiredTimer+0x7c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3304      	adds	r3, #4
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd fe43 	bl	80052ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d122      	bne.n	80076b4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	18d1      	adds	r1, r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	6978      	ldr	r0, [r7, #20]
 800767c:	f000 f8c8 	bl	8007810 <prvInsertTimerInActiveList>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007686:	2300      	movs	r3, #0
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	2300      	movs	r3, #0
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	2100      	movs	r1, #0
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	f7ff ff8b 	bl	80075ac <xTimerGenericCommand>
 8007696:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	6978      	ldr	r0, [r7, #20]
 80076ba:	4798      	blx	r3
}
 80076bc:	bf00      	nop
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000d68 	.word	0x20000d68

080076c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076d0:	f107 0308 	add.w	r3, r7, #8
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 f857 	bl	8007788 <prvGetNextExpireTime>
 80076da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f803 	bl	80076ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80076e6:	f000 f8d5 	bl	8007894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80076ea:	e7f1      	b.n	80076d0 <prvTimerTask+0x8>

080076ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80076f6:	f7ff f881 	bl	80067fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f866 	bl	80077d0 <prvSampleTimeNow>
 8007704:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d130      	bne.n	800776e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <prvProcessTimerOrBlockTask+0x3c>
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	429a      	cmp	r2, r3
 8007718:	d806      	bhi.n	8007728 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800771a:	f7ff f87d 	bl	8006818 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff91 	bl	8007648 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007726:	e024      	b.n	8007772 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <prvProcessTimerOrBlockTask+0x90>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <prvProcessTimerOrBlockTask+0x94>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4619      	mov	r1, r3
 800774e:	f7fe fdcd 	bl	80062ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007752:	f7ff f861 	bl	8006818 <xTaskResumeAll>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <prvProcessTimerOrBlockTask+0x98>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
}
 800776c:	e001      	b.n	8007772 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800776e:	f7ff f853 	bl	8006818 <xTaskResumeAll>
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000d6c 	.word	0x20000d6c
 8007780:	20000d70 	.word	0x20000d70
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <prvGetNextExpireTime+0x44>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bf0c      	ite	eq
 800779a:	2301      	moveq	r3, #1
 800779c:	2300      	movne	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d105      	bne.n	80077ba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077ae:	4b07      	ldr	r3, [pc, #28]	; (80077cc <prvGetNextExpireTime+0x44>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e001      	b.n	80077be <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077be:	68fb      	ldr	r3, [r7, #12]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000d68 	.word	0x20000d68

080077d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80077d8:	f7ff f8bc 	bl	8006954 <xTaskGetTickCount>
 80077dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80077de:	4b0b      	ldr	r3, [pc, #44]	; (800780c <prvSampleTimeNow+0x3c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d205      	bcs.n	80077f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80077e8:	f000 f908 	bl	80079fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	e002      	b.n	80077fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80077fa:	4a04      	ldr	r2, [pc, #16]	; (800780c <prvSampleTimeNow+0x3c>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007800:	68fb      	ldr	r3, [r7, #12]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000d78 	.word	0x20000d78

08007810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d812      	bhi.n	800785c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	1ad2      	subs	r2, r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	e01b      	b.n	8007882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800784a:	4b10      	ldr	r3, [pc, #64]	; (800788c <prvInsertTimerInActiveList+0x7c>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3304      	adds	r3, #4
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f7fd fd11 	bl	800527c <vListInsert>
 800785a:	e012      	b.n	8007882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d206      	bcs.n	8007872 <prvInsertTimerInActiveList+0x62>
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800786c:	2301      	movs	r3, #1
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e007      	b.n	8007882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007872:	4b07      	ldr	r3, [pc, #28]	; (8007890 <prvInsertTimerInActiveList+0x80>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3304      	adds	r3, #4
 800787a:	4619      	mov	r1, r3
 800787c:	4610      	mov	r0, r2
 800787e:	f7fd fcfd 	bl	800527c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007882:	697b      	ldr	r3, [r7, #20]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000d6c 	.word	0x20000d6c
 8007890:	20000d68 	.word	0x20000d68

08007894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08e      	sub	sp, #56	; 0x38
 8007898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800789a:	e09d      	b.n	80079d8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	da18      	bge.n	80078d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	3304      	adds	r3, #4
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	61fb      	str	r3, [r7, #28]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ca:	6850      	ldr	r0, [r2, #4]
 80078cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ce:	6892      	ldr	r2, [r2, #8]
 80078d0:	4611      	mov	r1, r2
 80078d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	db7d      	blt.n	80079d6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	3304      	adds	r3, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fd fcfe 	bl	80052ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078f0:	463b      	mov	r3, r7
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff ff6c 	bl	80077d0 <prvSampleTimeNow>
 80078f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d86b      	bhi.n	80079d8 <prvProcessReceivedCommands+0x144>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <prvProcessReceivedCommands+0x74>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007931 	.word	0x08007931
 800790c:	08007931 	.word	0x08007931
 8007910:	08007931 	.word	0x08007931
 8007914:	080079d9 	.word	0x080079d9
 8007918:	0800798d 	.word	0x0800798d
 800791c:	080079c5 	.word	0x080079c5
 8007920:	08007931 	.word	0x08007931
 8007924:	08007931 	.word	0x08007931
 8007928:	080079d9 	.word	0x080079d9
 800792c:	0800798d 	.word	0x0800798d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	18d1      	adds	r1, r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f7ff ff67 	bl	8007810 <prvInsertTimerInActiveList>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d047      	beq.n	80079d8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d13f      	bne.n	80079d8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	441a      	add	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	2300      	movs	r3, #0
 8007966:	2100      	movs	r1, #0
 8007968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796a:	f7ff fe1f 	bl	80075ac <xTimerGenericCommand>
 800796e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d130      	bne.n	80079d8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	61bb      	str	r3, [r7, #24]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	617b      	str	r3, [r7, #20]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	18d1      	adds	r1, r2, r3
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079be:	f7ff ff27 	bl	8007810 <prvInsertTimerInActiveList>
					break;
 80079c2:	e009      	b.n	80079d8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80079ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079d0:	f000 fb88 	bl	80080e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079d4:	e000      	b.n	80079d8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80079d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <prvProcessReceivedCommands+0x164>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	1d39      	adds	r1, r7, #4
 80079de:	2200      	movs	r2, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f87b 	bl	8005adc <xQueueReceive>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af57 	bne.w	800789c <prvProcessReceivedCommands+0x8>
	}
}
 80079ee:	bf00      	nop
 80079f0:	bf00      	nop
 80079f2:	3730      	adds	r7, #48	; 0x30
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000d70 	.word	0x20000d70

080079fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b088      	sub	sp, #32
 8007a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a02:	e045      	b.n	8007a90 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a0e:	4b2a      	ldr	r3, [pc, #168]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fd fc65 	bl	80052ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d12e      	bne.n	8007a90 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4413      	add	r3, r2
 8007a3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d90e      	bls.n	8007a62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a50:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	f7fd fc0e 	bl	800527c <vListInsert>
 8007a60:	e016      	b.n	8007a90 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a62:	2300      	movs	r3, #0
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff fd9d 	bl	80075ac <xTimerGenericCommand>
 8007a72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	603b      	str	r3, [r7, #0]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a90:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1b4      	bne.n	8007a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a04      	ldr	r2, [pc, #16]	; (8007ab8 <prvSwitchTimerLists+0xbc>)
 8007aa6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <prvSwitchTimerLists+0xc0>)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6013      	str	r3, [r2, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000d68 	.word	0x20000d68
 8007abc:	20000d6c 	.word	0x20000d6c

08007ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ac6:	f000 f949 	bl	8007d5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007aca:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d120      	bne.n	8007b14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ad2:	4814      	ldr	r0, [pc, #80]	; (8007b24 <prvCheckForValidListAndQueue+0x64>)
 8007ad4:	f7fd fb84 	bl	80051e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ad8:	4813      	ldr	r0, [pc, #76]	; (8007b28 <prvCheckForValidListAndQueue+0x68>)
 8007ada:	f7fd fb81 	bl	80051e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <prvCheckForValidListAndQueue+0x6c>)
 8007ae0:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <prvCheckForValidListAndQueue+0x64>)
 8007ae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ae4:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <prvCheckForValidListAndQueue+0x70>)
 8007ae6:	4a10      	ldr	r2, [pc, #64]	; (8007b28 <prvCheckForValidListAndQueue+0x68>)
 8007ae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aea:	2300      	movs	r3, #0
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <prvCheckForValidListAndQueue+0x74>)
 8007af0:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <prvCheckForValidListAndQueue+0x78>)
 8007af2:	2110      	movs	r1, #16
 8007af4:	200a      	movs	r0, #10
 8007af6:	f7fd fc8b 	bl	8005410 <xQueueGenericCreateStatic>
 8007afa:	4603      	mov	r3, r0
 8007afc:	4a08      	ldr	r2, [pc, #32]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007afe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <prvCheckForValidListAndQueue+0x60>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	490b      	ldr	r1, [pc, #44]	; (8007b3c <prvCheckForValidListAndQueue+0x7c>)
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fb9a 	bl	8006248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b14:	f000 f952 	bl	8007dbc <vPortExitCritical>
}
 8007b18:	bf00      	nop
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000d70 	.word	0x20000d70
 8007b24:	20000d40 	.word	0x20000d40
 8007b28:	20000d54 	.word	0x20000d54
 8007b2c:	20000d68 	.word	0x20000d68
 8007b30:	20000d6c 	.word	0x20000d6c
 8007b34:	20000e1c 	.word	0x20000e1c
 8007b38:	20000d7c 	.word	0x20000d7c
 8007b3c:	08008604 	.word	0x08008604

08007b40 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007b4e:	f06f 0301 	mvn.w	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <xTimerPendFunctionCallFromISR+0x3c>)
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	f107 0114 	add.w	r1, r7, #20
 8007b68:	2300      	movs	r3, #0
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	f7fd fe90 	bl	8005890 <xQueueGenericSendFromISR>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3728      	adds	r7, #40	; 0x28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000d70 	.word	0x20000d70

08007b80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b04      	subs	r3, #4
 8007b90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b04      	subs	r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bb0:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <pxPortInitialiseStack+0x54>)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3b14      	subs	r3, #20
 8007bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3b20      	subs	r3, #32
 8007bc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr
 8007bd4:	08007bd9 	.word	0x08007bd9

08007bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <prvTaskExitError+0x54>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d00a      	beq.n	8007c02 <prvTaskExitError+0x2a>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <prvTaskExitError+0x28>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60bb      	str	r3, [r7, #8]
}
 8007c14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c16:	bf00      	nop
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0fc      	beq.n	8007c18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	2000003c 	.word	0x2000003c

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007c4e:	4770      	bx	lr

08007c50 <pxCurrentTCBConst2>:
 8007c50:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c58:	4806      	ldr	r0, [pc, #24]	; (8007c74 <prvPortStartFirstTask+0x1c>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	b662      	cpsie	i
 8007c64:	b661      	cpsie	f
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	df00      	svc	0
 8007c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c72:	bf00      	nop
 8007c74:	e000ed08 	.word	0xe000ed08

08007c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c7e:	4b32      	ldr	r3, [pc, #200]	; (8007d48 <xPortStartScheduler+0xd0>)
 8007c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <xPortStartScheduler+0xd4>)
 8007ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007ca8:	2207      	movs	r2, #7
 8007caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cac:	e009      	b.n	8007cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007cae:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4a26      	ldr	r2, [pc, #152]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cca:	2b80      	cmp	r3, #128	; 0x80
 8007ccc:	d0ef      	beq.n	8007cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1c3 0307 	rsb	r3, r3, #7
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d00a      	beq.n	8007cf0 <xPortStartScheduler+0x78>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cf0:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cf8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cfa:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d02:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <xPortStartScheduler+0xd8>)
 8007d04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d0e:	4b11      	ldr	r3, [pc, #68]	; (8007d54 <xPortStartScheduler+0xdc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <xPortStartScheduler+0xdc>)
 8007d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d1a:	4b0e      	ldr	r3, [pc, #56]	; (8007d54 <xPortStartScheduler+0xdc>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <xPortStartScheduler+0xdc>)
 8007d20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d26:	f000 f8b9 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d2a:	4b0b      	ldr	r3, [pc, #44]	; (8007d58 <xPortStartScheduler+0xe0>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d30:	f7ff ff92 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d34:	f7fe feda 	bl	8006aec <vTaskSwitchContext>
	prvTaskExitError();
 8007d38:	f7ff ff4e 	bl	8007bd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	e000e400 	.word	0xe000e400
 8007d4c:	20000e6c 	.word	0x20000e6c
 8007d50:	20000e70 	.word	0x20000e70
 8007d54:	e000ed20 	.word	0xe000ed20
 8007d58:	2000003c 	.word	0x2000003c

08007d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
}
 8007d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <vPortEnterCritical+0x58>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	4a0d      	ldr	r2, [pc, #52]	; (8007db4 <vPortEnterCritical+0x58>)
 8007d7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d80:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <vPortEnterCritical+0x58>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10f      	bne.n	8007da8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d88:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <vPortEnterCritical+0x5c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	603b      	str	r3, [r7, #0]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vPortEnterCritical+0x4a>
	}
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	2000003c 	.word	0x2000003c
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dc2:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <vPortExitCritical+0x4c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <vPortExitCritical+0x24>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <vPortExitCritical+0x4c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <vPortExitCritical+0x4c>)
 8007de8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <vPortExitCritical+0x4c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d105      	bne.n	8007dfe <vPortExitCritical+0x42>
 8007df2:	2300      	movs	r3, #0
 8007df4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	f383 8811 	msr	BASEPRI, r3
}
 8007dfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr
 8007e08:	2000003c 	.word	0x2000003c
 8007e0c:	00000000 	.word	0x00000000

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e20:	6010      	str	r0, [r2, #0]
 8007e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e2a:	f380 8811 	msr	BASEPRI, r0
 8007e2e:	f7fe fe5d 	bl	8006aec <vTaskSwitchContext>
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e3e:	6819      	ldr	r1, [r3, #0]
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e46:	f380 8809 	msr	PSP, r0
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	4770      	bx	lr

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7fe fd7d 	bl	8006970 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <SysTick_Handler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <vPortSetupTimerInterrupt+0x30>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a08      	ldr	r2, [pc, #32]	; (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <vPortSetupTimerInterrupt+0x30>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	e000e010 	.word	0xe000e010
 8007ed0:	e000e018 	.word	0xe000e018
 8007ed4:	20000030 	.word	0x20000030
 8007ed8:	10624dd3 	.word	0x10624dd3
 8007edc:	e000e014 	.word	0xe000e014

08007ee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ee6:	f3ef 8305 	mrs	r3, IPSR
 8007eea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b0f      	cmp	r3, #15
 8007ef0:	d914      	bls.n	8007f1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ef2:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <vPortValidateInterruptPriority+0x6c>)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007efc:	4b14      	ldr	r3, [pc, #80]	; (8007f50 <vPortValidateInterruptPriority+0x70>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	7afa      	ldrb	r2, [r7, #11]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d20a      	bcs.n	8007f1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	607b      	str	r3, [r7, #4]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <vPortValidateInterruptPriority+0x74>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f24:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <vPortValidateInterruptPriority+0x78>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d90a      	bls.n	8007f42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	603b      	str	r3, [r7, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <vPortValidateInterruptPriority+0x60>
	}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	e000e3f0 	.word	0xe000e3f0
 8007f50:	20000e6c 	.word	0x20000e6c
 8007f54:	e000ed0c 	.word	0xe000ed0c
 8007f58:	20000e70 	.word	0x20000e70

08007f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f68:	f7fe fc48 	bl	80067fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f6c:	4b58      	ldr	r3, [pc, #352]	; (80080d0 <pvPortMalloc+0x174>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f74:	f000 f910 	bl	8008198 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f78:	4b56      	ldr	r3, [pc, #344]	; (80080d4 <pvPortMalloc+0x178>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 808e 	bne.w	80080a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01d      	beq.n	8007fc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d014      	beq.n	8007fc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <pvPortMalloc+0x6c>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	617b      	str	r3, [r7, #20]
}
 8007fc4:	bf00      	nop
 8007fc6:	e7fe      	b.n	8007fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d069      	beq.n	80080a2 <pvPortMalloc+0x146>
 8007fce:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <pvPortMalloc+0x17c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d864      	bhi.n	80080a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fd8:	4b40      	ldr	r3, [pc, #256]	; (80080dc <pvPortMalloc+0x180>)
 8007fda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fdc:	4b3f      	ldr	r3, [pc, #252]	; (80080dc <pvPortMalloc+0x180>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fe2:	e004      	b.n	8007fee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <pvPortMalloc+0xa4>
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1f1      	bne.n	8007fe4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008000:	4b33      	ldr	r3, [pc, #204]	; (80080d0 <pvPortMalloc+0x174>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008006:	429a      	cmp	r2, r3
 8008008:	d04b      	beq.n	80080a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2208      	movs	r2, #8
 8008010:	4413      	add	r3, r2
 8008012:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	2308      	movs	r3, #8
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	429a      	cmp	r2, r3
 800802a:	d91f      	bls.n	800806c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <pvPortMalloc+0xf8>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	613b      	str	r3, [r7, #16]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008066:	69b8      	ldr	r0, [r7, #24]
 8008068:	f000 f8f8 	bl	800825c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <pvPortMalloc+0x17c>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <pvPortMalloc+0x17c>)
 8008078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800807a:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <pvPortMalloc+0x17c>)
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <pvPortMalloc+0x184>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d203      	bcs.n	800808e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <pvPortMalloc+0x17c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <pvPortMalloc+0x184>)
 800808c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <pvPortMalloc+0x178>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	431a      	orrs	r2, r3
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080a2:	f7fe fbb9 	bl	8006818 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <pvPortMalloc+0x16a>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <pvPortMalloc+0x168>
	return pvReturn;
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20004e7c 	.word	0x20004e7c
 80080d4:	20004e88 	.word	0x20004e88
 80080d8:	20004e80 	.word	0x20004e80
 80080dc:	20004e74 	.word	0x20004e74
 80080e0:	20004e84 	.word	0x20004e84

080080e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d048      	beq.n	8008188 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080f6:	2308      	movs	r3, #8
 80080f8:	425b      	negs	r3, r3
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4413      	add	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <vPortFree+0xac>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4013      	ands	r3, r2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <vPortFree+0x44>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60fb      	str	r3, [r7, #12]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <vPortFree+0x62>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	60bb      	str	r3, [r7, #8]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	4b11      	ldr	r3, [pc, #68]	; (8008190 <vPortFree+0xac>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d019      	beq.n	8008188 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d115      	bne.n	8008188 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <vPortFree+0xac>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	43db      	mvns	r3, r3
 8008166:	401a      	ands	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800816c:	f7fe fb46 	bl	80067fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <vPortFree+0xb0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4413      	add	r3, r2
 800817a:	4a06      	ldr	r2, [pc, #24]	; (8008194 <vPortFree+0xb0>)
 800817c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800817e:	6938      	ldr	r0, [r7, #16]
 8008180:	f000 f86c 	bl	800825c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008184:	f7fe fb48 	bl	8006818 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008188:	bf00      	nop
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20004e88 	.word	0x20004e88
 8008194:	20004e80 	.word	0x20004e80

08008198 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800819e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081a4:	4b27      	ldr	r3, [pc, #156]	; (8008244 <prvHeapInit+0xac>)
 80081a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0307 	and.w	r3, r3, #7
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00c      	beq.n	80081cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3307      	adds	r3, #7
 80081b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <prvHeapInit+0xac>)
 80081c8:	4413      	add	r3, r2
 80081ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <prvHeapInit+0xb0>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081d6:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <prvHeapInit+0xb0>)
 80081d8:	2200      	movs	r2, #0
 80081da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081e4:	2208      	movs	r2, #8
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <prvHeapInit+0xb4>)
 80081f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <prvHeapInit+0xb4>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2200      	movs	r2, #0
 8008200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <prvHeapInit+0xb4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <prvHeapInit+0xb4>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4a0a      	ldr	r2, [pc, #40]	; (8008250 <prvHeapInit+0xb8>)
 8008226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4a09      	ldr	r2, [pc, #36]	; (8008254 <prvHeapInit+0xbc>)
 800822e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <prvHeapInit+0xc0>)
 8008232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008236:	601a      	str	r2, [r3, #0]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	bc80      	pop	{r7}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000e74 	.word	0x20000e74
 8008248:	20004e74 	.word	0x20004e74
 800824c:	20004e7c 	.word	0x20004e7c
 8008250:	20004e84 	.word	0x20004e84
 8008254:	20004e80 	.word	0x20004e80
 8008258:	20004e88 	.word	0x20004e88

0800825c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <prvInsertBlockIntoFreeList+0xa8>)
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	e002      	b.n	8008270 <prvInsertBlockIntoFreeList+0x14>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	429a      	cmp	r2, r3
 8008278:	d8f7      	bhi.n	800826a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	429a      	cmp	r2, r3
 800828a:	d108      	bne.n	800829e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	441a      	add	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d118      	bne.n	80082e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <prvInsertBlockIntoFreeList+0xac>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d00d      	beq.n	80082da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	441a      	add	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e008      	b.n	80082ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082da:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <prvInsertBlockIntoFreeList+0xac>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e003      	b.n	80082ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d002      	beq.n	80082fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	bc80      	pop	{r7}
 8008302:	4770      	bx	lr
 8008304:	20004e74 	.word	0x20004e74
 8008308:	20004e7c 	.word	0x20004e7c

0800830c <__libc_init_array>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	2600      	movs	r6, #0
 8008310:	4d0c      	ldr	r5, [pc, #48]	; (8008344 <__libc_init_array+0x38>)
 8008312:	4c0d      	ldr	r4, [pc, #52]	; (8008348 <__libc_init_array+0x3c>)
 8008314:	1b64      	subs	r4, r4, r5
 8008316:	10a4      	asrs	r4, r4, #2
 8008318:	42a6      	cmp	r6, r4
 800831a:	d109      	bne.n	8008330 <__libc_init_array+0x24>
 800831c:	f000 f8f4 	bl	8008508 <_init>
 8008320:	2600      	movs	r6, #0
 8008322:	4d0a      	ldr	r5, [pc, #40]	; (800834c <__libc_init_array+0x40>)
 8008324:	4c0a      	ldr	r4, [pc, #40]	; (8008350 <__libc_init_array+0x44>)
 8008326:	1b64      	subs	r4, r4, r5
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	42a6      	cmp	r6, r4
 800832c:	d105      	bne.n	800833a <__libc_init_array+0x2e>
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	f855 3b04 	ldr.w	r3, [r5], #4
 8008334:	4798      	blx	r3
 8008336:	3601      	adds	r6, #1
 8008338:	e7ee      	b.n	8008318 <__libc_init_array+0xc>
 800833a:	f855 3b04 	ldr.w	r3, [r5], #4
 800833e:	4798      	blx	r3
 8008340:	3601      	adds	r6, #1
 8008342:	e7f2      	b.n	800832a <__libc_init_array+0x1e>
 8008344:	080087e0 	.word	0x080087e0
 8008348:	080087e0 	.word	0x080087e0
 800834c:	080087e0 	.word	0x080087e0
 8008350:	080087e4 	.word	0x080087e4

08008354 <__retarget_lock_acquire_recursive>:
 8008354:	4770      	bx	lr

08008356 <__retarget_lock_release_recursive>:
 8008356:	4770      	bx	lr

08008358 <memcpy>:
 8008358:	440a      	add	r2, r1
 800835a:	4291      	cmp	r1, r2
 800835c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008360:	d100      	bne.n	8008364 <memcpy+0xc>
 8008362:	4770      	bx	lr
 8008364:	b510      	push	{r4, lr}
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	4291      	cmp	r1, r2
 800836c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008370:	d1f9      	bne.n	8008366 <memcpy+0xe>
 8008372:	bd10      	pop	{r4, pc}

08008374 <memset>:
 8008374:	4603      	mov	r3, r0
 8008376:	4402      	add	r2, r0
 8008378:	4293      	cmp	r3, r2
 800837a:	d100      	bne.n	800837e <memset+0xa>
 800837c:	4770      	bx	lr
 800837e:	f803 1b01 	strb.w	r1, [r3], #1
 8008382:	e7f9      	b.n	8008378 <memset+0x4>

08008384 <cleanup_glue>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	460c      	mov	r4, r1
 8008388:	6809      	ldr	r1, [r1, #0]
 800838a:	4605      	mov	r5, r0
 800838c:	b109      	cbz	r1, 8008392 <cleanup_glue+0xe>
 800838e:	f7ff fff9 	bl	8008384 <cleanup_glue>
 8008392:	4621      	mov	r1, r4
 8008394:	4628      	mov	r0, r5
 8008396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839a:	f000 b869 	b.w	8008470 <_free_r>
	...

080083a0 <_reclaim_reent>:
 80083a0:	4b2c      	ldr	r3, [pc, #176]	; (8008454 <_reclaim_reent+0xb4>)
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4604      	mov	r4, r0
 80083a8:	4283      	cmp	r3, r0
 80083aa:	d051      	beq.n	8008450 <_reclaim_reent+0xb0>
 80083ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083ae:	b143      	cbz	r3, 80083c2 <_reclaim_reent+0x22>
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d14a      	bne.n	800844c <_reclaim_reent+0xac>
 80083b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	b111      	cbz	r1, 80083c2 <_reclaim_reent+0x22>
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f857 	bl	8008470 <_free_r>
 80083c2:	6961      	ldr	r1, [r4, #20]
 80083c4:	b111      	cbz	r1, 80083cc <_reclaim_reent+0x2c>
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f852 	bl	8008470 <_free_r>
 80083cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083ce:	b111      	cbz	r1, 80083d6 <_reclaim_reent+0x36>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f84d 	bl	8008470 <_free_r>
 80083d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083d8:	b111      	cbz	r1, 80083e0 <_reclaim_reent+0x40>
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 f848 	bl	8008470 <_free_r>
 80083e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083e2:	b111      	cbz	r1, 80083ea <_reclaim_reent+0x4a>
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f843 	bl	8008470 <_free_r>
 80083ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083ec:	b111      	cbz	r1, 80083f4 <_reclaim_reent+0x54>
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f83e 	bl	8008470 <_free_r>
 80083f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80083f6:	b111      	cbz	r1, 80083fe <_reclaim_reent+0x5e>
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 f839 	bl	8008470 <_free_r>
 80083fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008400:	b111      	cbz	r1, 8008408 <_reclaim_reent+0x68>
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f834 	bl	8008470 <_free_r>
 8008408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800840a:	b111      	cbz	r1, 8008412 <_reclaim_reent+0x72>
 800840c:	4620      	mov	r0, r4
 800840e:	f000 f82f 	bl	8008470 <_free_r>
 8008412:	69a3      	ldr	r3, [r4, #24]
 8008414:	b1e3      	cbz	r3, 8008450 <_reclaim_reent+0xb0>
 8008416:	4620      	mov	r0, r4
 8008418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800841a:	4798      	blx	r3
 800841c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800841e:	b1b9      	cbz	r1, 8008450 <_reclaim_reent+0xb0>
 8008420:	4620      	mov	r0, r4
 8008422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008426:	f7ff bfad 	b.w	8008384 <cleanup_glue>
 800842a:	5949      	ldr	r1, [r1, r5]
 800842c:	b941      	cbnz	r1, 8008440 <_reclaim_reent+0xa0>
 800842e:	3504      	adds	r5, #4
 8008430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008432:	2d80      	cmp	r5, #128	; 0x80
 8008434:	68d9      	ldr	r1, [r3, #12]
 8008436:	d1f8      	bne.n	800842a <_reclaim_reent+0x8a>
 8008438:	4620      	mov	r0, r4
 800843a:	f000 f819 	bl	8008470 <_free_r>
 800843e:	e7ba      	b.n	80083b6 <_reclaim_reent+0x16>
 8008440:	680e      	ldr	r6, [r1, #0]
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f814 	bl	8008470 <_free_r>
 8008448:	4631      	mov	r1, r6
 800844a:	e7ef      	b.n	800842c <_reclaim_reent+0x8c>
 800844c:	2500      	movs	r5, #0
 800844e:	e7ef      	b.n	8008430 <_reclaim_reent+0x90>
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	bf00      	nop
 8008454:	20000040 	.word	0x20000040

08008458 <__malloc_lock>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__malloc_lock+0x8>)
 800845a:	f7ff bf7b 	b.w	8008354 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20005058 	.word	0x20005058

08008464 <__malloc_unlock>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__malloc_unlock+0x8>)
 8008466:	f7ff bf76 	b.w	8008356 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20005058 	.word	0x20005058

08008470 <_free_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4605      	mov	r5, r0
 8008474:	2900      	cmp	r1, #0
 8008476:	d043      	beq.n	8008500 <_free_r+0x90>
 8008478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847c:	1f0c      	subs	r4, r1, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfb8      	it	lt
 8008482:	18e4      	addlt	r4, r4, r3
 8008484:	f7ff ffe8 	bl	8008458 <__malloc_lock>
 8008488:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <_free_r+0x94>)
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	4610      	mov	r0, r2
 800848e:	b933      	cbnz	r3, 800849e <_free_r+0x2e>
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	6014      	str	r4, [r2, #0]
 8008494:	4628      	mov	r0, r5
 8008496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849a:	f7ff bfe3 	b.w	8008464 <__malloc_unlock>
 800849e:	42a3      	cmp	r3, r4
 80084a0:	d90a      	bls.n	80084b8 <_free_r+0x48>
 80084a2:	6821      	ldr	r1, [r4, #0]
 80084a4:	1862      	adds	r2, r4, r1
 80084a6:	4293      	cmp	r3, r2
 80084a8:	bf01      	itttt	eq
 80084aa:	681a      	ldreq	r2, [r3, #0]
 80084ac:	685b      	ldreq	r3, [r3, #4]
 80084ae:	1852      	addeq	r2, r2, r1
 80084b0:	6022      	streq	r2, [r4, #0]
 80084b2:	6063      	str	r3, [r4, #4]
 80084b4:	6004      	str	r4, [r0, #0]
 80084b6:	e7ed      	b.n	8008494 <_free_r+0x24>
 80084b8:	461a      	mov	r2, r3
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	b10b      	cbz	r3, 80084c2 <_free_r+0x52>
 80084be:	42a3      	cmp	r3, r4
 80084c0:	d9fa      	bls.n	80084b8 <_free_r+0x48>
 80084c2:	6811      	ldr	r1, [r2, #0]
 80084c4:	1850      	adds	r0, r2, r1
 80084c6:	42a0      	cmp	r0, r4
 80084c8:	d10b      	bne.n	80084e2 <_free_r+0x72>
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	4401      	add	r1, r0
 80084ce:	1850      	adds	r0, r2, r1
 80084d0:	4283      	cmp	r3, r0
 80084d2:	6011      	str	r1, [r2, #0]
 80084d4:	d1de      	bne.n	8008494 <_free_r+0x24>
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	4401      	add	r1, r0
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	6053      	str	r3, [r2, #4]
 80084e0:	e7d8      	b.n	8008494 <_free_r+0x24>
 80084e2:	d902      	bls.n	80084ea <_free_r+0x7a>
 80084e4:	230c      	movs	r3, #12
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	e7d4      	b.n	8008494 <_free_r+0x24>
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	1821      	adds	r1, r4, r0
 80084ee:	428b      	cmp	r3, r1
 80084f0:	bf01      	itttt	eq
 80084f2:	6819      	ldreq	r1, [r3, #0]
 80084f4:	685b      	ldreq	r3, [r3, #4]
 80084f6:	1809      	addeq	r1, r1, r0
 80084f8:	6021      	streq	r1, [r4, #0]
 80084fa:	6063      	str	r3, [r4, #4]
 80084fc:	6054      	str	r4, [r2, #4]
 80084fe:	e7c9      	b.n	8008494 <_free_r+0x24>
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	20004e8c 	.word	0x20004e8c

08008508 <_init>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr

08008514 <_fini>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	bf00      	nop
 8008518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851a:	bc08      	pop	{r3}
 800851c:	469e      	mov	lr, r3
 800851e:	4770      	bx	lr
