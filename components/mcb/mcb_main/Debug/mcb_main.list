
mcb_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef8  2000008c  08006f74  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f84  08006f74  00020f84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175ac  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf8  00000000  00000000  00037661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a545  00000000  00000000  0003d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001747b  00000000  00000000  00057e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098eb6  00000000  00000000  0006f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010817e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005740  00000000  00000000  001081d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d48 	.word	0x08006d48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08006d48 	.word	0x08006d48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	; 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000846:	2afd      	cmp	r2, #253	; 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	; 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	; 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x78>)
 8000b94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000baa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000bbe:	f000 ff73 	bl	8001aa8 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f000 fc88 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_ADC1_Init+0x74>)
 8000bde:	f001 f9fb 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000be8:	f000 fc78 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	40012400 	.word	0x40012400

08000bfc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_ADC2_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c3a:	f000 ff35 	bl	8001aa8 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c44:	f000 fc4a 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c48:	2309      	movs	r3, #9
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC2_Init+0x74>)
 8000c5a:	f001 f9bd 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 fc3a 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	40012800 	.word	0x40012800

08000c78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_ADC_MspInit+0xbc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d122      	bne.n	8000cde <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = REGEN_VAL_Pin;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(REGEN_VAL_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0318 	add.w	r3, r7, #24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xc4>)
 8000cd8:	f001 fefe 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000cdc:	e026      	b.n	8000d2c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_ADC_MspInit+0xc8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d121      	bne.n	8000d2c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = THROTTLE_VAL_Pin;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(THROTTLE_VAL_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4807      	ldr	r0, [pc, #28]	; (8000d44 <HAL_ADC_MspInit+0xcc>)
 8000d28:	f001 fed6 	bl	8002ad8 <HAL_GPIO_Init>
}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40012800 	.word	0x40012800
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <ReadADC>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t ReadADC(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 ff81 	bl	8001c58 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000d56:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f001 f82a 	bl	8001db4 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(hadc);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f001 f92d 	bl	8001fc0 <HAL_ADC_GetValue>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29b      	uxth	r3, r3
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <MX_CAN_Init+0x64>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d80:	2210      	movs	r2, #16
 8000d82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_CAN_Init+0x60>)
 8000dc2:	f001 fa9c 	bl	80022fe <HAL_CAN_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000dcc:	f000 fb86 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000128 	.word	0x20000128
 8000dd8:	40006400 	.word	0x40006400

08000ddc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_CAN_MspInit+0xb0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d143      	bne.n	8000e84 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e06:	61d3      	str	r3, [r2, #28]
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_CAN_MspInit+0xb4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4814      	ldr	r0, [pc, #80]	; (8000e94 <HAL_CAN_MspInit+0xb8>)
 8000e42:	f001 fe49 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480e      	ldr	r0, [pc, #56]	; (8000e94 <HAL_CAN_MspInit+0xb8>)
 8000e5c:	f001 fe3c 	bl	8002ad8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_CAN_MspInit+0xbc>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_CAN_MspInit+0xbc>)
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40006400 	.word	0x40006400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40010000 	.word	0x40010000

08000e9c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_FREERTOS_Init+0x68>)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4818      	ldr	r0, [pc, #96]	; (8000f08 <MX_FREERTOS_Init+0x6c>)
 8000ea6:	f003 fb47 	bl	8004538 <osThreadNew>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a17      	ldr	r2, [pc, #92]	; (8000f0c <MX_FREERTOS_Init+0x70>)
 8000eae:	6013      	str	r3, [r2, #0]

  /* creation of UpdateState */
  UpdateStateHandle = osThreadNew(updateState, NULL, &UpdateState_attributes);
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <MX_FREERTOS_Init+0x74>)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <MX_FREERTOS_Init+0x78>)
 8000eb6:	f003 fb3f 	bl	8004538 <osThreadNew>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a16      	ldr	r2, [pc, #88]	; (8000f18 <MX_FREERTOS_Init+0x7c>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* creation of SendMotorCommand */
  SendMotorCommandHandle = osThreadNew(sendMotorCommand, NULL, &SendMotorCommand_attributes);
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <MX_FREERTOS_Init+0x80>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_FREERTOS_Init+0x84>)
 8000ec6:	f003 fb37 	bl	8004538 <osThreadNew>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <MX_FREERTOS_Init+0x88>)
 8000ece:	6013      	str	r3, [r2, #0]

  /* creation of GetADCValues */
  GetADCValuesHandle = osThreadNew(getADCValues, NULL, &GetADCValues_attributes);
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_FREERTOS_Init+0x8c>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <MX_FREERTOS_Init+0x90>)
 8000ed6:	f003 fb2f 	bl	8004538 <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <MX_FREERTOS_Init+0x94>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* creation of GetBatterySOC */
  GetBatterySOCHandle = osThreadNew(getBatterySOC, NULL, &GetBatterySOC_attributes);
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <MX_FREERTOS_Init+0x98>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_FREERTOS_Init+0x9c>)
 8000ee6:	f003 fb27 	bl	8004538 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <MX_FREERTOS_Init+0xa0>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* creation of GetVelocity */
  GetVelocityHandle = osThreadNew(getVelocity, NULL, &GetVelocity_attributes);
 8000ef0:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <MX_FREERTOS_Init+0xa4>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_FREERTOS_Init+0xa8>)
 8000ef6:	f003 fb1f 	bl	8004538 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <MX_FREERTOS_Init+0xac>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08006df0 	.word	0x08006df0
 8000f08:	08000f4d 	.word	0x08000f4d
 8000f0c:	2000015c 	.word	0x2000015c
 8000f10:	08006e14 	.word	0x08006e14
 8000f14:	08000f6d 	.word	0x08000f6d
 8000f18:	20000160 	.word	0x20000160
 8000f1c:	08006e38 	.word	0x08006e38
 8000f20:	08001051 	.word	0x08001051
 8000f24:	20000164 	.word	0x20000164
 8000f28:	08006e5c 	.word	0x08006e5c
 8000f2c:	08001159 	.word	0x08001159
 8000f30:	20000168 	.word	0x20000168
 8000f34:	08006e80 	.word	0x08006e80
 8000f38:	0800120d 	.word	0x0800120d
 8000f3c:	2000016c 	.word	0x2000016c
 8000f40:	08006ea4 	.word	0x08006ea4
 8000f44:	08001269 	.word	0x08001269
 8000f48:	20000170 	.word	0x20000170

08000f4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f54:	2120      	movs	r1, #32
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <StartDefaultTask+0x1c>)
 8000f58:	f001 ff71 	bl	8002e3e <HAL_GPIO_TogglePin>
     osDelay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f60:	f003 fb94 	bl	800468c <osDelay>
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f64:	e7f6      	b.n	8000f54 <StartDefaultTask+0x8>
 8000f66:	bf00      	nop
 8000f68:	40010800 	.word	0x40010800

08000f6c <updateState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateState */
void updateState(void *argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateState */
	/* Infinite loop */
	for(;;)
	{
		UpdateInputFlags(&input_flags);
 8000f74:	4834      	ldr	r0, [pc, #208]	; (8001048 <updateState+0xdc>)
 8000f76:	f000 fb0f 	bl	8001598 <UpdateInputFlags>
		/*
		 *  Conditional statement is intentially organized in a hierarchical structure.
		 *  If there are two valid states based on the given event_flags, the higher one will take priority.
		 *  Ex: If throttle and regen are both pressed, the state will be in regen because it has the higher priority.
		 */
		if (input_flags.park_enabled && (state == IDLE || state == PARK))
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <updateState+0xdc>)
 8000f7c:	799b      	ldrb	r3, [r3, #6]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00b      	beq.n	8000f9c <updateState+0x30>
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <updateState+0xe0>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d003      	beq.n	8000f94 <updateState+0x28>
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <updateState+0xe0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d103      	bne.n	8000f9c <updateState+0x30>
			state = PARK;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <updateState+0xe0>)
 8000f96:	2206      	movs	r2, #6
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e050      	b.n	800103e <updateState+0xd2>
		else if (input_flags.mech_brake_pressed)
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <updateState+0xdc>)
 8000f9e:	789b      	ldrb	r3, [r3, #2]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <updateState+0x42>
			state = IDLE;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <updateState+0xe0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	e047      	b.n	800103e <updateState+0xd2>
		else if (input_flags.regen_pressed && input_flags.charge_under_threshold && input_flags.regen_enabled)
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <updateState+0xdc>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00d      	beq.n	8000fd4 <updateState+0x68>
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <updateState+0xdc>)
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d008      	beq.n	8000fd4 <updateState+0x68>
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <updateState+0xdc>)
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <updateState+0x68>
		  	state = REGEN;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <updateState+0xe0>)
 8000fce:	2203      	movs	r2, #3
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e034      	b.n	800103e <updateState+0xd2>
		else if (input_flags.cruise_enabled && input_flags.cruise_accelerate_enabled)
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <updateState+0xdc>)
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <updateState+0x84>
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <updateState+0xdc>)
 8000fe0:	795b      	ldrb	r3, [r3, #5]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <updateState+0x84>
		  	state = CRUISE_ACCELERATE;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <updateState+0xe0>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e026      	b.n	800103e <updateState+0xd2>
		else if (input_flags.cruise_enabled)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <updateState+0xdc>)
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <updateState+0x96>
		    state = CRUISE;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <updateState+0xe0>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e01d      	b.n	800103e <updateState+0xd2>
		else if (input_flags.reverse_enabled && input_flags.velocity_under_threshold && state != PARK)
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <updateState+0xdc>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00c      	beq.n	8001026 <updateState+0xba>
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <updateState+0xdc>)
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <updateState+0xba>
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <updateState+0xe0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b06      	cmp	r3, #6
 800101c:	d003      	beq.n	8001026 <updateState+0xba>
			state = REVERSE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <updateState+0xe0>)
 8001020:	2207      	movs	r2, #7
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e00b      	b.n	800103e <updateState+0xd2>
		else if (input_flags.throttle_pressed)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <updateState+0xdc>)
 8001028:	785b      	ldrb	r3, [r3, #1]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <updateState+0xcc>
		    state = DRIVE;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <updateState+0xe0>)
 8001032:	2202      	movs	r2, #2
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e002      	b.n	800103e <updateState+0xd2>
		else
		  	state = IDLE;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <updateState+0xe0>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
		osDelay(UPDATE_STATE_DELAY);
 800103e:	2005      	movs	r0, #5
 8001040:	f003 fb24 	bl	800468c <osDelay>
		UpdateInputFlags(&input_flags);
 8001044:	e796      	b.n	8000f74 <updateState+0x8>
 8001046:	bf00      	nop
 8001048:	20000174 	.word	0x20000174
 800104c:	2000017e 	.word	0x2000017e

08001050 <sendMotorCommand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendMotorCommand */
void sendMotorCommand(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendMotorCommand */
	/* Infinite loop */
	for(;;)
	{
		if(state == PARK)
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <sendMotorCommand+0xe8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b06      	cmp	r3, #6
 800105e:	d108      	bne.n	8001072 <sendMotorCommand+0x22>
		{
			velocity = 0.0;
 8001060:	4b36      	ldr	r3, [pc, #216]	; (800113c <sendMotorCommand+0xec>)
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
			current = 1.0;
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <sendMotorCommand+0xf0>)
 800106a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	e055      	b.n	800111e <sendMotorCommand+0xce>
		}
		else if(state == REGEN)
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <sendMotorCommand+0xe8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d10c      	bne.n	8001094 <sendMotorCommand+0x44>
	    {
	    	velocity = 0.0;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <sendMotorCommand+0xec>)
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	    	current = NormalizeADCValue(ADC_regen_val);
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <sendMotorCommand+0xf4>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fa68 	bl	800155c <NormalizeADCValue>
 800108c:	4603      	mov	r3, r0
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <sendMotorCommand+0xf0>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e044      	b.n	800111e <sendMotorCommand+0xce>
	    }
	    else if(state == DRIVE)
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <sendMotorCommand+0xe8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d10b      	bne.n	80010b4 <sendMotorCommand+0x64>
	    {
	    	velocity = 100.0;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <sendMotorCommand+0xec>)
 800109e:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <sendMotorCommand+0xf8>)
 80010a0:	601a      	str	r2, [r3, #0]
	    	current = NormalizeADCValue(ADC_throttle_val);
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <sendMotorCommand+0xfc>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fa58 	bl	800155c <NormalizeADCValue>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <sendMotorCommand+0xf0>)
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e034      	b.n	800111e <sendMotorCommand+0xce>
	    }
	    else if(state == REVERSE)
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <sendMotorCommand+0xe8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d10b      	bne.n	80010d4 <sendMotorCommand+0x84>
	    {
	    	velocity = -100.0;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <sendMotorCommand+0xec>)
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <sendMotorCommand+0x100>)
 80010c0:	601a      	str	r2, [r3, #0]
	    	current = NormalizeADCValue(ADC_throttle_val);
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <sendMotorCommand+0xfc>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fa48 	bl	800155c <NormalizeADCValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <sendMotorCommand+0xf0>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e024      	b.n	800111e <sendMotorCommand+0xce>
	    }
	    else if (state == CRUISE)
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <sendMotorCommand+0xe8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d108      	bne.n	80010ee <sendMotorCommand+0x9e>
	    {
	    	velocity = cruise_velocity;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <sendMotorCommand+0x104>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <sendMotorCommand+0xec>)
 80010e2:	6013      	str	r3, [r2, #0]
	    	current = 1.0;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <sendMotorCommand+0xf0>)
 80010e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e017      	b.n	800111e <sendMotorCommand+0xce>
	    }
		else if (state == CRUISE_ACCELERATE)
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <sendMotorCommand+0xe8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d10b      	bne.n	800110e <sendMotorCommand+0xbe>
		{
			velocity = 100.0;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <sendMotorCommand+0xec>)
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <sendMotorCommand+0xf8>)
 80010fa:	601a      	str	r2, [r3, #0]
			current = NormalizeADCValue(ADC_throttle_val);
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <sendMotorCommand+0xfc>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fa2b 	bl	800155c <NormalizeADCValue>
 8001106:	4603      	mov	r3, r0
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <sendMotorCommand+0xf0>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e007      	b.n	800111e <sendMotorCommand+0xce>
		}
	    else
	    {
	    	velocity = 0.0;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <sendMotorCommand+0xec>)
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	    	current = 0.0;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <sendMotorCommand+0xf0>)
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
	    }
		SendCANMotorCommand(velocity, current);
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <sendMotorCommand+0xec>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <sendMotorCommand+0xf0>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f9dd 	bl	80014e8 <SendCANMotorCommand>
	    osDelay(SEND_MOTOR_COMMAND_DELAY);
 800112e:	200a      	movs	r0, #10
 8001130:	f003 faac 	bl	800468c <osDelay>
		if(state == PARK)
 8001134:	e790      	b.n	8001058 <sendMotorCommand+0x8>
 8001136:	bf00      	nop
 8001138:	2000017e 	.word	0x2000017e
 800113c:	20000158 	.word	0x20000158
 8001140:	20000154 	.word	0x20000154
 8001144:	20000152 	.word	0x20000152
 8001148:	42c80000 	.word	0x42c80000
 800114c:	20000150 	.word	0x20000150
 8001150:	c2c80000 	.word	0xc2c80000
 8001154:	20000180 	.word	0x20000180

08001158 <getADCValues>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADCValues */
void getADCValues(void *argument)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADCValues */
  /* Infinite loop */
  for(;;)
  {
	// Get ADC value for throttle and sets event flags
	ADC_throttle_val = ReadADC(&hadc1);
 8001160:	4825      	ldr	r0, [pc, #148]	; (80011f8 <getADCValues+0xa0>)
 8001162:	f7ff fdf1 	bl	8000d48 <ReadADC>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <getADCValues+0xa4>)
 800116c:	801a      	strh	r2, [r3, #0]
	input_flags.throttle_pressed = ADC_throttle_val > ADC_DEADZONE;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <getADCValues+0xa4>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001176:	bf8c      	ite	hi
 8001178:	2301      	movhi	r3, #1
 800117a:	2300      	movls	r3, #0
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <getADCValues+0xa8>)
 8001180:	705a      	strb	r2, [r3, #1]
	input_flags.cruise_accelerate_enabled = NormalizeADCValue(ADC_throttle_val) > CRUISE_CURRENT;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <getADCValues+0xa4>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f9e8 	bl	800155c <NormalizeADCValue>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f942 	bl	8000418 <__aeabi_f2d>
 8001194:	2301      	movs	r3, #1
 8001196:	461c      	mov	r4, r3
 8001198:	a315      	add	r3, pc, #84	; (adr r3, 80011f0 <getADCValues+0x98>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fa11 	bl	80005c4 <__aeabi_dcmpgt>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <getADCValues+0x54>
 80011a8:	2300      	movs	r3, #0
 80011aa:	461c      	mov	r4, r3
 80011ac:	b2e2      	uxtb	r2, r4
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <getADCValues+0xa8>)
 80011b0:	715a      	strb	r2, [r3, #5]

	// Gets ADC value for regen and sets event flags
	ADC_regen_val = ReadADC(&hadc2);
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <getADCValues+0xac>)
 80011b4:	f7ff fdc8 	bl	8000d48 <ReadADC>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <getADCValues+0xb0>)
 80011be:	801a      	strh	r2, [r3, #0]
	input_flags.regen_pressed = ADC_regen_val > ADC_DEADZONE;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <getADCValues+0xb0>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c8:	bf8c      	ite	hi
 80011ca:	2301      	movhi	r3, #1
 80011cc:	2300      	movls	r3, #0
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <getADCValues+0xa8>)
 80011d2:	701a      	strb	r2, [r3, #0]
	if(ADC_regen_val > ADC_DEADZONE)
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <getADCValues+0xb0>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011dc:	d902      	bls.n	80011e4 <getADCValues+0x8c>
		input_flags.cruise_enabled = FALSE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <getADCValues+0xa8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	711a      	strb	r2, [r3, #4]

    osDelay(GET_ADC_VALUES_DELAY);
 80011e4:	200a      	movs	r0, #10
 80011e6:	f003 fa51 	bl	800468c <osDelay>
	ADC_throttle_val = ReadADC(&hadc1);
 80011ea:	e7b9      	b.n	8001160 <getADCValues+0x8>
 80011ec:	f3af 8000 	nop.w
 80011f0:	33333333 	.word	0x33333333
 80011f4:	3fd33333 	.word	0x3fd33333
 80011f8:	200000a8 	.word	0x200000a8
 80011fc:	20000150 	.word	0x20000150
 8001200:	20000174 	.word	0x20000174
 8001204:	200000d8 	.word	0x200000d8
 8001208:	20000152 	.word	0x20000152

0800120c <getBatterySOC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBatterySOC */
void getBatterySOC(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBatterySOC */
	uint8_t battery_msg_data[8];
	/* Infinite loop */
	for(;;)
	{
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0))
 8001214:	2100      	movs	r1, #0
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <getBatterySOC+0x50>)
 8001218:	f001 fb57 	bl	80028ca <HAL_CAN_GetRxFifoFillLevel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f8      	beq.n	8001214 <getBatterySOC+0x8>
		{
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, battery_msg_data);
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <getBatterySOC+0x54>)
 8001228:	2100      	movs	r1, #0
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <getBatterySOC+0x50>)
 800122c:	f001 fa3c 	bl	80026a8 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x626)
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <getBatterySOC+0x54>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f240 6226 	movw	r2, #1574	; 0x626
 8001238:	4293      	cmp	r3, r2
 800123a:	d109      	bne.n	8001250 <getBatterySOC+0x44>
			{
				// if the battery SOC is out of range, assume it is at 100% as a safety measure
				if (battery_msg_data[0] < BATTERY_SOC_EMPTY || battery_msg_data[0] > BATTERY_SOC_FULL)
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d903      	bls.n	800124a <getBatterySOC+0x3e>
					battery_soc = BATTERY_SOC_FULL;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <getBatterySOC+0x58>)
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e002      	b.n	8001250 <getBatterySOC+0x44>
				else
					battery_soc = battery_msg_data[0];
 800124a:	7a3a      	ldrb	r2, [r7, #8]
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <getBatterySOC+0x58>)
 800124e:	701a      	strb	r2, [r3, #0]
			}

	  		osDelay(GET_BATTERY_SOC_DELAY);
 8001250:	f241 3088 	movw	r0, #5000	; 0x1388
 8001254:	f003 fa1a 	bl	800468c <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0))
 8001258:	e7dc      	b.n	8001214 <getBatterySOC+0x8>
 800125a:	bf00      	nop
 800125c:	20000128 	.word	0x20000128
 8001260:	2000010c 	.word	0x2000010c
 8001264:	20000188 	.word	0x20000188

08001268 <getVelocity>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getVelocity */
void getVelocity(void *argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	uint8_t CAN_message[8];
	FloatBytes velocity;
	/* Infinite loop */
	for(;;)
	{
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0))
 8001270:	2100      	movs	r1, #0
 8001272:	4818      	ldr	r0, [pc, #96]	; (80012d4 <getVelocity+0x6c>)
 8001274:	f001 fb29 	bl	80028ca <HAL_CAN_GetRxFifoFillLevel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d024      	beq.n	80012c8 <getVelocity+0x60>
		{
			// there are multiple CAN IDs being passed through the filter, check if the message is the SOC
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, CAN_message);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <getVelocity+0x70>)
 8001284:	2100      	movs	r1, #0
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <getVelocity+0x6c>)
 8001288:	f001 fa0e 	bl	80026a8 <HAL_CAN_GetRxMessage>
			if (can_rx_header.StdId == 0x503)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <getVelocity+0x70>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f240 5203 	movw	r2, #1283	; 0x503
 8001294:	4293      	cmp	r3, r2
 8001296:	d117      	bne.n	80012c8 <getVelocity+0x60>
			{
				for(int i = 0; i < (sizeof(float)/sizeof(uint8_t)); i++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00e      	b.n	80012bc <getVelocity+0x54>
				{
					velocity.bytes[i] = CAN_message[i+4]; // Vechicle Velocity is stored in bits 32-63.
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3304      	adds	r3, #4
 80012a2:	3318      	adds	r3, #24
 80012a4:	443b      	add	r3, r7
 80012a6:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80012aa:	f107 0208 	add.w	r2, r7, #8
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	4413      	add	r3, r2
 80012b2:	460a      	mov	r2, r1
 80012b4:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < (sizeof(float)/sizeof(uint8_t)); i++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d9ed      	bls.n	800129e <getVelocity+0x36>
				}
				velocity_of_car = velocity.float_value;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <getVelocity+0x74>)
 80012c6:	6013      	str	r3, [r2, #0]
			}
		}
		osDelay(GET_VELOCITY_DELAY);
 80012c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012cc:	f003 f9de 	bl	800468c <osDelay>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0))
 80012d0:	e7ce      	b.n	8001270 <getVelocity+0x8>
 80012d2:	bf00      	nop
 80012d4:	20000128 	.word	0x20000128
 80012d8:	2000010c 	.word	0x2000010c
 80012dc:	20000184 	.word	0x20000184

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <MX_GPIO_Init+0xec>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a34      	ldr	r2, [pc, #208]	; (80013cc <MX_GPIO_Init+0xec>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <MX_GPIO_Init+0xec>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_GPIO_Init+0xec>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a2e      	ldr	r2, [pc, #184]	; (80013cc <MX_GPIO_Init+0xec>)
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_GPIO_Init+0xec>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0320 	and.w	r3, r3, #32
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_GPIO_Init+0xec>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <MX_GPIO_Init+0xec>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0xec>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0xec>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <MX_GPIO_Init+0xec>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_GPIO_Init+0xec>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_OUT2_Pin|LED_OUT1_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	210c      	movs	r1, #12
 8001358:	481d      	ldr	r0, [pc, #116]	; (80013d0 <MX_GPIO_Init+0xf0>)
 800135a:	f001 fd58 	bl	8002e0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = REGEN_EN_Pin|PARK_EN_Pin|FWRD_EN_Pin|RVRS_EN_Pin;
 800135e:	230f      	movs	r3, #15
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_GPIO_Init+0xf4>)
 8001372:	f001 fbb1 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_OUT2_Pin|LED_OUT1_Pin;
 8001376:	230c      	movs	r3, #12
 8001378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2302      	movs	r3, #2
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	4619      	mov	r1, r3
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <MX_GPIO_Init+0xf0>)
 800138e:	f001 fba3 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRUISE_DWN_Pin|CRUISE_UP_Pin|NEXT_SCREEN_Pin|CRUISE_TOGGLE_Pin;
 8001392:	23f0      	movs	r3, #240	; 0xf0
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_GPIO_Init+0xf8>)
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <MX_GPIO_Init+0xf0>)
 80013a6:	f001 fb97 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BRK_IN_Pin;
 80013aa:	2301      	movs	r3, #1
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_GPIO_Init+0xf8>)
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BRK_IN_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_GPIO_Init+0xfc>)
 80013be:	f001 fb8b 	bl	8002ad8 <HAL_GPIO_Init>

}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40011000 	.word	0x40011000
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fb2e 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f811 	bl	800140e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f7ff ff78 	bl	80012e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80013f0:	f7ff fbc6 	bl	8000b80 <MX_ADC1_Init>
  MX_ADC2_Init();
 80013f4:	f7ff fc02 	bl	8000bfc <MX_ADC2_Init>
  MX_CAN_Init();
 80013f8:	f7ff fcbc 	bl	8000d74 <MX_CAN_Init>
  MX_TIM2_Init();
 80013fc:	f000 fa44 	bl	8001888 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001400:	f003 f834 	bl	800446c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001404:	f7ff fd4a 	bl	8000e9c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001408:	f003 f862 	bl	80044d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800140c:	e7fe      	b.n	800140c <main+0x2c>

0800140e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b094      	sub	sp, #80	; 0x50
 8001412:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001418:	2228      	movs	r2, #40	; 0x28
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f005 fb91 	bl	8006b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143e:	2302      	movs	r3, #2
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001442:	2301      	movs	r3, #1
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001446:	2310      	movs	r3, #16
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800144e:	2300      	movs	r3, #0
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001452:	2300      	movs	r3, #0
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fd08 	bl	8002e70 <HAL_RCC_OscConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001466:	f000 f839 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146a:	230f      	movs	r3, #15
 800146c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f001 ff74 	bl	8003374 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001492:	f000 f823 	bl	80014dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001496:	2302      	movs	r3, #2
 8001498:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 f92f 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014ac:	f000 f816 	bl	80014dc <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	; 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ca:	f000 fad1 	bl	8001a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40000800 	.word	0x40000800

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <SendCANMotorCommand>:

/*
 *   Takes current value and velocity float value and sends in via CAN as an array of bytes.
 */
void SendCANMotorCommand(float current, float velocity)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	union FloatBytes c;
	union FloatBytes v;

	c.float_value = current;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	61bb      	str	r3, [r7, #24]
	v.float_value = velocity;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	617b      	str	r3, [r7, #20]

	uint8_t data_send[CAN_DATA_LENGTH];
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e018      	b.n	8001532 <SendCANMotorCommand+0x4a>
	{
		data_send[i] = v.bytes[i];
 8001500:	f107 0214 	add.w	r2, r7, #20
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	7819      	ldrb	r1, [r3, #0]
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	460a      	mov	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
	    data_send[4 + i] = c.bytes[i];
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	f107 0118 	add.w	r1, r7, #24
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	440a      	add	r2, r1
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	3320      	adds	r3, #32
 8001526:	443b      	add	r3, r7
 8001528:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (int i = 0; i < (uint8_t) CAN_DATA_LENGTH / 2; i++)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b03      	cmp	r3, #3
 8001536:	dde3      	ble.n	8001500 <SendCANMotorCommand+0x18>
	}
	HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
 8001538:	f107 020c 	add.w	r2, r7, #12
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SendCANMotorCommand+0x68>)
 800153e:	4905      	ldr	r1, [pc, #20]	; (8001554 <SendCANMotorCommand+0x6c>)
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <SendCANMotorCommand+0x70>)
 8001542:	f000 ffd7 	bl	80024f4 <HAL_CAN_AddTxMessage>
}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000108 	.word	0x20000108
 8001554:	20000000 	.word	0x20000000
 8001558:	20000128 	.word	0x20000128

0800155c <NormalizeADCValue>:

/*
 *  Function used for normalizing(0-1) and accounting for deadzone of ADC inputs.
 */
float NormalizeADCValue(uint16_t value)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	return (value - ADC_DEADZONE >= 0 ? ((float)(value - ADC_DEADZONE))/(ADC_MAX - ADC_DEADZONE) : 0.0);
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800156c:	d30c      	bcc.n	8001588 <NormalizeADCValue+0x2c>
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f8e9 	bl	800074c <__aeabi_i2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4905      	ldr	r1, [pc, #20]	; (8001594 <NormalizeADCValue+0x38>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9ec 	bl	800095c <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	e001      	b.n	800158c <NormalizeADCValue+0x30>
 8001588:	f04f 0300 	mov.w	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	4560c000 	.word	0x4560c000

08001598 <UpdateInputFlags>:
	uint8_t data_send[CAN_DATA_LENGTH];
	HAL_CAN_AddTxMessage(&hcan, &drive_command_header, data_send, &can_mailbox);
}

void UpdateInputFlags(InputFlags* flags)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	flags->mech_brake_pressed = HAL_GPIO_ReadPin(BRK_IN_GPIO_Port, BRK_IN_Pin);
 80015a0:	2101      	movs	r1, #1
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <UpdateInputFlags+0xa4>)
 80015a4:	f001 fc1c 	bl	8002de0 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	709a      	strb	r2, [r3, #2]
	flags->park_enabled = HAL_GPIO_ReadPin(PARK_EN_GPIO_Port, PARK_EN_Pin);
 80015b8:	2102      	movs	r1, #2
 80015ba:	4821      	ldr	r0, [pc, #132]	; (8001640 <UpdateInputFlags+0xa8>)
 80015bc:	f001 fc10 	bl	8002de0 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	719a      	strb	r2, [r3, #6]
	flags->reverse_enabled = HAL_GPIO_ReadPin(RVRS_EN_GPIO_Port, RVRS_EN_Pin);
 80015d0:	2108      	movs	r1, #8
 80015d2:	481b      	ldr	r0, [pc, #108]	; (8001640 <UpdateInputFlags+0xa8>)
 80015d4:	f001 fc04 	bl	8002de0 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	70da      	strb	r2, [r3, #3]
	flags->regen_enabled = HAL_GPIO_ReadPin(REGEN_EN_GPIO_Port, REGEN_EN_Pin);
 80015e8:	2101      	movs	r1, #1
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <UpdateInputFlags+0xa8>)
 80015ec:	f001 fbf8 	bl	8002de0 <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	71da      	strb	r2, [r3, #7]

	flags->velocity_under_threshold = (velocity_of_car < MIN_REVERSE_VELOCITY);
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <UpdateInputFlags+0xac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4614      	mov	r4, r2
 8001608:	490f      	ldr	r1, [pc, #60]	; (8001648 <UpdateInputFlags+0xb0>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fa90 	bl	8000b30 <__aeabi_fcmplt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <UpdateInputFlags+0x82>
 8001616:	2300      	movs	r3, #0
 8001618:	461c      	mov	r4, r3
 800161a:	b2e2      	uxtb	r2, r4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	721a      	strb	r2, [r3, #8]
	flags->charge_under_threshold = (battery_soc < BATTERY_SOC_THRESHOLD);
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <UpdateInputFlags+0xb4>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b59      	cmp	r3, #89	; 0x59
 8001626:	bf94      	ite	ls
 8001628:	2301      	movls	r3, #1
 800162a:	2300      	movhi	r3, #0
 800162c:	b2da      	uxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	725a      	strb	r2, [r3, #9]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	40010c00 	.word	0x40010c00
 8001640:	40011000 	.word	0x40011000
 8001644:	20000184 	.word	0x20000184
 8001648:	40400000 	.word	0x40400000
 800164c:	20000188 	.word	0x20000188

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_MspInit+0x68>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_MspInit+0x68>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_MspInit+0x68>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_MspInit+0x68>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_MspInit+0x68>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x68>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	210f      	movs	r1, #15
 800168a:	f06f 0001 	mvn.w	r0, #1
 800168e:	f001 f9f8 	bl	8002a82 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_MspInit+0x6c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_MspInit+0x6c>)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000

080016c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08e      	sub	sp, #56	; 0x38
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <HAL_InitTick+0xe8>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a33      	ldr	r2, [pc, #204]	; (80017a8 <HAL_InitTick+0xe8>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_InitTick+0xe8>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ee:	f107 0210 	add.w	r2, r7, #16
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 ffb5 	bl	8003668 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001708:	f001 ff86 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 800170c:	6378      	str	r0, [r7, #52]	; 0x34
 800170e:	e004      	b.n	800171a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001710:	f001 ff82 	bl	8003618 <HAL_RCC_GetPCLK1Freq>
 8001714:	4603      	mov	r3, r0
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <HAL_InitTick+0xec>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	3b01      	subs	r3, #1
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_InitTick+0xf0>)
 800172a:	4a22      	ldr	r2, [pc, #136]	; (80017b4 <HAL_InitTick+0xf4>)
 800172c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_InitTick+0xf0>)
 8001730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001734:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_InitTick+0xf0>)
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_InitTick+0xf0>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_InitTick+0xf0>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_InitTick+0xf0>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <HAL_InitTick+0xf0>)
 8001750:	f002 f94e 	bl	80039f0 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800175a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11b      	bne.n	800179a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <HAL_InitTick+0xf0>)
 8001764:	f002 f99c 	bl	8003aa0 <HAL_TIM_Base_Start_IT>
 8001768:	4603      	mov	r3, r0
 800176a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800176e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001772:	2b00      	cmp	r3, #0
 8001774:	d111      	bne.n	800179a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001776:	201e      	movs	r0, #30
 8001778:	f001 f99f 	bl	8002aba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	d808      	bhi.n	8001794 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001782:	2200      	movs	r2, #0
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	201e      	movs	r0, #30
 8001788:	f001 f97b 	bl	8002a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_InitTick+0xf8>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e002      	b.n	800179a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800179a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3738      	adds	r7, #56	; 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	431bde83 	.word	0x431bde83
 80017b0:	2000018c 	.word	0x2000018c
 80017b4:	40000800 	.word	0x40000800
 80017b8:	2000001c 	.word	0x2000001c

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler+0x4>

080017c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler+0x4>

080017da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM2_IRQHandler+0x10>)
 80017ee:	f002 f9f8 	bl	8003be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001d8 	.word	0x200001d8

080017fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM4_IRQHandler+0x10>)
 8001802:	f002 f9ee 	bl	8003be2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000018c 	.word	0x2000018c

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f005 f938 	bl	8006ab4 <__errno>
 8001844:	4603      	mov	r3, r0
 8001846:	220c      	movs	r2, #12
 8001848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20005000 	.word	0x20005000
 8001870:	00000400 	.word	0x00000400
 8001874:	200001d4 	.word	0x200001d4
 8001878:	20000f88 	.word	0x20000f88

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <MX_TIM2_Init+0xc4>)
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_TIM2_Init+0xc4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <MX_TIM2_Init+0xc4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_TIM2_Init+0xc4>)
 80018c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_TIM2_Init+0xc4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <MX_TIM2_Init+0xc4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d2:	481e      	ldr	r0, [pc, #120]	; (800194c <MX_TIM2_Init+0xc4>)
 80018d4:	f002 f936 	bl	8003b44 <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018de:	f7ff fdfd 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	4619      	mov	r1, r3
 80018f0:	4816      	ldr	r0, [pc, #88]	; (800194c <MX_TIM2_Init+0xc4>)
 80018f2:	f002 fd4b 	bl	800438c <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018fc:	f7ff fdee 	bl	80014dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001900:	2360      	movs	r3, #96	; 0x60
 8001902:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_TIM2_Init+0xc4>)
 8001918:	f002 fa6c 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001922:	f7ff fddb 	bl	80014dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2204      	movs	r2, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <MX_TIM2_Init+0xc4>)
 800192e:	f002 fa61 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001938:	f7ff fdd0 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <MX_TIM2_Init+0xc4>)
 800193e:	f000 f82b 	bl	8001998 <HAL_TIM_MspPostInit>

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001d8 	.word	0x200001d8

08001950 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d113      	bne.n	800198a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_TIM_PWM_MspInit+0x44>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_TIM_PWM_MspInit+0x44>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_TIM_PWM_MspInit+0x44>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	201c      	movs	r0, #28
 8001980:	f001 f87f 	bl	8002a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001984:	201c      	movs	r0, #28
 8001986:	f001 f898 	bl	8002aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d117      	bne.n	80019e8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_TIM_MspPostInit+0x58>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_TIM_MspPostInit+0x58>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_TIM_MspPostInit+0x58>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = CRUISE_STAT_Pin|TMR_OUT_Pin;
 80019d0:	2303      	movs	r3, #3
 80019d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <HAL_TIM_MspPostInit+0x5c>)
 80019e4:	f001 f878 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800

080019f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1e:	f7ff ff2d 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f005 f84d 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7ff fcdb 	bl	80013e0 <main>
  bx lr
 8001a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001a34:	08006ee8 	.word	0x08006ee8
  ldr r2, =_sbss
 8001a38:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001a3c:	20000f84 	.word	0x20000f84

08001a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_2_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x28>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x28>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f001 f809 	bl	8002a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f7ff fe30 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7ff fdf6 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000

08001a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x1c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_IncTick+0x20>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_IncTick+0x20>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000020 	.word	0x20000020
 8001a90:	20000220 	.word	0x20000220

08001a94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <HAL_GetTick+0x10>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000220 	.word	0x20000220

08001aa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0be      	b.n	8001c48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff f8c6 	bl	8000c78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fbc5 	bl	800227c <ADC_ConversionStop_Disable>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8099 	bne.w	8001c36 <HAL_ADC_Init+0x18e>
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8095 	bne.w	8001c36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b14:	f023 0302 	bic.w	r3, r3, #2
 8001b18:	f043 0202 	orr.w	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7b1b      	ldrb	r3, [r3, #12]
 8001b2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_Init+0xa2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_Init+0xa8>
 8001b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_Init+0xaa>
 8001b50:	2300      	movs	r3, #0
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7d1b      	ldrb	r3, [r3, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d119      	bne.n	8001b94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7b1b      	ldrb	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	035a      	lsls	r2, r3, #13
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_ADC_Init+0x1a8>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_Init+0x126>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d104      	bne.n	8001bd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_ADC_Init+0x1ac>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c12:	e018      	b.n	8001c46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f023 0312 	bic.w	r3, r3, #18
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c34:	e007      	b.n	8001c46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	ffe1f7fd 	.word	0xffe1f7fd
 8001c54:	ff1f0efe 	.word	0xff1f0efe

08001c58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Start+0x1a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e098      	b.n	8001da4 <HAL_ADC_Start+0x14c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 faa4 	bl	80021c8 <ADC_Enable>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8087 	bne.w	8001d9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <HAL_ADC_Start+0x154>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_Start+0x5e>
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d026      	beq.n	8001d1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce0:	e01d      	b.n	8001d1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_Start+0xaa>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_ADC_Start+0x154>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_Start+0xc6>
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f023 0206 	bic.w	r2, r3, #6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0202 	mvn.w	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d5e:	d113      	bne.n	8001d88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_ADC_Start+0x154>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	e00c      	b.n	8001da2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40012800 	.word	0x40012800
 8001db0:	40012400 	.word	0x40012400

08001db4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dca:	f7ff fe63 	bl	8001a94 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0d3      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d131      	bne.n	8001e68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12a      	bne.n	8001e68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e12:	e021      	b.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d01d      	beq.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_PollForConversion+0x7e>
 8001e22:	f7ff fe37 	bl	8001a94 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d212      	bcs.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0a2      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0d6      	beq.n	8001e14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e66:	e070      	b.n	8001f4a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_ADC_PollForConversion+0x1f4>)
 8001e6a:	681c      	ldr	r4, [r3, #0]
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f001 fcff 	bl	8003870 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e72:	4603      	mov	r3, r0
 8001e74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_ADC_PollForConversion+0x1f8>)
 8001e80:	400b      	ands	r3, r1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x104>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_ADC_PollForConversion+0x1fc>)
 8001e8e:	400b      	ands	r3, r1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d111      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x104>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6919      	ldr	r1, [r3, #16]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_ADC_PollForConversion+0x200>)
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0x100>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_ADC_PollForConversion+0x204>)
 8001eaa:	400b      	ands	r3, r1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0x100>
 8001eb0:	2314      	movs	r3, #20
 8001eb2:	e020      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001eb4:	2329      	movs	r3, #41	; 0x29
 8001eb6:	e01e      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_ADC_PollForConversion+0x200>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x120>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_ADC_PollForConversion+0x204>)
 8001ece:	400b      	ands	r3, r1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x13c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_ADC_PollForConversion+0x208>)
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x140>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_ADC_PollForConversion+0x208>)
 8001eea:	400b      	ands	r3, r1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x140>
 8001ef0:	2354      	movs	r3, #84	; 0x54
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001ef4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001efc:	e021      	b.n	8001f42 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d01a      	beq.n	8001f3c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x168>
 8001f0c:	f7ff fdc2 	bl	8001a94 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d20f      	bcs.n	8001f3c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d90b      	bls.n	8001f3c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f043 0204 	orr.w	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e030      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d8d9      	bhi.n	8001efe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0212 	mvn.w	r2, #18
 8001f52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f6e:	d115      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000018 	.word	0x20000018
 8001fac:	24924924 	.word	0x24924924
 8001fb0:	00924924 	.word	0x00924924
 8001fb4:	12492492 	.word	0x12492492
 8001fb8:	00492492 	.word	0x00492492
 8001fbc:	00249249 	.word	0x00249249

08001fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x20>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0dc      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1da>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b06      	cmp	r3, #6
 8002006:	d81c      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	221f      	movs	r2, #31
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	4019      	ands	r1, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b05      	subs	r3, #5
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
 8002040:	e03c      	b.n	80020bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d81c      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b23      	subs	r3, #35	; 0x23
 800205c:	221f      	movs	r2, #31
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	4019      	ands	r1, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b23      	subs	r3, #35	; 0x23
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
 8002082:	e01b      	b.n	80020bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	; 0x41
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4019      	ands	r1, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d91c      	bls.n	80020fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	3b1e      	subs	r3, #30
 80020d6:	2207      	movs	r2, #7
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	4019      	ands	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6898      	ldr	r0, [r3, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	3b1e      	subs	r3, #30
 80020f0:	fa00 f203 	lsl.w	r2, r0, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	e019      	b.n	8002132 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	2207      	movs	r2, #7
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	4019      	ands	r1, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6898      	ldr	r0, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d003      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800213e:	2b11      	cmp	r3, #17
 8002140:	d132      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d125      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d126      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002168:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d11a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9a      	lsrs	r2, r3, #18
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002188:	e002      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_ConfigChannel+0x1b2>
 8002196:	e007      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012400 	.word	0x40012400
 80021c0:	20000018 	.word	0x20000018
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d040      	beq.n	8002268 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <ADC_Enable+0xac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <ADC_Enable+0xb0>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002212:	f7ff fc3f 	bl	8001a94 <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002218:	e01f      	b.n	800225a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800221a:	f7ff fc3b 	bl	8001a94 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d918      	bls.n	800225a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d011      	beq.n	800225a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d1d8      	bne.n	800221a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000018 	.word	0x20000018
 8002278:	431bde83 	.word	0x431bde83

0800227c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d12e      	bne.n	80022f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a6:	f7ff fbf5 	bl	8001a94 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022ac:	e01b      	b.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ae:	f7ff fbf1 	bl	8001a94 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d914      	bls.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d0dc      	beq.n	80022ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0ed      	b.n	80024ec <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fd5d 	bl	8000ddc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002332:	f7ff fbaf 	bl	8001a94 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002338:	e012      	b.n	8002360 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800233a:	f7ff fbab 	bl	8001a94 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b0a      	cmp	r3, #10
 8002346:	d90b      	bls.n	8002360 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2205      	movs	r2, #5
 8002358:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0c5      	b.n	80024ec <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0e5      	beq.n	800233a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0202 	bic.w	r2, r2, #2
 800237c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237e:	f7ff fb89 	bl	8001a94 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002384:	e012      	b.n	80023ac <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002386:	f7ff fb85 	bl	8001a94 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b0a      	cmp	r3, #10
 8002392:	d90b      	bls.n	80023ac <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e09f      	b.n	80024ec <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e5      	bne.n	8002386 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7e1b      	ldrb	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7e9b      	ldrb	r3, [r3, #26]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0220 	orr.w	r2, r2, #32
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e007      	b.n	8002438 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0220 	bic.w	r2, r2, #32
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7edb      	ldrb	r3, [r3, #27]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0210 	bic.w	r2, r2, #16
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0210 	orr.w	r2, r2, #16
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7f1b      	ldrb	r3, [r3, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0208 	orr.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e007      	b.n	800248c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7f5b      	ldrb	r3, [r3, #29]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0204 	orr.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0204 	bic.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	1e5a      	subs	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002512:	7ffb      	ldrb	r3, [r7, #31]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d003      	beq.n	8002520 <HAL_CAN_AddTxMessage+0x2c>
 8002518:	7ffb      	ldrb	r3, [r7, #31]
 800251a:	2b02      	cmp	r3, #2
 800251c:	f040 80b8 	bne.w	8002690 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80a0 	beq.w	8002680 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	0e1b      	lsrs	r3, r3, #24
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d907      	bls.n	8002560 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e09e      	b.n	800269e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002560:	2201      	movs	r2, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	409a      	lsls	r2, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	6809      	ldr	r1, [r1, #0]
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3318      	adds	r3, #24
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	440b      	add	r3, r1
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e00f      	b.n	80025ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002598:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3318      	adds	r3, #24
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	440b      	add	r3, r1
 80025ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3318      	adds	r3, #24
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	440b      	add	r3, r1
 80025be:	3304      	adds	r3, #4
 80025c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	7d1b      	ldrb	r3, [r3, #20]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d111      	bne.n	80025ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3318      	adds	r3, #24
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6811      	ldr	r1, [r2, #0]
 80025de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3318      	adds	r3, #24
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	440b      	add	r3, r1
 80025ea:	3304      	adds	r3, #4
 80025ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3307      	adds	r3, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	061a      	lsls	r2, r3, #24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3306      	adds	r3, #6
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3305      	adds	r3, #5
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	4313      	orrs	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3204      	adds	r2, #4
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	4610      	mov	r0, r2
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	6811      	ldr	r1, [r2, #0]
 8002616:	ea43 0200 	orr.w	r2, r3, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	440b      	add	r3, r1
 8002620:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002624:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3303      	adds	r3, #3
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	061a      	lsls	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3302      	adds	r3, #2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3301      	adds	r3, #1
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4313      	orrs	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	4610      	mov	r0, r2
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	ea43 0200 	orr.w	r2, r3, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800265a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3318      	adds	r3, #24
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6811      	ldr	r1, [r2, #0]
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3318      	adds	r3, #24
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	440b      	add	r3, r1
 800267a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e00e      	b.n	800269e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e006      	b.n	800269e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d003      	beq.n	80026cc <HAL_CAN_GetRxMessage+0x24>
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	f040 80f3 	bne.w	80028b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10e      	bne.n	80026f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d116      	bne.n	800270e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0e7      	b.n	80028c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0d8      	b.n	80028c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	331b      	adds	r3, #27
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0204 	and.w	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10c      	bne.n	8002746 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	331b      	adds	r3, #27
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	0d5b      	lsrs	r3, r3, #21
 800273c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e00b      	b.n	800275e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	331b      	adds	r3, #27
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	4413      	add	r3, r2
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	331b      	adds	r3, #27
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	4413      	add	r3, r2
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0202 	and.w	r2, r3, #2
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	331b      	adds	r3, #27
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	331b      	adds	r3, #27
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0a1a      	lsrs	r2, r3, #8
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0c1a      	lsrs	r2, r3, #16
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3302      	adds	r3, #2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0e1a      	lsrs	r2, r3, #24
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3303      	adds	r3, #3
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3304      	adds	r3, #4
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0a1a      	lsrs	r2, r3, #8
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	3305      	adds	r3, #5
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4413      	add	r3, r2
 800285c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0c1a      	lsrs	r2, r3, #16
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3306      	adds	r3, #6
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0e1a      	lsrs	r2, r3, #24
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3307      	adds	r3, #7
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	e007      	b.n	80028ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e006      	b.n	80028c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028de:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028e0:	7afb      	ldrb	r3, [r7, #11]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_CAN_GetRxFifoFillLevel+0x22>
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d10f      	bne.n	800290c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e005      	b.n	800290c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800290c:	68fb      	ldr	r3, [r7, #12]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4906      	ldr	r1, [pc, #24]	; (80029b0 <__NVIC_EnableIRQ+0x34>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff4f 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a94:	f7ff ff64 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff ffb2 	bl	8002a08 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff81 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab2:	bf00      	nop
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff57 	bl	800297c <__NVIC_EnableIRQ>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	; 0x2c
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e169      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aec:	2201      	movs	r2, #1
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8158 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4a9a      	ldr	r2, [pc, #616]	; (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d05e      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b14:	4a98      	ldr	r2, [pc, #608]	; (8002d78 <HAL_GPIO_Init+0x2a0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d875      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b1a:	4a98      	ldr	r2, [pc, #608]	; (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d058      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b20:	4a96      	ldr	r2, [pc, #600]	; (8002d7c <HAL_GPIO_Init+0x2a4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d86f      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b26:	4a96      	ldr	r2, [pc, #600]	; (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d052      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b2c:	4a94      	ldr	r2, [pc, #592]	; (8002d80 <HAL_GPIO_Init+0x2a8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d869      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b32:	4a94      	ldr	r2, [pc, #592]	; (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d04c      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b38:	4a92      	ldr	r2, [pc, #584]	; (8002d84 <HAL_GPIO_Init+0x2ac>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d863      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a92      	ldr	r2, [pc, #584]	; (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d046      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
 8002b44:	4a90      	ldr	r2, [pc, #576]	; (8002d88 <HAL_GPIO_Init+0x2b0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d85d      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d82a      	bhi.n	8002ba4 <HAL_GPIO_Init+0xcc>
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	d859      	bhi.n	8002c06 <HAL_GPIO_Init+0x12e>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <HAL_GPIO_Init+0x80>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002bd3 	.word	0x08002bd3
 8002b5c:	08002bad 	.word	0x08002bad
 8002b60:	08002bbf 	.word	0x08002bbf
 8002b64:	08002c01 	.word	0x08002c01
 8002b68:	08002c07 	.word	0x08002c07
 8002b6c:	08002c07 	.word	0x08002c07
 8002b70:	08002c07 	.word	0x08002c07
 8002b74:	08002c07 	.word	0x08002c07
 8002b78:	08002c07 	.word	0x08002c07
 8002b7c:	08002c07 	.word	0x08002c07
 8002b80:	08002c07 	.word	0x08002c07
 8002b84:	08002c07 	.word	0x08002c07
 8002b88:	08002c07 	.word	0x08002c07
 8002b8c:	08002c07 	.word	0x08002c07
 8002b90:	08002c07 	.word	0x08002c07
 8002b94:	08002c07 	.word	0x08002c07
 8002b98:	08002c07 	.word	0x08002c07
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bc9 	.word	0x08002bc9
 8002ba4:	4a79      	ldr	r2, [pc, #484]	; (8002d8c <HAL_GPIO_Init+0x2b4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002baa:	e02c      	b.n	8002c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	623b      	str	r3, [r7, #32]
          break;
 8002bb2:	e029      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	e024      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	623b      	str	r3, [r7, #32]
          break;
 8002bc6:	e01f      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	623b      	str	r3, [r7, #32]
          break;
 8002bd0:	e01a      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bda:	2304      	movs	r3, #4
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e013      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d105      	bne.n	8002bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002be8:	2308      	movs	r3, #8
 8002bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	611a      	str	r2, [r3, #16]
          break;
 8002bf2:	e009      	b.n	8002c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	615a      	str	r2, [r3, #20]
          break;
 8002bfe:	e003      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
          break;
 8002c04:	e000      	b.n	8002c08 <HAL_GPIO_Init+0x130>
          break;
 8002c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d801      	bhi.n	8002c12 <HAL_GPIO_Init+0x13a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e001      	b.n	8002c16 <HAL_GPIO_Init+0x13e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2bff      	cmp	r3, #255	; 0xff
 8002c1c:	d802      	bhi.n	8002c24 <HAL_GPIO_Init+0x14c>
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x152>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	3b08      	subs	r3, #8
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	210f      	movs	r1, #15
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 80b1 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c58:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a4c      	ldr	r2, [pc, #304]	; (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c70:	4a48      	ldr	r2, [pc, #288]	; (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <HAL_GPIO_Init+0x2c0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_GPIO_Init+0x1ec>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a3f      	ldr	r2, [pc, #252]	; (8002d9c <HAL_GPIO_Init+0x2c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1e8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	; (8002da0 <HAL_GPIO_Init+0x2c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1e4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <HAL_GPIO_Init+0x2cc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1e0>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e004      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e002      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cd6:	492f      	ldr	r1, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x2bc>)
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d006      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	492c      	ldr	r1, [pc, #176]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	4928      	ldr	r1, [pc, #160]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4922      	ldr	r1, [pc, #136]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	491e      	ldr	r1, [pc, #120]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4918      	ldr	r1, [pc, #96]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4914      	ldr	r1, [pc, #80]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d021      	beq.n	8002dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60cb      	str	r3, [r1, #12]
 8002d74:	e021      	b.n	8002dba <HAL_GPIO_Init+0x2e2>
 8002d76:	bf00      	nop
 8002d78:	10320000 	.word	0x10320000
 8002d7c:	10310000 	.word	0x10310000
 8002d80:	10220000 	.word	0x10220000
 8002d84:	10210000 	.word	0x10210000
 8002d88:	10120000 	.word	0x10120000
 8002d8c:	10110000 	.word	0x10110000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40010800 	.word	0x40010800
 8002d9c:	40010c00 	.word	0x40010c00
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4909      	ldr	r1, [pc, #36]	; (8002ddc <HAL_GPIO_Init+0x304>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f ae8e 	bne.w	8002aec <HAL_GPIO_Init+0x14>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	372c      	adds	r7, #44	; 0x2c
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40010400 	.word	0x40010400

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e1e:	787b      	ldrb	r3, [r7, #1]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e2a:	e003      	b.n	8002e34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	041a      	lsls	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	041a      	lsls	r2, r3, #16
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	400b      	ands	r3, r1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e272      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x12c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e24c      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fda2 	bl	8001a94 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fd9e 	bl	8001a94 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e200      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe4>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fd8e 	bl	8001a94 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fd8a 	bl	8001a94 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1ec      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x10c>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1c0      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe fd43 	bl	8001a94 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe fd3f 	bl	8001a94 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1a1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe fd22 	bl	8001a94 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fd1e 	bl	8001a94 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e180      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03a      	beq.n	80030f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fd02 	bl	8001a94 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003094:	f7fe fcfe 	bl	8001a94 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e160      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fb08 	bl	80036c8 <RCC_Delay>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe fce8 	bl	8001a94 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fce4 	bl	8001a94 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e146      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	42420000 	.word	0x42420000
 80030e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a6 	beq.w	800324e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fe fca5 	bl	8001a94 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fe fca1 	bl	8001a94 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e103      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x334>
 800318a:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a69      	ldr	r2, [pc, #420]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x356>
 80031ac:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a60      	ldr	r2, [pc, #384]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fe fc55 	bl	8001a94 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fe fc51 	bl	8001a94 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0b1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x37e>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fc3f 	bl	8001a94 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fc3b 	bl	8001a94 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e09b      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d061      	beq.n	8003328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d146      	bne.n	80032fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fc0f 	bl	8001a94 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fc0b 	bl	8001a94 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e06d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fe fbdf 	bl	8001a94 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fbdb 	bl	8001a94 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
 80032f8:	e035      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fbc8 	bl	8001a94 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fbc4 	bl	8001a94 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e026      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
 8003326:	e01e      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e019      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x500>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d0      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4965      	ldr	r1, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d040      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e073      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06b      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4936      	ldr	r1, [pc, #216]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fe fb16 	bl	8001a94 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fe fb12 	bl	8001a94 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e053      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d210      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0207 	bic.w	r2, r3, #7
 80034aa:	4922      	ldr	r1, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f821 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1cc>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f8cc 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	08006ec8 	.word	0x08006ec8
 8003540:	20000018 	.word	0x20000018
 8003544:	2000001c 	.word	0x2000001c

08003548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b490      	push	{r4, r7}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003550:	1d3c      	adds	r4, r7, #4
 8003552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003558:	f240 2301 	movw	r3, #513	; 0x201
 800355c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b04      	cmp	r3, #4
 8003580:	d002      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x40>
 8003582:	2b08      	cmp	r3, #8
 8003584:	d003      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x46>
 8003586:	e02b      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800358a:	623b      	str	r3, [r7, #32]
      break;
 800358c:	e02b      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3328      	adds	r3, #40	; 0x28
 8003598:	443b      	add	r3, r7
 800359a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800359e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0c5b      	lsrs	r3, r3, #17
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	3328      	adds	r3, #40	; 0x28
 80035b6:	443b      	add	r3, r7
 80035b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80035c2:	fb03 f202 	mul.w	r2, r3, r2
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e004      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	623b      	str	r3, [r7, #32]
      break;
 80035de:	e002      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80035e2:	623b      	str	r3, [r7, #32]
      break;
 80035e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc90      	pop	{r4, r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	08006db8 	.word	0x08006db8
 80035f8:	40021000 	.word	0x40021000
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	003d0900 	.word	0x003d0900

08003604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <HAL_RCC_GetHCLKFreq+0x10>)
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr
 8003614:	20000018 	.word	0x20000018

08003618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800361c:	f7ff fff2 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <HAL_RCC_GetPCLK1Freq+0x24>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	08006ed8 	.word	0x08006ed8

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003644:	f7ff ffde 	bl	8003604 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0adb      	lsrs	r3, r3, #11
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40021000 	.word	0x40021000
 8003664:	08006ed8 	.word	0x08006ed8

08003668 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	220f      	movs	r2, #15
 8003676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_RCC_GetClockConfig+0x58>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0203 	and.w	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_GetClockConfig+0x58>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetClockConfig+0x58>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800369c:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_GetClockConfig+0x58>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	08db      	lsrs	r3, r3, #3
 80036a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetClockConfig+0x5c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0207 	and.w	r2, r3, #7
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40022000 	.word	0x40022000

080036c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <RCC_Delay+0x34>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <RCC_Delay+0x38>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a5b      	lsrs	r3, r3, #9
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036e4:	bf00      	nop
  }
  while (Delay --);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	60fa      	str	r2, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f9      	bne.n	80036e4 <RCC_Delay+0x1c>
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	20000018 	.word	0x20000018
 8003700:	10624dd3 	.word	0x10624dd3

08003704 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d07d      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10d      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	61d3      	str	r3, [r2, #28]
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	4b46      	ldr	r3, [pc, #280]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d118      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003758:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003764:	f7fe f996 	bl	8001a94 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fe f992 	bl	8001a94 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e06d      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800378a:	4b36      	ldr	r3, [pc, #216]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d027      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b8:	4b2c      	ldr	r3, [pc, #176]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037be:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe f961 	bl	8001a94 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fe f95d 	bl	8001a94 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e036      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ee      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4917      	ldr	r1, [pc, #92]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	4313      	orrs	r3, r2
 8003808:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4904      	ldr	r1, [pc, #16]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	42420440 	.word	0x42420440

08003870 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b08d      	sub	sp, #52	; 0x34
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003878:	4b58      	ldr	r3, [pc, #352]	; (80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800387a:	f107 040c 	add.w	r4, r7, #12
 800387e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003884:	f240 2301 	movw	r3, #513	; 0x201
 8003888:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	2300      	movs	r3, #0
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	2300      	movs	r3, #0
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	f200 808e 	bhi.w	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d049      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d079      	beq.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80038b8:	e086      	b.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038c0:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d07f      	beq.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	3330      	adds	r3, #48	; 0x30
 80038d6:	443b      	add	r3, r7
 80038d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038dc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e8:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c5b      	lsrs	r3, r3, #17
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	3330      	adds	r3, #48	; 0x30
 80038f4:	443b      	add	r3, r7
 80038f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003906:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	fbb2 f2f3 	udiv	r2, r2, r3
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003916:	e004      	b.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003922:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392e:	d102      	bne.n	8003936 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003934:	e04a      	b.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003944:	e042      	b.n	80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	d108      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
 8003968:	e01f      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003974:	d109      	bne.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003982:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
 8003988:	e00f      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003994:	d11c      	bne.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80039a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039a8:	e012      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80039aa:	e011      	b.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80039ac:	f7ff fe48 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	0b9b      	lsrs	r3, r3, #14
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	3301      	adds	r3, #1
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80039c6:	e004      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80039c8:	bf00      	nop
 80039ca:	e002      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80039d0:	bf00      	nop
    }
  }
  return (frequency);
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3734      	adds	r7, #52	; 0x34
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}
 80039dc:	08006dc8 	.word	0x08006dc8
 80039e0:	40021000 	.word	0x40021000
 80039e4:	007a1200 	.word	0x007a1200
 80039e8:	003d0900 	.word	0x003d0900
 80039ec:	aaaaaaab 	.word	0xaaaaaaab

080039f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e041      	b.n	8003a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f839 	bl	8003a8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f000 fac2 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d001      	beq.n	8003ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e03a      	b.n	8003b2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_Base_Start_IT+0x98>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x58>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x58>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_Base_Start_IT+0x9c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x58>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_TIM_Base_Start_IT+0xa0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800

08003b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e041      	b.n	8003bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd fef0 	bl	8001950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 fa18 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d122      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d11b      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0202 	mvn.w	r2, #2
 8003c0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f9ac 	bl	8003f82 <HAL_TIM_IC_CaptureCallback>
 8003c2a:	e005      	b.n	8003c38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f99f 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9ae 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d122      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d11b      	bne.n	8003c92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0204 	mvn.w	r2, #4
 8003c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f982 	bl	8003f82 <HAL_TIM_IC_CaptureCallback>
 8003c7e:	e005      	b.n	8003c8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f975 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f984 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d122      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11b      	bne.n	8003ce6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f06f 0208 	mvn.w	r2, #8
 8003cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f958 	bl	8003f82 <HAL_TIM_IC_CaptureCallback>
 8003cd2:	e005      	b.n	8003ce0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f94b 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f95a 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d122      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d11b      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f06f 0210 	mvn.w	r2, #16
 8003d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f92e 	bl	8003f82 <HAL_TIM_IC_CaptureCallback>
 8003d26:	e005      	b.n	8003d34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f921 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f930 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0201 	mvn.w	r2, #1
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fba9 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb64 	bl	800445a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f8f4 	bl	8003fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0220 	mvn.w	r2, #32
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fb2f 	bl	8004448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0ac      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	f200 809f 	bhi.w	8003f5c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003f5d 	.word	0x08003f5d
 8003e2c:	08003f5d 	.word	0x08003f5d
 8003e30:	08003f5d 	.word	0x08003f5d
 8003e34:	08003e99 	.word	0x08003e99
 8003e38:	08003f5d 	.word	0x08003f5d
 8003e3c:	08003f5d 	.word	0x08003f5d
 8003e40:	08003f5d 	.word	0x08003f5d
 8003e44:	08003edb 	.word	0x08003edb
 8003e48:	08003f5d 	.word	0x08003f5d
 8003e4c:	08003f5d 	.word	0x08003f5d
 8003e50:	08003f5d 	.word	0x08003f5d
 8003e54:	08003f1b 	.word	0x08003f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f90c 	bl	800407c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6999      	ldr	r1, [r3, #24]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	619a      	str	r2, [r3, #24]
      break;
 8003e96:	e062      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f952 	bl	8004148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6999      	ldr	r1, [r3, #24]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	619a      	str	r2, [r3, #24]
      break;
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f99b 	bl	800421c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0208 	orr.w	r2, r2, #8
 8003ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0204 	bic.w	r2, r2, #4
 8003f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69d9      	ldr	r1, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	61da      	str	r2, [r3, #28]
      break;
 8003f18:	e021      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 f9e5 	bl	80042f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69d9      	ldr	r1, [r3, #28]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	021a      	lsls	r2, r3, #8
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	61da      	str	r2, [r3, #28]
      break;
 8003f5a:	e000      	b.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a29      	ldr	r2, [pc, #164]	; (8004070 <TIM_Base_SetConfig+0xb8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0x30>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0x30>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <TIM_Base_SetConfig+0xbc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0x30>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <TIM_Base_SetConfig+0xc0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <TIM_Base_SetConfig+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_Base_SetConfig+0x62>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d007      	beq.n	800401a <TIM_Base_SetConfig+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <TIM_Base_SetConfig+0xbc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_Base_SetConfig+0x62>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <TIM_Base_SetConfig+0xc0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <TIM_Base_SetConfig+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	615a      	str	r2, [r3, #20]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40000400 	.word	0x40000400
 8004078:	40000800 	.word	0x40000800

0800407c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 0302 	bic.w	r3, r3, #2
 80040c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <TIM_OC1_SetConfig+0xc8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10c      	bne.n	80040f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0308 	bic.w	r3, r3, #8
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <TIM_OC1_SetConfig+0xc8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d111      	bne.n	800411e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00

08004148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0210 	bic.w	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0320 	bic.w	r3, r3, #32
 8004192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <TIM_OC2_SetConfig+0xd0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10d      	bne.n	80041c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a14      	ldr	r2, [pc, #80]	; (8004218 <TIM_OC2_SetConfig+0xd0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d113      	bne.n	80041f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	40012c00 	.word	0x40012c00

0800421c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <TIM_OC3_SetConfig+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10d      	bne.n	8004296 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <TIM_OC3_SetConfig+0xd0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d113      	bne.n	80042c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	621a      	str	r2, [r3, #32]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40012c00 	.word	0x40012c00

080042f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	031b      	lsls	r3, r3, #12
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <TIM_OC4_SetConfig+0x98>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d109      	bne.n	8004364 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	40012c00 	.word	0x40012c00

0800438c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e046      	b.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a16      	ldr	r2, [pc, #88]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d009      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10c      	bne.n	8004420 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	4313      	orrs	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40012c00 	.word	0x40012c00
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800

08004448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004472:	f3ef 8305 	mrs	r3, IPSR
 8004476:	60bb      	str	r3, [r7, #8]
  return(result);
 8004478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	607b      	str	r3, [r7, #4]
  return(result);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <osKernelInitialize+0x32>
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <osKernelInitialize+0x60>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d109      	bne.n	80044a6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004492:	f3ef 8311 	mrs	r3, BASEPRI
 8004496:	603b      	str	r3, [r7, #0]
  return(result);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800449e:	f06f 0305 	mvn.w	r3, #5
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e00c      	b.n	80044c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <osKernelInitialize+0x60>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <osKernelInitialize+0x60>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e002      	b.n	80044c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044c0:	68fb      	ldr	r3, [r7, #12]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000224 	.word	0x20000224

080044d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d6:	f3ef 8305 	mrs	r3, IPSR
 80044da:	60bb      	str	r3, [r7, #8]
  return(result);
 80044dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10f      	bne.n	8004502 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e2:	f3ef 8310 	mrs	r3, PRIMASK
 80044e6:	607b      	str	r3, [r7, #4]
  return(result);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <osKernelStart+0x32>
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <osKernelStart+0x64>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d109      	bne.n	800450a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044f6:	f3ef 8311 	mrs	r3, BASEPRI
 80044fa:	603b      	str	r3, [r7, #0]
  return(result);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004502:	f06f 0305 	mvn.w	r3, #5
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e00e      	b.n	8004528 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <osKernelStart+0x64>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <osKernelStart+0x64>)
 8004514:	2202      	movs	r2, #2
 8004516:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004518:	f001 f878 	bl	800560c <vTaskStartScheduler>
      stat = osOK;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e002      	b.n	8004528 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004528:	68fb      	ldr	r3, [r7, #12]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000224 	.word	0x20000224

08004538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b092      	sub	sp, #72	; 0x48
 800453c:	af04      	add	r7, sp, #16
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004548:	f3ef 8305 	mrs	r3, IPSR
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 8094 	bne.w	800467e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004556:	f3ef 8310 	mrs	r3, PRIMASK
 800455a:	623b      	str	r3, [r7, #32]
  return(result);
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 808d 	bne.w	800467e <osThreadNew+0x146>
 8004564:	4b48      	ldr	r3, [pc, #288]	; (8004688 <osThreadNew+0x150>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d106      	bne.n	800457a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800456c:	f3ef 8311 	mrs	r3, BASEPRI
 8004570:	61fb      	str	r3, [r7, #28]
  return(result);
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 8082 	bne.w	800467e <osThreadNew+0x146>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07e      	beq.n	800467e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004584:	2318      	movs	r3, #24
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004588:	2300      	movs	r3, #0
 800458a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800458c:	f107 031b 	add.w	r3, r7, #27
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004592:	f04f 33ff 	mov.w	r3, #4294967295
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d045      	beq.n	800462a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <osThreadNew+0x74>
        name = attr->name;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <osThreadNew+0x9a>
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	2b38      	cmp	r3, #56	; 0x38
 80045c4:	d805      	bhi.n	80045d2 <osThreadNew+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <osThreadNew+0x9e>
        return (NULL);
 80045d2:	2300      	movs	r3, #0
 80045d4:	e054      	b.n	8004680 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00e      	beq.n	800460c <osThreadNew+0xd4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b6b      	cmp	r3, #107	; 0x6b
 80045f4:	d90a      	bls.n	800460c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <osThreadNew+0xd4>
        mem = 1;
 8004606:	2301      	movs	r3, #1
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
 800460a:	e010      	b.n	800462e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10c      	bne.n	800462e <osThreadNew+0xf6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d108      	bne.n	800462e <osThreadNew+0xf6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <osThreadNew+0xf6>
          mem = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	e001      	b.n	800462e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800463c:	9202      	str	r2, [sp, #8]
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fe12 	bl	8005274 <xTaskCreateStatic>
 8004650:	4603      	mov	r3, r0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e013      	b.n	800467e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2b00      	cmp	r3, #0
 800465a:	d110      	bne.n	800467e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	b29a      	uxth	r2, r3
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fe5c 	bl	800532c <xTaskCreate>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d001      	beq.n	800467e <osThreadNew+0x146>
          hTask = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800467e:	697b      	ldr	r3, [r7, #20]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3738      	adds	r7, #56	; 0x38
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000224 	.word	0x20000224

0800468c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004694:	f3ef 8305 	mrs	r3, IPSR
 8004698:	613b      	str	r3, [r7, #16]
  return(result);
 800469a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a0:	f3ef 8310 	mrs	r3, PRIMASK
 80046a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <osDelay+0x34>
 80046ac:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <osDelay+0x58>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d109      	bne.n	80046c8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046b4:	f3ef 8311 	mrs	r3, BASEPRI
 80046b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <osDelay+0x3c>
    stat = osErrorISR;
 80046c0:	f06f 0305 	mvn.w	r3, #5
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e007      	b.n	80046d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 ff66 	bl	80055a4 <vTaskDelay>
    }
  }

  return (stat);
 80046d8:	697b      	ldr	r3, [r7, #20]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000224 	.word	0x20000224

080046e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a06      	ldr	r2, [pc, #24]	; (8004710 <vApplicationGetIdleTaskMemory+0x28>)
 80046f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a05      	ldr	r2, [pc, #20]	; (8004714 <vApplicationGetIdleTaskMemory+0x2c>)
 80046fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000228 	.word	0x20000228
 8004714:	20000294 	.word	0x20000294

08004718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a07      	ldr	r2, [pc, #28]	; (8004744 <vApplicationGetTimerTaskMemory+0x2c>)
 8004728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a06      	ldr	r2, [pc, #24]	; (8004748 <vApplicationGetTimerTaskMemory+0x30>)
 800472e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004736:	601a      	str	r2, [r3, #0]
}
 8004738:	bf00      	nop
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20000494 	.word	0x20000494
 8004748:	20000500 	.word	0x20000500

0800474c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0208 	add.w	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f103 0208 	add.w	r2, r3, #8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f103 0208 	add.w	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d103      	bne.n	8004808 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e00c      	b.n	8004822 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3308      	adds	r3, #8
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e002      	b.n	8004816 <vListInsert+0x2e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d2f6      	bcs.n	8004810 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6852      	ldr	r2, [r2, #4]
 8004878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d103      	bne.n	800488c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	1e5a      	subs	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
	...

080048ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048d6:	f001 ffc9 	bl	800686c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	3b01      	subs	r3, #1
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	22ff      	movs	r2, #255	; 0xff
 800491a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d114      	bne.n	8004956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01a      	beq.n	800496a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3310      	adds	r3, #16
 8004938:	4618      	mov	r0, r3
 800493a:	f001 f8f1 	bl	8005b20 <xTaskRemoveFromEventList>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004944:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <xQueueGenericReset+0xcc>)
 8004946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	e009      	b.n	800496a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3310      	adds	r3, #16
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fef6 	bl	800474c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3324      	adds	r3, #36	; 0x24
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fef1 	bl	800474c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800496a:	f001 ffaf 	bl	80068cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800496e:	2301      	movs	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08e      	sub	sp, #56	; 0x38
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <xQueueGenericCreateStatic+0x52>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <xQueueGenericCreateStatic+0x56>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <xQueueGenericCreateStatic+0x58>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	623b      	str	r3, [r7, #32]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <xQueueGenericCreateStatic+0x7e>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <xQueueGenericCreateStatic+0x82>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <xQueueGenericCreateStatic+0x84>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	61fb      	str	r3, [r7, #28]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a1a:	2350      	movs	r3, #80	; 0x50
 8004a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b50      	cmp	r3, #80	; 0x50
 8004a22:	d00a      	beq.n	8004a3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	61bb      	str	r3, [r7, #24]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f805 	bl	8004a6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3730      	adds	r7, #48	; 0x30
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	e002      	b.n	8004a8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a98:	2101      	movs	r1, #1
 8004a9a:	69b8      	ldr	r0, [r7, #24]
 8004a9c:	f7ff ff06 	bl	80048ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	; 0x38
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ade:	bf00      	nop
 8004ae0:	e7fe      	b.n	8004ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <xQueueGenericSend+0x40>
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <xQueueGenericSend+0x44>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e000      	b.n	8004af6 <xQueueGenericSend+0x46>
 8004af4:	2300      	movs	r3, #0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <xQueueGenericSend+0x60>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSend+0x6e>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSend+0x72>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSend+0x74>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	623b      	str	r3, [r7, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3e:	f001 f9b1 	bl	8005ea4 <xTaskGetSchedulerState>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <xQueueGenericSend+0x9e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <xQueueGenericSend+0xa2>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <xQueueGenericSend+0xa4>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61fb      	str	r3, [r7, #28]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6e:	f001 fe7d 	bl	800686c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <xQueueGenericSend+0xd4>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d129      	bne.n	8004bd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8a:	f000 fa07 	bl	8004f9c <prvCopyDataToQueue>
 8004b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d010      	beq.n	8004bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 ffbf 	bl	8005b20 <xTaskRemoveFromEventList>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ba8:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <xQueueGenericSend+0x1f8>)
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	e00a      	b.n	8004bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bc0:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <xQueueGenericSend+0x1f8>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bd0:	f001 fe7c 	bl	80068cc <vPortExitCritical>
				return pdPASS;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e063      	b.n	8004ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bde:	f001 fe75 	bl	80068cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e05c      	b.n	8004ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fff9 	bl	8005be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bfa:	f001 fe67 	bl	80068cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bfe:	f000 fd6b 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c02:	f001 fe33 	bl	800686c <vPortEnterCritical>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d103      	bne.n	8004c1c <xQueueGenericSend+0x16c>
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d103      	bne.n	8004c32 <xQueueGenericSend+0x182>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c32:	f001 fe4b 	bl	80068cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c36:	1d3a      	adds	r2, r7, #4
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ffe8 	bl	8005c14 <xTaskCheckForTimeOut>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d124      	bne.n	8004c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c4c:	f000 fa9e 	bl	800518c <prvIsQueueFull>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	3310      	adds	r3, #16
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ff0e 	bl	8005a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c66:	f000 fa29 	bl	80050bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c6a:	f000 fd43 	bl	80056f4 <xTaskResumeAll>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f47f af7c 	bne.w	8004b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <xQueueGenericSend+0x1f8>)
 8004c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	e772      	b.n	8004b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8a:	f000 fa17 	bl	80050bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c8e:	f000 fd31 	bl	80056f4 <xTaskResumeAll>
 8004c92:	e76c      	b.n	8004b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c96:	f000 fa11 	bl	80050bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c9a:	f000 fd2b 	bl	80056f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c9e:	2300      	movs	r3, #0
		}
	}
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3738      	adds	r7, #56	; 0x38
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08e      	sub	sp, #56	; 0x38
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cd6:	bf00      	nop
 8004cd8:	e7fe      	b.n	8004cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d103      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x3c>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <xQueueGenericSendFromISR+0x40>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <xQueueGenericSendFromISR+0x42>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	623b      	str	r3, [r7, #32]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d103      	bne.n	8004d16 <xQueueGenericSendFromISR+0x6a>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <xQueueGenericSendFromISR+0x6e>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <xQueueGenericSendFromISR+0x70>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	61fb      	str	r3, [r7, #28]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d36:	f001 fe5b 	bl	80069f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61ba      	str	r2, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <xQueueGenericSendFromISR+0xbc>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d12c      	bne.n	8004dc2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d78:	f000 f910 	bl	8004f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d112      	bne.n	8004dac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	3324      	adds	r3, #36	; 0x24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fec4 	bl	8005b20 <xTaskRemoveFromEventList>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00e      	beq.n	8004dbc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e007      	b.n	8004dbc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004db0:	3301      	adds	r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	b25a      	sxtb	r2, r3
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dc0:	e001      	b.n	8004dc6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3738      	adds	r7, #56	; 0x38
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <xQueueReceive+0x30>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	623b      	str	r3, [r7, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	e7fe      	b.n	8004e0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <xQueueReceive+0x3e>
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <xQueueReceive+0x42>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueReceive+0x44>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueReceive+0x5e>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61fb      	str	r3, [r7, #28]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3a:	f001 f833 	bl	8005ea4 <xTaskGetSchedulerState>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <xQueueReceive+0x6e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <xQueueReceive+0x72>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueReceive+0x74>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueReceive+0x8e>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61bb      	str	r3, [r7, #24]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e6a:	f001 fcff 	bl	800686c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01f      	beq.n	8004eba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7e:	f000 f8f7 	bl	8005070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	1e5a      	subs	r2, r3, #1
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00f      	beq.n	8004eb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fe42 	bl	8005b20 <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <xQueueReceive+0x1bc>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eb2:	f001 fd0b 	bl	80068cc <vPortExitCritical>
				return pdPASS;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e069      	b.n	8004f8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec0:	f001 fd04 	bl	80068cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e062      	b.n	8004f8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ece:	f107 0310 	add.w	r3, r7, #16
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fe88 	bl	8005be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004edc:	f001 fcf6 	bl	80068cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee0:	f000 fbfa 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee4:	f001 fcc2 	bl	800686c <vPortEnterCritical>
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eee:	b25b      	sxtb	r3, r3
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d103      	bne.n	8004efe <xQueueReceive+0x122>
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <xQueueReceive+0x138>
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f14:	f001 fcda 	bl	80068cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f18:	1d3a      	adds	r2, r7, #4
 8004f1a:	f107 0310 	add.w	r3, r7, #16
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fe77 	bl	8005c14 <xTaskCheckForTimeOut>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d123      	bne.n	8004f74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2e:	f000 f917 	bl	8005160 <prvIsQueueEmpty>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d017      	beq.n	8004f68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	3324      	adds	r3, #36	; 0x24
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fd9d 	bl	8005a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f48:	f000 f8b8 	bl	80050bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f4c:	f000 fbd2 	bl	80056f4 <xTaskResumeAll>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d189      	bne.n	8004e6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <xQueueReceive+0x1bc>)
 8004f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	e780      	b.n	8004e6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6a:	f000 f8a7 	bl	80050bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f6e:	f000 fbc1 	bl	80056f4 <xTaskResumeAll>
 8004f72:	e77a      	b.n	8004e6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f000 f8a1 	bl	80050bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7a:	f000 fbbb 	bl	80056f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f80:	f000 f8ee 	bl	8005160 <prvIsQueueEmpty>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f43f af6f 	beq.w	8004e6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3730      	adds	r7, #48	; 0x30
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d14d      	bne.n	800505e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ff8a 	bl	8005ee0 <xTaskPriorityDisinherit>
 8004fcc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	e043      	b.n	800505e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d119      	bne.n	8005010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6898      	ldr	r0, [r3, #8]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	f001 fd9e 	bl	8006b28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	441a      	add	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d32b      	bcc.n	800505e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	609a      	str	r2, [r3, #8]
 800500e:	e026      	b.n	800505e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68d8      	ldr	r0, [r3, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	461a      	mov	r2, r3
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	f001 fd84 	bl	8006b28 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	425b      	negs	r3, r3
 800502a:	441a      	add	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	425b      	negs	r3, r3
 8005046:	441a      	add	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d105      	bne.n	800505e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3b01      	subs	r3, #1
 800505c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d303      	bcc.n	80050a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68d9      	ldr	r1, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	461a      	mov	r2, r3
 80050ae:	6838      	ldr	r0, [r7, #0]
 80050b0:	f001 fd3a 	bl	8006b28 <memcpy>
	}
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050c4:	f001 fbd2 	bl	800686c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050d0:	e011      	b.n	80050f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d012      	beq.n	8005100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3324      	adds	r3, #36	; 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fd1e 	bl	8005b20 <xTaskRemoveFromEventList>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050ea:	f000 fdf5 	bl	8005cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dce9      	bgt.n	80050d2 <prvUnlockQueue+0x16>
 80050fe:	e000      	b.n	8005102 <prvUnlockQueue+0x46>
					break;
 8005100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800510a:	f001 fbdf 	bl	80068cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800510e:	f001 fbad 	bl	800686c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800511a:	e011      	b.n	8005140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d012      	beq.n	800514a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3310      	adds	r3, #16
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fcf9 	bl	8005b20 <xTaskRemoveFromEventList>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005134:	f000 fdd0 	bl	8005cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	3b01      	subs	r3, #1
 800513c:	b2db      	uxtb	r3, r3
 800513e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005144:	2b00      	cmp	r3, #0
 8005146:	dce9      	bgt.n	800511c <prvUnlockQueue+0x60>
 8005148:	e000      	b.n	800514c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800514a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	22ff      	movs	r2, #255	; 0xff
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005154:	f001 fbba 	bl	80068cc <vPortExitCritical>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005168:	f001 fb80 	bl	800686c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005174:	2301      	movs	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e001      	b.n	800517e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800517e:	f001 fba5 	bl	80068cc <vPortExitCritical>

	return xReturn;
 8005182:	68fb      	ldr	r3, [r7, #12]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005194:	f001 fb6a 	bl	800686c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d102      	bne.n	80051aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e001      	b.n	80051ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ae:	f001 fb8d 	bl	80068cc <vPortExitCritical>

	return xReturn;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e014      	b.n	80051f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <vQueueAddToRegistry+0x4c>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051d8:	490b      	ldr	r1, [pc, #44]	; (8005208 <vQueueAddToRegistry+0x4c>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <vQueueAddToRegistry+0x4c>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051ee:	e006      	b.n	80051fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b07      	cmp	r3, #7
 80051fa:	d9e7      	bls.n	80051cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	20000900 	.word	0x20000900

0800520c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800521c:	f001 fb26 	bl	800686c <vPortEnterCritical>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005226:	b25b      	sxtb	r3, r3
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d103      	bne.n	8005236 <vQueueWaitForMessageRestricted+0x2a>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800523c:	b25b      	sxtb	r3, r3
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d103      	bne.n	800524c <vQueueWaitForMessageRestricted+0x40>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800524c:	f001 fb3e 	bl	80068cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3324      	adds	r3, #36	; 0x24
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fc31 	bl	8005ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff28 	bl	80050bc <prvUnlockQueue>
	}
 800526c:	bf00      	nop
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af04      	add	r7, sp, #16
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	623b      	str	r3, [r7, #32]
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xTaskCreateStatic+0x46>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61fb      	str	r3, [r7, #28]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052ba:	236c      	movs	r3, #108	; 0x6c
 80052bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b6c      	cmp	r3, #108	; 0x6c
 80052c2:	d00a      	beq.n	80052da <xTaskCreateStatic+0x66>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61bb      	str	r3, [r7, #24]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <xTaskCreateStatic+0xaa>
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01b      	beq.n	800531e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f8:	2300      	movs	r3, #0
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	9302      	str	r3, [sp, #8]
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f850 	bl	80053b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005318:	f000 f8d4 	bl	80054c4 <prvAddNewTaskToReadyList>
 800531c:	e001      	b.n	8005322 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005322:	697b      	ldr	r3, [r7, #20]
	}
 8005324:	4618      	mov	r0, r3
 8005326:	3728      	adds	r7, #40	; 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af04      	add	r7, sp, #16
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4618      	mov	r0, r3
 8005342:	f001 fb93 	bl	8006a6c <pvPortMalloc>
 8005346:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00e      	beq.n	800536c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800534e:	206c      	movs	r0, #108	; 0x6c
 8005350:	f001 fb8c 	bl	8006a6c <pvPortMalloc>
 8005354:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
 8005362:	e005      	b.n	8005370 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005364:	6978      	ldr	r0, [r7, #20]
 8005366:	f001 fb93 	bl	8006a90 <vPortFree>
 800536a:	e001      	b.n	8005370 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	2300      	movs	r3, #0
 8005382:	9303      	str	r3, [sp, #12]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	9302      	str	r3, [sp, #8]
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f80e 	bl	80053b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800539a:	69f8      	ldr	r0, [r7, #28]
 800539c:	f000 f892 	bl	80054c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	e002      	b.n	80053ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053ac:	69bb      	ldr	r3, [r7, #24]
	}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b088      	sub	sp, #32
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	461a      	mov	r2, r3
 80053ce:	21a5      	movs	r1, #165	; 0xa5
 80053d0:	f001 fbb8 	bl	8006b44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053de:	3b01      	subs	r3, #1
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f023 0307 	bic.w	r3, r3, #7
 80053ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <prvInitialiseNewTask+0x58>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	617b      	str	r3, [r7, #20]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	e012      	b.n	800543a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	7819      	ldrb	r1, [r3, #0]
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	3334      	adds	r3, #52	; 0x34
 8005424:	460a      	mov	r2, r1
 8005426:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b1f      	cmp	r3, #31
 800543e:	d9e9      	bls.n	8005414 <prvInitialiseNewTask+0x5e>
 8005440:	e000      	b.n	8005444 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005442:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2b37      	cmp	r3, #55	; 0x37
 8005450:	d901      	bls.n	8005456 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005452:	2337      	movs	r3, #55	; 0x37
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	3304      	adds	r3, #4
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff f98c 	bl	800478a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	3318      	adds	r3, #24
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f987 	bl	800478a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005480:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005490:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	2200      	movs	r2, #0
 8005496:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	69b8      	ldr	r0, [r7, #24]
 80054a6:	f001 f8ef 	bl	8006688 <pxPortInitialiseStack>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054bc:	bf00      	nop
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054cc:	f001 f9ce 	bl	800686c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054da:	4b2c      	ldr	r3, [pc, #176]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054e2:	4a2a      	ldr	r2, [pc, #168]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054e8:	4b27      	ldr	r3, [pc, #156]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054f0:	f000 fc16 	bl	8005d20 <prvInitialiseTaskLists>
 80054f4:	e00d      	b.n	8005512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <prvAddNewTaskToReadyList+0xcc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	429a      	cmp	r2, r3
 800550a:	d802      	bhi.n	8005512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 800551a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <prvAddNewTaskToReadyList+0xd4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d903      	bls.n	8005538 <prvAddNewTaskToReadyList+0x74>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a18      	ldr	r2, [pc, #96]	; (8005598 <prvAddNewTaskToReadyList+0xd4>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a15      	ldr	r2, [pc, #84]	; (800559c <prvAddNewTaskToReadyList+0xd8>)
 8005546:	441a      	add	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7ff f927 	bl	80047a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005554:	f001 f9ba 	bl	80068cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <prvAddNewTaskToReadyList+0xcc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	429a      	cmp	r2, r3
 800556c:	d207      	bcs.n	800557e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <prvAddNewTaskToReadyList+0xdc>)
 8005570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000e14 	.word	0x20000e14
 800558c:	20000940 	.word	0x20000940
 8005590:	20000e20 	.word	0x20000e20
 8005594:	20000e30 	.word	0x20000e30
 8005598:	20000e1c 	.word	0x20000e1c
 800559c:	20000944 	.word	0x20000944
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <vTaskDelay+0x60>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <vTaskDelay+0x30>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60bb      	str	r3, [r7, #8]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055d4:	f000 f880 	bl	80056d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fcee 	bl	8005fbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055e0:	f000 f888 	bl	80056f4 <xTaskResumeAll>
 80055e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d107      	bne.n	80055fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <vTaskDelay+0x64>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000e3c 	.word	0x20000e3c
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800561a:	463a      	mov	r2, r7
 800561c:	1d39      	adds	r1, r7, #4
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff f860 	bl	80046e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	9202      	str	r2, [sp, #8]
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2300      	movs	r3, #0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	460a      	mov	r2, r1
 800563a:	4921      	ldr	r1, [pc, #132]	; (80056c0 <vTaskStartScheduler+0xb4>)
 800563c:	4821      	ldr	r0, [pc, #132]	; (80056c4 <vTaskStartScheduler+0xb8>)
 800563e:	f7ff fe19 	bl	8005274 <xTaskCreateStatic>
 8005642:	4603      	mov	r3, r0
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <vTaskStartScheduler+0xbc>)
 8005646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <vTaskStartScheduler+0xbc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e001      	b.n	800565a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d102      	bne.n	8005666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005660:	f000 fd00 	bl	8006064 <xTimerCreateTimerTask>
 8005664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d116      	bne.n	800569a <vTaskStartScheduler+0x8e>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <vTaskStartScheduler+0xc0>)
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005688:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <vTaskStartScheduler+0xc4>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <vTaskStartScheduler+0xc8>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005694:	f001 f878 	bl	8006788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005698:	e00e      	b.n	80056b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d10a      	bne.n	80056b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <vTaskStartScheduler+0xaa>
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08006dd8 	.word	0x08006dd8
 80056c4:	08005cf1 	.word	0x08005cf1
 80056c8:	20000e38 	.word	0x20000e38
 80056cc:	20000e34 	.word	0x20000e34
 80056d0:	20000e20 	.word	0x20000e20
 80056d4:	20000e18 	.word	0x20000e18

080056d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vTaskSuspendAll+0x18>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	4a03      	ldr	r2, [pc, #12]	; (80056f0 <vTaskSuspendAll+0x18>)
 80056e4:	6013      	str	r3, [r2, #0]
}
 80056e6:	bf00      	nop
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000e3c 	.word	0x20000e3c

080056f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005702:	4b42      	ldr	r3, [pc, #264]	; (800580c <xTaskResumeAll+0x118>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <xTaskResumeAll+0x2c>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	603b      	str	r3, [r7, #0]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005720:	f001 f8a4 	bl	800686c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <xTaskResumeAll+0x118>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <xTaskResumeAll+0x118>)
 800572c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <xTaskResumeAll+0x118>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d162      	bne.n	80057fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <xTaskResumeAll+0x11c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d05e      	beq.n	80057fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573e:	e02f      	b.n	80057a0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <xTaskResumeAll+0x120>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3318      	adds	r3, #24
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff f883 	bl	8004858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff f87e 	bl	8004858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <xTaskResumeAll+0x124>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d903      	bls.n	8005770 <xTaskResumeAll+0x7c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <xTaskResumeAll+0x124>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <xTaskResumeAll+0x128>)
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7ff f80b 	bl	80047a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <xTaskResumeAll+0x12c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <xTaskResumeAll+0x130>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xTaskResumeAll+0x120>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cb      	bne.n	8005740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ae:	f000 fb55 	bl	8005e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <xTaskResumeAll+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057be:	f000 f845 	bl	800584c <xTaskIncrementTick>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <xTaskResumeAll+0x130>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f1      	bne.n	80057be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <xTaskResumeAll+0x134>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xTaskResumeAll+0x130>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTaskResumeAll+0x138>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057fc:	f001 f866 	bl	80068cc <vPortExitCritical>

	return xAlreadyYielded;
 8005800:	68bb      	ldr	r3, [r7, #8]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000e3c 	.word	0x20000e3c
 8005810:	20000e14 	.word	0x20000e14
 8005814:	20000dd4 	.word	0x20000dd4
 8005818:	20000e1c 	.word	0x20000e1c
 800581c:	20000944 	.word	0x20000944
 8005820:	20000940 	.word	0x20000940
 8005824:	20000e28 	.word	0x20000e28
 8005828:	20000e24 	.word	0x20000e24
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005836:	4b04      	ldr	r3, [pc, #16]	; (8005848 <xTaskGetTickCount+0x18>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr
 8005848:	20000e18 	.word	0x20000e18

0800584c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b51      	ldr	r3, [pc, #324]	; (800599c <xTaskIncrementTick+0x150>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 808e 	bne.w	800597c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005860:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <xTaskIncrementTick+0x154>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005868:	4a4d      	ldr	r2, [pc, #308]	; (80059a0 <xTaskIncrementTick+0x154>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d120      	bne.n	80058b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005874:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <xTaskIncrementTick+0x158>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <xTaskIncrementTick+0x48>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	603b      	str	r3, [r7, #0]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xTaskIncrementTick+0x46>
 8005894:	4b43      	ldr	r3, [pc, #268]	; (80059a4 <xTaskIncrementTick+0x158>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <xTaskIncrementTick+0x15c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a41      	ldr	r2, [pc, #260]	; (80059a4 <xTaskIncrementTick+0x158>)
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	4a41      	ldr	r2, [pc, #260]	; (80059a8 <xTaskIncrementTick+0x15c>)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	4b40      	ldr	r3, [pc, #256]	; (80059ac <xTaskIncrementTick+0x160>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	4a3f      	ldr	r2, [pc, #252]	; (80059ac <xTaskIncrementTick+0x160>)
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	f000 fad3 	bl	8005e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <xTaskIncrementTick+0x164>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d34e      	bcc.n	800595e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c0:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <xTaskIncrementTick+0x158>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <xTaskIncrementTick+0x82>
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <xTaskIncrementTick+0x84>
 80058ce:	2300      	movs	r3, #0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <xTaskIncrementTick+0x164>)
 80058d6:	f04f 32ff 	mov.w	r2, #4294967295
 80058da:	601a      	str	r2, [r3, #0]
					break;
 80058dc:	e03f      	b.n	800595e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058de:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <xTaskIncrementTick+0x158>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d203      	bcs.n	80058fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058f6:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <xTaskIncrementTick+0x164>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]
						break;
 80058fc:	e02f      	b.n	800595e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe ffa8 	bl	8004858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	3318      	adds	r3, #24
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe ff9f 	bl	8004858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <xTaskIncrementTick+0x168>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <xTaskIncrementTick+0xe2>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <xTaskIncrementTick+0x168>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <xTaskIncrementTick+0x16c>)
 800593c:	441a      	add	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fe ff2c 	bl	80047a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <xTaskIncrementTick+0x170>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	429a      	cmp	r2, r3
 8005956:	d3b3      	bcc.n	80058c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595c:	e7b0      	b.n	80058c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <xTaskIncrementTick+0x170>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4914      	ldr	r1, [pc, #80]	; (80059b8 <xTaskIncrementTick+0x16c>)
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d907      	bls.n	8005986 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005976:	2301      	movs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e004      	b.n	8005986 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800597c:	4b10      	ldr	r3, [pc, #64]	; (80059c0 <xTaskIncrementTick+0x174>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <xTaskIncrementTick+0x174>)
 8005984:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <xTaskIncrementTick+0x178>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005992:	697b      	ldr	r3, [r7, #20]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000e3c 	.word	0x20000e3c
 80059a0:	20000e18 	.word	0x20000e18
 80059a4:	20000dcc 	.word	0x20000dcc
 80059a8:	20000dd0 	.word	0x20000dd0
 80059ac:	20000e2c 	.word	0x20000e2c
 80059b0:	20000e34 	.word	0x20000e34
 80059b4:	20000e1c 	.word	0x20000e1c
 80059b8:	20000944 	.word	0x20000944
 80059bc:	20000940 	.word	0x20000940
 80059c0:	20000e24 	.word	0x20000e24
 80059c4:	20000e28 	.word	0x20000e28

080059c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059ce:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <vTaskSwitchContext+0xa4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <vTaskSwitchContext+0xa8>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059dc:	e041      	b.n	8005a62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <vTaskSwitchContext+0xa8>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80059e4:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <vTaskSwitchContext+0xac>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e010      	b.n	8005a0e <vTaskSwitchContext+0x46>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <vTaskSwitchContext+0x40>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	607b      	str	r3, [r7, #4]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <vTaskSwitchContext+0x3e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	491a      	ldr	r1, [pc, #104]	; (8005a78 <vTaskSwitchContext+0xb0>)
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0e4      	beq.n	80059ec <vTaskSwitchContext+0x24>
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <vTaskSwitchContext+0xb0>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	605a      	str	r2, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	3308      	adds	r3, #8
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d104      	bne.n	8005a52 <vTaskSwitchContext+0x8a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <vTaskSwitchContext+0xb4>)
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4a05      	ldr	r2, [pc, #20]	; (8005a74 <vTaskSwitchContext+0xac>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6013      	str	r3, [r2, #0]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr
 8005a6c:	20000e3c 	.word	0x20000e3c
 8005a70:	20000e28 	.word	0x20000e28
 8005a74:	20000e1c 	.word	0x20000e1c
 8005a78:	20000944 	.word	0x20000944
 8005a7c:	20000940 	.word	0x20000940

08005a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <vTaskPlaceOnEventList+0x44>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3318      	adds	r3, #24
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fe fe9a 	bl	80047e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f000 fa80 	bl	8005fbc <prvAddCurrentTaskToDelayedList>
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000940 	.word	0x20000940

08005ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	617b      	str	r3, [r7, #20]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <vTaskPlaceOnEventListRestricted+0x54>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3318      	adds	r3, #24
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7fe fe52 	bl	80047a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295
 8005b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f000 fa55 	bl	8005fbc <prvAddCurrentTaskToDelayedList>
	}
 8005b12:	bf00      	nop
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000940 	.word	0x20000940

08005b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60fb      	str	r3, [r7, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fe81 	bl	8004858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <xTaskRemoveFromEventList+0xb0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11d      	bne.n	8005b9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fe78 	bl	8004858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <xTaskRemoveFromEventList+0xb4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <xTaskRemoveFromEventList+0x5c>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <xTaskRemoveFromEventList+0xb4>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <xTaskRemoveFromEventList+0xb8>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7fe fe05 	bl	80047a2 <vListInsertEnd>
 8005b98:	e005      	b.n	8005ba6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	480e      	ldr	r0, [pc, #56]	; (8005bdc <xTaskRemoveFromEventList+0xbc>)
 8005ba2:	f7fe fdfe 	bl	80047a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <xTaskRemoveFromEventList+0xc0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d905      	bls.n	8005bc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <xTaskRemoveFromEventList+0xc4>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e001      	b.n	8005bc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005bc4:	697b      	ldr	r3, [r7, #20]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000e3c 	.word	0x20000e3c
 8005bd4:	20000e1c 	.word	0x20000e1c
 8005bd8:	20000944 	.word	0x20000944
 8005bdc:	20000dd4 	.word	0x20000dd4
 8005be0:	20000940 	.word	0x20000940
 8005be4:	20000e28 	.word	0x20000e28

08005be8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <vTaskInternalSetTimeOutState+0x24>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <vTaskInternalSetTimeOutState+0x28>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	605a      	str	r2, [r3, #4]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000e2c 	.word	0x20000e2c
 8005c10:	20000e18 	.word	0x20000e18

08005c14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	613b      	str	r3, [r7, #16]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60fb      	str	r3, [r7, #12]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c56:	f000 fe09 	bl	800686c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <xTaskCheckForTimeOut+0xbc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d102      	bne.n	8005c7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e023      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <xTaskCheckForTimeOut+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d007      	beq.n	8005c96 <xTaskCheckForTimeOut+0x82>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e015      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d20b      	bcs.n	8005cb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff9b 	bl	8005be8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e004      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cc2:	f000 fe03 	bl	80068cc <vPortExitCritical>

	return xReturn;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000e18 	.word	0x20000e18
 8005cd4:	20000e2c 	.word	0x20000e2c

08005cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <vTaskMissedYield+0x14>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000e28 	.word	0x20000e28

08005cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cf8:	f000 f852 	bl	8005da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <prvIdleTask+0x28>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d9f9      	bls.n	8005cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <prvIdleTask+0x2c>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d14:	e7f0      	b.n	8005cf8 <prvIdleTask+0x8>
 8005d16:	bf00      	nop
 8005d18:	20000944 	.word	0x20000944
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	e00c      	b.n	8005d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <prvInitialiseTaskLists+0x60>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fd06 	bl	800474c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3301      	adds	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b37      	cmp	r3, #55	; 0x37
 8005d4a:	d9ef      	bls.n	8005d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d4c:	480d      	ldr	r0, [pc, #52]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d4e:	f7fe fcfd 	bl	800474c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d52:	480d      	ldr	r0, [pc, #52]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d54:	f7fe fcfa 	bl	800474c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d58:	480c      	ldr	r0, [pc, #48]	; (8005d8c <prvInitialiseTaskLists+0x6c>)
 8005d5a:	f7fe fcf7 	bl	800474c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d5e:	480c      	ldr	r0, [pc, #48]	; (8005d90 <prvInitialiseTaskLists+0x70>)
 8005d60:	f7fe fcf4 	bl	800474c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <prvInitialiseTaskLists+0x74>)
 8005d66:	f7fe fcf1 	bl	800474c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <prvInitialiseTaskLists+0x78>)
 8005d6c:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <prvInitialiseTaskLists+0x7c>)
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000944 	.word	0x20000944
 8005d84:	20000da4 	.word	0x20000da4
 8005d88:	20000db8 	.word	0x20000db8
 8005d8c:	20000dd4 	.word	0x20000dd4
 8005d90:	20000de8 	.word	0x20000de8
 8005d94:	20000e00 	.word	0x20000e00
 8005d98:	20000dcc 	.word	0x20000dcc
 8005d9c:	20000dd0 	.word	0x20000dd0

08005da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da6:	e019      	b.n	8005ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005da8:	f000 fd60 	bl	800686c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <prvCheckTasksWaitingTermination+0x50>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fd4d 	bl	8004858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dd2:	f000 fd7b 	bl	80068cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f810 	bl	8005dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e1      	bne.n	8005da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000de8 	.word	0x20000de8
 8005df4:	20000e14 	.word	0x20000e14
 8005df8:	20000dfc 	.word	0x20000dfc

08005dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fe3c 	bl	8006a90 <vPortFree>
				vPortFree( pxTCB );
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fe39 	bl	8006a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e1e:	e018      	b.n	8005e52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d103      	bne.n	8005e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fe30 	bl	8006a90 <vPortFree>
	}
 8005e30:	e00f      	b.n	8005e52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d00a      	beq.n	8005e52 <prvDeleteTCB+0x56>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <prvDeleteTCB+0x54>
	}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e62:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <prvResetNextTaskUnblockTime+0x40>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <prvResetNextTaskUnblockTime+0x14>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <prvResetNextTaskUnblockTime+0x16>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <prvResetNextTaskUnblockTime+0x44>)
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e7e:	e008      	b.n	8005e92 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <prvResetNextTaskUnblockTime+0x40>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a04      	ldr	r2, [pc, #16]	; (8005ea0 <prvResetNextTaskUnblockTime+0x44>)
 8005e90:	6013      	str	r3, [r2, #0]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr
 8005e9c:	20000dcc 	.word	0x20000dcc
 8005ea0:	20000e34 	.word	0x20000e34

08005ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <xTaskGetSchedulerState+0x34>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d102      	bne.n	8005eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	607b      	str	r3, [r7, #4]
 8005eb6:	e008      	b.n	8005eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <xTaskGetSchedulerState+0x38>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	e001      	b.n	8005eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005eca:	687b      	ldr	r3, [r7, #4]
	}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000e20 	.word	0x20000e20
 8005edc:	20000e3c 	.word	0x20000e3c

08005ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d056      	beq.n	8005fa4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ef6:	4b2e      	ldr	r3, [pc, #184]	; (8005fb0 <xTaskPriorityDisinherit+0xd0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d00a      	beq.n	8005f16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	60bb      	str	r3, [r7, #8]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d02c      	beq.n	8005fa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d128      	bne.n	8005fa4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe fc7e 	bl	8004858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <xTaskPriorityDisinherit+0xd4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d903      	bls.n	8005f84 <xTaskPriorityDisinherit+0xa4>
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <xTaskPriorityDisinherit+0xd4>)
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <xTaskPriorityDisinherit+0xd8>)
 8005f92:	441a      	add	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7fe fc01 	bl	80047a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fa4:	697b      	ldr	r3, [r7, #20]
	}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000940 	.word	0x20000940
 8005fb4:	20000e1c 	.word	0x20000e1c
 8005fb8:	20000944 	.word	0x20000944

08005fbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fc6:	4b21      	ldr	r3, [pc, #132]	; (800604c <prvAddCurrentTaskToDelayedList+0x90>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fcc:	4b20      	ldr	r3, [pc, #128]	; (8006050 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fc40 	bl	8004858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d10a      	bne.n	8005ff6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4819      	ldr	r0, [pc, #100]	; (8006054 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ff0:	f7fe fbd7 	bl	80047a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ff4:	e026      	b.n	8006044 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <prvAddCurrentTaskToDelayedList+0x94>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	429a      	cmp	r2, r3
 800600c:	d209      	bcs.n	8006022 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <prvAddCurrentTaskToDelayedList+0x94>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe fbe4 	bl	80047e8 <vListInsert>
}
 8006020:	e010      	b.n	8006044 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f7fe fbda 	bl	80047e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006034:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d202      	bcs.n	8006044 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800603e:	4a08      	ldr	r2, [pc, #32]	; (8006060 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6013      	str	r3, [r2, #0]
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000e18 	.word	0x20000e18
 8006050:	20000940 	.word	0x20000940
 8006054:	20000e00 	.word	0x20000e00
 8006058:	20000dd0 	.word	0x20000dd0
 800605c:	20000dcc 	.word	0x20000dcc
 8006060:	20000e34 	.word	0x20000e34

08006064 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800606e:	f000 facb 	bl	8006608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <xTimerCreateTimerTask+0x80>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d021      	beq.n	80060be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006082:	1d3a      	adds	r2, r7, #4
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	f107 030c 	add.w	r3, r7, #12
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fb43 	bl	8004718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	9202      	str	r2, [sp, #8]
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	2302      	movs	r3, #2
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	2300      	movs	r3, #0
 80060a2:	460a      	mov	r2, r1
 80060a4:	4910      	ldr	r1, [pc, #64]	; (80060e8 <xTimerCreateTimerTask+0x84>)
 80060a6:	4811      	ldr	r0, [pc, #68]	; (80060ec <xTimerCreateTimerTask+0x88>)
 80060a8:	f7ff f8e4 	bl	8005274 <xTaskCreateStatic>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <xTimerCreateTimerTask+0x8c>)
 80060b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060b2:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <xTimerCreateTimerTask+0x8c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	613b      	str	r3, [r7, #16]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060da:	697b      	ldr	r3, [r7, #20]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000e70 	.word	0x20000e70
 80060e8:	08006de0 	.word	0x08006de0
 80060ec:	08006211 	.word	0x08006211
 80060f0:	20000e74 	.word	0x20000e74

080060f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTimerGenericCommand+0x2e>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <xTimerGenericCommand+0x98>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02a      	beq.n	8006180 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b05      	cmp	r3, #5
 800613a:	dc18      	bgt.n	800616e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800613c:	f7ff feb2 	bl	8005ea4 <xTaskGetSchedulerState>
 8006140:	4603      	mov	r3, r0
 8006142:	2b02      	cmp	r3, #2
 8006144:	d109      	bne.n	800615a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <xTimerGenericCommand+0x98>)
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	f107 0110 	add.w	r1, r7, #16
 800614e:	2300      	movs	r3, #0
 8006150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006152:	f7fe fcad 	bl	8004ab0 <xQueueGenericSend>
 8006156:	6278      	str	r0, [r7, #36]	; 0x24
 8006158:	e012      	b.n	8006180 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <xTimerGenericCommand+0x98>)
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	f107 0110 	add.w	r1, r7, #16
 8006162:	2300      	movs	r3, #0
 8006164:	2200      	movs	r2, #0
 8006166:	f7fe fca3 	bl	8004ab0 <xQueueGenericSend>
 800616a:	6278      	str	r0, [r7, #36]	; 0x24
 800616c:	e008      	b.n	8006180 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <xTimerGenericCommand+0x98>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	f107 0110 	add.w	r1, r7, #16
 8006176:	2300      	movs	r3, #0
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	f7fe fd97 	bl	8004cac <xQueueGenericSendFromISR>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006182:	4618      	mov	r0, r3
 8006184:	3728      	adds	r7, #40	; 0x28
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000e70 	.word	0x20000e70

08006190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af02      	add	r7, sp, #8
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <prvProcessExpiredTimer+0x7c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fb55 	bl	8004858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d122      	bne.n	80061fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	18d1      	adds	r1, r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f000 f8c8 	bl	8006358 <prvInsertTimerInActiveList>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061ce:	2300      	movs	r3, #0
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	2100      	movs	r1, #0
 80061d8:	6978      	ldr	r0, [r7, #20]
 80061da:	f7ff ff8b 	bl	80060f4 <xTimerGenericCommand>
 80061de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60fb      	str	r3, [r7, #12]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	6978      	ldr	r0, [r7, #20]
 8006202:	4798      	blx	r3
}
 8006204:	bf00      	nop
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000e68 	.word	0x20000e68

08006210 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f857 	bl	80062d0 <prvGetNextExpireTime>
 8006222:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4619      	mov	r1, r3
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f803 	bl	8006234 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800622e:	f000 f8d5 	bl	80063dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006232:	e7f1      	b.n	8006218 <prvTimerTask+0x8>

08006234 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800623e:	f7ff fa4b 	bl	80056d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f866 	bl	8006318 <prvSampleTimeNow>
 800624c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d130      	bne.n	80062b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <prvProcessTimerOrBlockTask+0x3c>
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	429a      	cmp	r2, r3
 8006260:	d806      	bhi.n	8006270 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006262:	f7ff fa47 	bl	80056f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ff91 	bl	8006190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800626e:	e024      	b.n	80062ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006276:	4b13      	ldr	r3, [pc, #76]	; (80062c4 <prvProcessTimerOrBlockTask+0x90>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <prvProcessTimerOrBlockTask+0x94>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	f7fe ffb9 	bl	800520c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800629a:	f7ff fa2b 	bl	80056f4 <xTaskResumeAll>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062a4:	4b09      	ldr	r3, [pc, #36]	; (80062cc <prvProcessTimerOrBlockTask+0x98>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
}
 80062b4:	e001      	b.n	80062ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062b6:	f7ff fa1d 	bl	80056f4 <xTaskResumeAll>
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000e6c 	.word	0x20000e6c
 80062c8:	20000e70 	.word	0x20000e70
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062d8:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <prvGetNextExpireTime+0x44>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d105      	bne.n	8006302 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <prvGetNextExpireTime+0x44>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e001      	b.n	8006306 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006306:	68fb      	ldr	r3, [r7, #12]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	20000e68 	.word	0x20000e68

08006318 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006320:	f7ff fa86 	bl	8005830 <xTaskGetTickCount>
 8006324:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <prvSampleTimeNow+0x3c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	429a      	cmp	r2, r3
 800632e:	d205      	bcs.n	800633c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006330:	f000 f908 	bl	8006544 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e002      	b.n	8006342 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006342:	4a04      	ldr	r2, [pc, #16]	; (8006354 <prvSampleTimeNow+0x3c>)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006348:	68fb      	ldr	r3, [r7, #12]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000e78 	.word	0x20000e78

08006358 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d812      	bhi.n	80063a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e01b      	b.n	80063ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006392:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <prvInsertTimerInActiveList+0x7c>)
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7fe fa23 	bl	80047e8 <vListInsert>
 80063a2:	e012      	b.n	80063ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d206      	bcs.n	80063ba <prvInsertTimerInActiveList+0x62>
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e007      	b.n	80063ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <prvInsertTimerInActiveList+0x80>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7fe fa0f 	bl	80047e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063ca:	697b      	ldr	r3, [r7, #20]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000e6c 	.word	0x20000e6c
 80063d8:	20000e68 	.word	0x20000e68

080063dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	; 0x38
 80063e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063e2:	e09d      	b.n	8006520 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da18      	bge.n	800641c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	3304      	adds	r3, #4
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61fb      	str	r3, [r7, #28]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006412:	6850      	ldr	r0, [r2, #4]
 8006414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006416:	6892      	ldr	r2, [r2, #8]
 8006418:	4611      	mov	r1, r2
 800641a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	db7d      	blt.n	800651e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fa10 	bl	8004858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006438:	463b      	mov	r3, r7
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff ff6c 	bl	8006318 <prvSampleTimeNow>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b09      	cmp	r3, #9
 8006446:	d86b      	bhi.n	8006520 <prvProcessReceivedCommands+0x144>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <prvProcessReceivedCommands+0x74>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006479 	.word	0x08006479
 8006454:	08006479 	.word	0x08006479
 8006458:	08006479 	.word	0x08006479
 800645c:	08006521 	.word	0x08006521
 8006460:	080064d5 	.word	0x080064d5
 8006464:	0800650d 	.word	0x0800650d
 8006468:	08006479 	.word	0x08006479
 800646c:	08006479 	.word	0x08006479
 8006470:	08006521 	.word	0x08006521
 8006474:	080064d5 	.word	0x080064d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	18d1      	adds	r1, r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006486:	f7ff ff67 	bl	8006358 <prvInsertTimerInActiveList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d047      	beq.n	8006520 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006496:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d13f      	bne.n	8006520 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	441a      	add	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	2300      	movs	r3, #0
 80064ae:	2100      	movs	r1, #0
 80064b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b2:	f7ff fe1f 	bl	80060f4 <xTimerGenericCommand>
 80064b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d130      	bne.n	8006520 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	61bb      	str	r3, [r7, #24]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	617b      	str	r3, [r7, #20]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	18d1      	adds	r1, r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f7ff ff27 	bl	8006358 <prvInsertTimerInActiveList>
					break;
 800650a:	e009      	b.n	8006520 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006518:	f000 faba 	bl	8006a90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800651c:	e000      	b.n	8006520 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800651e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006520:	4b07      	ldr	r3, [pc, #28]	; (8006540 <prvProcessReceivedCommands+0x164>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	1d39      	adds	r1, r7, #4
 8006526:	2200      	movs	r2, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fc57 	bl	8004ddc <xQueueReceive>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	f47f af57 	bne.w	80063e4 <prvProcessReceivedCommands+0x8>
	}
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	3730      	adds	r7, #48	; 0x30
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000e70 	.word	0x20000e70

08006544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800654a:	e045      	b.n	80065d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800654c:	4b2c      	ldr	r3, [pc, #176]	; (8006600 <prvSwitchTimerLists+0xbc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006556:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <prvSwitchTimerLists+0xbc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3304      	adds	r3, #4
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe f977 	bl	8004858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d12e      	bne.n	80065d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4413      	add	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	429a      	cmp	r2, r3
 800658a:	d90e      	bls.n	80065aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006598:	4b19      	ldr	r3, [pc, #100]	; (8006600 <prvSwitchTimerLists+0xbc>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f7fe f920 	bl	80047e8 <vListInsert>
 80065a8:	e016      	b.n	80065d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065aa:	2300      	movs	r3, #0
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2300      	movs	r3, #0
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	2100      	movs	r1, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fd9d 	bl	80060f4 <xTimerGenericCommand>
 80065ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	603b      	str	r3, [r7, #0]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <prvSwitchTimerLists+0xbc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1b4      	bne.n	800654c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <prvSwitchTimerLists+0xbc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <prvSwitchTimerLists+0xc0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a04      	ldr	r2, [pc, #16]	; (8006600 <prvSwitchTimerLists+0xbc>)
 80065ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065f0:	4a04      	ldr	r2, [pc, #16]	; (8006604 <prvSwitchTimerLists+0xc0>)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6013      	str	r3, [r2, #0]
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000e68 	.word	0x20000e68
 8006604:	20000e6c 	.word	0x20000e6c

08006608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800660e:	f000 f92d 	bl	800686c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d120      	bne.n	800665c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800661a:	4814      	ldr	r0, [pc, #80]	; (800666c <prvCheckForValidListAndQueue+0x64>)
 800661c:	f7fe f896 	bl	800474c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006620:	4813      	ldr	r0, [pc, #76]	; (8006670 <prvCheckForValidListAndQueue+0x68>)
 8006622:	f7fe f893 	bl	800474c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006626:	4b13      	ldr	r3, [pc, #76]	; (8006674 <prvCheckForValidListAndQueue+0x6c>)
 8006628:	4a10      	ldr	r2, [pc, #64]	; (800666c <prvCheckForValidListAndQueue+0x64>)
 800662a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <prvCheckForValidListAndQueue+0x70>)
 800662e:	4a10      	ldr	r2, [pc, #64]	; (8006670 <prvCheckForValidListAndQueue+0x68>)
 8006630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006632:	2300      	movs	r3, #0
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <prvCheckForValidListAndQueue+0x74>)
 8006638:	4a11      	ldr	r2, [pc, #68]	; (8006680 <prvCheckForValidListAndQueue+0x78>)
 800663a:	2110      	movs	r1, #16
 800663c:	200a      	movs	r0, #10
 800663e:	f7fe f99d 	bl	800497c <xQueueGenericCreateStatic>
 8006642:	4603      	mov	r3, r0
 8006644:	4a08      	ldr	r2, [pc, #32]	; (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <prvCheckForValidListAndQueue+0x60>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <prvCheckForValidListAndQueue+0x60>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	490b      	ldr	r1, [pc, #44]	; (8006684 <prvCheckForValidListAndQueue+0x7c>)
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fdb0 	bl	80051bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800665c:	f000 f936 	bl	80068cc <vPortExitCritical>
}
 8006660:	bf00      	nop
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000e70 	.word	0x20000e70
 800666c:	20000e40 	.word	0x20000e40
 8006670:	20000e54 	.word	0x20000e54
 8006674:	20000e68 	.word	0x20000e68
 8006678:	20000e6c 	.word	0x20000e6c
 800667c:	20000f1c 	.word	0x20000f1c
 8006680:	20000e7c 	.word	0x20000e7c
 8006684:	08006de8 	.word	0x08006de8

08006688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3b04      	subs	r3, #4
 8006698:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f023 0201 	bic.w	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b04      	subs	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b8:	4a08      	ldr	r2, [pc, #32]	; (80066dc <pxPortInitialiseStack+0x54>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b14      	subs	r3, #20
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b20      	subs	r3, #32
 80066ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	080066e1 	.word	0x080066e1

080066e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <prvTaskExitError+0x54>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d00a      	beq.n	800670a <prvTaskExitError+0x2a>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60fb      	str	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <prvTaskExitError+0x28>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800671e:	bf00      	nop
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0fc      	beq.n	8006720 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000024 	.word	0x20000024
	...

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	f04e 0e0d 	orr.w	lr, lr, #13
 800675e:	4770      	bx	lr

08006760 <pxCurrentTCBConst2>:
 8006760:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006768:	4806      	ldr	r0, [pc, #24]	; (8006784 <prvPortStartFirstTask+0x1c>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	b662      	cpsie	i
 8006774:	b661      	cpsie	f
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	df00      	svc	0
 8006780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006782:	bf00      	nop
 8006784:	e000ed08 	.word	0xe000ed08

08006788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800678e:	4b32      	ldr	r3, [pc, #200]	; (8006858 <xPortStartScheduler+0xd0>)
 8006790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	4b2a      	ldr	r3, [pc, #168]	; (800685c <xPortStartScheduler+0xd4>)
 80067b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067b6:	4b2a      	ldr	r3, [pc, #168]	; (8006860 <xPortStartScheduler+0xd8>)
 80067b8:	2207      	movs	r2, #7
 80067ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067bc:	e009      	b.n	80067d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067be:	4b28      	ldr	r3, [pc, #160]	; (8006860 <xPortStartScheduler+0xd8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	4a26      	ldr	r2, [pc, #152]	; (8006860 <xPortStartScheduler+0xd8>)
 80067c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b80      	cmp	r3, #128	; 0x80
 80067dc:	d0ef      	beq.n	80067be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <xPortStartScheduler+0xd8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1c3 0307 	rsb	r3, r3, #7
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d00a      	beq.n	8006800 <xPortStartScheduler+0x78>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60bb      	str	r3, [r7, #8]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006800:	4b17      	ldr	r3, [pc, #92]	; (8006860 <xPortStartScheduler+0xd8>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	4a16      	ldr	r2, [pc, #88]	; (8006860 <xPortStartScheduler+0xd8>)
 8006808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <xPortStartScheduler+0xd8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006812:	4a13      	ldr	r2, [pc, #76]	; (8006860 <xPortStartScheduler+0xd8>)
 8006814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <xPortStartScheduler+0xdc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <xPortStartScheduler+0xdc>)
 8006824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800682a:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <xPortStartScheduler+0xdc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <xPortStartScheduler+0xdc>)
 8006830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006836:	f000 f8b9 	bl	80069ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800683a:	4b0b      	ldr	r3, [pc, #44]	; (8006868 <xPortStartScheduler+0xe0>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006840:	f7ff ff92 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006844:	f7ff f8c0 	bl	80059c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006848:	f7ff ff4a 	bl	80066e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	e000e400 	.word	0xe000e400
 800685c:	20000f6c 	.word	0x20000f6c
 8006860:	20000f70 	.word	0x20000f70
 8006864:	e000ed20 	.word	0xe000ed20
 8006868:	20000024 	.word	0x20000024

0800686c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	607b      	str	r3, [r7, #4]
}
 8006884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <vPortEnterCritical+0x58>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <vPortEnterCritical+0x58>)
 800688e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <vPortEnterCritical+0x58>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d10f      	bne.n	80068b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <vPortEnterCritical+0x5c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	603b      	str	r3, [r7, #0]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <vPortEnterCritical+0x4a>
	}
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000024 	.word	0x20000024
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068d2:	4b11      	ldr	r3, [pc, #68]	; (8006918 <vPortExitCritical+0x4c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10a      	bne.n	80068f0 <vPortExitCritical+0x24>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <vPortExitCritical+0x4c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	4a08      	ldr	r2, [pc, #32]	; (8006918 <vPortExitCritical+0x4c>)
 80068f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068fa:	4b07      	ldr	r3, [pc, #28]	; (8006918 <vPortExitCritical+0x4c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d105      	bne.n	800690e <vPortExitCritical+0x42>
 8006902:	2300      	movs	r3, #0
 8006904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f383 8811 	msr	BASEPRI, r3
}
 800690c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	20000024 	.word	0x20000024
 800691c:	00000000 	.word	0x00000000

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006930:	6010      	str	r0, [r2, #0]
 8006932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800693a:	f380 8811 	msr	BASEPRI, r0
 800693e:	f7ff f843 	bl	80059c8 <vTaskSwitchContext>
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8811 	msr	BASEPRI, r0
 800694a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006956:	f380 8809 	msr	PSP, r0
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	4770      	bx	lr

08006960 <pxCurrentTCBConst>:
 8006960:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006964:	bf00      	nop
 8006966:	bf00      	nop

08006968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006982:	f7fe ff63 	bl	800584c <xTaskIncrementTick>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <SysTick_Handler+0x40>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <vPortSetupTimerInterrupt+0x30>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <vPortSetupTimerInterrupt+0x34>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <vPortSetupTimerInterrupt+0x38>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <vPortSetupTimerInterrupt+0x3c>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	4a08      	ldr	r2, [pc, #32]	; (80069ec <vPortSetupTimerInterrupt+0x40>)
 80069ca:	3b01      	subs	r3, #1
 80069cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <vPortSetupTimerInterrupt+0x30>)
 80069d0:	2207      	movs	r2, #7
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr
 80069dc:	e000e010 	.word	0xe000e010
 80069e0:	e000e018 	.word	0xe000e018
 80069e4:	20000018 	.word	0x20000018
 80069e8:	10624dd3 	.word	0x10624dd3
 80069ec:	e000e014 	.word	0xe000e014

080069f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069f6:	f3ef 8305 	mrs	r3, IPSR
 80069fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b0f      	cmp	r3, #15
 8006a00:	d914      	bls.n	8006a2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a02:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <vPortValidateInterruptPriority+0x6c>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a0c:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <vPortValidateInterruptPriority+0x70>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	7afa      	ldrb	r2, [r7, #11]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d20a      	bcs.n	8006a2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	607b      	str	r3, [r7, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <vPortValidateInterruptPriority+0x74>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <vPortValidateInterruptPriority+0x78>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d90a      	bls.n	8006a52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	603b      	str	r3, [r7, #0]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <vPortValidateInterruptPriority+0x60>
	}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	e000e3f0 	.word	0xe000e3f0
 8006a60:	20000f6c 	.word	0x20000f6c
 8006a64:	e000ed0c 	.word	0xe000ed0c
 8006a68:	20000f70 	.word	0x20000f70

08006a6c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8006a74:	f7fe fe30 	bl	80056d8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f845 	bl	8006b08 <malloc>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a82:	f7fe fe37 	bl	80056f4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	if( pv )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8006a9e:	f7fe fe1b 	bl	80056d8 <vTaskSuspendAll>
		{
			free( pv );
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f838 	bl	8006b18 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8006aa8:	f7fe fe24 	bl	80056f4 <xTaskResumeAll>
	}
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <__errno>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	; (8006abc <__errno+0x8>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000028 	.word	0x20000028

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	2600      	movs	r6, #0
 8006ac4:	4d0c      	ldr	r5, [pc, #48]	; (8006af8 <__libc_init_array+0x38>)
 8006ac6:	4c0d      	ldr	r4, [pc, #52]	; (8006afc <__libc_init_array+0x3c>)
 8006ac8:	1b64      	subs	r4, r4, r5
 8006aca:	10a4      	asrs	r4, r4, #2
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	f000 f93a 	bl	8006d48 <_init>
 8006ad4:	2600      	movs	r6, #0
 8006ad6:	4d0a      	ldr	r5, [pc, #40]	; (8006b00 <__libc_init_array+0x40>)
 8006ad8:	4c0a      	ldr	r4, [pc, #40]	; (8006b04 <__libc_init_array+0x44>)
 8006ada:	1b64      	subs	r4, r4, r5
 8006adc:	10a4      	asrs	r4, r4, #2
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	08006ee0 	.word	0x08006ee0
 8006afc:	08006ee0 	.word	0x08006ee0
 8006b00:	08006ee0 	.word	0x08006ee0
 8006b04:	08006ee4 	.word	0x08006ee4

08006b08 <malloc>:
 8006b08:	4b02      	ldr	r3, [pc, #8]	; (8006b14 <malloc+0xc>)
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	f000 b889 	b.w	8006c24 <_malloc_r>
 8006b12:	bf00      	nop
 8006b14:	20000028 	.word	0x20000028

08006b18 <free>:
 8006b18:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <free+0xc>)
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	f000 b819 	b.w	8006b54 <_free_r>
 8006b22:	bf00      	nop
 8006b24:	20000028 	.word	0x20000028

08006b28 <memcpy>:
 8006b28:	440a      	add	r2, r1
 8006b2a:	4291      	cmp	r1, r2
 8006b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b30:	d100      	bne.n	8006b34 <memcpy+0xc>
 8006b32:	4770      	bx	lr
 8006b34:	b510      	push	{r4, lr}
 8006b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b40:	d1f9      	bne.n	8006b36 <memcpy+0xe>
 8006b42:	bd10      	pop	{r4, pc}

08006b44 <memset>:
 8006b44:	4603      	mov	r3, r0
 8006b46:	4402      	add	r2, r0
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d100      	bne.n	8006b4e <memset+0xa>
 8006b4c:	4770      	bx	lr
 8006b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b52:	e7f9      	b.n	8006b48 <memset+0x4>

08006b54 <_free_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	4605      	mov	r5, r0
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	d040      	beq.n	8006bde <_free_r+0x8a>
 8006b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b60:	1f0c      	subs	r4, r1, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bfb8      	it	lt
 8006b66:	18e4      	addlt	r4, r4, r3
 8006b68:	f000 f8e0 	bl	8006d2c <__malloc_lock>
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <_free_r+0x8c>)
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	b933      	cbnz	r3, 8006b80 <_free_r+0x2c>
 8006b72:	6063      	str	r3, [r4, #4]
 8006b74:	6014      	str	r4, [r2, #0]
 8006b76:	4628      	mov	r0, r5
 8006b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b7c:	f000 b8dc 	b.w	8006d38 <__malloc_unlock>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d908      	bls.n	8006b96 <_free_r+0x42>
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	1821      	adds	r1, r4, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf01      	itttt	eq
 8006b8c:	6819      	ldreq	r1, [r3, #0]
 8006b8e:	685b      	ldreq	r3, [r3, #4]
 8006b90:	1809      	addeq	r1, r1, r0
 8006b92:	6021      	streq	r1, [r4, #0]
 8006b94:	e7ed      	b.n	8006b72 <_free_r+0x1e>
 8006b96:	461a      	mov	r2, r3
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_free_r+0x4c>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d9fa      	bls.n	8006b96 <_free_r+0x42>
 8006ba0:	6811      	ldr	r1, [r2, #0]
 8006ba2:	1850      	adds	r0, r2, r1
 8006ba4:	42a0      	cmp	r0, r4
 8006ba6:	d10b      	bne.n	8006bc0 <_free_r+0x6c>
 8006ba8:	6820      	ldr	r0, [r4, #0]
 8006baa:	4401      	add	r1, r0
 8006bac:	1850      	adds	r0, r2, r1
 8006bae:	4283      	cmp	r3, r0
 8006bb0:	6011      	str	r1, [r2, #0]
 8006bb2:	d1e0      	bne.n	8006b76 <_free_r+0x22>
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	4401      	add	r1, r0
 8006bba:	6011      	str	r1, [r2, #0]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	e7da      	b.n	8006b76 <_free_r+0x22>
 8006bc0:	d902      	bls.n	8006bc8 <_free_r+0x74>
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	e7d6      	b.n	8006b76 <_free_r+0x22>
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	1821      	adds	r1, r4, r0
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf01      	itttt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	1809      	addeq	r1, r1, r0
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6054      	str	r4, [r2, #4]
 8006bdc:	e7cb      	b.n	8006b76 <_free_r+0x22>
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	20000f74 	.word	0x20000f74

08006be4 <sbrk_aligned>:
 8006be4:	b570      	push	{r4, r5, r6, lr}
 8006be6:	4e0e      	ldr	r6, [pc, #56]	; (8006c20 <sbrk_aligned+0x3c>)
 8006be8:	460c      	mov	r4, r1
 8006bea:	6831      	ldr	r1, [r6, #0]
 8006bec:	4605      	mov	r5, r0
 8006bee:	b911      	cbnz	r1, 8006bf6 <sbrk_aligned+0x12>
 8006bf0:	f000 f88c 	bl	8006d0c <_sbrk_r>
 8006bf4:	6030      	str	r0, [r6, #0]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f887 	bl	8006d0c <_sbrk_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d00a      	beq.n	8006c18 <sbrk_aligned+0x34>
 8006c02:	1cc4      	adds	r4, r0, #3
 8006c04:	f024 0403 	bic.w	r4, r4, #3
 8006c08:	42a0      	cmp	r0, r4
 8006c0a:	d007      	beq.n	8006c1c <sbrk_aligned+0x38>
 8006c0c:	1a21      	subs	r1, r4, r0
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 f87c 	bl	8006d0c <_sbrk_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d101      	bne.n	8006c1c <sbrk_aligned+0x38>
 8006c18:	f04f 34ff 	mov.w	r4, #4294967295
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	20000f78 	.word	0x20000f78

08006c24 <_malloc_r>:
 8006c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c28:	1ccd      	adds	r5, r1, #3
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	db01      	blt.n	8006c40 <_malloc_r+0x1c>
 8006c3c:	42a9      	cmp	r1, r5
 8006c3e:	d905      	bls.n	8006c4c <_malloc_r+0x28>
 8006c40:	230c      	movs	r3, #12
 8006c42:	2600      	movs	r6, #0
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c4c:	4e2e      	ldr	r6, [pc, #184]	; (8006d08 <_malloc_r+0xe4>)
 8006c4e:	f000 f86d 	bl	8006d2c <__malloc_lock>
 8006c52:	6833      	ldr	r3, [r6, #0]
 8006c54:	461c      	mov	r4, r3
 8006c56:	bb34      	cbnz	r4, 8006ca6 <_malloc_r+0x82>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ffc2 	bl	8006be4 <sbrk_aligned>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	4604      	mov	r4, r0
 8006c64:	d14d      	bne.n	8006d02 <_malloc_r+0xde>
 8006c66:	6834      	ldr	r4, [r6, #0]
 8006c68:	4626      	mov	r6, r4
 8006c6a:	2e00      	cmp	r6, #0
 8006c6c:	d140      	bne.n	8006cf0 <_malloc_r+0xcc>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	4631      	mov	r1, r6
 8006c72:	4638      	mov	r0, r7
 8006c74:	eb04 0803 	add.w	r8, r4, r3
 8006c78:	f000 f848 	bl	8006d0c <_sbrk_r>
 8006c7c:	4580      	cmp	r8, r0
 8006c7e:	d13a      	bne.n	8006cf6 <_malloc_r+0xd2>
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	3503      	adds	r5, #3
 8006c84:	1a6d      	subs	r5, r5, r1
 8006c86:	f025 0503 	bic.w	r5, r5, #3
 8006c8a:	3508      	adds	r5, #8
 8006c8c:	2d0c      	cmp	r5, #12
 8006c8e:	bf38      	it	cc
 8006c90:	250c      	movcc	r5, #12
 8006c92:	4638      	mov	r0, r7
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7ff ffa5 	bl	8006be4 <sbrk_aligned>
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d02b      	beq.n	8006cf6 <_malloc_r+0xd2>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	442b      	add	r3, r5
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	e00e      	b.n	8006cc4 <_malloc_r+0xa0>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	1b52      	subs	r2, r2, r5
 8006caa:	d41e      	bmi.n	8006cea <_malloc_r+0xc6>
 8006cac:	2a0b      	cmp	r2, #11
 8006cae:	d916      	bls.n	8006cde <_malloc_r+0xba>
 8006cb0:	1961      	adds	r1, r4, r5
 8006cb2:	42a3      	cmp	r3, r4
 8006cb4:	6025      	str	r5, [r4, #0]
 8006cb6:	bf18      	it	ne
 8006cb8:	6059      	strne	r1, [r3, #4]
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	bf08      	it	eq
 8006cbe:	6031      	streq	r1, [r6, #0]
 8006cc0:	5162      	str	r2, [r4, r5]
 8006cc2:	604b      	str	r3, [r1, #4]
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f104 060b 	add.w	r6, r4, #11
 8006cca:	f000 f835 	bl	8006d38 <__malloc_unlock>
 8006cce:	f026 0607 	bic.w	r6, r6, #7
 8006cd2:	1d23      	adds	r3, r4, #4
 8006cd4:	1af2      	subs	r2, r6, r3
 8006cd6:	d0b6      	beq.n	8006c46 <_malloc_r+0x22>
 8006cd8:	1b9b      	subs	r3, r3, r6
 8006cda:	50a3      	str	r3, [r4, r2]
 8006cdc:	e7b3      	b.n	8006c46 <_malloc_r+0x22>
 8006cde:	6862      	ldr	r2, [r4, #4]
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	bf0c      	ite	eq
 8006ce4:	6032      	streq	r2, [r6, #0]
 8006ce6:	605a      	strne	r2, [r3, #4]
 8006ce8:	e7ec      	b.n	8006cc4 <_malloc_r+0xa0>
 8006cea:	4623      	mov	r3, r4
 8006cec:	6864      	ldr	r4, [r4, #4]
 8006cee:	e7b2      	b.n	8006c56 <_malloc_r+0x32>
 8006cf0:	4634      	mov	r4, r6
 8006cf2:	6876      	ldr	r6, [r6, #4]
 8006cf4:	e7b9      	b.n	8006c6a <_malloc_r+0x46>
 8006cf6:	230c      	movs	r3, #12
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	f000 f81c 	bl	8006d38 <__malloc_unlock>
 8006d00:	e7a1      	b.n	8006c46 <_malloc_r+0x22>
 8006d02:	6025      	str	r5, [r4, #0]
 8006d04:	e7de      	b.n	8006cc4 <_malloc_r+0xa0>
 8006d06:	bf00      	nop
 8006d08:	20000f74 	.word	0x20000f74

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	2300      	movs	r3, #0
 8006d10:	4d05      	ldr	r5, [pc, #20]	; (8006d28 <_sbrk_r+0x1c>)
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa fd7a 	bl	8001810 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000f7c 	.word	0x20000f7c

08006d2c <__malloc_lock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__malloc_lock+0x8>)
 8006d2e:	f000 b809 	b.w	8006d44 <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	20000f80 	.word	0x20000f80

08006d38 <__malloc_unlock>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__malloc_unlock+0x8>)
 8006d3a:	f000 b804 	b.w	8006d46 <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	20000f80 	.word	0x20000f80

08006d44 <__retarget_lock_acquire_recursive>:
 8006d44:	4770      	bx	lr

08006d46 <__retarget_lock_release_recursive>:
 8006d46:	4770      	bx	lr

08006d48 <_init>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	bf00      	nop
 8006d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4e:	bc08      	pop	{r3}
 8006d50:	469e      	mov	lr, r3
 8006d52:	4770      	bx	lr

08006d54 <_fini>:
 8006d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d56:	bf00      	nop
 8006d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d5a:	bc08      	pop	{r3}
 8006d5c:	469e      	mov	lr, r3
 8006d5e:	4770      	bx	lr
