
Dashboard_Competition_Remake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be0  08002be0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002be0  08002be0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be0  08002be0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  200000b0  08002c98  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002c98  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a277  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3c  00000000  00000000  0002a393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c7  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017841  00000000  00000000  0002d70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce71  00000000  00000000  00044f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087ece  00000000  00000000  00051dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002edc  00000000  00000000  000d9c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000dcb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080029e8 	.word	0x080029e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080029e8 	.word	0x080029e8

0800014c <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
 8000158:	e00c      	b.n	8000174 <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 800015a:	2300      	movs	r3, #0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	e002      	b.n	8000166 <Delay+0x1a>
 8000160:	897b      	ldrh	r3, [r7, #10]
 8000162:	3301      	adds	r3, #1
 8000164:	817b      	strh	r3, [r7, #10]
 8000166:	897b      	ldrh	r3, [r7, #10]
 8000168:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800016c:	d3f8      	bcc.n	8000160 <Delay+0x14>
	for (i = 0; i < counts; i++)
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	3301      	adds	r3, #1
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	68fa      	ldr	r2, [r7, #12]
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	429a      	cmp	r2, r3
 800017a:	d3ee      	bcc.n	800015a <Delay+0xe>
	}

}
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 8000188:	b480      	push	{r7}
 800018a:	b085      	sub	sp, #20
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e00b      	b.n	80001ae <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 8000196:	2300      	movs	r3, #0
 8000198:	72fb      	strb	r3, [r7, #11]
 800019a:	e002      	b.n	80001a2 <MicrosecondDelay+0x1a>
 800019c:	7afb      	ldrb	r3, [r7, #11]
 800019e:	3301      	adds	r3, #1
 80001a0:	72fb      	strb	r3, [r7, #11]
 80001a2:	7afb      	ldrb	r3, [r7, #11]
 80001a4:	2b0f      	cmp	r3, #15
 80001a6:	d9f9      	bls.n	800019c <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	3301      	adds	r3, #1
 80001ac:	60fb      	str	r3, [r7, #12]
 80001ae:	68fa      	ldr	r2, [r7, #12]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d3ef      	bcc.n	8000196 <MicrosecondDelay+0xe>
	}
}
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr

080001c2 <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 80001c2:	b580      	push	{r7, lr}
 80001c4:	b084      	sub	sp, #16
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	4603      	mov	r3, r0
 80001ca:	460a      	mov	r2, r1
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	4613      	mov	r3, r2
 80001d0:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4
     * 5 6 7 8 9
     *
     */
    uint16_t offset = 40*y + x;
 80001d2:	79bb      	ldrb	r3, [r7, #6]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	461a      	mov	r2, r3
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	4413      	add	r3, r2
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	b29a      	uxth	r2, r3
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	4413      	add	r3, r2
 80001e6:	81fb      	strh	r3, [r7, #14]

    TransmitCommand(0x46);
 80001e8:	2046      	movs	r0, #70	; 0x46
 80001ea:	f000 fa09 	bl	8000600 <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 80001ee:	89fb      	ldrh	r3, [r7, #14]
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fa22 	bl	800063c <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	0a1b      	lsrs	r3, r3, #8
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fa1b 	bl	800063c <TransmitCommandParameter>
}
 8000206:	bf00      	nop
 8000208:	3710      	adds	r7, #16
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b082      	sub	sp, #8
 8000212:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 8000214:	2100      	movs	r1, #0
 8000216:	2000      	movs	r0, #0
 8000218:	f7ff ffd3 	bl	80001c2 <MoveCursor>

    //replace all characters with spaces
    TransmitCommand(0x42);
 800021c:	2042      	movs	r0, #66	; 0x42
 800021e:	f000 f9ef 	bl	8000600 <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	80fb      	strh	r3, [r7, #6]
 8000226:	e005      	b.n	8000234 <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 8000228:	2020      	movs	r0, #32
 800022a:	f000 fa07 	bl	800063c <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	3301      	adds	r3, #1
 8000232:	80fb      	strh	r3, [r7, #6]
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800023a:	d3f5      	bcc.n	8000228 <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f7ff ffbf 	bl	80001c2 <MoveCursor>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 8000258:	2046      	movs	r0, #70	; 0x46
 800025a:	f000 f9d1 	bl	8000600 <TransmitCommand>
    TransmitCommandParameter(offset);
 800025e:	78fb      	ldrb	r3, [r7, #3]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f9eb 	bl	800063c <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 8000266:	2048      	movs	r0, #72	; 0x48
 8000268:	f000 f9e8 	bl	800063c <TransmitCommandParameter>
    TransmitCommand(0x42);
 800026c:	2042      	movs	r0, #66	; 0x42
 800026e:	f000 f9c7 	bl	8000600 <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	e009      	b.n	800028c <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f9db 	bl	800063c <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	3301      	adds	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	ddf2      	ble.n	8000278 <SaveCharacterToRAM+0x2c>
    }
}
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b0c2      	sub	sp, #264	; 0x108
 80002a0:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 80002a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002aa:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <CharacterBitMaps+0x78>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	4611      	mov	r1, r2
 80002b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b4:	461a      	mov	r2, r3
 80002b6:	f002 fb89 	bl	80029cc <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 80002ba:	205c      	movs	r0, #92	; 0x5c
 80002bc:	f000 f9a0 	bl	8000600 <TransmitCommand>
    TransmitCommandParameter(0x00);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f9bb 	bl	800063c <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 80002c6:	2040      	movs	r0, #64	; 0x40
 80002c8:	f000 f9b8 	bl	800063c <TransmitCommandParameter>
    TransmitCommand(0x4C);
 80002cc:	204c      	movs	r0, #76	; 0x4c
 80002ce:	f000 f997 	bl	8000600 <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002d8:	e011      	b.n	80002fe <CharacterBitMaps+0x62>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);
 80002da:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002de:	1d3a      	adds	r2, r7, #4
 80002e0:	011b      	lsls	r3, r3, #4
 80002e2:	441a      	add	r2, r3
 80002e4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffac 	bl	800024c <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 80002f4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80002f8:	3301      	adds	r3, #1
 80002fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 80002fe:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000302:	2b0f      	cmp	r3, #15
 8000304:	d9e9      	bls.n	80002da <CharacterBitMaps+0x3e>
    }
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	08002a00 	.word	0x08002a00

08000318 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]
 8000324:	4613      	mov	r3, r2
 8000326:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };

    uint8_t temp;
    uint8_t x = starting_x;
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	73bb      	strb	r3, [r7, #14]

    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right"
 800032c:	204c      	movs	r0, #76	; 0x4c
 800032e:	f000 f967 	bl	8000600 <TransmitCommand>

    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000332:	2300      	movs	r3, #0
 8000334:	737b      	strb	r3, [r7, #13]
 8000336:	e069      	b.n	800040c <OutputString+0xf4>
    {
        MoveCursor(x, starting_y);
 8000338:	78ba      	ldrb	r2, [r7, #2]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	4611      	mov	r1, r2
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff3f 	bl	80001c2 <MoveCursor>
        temp = (uint8_t) Str[c];
 8000344:	7b7b      	ldrb	r3, [r7, #13]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2b20      	cmp	r3, #32
 8000352:	d102      	bne.n	800035a <OutputString+0x42>
        {
            temp = 36;                  //if character is " "
 8000354:	2324      	movs	r3, #36	; 0x24
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e025      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp == 58)
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	2b3a      	cmp	r3, #58	; 0x3a
 800035e:	d102      	bne.n	8000366 <OutputString+0x4e>
        {
            temp = 38;                  //if character is ":"
 8000360:	2326      	movs	r3, #38	; 0x26
 8000362:	73fb      	strb	r3, [r7, #15]
 8000364:	e01f      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp == 46)
 8000366:	7bfb      	ldrb	r3, [r7, #15]
 8000368:	2b2e      	cmp	r3, #46	; 0x2e
 800036a:	d102      	bne.n	8000372 <OutputString+0x5a>
        {
            temp = 37;                  //if character is "."
 800036c:	2325      	movs	r3, #37	; 0x25
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	e019      	b.n	80003a6 <OutputString+0x8e>
        }
		else if (temp == 45)
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2b2d      	cmp	r3, #45	; 0x2d
 8000376:	d102      	bne.n	800037e <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 8000378:	2327      	movs	r3, #39	; 0x27
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e013      	b.n	80003a6 <OutputString+0x8e>
		}
        else if (temp <= 57)
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	2b39      	cmp	r3, #57	; 0x39
 8000382:	d803      	bhi.n	800038c <OutputString+0x74>
        {
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	3b16      	subs	r3, #22
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	e00c      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp <= 90)
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	2b5a      	cmp	r3, #90	; 0x5a
 8000390:	d803      	bhi.n	800039a <OutputString+0x82>
        {
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	3b41      	subs	r3, #65	; 0x41
 8000396:	73fb      	strb	r3, [r7, #15]
 8000398:	e005      	b.n	80003a6 <OutputString+0x8e>
        }
        else if (temp <= 122)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	2b7a      	cmp	r3, #122	; 0x7a
 800039e:	d802      	bhi.n	80003a6 <OutputString+0x8e>
        {
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	3b61      	subs	r3, #97	; 0x61
 80003a4:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     *
        ***********************************/

        TransmitCommand(0x42);                                  //print subcharacers A and B
 80003a6:	2042      	movs	r0, #66	; 0x42
 80003a8:	f000 f92a 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <OutputString+0x10c>)
 80003b0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f941 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	4a19      	ldr	r2, [pc, #100]	; (8000424 <OutputString+0x10c>)
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 f939 	bl	800063c <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 80003ca:	78bb      	ldrb	r3, [r7, #2]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fef4 	bl	80001c2 <MoveCursor>

        TransmitCommand(0x42);                                  //print the subcharacters C and D
 80003da:	2042      	movs	r0, #66	; 0x42
 80003dc:	f000 f910 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <OutputString+0x10c>)
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	789b      	ldrb	r3, [r3, #2]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f926 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <OutputString+0x10c>)
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	78db      	ldrb	r3, [r3, #3]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f91e 	bl	800063c <TransmitCommandParameter>

        x += 3;
 8000400:	7bbb      	ldrb	r3, [r7, #14]
 8000402:	3303      	adds	r3, #3
 8000404:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 8000406:	7b7b      	ldrb	r3, [r7, #13]
 8000408:	3301      	adds	r3, #1
 800040a:	737b      	strb	r3, [r7, #13]
 800040c:	7b7b      	ldrb	r3, [r7, #13]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	7b7a      	ldrb	r2, [r7, #13]
 8000416:	429a      	cmp	r2, r3
 8000418:	d38e      	bcc.n	8000338 <OutputString+0x20>
    }
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000000 	.word	0x20000000

08000428 <UpdateScreenTitles>:

/**
 * Updates Screen Titles depending on current page number
 * @Param pageNum: The current page number
 */
void UpdateScreenTitles(uint8_t pageNum) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]


	switch(pageNum)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b03      	cmp	r3, #3
 8000436:	f200 809b 	bhi.w	8000570 <UpdateScreenTitles+0x148>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <UpdateScreenTitles+0x18>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000451 	.word	0x08000451
 8000444:	080004a3 	.word	0x080004a3
 8000448:	080004cd 	.word	0x080004cd
 800044c:	0800051f 	.word	0x0800051f
	{
		case PAGE_0:
			/* Titles */
			OutputString("SOC", SOC_XPOS, SOC_YPOS);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	484a      	ldr	r0, [pc, #296]	; (8000580 <UpdateScreenTitles+0x158>)
 8000456:	f7ff ff5f 	bl	8000318 <OutputString>
			OutputString("CRUZE", CRUISE_XPOS, CRUISE_YPOS);
 800045a:	2203      	movs	r2, #3
 800045c:	2100      	movs	r1, #0
 800045e:	4849      	ldr	r0, [pc, #292]	; (8000584 <UpdateScreenTitles+0x15c>)
 8000460:	f7ff ff5a 	bl	8000318 <OutputString>
			OutputString("SPEED", SPEED_XPOS, SPEED_YPOS);
 8000464:	2206      	movs	r2, #6
 8000466:	2100      	movs	r1, #0
 8000468:	4847      	ldr	r0, [pc, #284]	; (8000588 <UpdateScreenTitles+0x160>)
 800046a:	f7ff ff55 	bl	8000318 <OutputString>
			OutputString("REGEN", REGEN_XPOS, REGEN_YPOS);
 800046e:	2209      	movs	r2, #9
 8000470:	2100      	movs	r1, #0
 8000472:	4846      	ldr	r0, [pc, #280]	; (800058c <UpdateScreenTitles+0x164>)
 8000474:	f7ff ff50 	bl	8000318 <OutputString>
			/* Units */
			OutputString("%", SOC_UNIT_XPOS, SOC_UNIT_YPOS);
 8000478:	2200      	movs	r2, #0
 800047a:	2126      	movs	r1, #38	; 0x26
 800047c:	4844      	ldr	r0, [pc, #272]	; (8000590 <UpdateScreenTitles+0x168>)
 800047e:	f7ff ff4b 	bl	8000318 <OutputString>
			OutputString("KM", CRUISE_UNIT_XPOS, CRUISE_UNIT_YPOS);
 8000482:	2203      	movs	r2, #3
 8000484:	2123      	movs	r1, #35	; 0x23
 8000486:	4843      	ldr	r0, [pc, #268]	; (8000594 <UpdateScreenTitles+0x16c>)
 8000488:	f7ff ff46 	bl	8000318 <OutputString>
			OutputString("KM", SPEED_UNIT_XPOS, SPEED_UNIT_YPOS);
 800048c:	2206      	movs	r2, #6
 800048e:	2123      	movs	r1, #35	; 0x23
 8000490:	4840      	ldr	r0, [pc, #256]	; (8000594 <UpdateScreenTitles+0x16c>)
 8000492:	f7ff ff41 	bl	8000318 <OutputString>
			OutputString("%", REGEN_UNIT_XPOS, REGEN_UNIT_YPOS);
 8000496:	2209      	movs	r2, #9
 8000498:	2126      	movs	r1, #38	; 0x26
 800049a:	483d      	ldr	r0, [pc, #244]	; (8000590 <UpdateScreenTitles+0x168>)
 800049c:	f7ff ff3c 	bl	8000318 <OutputString>
			break;
 80004a0:	e069      	b.n	8000576 <UpdateScreenTitles+0x14e>
		case PAGE_1:
			/* Titles */
			OutputString("LV WARN", LV_WARN_XPOS, LV_WARN_YPOS);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	483c      	ldr	r0, [pc, #240]	; (8000598 <UpdateScreenTitles+0x170>)
 80004a8:	f7ff ff36 	bl	8000318 <OutputString>
			OutputString("HV WARN", HV_WARN_XPOS, HV_WARN_YPOS);
 80004ac:	2203      	movs	r2, #3
 80004ae:	2100      	movs	r1, #0
 80004b0:	483a      	ldr	r0, [pc, #232]	; (800059c <UpdateScreenTitles+0x174>)
 80004b2:	f7ff ff31 	bl	8000318 <OutputString>
			OutputString("LT WARN", LT_WARN_XPOS, LT_WARN_YPOS);
 80004b6:	2206      	movs	r2, #6
 80004b8:	2100      	movs	r1, #0
 80004ba:	4839      	ldr	r0, [pc, #228]	; (80005a0 <UpdateScreenTitles+0x178>)
 80004bc:	f7ff ff2c 	bl	8000318 <OutputString>
			OutputString("HT WARN", HT_WARN_XPOS, HT_WARN_YPOS);
 80004c0:	2209      	movs	r2, #9
 80004c2:	2100      	movs	r1, #0
 80004c4:	4837      	ldr	r0, [pc, #220]	; (80005a4 <UpdateScreenTitles+0x17c>)
 80004c6:	f7ff ff27 	bl	8000318 <OutputString>
			break;
 80004ca:	e054      	b.n	8000576 <UpdateScreenTitles+0x14e>
		case PAGE_2:
			/* Titles */
			OutputString("MTR C", MOTOR_CURRENT_XPOS, MOTOR_CURRENT_YPOS);
 80004cc:	2206      	movs	r2, #6
 80004ce:	2100      	movs	r1, #0
 80004d0:	4835      	ldr	r0, [pc, #212]	; (80005a8 <UpdateScreenTitles+0x180>)
 80004d2:	f7ff ff21 	bl	8000318 <OutputString>
			OutputString("ARR C", ARRAY_CURRENT_XPOS, ARRAY_CURRENT_YPOS);
 80004d6:	2203      	movs	r2, #3
 80004d8:	2100      	movs	r1, #0
 80004da:	4834      	ldr	r0, [pc, #208]	; (80005ac <UpdateScreenTitles+0x184>)
 80004dc:	f7ff ff1c 	bl	8000318 <OutputString>
			OutputString("LV C", LV_CURRENT_XPOS, LV_CURRENT_YPOS);
 80004e0:	2206      	movs	r2, #6
 80004e2:	2100      	movs	r1, #0
 80004e4:	4832      	ldr	r0, [pc, #200]	; (80005b0 <UpdateScreenTitles+0x188>)
 80004e6:	f7ff ff17 	bl	8000318 <OutputString>
			OutputString("BUS C", BUS_CURRENT_XPOS, BUS_CURRENT_YPOS);
 80004ea:	2209      	movs	r2, #9
 80004ec:	2100      	movs	r1, #0
 80004ee:	4831      	ldr	r0, [pc, #196]	; (80005b4 <UpdateScreenTitles+0x18c>)
 80004f0:	f7ff ff12 	bl	8000318 <OutputString>
			/* Units */
			OutputString("%", MOTOR_CURRENT_UNIT_XPOS, MOTOR_CURRENT_UNIT_YPOS);
 80004f4:	2206      	movs	r2, #6
 80004f6:	2112      	movs	r1, #18
 80004f8:	4825      	ldr	r0, [pc, #148]	; (8000590 <UpdateScreenTitles+0x168>)
 80004fa:	f7ff ff0d 	bl	8000318 <OutputString>
			OutputString("A", ARRAY_CURRENT_UNIT_XPOS, ARRAY_CURRENT_UNIT_YPOS);
 80004fe:	2203      	movs	r2, #3
 8000500:	2125      	movs	r1, #37	; 0x25
 8000502:	482d      	ldr	r0, [pc, #180]	; (80005b8 <UpdateScreenTitles+0x190>)
 8000504:	f7ff ff08 	bl	8000318 <OutputString>
			OutputString("A", LV_CURRENT_UNIT_XPOS, LV_CURRENT_UNIT_YPOS);
 8000508:	2206      	movs	r2, #6
 800050a:	2125      	movs	r1, #37	; 0x25
 800050c:	482a      	ldr	r0, [pc, #168]	; (80005b8 <UpdateScreenTitles+0x190>)
 800050e:	f7ff ff03 	bl	8000318 <OutputString>
			OutputString("%", BUS_CURRENT_UNIT_XPOS, BUS_CURRENT_UNIT_YPOS);
 8000512:	2209      	movs	r2, #9
 8000514:	2125      	movs	r1, #37	; 0x25
 8000516:	481e      	ldr	r0, [pc, #120]	; (8000590 <UpdateScreenTitles+0x168>)
 8000518:	f7ff fefe 	bl	8000318 <OutputString>
			break;
 800051c:	e02b      	b.n	8000576 <UpdateScreenTitles+0x14e>
		case PAGE_3:
			/* Titles */
			OutputString("PK T", PACK_TEMP_XPOS, PACK_TEMP_YPOS);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	4826      	ldr	r0, [pc, #152]	; (80005bc <UpdateScreenTitles+0x194>)
 8000524:	f7ff fef8 	bl	8000318 <OutputString>
			OutputString("PK V", PACK_VOLT_XPOS, PACK_VOLT_YPOS);
 8000528:	2203      	movs	r2, #3
 800052a:	2100      	movs	r1, #0
 800052c:	4824      	ldr	r0, [pc, #144]	; (80005c0 <UpdateScreenTitles+0x198>)
 800052e:	f7ff fef3 	bl	8000318 <OutputString>
			OutputString("CL LV", CELL_LV_XPOS, CELL_LV_YPOS);
 8000532:	2206      	movs	r2, #6
 8000534:	2100      	movs	r1, #0
 8000536:	4823      	ldr	r0, [pc, #140]	; (80005c4 <UpdateScreenTitles+0x19c>)
 8000538:	f7ff feee 	bl	8000318 <OutputString>
			OutputString("CL HV", CELL_HV_XPOS, CELL_HV_YPOS);
 800053c:	2209      	movs	r2, #9
 800053e:	2100      	movs	r1, #0
 8000540:	4821      	ldr	r0, [pc, #132]	; (80005c8 <UpdateScreenTitles+0x1a0>)
 8000542:	f7ff fee9 	bl	8000318 <OutputString>
			/* Units */
			OutputString("C", PACK_TEMP_UNIT_XPOS, PACK_TEMP_UNIT_YPOS);
 8000546:	2200      	movs	r2, #0
 8000548:	2125      	movs	r1, #37	; 0x25
 800054a:	4820      	ldr	r0, [pc, #128]	; (80005cc <UpdateScreenTitles+0x1a4>)
 800054c:	f7ff fee4 	bl	8000318 <OutputString>
			OutputString("V", PACK_VOLT_UNIT_XPOS, PACK_VOLT_UNIT_XPOS);
 8000550:	2225      	movs	r2, #37	; 0x25
 8000552:	2125      	movs	r1, #37	; 0x25
 8000554:	481e      	ldr	r0, [pc, #120]	; (80005d0 <UpdateScreenTitles+0x1a8>)
 8000556:	f7ff fedf 	bl	8000318 <OutputString>
			OutputString("V", CELL_LV_UNIT_XPOS, CELL_LV_UNIT_YPOS);
 800055a:	2206      	movs	r2, #6
 800055c:	2125      	movs	r1, #37	; 0x25
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <UpdateScreenTitles+0x1a8>)
 8000560:	f7ff feda 	bl	8000318 <OutputString>
			OutputString("V", CELL_HV_UNIT_XPOS, CELL_HV_UNIT_YPOS);
 8000564:	2209      	movs	r2, #9
 8000566:	2125      	movs	r1, #37	; 0x25
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <UpdateScreenTitles+0x1a8>)
 800056a:	f7ff fed5 	bl	8000318 <OutputString>
			break;
 800056e:	e002      	b.n	8000576 <UpdateScreenTitles+0x14e>
		default:
			// Clear Screen
			ClearScreen();
 8000570:	f7ff fe4d 	bl	800020e <ClearScreen>
			break;
 8000574:	bf00      	nop
	}
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	08002b30 	.word	0x08002b30
 8000584:	08002b34 	.word	0x08002b34
 8000588:	08002b3c 	.word	0x08002b3c
 800058c:	08002b44 	.word	0x08002b44
 8000590:	08002b4c 	.word	0x08002b4c
 8000594:	08002b50 	.word	0x08002b50
 8000598:	08002b54 	.word	0x08002b54
 800059c:	08002b5c 	.word	0x08002b5c
 80005a0:	08002b64 	.word	0x08002b64
 80005a4:	08002b6c 	.word	0x08002b6c
 80005a8:	08002b74 	.word	0x08002b74
 80005ac:	08002b7c 	.word	0x08002b7c
 80005b0:	08002b84 	.word	0x08002b84
 80005b4:	08002b8c 	.word	0x08002b8c
 80005b8:	08002b20 	.word	0x08002b20
 80005bc:	08002b94 	.word	0x08002b94
 80005c0:	08002b9c 	.word	0x08002b9c
 80005c4:	08002ba4 	.word	0x08002ba4
 80005c8:	08002bac 	.word	0x08002bac
 80005cc:	08002b28 	.word	0x08002b28
 80005d0:	08002b24 	.word	0x08002b24

080005d4 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	00da      	lsls	r2, r3, #3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <WriteByteToDataBus+0x28>)
 80005e4:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	43db      	mvns	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	00da      	lsls	r2, r3, #3
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <WriteByteToDataBus+0x28>)
 80005f0:	615a      	str	r2, [r3, #20]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40011000 	.word	0x40011000

08000600 <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <TransmitCommand+0x38>)
 800060c:	2201      	movs	r2, #1
 800060e:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <TransmitCommand+0x38>)
 8000612:	2202      	movs	r2, #2
 8000614:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffdb 	bl	80005d4 <WriteByteToDataBus>
	MicrosecondDelay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff fdb2 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <TransmitCommand+0x38>)
 8000626:	2202      	movs	r2, #2
 8000628:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fdac 	bl	8000188 <MicrosecondDelay>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40011000 	.word	0x40011000

0800063c <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <TransmitCommandParameter+0x38>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <TransmitCommandParameter+0x38>)
 800064e:	2202      	movs	r2, #2
 8000650:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffbd 	bl	80005d4 <WriteByteToDataBus>
	MicrosecondDelay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff fd94 	bl	8000188 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <TransmitCommandParameter+0x38>)
 8000662:	2202      	movs	r2, #2
 8000664:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff fd8e 	bl	8000188 <MicrosecondDelay>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40011000 	.word	0x40011000

08000678 <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 800067c:	2040      	movs	r0, #64	; 0x40
 800067e:	f7ff ffbf 	bl	8000600 <TransmitCommand>
        Delay(5);
 8000682:	2005      	movs	r0, #5
 8000684:	f7ff fd62 	bl	800014c <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 8000688:	2034      	movs	r0, #52	; 0x34
 800068a:	f7ff ffd7 	bl	800063c <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 800068e:	2087      	movs	r0, #135	; 0x87
 8000690:	f7ff ffd4 	bl	800063c <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 8000694:	200f      	movs	r0, #15
 8000696:	f7ff ffd1 	bl	800063c <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 800069a:	2027      	movs	r0, #39	; 0x27
 800069c:	f7ff ffce 	bl	800063c <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 80006a0:	202f      	movs	r0, #47	; 0x2f
 80006a2:	f7ff ffcb 	bl	800063c <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 80006a6:	20ef      	movs	r0, #239	; 0xef
 80006a8:	f7ff ffc8 	bl	800063c <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f7ff ffc5 	bl	800063c <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff ffc2 	bl	800063c <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 80006b8:	2044      	movs	r0, #68	; 0x44
 80006ba:	f7ff ffa1 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ffbc 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ffb9 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 80006ca:	20f0      	movs	r0, #240	; 0xf0
 80006cc:	f7ff ffb6 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 80006d0:	20b0      	movs	r0, #176	; 0xb0
 80006d2:	f7ff ffb3 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 80006d6:	2004      	movs	r0, #4
 80006d8:	f7ff ffb0 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 80006dc:	20f0      	movs	r0, #240	; 0xf0
 80006de:	f7ff ffad 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ffaa 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ffa7 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff ffa4 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ffa1 	bl	800063c <TransmitCommandParameter>

	TransmitCommand(0x5B);
 80006fa:	205b      	movs	r0, #91	; 0x5b
 80006fc:	f7ff ff80 	bl	8000600 <TransmitCommand>
		TransmitCommandParameter(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff9b 	bl	800063c <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 8000706:	205a      	movs	r0, #90	; 0x5a
 8000708:	f7ff ff7a 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff95 	bl	800063c <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 8000712:	205b      	movs	r0, #91	; 0x5b
 8000714:	f7ff ff74 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(0);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff8f 	bl	800063c <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 800071e:	2058      	movs	r0, #88	; 0x58
 8000720:	f7ff ff6e 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(0x57);
 8000724:	2057      	movs	r0, #87	; 0x57
 8000726:	f7ff ff89 	bl	800063c <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 800072a:	205d      	movs	r0, #93	; 0x5d
 800072c:	f7ff ff68 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(4);
 8000730:	2004      	movs	r0, #4
 8000732:	f7ff ff83 	bl	800063c <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 8000736:	2084      	movs	r0, #132	; 0x84
 8000738:	f7ff ff80 	bl	800063c <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 800073c:	204c      	movs	r0, #76	; 0x4c
 800073e:	f7ff ff5f 	bl	8000600 <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 8000742:	2059      	movs	r0, #89	; 0x59
 8000744:	f7ff ff5c 	bl	8000600 <TransmitCommand>
        TransmitCommandParameter(0x7);
 8000748:	2007      	movs	r0, #7
 800074a:	f7ff ff77 	bl	800063c <TransmitCommandParameter>

    CharacterBitMaps();
 800074e:	f7ff fda5 	bl	800029c <CharacterBitMaps>
    ClearScreen();
 8000752:	f7ff fd5c 	bl	800020e <ClearScreen>
//	DisplayScreen();

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_CAN_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <MX_CAN_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_CAN_Init+0x64>)
 8000768:	2204      	movs	r2, #4
 800076a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_CAN_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_CAN_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_CAN_Init+0x64>)
 800077a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800077e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_CAN_Init+0x64>)
 8000782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000786:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_CAN_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_CAN_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_CAN_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_CAN_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_CAN_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_CAN_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_CAN_Init+0x64>)
 80007ae:	f000 fb1f 	bl	8000df0 <HAL_CAN_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f9a3 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	40006400 	.word	0x40006400

080007c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a29      	ldr	r2, [pc, #164]	; (8000888 <HAL_CAN_MspInit+0xc0>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d14b      	bne.n	8000880 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <HAL_CAN_MspInit+0xc4>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <HAL_CAN_MspInit+0xc4>)
 80007ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <HAL_CAN_MspInit+0xc4>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <HAL_CAN_MspInit+0xc4>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <HAL_CAN_MspInit+0xc4>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_CAN_MspInit+0xc4>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4818      	ldr	r0, [pc, #96]	; (8000890 <HAL_CAN_MspInit+0xc8>)
 800082e:	f001 f8a1 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <HAL_CAN_MspInit+0xc8>)
 8000848:	f001 f894 	bl	8001974 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_CAN_MspInit+0xcc>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
 8000852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000854:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_CAN_MspInit+0xcc>)
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2014      	movs	r0, #20
 8000876:	f001 f846 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800087a:	2014      	movs	r0, #20
 800087c:	f001 f85f 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40006400 	.word	0x40006400
 800088c:	40021000 	.word	0x40021000
 8000890:	40010c00 	.word	0x40010c00
 8000894:	40010000 	.word	0x40010000

08000898 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xb8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 80008f4:	2200      	movs	r2, #0
 80008f6:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0xbc>)
 80008fc:	f001 f9be 	bl	8001c7c <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_LO_Pin|BATT_HI_Pin|BMS_COMM_FLT_Pin|ONBOARD_LED_Pin
 8000900:	2200      	movs	r2, #0
 8000902:	f649 71f3 	movw	r1, #40947	; 0x9ff3
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_GPIO_Init+0xc0>)
 8000908:	f001 f9b8 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 800090c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000910:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xbc>)
 8000926:	f001 f825 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BATT_LO_Pin|BATT_HI_Pin|BMS_COMM_FLT_Pin|ONBOARD_LED_Pin
 800092a:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 800092e:	613b      	str	r3, [r7, #16]
                          |CH_OC_Pin|DCH_OC_Pin|BATT_OT_Pin|BATT_UV_Pin
                          |BATT_OV_Pin|MTR_OT_Pin|MTR_OC_Pin|MTR_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0xc0>)
 8000944:	f001 f816 	bl	8001974 <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	40011000 	.word	0x40011000
 8000958:	40010800 	.word	0x40010800

0800095c <InitLEDs>:

/**
 * Initialize Dashboard LED lights
 */
void InitLEDs(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 0x1UL << 2; 		//Initialize clock for GPIOA, if it hasn't been initialized yet
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <InitLEDs+0x68>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <InitLEDs+0x68>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <InitLEDs+0x6c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <InitLEDs+0x6c>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
	GPIOA->CRH &= 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <InitLEDs+0x6c>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <InitLEDs+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
	GPIOA->CRL |= 0x33330033UL;			//Set pins A1, A4, A5, A6, A7 to be Push-Pull Output, 50Mhz
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <InitLEDs+0x6c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <InitLEDs+0x6c>)
 8000986:	f043 534c 	orr.w	r3, r3, #855638016	; 0x33000000
 800098a:	f043 1333 	orr.w	r3, r3, #3342387	; 0x330033
 800098e:	6013      	str	r3, [r2, #0]
	GPIOA->CRH |= 0x30033333UL;			//SetBar pins A8, A9, A10 to be Push-Pull Output, 50Mhz
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <InitLEDs+0x6c>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <InitLEDs+0x6c>)
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <InitLEDs+0x70>)
 8000998:	4313      	orrs	r3, r2
 800099a:	604b      	str	r3, [r1, #4]

	RCC->APB2ENR |= 0x1;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <InitLEDs+0x68>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <InitLEDs+0x68>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= 0x2 << 24;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <InitLEDs+0x74>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <InitLEDs+0x74>)
 80009ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b2:	6053      	str	r3, [r2, #4]
	//GPIOA->BSRR = 0xFFFF;

	//GPIOA->BSRR = 0x1 << 11;

	GPIOA->BRR = 0xFFFF;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <InitLEDs+0x6c>)
 80009b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ba:	615a      	str	r2, [r3, #20]

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010800 	.word	0x40010800
 80009cc:	30033333 	.word	0x30033333
 80009d0:	40010000 	.word	0x40010000

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 f983 	bl	8000ce4 <HAL_Init>
   * Page 2: Current Summary
   * Page 3: Pack Summary (Voltage + Temperature)
   */

  // Page initialized to Page 0
  uint8_t current_page = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  TIM_HandleTypeDef htim3;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f84c 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff ff56 	bl	8000898 <MX_GPIO_Init>
  MX_CAN_Init();
 80009ec:	f7ff feb6 	bl	800075c <MX_CAN_Init>
  MX_TIM3_Init();
 80009f0:	f000 f8e6 	bl	8000bc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//  CanFilterSetup();
  HAL_CAN_Start(&hcan);
 80009f4:	481d      	ldr	r0, [pc, #116]	; (8000a6c <main+0x98>)
 80009f6:	f000 faf6 	bl	8000fe6 <HAL_CAN_Start>
  // GPIOC->CRH &= 0;
  // GPIOC->CRL |= 0x33333333UL; //Initialise C0 to C7
  // GPIOC->CRH |= 0x33333UL; //Initialise C8 to C12

  //Set Pin initial values
  GPIOC->BSRR = 0x1UL << 0;	 // C0 HIGH
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <main+0x9c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
  GPIOC->BSRR = 0x1UL << 1;	 // C1 HIGH
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <main+0x9c>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	611a      	str	r2, [r3, #16]
  GPIOC->BSRR = 0x1UL << 2;	 // C2 HIGH
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <main+0x9c>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	611a      	str	r2, [r3, #16]
  GPIOC->BRR = 0x1UL << 11;	 // C11 LOW
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <main+0x9c>)
 8000a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a12:	615a      	str	r2, [r3, #20]
  GPIOC->BSRR = 0x1UL << 12;   //C12 HIGH
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <main+0x9c>)
 8000a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a1a:	611a      	str	r2, [r3, #16]

  ScreenSetup();
 8000a1c:	f7ff fe2c 	bl	8000678 <ScreenSetup>

  // Check if this is required!
  InitLEDs();
 8000a20:	f7ff ff9c 	bl	800095c <InitLEDs>
  UpdateScreenTitles(PAGE_0);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fcff 	bl	8000428 <UpdateScreenTitles>
	// Timeout condition
//	if (timer_val >= TIMEOUT_10_SECONDS) {
//		current_page = PAGE_0; // set page back to PAGE_0 (main page)
//		__HAL_TIM_SET_COUNTER(&htim3, 0); // Reset the timer counter to 0
//	}
	  HAL_GPIO_TogglePin(BATT_OT_GPIO_Port, BATT_OT_Pin);
 8000a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <main+0xa0>)
 8000a30:	f001 f93c 	bl	8001cac <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000a34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a38:	f000 f9b6 	bl	8000da8 <HAL_Delay>


	// Check if message is available
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <main+0x98>)
 8000a40:	f000 fc36 	bl	80012b0 <HAL_CAN_GetRxFifoFillLevel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0ef      	beq.n	8000a2a <main+0x56>
	{
		// Populate CAN header and data variables (CAN_rx_header/data is updated respectively)
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <main+0xa4>)
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <main+0xa8>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <main+0x98>)
 8000a52:	f000 fb0c 	bl	800106e <HAL_CAN_GetRxMessage>
		uint16_t received_CAN_ID = (uint16_t) CAN_rx_header.StdId;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <main+0xa8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		 * The current_page is simply incremented by +1.
		 * if (current_page + 1 == NUM_PAGES) set current_page = 0
		 */

		/* Toggle LED that we received CAN message */
		HAL_GPIO_TogglePin(BMS_COMM_FLT_GPIO_Port, BMS_COMM_FLT_Pin);
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <main+0xa0>)
 8000a62:	f001 f923 	bl	8001cac <HAL_GPIO_TogglePin>
//		HAL_Delay(500);
		continue; // Loop again, skip the rest.
 8000a66:	bf00      	nop
	  HAL_GPIO_TogglePin(BATT_OT_GPIO_Port, BATT_OT_Pin);
 8000a68:	e7df      	b.n	8000a2a <main+0x56>
 8000a6a:	bf00      	nop
 8000a6c:	200000cc 	.word	0x200000cc
 8000a70:	40011000 	.word	0x40011000
 8000a74:	40010800 	.word	0x40010800
 8000a78:	20000110 	.word	0x20000110
 8000a7c:	200000f4 	.word	0x200000f4

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b090      	sub	sp, #64	; 0x40
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	2228      	movs	r2, #40	; 0x28
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 ff70 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ab6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f90d 	bl	8001ce0 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000acc:	f000 f819 	bl	8000b02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fb7a 	bl	80021e4 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000af6:	f000 f804 	bl	8000b02 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3740      	adds	r7, #64	; 0x40
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b06:	b672      	cpsid	i
}
 8000b08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_MspInit+0x40>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_MspInit+0x40>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_MspInit+0x40>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_MspInit+0x40>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_MspInit+0x40>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_MspInit+0x40>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f8eb 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ba6:	f000 fbaa 	bl	80012fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000cc 	.word	0x200000cc

08000bb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <MX_TIM3_Init+0x98>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000be4:	224f      	movs	r2, #79	; 0x4f
 8000be6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000c04:	f001 fc4a 	bl	800249c <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c0e:	f7ff ff78 	bl	8000b02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000c20:	f001 fc8b 	bl	800253a <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f7ff ff6a 	bl	8000b02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_TIM3_Init+0x94>)
 8000c3c:	f001 fe3c 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c46:	f7ff ff5c 	bl	8000b02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000118 	.word	0x20000118
 8000c58:	40000400 	.word	0x40000400

08000c5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10b      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40000400 	.word	0x40000400
 8000c94:	40021000 	.word	0x40021000

08000c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cbe:	f7ff ff79 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f001 fe5f 	bl	8002984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fe85 	bl	80009d4 <main>
  bx lr
 8000cca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000cd4:	08002be8 	.word	0x08002be8
  ldr r2, =_sbss
 8000cd8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000cdc:	20000164 	.word	0x20000164

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 fdfb 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	200f      	movs	r0, #15
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff ff04 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fe13 	bl	800195a <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 fddb 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000a4 	.word	0x200000a4
 8000d68:	200000ac 	.word	0x200000ac
 8000d6c:	200000a8 	.word	0x200000a8

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200000ac 	.word	0x200000ac
 8000d90:	20000160 	.word	0x20000160

08000d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000160 	.word	0x20000160

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000ac 	.word	0x200000ac

08000df0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0ed      	b.n	8000fde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fcda 	bl	80007c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e24:	f7ff ffb6 	bl	8000d94 <HAL_GetTick>
 8000e28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e2a:	e012      	b.n	8000e52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e2c:	f7ff ffb2 	bl	8000d94 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	d90b      	bls.n	8000e52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2205      	movs	r2, #5
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0c5      	b.n	8000fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0e5      	beq.n	8000e2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0202 	bic.w	r2, r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e70:	f7ff ff90 	bl	8000d94 <HAL_GetTick>
 8000e74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e76:	e012      	b.n	8000e9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e78:	f7ff ff8c 	bl	8000d94 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b0a      	cmp	r3, #10
 8000e84:	d90b      	bls.n	8000e9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2205      	movs	r2, #5
 8000e96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e09f      	b.n	8000fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e5      	bne.n	8000e78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7e1b      	ldrb	r3, [r3, #24]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7e5b      	ldrb	r3, [r3, #25]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d108      	bne.n	8000ef0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e007      	b.n	8000f00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e9b      	ldrb	r3, [r3, #26]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e007      	b.n	8000f2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0220 	bic.w	r2, r2, #32
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7edb      	ldrb	r3, [r3, #27]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0210 	bic.w	r2, r2, #16
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0210 	orr.w	r2, r2, #16
 8000f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7f1b      	ldrb	r3, [r3, #28]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d108      	bne.n	8000f6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0208 	orr.w	r2, r2, #8
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0208 	bic.w	r2, r2, #8
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7f5b      	ldrb	r3, [r3, #29]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0204 	orr.w	r2, r2, #4
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0204 	bic.w	r2, r2, #4
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	ea42 0103 	orr.w	r1, r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b084      	sub	sp, #16
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d12e      	bne.n	8001058 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001012:	f7ff febf 	bl	8000d94 <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001018:	e012      	b.n	8001040 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800101a:	f7ff febb 	bl	8000d94 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d90b      	bls.n	8001040 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e012      	b.n	8001066 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1e5      	bne.n	800101a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	e006      	b.n	8001066 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800106e:	b480      	push	{r7}
 8001070:	b087      	sub	sp, #28
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d003      	beq.n	8001092 <HAL_CAN_GetRxMessage+0x24>
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b02      	cmp	r3, #2
 800108e:	f040 8103 	bne.w	8001298 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10e      	bne.n	80010b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e0f7      	b.n	80012a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0e8      	b.n	80012a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	331b      	adds	r3, #27
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0204 	and.w	r2, r3, #4
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	331b      	adds	r3, #27
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4413      	add	r3, r2
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0d5b      	lsrs	r3, r3, #21
 8001102:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00b      	b.n	8001124 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	331b      	adds	r3, #27
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	331b      	adds	r3, #27
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0202 	and.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	331b      	adds	r3, #27
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2208      	movs	r2, #8
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	e00b      	b.n	8001172 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	331b      	adds	r3, #27
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 020f 	and.w	r2, r3, #15
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	331b      	adds	r3, #27
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	3304      	adds	r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	331b      	adds	r3, #27
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	3304      	adds	r3, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0a1a      	lsrs	r2, r3, #8
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0c1a      	lsrs	r2, r3, #16
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3302      	adds	r3, #2
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	4413      	add	r3, r2
 80011f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0e1a      	lsrs	r2, r3, #24
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3303      	adds	r3, #3
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3304      	adds	r3, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0a1a      	lsrs	r2, r3, #8
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3305      	adds	r3, #5
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0c1a      	lsrs	r2, r3, #16
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3306      	adds	r3, #6
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	0e1a      	lsrs	r2, r3, #24
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3307      	adds	r3, #7
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0220 	orr.w	r2, r2, #32
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e007      	b.n	8001294 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	e006      	b.n	80012a6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d002      	beq.n	80012d2 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d10f      	bne.n	80012f2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e005      	b.n	80012f2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b08a      	sub	sp, #40	; 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07c      	beq.n	800143e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d023      	beq.n	8001396 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f983 	bl	800166c <HAL_CAN_TxMailbox0CompleteCallback>
 8001366:	e016      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	e00c      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	e002      	b.n	8001396 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f986 	bl	80016a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d024      	beq.n	80013ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f962 	bl	800167e <HAL_CAN_TxMailbox1CompleteCallback>
 80013ba:	e016      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	e00c      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	e002      	b.n	80013ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f965 	bl	80016b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d024      	beq.n	800143e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f941 	bl	8001690 <HAL_CAN_TxMailbox2CompleteCallback>
 800140e:	e016      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
 8001422:	e00c      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	e002      	b.n	800143e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f944 	bl	80016c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2210      	movs	r2, #16
 8001460:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2208      	movs	r2, #8
 800147c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f933 	bl	80016ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f91b 	bl	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2210      	movs	r2, #16
 80014c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00b      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f913 	bl	800170e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f8fb 	bl	80016fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00b      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2210      	movs	r2, #16
 8001520:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8fc 	bl	8001720 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2208      	movs	r2, #8
 8001542:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8f4 	bl	8001732 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d07b      	beq.n	800164c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d072      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d043      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d03e      	beq.n	8001644 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015cc:	2b60      	cmp	r3, #96	; 0x60
 80015ce:	d02b      	beq.n	8001628 <HAL_CAN_IRQHandler+0x32a>
 80015d0:	2b60      	cmp	r3, #96	; 0x60
 80015d2:	d82e      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015d4:	2b50      	cmp	r3, #80	; 0x50
 80015d6:	d022      	beq.n	800161e <HAL_CAN_IRQHandler+0x320>
 80015d8:	2b50      	cmp	r3, #80	; 0x50
 80015da:	d82a      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015dc:	2b40      	cmp	r3, #64	; 0x40
 80015de:	d019      	beq.n	8001614 <HAL_CAN_IRQHandler+0x316>
 80015e0:	2b40      	cmp	r3, #64	; 0x40
 80015e2:	d826      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015e4:	2b30      	cmp	r3, #48	; 0x30
 80015e6:	d010      	beq.n	800160a <HAL_CAN_IRQHandler+0x30c>
 80015e8:	2b30      	cmp	r3, #48	; 0x30
 80015ea:	d822      	bhi.n	8001632 <HAL_CAN_IRQHandler+0x334>
 80015ec:	2b10      	cmp	r3, #16
 80015ee:	d002      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x2f8>
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d005      	beq.n	8001600 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015f4:	e01d      	b.n	8001632 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015fe:	e019      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001608:	e014      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f043 0320 	orr.w	r3, r3, #32
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001612:	e00f      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161c:	e00a      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001626:	e005      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001630:	e000      	b.n	8001634 <HAL_CAN_IRQHandler+0x336>
            break;
 8001632:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001642:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2204      	movs	r2, #4
 800164a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f870 	bl	8001744 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
	...

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <__NVIC_EnableIRQ+0x34>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff90 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff2d 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff42 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff35 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e169      	b.n	8001c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001988:	2201      	movs	r2, #1
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8158 	bne.w	8001c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a9a      	ldr	r2, [pc, #616]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05e      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019b0:	4a98      	ldr	r2, [pc, #608]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d875      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019b6:	4a98      	ldr	r2, [pc, #608]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d058      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019bc:	4a96      	ldr	r2, [pc, #600]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d86f      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019c2:	4a96      	ldr	r2, [pc, #600]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d052      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019c8:	4a94      	ldr	r2, [pc, #592]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d869      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ce:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d04c      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019d4:	4a92      	ldr	r2, [pc, #584]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d863      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019da:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d046      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019e0:	4a90      	ldr	r2, [pc, #576]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d85d      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d82a      	bhi.n	8001a40 <HAL_GPIO_Init+0xcc>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d859      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <HAL_GPIO_Init+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001a5b 	.word	0x08001a5b
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001aa3 	.word	0x08001aa3
 8001a10:	08001aa3 	.word	0x08001aa3
 8001a14:	08001aa3 	.word	0x08001aa3
 8001a18:	08001aa3 	.word	0x08001aa3
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001aa3 	.word	0x08001aa3
 8001a30:	08001aa3 	.word	0x08001aa3
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_GPIO_Init+0x2b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e024      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01f      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e01a      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e013      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          break;
 8001aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d801      	bhi.n	8001aae <HAL_GPIO_Init+0x13a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_Init+0x13e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d802      	bhi.n	8001ac0 <HAL_GPIO_Init+0x14c>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x152>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3b08      	subs	r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	210f      	movs	r1, #15
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80b1 	beq.w	8001c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af4:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <HAL_GPIO_Init+0x2c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1e8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <HAL_GPIO_Init+0x2c8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3d      	ldr	r2, [pc, #244]	; (8001c40 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1e0>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	492f      	ldr	r1, [pc, #188]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	492c      	ldr	r1, [pc, #176]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4928      	ldr	r1, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4922      	ldr	r1, [pc, #136]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	491e      	ldr	r1, [pc, #120]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4918      	ldr	r1, [pc, #96]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4914      	ldr	r1, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d021      	beq.n	8001c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e021      	b.n	8001c56 <HAL_GPIO_Init+0x2e2>
 8001c12:	bf00      	nop
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10220000 	.word	0x10220000
 8001c20:	10210000 	.word	0x10210000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f ae8e 	bne.w	8001988 <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	372c      	adds	r7, #44	; 0x2c
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43d9      	mvns	r1, r3
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	400b      	ands	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e272      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e24c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ffea 	bl	8000d94 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe ffe6 	bl	8000d94 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe ffd6 	bl	8000d94 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7fe ffd2 	bl	8000d94 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1ec      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe ff8b 	bl	8000d94 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe ff87 	bl	8000d94 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ff6a 	bl	8000d94 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe ff66 	bl	8000d94 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e180      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe ff4a 	bl	8000d94 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe ff46 	bl	8000d94 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e160      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 fa9c 	bl	8002460 <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe ff30 	bl	8000d94 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe ff2c 	bl	8000d94 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e146      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe feed 	bl	8000d94 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe fee9 	bl	8000d94 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e103      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b61      	ldr	r3, [pc, #388]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a60      	ldr	r2, [pc, #384]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a57      	ldr	r2, [pc, #348]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe fe9d 	bl	8000d94 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fe99 	bl	8000d94 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fe87 	bl	8000d94 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fe83 	bl	8000d94 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fe57 	bl	8000d94 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fe53 	bl	8000d94 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e06d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4921      	ldr	r1, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	491b      	ldr	r1, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fe27 	bl	8000d94 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fe23 	bl	8000d94 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e035      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fe10 	bl	8000d94 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fe0c 	bl	8000d94 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e026      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e01e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e019      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x500>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fd5e 	bl	8000d94 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fd5a 	bl	8000d94 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fcbc 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08002bbc 	.word	0x08002bbc
 80023b0:	200000a4 	.word	0x200000a4
 80023b4:	200000a8 	.word	0x200000a8

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e027      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	e027      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e004      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_RCC_GetSysClockFreq+0xa4>)
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	08002bcc 	.word	0x08002bcc
 8002458:	08002bdc 	.word	0x08002bdc
 800245c:	003d0900 	.word	0x003d0900

08002460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <RCC_Delay+0x34>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <RCC_Delay+0x38>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0a5b      	lsrs	r3, r3, #9
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800247c:	bf00      	nop
  }
  while (Delay --);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f9      	bne.n	800247c <RCC_Delay+0x1c>
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	200000a4 	.word	0x200000a4
 8002498:	10624dd3 	.word	0x10624dd3

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fbca 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 f8f4 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_TIM_ConfigClockSource+0x1c>
 8002552:	2302      	movs	r3, #2
 8002554:	e0b4      	b.n	80026c0 <HAL_TIM_ConfigClockSource+0x186>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002574:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	d03e      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xd4>
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	f200 8087 	bhi.w	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	f000 8086 	beq.w	80026ac <HAL_TIM_ConfigClockSource+0x172>
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d87f      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025a6:	2b70      	cmp	r3, #112	; 0x70
 80025a8:	d01a      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xa6>
 80025aa:	2b70      	cmp	r3, #112	; 0x70
 80025ac:	d87b      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	2b60      	cmp	r3, #96	; 0x60
 80025b0:	d050      	beq.n	8002654 <HAL_TIM_ConfigClockSource+0x11a>
 80025b2:	2b60      	cmp	r3, #96	; 0x60
 80025b4:	d877      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025b6:	2b50      	cmp	r3, #80	; 0x50
 80025b8:	d03c      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0xfa>
 80025ba:	2b50      	cmp	r3, #80	; 0x50
 80025bc:	d873      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d058      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0x13a>
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d86f      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025c6:	2b30      	cmp	r3, #48	; 0x30
 80025c8:	d064      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15a>
 80025ca:	2b30      	cmp	r3, #48	; 0x30
 80025cc:	d86b      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d060      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15a>
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d867      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d05c      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15a>
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d05a      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x15a>
 80025de:	e062      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025f0:	f000 f943 	bl	800287a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002602:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e04f      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	f000 f92c 	bl	800287a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002630:	609a      	str	r2, [r3, #8]
      break;
 8002632:	e03c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002640:	461a      	mov	r2, r3
 8002642:	f000 f8a3 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2150      	movs	r1, #80	; 0x50
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f8fa 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002652:	e02c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002660:	461a      	mov	r2, r3
 8002662:	f000 f8c1 	bl	80027e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2160      	movs	r1, #96	; 0x60
 800266c:	4618      	mov	r0, r3
 800266e:	f000 f8ea 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002672:	e01c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002680:	461a      	mov	r2, r3
 8002682:	f000 f883 	bl	800278c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f8da 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 8002692:	e00c      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f000 f8d1 	bl	8002846 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e003      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      break;
 80026aa:	e000      	b.n	80026ae <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a29      	ldr	r2, [pc, #164]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a26      	ldr	r2, [pc, #152]	; (8002784 <TIM_Base_SetConfig+0xbc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x30>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <TIM_Base_SetConfig+0xc0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1c      	ldr	r2, [pc, #112]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <TIM_Base_SetConfig+0xbc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0x62>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <TIM_Base_SetConfig+0xc0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <TIM_Base_SetConfig+0xb8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d103      	bne.n	8002770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	615a      	str	r2, [r3, #20]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40000400 	.word	0x40000400
 8002788:	40000800 	.word	0x40000800

0800278c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0201 	bic.w	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 030a 	bic.w	r3, r3, #10
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	621a      	str	r2, [r3, #32]
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	031b      	lsls	r3, r3, #12
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002824:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	621a      	str	r2, [r3, #32]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	f043 0307 	orr.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	021a      	lsls	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	431a      	orrs	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e046      	b.n	800295e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a16      	ldr	r2, [pc, #88]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00e      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d009      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10c      	bne.n	800294c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800

08002974 <memset>:
 8002974:	4603      	mov	r3, r0
 8002976:	4402      	add	r2, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <__libc_init_array>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	2600      	movs	r6, #0
 8002988:	4d0c      	ldr	r5, [pc, #48]	; (80029bc <__libc_init_array+0x38>)
 800298a:	4c0d      	ldr	r4, [pc, #52]	; (80029c0 <__libc_init_array+0x3c>)
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	42a6      	cmp	r6, r4
 8002992:	d109      	bne.n	80029a8 <__libc_init_array+0x24>
 8002994:	f000 f828 	bl	80029e8 <_init>
 8002998:	2600      	movs	r6, #0
 800299a:	4d0a      	ldr	r5, [pc, #40]	; (80029c4 <__libc_init_array+0x40>)
 800299c:	4c0a      	ldr	r4, [pc, #40]	; (80029c8 <__libc_init_array+0x44>)
 800299e:	1b64      	subs	r4, r4, r5
 80029a0:	10a4      	asrs	r4, r4, #2
 80029a2:	42a6      	cmp	r6, r4
 80029a4:	d105      	bne.n	80029b2 <__libc_init_array+0x2e>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ac:	4798      	blx	r3
 80029ae:	3601      	adds	r6, #1
 80029b0:	e7ee      	b.n	8002990 <__libc_init_array+0xc>
 80029b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b6:	4798      	blx	r3
 80029b8:	3601      	adds	r6, #1
 80029ba:	e7f2      	b.n	80029a2 <__libc_init_array+0x1e>
 80029bc:	08002be0 	.word	0x08002be0
 80029c0:	08002be0 	.word	0x08002be0
 80029c4:	08002be0 	.word	0x08002be0
 80029c8:	08002be4 	.word	0x08002be4

080029cc <memcpy>:
 80029cc:	440a      	add	r2, r1
 80029ce:	4291      	cmp	r1, r2
 80029d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80029d4:	d100      	bne.n	80029d8 <memcpy+0xc>
 80029d6:	4770      	bx	lr
 80029d8:	b510      	push	{r4, lr}
 80029da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029de:	4291      	cmp	r1, r2
 80029e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029e4:	d1f9      	bne.n	80029da <memcpy+0xe>
 80029e6:	bd10      	pop	{r4, pc}

080029e8 <_init>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	bf00      	nop
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr

080029f4 <_fini>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr
