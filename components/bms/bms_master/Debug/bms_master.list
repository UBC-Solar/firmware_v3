
bms_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000984c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08009a38  08009a38  00019a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a128  0800a128  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a128  0800a128  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001f0  0800a320  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800a320  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174b0  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003281  00000000  00000000  000376c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010d8  00000000  00000000  0003bb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c980  00000000  00000000  0003cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f82d  00000000  00000000  000595c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0830  00000000  00000000  00068df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00109625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c54  00000000  00000000  001096a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	08009a1c 	.word	0x08009a1c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	08009a1c 	.word	0x08009a1c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	d1ed      	bne.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__gesf2>:
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	e006      	b.n	80010d0 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__lesf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	e002      	b.n	80010d0 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__cmpsf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e0:	bf18      	it	ne
 80010e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010e6:	d011      	beq.n	800110c <__cmpsf2+0x40>
 80010e8:	b001      	add	sp, #4
 80010ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ee:	bf18      	it	ne
 80010f0:	ea90 0f01 	teqne	r0, r1
 80010f4:	bf58      	it	pl
 80010f6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010fa:	bf88      	it	hi
 80010fc:	17c8      	asrhi	r0, r1, #31
 80010fe:	bf38      	it	cc
 8001100:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001104:	bf18      	it	ne
 8001106:	f040 0001 	orrne.w	r0, r0, #1
 800110a:	4770      	bx	lr
 800110c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001110:	d102      	bne.n	8001118 <__cmpsf2+0x4c>
 8001112:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001116:	d105      	bne.n	8001124 <__cmpsf2+0x58>
 8001118:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800111c:	d1e4      	bne.n	80010e8 <__cmpsf2+0x1c>
 800111e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001122:	d0e1      	beq.n	80010e8 <__cmpsf2+0x1c>
 8001124:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop

0800112c <__aeabi_cfrcmple>:
 800112c:	4684      	mov	ip, r0
 800112e:	4608      	mov	r0, r1
 8001130:	4661      	mov	r1, ip
 8001132:	e7ff      	b.n	8001134 <__aeabi_cfcmpeq>

08001134 <__aeabi_cfcmpeq>:
 8001134:	b50f      	push	{r0, r1, r2, r3, lr}
 8001136:	f7ff ffc9 	bl	80010cc <__cmpsf2>
 800113a:	2800      	cmp	r0, #0
 800113c:	bf48      	it	mi
 800113e:	f110 0f00 	cmnmi.w	r0, #0
 8001142:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001144 <__aeabi_fcmpeq>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff fff4 	bl	8001134 <__aeabi_cfcmpeq>
 800114c:	bf0c      	ite	eq
 800114e:	2001      	moveq	r0, #1
 8001150:	2000      	movne	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmplt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffea 	bl	8001134 <__aeabi_cfcmpeq>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_fcmple>:
 800116c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001170:	f7ff ffe0 	bl	8001134 <__aeabi_cfcmpeq>
 8001174:	bf94      	ite	ls
 8001176:	2001      	movls	r0, #1
 8001178:	2000      	movhi	r0, #0
 800117a:	f85d fb08 	ldr.w	pc, [sp], #8
 800117e:	bf00      	nop

08001180 <__aeabi_fcmpge>:
 8001180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001184:	f7ff ffd2 	bl	800112c <__aeabi_cfrcmple>
 8001188:	bf94      	ite	ls
 800118a:	2001      	movls	r0, #1
 800118c:	2000      	movhi	r0, #0
 800118e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001192:	bf00      	nop

08001194 <__aeabi_fcmpgt>:
 8001194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001198:	f7ff ffc8 	bl	800112c <__aeabi_cfrcmple>
 800119c:	bf34      	ite	cc
 800119e:	2001      	movcc	r0, #1
 80011a0:	2000      	movcs	r0, #0
 80011a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a6:	bf00      	nop

080011a8 <__aeabi_fcmpun>:
 80011a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011b4:	d102      	bne.n	80011bc <__aeabi_fcmpun+0x14>
 80011b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011ba:	d108      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011c0:	d102      	bne.n	80011c8 <__aeabi_fcmpun+0x20>
 80011c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011c6:	d102      	bne.n	80011ce <__aeabi_fcmpun+0x26>
 80011c8:	f04f 0000 	mov.w	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0001 	mov.w	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <ANA_analyzeModules>:
/**
 * @brief Determines voltage- and temperature-based state of each module in the pack
 *
 * @param[in/out] pack Pointer to the pack data structure to update module statuses in
 */
void ANA_analyzeModules(BTM_PackData_t * pack) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    uint16_t voltage = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	82fb      	strh	r3, [r7, #22]
    float temp = 0.0;
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
    int module_status = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
    struct BTM_module * module_p;

    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e035      	b.n	800125c <ANA_analyzeModules+0x88>
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	e02c      	b.n	8001250 <ANA_analyzeModules+0x7c>
            module_p = &(pack->stack[stack_num].module[module_num]);
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	21e8      	movs	r1, #232	; 0xe8
 8001204:	fb01 f202 	mul.w	r2, r1, r2
 8001208:	4413      	add	r3, r2
 800120a:	3310      	adds	r3, #16
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	60bb      	str	r3, [r7, #8]

            // If module is enabled...
            if (module_p->enable)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d016      	beq.n	800124a <ANA_analyzeModules+0x76>
            {
                // Get key readings
                voltage = module_p->voltage;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	885b      	ldrh	r3, [r3, #2]
 8001220:	82fb      	strh	r3, [r7, #22]
                temp = module_p->temperature;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	613b      	str	r3, [r7, #16]
                // Get existing status
                module_status = module_p->status;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	60fb      	str	r3, [r7, #12]
                // Update module status
                module_status = findModuleVoltState(module_status, voltage);
 800122e:	8afb      	ldrh	r3, [r7, #22]
 8001230:	4619      	mov	r1, r3
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f819 	bl	800126a <findModuleVoltState>
 8001238:	60f8      	str	r0, [r7, #12]
                module_status = findModuleTempState(module_status, temp);
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f873 	bl	8001328 <findModuleTempState>
 8001242:	60f8      	str	r0, [r7, #12]
                module_p->status = module_status;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	3301      	adds	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b11      	cmp	r3, #17
 8001254:	ddcf      	ble.n	80011f6 <ANA_analyzeModules+0x22>
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d9c6      	bls.n	80011f0 <ANA_analyzeModules+0x1c>
            }
        } // end inner for loop
    } // end outer for loop

    return;
 8001262:	bf00      	nop
}
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <findModuleVoltState>:

// Helper function for ANA_analyzeModules()
int findModuleVoltState(int status, uint16_t voltage) {
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]
    // Some conditionals here have no else because faults don't clear

    if (voltage >= OV_FAULT_VOLTAGE) {
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	f24a 4273 	movw	r2, #42099	; 0xa473
 800127c:	4293      	cmp	r3, r2
 800127e:	d903      	bls.n	8001288 <findModuleVoltState+0x1e>
        status |= BMS_FAULT_OV; // Set FAULT_OV bit
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	607b      	str	r3, [r7, #4]
    }

    if (voltage >= HLIM_TRIP_VOLTAGE) {
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800128e:	4293      	cmp	r3, r2
 8001290:	d904      	bls.n	800129c <findModuleVoltState+0x32>
        status |= BMS_TRIP_HLIM; // Set TRIP_HLIM bit
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	e003      	b.n	80012a4 <findModuleVoltState+0x3a>
    } else {
        status &= ~BMS_TRIP_HLIM; // Clear TRIP_HLIM bit
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012a2:	607b      	str	r3, [r7, #4]
    }

    if (voltage >= HIGH_WARNING_VOLTAGE) {
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	f24a 221b 	movw	r2, #41499	; 0xa21b
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d904      	bls.n	80012b8 <findModuleVoltState+0x4e>
        status |= BMS_WARNING_HIGH_V; // Set WARNING_HIGH_V bit
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e003      	b.n	80012c0 <findModuleVoltState+0x56>
    } else {
        status &= ~BMS_WARNING_HIGH_V; // Clear WARNING_HIGH_V bit
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012be:	607b      	str	r3, [r7, #4]
    }

    if (voltage <= SHORT_FAULT_VOLTAGE) {
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80012c6:	d803      	bhi.n	80012d0 <findModuleVoltState+0x66>
        status |= BMS_FAULT_NO_VOLT; // Set FAULT_NO_VOLT bit
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	607b      	str	r3, [r7, #4]
    }

    if (voltage <= UV_FAULT_VOLTAGE) {
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	f646 1278 	movw	r2, #27000	; 0x6978
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d803      	bhi.n	80012e2 <findModuleVoltState+0x78>
        status |= BMS_FAULT_UV; // Set BMS_FAULT_UV
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	607b      	str	r3, [r7, #4]
    }

    if (voltage <= LLIM_TRIP_VOLTAGE) {
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	f646 12dc 	movw	r2, #27100	; 0x69dc
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d804      	bhi.n	80012f6 <findModuleVoltState+0x8c>
        status |= BMS_TRIP_LLIM; // Set TRIP_LLIM bit
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	e003      	b.n	80012fe <findModuleVoltState+0x94>
    } else {
        status &= ~BMS_TRIP_LLIM; // Clear TRIP_LLIM bit
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012fc:	607b      	str	r3, [r7, #4]
    }

    if (voltage <= LOW_WARNING_VOLTAGE) {
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8001304:	4293      	cmp	r3, r2
 8001306:	d804      	bhi.n	8001312 <findModuleVoltState+0xa8>
        status |= BMS_WARNING_LOW_V; // Set WARNING_LOW_V bit
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	e003      	b.n	800131a <findModuleVoltState+0xb0>
    } else {
        status &= ~BMS_WARNING_LOW_V; // Clear WARNING_LOW_V bit
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001318:	607b      	str	r3, [r7, #4]
    }

    return status;
 800131a:	687b      	ldr	r3, [r7, #4]
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
	...

08001328 <findModuleTempState>:


// Helper function for ANA_analyzeModules()
int findModuleTempState(int status, float temp) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    // Some conditionals here have no else because faults don't clear

    if (temp >= HIGH_READ_LIMIT_TEMP || temp <= LOW_READ_LIMIT_TEMP) {
 8001332:	4929      	ldr	r1, [pc, #164]	; (80013d8 <findModuleTempState+0xb0>)
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f7ff ff23 	bl	8001180 <__aeabi_fcmpge>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d107      	bne.n	8001350 <findModuleTempState+0x28>
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f7ff ff11 	bl	800116c <__aeabi_fcmple>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <findModuleTempState+0x30>
        status |= BMS_FAULT_TEMP_RANGE; // Set FAULT_TEMP_RANGE bit
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001356:	607b      	str	r3, [r7, #4]
    }

    if (temp >= OT_FAULT_TEMP) {
 8001358:	4920      	ldr	r1, [pc, #128]	; (80013dc <findModuleTempState+0xb4>)
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f7ff ff10 	bl	8001180 <__aeabi_fcmpge>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <findModuleTempState+0x46>
        status |= BMS_FAULT_OT; // Set FAULT_OT bit
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	607b      	str	r3, [r7, #4]
    }

    if (temp >= CHARGE_OT_TEMP) {
 800136e:	491c      	ldr	r1, [pc, #112]	; (80013e0 <findModuleTempState+0xb8>)
 8001370:	6838      	ldr	r0, [r7, #0]
 8001372:	f7ff ff05 	bl	8001180 <__aeabi_fcmpge>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <findModuleTempState+0x5e>
        status |= BMS_TRIP_CHARGE_OT; // Set TRIP_CHARGE_OT bit
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	e003      	b.n	800138e <findModuleTempState+0x66>
    } else {
        status &= ~BMS_TRIP_CHARGE_OT; // Clear TRIP_CHARGE_OT bit
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800138c:	607b      	str	r3, [r7, #4]
    }

    if (temp >= HIGH_WARNING_TEMP) {
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <findModuleTempState+0xb8>)
 8001390:	6838      	ldr	r0, [r7, #0]
 8001392:	f7ff fef5 	bl	8001180 <__aeabi_fcmpge>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <findModuleTempState+0x7e>
        status |= BMS_WARNING_HIGH_T; // Set WARNING_HIGH_T bit
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	e003      	b.n	80013ae <findModuleTempState+0x86>
    } else {
        status &= ~BMS_WARNING_HIGH_T; // Clear WARNING_HIGH_T bit
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013ac:	607b      	str	r3, [r7, #4]
    }

    if (temp <= LOW_WARNING_TEMP) {
 80013ae:	490d      	ldr	r1, [pc, #52]	; (80013e4 <findModuleTempState+0xbc>)
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f7ff fedb 	bl	800116c <__aeabi_fcmple>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <findModuleTempState+0x9e>
        status |= BMS_WARNING_LOW_T; // Set WARNING_LOW_T bit
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	e003      	b.n	80013ce <findModuleTempState+0xa6>
    } else {
        status &= ~BMS_WARNING_LOW_T; // Clear WARNING_LOW_T bit
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013cc:	607b      	str	r3, [r7, #4]
    }

    return status;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	43160000 	.word	0x43160000
 80013dc:	42820000 	.word	0x42820000
 80013e0:	42340000 	.word	0x42340000
 80013e4:	41200000 	.word	0x41200000

080013e8 <ANA_mergeModuleStatusCodes>:
 * @brief Generates a single BMS status code as an accumulation of all enabled modules' statuses
 *
 * @param[in] pack Pack data structure to read module statuses from
 * @return status code as a (32-bit) integer
 */
int ANA_mergeModuleStatusCodes(BTM_PackData_t * pack) {
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
    int status_result = 0; // Start with a clean code
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
    struct BTM_module * module_p;

    // Just OR together status codes from all enabled modules
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	e023      	b.n	8001442 <ANA_mergeModuleStatusCodes+0x5a>
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e01a      	b.n	8001436 <ANA_mergeModuleStatusCodes+0x4e>
            module_p = &(pack->stack[stack_num].module[module_num]);
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	21e8      	movs	r1, #232	; 0xe8
 800140e:	fb01 f202 	mul.w	r2, r1, r2
 8001412:	4413      	add	r3, r2
 8001414:	3310      	adds	r3, #16
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	3304      	adds	r3, #4
 800141c:	60bb      	str	r3, [r7, #8]
            if(module_p->enable)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <ANA_mergeModuleStatusCodes+0x48>
            {
                status_result |= module_p->status;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2b11      	cmp	r3, #17
 800143a:	dde1      	ble.n	8001400 <ANA_mergeModuleStatusCodes+0x18>
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	3301      	adds	r3, #1
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d9d8      	bls.n	80013fa <ANA_mergeModuleStatusCodes+0x12>
            }
        }
    }

    return status_result;
 8001448:	697b      	ldr	r3, [r7, #20]
}
 800144a:	4618      	mov	r0, r3
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <ANA_findHighestModuleTemp>:
 * @brief Finds the value of the highest module temperature in the battery pack
 *
 * @param pack Data pack to search for highest module temperature
 * @return Floating point value in degrees C of the hottest module's temperature
 */
float ANA_findHighestModuleTemp(BTM_PackData_t * pack) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    float temperature = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
    float max_temperature = 0;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    struct BTM_module * module_p;

    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e02a      	b.n	80014c4 <ANA_findHighestModuleTemp+0x70>
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e021      	b.n	80014b8 <ANA_findHighestModuleTemp+0x64>
            module_p = &(pack->stack[stack_num].module[module_num]);
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	21e8      	movs	r1, #232	; 0xe8
 8001482:	fb01 f202 	mul.w	r2, r1, r2
 8001486:	4413      	add	r3, r2
 8001488:	3310      	adds	r3, #16
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	60fb      	str	r3, [r7, #12]

            // If module is enabled...
            if (module_p->enable)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <ANA_findHighestModuleTemp+0x5e>
            {
                temperature = module_p->temperature;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	613b      	str	r3, [r7, #16]
                if(temperature > max_temperature)
 80014a0:	69f9      	ldr	r1, [r7, #28]
 80014a2:	6938      	ldr	r0, [r7, #16]
 80014a4:	f7ff fe76 	bl	8001194 <__aeabi_fcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <ANA_findHighestModuleTemp+0x5e>
                    max_temperature = temperature;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	61fb      	str	r3, [r7, #28]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b11      	cmp	r3, #17
 80014bc:	ddda      	ble.n	8001474 <ANA_findHighestModuleTemp+0x20>
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++) {
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d9d1      	bls.n	800146e <ANA_findHighestModuleTemp+0x1a>
            }
        }
    }

    return max_temperature;
 80014ca:	69fb      	ldr	r3, [r7, #28]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <BTM_BAL_settings>:
 * @param[out] dch_setting_pack The discharge settings for the entire pack.
*/
void BTM_BAL_settings(
	BTM_PackData_t* pack,
	BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b090      	sub	sp, #64	; 0x40
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	466b      	mov	r3, sp
 80014e0:	461d      	mov	r5, r3
	const int size = 36; // size of the pack_modules array (36 modules)
 80014e2:	2324      	movs	r3, #36	; 0x24
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24

	// PROBLEM (fixed): Vth and Vtol had 0x prefixes before - that's for hex not binary. 0b for binary.
	uint16_t Vth = 40000; //threshold voltage to start the balancing at (multiplied by 10^4 to match the format in the pack)
 80014e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80014ea:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t Vtol = 500; //tolerance voltage through which cells are counted as balanced
 80014ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014f0:	843b      	strh	r3, [r7, #32]
	uint16_t pack_modules[size]; // Array to store all cell voltages
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b01      	subs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f04f 0400 	mov.w	r4, #0
 8001508:	0114      	lsls	r4, r2, #4
 800150a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800150e:	010b      	lsls	r3, r1, #4
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	0114      	lsls	r4, r2, #4
 8001522:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8001526:	010b      	lsls	r3, r1, #4
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	3301      	adds	r3, #1
 800152e:	3307      	adds	r3, #7
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	ebad 0d03 	sub.w	sp, sp, r3
 8001538:	ab02      	add	r3, sp, #8
 800153a:	3301      	adds	r3, #1
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
	uint16_t Vmin;		// minimum voltage in the pack
	int Vmin_loc;		// location of the minimum voltage in the array
	int pack_modules_en[size]; // array to store modules' enable flags consistent with the order of indices in pack_modules array
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3b01      	subs	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f04f 0400 	mov.w	r4, #0
 8001558:	0154      	lsls	r4, r2, #5
 800155a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800155e:	014b      	lsls	r3, r1, #5
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	f04f 0400 	mov.w	r4, #0
 8001570:	0154      	lsls	r4, r2, #5
 8001572:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001576:	014b      	lsls	r3, r1, #5
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	3303      	adds	r3, #3
 800157e:	3307      	adds	r3, #7
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	ebad 0d03 	sub.w	sp, sp, r3
 8001588:	ab02      	add	r3, sp, #8
 800158a:	3303      	adds	r3, #3
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	613b      	str	r3, [r7, #16]
	
	// Storing all cell voltages from the 2 stacks:
	for(int module_num = 0; module_num < 18; module_num++) 
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
 8001596:	e01d      	b.n	80015d4 <BTM_BAL_settings+0x100>
	{
		pack_modules[module_num] = pack->stack[0].module[module_num].voltage;
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3316      	adds	r3, #22
 80015a8:	8819      	ldrh	r1, [r3, #0]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pack_modules_en[module_num] = pack->stack[0].module[module_num].enable;
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3314      	adds	r3, #20
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int module_num = 0; module_num < 18; module_num++) 
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	3301      	adds	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	ddde      	ble.n	8001598 <BTM_BAL_settings+0xc4>
	}
	
	for(int module_num = 18; module_num < 36; module_num++)
 80015da:	2312      	movs	r3, #18
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015de:	e021      	b.n	8001624 <BTM_BAL_settings+0x150>
	{
		pack_modules[module_num] = pack->stack[1].module[module_num-18].voltage;
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	f1a3 0212 	sub.w	r2, r3, #18
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	33fe      	adds	r3, #254	; 0xfe
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		pack_modules_en[module_num] = pack->stack[1].module[module_num-18].enable;
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	f1a3 0212 	sub.w	r2, r3, #18
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	33fc      	adds	r3, #252	; 0xfc
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int module_num = 18; module_num < 36; module_num++)
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	3301      	adds	r3, #1
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	2b23      	cmp	r3, #35	; 0x23
 8001628:	ddda      	ble.n	80015e0 <BTM_BAL_settings+0x10c>
	}
	
	
	min_val(&Vmin, &Vmin_loc, pack_modules, size, pack_modules_en); // This function is written at the end of this file
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f107 0108 	add.w	r1, r7, #8
 8001632:	f107 000e 	add.w	r0, r7, #14
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	f000 f88e 	bl	800175a <min_val>
	
	
	// discharge all modules that are above the threshold voltage if any cell is below the threshold
	if (Vmin < Vth) { 
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001642:	429a      	cmp	r2, r3
 8001644:	d940      	bls.n	80016c8 <BTM_BAL_settings+0x1f4>
		
		for(int i = 0; i < size; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
 800164a:	e034      	b.n	80016b6 <BTM_BAL_settings+0x1e2>
			if(pack_modules_en[i]) {
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02b      	beq.n	80016b0 <BTM_BAL_settings+0x1dc>
				if(pack_modules[i] > Vth) {
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800165c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001660:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001662:	429a      	cmp	r2, r3
 8001664:	d212      	bcs.n	800168c <BTM_BAL_settings+0x1b8>
					// turn on the corresponding s pins
					if (i < 18)
 8001666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001668:	2b11      	cmp	r3, #17
 800166a:	dc05      	bgt.n	8001678 <BTM_BAL_settings+0x1a4>
						dch_setting_pack->stack[0].module_dch[i] = DISCHARGE_ON;
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	4413      	add	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e01b      	b.n	80016b0 <BTM_BAL_settings+0x1dc>
					else if (i < 36)
 8001678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167a:	2b23      	cmp	r3, #35	; 0x23
 800167c:	dc18      	bgt.n	80016b0 <BTM_BAL_settings+0x1dc>
						dch_setting_pack->stack[1].module_dch[i-18] = DISCHARGE_ON; 
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	3b12      	subs	r3, #18
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	2201      	movs	r2, #1
 8001688:	749a      	strb	r2, [r3, #18]
 800168a:	e011      	b.n	80016b0 <BTM_BAL_settings+0x1dc>
				}
				
				else {
					if (i < 18)
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	2b11      	cmp	r3, #17
 8001690:	dc05      	bgt.n	800169e <BTM_BAL_settings+0x1ca>
						dch_setting_pack->stack[0].module_dch[i] = DISCHARGE_OFF;
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e008      	b.n	80016b0 <BTM_BAL_settings+0x1dc>
					else if (i < 36)
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	2b23      	cmp	r3, #35	; 0x23
 80016a2:	dc05      	bgt.n	80016b0 <BTM_BAL_settings+0x1dc>
						dch_setting_pack->stack[1].module_dch[i-18] = DISCHARGE_OFF;
 80016a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a6:	3b12      	subs	r3, #18
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	749a      	strb	r2, [r3, #18]
		for(int i = 0; i < size; i++) {
 80016b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b2:	3301      	adds	r3, #1
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
 80016b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbc6      	blt.n	800164c <BTM_BAL_settings+0x178>
				}
			}
		}
		// Call BTM_BAL_setDischarge to send the settings to the configuration register
		BTM_BAL_setDischarge(pack, dch_setting_pack);
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 fafc 	bl	8002cbe <BTM_BAL_setDischarge>
 80016c6:	e043      	b.n	8001750 <BTM_BAL_settings+0x27c>
	}
	
	// Otherwise, balance to the lowest cell voltage
	else {
		
		for(int i = 0; i < size; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
 80016cc:	e038      	b.n	8001740 <BTM_BAL_settings+0x26c>
			if(pack_modules_en[i]) {
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d02f      	beq.n	800173a <BTM_BAL_settings+0x266>
				if(pack_modules[i] > Vmin + Vtol) {
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016e2:	461a      	mov	r2, r3
 80016e4:	89fb      	ldrh	r3, [r7, #14]
 80016e6:	4619      	mov	r1, r3
 80016e8:	8c3b      	ldrh	r3, [r7, #32]
 80016ea:	440b      	add	r3, r1
 80016ec:	429a      	cmp	r2, r3
 80016ee:	dd12      	ble.n	8001716 <BTM_BAL_settings+0x242>
					// turn on the corresponding s 
					if (i < 18)
 80016f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	dc05      	bgt.n	8001702 <BTM_BAL_settings+0x22e>
						dch_setting_pack->stack[0].module_dch[i] = DISCHARGE_ON;
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fa:	4413      	add	r3, r2
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e01b      	b.n	800173a <BTM_BAL_settings+0x266>
					else if (i < 36)
 8001702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001704:	2b23      	cmp	r3, #35	; 0x23
 8001706:	dc18      	bgt.n	800173a <BTM_BAL_settings+0x266>
						dch_setting_pack->stack[1].module_dch[i-18] = DISCHARGE_ON; 
 8001708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170a:	3b12      	subs	r3, #18
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
 8001710:	2201      	movs	r2, #1
 8001712:	749a      	strb	r2, [r3, #18]
 8001714:	e011      	b.n	800173a <BTM_BAL_settings+0x266>
				}
				
				else {
					if (i < 18)
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	2b11      	cmp	r3, #17
 800171a:	dc05      	bgt.n	8001728 <BTM_BAL_settings+0x254>
						dch_setting_pack->stack[0].module_dch[i] = DISCHARGE_OFF;
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	4413      	add	r3, r2
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e008      	b.n	800173a <BTM_BAL_settings+0x266>
					else if (i < 36)
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	2b23      	cmp	r3, #35	; 0x23
 800172c:	dc05      	bgt.n	800173a <BTM_BAL_settings+0x266>
						dch_setting_pack->stack[1].module_dch[i-18] = DISCHARGE_OFF;
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	3b12      	subs	r3, #18
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	2200      	movs	r2, #0
 8001738:	749a      	strb	r2, [r3, #18]
		for(int i = 0; i < size; i++) {
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	3301      	adds	r3, #1
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
 8001740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	429a      	cmp	r2, r3
 8001746:	dbc2      	blt.n	80016ce <BTM_BAL_settings+0x1fa>
				}
			}
		}
		// Call BTM_BAL_setDischarge to send the settings to the configuration register
		BTM_BAL_setDischarge(pack, dch_setting_pack);
 8001748:	6839      	ldr	r1, [r7, #0]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f001 fab7 	bl	8002cbe <BTM_BAL_setDischarge>
 8001750:	46ad      	mov	sp, r5
	}

}
 8001752:	bf00      	nop
 8001754:	3738      	adds	r7, #56	; 0x38
 8001756:	46bd      	mov	sp, r7
 8001758:	bdb0      	pop	{r4, r5, r7, pc}

0800175a <min_val>:
 * @param[in/out] loc, pointer that gets the address and outputs the location of the minimum value
 * @param[in] arr, the array we want to extract the minimum value from
 * @param[in] size, the size of the array
 * @param[in] pack_modules_en, enable flag to check which modules are enabled
*/	
void min_val(uint16_t* val, int* loc, uint16_t arr[], int size, int enable[]) {
 800175a:	b480      	push	{r7}
 800175c:	b089      	sub	sp, #36	; 0x24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	603b      	str	r3, [r7, #0]
	int temp_loc = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
	uint16_t temp_val = arr[0]; // the first element of the array is the first point of comparison and will change if another element is smaller
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	837b      	strh	r3, [r7, #26]
	for (int i = 1; i < size; i++) {
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e019      	b.n	80017ac <min_val+0x52>
		if(arr[i] < temp_val) {
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	8b7a      	ldrh	r2, [r7, #26]
 8001784:	429a      	cmp	r2, r3
 8001786:	d90e      	bls.n	80017a6 <min_val+0x4c>
			if(enable[i]) // only enabled modules are considered (since we're using 32 of the 36 modules)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <min_val+0x4c>
			{ 
				temp_val = arr[i];
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	837b      	strh	r3, [r7, #26]
				temp_loc = i;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < size; i++) {
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbe1      	blt.n	8001778 <min_val+0x1e>
			}
		}
	}
	*val = temp_val;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8b7a      	ldrh	r2, [r7, #26]
 80017b8:	801a      	strh	r2, [r3, #0]
	*loc = temp_loc;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	601a      	str	r2, [r3, #0]
	return;
 80017c0:	bf00      	nop
}
 80017c2:	3724      	adds	r7, #36	; 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <CONT_init>:
 */

#include "control.h"

void CONT_init()
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
    CONT_BAL_state = CONT_INACTIVE;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <CONT_init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    CONT_COM_state = CONT_INACTIVE;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <CONT_init+0x68>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
    CONT_FLT_state = CONT_INACTIVE;
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <CONT_init+0x6c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
    CONT_HLIM_state = CONT_INACTIVE;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <CONT_init+0x70>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
    CONT_LLIM_state = CONT_INACTIVE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <CONT_init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
    CONT_OT_state = CONT_INACTIVE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <CONT_init+0x78>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]

    CONT_BAL_switch(CONT_INACTIVE);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f829 	bl	800184c <CONT_BAL_switch>
    CONT_COM_switch(CONT_INACTIVE);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f83c 	bl	8001878 <CONT_COM_switch>
    CONT_FLT_switch(CONT_INACTIVE);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f84f 	bl	80018a4 <CONT_FLT_switch>
    CONT_HLIM_switch(CONT_INACTIVE);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f862 	bl	80018d0 <CONT_HLIM_switch>
    CONT_LLIM_switch(CONT_INACTIVE);
 800180c:	2000      	movs	r0, #0
 800180e:	f000 f875 	bl	80018fc <CONT_LLIM_switch>
    CONT_OT_switch(CONT_INACTIVE);
 8001812:	2000      	movs	r0, #0
 8001814:	f000 f888 	bl	8001928 <CONT_OT_switch>

    CONT_FAN_PWM_set(0);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f89b 	bl	8001954 <CONT_FAN_PWM_set>
    HAL_TIM_PWM_Start(CONT_timer_handle, CONT_TIM_CHANNEL);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <CONT_init+0x7c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2108      	movs	r1, #8
 8001824:	4618      	mov	r0, r3
 8001826:	f004 fcfd 	bl	8006224 <HAL_TIM_PWM_Start>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	2000022f 	.word	0x2000022f
 8001834:	20000224 	.word	0x20000224
 8001838:	2000022e 	.word	0x2000022e
 800183c:	2000022d 	.word	0x2000022d
 8001840:	20000230 	.word	0x20000230
 8001844:	2000022c 	.word	0x2000022c
 8001848:	20000228 	.word	0x20000228

0800184c <CONT_BAL_switch>:

void CONT_BAL_switch(CONT_signal_state_t new_state)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_BAL_PORT, CONT_BAL_PIN, new_state ^ CONT_BAL_POLARITY);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	461a      	mov	r2, r3
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <CONT_BAL_switch+0x24>)
 800185e:	f003 fa21 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_BAL_state = new_state;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <CONT_BAL_switch+0x28>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	7013      	strb	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010800 	.word	0x40010800
 8001874:	2000022f 	.word	0x2000022f

08001878 <CONT_COM_switch>:

void CONT_COM_switch(CONT_signal_state_t new_state)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_COM_PORT, CONT_COM_PIN, new_state ^ CONT_COM_POLARITY);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	461a      	mov	r2, r3
 8001886:	2102      	movs	r1, #2
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <CONT_COM_switch+0x24>)
 800188a:	f003 fa0b 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_COM_state = new_state;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <CONT_COM_switch+0x28>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	7013      	strb	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	20000224 	.word	0x20000224

080018a4 <CONT_FLT_switch>:

void CONT_FLT_switch(CONT_signal_state_t new_state)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_FLT_PORT, CONT_FLT_PIN, new_state ^ CONT_FLT_POLARITY);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	461a      	mov	r2, r3
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <CONT_FLT_switch+0x24>)
 80018b6:	f003 f9f5 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_FLT_state = new_state;
 80018ba:	4a04      	ldr	r2, [pc, #16]	; (80018cc <CONT_FLT_switch+0x28>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	7013      	strb	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40010800 	.word	0x40010800
 80018cc:	2000022e 	.word	0x2000022e

080018d0 <CONT_HLIM_switch>:

void CONT_HLIM_switch(CONT_signal_state_t new_state)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_HLIM_PORT, CONT_HLIM_PIN, new_state ^ CONT_HLIM_POLARITY);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	461a      	mov	r2, r3
 80018de:	2120      	movs	r1, #32
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <CONT_HLIM_switch+0x24>)
 80018e2:	f003 f9df 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_HLIM_state = new_state;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <CONT_HLIM_switch+0x28>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	7013      	strb	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40011000 	.word	0x40011000
 80018f8:	2000022d 	.word	0x2000022d

080018fc <CONT_LLIM_switch>:

void CONT_LLIM_switch(CONT_signal_state_t new_state)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_LLIM_PORT, CONT_LLIM_PIN, new_state ^ CONT_LLIM_POLARITY);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	461a      	mov	r2, r3
 800190a:	2110      	movs	r1, #16
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <CONT_LLIM_switch+0x24>)
 800190e:	f003 f9c9 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_LLIM_state = new_state;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <CONT_LLIM_switch+0x28>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	7013      	strb	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40011000 	.word	0x40011000
 8001924:	20000230 	.word	0x20000230

08001928 <CONT_OT_switch>:

void CONT_OT_switch(CONT_signal_state_t new_state)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CONT_OT_PORT, CONT_OT_PIN, new_state ^ CONT_OT_POLARITY);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	461a      	mov	r2, r3
 8001936:	2120      	movs	r1, #32
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <CONT_OT_switch+0x24>)
 800193a:	f003 f9b3 	bl	8004ca4 <HAL_GPIO_WritePin>
    CONT_OT_state = new_state;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <CONT_OT_switch+0x28>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	7013      	strb	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010800 	.word	0x40010800
 8001950:	2000022c 	.word	0x2000022c

08001954 <CONT_FAN_PWM_set>:
 * A "correct" timer setup is at least pretty close (within +-0.5%)
 *
 * @param pwm_val The duty cycle of the PWM. Must be in range [0,100].
 */
void CONT_FAN_PWM_set(unsigned int pwm_val)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    CONT_FAN_PWM_percent = pwm_val;
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <CONT_FAN_PWM_set+0x38>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
    pwm_val = (pwm_val * PWM_DIVISIONS) / 100;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <CONT_FAN_PWM_set+0x3c>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(CONT_timer_handle, CONT_TIM_CHANNEL, pwm_val);
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <CONT_FAN_PWM_set+0x40>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000234 	.word	0x20000234
 8001990:	51eb851f 	.word	0x51eb851f
 8001994:	20000228 	.word	0x20000228

08001998 <CONT_fanPwmFromTemp>:
 * TEMP_HYSTERESIS degrees below FAN_OFF_TEMP.
 *
 * @param[in] temp Temperature to use in calculation
 * @return The duty cycle percentage for fan PWM
 */
unsigned int CONT_fanPwmFromTemp(float temp) {
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    int new_fan_PWM = FAN_RAMP_SLOPE * temp + MIN_FAN_PWM;
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fdad 	bl	8000500 <__aeabi_f2d>
 80019a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001a20 <CONT_fanPwmFromTemp+0x88>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe00 	bl	80005b0 <__aeabi_dmul>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	4618      	mov	r0, r3
 80019b6:	4621      	mov	r1, r4
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <CONT_fanPwmFromTemp+0x90>)
 80019be:	f7fe fc41 	bl	8000244 <__adddf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f8a1 	bl	8000b10 <__aeabi_d2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	60fb      	str	r3, [r7, #12]
    // Limit range to [MIN_FAN_PWM, 100]
    if (new_fan_PWM < MIN_FAN_PWM) new_fan_PWM = MIN_FAN_PWM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b0e      	cmp	r3, #14
 80019d6:	dc01      	bgt.n	80019dc <CONT_fanPwmFromTemp+0x44>
 80019d8:	230f      	movs	r3, #15
 80019da:	60fb      	str	r3, [r7, #12]
    if (new_fan_PWM > 100) new_fan_PWM = 100;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	dd01      	ble.n	80019e6 <CONT_fanPwmFromTemp+0x4e>
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	60fb      	str	r3, [r7, #12]

    if (CONT_FAN_PWM_percent != 0) // If fans are on...
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <CONT_fanPwmFromTemp+0x94>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <CONT_fanPwmFromTemp+0x6a>
    {
        // Don't turn fans off unless temp is low enough
        if (temp < FAN_OFF_TEMP - TEMP_HYSTERESIS) {
 80019ee:	4910      	ldr	r1, [pc, #64]	; (8001a30 <CONT_fanPwmFromTemp+0x98>)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fbb1 	bl	8001158 <__aeabi_fcmplt>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <CONT_fanPwmFromTemp+0x7c>
            new_fan_PWM = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e008      	b.n	8001a14 <CONT_fanPwmFromTemp+0x7c>
        }
    }
    else // If fans are off...
    {
        // Don't turn fans on unless temp is high enough
        if(temp < FAN_OFF_TEMP) {
 8001a02:	490c      	ldr	r1, [pc, #48]	; (8001a34 <CONT_fanPwmFromTemp+0x9c>)
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fba7 	bl	8001158 <__aeabi_fcmplt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <CONT_fanPwmFromTemp+0x7c>
            new_fan_PWM = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
        }
    }

    return new_fan_PWM; // a cast to unsigned happens here
 8001a14:	68fb      	ldr	r3, [r7, #12]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	33333333 	.word	0x33333333
 8001a24:	400b3333 	.word	0x400b3333
 8001a28:	402e0000 	.word	0x402e0000
 8001a2c:	20000234 	.word	0x20000234
 8001a30:	41980000 	.word	0x41980000
 8001a34:	41a00000 	.word	0x41a00000

08001a38 <FSM_init>:
 * @brief Initializes FSM state.
 *
 * This must be called once, before calling FSM_run().
 */
void FSM_init()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    last_uptime_tick = HAL_GetTick();
 8001a3c:	f002 fdbc 	bl	80045b8 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <FSM_init+0x24>)
 8001a44:	601a      	str	r2, [r3, #0]
    system_status = 0;
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <FSM_init+0x28>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
    FSM_state = FSM_RESET;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <FSM_init+0x2c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
#ifdef PRINTF_DEBUG
    printf("FSM initialized\n");
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <FSM_init+0x30>)
 8001a54:	f005 ff48 	bl	80078e8 <puts>
#endif
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000023c 	.word	0x2000023c
 8001a60:	20000244 	.word	0x20000244
 8001a64:	20000238 	.word	0x20000238
 8001a68:	08009a38 	.word	0x08009a38

08001a6c <FSM_run>:


// This function should be placed in the main firmware loop
void FSM_run(BTM_PackData_t * pack, BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    unsigned int current_tick;

    FSM_state_table[FSM_state](pack, dch_setting_pack);
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <FSM_run+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <FSM_run+0x48>)
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	6839      	ldr	r1, [r7, #0]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3

    // Update uptime
    current_tick = HAL_GetTick();
 8001a88:	f002 fd96 	bl	80045b8 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]
    if (current_tick - last_uptime_tick >= 1000) {
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <FSM_run+0x4c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9a:	d304      	bcc.n	8001aa6 <FSM_run+0x3a>
        uptime++;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <FSM_run+0x50>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a06      	ldr	r2, [pc, #24]	; (8001abc <FSM_run+0x50>)
 8001aa4:	6013      	str	r3, [r2, #0]
    }
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000238 	.word	0x20000238
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	2000023c 	.word	0x2000023c
 8001abc:	20000240 	.word	0x20000240

08001ac0 <FSM_reset>:
 * If communication with all slave boards cannot be established, goes to BMS_FAULT_COMM
 * If communication can be established but any self test fails or a measured value is
 * outside the relevant safe range.
 */
void FSM_reset(BTM_PackData_t * pack, BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
    uint8_t test_data[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE]
 8001aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	2355      	movs	r3, #85	; 0x55
 8001ad8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001adc:	236e      	movs	r3, #110	; 0x6e
 8001ade:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ae2:	2369      	movs	r3, #105	; 0x69
 8001ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001ae8:	2342      	movs	r3, #66	; 0x42
 8001aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001aee:	2343      	movs	r3, #67	; 0x43
 8001af0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001af4:	2320      	movs	r3, #32
 8001af6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        = {{0x55, 0x6E, 0x69, 0x42, 0x43, 0x20}/*, {0x53, 0x6f, 0x6c, 0x61, 0x72, 0x21}*/};
    // TODO: ^ Add second subarray once configured for 2 LTC6813's
    uint8_t test_data_rx[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE] = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
    BTM_Status_t func_status = {BTM_OK, 0};
 8001b06:	2300      	movs	r3, #0
 8001b08:	753b      	strb	r3, [r7, #20]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
    int reg_group_match_failed = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34

    uptime = 0; // Reset uptime
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <FSM_reset+0x1c8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

    // Initialize control signals
    CONT_init();
 8001b18:	f7ff fe58 	bl	80017cc <CONT_init>
    // initialize the LTC6813 and system data
    BTM_init(pack);
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fc01 	bl	8002324 <BTM_init>
    BTM_BAL_initDchPack(dch_setting_pack);
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	f001 f8a5 	bl	8002c72 <BTM_BAL_initDchPack>
    //CAN_initAll();

    // initialize other stuff here in future

#ifdef PRINTF_DEBUG
    printf("BTM system initialized\nChecking communication with LTC devices: ");
 8001b28:	4858      	ldr	r0, [pc, #352]	; (8001c8c <FSM_reset+0x1cc>)
 8001b2a:	f005 fe55 	bl	80077d8 <iprintf>
#endif

    // Perform startup system self checks
    BTM_writeRegisterGroup(CMD_WRCOMM, test_data);
 8001b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	f240 7021 	movw	r0, #1825	; 0x721
 8001b38:	f000 fdbe 	bl	80026b8 <BTM_writeRegisterGroup>
    func_status = BTM_readRegisterGroup(CMD_RDCOMM, test_data_rx);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	f107 021c 	add.w	r2, r7, #28
 8001b44:	f240 7122 	movw	r1, #1826	; 0x722
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fe09 	bl	8002760 <BTM_readRegisterGroup>
    reg_group_match_failed = doesRegGroupMatch(test_data, test_data_rx);
 8001b4e:	f107 021c 	add.w	r2, r7, #28
 8001b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fa2d 	bl	8001fb8 <doesRegGroupMatch>
 8001b5e:	6378      	str	r0, [r7, #52]	; 0x34
#ifdef PRINTF_DEBUG
    printBTMStatus(func_status, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b6a:	f000 fa9b 	bl	80020a4 <printBTMStatus>
    putchar('\n');
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f005 fe4a 	bl	8007808 <putchar>
#endif
    if (reg_group_match_failed)
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <FSM_reset+0xcc>
    {
        system_status |= BMS_FAULT_COMM;
 8001b7a:	4b45      	ldr	r3, [pc, #276]	; (8001c90 <FSM_reset+0x1d0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <FSM_reset+0x1d0>)
 8001b84:	6013      	str	r3, [r2, #0]
#ifdef PRINTF_DEBUG
        printf("Comms check data match FAILED\n");
 8001b86:	4843      	ldr	r0, [pc, #268]	; (8001c94 <FSM_reset+0x1d4>)
 8001b88:	f005 feae 	bl	80078e8 <puts>
#endif
    }
    if (commsProblem(func_status, &system_status)) return;
 8001b8c:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <FSM_reset+0x1d0>)
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b96:	f000 f9b5 	bl	8001f04 <commsProblem>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d16b      	bne.n	8001c78 <FSM_reset+0x1b8>
    // TODO: more self tests...

    //if (commsProblem(func_status, &system_status)) return;

    // perform initial voltage measurement
    last_update_tick = HAL_GetTick(); // initialize last_measurement_tick
 8001ba0:	f002 fd0a 	bl	80045b8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <FSM_reset+0x1d8>)
 8001ba8:	601a      	str	r2, [r3, #0]
    func_status = BTM_readBatt(pack);
 8001baa:	463b      	mov	r3, r7
 8001bac:	68f9      	ldr	r1, [r7, #12]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fe86 	bl	80028c0 <BTM_readBatt>
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	463a      	mov	r2, r7
 8001bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bbe:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef PRINTF_DEBUG
    printf("Performing initial measurements\nVolt: ");
 8001bc2:	4836      	ldr	r0, [pc, #216]	; (8001c9c <FSM_reset+0x1dc>)
 8001bc4:	f005 fe08 	bl	80077d8 <iprintf>
    printBTMStatus(func_status, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bd2:	f000 fa67 	bl	80020a4 <printBTMStatus>
    putchar(' ');
 8001bd6:	2020      	movs	r0, #32
 8001bd8:	f005 fe16 	bl	8007808 <putchar>
#endif
    if (commsProblem(func_status, &system_status)) return;
 8001bdc:	4a2c      	ldr	r2, [pc, #176]	; (8001c90 <FSM_reset+0x1d0>)
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be6:	f000 f98d 	bl	8001f04 <commsProblem>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d145      	bne.n	8001c7c <FSM_reset+0x1bc>

    // perform initial temperature measurement
    func_status = BTM_TEMP_measureState(pack);
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 fa98 	bl	800312a <BTM_TEMP_measureState>
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	463a      	mov	r2, r7
 8001c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c04:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef PRINTF_DEBUG
    printf("\nTemp: ");
 8001c08:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <FSM_reset+0x1e0>)
 8001c0a:	f005 fde5 	bl	80077d8 <iprintf>
    printBTMStatus(func_status, 1);
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c18:	f000 fa44 	bl	80020a4 <printBTMStatus>
    putchar('\n');
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f005 fdf3 	bl	8007808 <putchar>
#endif
    if (commsProblem(func_status, &system_status)) return;
 8001c22:	4a1b      	ldr	r2, [pc, #108]	; (8001c90 <FSM_reset+0x1d0>)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c2c:	f000 f96a 	bl	8001f04 <commsProblem>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d124      	bne.n	8001c80 <FSM_reset+0x1c0>

    // analyze initial measurements, update system status code
    analysisStatusUpdate(pack, &system_status);
 8001c36:	4916      	ldr	r1, [pc, #88]	; (8001c90 <FSM_reset+0x1d0>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f993 	bl	8001f64 <analysisStatusUpdate>

    driveControlSignals(system_status);
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <FSM_reset+0x1d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f9ef 	bl	8002026 <driveControlSignals>

    // switch state
    if (system_status & MASK_BMS_FAULT) // If any faults are active
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <FSM_reset+0x1d0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <FSM_reset+0x1a8>
    {
#ifdef PRINTF_DEBUG
        printf("ENTERING GENERAL FAULT STATE\n");
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <FSM_reset+0x1e4>)
 8001c56:	f005 fe47 	bl	80078e8 <puts>
#endif
        CONT_FAN_PWM_set(FAN_FULL);
 8001c5a:	2064      	movs	r0, #100	; 0x64
 8001c5c:	f7ff fe7a 	bl	8001954 <CONT_FAN_PWM_set>
        FSM_state = FSM_FAULT_GENERAL;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <FSM_reset+0x1e8>)
 8001c62:	2203      	movs	r2, #3
 8001c64:	701a      	strb	r2, [r3, #0]
        printf("Entering NORMAL state\n");
#endif
        FSM_state = FSM_NORMAL;
    }

    return;
 8001c66:	e00c      	b.n	8001c82 <FSM_reset+0x1c2>
        printf("Entering NORMAL state\n");
 8001c68:	4810      	ldr	r0, [pc, #64]	; (8001cac <FSM_reset+0x1ec>)
 8001c6a:	f005 fe3d 	bl	80078e8 <puts>
        FSM_state = FSM_NORMAL;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <FSM_reset+0x1e8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
    return;
 8001c74:	bf00      	nop
 8001c76:	e004      	b.n	8001c82 <FSM_reset+0x1c2>
    if (commsProblem(func_status, &system_status)) return;
 8001c78:	bf00      	nop
 8001c7a:	e002      	b.n	8001c82 <FSM_reset+0x1c2>
    if (commsProblem(func_status, &system_status)) return;
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <FSM_reset+0x1c2>
    if (commsProblem(func_status, &system_status)) return;
 8001c80:	bf00      	nop
}
 8001c82:	3738      	adds	r7, #56	; 0x38
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000240 	.word	0x20000240
 8001c8c:	08009a48 	.word	0x08009a48
 8001c90:	20000244 	.word	0x20000244
 8001c94:	08009a8c 	.word	0x08009a8c
 8001c98:	20000248 	.word	0x20000248
 8001c9c:	08009aac 	.word	0x08009aac
 8001ca0:	08009ad4 	.word	0x08009ad4
 8001ca4:	08009adc 	.word	0x08009adc
 8001ca8:	20000238 	.word	0x20000238
 8001cac:	08009afc 	.word	0x08009afc

08001cb0 <FSM_normal>:

void FSM_normal(BTM_PackData_t * pack, BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
    unsigned int current_tick;
    BTM_Status_t func_status = {BTM_OK, 0};
 8001cba:	2300      	movs	r3, #0
 8001cbc:	753b      	strb	r3, [r7, #20]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
    unsigned int fan_PWM = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    float max_temp = 0;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]

    // Perform measurements and update the system state no more frequently than
    // FSM_MIN_UPDATE_INTERVAL milliseconds
    current_tick = HAL_GetTick();
 8001ccc:	f002 fc74 	bl	80045b8 <HAL_GetTick>
 8001cd0:	61f8      	str	r0, [r7, #28]
    if (last_update_tick - current_tick >= FSM_MIN_UPDATE_INTERVAL)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <FSM_normal+0x140>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cde:	d37f      	bcc.n	8001de0 <FSM_normal+0x130>
    {
        last_update_tick = current_tick;
 8001ce0:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <FSM_normal+0x140>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	6013      	str	r3, [r2, #0]

        // perform measurements
        func_status = BTM_readBatt(pack);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fde7 	bl	80028c0 <BTM_readBatt>
#ifdef PRINTF_DEBUG
        printf("V: ");
 8001cf2:	4840      	ldr	r0, [pc, #256]	; (8001df4 <FSM_normal+0x144>)
 8001cf4:	f005 fd70 	bl	80077d8 <iprintf>
        printBTMStatus(func_status, 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d02:	f000 f9cf 	bl	80020a4 <printBTMStatus>
        putchar('\n');
 8001d06:	200a      	movs	r0, #10
 8001d08:	f005 fd7e 	bl	8007808 <putchar>
#endif
        if (commsProblem(func_status, &system_status)) return;
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <FSM_normal+0x148>)
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d16:	f000 f8f5 	bl	8001f04 <commsProblem>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d161      	bne.n	8001de4 <FSM_normal+0x134>
        func_status = BTM_TEMP_measureState(pack);
 8001d20:	463b      	mov	r3, r7
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fa00 	bl	800312a <BTM_TEMP_measureState>
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	463a      	mov	r2, r7
 8001d30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d34:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef PRINTF_DEBUG
        printf("T: ");
 8001d38:	4830      	ldr	r0, [pc, #192]	; (8001dfc <FSM_normal+0x14c>)
 8001d3a:	f005 fd4d 	bl	80077d8 <iprintf>
        printBTMStatus(func_status, 1);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d48:	f000 f9ac 	bl	80020a4 <printBTMStatus>
        putchar('\n');
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f005 fd5b 	bl	8007808 <putchar>
#endif
        if (commsProblem(func_status, &system_status)) return;
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <FSM_normal+0x148>)
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d5c:	f000 f8d2 	bl	8001f04 <commsProblem>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d140      	bne.n	8001de8 <FSM_normal+0x138>

        // analyze measurements, update system status code
        analysisStatusUpdate(pack, &system_status);
 8001d66:	4924      	ldr	r1, [pc, #144]	; (8001df8 <FSM_normal+0x148>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f8fb 	bl	8001f64 <analysisStatusUpdate>

        // run balancing calculations and set balancing
        BTM_BAL_settings(pack, dch_setting_pack);
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff fbaf 	bl	80014d4 <BTM_BAL_settings>

        // drive control signals based on status code
        driveControlSignals(system_status);
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <FSM_normal+0x148>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f953 	bl	8002026 <driveControlSignals>

#ifdef PRINTF_DEBUG
        // dump voltage and temp data through printf
        printMeasurements(pack);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f9e9 	bl	8002158 <printMeasurements>
#endif

        // drive fans, potentially switch state
        if (system_status & MASK_BMS_FAULT) // If any faults are active
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <FSM_normal+0x148>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d010      	beq.n	8001db4 <FSM_normal+0x104>
        {
#ifdef PRINTF_DEBUG
            printf("ENTERING GENERAL FAULT STATE\n");
 8001d92:	481b      	ldr	r0, [pc, #108]	; (8001e00 <FSM_normal+0x150>)
 8001d94:	f005 fda8 	bl	80078e8 <puts>
#endif
            CONT_FAN_PWM_set(FAN_FULL); // drive fans at full speed for fault
 8001d98:	2064      	movs	r0, #100	; 0x64
 8001d9a:	f7ff fddb 	bl	8001954 <CONT_FAN_PWM_set>
            // Stop all balancing (see note about fault balancing in FAULT_GENERAL state)
            BTM_BAL_initDchPack(dch_setting_pack);
 8001d9e:	68b8      	ldr	r0, [r7, #8]
 8001da0:	f000 ff67 	bl	8002c72 <BTM_BAL_initDchPack>
            BTM_BAL_setDischarge(pack, dch_setting_pack);
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 ff89 	bl	8002cbe <BTM_BAL_setDischarge>

            FSM_state = FSM_FAULT_GENERAL;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <FSM_normal+0x154>)
 8001dae:	2203      	movs	r2, #3
 8001db0:	701a      	strb	r2, [r3, #0]

    // Perform CAN communication
    // this is not necessarily synchronous to the main system update
    //CANState();

    return;
 8001db2:	e015      	b.n	8001de0 <FSM_normal+0x130>
        else if (system_status & BMS_TRIP_CHARGE_OT)
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <FSM_normal+0x148>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <FSM_normal+0x118>
            CONT_FAN_PWM_set(FAN_FULL);
 8001dc0:	2064      	movs	r0, #100	; 0x64
 8001dc2:	f7ff fdc7 	bl	8001954 <CONT_FAN_PWM_set>
    return;
 8001dc6:	e00b      	b.n	8001de0 <FSM_normal+0x130>
            max_temp = ANA_findHighestModuleTemp(pack);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fb43 	bl	8001454 <ANA_findHighestModuleTemp>
 8001dce:	6238      	str	r0, [r7, #32]
            fan_PWM = CONT_fanPwmFromTemp(max_temp);
 8001dd0:	6a38      	ldr	r0, [r7, #32]
 8001dd2:	f7ff fde1 	bl	8001998 <CONT_fanPwmFromTemp>
 8001dd6:	6278      	str	r0, [r7, #36]	; 0x24
            CONT_FAN_PWM_set(fan_PWM);
 8001dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dda:	f7ff fdbb 	bl	8001954 <CONT_FAN_PWM_set>
    return;
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	e002      	b.n	8001dea <FSM_normal+0x13a>
        if (commsProblem(func_status, &system_status)) return;
 8001de4:	bf00      	nop
 8001de6:	e000      	b.n	8001dea <FSM_normal+0x13a>
        if (commsProblem(func_status, &system_status)) return;
 8001de8:	bf00      	nop
}
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000248 	.word	0x20000248
 8001df4:	08009b14 	.word	0x08009b14
 8001df8:	20000244 	.word	0x20000244
 8001dfc:	08009b18 	.word	0x08009b18
 8001e00:	08009adc 	.word	0x08009adc
 8001e04:	20000238 	.word	0x20000238

08001e08 <FSM_fault_comm>:

void FSM_fault_comm(BTM_PackData_t * pack, BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    // system status should not change, since no readings can take place.

    // TODO: send status-only CAN messages (no data)?
    //CANState();

    return;
 8001e12:	bf00      	nop
}
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <FSM_fault_general>:

void FSM_fault_general(BTM_PackData_t * pack, BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
    unsigned int current_tick;
    BTM_Status_t func_status = {BTM_OK, 0};
 8001e26:	2300      	movs	r3, #0
 8001e28:	753b      	strb	r3, [r7, #20]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]

    // Perform measurements and update the system state no more frequently than
    // FSM_MIN_UPDATE_INTERVAL milliseconds
    current_tick = HAL_GetTick();
 8001e2e:	f002 fbc3 	bl	80045b8 <HAL_GetTick>
 8001e32:	61f8      	str	r0, [r7, #28]
    if (last_update_tick - current_tick >= FSM_MIN_UPDATE_INTERVAL)
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <FSM_fault_general+0xd8>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e40:	d34f      	bcc.n	8001ee2 <FSM_fault_general+0xc6>
    {
        last_update_tick = current_tick;
 8001e42:	4a2c      	ldr	r2, [pc, #176]	; (8001ef4 <FSM_fault_general+0xd8>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	6013      	str	r3, [r2, #0]

        // perform measurements
        func_status = BTM_readBatt(pack);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fd36 	bl	80028c0 <BTM_readBatt>
#ifdef PRINTF_DEBUG
        printf("V: ");
 8001e54:	4828      	ldr	r0, [pc, #160]	; (8001ef8 <FSM_fault_general+0xdc>)
 8001e56:	f005 fcbf 	bl	80077d8 <iprintf>
        printBTMStatus(func_status, 1);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e64:	f000 f91e 	bl	80020a4 <printBTMStatus>
        putchar('\n');
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f005 fccd 	bl	8007808 <putchar>
#endif
        if (commsProblem(func_status, &system_status)) return;
 8001e6e:	4a23      	ldr	r2, [pc, #140]	; (8001efc <FSM_fault_general+0xe0>)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e78:	f000 f844 	bl	8001f04 <commsProblem>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d131      	bne.n	8001ee6 <FSM_fault_general+0xca>
        func_status = BTM_TEMP_measureState(pack);
 8001e82:	463b      	mov	r3, r7
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 f94f 	bl	800312a <BTM_TEMP_measureState>
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	463a      	mov	r2, r7
 8001e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e96:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef PRINTF_DEBUG
        printf("T: ");
 8001e9a:	4819      	ldr	r0, [pc, #100]	; (8001f00 <FSM_fault_general+0xe4>)
 8001e9c:	f005 fc9c 	bl	80077d8 <iprintf>
        printBTMStatus(func_status, 1);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001eaa:	f000 f8fb 	bl	80020a4 <printBTMStatus>
        putchar('\n');
 8001eae:	200a      	movs	r0, #10
 8001eb0:	f005 fcaa 	bl	8007808 <putchar>
#endif
        if (commsProblem(func_status, &system_status)) return;
 8001eb4:	4a11      	ldr	r2, [pc, #68]	; (8001efc <FSM_fault_general+0xe0>)
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ebe:	f000 f821 	bl	8001f04 <commsProblem>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d110      	bne.n	8001eea <FSM_fault_general+0xce>

        // analyze measurements, update system status code
        analysisStatusUpdate(pack, &system_status);
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <FSM_fault_general+0xe0>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f84a 	bl	8001f64 <analysisStatusUpdate>
        //BTM_BAL_balanceUnderFault(pack, system_status);
        //BTM_BAL_settings(pack, dch_setting_pack);
        // Alternatively, stop all balancing (done in transition to this state)

        // drive control signals based on status code
        driveControlSignals(system_status);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <FSM_fault_general+0xe0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f8a6 	bl	8002026 <driveControlSignals>

#ifdef PRINTF_DEBUG
        // dump voltage and temp data through printf
        printMeasurements(pack);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f93c 	bl	8002158 <printMeasurements>
    // this is not necessarily synchronous to the main system update
    //CANState();

    // fans should have been set at full power when the transition to this state took place
    // can ONLY switch from here to FAULT_COMM, or stay in this state
    return;
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	e002      	b.n	8001eec <FSM_fault_general+0xd0>
        if (commsProblem(func_status, &system_status)) return;
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <FSM_fault_general+0xd0>
        if (commsProblem(func_status, &system_status)) return;
 8001eea:	bf00      	nop
}
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000248 	.word	0x20000248
 8001ef8:	08009b14 	.word	0x08009b14
 8001efc:	20000244 	.word	0x20000244
 8001f00:	08009b18 	.word	0x08009b18

08001f04 <commsProblem>:

// Checks for a communication fault condition, switches FSM to FAULT_COMM
// state if necessary
// Returns 1 if there is a communication fault, 0 otherwise
int commsProblem(BTM_Status_t func_status, int * sys_status)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f12:	607a      	str	r2, [r7, #4]
    if (func_status.error != BTM_OK || (*sys_status & BMS_FAULT_COMM))
 8001f14:	7a3b      	ldrb	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d105      	bne.n	8001f26 <commsProblem+0x22>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <commsProblem+0x4e>
    {
#ifdef PRINTF_DEBUG
        printf("ENTERING COMM FAULT STATE\n");
 8001f26:	480d      	ldr	r0, [pc, #52]	; (8001f5c <commsProblem+0x58>)
 8001f28:	f005 fcde 	bl	80078e8 <puts>
#endif
        *sys_status |= BMS_FAULT_COMM;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	601a      	str	r2, [r3, #0]
        driveControlSignals(*sys_status); // Update control signals
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f872 	bl	8002026 <driveControlSignals>
        CONT_FAN_PWM_set(FAN_FULL); // Drive fans at full power
 8001f42:	2064      	movs	r0, #100	; 0x64
 8001f44:	f7ff fd06 	bl	8001954 <CONT_FAN_PWM_set>
        FSM_state = FSM_FAULT_COMM;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <commsProblem+0x5c>)
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	701a      	strb	r2, [r3, #0]
        return 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <commsProblem+0x50>
    }

    return 0;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	08009b1c 	.word	0x08009b1c
 8001f60:	20000238 	.word	0x20000238

08001f64 <analysisStatusUpdate>:

void analysisStatusUpdate(BTM_PackData_t * pack, int * status)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    ANA_analyzeModules(pack);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff f930 	bl	80011d4 <ANA_analyzeModules>
    *status = (system_status & MASK_BMS_SYSTEM_FAULT);
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <analysisStatusUpdate+0x50>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	601a      	str	r2, [r3, #0]
    *status |= ANA_mergeModuleStatusCodes(pack);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fa31 	bl	80013e8 <ANA_mergeModuleStatusCodes>
 8001f86:	4602      	mov	r2, r0
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	601a      	str	r2, [r3, #0]
    // ^ prevent system-level faults from being overwritten
    // Activate HLIM under CHARGE_OT condition
    if (*status & BMS_TRIP_CHARGE_OT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <analysisStatusUpdate+0x46>
    {
        *status |= BMS_TRIP_HLIM;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	601a      	str	r2, [r3, #0]
    }
    // note that TRIP_HLIM will be cleared by analysis.c functions next loop
    // if conditions change
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000244 	.word	0x20000244

08001fb8 <doesRegGroupMatch>:

// Helper function for initial system checks
// Returns 0 for full match, 1 otherwise
int doesRegGroupMatch(uint8_t reg_group1[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE],
                      uint8_t reg_group2[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE])
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e025      	b.n	8002014 <doesRegGroupMatch+0x5c>
        for(int i = 0; i < BTM_REG_GROUP_SIZE; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e01c      	b.n	8002008 <doesRegGroupMatch+0x50>
            if (reg_group1[ic_num][i] != reg_group2[ic_num][i])
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	441a      	add	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	7819      	ldrb	r1, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	461a      	mov	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4299      	cmp	r1, r3
 8001ffc:	d001      	beq.n	8002002 <doesRegGroupMatch+0x4a>
                return 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00c      	b.n	800201c <doesRegGroupMatch+0x64>
        for(int i = 0; i < BTM_REG_GROUP_SIZE; i++) {
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	dddf      	ble.n	8001fce <doesRegGroupMatch+0x16>
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3301      	adds	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d9d6      	bls.n	8001fc8 <doesRegGroupMatch+0x10>
        }
    }
    return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <driveControlSignals>:

void driveControlSignals(int status) {
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
    CONT_FLT_switch( (status & MASK_BMS_FAULT) ? CONT_ACTIVE : CONT_INACTIVE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fc30 	bl	80018a4 <CONT_FLT_switch>
    CONT_BAL_switch( (status & BMS_TRIP_BAL)   ? CONT_ACTIVE : CONT_INACTIVE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	121b      	asrs	r3, r3, #8
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fbfb 	bl	800184c <CONT_BAL_switch>
    CONT_COM_switch( (status & BMS_FAULT_COMM) ? CONT_ACTIVE : CONT_INACTIVE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fc09 	bl	8001878 <CONT_COM_switch>
    CONT_HLIM_switch((status & BMS_TRIP_HLIM)  ? CONT_ACTIVE : CONT_INACTIVE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	129b      	asrs	r3, r3, #10
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc2c 	bl	80018d0 <CONT_HLIM_switch>
    CONT_LLIM_switch((status & BMS_TRIP_LLIM)  ? CONT_ACTIVE : CONT_INACTIVE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	125b      	asrs	r3, r3, #9
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc39 	bl	80018fc <CONT_LLIM_switch>
    CONT_OT_switch(  (status & BMS_FAULT_OT)   ? CONT_ACTIVE : CONT_INACTIVE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	109b      	asrs	r3, r3, #2
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc46 	bl	8001928 <CONT_OT_switch>
    return;
 800209c:	bf00      	nop
}
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <printBTMStatus>:

#ifdef PRINTF_DEBUG
void printBTMStatus(BTM_Status_t status, int print_ok)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80020b2:	607a      	str	r2, [r7, #4]
    switch (status.error) {
 80020b4:	7a3b      	ldrb	r3, [r7, #8]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d82b      	bhi.n	8002112 <printBTMStatus+0x6e>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <printBTMStatus+0x1c>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020dd 	.word	0x080020dd
 80020c4:	080020eb 	.word	0x080020eb
 80020c8:	080020f3 	.word	0x080020f3
 80020cc:	08002113 	.word	0x08002113
 80020d0:	080020fb 	.word	0x080020fb
 80020d4:	08002103 	.word	0x08002103
 80020d8:	0800210b 	.word	0x0800210b
    case BTM_OK:
        if (print_ok) printf("BTM OK");
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01b      	beq.n	800211a <printBTMStatus+0x76>
 80020e2:	4815      	ldr	r0, [pc, #84]	; (8002138 <printBTMStatus+0x94>)
 80020e4:	f005 fb78 	bl	80077d8 <iprintf>
        break;
 80020e8:	e017      	b.n	800211a <printBTMStatus+0x76>
    case BTM_ERROR_PEC:
        printf("BTM PEC error");
 80020ea:	4814      	ldr	r0, [pc, #80]	; (800213c <printBTMStatus+0x98>)
 80020ec:	f005 fb74 	bl	80077d8 <iprintf>
        break;
 80020f0:	e014      	b.n	800211c <printBTMStatus+0x78>
    case BTM_ERROR_TIMEOUT:
        printf("BTM timeout error");
 80020f2:	4813      	ldr	r0, [pc, #76]	; (8002140 <printBTMStatus+0x9c>)
 80020f4:	f005 fb70 	bl	80077d8 <iprintf>
        break;
 80020f8:	e010      	b.n	800211c <printBTMStatus+0x78>
    case BTM_ERROR_HAL:
        printf("BTM general HAL error");
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <printBTMStatus+0xa0>)
 80020fc:	f005 fb6c 	bl	80077d8 <iprintf>
        break;
 8002100:	e00c      	b.n	800211c <printBTMStatus+0x78>
    case BTM_ERROR_HAL_BUSY:
        printf("BTM HAL busy error");
 8002102:	4811      	ldr	r0, [pc, #68]	; (8002148 <printBTMStatus+0xa4>)
 8002104:	f005 fb68 	bl	80077d8 <iprintf>
        break;
 8002108:	e008      	b.n	800211c <printBTMStatus+0x78>
    case BTM_ERROR_HAL_TIMEOUT:
        printf("BTM HAL timeout error");
 800210a:	4810      	ldr	r0, [pc, #64]	; (800214c <printBTMStatus+0xa8>)
 800210c:	f005 fb64 	bl	80077d8 <iprintf>
        break;
 8002110:	e004      	b.n	800211c <printBTMStatus+0x78>
    default:
        printf("Unknown BTM error");
 8002112:	480f      	ldr	r0, [pc, #60]	; (8002150 <printBTMStatus+0xac>)
 8002114:	f005 fb60 	bl	80077d8 <iprintf>
        break;
 8002118:	e000      	b.n	800211c <printBTMStatus+0x78>
        break;
 800211a:	bf00      	nop
    }

    if (status.device_num != 0)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <printBTMStatus+0x8a>
    {
        printf("at LTC device #%d", status.device_num);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4619      	mov	r1, r3
 8002126:	480b      	ldr	r0, [pc, #44]	; (8002154 <printBTMStatus+0xb0>)
 8002128:	f005 fb56 	bl	80077d8 <iprintf>
    }
    return;
 800212c:	bf00      	nop
 800212e:	bf00      	nop
}
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	08009b38 	.word	0x08009b38
 800213c:	08009b40 	.word	0x08009b40
 8002140:	08009b50 	.word	0x08009b50
 8002144:	08009b64 	.word	0x08009b64
 8002148:	08009b7c 	.word	0x08009b7c
 800214c:	08009b90 	.word	0x08009b90
 8002150:	08009ba8 	.word	0x08009ba8
 8002154:	08009bbc 	.word	0x08009bbc

08002158 <printMeasurements>:

void printMeasurements(BTM_PackData_t * pack)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    for (int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e07d      	b.n	8002262 <printMeasurements+0x10a>
    {
        printf("BOARD #%d\n", ic_num);
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	4842      	ldr	r0, [pc, #264]	; (8002274 <printMeasurements+0x11c>)
 800216a:	f005 fb35 	bl	80077d8 <iprintf>
        // TODO: Append more modules once project is configured for LTC6813
        printf("C0\t\tC1\t\tC2\t\tC3\t\tC4\t\tC5\t\tC6\t\tC7\t\tC8\t\tC9\t\tC10\t\tC11\n");
 800216e:	4842      	ldr	r0, [pc, #264]	; (8002278 <printMeasurements+0x120>)
 8002170:	f005 fbba 	bl	80078e8 <puts>

        for (int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e032      	b.n	80021e0 <printMeasurements+0x88>
            if (pack->stack[ic_num].module[module_num].enable) {
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	22e8      	movs	r2, #232	; 0xe8
 800218a:	fb02 f200 	mul.w	r2, r2, r0
 800218e:	4413      	add	r3, r2
 8002190:	440b      	add	r3, r1
 8002192:	3314      	adds	r3, #20
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <printMeasurements+0x7c>
                printf("%.4f\t", BTM_regValToVoltage(
                        pack->stack[ic_num].module[module_num].voltage));
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	22e8      	movs	r2, #232	; 0xe8
 80021aa:	fb02 f200 	mul.w	r2, r2, r0
 80021ae:	4413      	add	r3, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	3316      	adds	r3, #22
 80021b4:	881b      	ldrh	r3, [r3, #0]
                printf("%.4f\t", BTM_regValToVoltage(
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fcba 	bl	8002b30 <BTM_regValToVoltage>
 80021bc:	4603      	mov	r3, r0
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f99e 	bl	8000500 <__aeabi_f2d>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	461a      	mov	r2, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	482b      	ldr	r0, [pc, #172]	; (800227c <printMeasurements+0x124>)
 80021ce:	f005 fb03 	bl	80077d8 <iprintf>
 80021d2:	e002      	b.n	80021da <printMeasurements+0x82>
            } else {
                printf("x\t\t"); // Don't print the voltage for inactive modules
 80021d4:	482a      	ldr	r0, [pc, #168]	; (8002280 <printMeasurements+0x128>)
 80021d6:	f005 faff 	bl	80077d8 <iprintf>
        for (int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3301      	adds	r3, #1
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b11      	cmp	r3, #17
 80021e4:	ddc9      	ble.n	800217a <printMeasurements+0x22>
            }
        }
        putchar('\n');
 80021e6:	200a      	movs	r0, #10
 80021e8:	f005 fb0e 	bl	8007808 <putchar>

        for (int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e02e      	b.n	8002250 <printMeasurements+0xf8>
            if (pack->stack[ic_num].module[module_num].enable) {
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	22e8      	movs	r2, #232	; 0xe8
 8002202:	fb02 f200 	mul.w	r2, r2, r0
 8002206:	4413      	add	r3, r2
 8002208:	440b      	add	r3, r1
 800220a:	3314      	adds	r3, #20
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d018      	beq.n	8002244 <printMeasurements+0xec>
                printf("%.3f\t", pack->stack[ic_num].module[module_num].temperature);
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	22e8      	movs	r2, #232	; 0xe8
 8002222:	fb02 f200 	mul.w	r2, r2, r0
 8002226:	4413      	add	r3, r2
 8002228:	440b      	add	r3, r1
 800222a:	3318      	adds	r3, #24
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f966 	bl	8000500 <__aeabi_f2d>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	461a      	mov	r2, r3
 800223a:	4623      	mov	r3, r4
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <printMeasurements+0x12c>)
 800223e:	f005 facb 	bl	80077d8 <iprintf>
 8002242:	e002      	b.n	800224a <printMeasurements+0xf2>
            } else {
                printf("x\t\t"); // Don't print the voltage for inactive modules
 8002244:	480e      	ldr	r0, [pc, #56]	; (8002280 <printMeasurements+0x128>)
 8002246:	f005 fac7 	bl	80077d8 <iprintf>
        for (int module_num = 0; module_num < BTM_NUM_MODULES; module_num++) {
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3301      	adds	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b11      	cmp	r3, #17
 8002254:	ddcd      	ble.n	80021f2 <printMeasurements+0x9a>
            }
        }
        putchar('\n');
 8002256:	200a      	movs	r0, #10
 8002258:	f005 fad6 	bl	8007808 <putchar>
    for (int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b01      	cmp	r3, #1
 8002266:	f67f af7e 	bls.w	8002166 <printMeasurements+0xe>
    }
}
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	08009bd0 	.word	0x08009bd0
 8002278:	08009bdc 	.word	0x08009bdc
 800227c:	08009c10 	.word	0x08009c10
 8002280:	08009c18 	.word	0x08009c18
 8002284:	08009c1c 	.word	0x08009c1c

08002288 <BTM_calculatePec15>:
 * @param data The bytes to calculate a PEC for
 * @param len The number of bytes of data to calculate the PEC for
 * @return Returns the 2-byte CRC PEC generated
 */
uint16_t BTM_calculatePec15(uint8_t *data, int len)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	uint16_t remainder, address;
	remainder = 16; // initial value for PEC computation
 8002292:	2310      	movs	r3, #16
 8002294:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	e019      	b.n	80022d0 <BTM_calculatePec15+0x48>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff; // lookup table address
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	09db      	lsrs	r3, r3, #7
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	440b      	add	r3, r1
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4053      	eors	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8) ^ pec15Table[address];
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	490a      	ldr	r1, [pc, #40]	; (80022e8 <BTM_calculatePec15+0x60>)
 80022be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	4053      	eors	r3, r2
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	3301      	adds	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbe1      	blt.n	800229c <BTM_calculatePec15+0x14>
	}
	return (remainder << 1); // The CRC15 has a 0 in the LSB so the final value
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b29b      	uxth	r3, r3
							 // must be leftshifted 1 bit
}
 80022de:	4618      	mov	r0, r3
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	08009c48 	.word	0x08009c48

080022ec <BTM_wakeup>:
 *
 * Wakes up the daisy chain as per method described on pg. 52 of datasheet
 * (method 2)
 */
void BTM_wakeup()
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
    // Using HAL_Delay() for this is not particularly ideal, since the
    // minimum delay is 1ms and the delays required are 300us and
    // 10us -ish (shorter than 1 ms)
    // TODO: test with daisy chain of 3 LTC6813's to verify this timing works
    // If it doesn't, add another faster timer for more precise delays
	for (int i = 0; i < BTM_NUM_DEVICES; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	e00e      	b.n	8002316 <BTM_wakeup+0x2a>
	{
		BTM_writeCS(CS_LOW);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 fc35 	bl	8002b68 <BTM_writeCS>
		HAL_Delay(1); // wait 1ms
 80022fe:	2001      	movs	r0, #1
 8002300:	f002 f964 	bl	80045cc <HAL_Delay>
		BTM_writeCS(CS_HIGH);
 8002304:	2001      	movs	r0, #1
 8002306:	f000 fc2f 	bl	8002b68 <BTM_writeCS>
		// Then delay at least 10us
		HAL_Delay(1); // wait 1ms - the minimum with this timer setup
 800230a:	2001      	movs	r0, #1
 800230c:	f002 f95e 	bl	80045cc <HAL_Delay>
	for (int i = 0; i < BTM_NUM_DEVICES; i++)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d9ed      	bls.n	80022f8 <BTM_wakeup+0xc>
	}
	return;
 800231c:	bf00      	nop
}
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <BTM_init>:
 * WARNING: Disable modules via their "enable" attribute only AFTER calling this function,
 * otherwise these settings will be overwritten.
 * @param pack A pointer to the PackData structure in use
 */
void BTM_init(BTM_PackData_t * pack)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b090      	sub	sp, #64	; 0x40
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    uint8_t cfgra_to_write[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    uint8_t cfgrb_to_write[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];

    // Refer to the LTC6813 datasheet pages 60 and 65 for format and content of config_val_a
    uint8_t config_val_a[BTM_REG_GROUP_SIZE] =
 800232c:	4a65      	ldr	r2, [pc, #404]	; (80024c4 <BTM_init+0x1a0>)
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002336:	6018      	str	r0, [r3, #0]
 8002338:	3304      	adds	r3, #4
 800233a:	8019      	strh	r1, [r3, #0]
        0x00,
        0x00,
        0x00,
        0x00
    };
	uint8_t config_val_b[BTM_REG_GROUP_SIZE] =
 800233c:	4a62      	ldr	r2, [pc, #392]	; (80024c8 <BTM_init+0x1a4>)
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002346:	6018      	str	r0, [r3, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	8019      	strh	r1, [r3, #0]
        (VOV >> 4), // VOV[11:4]
        0x00, // Discharge off for cells 1 through 8
        0x00  // Discharge off for cells 9 through 12, Discharge timer disabled
    };
    // Initialize given PackData structure
    pack->pack_voltage = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002352:	2300      	movs	r3, #0
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002356:	e09e      	b.n	8002496 <BTM_init+0x172>
    {
        for(int reg_num = 0; reg_num < BTM_REG_GROUP_SIZE; reg_num++)
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
 800235c:	e046      	b.n	80023ec <BTM_init+0xc8>
        {
            pack->stack[ic_num].cfgra[reg_num] = config_val_a[reg_num];
 800235e:	f107 0214 	add.w	r2, r7, #20
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	4413      	add	r3, r2
 8002366:	7818      	ldrb	r0, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	21e8      	movs	r1, #232	; 0xe8
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	441a      	add	r2, r3
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	4602      	mov	r2, r0
 800237c:	701a      	strb	r2, [r3, #0]
			cfgra_to_write[ic_num][reg_num] = config_val_a[reg_num]; // prepare tx data
 800237e:	f107 0214 	add.w	r2, r7, #20
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	4413      	add	r3, r2
 8002386:	7819      	ldrb	r1, [r3, #0]
 8002388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002396:	441a      	add	r2, r3
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	4413      	add	r3, r2
 800239c:	3b18      	subs	r3, #24
 800239e:	460a      	mov	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
            pack->stack[ic_num].cfgrb[reg_num] = config_val_b[reg_num];
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	4413      	add	r3, r2
 80023aa:	7818      	ldrb	r0, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b0:	21e8      	movs	r1, #232	; 0xe8
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	441a      	add	r2, r3
 80023b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ba:	4413      	add	r3, r2
 80023bc:	330a      	adds	r3, #10
 80023be:	4602      	mov	r2, r0
 80023c0:	701a      	strb	r2, [r3, #0]
            cfgrb_to_write[ic_num][reg_num] = config_val_b[reg_num]; // prepare tx data
 80023c2:	f107 020c 	add.w	r2, r7, #12
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	4413      	add	r3, r2
 80023ca:	7819      	ldrb	r1, [r3, #0]
 80023cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80023da:	441a      	add	r2, r3
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	4413      	add	r3, r2
 80023e0:	3b24      	subs	r3, #36	; 0x24
 80023e2:	460a      	mov	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]
        for(int reg_num = 0; reg_num < BTM_REG_GROUP_SIZE; reg_num++)
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	3301      	adds	r3, #1
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	ddb5      	ble.n	800235e <BTM_init+0x3a>
        }

        pack->stack[ic_num].stack_voltage = 0;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	21e8      	movs	r1, #232	; 0xe8
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3310      	adds	r3, #16
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002404:	2300      	movs	r3, #0
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
 8002408:	e03f      	b.n	800248a <BTM_init+0x166>
        {
            pack->stack[ic_num].module[module_num].enable = MODULE_ENABLED;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	22e8      	movs	r2, #232	; 0xe8
 800241a:	fb02 f200 	mul.w	r2, r2, r0
 800241e:	4413      	add	r3, r2
 8002420:	440b      	add	r3, r1
 8002422:	3314      	adds	r3, #20
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
            pack->stack[ic_num].module[module_num].voltage = 0;
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800242c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	22e8      	movs	r2, #232	; 0xe8
 8002438:	fb02 f200 	mul.w	r2, r2, r0
 800243c:	4413      	add	r3, r2
 800243e:	440b      	add	r3, r1
 8002440:	3316      	adds	r3, #22
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
            pack->stack[ic_num].module[module_num].temperature = 0.0;
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800244a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	22e8      	movs	r2, #232	; 0xe8
 8002456:	fb02 f200 	mul.w	r2, r2, r0
 800245a:	4413      	add	r3, r2
 800245c:	440b      	add	r3, r1
 800245e:	3318      	adds	r3, #24
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
            pack->stack[ic_num].module[module_num].status = 0; // clean code
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800246a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	22e8      	movs	r2, #232	; 0xe8
 8002476:	fb02 f200 	mul.w	r2, r2, r0
 800247a:	4413      	add	r3, r2
 800247c:	440b      	add	r3, r1
 800247e:	331c      	adds	r3, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	3301      	adds	r3, #1
 8002488:	637b      	str	r3, [r7, #52]	; 0x34
 800248a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248c:	2b11      	cmp	r3, #17
 800248e:	ddbc      	ble.n	800240a <BTM_init+0xe6>
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	3301      	adds	r3, #1
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002498:	2b01      	cmp	r3, #1
 800249a:	f67f af5d 	bls.w	8002358 <BTM_init+0x34>
        }

    }

    BTM_wakeup(); // Wake up all LTC6813's in the chain
 800249e:	f7ff ff25 	bl	80022ec <BTM_wakeup>
    BTM_writeRegisterGroup(CMD_WRCFGA, cfgra_to_write); // Write to Config. Reg. Group A
 80024a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a6:	4619      	mov	r1, r3
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 f905 	bl	80026b8 <BTM_writeRegisterGroup>
    BTM_writeRegisterGroup(CMD_WRCFGB, cfgrb_to_write); // Write to Config. Reg. Group B
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	2024      	movs	r0, #36	; 0x24
 80024b6:	f000 f8ff 	bl	80026b8 <BTM_writeRegisterGroup>
    return;
 80024ba:	bf00      	nop
}
 80024bc:	3740      	adds	r7, #64	; 0x40
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	08009c24 	.word	0x08009c24
 80024c8:	08009c2c 	.word	0x08009c2c

080024cc <BTM_sendCmd>:
 * this function.
 *
 * @param command The 2-byte command to send
 */
void BTM_sendCmd(BTM_command_t command)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
	uint16_t pecValue;
	uint8_t tx_message[4];

	tx_message[0] = (uint8_t) (command >> 8);
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	723b      	strb	r3, [r7, #8]
	tx_message[1] = (uint8_t) command;
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	727b      	strb	r3, [r7, #9]
	pecValue = BTM_calculatePec15(tx_message, 2);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fecb 	bl	8002288 <BTM_calculatePec15>
 80024f2:	4603      	mov	r3, r0
 80024f4:	81fb      	strh	r3, [r7, #14]
	tx_message[2] = (uint8_t) (pecValue >> 8);
 80024f6:	89fb      	ldrh	r3, [r7, #14]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	72bb      	strb	r3, [r7, #10]
	tx_message[3] = (uint8_t) pecValue;
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	72fb      	strb	r3, [r7, #11]

	// size parameter is number of bytes to transmit - here it's 4 8bit frames
	HAL_SPI_Transmit(BTM_SPI_handle, tx_message, 4, BTM_TIMEOUT_VAL);
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <BTM_sendCmd+0x54>)
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	f107 0108 	add.w	r1, r7, #8
 800250e:	231e      	movs	r3, #30
 8002510:	2204      	movs	r2, #4
 8002512:	f003 f8f7 	bl	8005704 <HAL_SPI_Transmit>
	return;
 8002516:	bf00      	nop
}
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000220 	.word	0x20000220

08002524 <BTM_sendCmdAndPoll>:
 * @param command The 2-byte (polling) command to send
 * @return 	Returns BTM_OK once LTC6813s have completed their conversions,
 			or BTM_ERROR_TIMEOUT upon timeout.
 */
BTM_Status_t BTM_sendCmdAndPoll(BTM_command_t command)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
    uint8_t rx_buffer = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
	uint32_t start_tick;
	HAL_StatusTypeDef status_HAL = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	BTM_Status_t status_BTM = {BTM_OK, 0};
 800253a:	2300      	movs	r3, #0
 800253c:	753b      	strb	r3, [r7, #20]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]

	BTM_writeCS(CS_LOW);
 8002542:	2000      	movs	r0, #0
 8002544:	f000 fb10 	bl	8002b68 <BTM_writeCS>

	BTM_sendCmd(command);
 8002548:	897b      	ldrh	r3, [r7, #10]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffbe 	bl	80024cc <BTM_sendCmd>

	start_tick = HAL_GetTick(); // Start timeout timer
 8002550:	f002 f832 	bl	80045b8 <HAL_GetTick>
 8002554:	6238      	str	r0, [r7, #32]

	// Poll for conversion completion; see "Polling Methods" in datasheet pg. 55-57)
	// Make sure MISO goes low...
	do
	{
		if (HAL_GetTick() - start_tick > BTM_TIMEOUT_VAL)
 8002556:	f002 f82f 	bl	80045b8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b1e      	cmp	r3, #30
 8002562:	d90d      	bls.n	8002580 <BTM_sendCmdAndPoll+0x5c>
		{
		    BTM_writeCS(CS_HIGH);
 8002564:	2001      	movs	r0, #1
 8002566:	f000 faff 	bl	8002b68 <BTM_writeCS>
		    status_BTM.error = BTM_ERROR_TIMEOUT; // LTC didn't respond before timeout
 800256a:	2302      	movs	r3, #2
 800256c:	753b      	strb	r3, [r7, #20]
			return status_BTM;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	461a      	mov	r2, r3
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	e893 0003 	ldmia.w	r3, {r0, r1}
 800257a:	e882 0003 	stmia.w	r2, {r0, r1}
 800257e:	e094      	b.n	80026aa <BTM_sendCmdAndPoll+0x186>
		}

		rx_buffer = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	77fb      	strb	r3, [r7, #31]
		status_HAL = HAL_SPI_Receive(BTM_SPI_handle, &rx_buffer, 1, BTM_TIMEOUT_VAL);
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <BTM_sendCmdAndPoll+0x190>)
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	f107 011f 	add.w	r1, r7, #31
 800258c:	231e      	movs	r3, #30
 800258e:	2201      	movs	r2, #1
 8002590:	f003 f9f4 	bl	800597c <HAL_SPI_Receive>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status_BTM = processHALStatus(status_HAL, BTM_STATUS_DEVICE_NA);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80025a2:	2200      	movs	r2, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fb43 	bl	8002c30 <processHALStatus>
		if (status_BTM.error != BTM_OK) return status_BTM;
 80025aa:	7d3b      	ldrb	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <BTM_sendCmdAndPoll+0x9e>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80025c0:	e073      	b.n	80026aa <BTM_sendCmdAndPoll+0x186>

	} while (0xff == rx_buffer);
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2bff      	cmp	r3, #255	; 0xff
 80025c6:	d0c6      	beq.n	8002556 <BTM_sendCmdAndPoll+0x32>
	// ... then wait for MISO to go high;
	// this signifies that the LTC6813s are done reading their ADCs.

	// Must send at least BTM_NUM_DEVICES clock pulses before response is valid
	// That's why there's an extra read initially - it's slight overkill but that's ok
	rx_buffer = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
	status_HAL = HAL_SPI_Receive(BTM_SPI_handle, &rx_buffer, 1, BTM_TIMEOUT_VAL);
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <BTM_sendCmdAndPoll+0x190>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f107 011f 	add.w	r1, r7, #31
 80025d4:	231e      	movs	r3, #30
 80025d6:	2201      	movs	r2, #1
 80025d8:	f003 f9d0 	bl	800597c <HAL_SPI_Receive>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	status_BTM = processHALStatus(status_HAL, BTM_STATUS_DEVICE_NA);
 80025e2:	463b      	mov	r3, r7
 80025e4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80025e8:	2200      	movs	r2, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fb20 	bl	8002c30 <processHALStatus>
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	463a      	mov	r2, r7
 80025f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025fa:	e883 0003 	stmia.w	r3, {r0, r1}
    if (status_BTM.error != BTM_OK) return status_BTM;
 80025fe:	7d3b      	ldrb	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <BTM_sendCmdAndPoll+0xf2>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002610:	e882 0003 	stmia.w	r2, {r0, r1}
 8002614:	e049      	b.n	80026aa <BTM_sendCmdAndPoll+0x186>

	do
	{
	    if (HAL_GetTick() - start_tick > BTM_TIMEOUT_VAL)
 8002616:	f001 ffcf 	bl	80045b8 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b1e      	cmp	r3, #30
 8002622:	d90d      	bls.n	8002640 <BTM_sendCmdAndPoll+0x11c>
        {
            BTM_writeCS(CS_HIGH);
 8002624:	2001      	movs	r0, #1
 8002626:	f000 fa9f 	bl	8002b68 <BTM_writeCS>
            status_BTM.error = BTM_ERROR_TIMEOUT; // LTC didn't respond before timeout
 800262a:	2302      	movs	r3, #2
 800262c:	753b      	strb	r3, [r7, #20]
            return status_BTM;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	461a      	mov	r2, r3
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	e893 0003 	ldmia.w	r3, {r0, r1}
 800263a:	e882 0003 	stmia.w	r2, {r0, r1}
 800263e:	e034      	b.n	80026aa <BTM_sendCmdAndPoll+0x186>
        }

		rx_buffer = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
		status_HAL = HAL_SPI_Receive(BTM_SPI_handle, &rx_buffer, 1, BTM_TIMEOUT_VAL);
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <BTM_sendCmdAndPoll+0x190>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f107 011f 	add.w	r1, r7, #31
 800264c:	231e      	movs	r3, #30
 800264e:	2201      	movs	r2, #1
 8002650:	f003 f994 	bl	800597c <HAL_SPI_Receive>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status_BTM = processHALStatus(status_HAL, BTM_STATUS_DEVICE_NA);
 800265a:	463b      	mov	r3, r7
 800265c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002660:	2200      	movs	r2, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fae4 	bl	8002c30 <processHALStatus>
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	463a      	mov	r2, r7
 800266e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002672:	e883 0003 	stmia.w	r3, {r0, r1}
		if (status_BTM.error != BTM_OK) return status_BTM;
 8002676:	7d3b      	ldrb	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <BTM_sendCmdAndPoll+0x16a>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	461a      	mov	r2, r3
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002688:	e882 0003 	stmia.w	r2, {r0, r1}
 800268c:	e00d      	b.n	80026aa <BTM_sendCmdAndPoll+0x186>

	} while (!rx_buffer);
 800268e:	7ffb      	ldrb	r3, [r7, #31]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0c0      	beq.n	8002616 <BTM_sendCmdAndPoll+0xf2>

	BTM_writeCS(CS_HIGH);
 8002694:	2001      	movs	r0, #1
 8002696:	f000 fa67 	bl	8002b68 <BTM_writeCS>

	return status_BTM;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	461a      	mov	r2, r3
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026a6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000220 	.word	0x20000220

080026b8 <BTM_writeRegisterGroup>:
 *					BTM_NUM_DEVICES x BTM_REG_GROUP_SIZE containing the data to write
 */
void BTM_writeRegisterGroup(
        BTM_command_t command,
        uint8_t tx_data[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE])
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	80fb      	strh	r3, [r7, #6]
	uint16_t pecValue = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	82fb      	strh	r3, [r7, #22]
	uint8_t tx_message[8];

	BTM_writeCS(CS_LOW);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 fa4d 	bl	8002b68 <BTM_writeCS>
	BTM_sendCmd(command);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fefb 	bl	80024cc <BTM_sendCmd>
	for (int i = 0; i < BTM_NUM_DEVICES; i++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e034      	b.n	8002746 <BTM_writeRegisterGroup+0x8e>
	{
		for (int j = 0; j < BTM_REG_GROUP_SIZE; j++)
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	e013      	b.n	800270a <BTM_writeRegisterGroup+0x52>
		{
			tx_message[j] = tx_data[i][j];
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	461a      	mov	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4413      	add	r3, r2
 80026f6:	7819      	ldrb	r1, [r3, #0]
 80026f8:	f107 020c 	add.w	r2, r7, #12
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	460a      	mov	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < BTM_REG_GROUP_SIZE; j++)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	3301      	adds	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b05      	cmp	r3, #5
 800270e:	dde8      	ble.n	80026e2 <BTM_writeRegisterGroup+0x2a>
		}
		pecValue = BTM_calculatePec15(tx_message, BTM_REG_GROUP_SIZE);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	2106      	movs	r1, #6
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fdb6 	bl	8002288 <BTM_calculatePec15>
 800271c:	4603      	mov	r3, r0
 800271e:	82fb      	strh	r3, [r7, #22]
		tx_message[6] = (uint8_t) (pecValue >> 8);
 8002720:	8afb      	ldrh	r3, [r7, #22]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	b29b      	uxth	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	74bb      	strb	r3, [r7, #18]
		tx_message[7] = (uint8_t) pecValue;
 800272a:	8afb      	ldrh	r3, [r7, #22]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	74fb      	strb	r3, [r7, #19]
		HAL_SPI_Transmit(BTM_SPI_handle, tx_message, 8, BTM_TIMEOUT_VAL);
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <BTM_writeRegisterGroup+0xa4>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f107 010c 	add.w	r1, r7, #12
 8002738:	231e      	movs	r3, #30
 800273a:	2208      	movs	r2, #8
 800273c:	f002 ffe2 	bl	8005704 <HAL_SPI_Transmit>
	for (int i = 0; i < BTM_NUM_DEVICES; i++)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d9c7      	bls.n	80026dc <BTM_writeRegisterGroup+0x24>
	}
	BTM_writeCS(CS_HIGH);
 800274c:	2001      	movs	r0, #1
 800274e:	f000 fa0b 	bl	8002b68 <BTM_writeCS>
	return;
 8002752:	bf00      	nop
}
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000220 	.word	0x20000220

08002760 <BTM_readRegisterGroup>:
			BTM_MAX_READ_ATTEMPTS tries
 */
BTM_Status_t BTM_readRegisterGroup(
        BTM_command_t command,
        uint8_t rx_data[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE])
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08e      	sub	sp, #56	; 0x38
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	460b      	mov	r3, r1
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	817b      	strh	r3, [r7, #10]
	uint16_t pecValue = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	84fb      	strh	r3, [r7, #38]	; 0x26
	BTM_Status_t status = {BTM_OK, 0};
 8002772:	2300      	movs	r3, #0
 8002774:	773b      	strb	r3, [r7, #28]
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
	HAL_StatusTypeDef status_HAL = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	// Initialize rx_message before using it, or the garbage it contains will be
	// sent as dummy data - see definition of HAL_SPI_Receive
	uint8_t rx_message[8] = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
	int ic_num = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
	int error_counter = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30

	// Try a maximum of BTM_MAX_READ_ATTEMPTS times to read register group
	do
	{
		// Send command to read register group
		BTM_writeCS(CS_LOW);
 8002792:	2000      	movs	r0, #0
 8002794:	f000 f9e8 	bl	8002b68 <BTM_writeCS>
		BTM_sendCmd(command);
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe96 	bl	80024cc <BTM_sendCmd>

		// Read back the data, but stop between device data groups on error
		// This will indicate to caller which LTC6813 is having problems, if problems are encountered
		ic_num = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
		// reset status before a new try
		status.error = BTM_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	773b      	strb	r3, [r7, #28]
		status.device_num = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
		while ((ic_num < BTM_NUM_DEVICES) && (status.error == BTM_OK))
 80027ac:	e066      	b.n	800287c <BTM_readRegisterGroup+0x11c>
		{
			// 6 data bytes + 2 PEC bytes = 8 bytes
		    status_HAL = HAL_SPI_Receive(BTM_SPI_handle, rx_message, 8, BTM_TIMEOUT_VAL);
 80027ae:	4b43      	ldr	r3, [pc, #268]	; (80028bc <BTM_readRegisterGroup+0x15c>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	f107 0114 	add.w	r1, r7, #20
 80027b6:	231e      	movs	r3, #30
 80027b8:	2208      	movs	r2, #8
 80027ba:	f003 f8df 	bl	800597c <HAL_SPI_Receive>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		    status = processHALStatus(status_HAL, ic_num + 1);
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	3301      	adds	r3, #1
 80027c8:	461a      	mov	r2, r3
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fa2c 	bl	8002c30 <processHALStatus>
            if (status.error != BTM_OK) return status;
 80027d8:	7f3b      	ldrb	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <BTM_readRegisterGroup+0x90>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	461a      	mov	r2, r3
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80027ee:	e060      	b.n	80028b2 <BTM_readRegisterGroup+0x152>

			pecValue = BTM_calculatePec15(rx_message, 8); // 0 if transfer was clean
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2108      	movs	r1, #8
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fd46 	bl	8002288 <BTM_calculatePec15>
 80027fc:	4603      	mov	r3, r0
 80027fe:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pecValue)
 8002800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002802:	2b00      	cmp	r3, #0
 8002804:	d014      	beq.n	8002830 <BTM_readRegisterGroup+0xd0>
			{
				status.error = BTM_ERROR_PEC;
 8002806:	2301      	movs	r3, #1
 8002808:	773b      	strb	r3, [r7, #28]
				status.device_num = ic_num + 1;
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	3301      	adds	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
				for(int i = 0; i < 8; i++)
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002814:	e008      	b.n	8002828 <BTM_readRegisterGroup+0xc8>
				{
					rx_message[i] = 0; // Clear buffer for next try
 8002816:	f107 0214 	add.w	r2, r7, #20
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	4413      	add	r3, r2
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 8; i++)
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	3301      	adds	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	2b07      	cmp	r3, #7
 800282c:	ddf3      	ble.n	8002816 <BTM_readRegisterGroup+0xb6>
 800282e:	e022      	b.n	8002876 <BTM_readRegisterGroup+0x116>
				}
			}
			else
			{
				for (int j = 0; j < 8; j++)
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
 8002834:	e01c      	b.n	8002870 <BTM_readRegisterGroup+0x110>
				{
					if (j < BTM_REG_GROUP_SIZE)
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	2b05      	cmp	r3, #5
 800283a:	dc10      	bgt.n	800285e <BTM_readRegisterGroup+0xfe>
					{
						rx_data[ic_num][j] = rx_message[j]; // Copy the data (no PEC)
 800283c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	441a      	add	r2, r3
 800284c:	f107 0114 	add.w	r1, r7, #20
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	440b      	add	r3, r1
 8002854:	7819      	ldrb	r1, [r3, #0]
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	4413      	add	r3, r2
 800285a:	460a      	mov	r2, r1
 800285c:	701a      	strb	r2, [r3, #0]
					}
					rx_message[j] = 0; // Clear rx_message for next loop
 800285e:	f107 0214 	add.w	r2, r7, #20
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	4413      	add	r3, r2
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 8; j++)
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	3301      	adds	r3, #1
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2b07      	cmp	r3, #7
 8002874:	dddf      	ble.n	8002836 <BTM_readRegisterGroup+0xd6>
				}
			}
			ic_num++;
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	3301      	adds	r3, #1
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
		while ((ic_num < BTM_NUM_DEVICES) && (status.error == BTM_OK))
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	2b01      	cmp	r3, #1
 8002880:	d802      	bhi.n	8002888 <BTM_readRegisterGroup+0x128>
 8002882:	7f3b      	ldrb	r3, [r7, #28]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d092      	beq.n	80027ae <BTM_readRegisterGroup+0x4e>
		}

		BTM_writeCS(CS_HIGH);
 8002888:	2001      	movs	r0, #1
 800288a:	f000 f96d 	bl	8002b68 <BTM_writeCS>
		error_counter++;
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	3301      	adds	r3, #1
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
	} while ((status.error != BTM_OK) && (error_counter < BTM_MAX_READ_ATTEMPTS));
 8002894:	7f3b      	ldrb	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <BTM_readRegisterGroup+0x142>
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	2b02      	cmp	r3, #2
 800289e:	f67f af78 	bls.w	8002792 <BTM_readRegisterGroup+0x32>

	return status;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	461a      	mov	r2, r3
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	3738      	adds	r7, #56	; 0x38
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000220 	.word	0x20000220

080028c0 <BTM_readBatt>:
 * @return 	Returns BTM_OK if all the received PECs are correct,
 *          BTM_ERROR_PEC if any PEC doesn't match, or BTM_ERROR_TIMEOUT
 *	        if a timeout occurs while polling.
 */
BTM_Status_t BTM_readBatt(BTM_PackData_t * packData)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b09f      	sub	sp, #124	; 0x7c
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
	// 6x 6-byte sets (each from a different register group of the LTC6813)
	uint8_t ADC_data[NUM_CELL_VOLT_REGS][BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
	uint16_t cell_voltage_raw = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	int cell_num = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
	BTM_Status_t status = {BTM_OK, 0};
 80028d4:	2300      	movs	r3, #0
 80028d6:	753b      	strb	r3, [r7, #20]
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]

	status = BTM_sendCmdAndPoll(CMD_ADCV);
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe1d 	bl	8002524 <BTM_sendCmdAndPoll>
	if (status.error != BTM_OK) return status;
 80028ea:	7d3b      	ldrb	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <BTM_readBatt+0x42>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028fc:	e882 0003 	stmia.w	r2, {r0, r1}
 8002900:	e111      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVA, ADC_data[0]);
 8002902:	463b      	mov	r3, r7
 8002904:	f107 021c 	add.w	r2, r7, #28
 8002908:	2104      	movs	r1, #4
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff28 	bl	8002760 <BTM_readRegisterGroup>
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	463a      	mov	r2, r7
 8002916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800291a:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 800291e:	7d3b      	ldrb	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <BTM_readBatt+0x76>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002930:	e882 0003 	stmia.w	r2, {r0, r1}
 8002934:	e0f7      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVB, ADC_data[1]);
 8002936:	4638      	mov	r0, r7
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	330c      	adds	r3, #12
 800293e:	461a      	mov	r2, r3
 8002940:	2106      	movs	r1, #6
 8002942:	f7ff ff0d 	bl	8002760 <BTM_readRegisterGroup>
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	463a      	mov	r2, r7
 800294c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002950:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 8002954:	7d3b      	ldrb	r3, [r7, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <BTM_readBatt+0xac>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	461a      	mov	r2, r3
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002966:	e882 0003 	stmia.w	r2, {r0, r1}
 800296a:	e0dc      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVC, ADC_data[2]);
 800296c:	4638      	mov	r0, r7
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	3318      	adds	r3, #24
 8002974:	461a      	mov	r2, r3
 8002976:	2108      	movs	r1, #8
 8002978:	f7ff fef2 	bl	8002760 <BTM_readRegisterGroup>
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	463a      	mov	r2, r7
 8002982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002986:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 800298a:	7d3b      	ldrb	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <BTM_readBatt+0xe2>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	e893 0003 	ldmia.w	r3, {r0, r1}
 800299c:	e882 0003 	stmia.w	r2, {r0, r1}
 80029a0:	e0c1      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVD, ADC_data[3]);
 80029a2:	4638      	mov	r0, r7
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	3324      	adds	r3, #36	; 0x24
 80029aa:	461a      	mov	r2, r3
 80029ac:	210a      	movs	r1, #10
 80029ae:	f7ff fed7 	bl	8002760 <BTM_readRegisterGroup>
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	463a      	mov	r2, r7
 80029b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029bc:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 80029c0:	7d3b      	ldrb	r3, [r7, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <BTM_readBatt+0x118>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	461a      	mov	r2, r3
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80029d6:	e0a6      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVE, ADC_data[4]);
 80029d8:	4638      	mov	r0, r7
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	3330      	adds	r3, #48	; 0x30
 80029e0:	461a      	mov	r2, r3
 80029e2:	2109      	movs	r1, #9
 80029e4:	f7ff febc 	bl	8002760 <BTM_readRegisterGroup>
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	463a      	mov	r2, r7
 80029ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f2:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 80029f6:	7d3b      	ldrb	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <BTM_readBatt+0x14e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a08:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a0c:	e08b      	b.n	8002b26 <BTM_readBatt+0x266>

	status = BTM_readRegisterGroup(CMD_RDCVF, ADC_data[5]);
 8002a0e:	4638      	mov	r0, r7
 8002a10:	f107 031c 	add.w	r3, r7, #28
 8002a14:	333c      	adds	r3, #60	; 0x3c
 8002a16:	461a      	mov	r2, r3
 8002a18:	210b      	movs	r1, #11
 8002a1a:	f7ff fea1 	bl	8002760 <BTM_readRegisterGroup>
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	463a      	mov	r2, r7
 8002a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a28:	e883 0003 	stmia.w	r3, {r0, r1}
	if (status.error != BTM_OK) return status;
 8002a2c:	7d3b      	ldrb	r3, [r7, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <BTM_readBatt+0x184>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	461a      	mov	r2, r3
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a3e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a42:	e070      	b.n	8002b26 <BTM_readBatt+0x266>
	// Each cell voltage is provided as a 16-bit value where
	// voltage = 0.0001V * raw value
	// Each 6-byte Cell Voltage Register Group holds 3 cell voltages
	// First 2 bytes of Cell Voltage Register Group A is C1V
	// Last 2 bytes of Cell Voltage Register Group D is C12V
	for (int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	677b      	str	r3, [r7, #116]	; 0x74
 8002a48:	e05f      	b.n	8002b0a <BTM_readBatt+0x24a>
	{
		for (int reg_group = 0; reg_group < NUM_CELL_VOLT_REGS; reg_group++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a4e:	e052      	b.n	8002af6 <BTM_readBatt+0x236>
		{
			for (int reading_num = 0; reading_num < READINGS_PER_REG; reading_num++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a54:	e049      	b.n	8002aea <BTM_readBatt+0x22a>
			{
				// Combine the 2 bytes of each cell voltage together
				cell_voltage_raw =
					((uint16_t) (ADC_data[reg_group][ic_num][2 * reading_num + 1]) << 8)
 8002a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	1c58      	adds	r0, r3, #1
 8002a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a60:	461a      	mov	r2, r3
 8002a62:	0052      	lsls	r2, r2, #1
 8002a64:	441a      	add	r2, r3
 8002a66:	0053      	lsls	r3, r2, #1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002a78:	4413      	add	r3, r2
 8002a7a:	4403      	add	r3, r0
 8002a7c:	3b5c      	subs	r3, #92	; 0x5c
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
					| (uint16_t) (ADC_data[reg_group][ic_num][2 * reading_num]);
 8002a82:	b218      	sxth	r0, r3
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	005c      	lsls	r4, r3, #1
 8002a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	0052      	lsls	r2, r2, #1
 8002a90:	441a      	add	r2, r3
 8002a92:	0053      	lsls	r3, r2, #1
 8002a94:	461a      	mov	r2, r3
 8002a96:	460b      	mov	r3, r1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	440b      	add	r3, r1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4423      	add	r3, r4
 8002aa8:	3b5c      	subs	r3, #92	; 0x5c
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b21b      	sxth	r3, r3
 8002aae:	4303      	orrs	r3, r0
 8002ab0:	b21b      	sxth	r3, r3
				cell_voltage_raw =
 8002ab2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				// Store in pack data structure
				cell_num = READINGS_PER_REG * reg_group + reading_num;
 8002ab6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ac0:	4413      	add	r3, r2
 8002ac2:	667b      	str	r3, [r7, #100]	; 0x64
				//voltages[ic_num][cell_num] = cell_voltage_raw;
				packData->stack[ic_num].module[cell_num].voltage = cell_voltage_raw;
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ac8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	22e8      	movs	r2, #232	; 0xe8
 8002ad4:	fb02 f200 	mul.w	r2, r2, r0
 8002ad8:	4413      	add	r3, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	3316      	adds	r3, #22
 8002ade:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8002ae2:	801a      	strh	r2, [r3, #0]
			for (int reading_num = 0; reading_num < READINGS_PER_REG; reading_num++)
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	ddb2      	ble.n	8002a56 <BTM_readBatt+0x196>
		for (int reg_group = 0; reg_group < NUM_CELL_VOLT_REGS; reg_group++)
 8002af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af2:	3301      	adds	r3, #1
 8002af4:	673b      	str	r3, [r7, #112]	; 0x70
 8002af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	dda9      	ble.n	8002a50 <BTM_readBatt+0x190>
			}
		}
		calculateStackVolts(packData, ic_num);
 8002afc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f000 f844 	bl	8002b8c <calculateStackVolts>
	for (int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b06:	3301      	adds	r3, #1
 8002b08:	677b      	str	r3, [r7, #116]	; 0x74
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d99c      	bls.n	8002a4a <BTM_readBatt+0x18a>
	}
	calculatePackVolts(packData);
 8002b10:	68b8      	ldr	r0, [r7, #8]
 8002b12:	f000 f86b 	bl	8002bec <calculatePackVolts>

	return status;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b22:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	377c      	adds	r7, #124	; 0x7c
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd90      	pop	{r4, r7, pc}
	...

08002b30 <BTM_regValToVoltage>:
 *
 * @param raw_reading The 16-bit reading from an LTC6813
 * @return Returns a properly scaled floating-point version of raw_reading
 */
float BTM_regValToVoltage(unsigned int raw_reading)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	return raw_reading * BTM_VOLTAGE_CONVERSION_FACTOR;
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fd fcbf 	bl	80004bc <__aeabi_ui2d>
 8002b3e:	a308      	add	r3, pc, #32	; (adr r3, 8002b60 <BTM_regValToVoltage+0x30>)
 8002b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b44:	f7fd fd34 	bl	80005b0 <__aeabi_dmul>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	4621      	mov	r1, r4
 8002b50:	f7fe f806 	bl	8000b60 <__aeabi_d2f>
 8002b54:	4603      	mov	r3, r0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	eb1c432d 	.word	0xeb1c432d
 8002b64:	3f1a36e2 	.word	0x3f1a36e2

08002b68 <BTM_writeCS>:
 * @brief Toggles the SPI Chip Select (CS) pin
 *
 * @param new_state The state (CS_HIGH or CS_LOW) to write to the CS pin
 */
void BTM_writeCS(CS_state_t new_state)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(BTM_CS_GPIO_PORT, BTM_CS_GPIO_PIN, new_state);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	461a      	mov	r2, r3
 8002b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b7a:	4803      	ldr	r0, [pc, #12]	; (8002b88 <BTM_writeCS+0x20>)
 8002b7c:	f002 f892 	bl	8004ca4 <HAL_GPIO_WritePin>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010c00 	.word	0x40010c00

08002b8c <calculateStackVolts>:
 *
 * @param[in/out] pack Battery pack data structure to perform sum for
 * @param[in] stack_num Index of the stack to calculate the total voltage of
 */
void calculateStackVolts(BTM_PackData_t* pack, int stack_num)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
    unsigned int sum = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]

    for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	e014      	b.n	8002bca <calculateStackVolts+0x3e>
    {
        sum += pack->stack[stack_num].module[module_num].voltage;
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	6838      	ldr	r0, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	22e8      	movs	r2, #232	; 0xe8
 8002bb0:	fb02 f200 	mul.w	r2, r2, r0
 8002bb4:	4413      	add	r3, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3316      	adds	r3, #22
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
    for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b11      	cmp	r3, #17
 8002bce:	dde7      	ble.n	8002ba0 <calculateStackVolts+0x14>
    }
    pack->stack[stack_num].stack_voltage = sum;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	21e8      	movs	r1, #232	; 0xe8
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3310      	adds	r3, #16
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]
    return;
 8002be2:	bf00      	nop
}
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <calculatePackVolts>:
 * @attention Each stack in the pack must have a valid stack voltage
 *  prior to calling this function
 * @param[in/out] pack Battery pack data structure to perform sums on
 */
void calculatePackVolts(BTM_PackData_t* pack)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
    unsigned int sum = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	e00d      	b.n	8002c1a <calculatePackVolts+0x2e>
    {
        sum += pack->stack[stack_num].stack_voltage;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	21e8      	movs	r1, #232	; 0xe8
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d9ee      	bls.n	8002bfe <calculatePackVolts+0x12>
    }
    pack->pack_voltage = sum;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]
    return;
 8002c26:	bf00      	nop
}
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <processHALStatus>:

// Helper function to translate a HAL error into a BTM error
BTM_Status_t processHALStatus(HAL_StatusTypeDef status_HAL, unsigned int device_num)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	72fb      	strb	r3, [r7, #11]
    BTM_Status_t status_BTM;
    status_BTM.error = BTM_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	743b      	strb	r3, [r7, #16]
    status_BTM.device_num = BTM_STATUS_DEVICE_NA;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]

    if (status_HAL != HAL_OK) {
 8002c46:	7afb      	ldrb	r3, [r7, #11]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <processHALStatus+0x28>
        status_BTM.error = status_HAL + BTM_HAL_ERROR_OFFSET;
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	3303      	adds	r3, #3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	743b      	strb	r3, [r7, #16]
        status_BTM.device_num = device_num;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	617b      	str	r3, [r7, #20]
    }

    return status_BTM;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c64:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <BTM_BAL_initDchPack>:
 * @brief Initialize all discharge settings of a setting pack to DISCHARGE_OFF
 *
 * @param[out] dch_pack discharge setting pack to write
 */
void BTM_BAL_initDchPack(BTM_BAL_dch_setting_pack_t* dch_pack)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e016      	b.n	8002cae <BTM_BAL_initDchPack+0x3c>
    {
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	e00d      	b.n	8002ca2 <BTM_BAL_initDchPack+0x30>
        {
            dch_pack->stack[stack_num].module_dch[module_num] = DISCHARGE_OFF;
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	18ca      	adds	r2, r1, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4413      	add	r3, r2
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
        for(int module_num = 0; module_num < BTM_NUM_MODULES; module_num++)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b11      	cmp	r3, #17
 8002ca6:	ddee      	ble.n	8002c86 <BTM_BAL_initDchPack+0x14>
    for(int stack_num = 0; stack_num < BTM_NUM_DEVICES; stack_num++)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d9e5      	bls.n	8002c80 <BTM_BAL_initDchPack+0xe>
        }
    }
    return;
 8002cb4:	bf00      	nop
}
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <BTM_BAL_setDischarge>:
 * @param[in] dch_setting_pack The discharge settings for the entire pack.
 */
void BTM_BAL_setDischarge(
    BTM_PackData_t* pack,
    BTM_BAL_dch_setting_pack_t* dch_setting_pack)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b090      	sub	sp, #64	; 0x40
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
    uint8_t cfgra_to_write[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE] = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
    uint8_t cfgrb_to_write[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE] = {0};
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
    BTM_module_bal_status_t module_bal_status = DISCHARGE_OFF;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    BTM_module_enable_t module_enable = MODULE_DISABLED;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    int module_i = 0; // index counter
 8002cec:	2300      	movs	r3, #0
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c

    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf4:	e1ea      	b.n	80030cc <BTM_BAL_setDischarge+0x40e>
    {
        // Iterate through the bytes of both CFGR registers for each LTC6813

        // Don't change all the bytes of the CFGRA/B register groups,
        // so copy most of the existing configuration
        for(int byte_num = 0; byte_num < BTM_REG_GROUP_SIZE; byte_num++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfa:	e033      	b.n	8002d64 <BTM_BAL_setDischarge+0xa6>
        {
            if (byte_num < 4) { // First 4 bytes
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	dc16      	bgt.n	8002d30 <BTM_BAL_setDischarge+0x72>
                cfgra_to_write[ic_num][byte_num] =
                    pack->stack[ic_num].cfgra[byte_num];
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	21e8      	movs	r1, #232	; 0xe8
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	441a      	add	r2, r3
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	7819      	ldrb	r1, [r3, #0]
                cfgra_to_write[ic_num][byte_num] =
 8002d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d24:	441a      	add	r2, r3
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	4413      	add	r3, r2
 8002d2a:	3b2c      	subs	r3, #44	; 0x2c
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
            }
            cfgrb_to_write[ic_num][byte_num] =
                pack->stack[ic_num].cfgrb[byte_num];
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	21e8      	movs	r1, #232	; 0xe8
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	441a      	add	r2, r3
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	4413      	add	r3, r2
 8002d40:	330a      	adds	r3, #10
 8002d42:	7819      	ldrb	r1, [r3, #0]
            cfgrb_to_write[ic_num][byte_num] =
 8002d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d52:	441a      	add	r2, r3
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	4413      	add	r3, r2
 8002d58:	3b38      	subs	r3, #56	; 0x38
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	701a      	strb	r2, [r3, #0]
        for(int byte_num = 0; byte_num < BTM_REG_GROUP_SIZE; byte_num++)
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d60:	3301      	adds	r3, #1
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	ddc8      	ble.n	8002cfc <BTM_BAL_setDischarge+0x3e>
        }
        // Clear DCC bits in CFGRB
        cfgrb_to_write[ic_num][0] &= 0x0F; // Clear upper 4 bits of 1st byte
 8002d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b38      	subs	r3, #56	; 0x38
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	b2d9      	uxtb	r1, r3
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002d92:	4413      	add	r3, r2
 8002d94:	3b38      	subs	r3, #56	; 0x38
 8002d96:	460a      	mov	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]
        cfgrb_to_write[ic_num][1] &= 0xFC; // Clear lowest 2 bits of 2nd byte
 8002d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002da8:	4413      	add	r3, r2
 8002daa:	3b37      	subs	r3, #55	; 0x37
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	b2d9      	uxtb	r1, r3
 8002db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b37      	subs	r3, #55	; 0x37
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	701a      	strb	r2, [r3, #0]

        // Now change the DCC bits, the balancing (discharge) settings

        // 5th byte of CFGRA - DCH setting for modules 1-8 (first 8 modules)
        for(int i = 0; i < 8; i++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dce:	e056      	b.n	8002e7e <BTM_BAL_setDischarge+0x1c0>
        {
            module_bal_status =
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	18ca      	adds	r2, r1, r3
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                dch_setting_pack->stack[ic_num].module_dch[i];
            module_enable = pack->stack[ic_num].module[i].enable;
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	22e8      	movs	r2, #232	; 0xe8
 8002df8:	fb02 f200 	mul.w	r2, r2, r0
 8002dfc:	4413      	add	r3, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	3314      	adds	r3, #20
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            // Set DCH bit for this module (cell)
            // but only if module is enabled
            cfgra_to_write[ic_num][4] |=
 8002e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e16:	4413      	add	r3, r2
 8002e18:	3b28      	subs	r3, #40	; 0x28
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b25a      	sxtb	r2, r3
                (module_bal_status & module_enable) << i;
 8002e1e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002e22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e26:	400b      	ands	r3, r1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
            cfgra_to_write[ic_num][4] |=
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	b2d9      	uxtb	r1, r3
 8002e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b28      	subs	r3, #40	; 0x28
 8002e4c:	460a      	mov	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
            // Update balancing status in pack data structure
            writeBalStatusBit(&(pack->stack[ic_num].module[module_i]), module_bal_status);
 8002e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e5c:	21e8      	movs	r1, #232	; 0xe8
 8002e5e:	fb01 f202 	mul.w	r2, r1, r2
 8002e62:	4413      	add	r3, r2
 8002e64:	3310      	adds	r3, #16
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f93e 	bl	80030f4 <writeBalStatusBit>
        for(int i = 0; i < 8; i++)
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	dda5      	ble.n	8002dd0 <BTM_BAL_setDischarge+0x112>
        }

        // 6th byte of CFGRA - DCH setting for modules 9-12
        for(int j = 0; j < 4; j++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e88:	e059      	b.n	8002f3e <BTM_BAL_setDischarge+0x280>
        {
            module_i = j + 8;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
            module_bal_status =
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	18ca      	adds	r2, r1, r3
 8002e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                dch_setting_pack->stack[ic_num].module_dch[module_i];
            module_enable = pack->stack[ic_num].module[module_i].enable;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	22e8      	movs	r2, #232	; 0xe8
 8002eb8:	fb02 f200 	mul.w	r2, r2, r0
 8002ebc:	4413      	add	r3, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            // Set DCH bit for this module (cell)
            // but only if module's enable flag is MODULE_ENABLED
            cfgra_to_write[ic_num][5] |=
 8002ec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b27      	subs	r3, #39	; 0x27
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b25a      	sxtb	r2, r3
                (module_bal_status & module_enable) << j;
 8002ede:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002ee2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
            cfgra_to_write[ic_num][5] |=
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	b2d9      	uxtb	r1, r3
 8002efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b27      	subs	r3, #39	; 0x27
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	701a      	strb	r2, [r3, #0]
            // Update balancing status in pack data structure
            writeBalStatusBit(&(pack->stack[ic_num].module[module_i]), module_bal_status);
 8002f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f1c:	21e8      	movs	r1, #232	; 0xe8
 8002f1e:	fb01 f202 	mul.w	r2, r1, r2
 8002f22:	4413      	add	r3, r2
 8002f24:	3310      	adds	r3, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f8de 	bl	80030f4 <writeBalStatusBit>
        for(int j = 0; j < 4; j++)
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	dda2      	ble.n	8002e8a <BTM_BAL_setDischarge+0x1cc>
        }

        // 1st byte of CFGRB - DCH setting for modules 13-16
        for(int k = 0; k < 4; k++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f48:	e05a      	b.n	8003000 <BTM_BAL_setDischarge+0x342>
        {
            module_i = k + 12;
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
            module_bal_status =
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	18ca      	adds	r2, r1, r3
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	4413      	add	r3, r2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                dch_setting_pack->stack[ic_num].module_dch[module_i];
            module_enable = pack->stack[ic_num].module[module_i].enable;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	22e8      	movs	r2, #232	; 0xe8
 8002f78:	fb02 f200 	mul.w	r2, r2, r0
 8002f7c:	4413      	add	r3, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3314      	adds	r3, #20
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            // Set DCH bit for this module (cell)
            // but only if module's enable flag is MODULE_ENABLED
            cfgrb_to_write[ic_num][0] |=
 8002f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f96:	4413      	add	r3, r2
 8002f98:	3b38      	subs	r3, #56	; 0x38
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b25a      	sxtb	r2, r3
                (module_bal_status & module_enable) << (k + 4);
 8002f9e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8002fa2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4619      	mov	r1, r3
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	3304      	adds	r3, #4
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
            cfgrb_to_write[ic_num][0] |=
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	b2d9      	uxtb	r1, r3
 8002fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b38      	subs	r3, #56	; 0x38
 8002fce:	460a      	mov	r2, r1
 8002fd0:	701a      	strb	r2, [r3, #0]
            // Update balancing status in pack data structure
            writeBalStatusBit(&(pack->stack[ic_num].module[module_i]), module_bal_status);
 8002fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fde:	21e8      	movs	r1, #232	; 0xe8
 8002fe0:	fb01 f202 	mul.w	r2, r1, r2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f87d 	bl	80030f4 <writeBalStatusBit>
        for(int k = 0; k < 4; k++)
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	2b03      	cmp	r3, #3
 8003004:	dda1      	ble.n	8002f4a <BTM_BAL_setDischarge+0x28c>
        }

        // 2nd byte of CFGRB - DCH setting for modules 17 and 18
        for(int l = 0; l < 2; l++)
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
 800300a:	e059      	b.n	80030c0 <BTM_BAL_setDischarge+0x402>
        {
            module_i = l + 16;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	3310      	adds	r3, #16
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
            module_bal_status =
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	18ca      	adds	r2, r1, r3
 8003020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                dch_setting_pack->stack[ic_num].module_dch[module_i];
            module_enable = pack->stack[ic_num].module[module_i].enable;
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	22e8      	movs	r2, #232	; 0xe8
 800303a:	fb02 f200 	mul.w	r2, r2, r0
 800303e:	4413      	add	r3, r2
 8003040:	440b      	add	r3, r1
 8003042:	3314      	adds	r3, #20
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            // Set DCH bit for this module (cell)
            // but only if module's enable flag is MODULE_ENABLED
            cfgrb_to_write[ic_num][1] |=
 800304a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003058:	4413      	add	r3, r2
 800305a:	3b37      	subs	r3, #55	; 0x37
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b25a      	sxtb	r2, r3
                (module_bal_status & module_enable) << l;
 8003060:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003064:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003068:	400b      	ands	r3, r1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
            cfgrb_to_write[ic_num][1] |=
 8003074:	b25b      	sxtb	r3, r3
 8003076:	4313      	orrs	r3, r2
 8003078:	b25b      	sxtb	r3, r3
 800307a:	b2d9      	uxtb	r1, r3
 800307c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800308a:	4413      	add	r3, r2
 800308c:	3b37      	subs	r3, #55	; 0x37
 800308e:	460a      	mov	r2, r1
 8003090:	701a      	strb	r2, [r3, #0]
            // Update balancing status in pack data structure
            writeBalStatusBit(&(pack->stack[ic_num].module[module_i]), module_bal_status);
 8003092:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800309e:	21e8      	movs	r1, #232	; 0xe8
 80030a0:	fb01 f202 	mul.w	r2, r1, r2
 80030a4:	4413      	add	r3, r2
 80030a6:	3310      	adds	r3, #16
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f81d 	bl	80030f4 <writeBalStatusBit>
        for(int l = 0; l < 2; l++)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	3301      	adds	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	dda2      	ble.n	800300c <BTM_BAL_setDischarge+0x34e>
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 80030c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c8:	3301      	adds	r3, #1
 80030ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	f67f ae11 	bls.w	8002cf6 <BTM_BAL_setDischarge+0x38>
        }
    }

    BTM_writeRegisterGroup(CMD_WRCFGA, cfgra_to_write);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	2001      	movs	r0, #1
 80030dc:	f7ff faec 	bl	80026b8 <BTM_writeRegisterGroup>
    BTM_writeRegisterGroup(CMD_WRCFGA, cfgrb_to_write);
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	4619      	mov	r1, r3
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7ff fae6 	bl	80026b8 <BTM_writeRegisterGroup>

    return;
 80030ec:	bf00      	nop
}
 80030ee:	3740      	adds	r7, #64	; 0x40
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <writeBalStatusBit>:


void writeBalStatusBit(struct BTM_module * module, BTM_module_bal_status_t bal_status)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
    if (bal_status == DISCHARGE_ON)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <writeBalStatusBit+0x20>
        module->status |= BMS_TRIP_BAL; // Set TRIP_BAL bit
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	609a      	str	r2, [r3, #8]
    else
        module->status &= ~BMS_TRIP_BAL; // Clear TRIP_BAL bit
    return;
 8003112:	e006      	b.n	8003122 <writeBalStatusBit+0x2e>
        module->status &= ~BMS_TRIP_BAL; // Clear TRIP_BAL bit
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	609a      	str	r2, [r3, #8]
    return;
 8003120:	bf00      	nop
}
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <BTM_TEMP_measureState>:
Internal functions:
readThermistorVoltage()
volts2temp()
*/
BTM_Status_t BTM_TEMP_measureState(BTM_PackData_t* pack)
{
 800312a:	b590      	push	{r4, r7, lr}
 800312c:	b0c9      	sub	sp, #292	; 0x124
 800312e:	af06      	add	r7, sp, #24
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	6019      	str	r1, [r3, #0]
    uint16_t GPIO1_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003138:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
    uint16_t GPIO2_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003142:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
    uint16_t GPIO3_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 800314c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
    uint16_t GPIO4_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003156:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
    uint16_t GPIO6_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003160:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
    uint16_t GPIO7_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 800316a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
    uint16_t GPIO8_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003174:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
    uint16_t GPIO9_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 800317e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
    uint16_t REF2_voltage[MUX_CHANNELS][BTM_NUM_DEVICES] = {0};
 8003188:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
    float temp_celsius[NUM_GPIOS][MUX_CHANNELS][BTM_NUM_DEVICES];
    BTM_Status_t status = {BTM_OK, 0};
 8003192:	2300      	movs	r3, #0
 8003194:	773b      	strb	r3, [r7, #28]
 8003196:	2300      	movs	r3, #0
 8003198:	623b      	str	r3, [r7, #32]
    uint8_t cfgra_to_write[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    // For data copy to pack data:
    int module_num = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    // Refer to the LTC6813 datasheet pages 60 and 65 for format and content of config_val
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80031a6:	e06f      	b.n	8003288 <BTM_TEMP_measureState+0x15e>
        for(int reg_num = 0; reg_num < BTM_REG_GROUP_SIZE; reg_num++) {
 80031a8:	2300      	movs	r3, #0
 80031aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031ae:	e062      	b.n	8003276 <BTM_TEMP_measureState+0x14c>
            cfgra_to_write[ic_num][reg_num] =  pack->stack[ic_num].cfgra[reg_num];
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80031ba:	21e8      	movs	r1, #232	; 0xe8
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	441a      	add	r2, r3
 80031c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	7819      	ldrb	r1, [r3, #0]
 80031cc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80031dc:	441a      	add	r2, r3
 80031de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e2:	4413      	add	r3, r2
 80031e4:	3bf8      	subs	r3, #248	; 0xf8
 80031e6:	460a      	mov	r2, r1
 80031e8:	701a      	strb	r2, [r3, #0]
            if (reg_num == 0)
 80031ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d13c      	bne.n	800326c <BTM_TEMP_measureState+0x142>
            {
                cfgra_to_write[ic_num][reg_num] &= ~GPIO_5_TOGGLE; // GPIO 5 = 0
 80031f2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003202:	441a      	add	r2, r3
 8003204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003208:	4413      	add	r3, r2
 800320a:	3bf8      	subs	r3, #248	; 0xf8
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003212:	b2d9      	uxtb	r1, r3
 8003214:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003224:	441a      	add	r2, r3
 8003226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322a:	4413      	add	r3, r2
 800322c:	3bf8      	subs	r3, #248	; 0xf8
 800322e:	460a      	mov	r2, r1
 8003230:	701a      	strb	r2, [r3, #0]
                // update the stored configuration register
                pack->stack[ic_num].cfgra[reg_num] = cfgra_to_write[ic_num][reg_num];
 8003232:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003242:	441a      	add	r2, r3
 8003244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003248:	4413      	add	r3, r2
 800324a:	3bf8      	subs	r3, #248	; 0xf8
 800324c:	7818      	ldrb	r0, [r3, #0]
 800324e:	f107 0308 	add.w	r3, r7, #8
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003258:	21e8      	movs	r1, #232	; 0xe8
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	441a      	add	r2, r3
 8003260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	4602      	mov	r2, r0
 800326a:	701a      	strb	r2, [r3, #0]
        for(int reg_num = 0; reg_num < BTM_REG_GROUP_SIZE; reg_num++) {
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003270:	3301      	adds	r3, #1
 8003272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327a:	2b05      	cmp	r3, #5
 800327c:	dd98      	ble.n	80031b0 <BTM_TEMP_measureState+0x86>
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 800327e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003282:	3301      	adds	r3, #1
 8003284:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003288:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800328c:	2b01      	cmp	r3, #1
 800328e:	d98b      	bls.n	80031a8 <BTM_TEMP_measureState+0x7e>
            }
        }
    }

    BTM_writeRegisterGroup(CMD_WRCFGA, cfgra_to_write);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4619      	mov	r1, r3
 8003296:	2001      	movs	r0, #1
 8003298:	f7ff fa0e 	bl	80026b8 <BTM_writeRegisterGroup>

    // perform readings for channel 0
    status = readThermistorVoltage
 800329c:	f107 001c 	add.w	r0, r7, #28
 80032a0:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 80032a4:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80032a8:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80032ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032b0:	9305      	str	r3, [sp, #20]
 80032b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032b6:	9304      	str	r3, [sp, #16]
 80032b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032bc:	9303      	str	r3, [sp, #12]
 80032be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4623      	mov	r3, r4
 80032d2:	f000 f9b8 	bl	8003646 <readThermistorVoltage>
        GPIO8_voltage[0],
		GPIO9_voltage[0],
        REF2_voltage[0]
    );

    if (status.error != BTM_OK)
 80032d6:	7f3b      	ldrb	r3, [r7, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <BTM_TEMP_measureState+0x1c4>
        return status;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	461a      	mov	r2, r3
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80032ec:	e1a6      	b.n	800363c <BTM_TEMP_measureState+0x512>

    // This can't be rewritten as a for loop with separate arrays for each GPIO voltage
    volts2temp(GPIO1_voltage[0], REF2_voltage[0], temp_celsius[0][0]);
 80032ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80032f2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80032f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fb74 	bl	80039e8 <volts2temp>
    volts2temp(GPIO2_voltage[0], REF2_voltage[0], temp_celsius[1][0]);
 8003300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003304:	f103 0210 	add.w	r2, r3, #16
 8003308:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800330c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fb69 	bl	80039e8 <volts2temp>
    volts2temp(GPIO3_voltage[0], REF2_voltage[0], temp_celsius[2][0]);
 8003316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331a:	f103 0220 	add.w	r2, r3, #32
 800331e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fb5e 	bl	80039e8 <volts2temp>
    volts2temp(GPIO4_voltage[0], REF2_voltage[0], temp_celsius[3][0]);
 800332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003334:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003338:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fb53 	bl	80039e8 <volts2temp>
    volts2temp(GPIO6_voltage[0], REF2_voltage[0], temp_celsius[4][0]);
 8003342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003346:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800334a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800334e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb48 	bl	80039e8 <volts2temp>
    volts2temp(GPIO7_voltage[0], REF2_voltage[0], temp_celsius[5][0]);
 8003358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003360:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003364:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb3d 	bl	80039e8 <volts2temp>
    volts2temp(GPIO8_voltage[0], REF2_voltage[0], temp_celsius[6][0]);
 800336e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003372:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003376:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800337a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb32 	bl	80039e8 <volts2temp>
    volts2temp(GPIO9_voltage[0], REF2_voltage[0], temp_celsius[7][0]);
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800338c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8003390:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fb27 	bl	80039e8 <volts2temp>

    // Switch to the other side of the muxes
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 800339a:	2300      	movs	r3, #0
 800339c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033a0:	e035      	b.n	800340e <BTM_TEMP_measureState+0x2e4>
        cfgra_to_write[ic_num][0] |= GPIO_5_TOGGLE; // GPIO 5 = 1
 80033a2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80033b2:	4413      	add	r3, r2
 80033b4:	3bf8      	subs	r3, #248	; 0xf8
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033bc:	b2d9      	uxtb	r1, r3
 80033be:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80033c2:	4613      	mov	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	4413      	add	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80033ce:	4413      	add	r3, r2
 80033d0:	3bf8      	subs	r3, #248	; 0xf8
 80033d2:	460a      	mov	r2, r1
 80033d4:	701a      	strb	r2, [r3, #0]
        // update the stored configuration register
        pack->stack[ic_num].cfgra[0] = cfgra_to_write[ic_num][0];
 80033d6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80033e6:	4413      	add	r3, r2
 80033e8:	3bf8      	subs	r3, #248	; 0xf8
 80033ea:	7818      	ldrb	r0, [r3, #0]
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033f6:	21e8      	movs	r1, #232	; 0xe8
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3304      	adds	r3, #4
 8003400:	4602      	mov	r2, r0
 8003402:	701a      	strb	r2, [r3, #0]
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++) {
 8003404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003408:	3301      	adds	r3, #1
 800340a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800340e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003412:	2b01      	cmp	r3, #1
 8003414:	d9c5      	bls.n	80033a2 <BTM_TEMP_measureState+0x278>
    }

    BTM_writeRegisterGroup(CMD_WRCFGA, cfgra_to_write);
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4619      	mov	r1, r3
 800341c:	2001      	movs	r0, #1
 800341e:	f7ff f94b 	bl	80026b8 <BTM_writeRegisterGroup>

    status = readThermistorVoltage
 8003422:	4638      	mov	r0, r7
 8003424:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003428:	1d1c      	adds	r4, r3, #4
 800342a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003434:	1d19      	adds	r1, r3, #4
 8003436:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800343a:	3304      	adds	r3, #4
 800343c:	9305      	str	r3, [sp, #20]
 800343e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003442:	3304      	adds	r3, #4
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800344a:	3304      	adds	r3, #4
 800344c:	9303      	str	r3, [sp, #12]
 800344e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003452:	3304      	adds	r3, #4
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800345a:	3304      	adds	r3, #4
 800345c:	9301      	str	r3, [sp, #4]
 800345e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003462:	3304      	adds	r3, #4
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4623      	mov	r3, r4
 8003468:	f000 f8ed 	bl	8003646 <readThermistorVoltage>
 800346c:	463a      	mov	r2, r7
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003476:	e883 0003 	stmia.w	r3, {r0, r1}
        GPIO8_voltage[1],
        GPIO9_voltage[1],
        REF2_voltage[1]
    );

    if (status.error != BTM_OK)
 800347a:	7f3b      	ldrb	r3, [r7, #28]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <BTM_TEMP_measureState+0x368>
        return status;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	461a      	mov	r2, r3
 8003484:	f107 031c 	add.w	r3, r7, #28
 8003488:	e893 0003 	ldmia.w	r3, {r0, r1}
 800348c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003490:	e0d4      	b.n	800363c <BTM_TEMP_measureState+0x512>

    volts2temp(GPIO1_voltage[1], REF2_voltage[1], temp_celsius[0][1]);
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	f103 0208 	add.w	r2, r3, #8
 800349a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800349e:	1d19      	adds	r1, r3, #4
 80034a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034a4:	3304      	adds	r3, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fa9e 	bl	80039e8 <volts2temp>
    volts2temp(GPIO2_voltage[1], REF2_voltage[1], temp_celsius[1][1]);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	f103 0218 	add.w	r2, r3, #24
 80034b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034b8:	1d19      	adds	r1, r3, #4
 80034ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa91 	bl	80039e8 <volts2temp>
    volts2temp(GPIO3_voltage[1], REF2_voltage[1], temp_celsius[2][1]);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80034ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034d2:	1d19      	adds	r1, r3, #4
 80034d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034d8:	3304      	adds	r3, #4
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa84 	bl	80039e8 <volts2temp>
    volts2temp(GPIO4_voltage[1], REF2_voltage[1], temp_celsius[3][1]);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80034e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80034ec:	1d19      	adds	r1, r3, #4
 80034ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034f2:	3304      	adds	r3, #4
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fa77 	bl	80039e8 <volts2temp>
    volts2temp(GPIO6_voltage[1], REF2_voltage[1], temp_celsius[4][1]);
 80034fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003506:	1d19      	adds	r1, r3, #4
 8003508:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa6a 	bl	80039e8 <volts2temp>
    volts2temp(GPIO7_voltage[1], REF2_voltage[1], temp_celsius[5][1]);
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800351c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003520:	1d19      	adds	r1, r3, #4
 8003522:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003526:	3304      	adds	r3, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fa5d 	bl	80039e8 <volts2temp>
    volts2temp(GPIO8_voltage[1], REF2_voltage[1], temp_celsius[6][1]);
 800352e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003532:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003536:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800353a:	1d19      	adds	r1, r3, #4
 800353c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fa50 	bl	80039e8 <volts2temp>
    volts2temp(GPIO9_voltage[1], REF2_voltage[1], temp_celsius[7][1]);
 8003548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800354c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003550:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003554:	1d19      	adds	r1, r3, #4
 8003556:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800355a:	3304      	adds	r3, #4
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fa43 	bl	80039e8 <volts2temp>

    // Copy gathered temperature data to pack data structure
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003568:	e05c      	b.n	8003624 <BTM_TEMP_measureState+0x4fa>
    {
        for(int gpio_num = 0; gpio_num < NUM_GPIOS; gpio_num++) {
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003570:	e04c      	b.n	800360c <BTM_TEMP_measureState+0x4e2>
            for(int mux_channel = 0; mux_channel < MUX_CHANNELS; mux_channel++) {
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003578:	e03f      	b.n	80035fa <BTM_TEMP_measureState+0x4d0>
                pack->stack[ic_num].module[module_num].temperature =
                    temp_celsius[gpio_num][mux_channel][ic_num];
 800357a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800357e:	005a      	lsls	r2, r3, #1
 8003580:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003584:	4413      	add	r3, r2
 8003586:	005a      	lsls	r2, r3, #1
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003594:	4413      	add	r3, r2
 8003596:	f853 1ce4 	ldr.w	r1, [r3, #-228]
                pack->stack[ic_num].module[module_num].temperature =
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80035a4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	22e8      	movs	r2, #232	; 0xe8
 80035b2:	fb02 f204 	mul.w	r2, r2, r4
 80035b6:	4413      	add	r3, r2
 80035b8:	4403      	add	r3, r0
 80035ba:	3318      	adds	r3, #24
 80035bc:	6019      	str	r1, [r3, #0]
                // Skip disabled module(s)
                do {
                    module_num++;
 80035be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c2:	3301      	adds	r3, #1
 80035c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                } while (pack->stack[ic_num].module[module_num].enable == MODULE_DISABLED);
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80035d2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	22e8      	movs	r2, #232	; 0xe8
 80035e0:	fb02 f200 	mul.w	r2, r2, r0
 80035e4:	4413      	add	r3, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	3314      	adds	r3, #20
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0e6      	beq.n	80035be <BTM_TEMP_measureState+0x494>
            for(int mux_channel = 0; mux_channel < MUX_CHANNELS; mux_channel++) {
 80035f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035f4:	3301      	adds	r3, #1
 80035f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035fe:	2b01      	cmp	r3, #1
 8003600:	ddbb      	ble.n	800357a <BTM_TEMP_measureState+0x450>
        for(int gpio_num = 0; gpio_num < NUM_GPIOS; gpio_num++) {
 8003602:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003606:	3301      	adds	r3, #1
 8003608:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800360c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003610:	2b07      	cmp	r3, #7
 8003612:	ddae      	ble.n	8003572 <BTM_TEMP_measureState+0x448>

            }
        }
		module_num = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    for(int ic_num = 0; ic_num < BTM_NUM_DEVICES; ic_num++)
 800361a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361e:	3301      	adds	r3, #1
 8003620:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	2b01      	cmp	r3, #1
 800362a:	d99e      	bls.n	800356a <BTM_TEMP_measureState+0x440>
    }

    return status;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003638:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}

08003646 <readThermistorVoltage>:
    uint16_t GPIO7_voltage[BTM_NUM_DEVICES],
    uint16_t GPIO8_voltage[BTM_NUM_DEVICES],
    uint16_t GPIO9_voltage[BTM_NUM_DEVICES],
    uint16_t REF2_voltage[BTM_NUM_DEVICES]
)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b096      	sub	sp, #88	; 0x58
 800364a:	af00      	add	r7, sp, #0
 800364c:	6178      	str	r0, [r7, #20]
 800364e:	6139      	str	r1, [r7, #16]
 8003650:	60fa      	str	r2, [r7, #12]
 8003652:	60bb      	str	r3, [r7, #8]
    uint8_t registerAUXA_voltages[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    uint8_t registerAUXB_voltages[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    uint8_t registerAUXC_voltages[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    uint8_t registerAUXD_voltages[BTM_NUM_DEVICES][BTM_REG_GROUP_SIZE];
    uint16_t voltage_reading = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    BTM_Status_t status = {BTM_OK, 0};
 800365a:	2300      	movs	r3, #0
 800365c:	763b      	strb	r3, [r7, #24]
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
    //start conversion
    //ADAX, ADC AuXillary start-conversion command
    status = BTM_sendCmdAndPoll(CMD_ADAX_ALL);
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	f44f 61ac 	mov.w	r1, #1376	; 0x560
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe ff5a 	bl	8002524 <BTM_sendCmdAndPoll>
    if (status.error != BTM_OK) return status; // There's a communication problem
 8003670:	7e3b      	ldrb	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <readThermistorVoltage+0x42>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	461a      	mov	r2, r3
 800367a:	f107 0318 	add.w	r3, r7, #24
 800367e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003682:	e882 0003 	stmia.w	r2, {r0, r1}
 8003686:	e1ab      	b.n	80039e0 <readThermistorVoltage+0x39a>

    //retrieve register readings
    status = BTM_readRegisterGroup(CMD_RDAUXA, registerAUXA_voltages);
 8003688:	463b      	mov	r3, r7
 800368a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800368e:	210c      	movs	r1, #12
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff f865 	bl	8002760 <BTM_readRegisterGroup>
 8003696:	f107 0318 	add.w	r3, r7, #24
 800369a:	463a      	mov	r2, r7
 800369c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (status.error != BTM_OK) return status; // There's a communication problem
 80036a4:	7e3b      	ldrb	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <readThermistorVoltage+0x76>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80036ba:	e191      	b.n	80039e0 <readThermistorVoltage+0x39a>
    status = BTM_readRegisterGroup(CMD_RDAUXB, registerAUXB_voltages);
 80036bc:	463b      	mov	r3, r7
 80036be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036c2:	210e      	movs	r1, #14
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f84b 	bl	8002760 <BTM_readRegisterGroup>
 80036ca:	f107 0318 	add.w	r3, r7, #24
 80036ce:	463a      	mov	r2, r7
 80036d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036d4:	e883 0003 	stmia.w	r3, {r0, r1}
    if (status.error != BTM_OK) return status; // There's a communication problem
 80036d8:	7e3b      	ldrb	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <readThermistorVoltage+0xaa>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	461a      	mov	r2, r3
 80036e2:	f107 0318 	add.w	r3, r7, #24
 80036e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80036ee:	e177      	b.n	80039e0 <readThermistorVoltage+0x39a>
    status = BTM_readRegisterGroup(CMD_RDAUXC, registerAUXC_voltages);
 80036f0:	463b      	mov	r3, r7
 80036f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80036f6:	210d      	movs	r1, #13
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff f831 	bl	8002760 <BTM_readRegisterGroup>
 80036fe:	f107 0318 	add.w	r3, r7, #24
 8003702:	463a      	mov	r2, r7
 8003704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003708:	e883 0003 	stmia.w	r3, {r0, r1}
    if (status.error != BTM_OK) return status; // There's a communication problem
 800370c:	7e3b      	ldrb	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <readThermistorVoltage+0xde>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	461a      	mov	r2, r3
 8003716:	f107 0318 	add.w	r3, r7, #24
 800371a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800371e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003722:	e15d      	b.n	80039e0 <readThermistorVoltage+0x39a>
    status = BTM_readRegisterGroup(CMD_RDAUXD, registerAUXD_voltages);
 8003724:	463b      	mov	r3, r7
 8003726:	f107 0220 	add.w	r2, r7, #32
 800372a:	210f      	movs	r1, #15
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f817 	bl	8002760 <BTM_readRegisterGroup>
 8003732:	f107 0318 	add.w	r3, r7, #24
 8003736:	463a      	mov	r2, r7
 8003738:	e892 0003 	ldmia.w	r2, {r0, r1}
 800373c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (status.error != BTM_OK) return status; // There's a communication problem
 8003740:	7e3b      	ldrb	r3, [r7, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <readThermistorVoltage+0x112>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	461a      	mov	r2, r3
 800374a:	f107 0318 	add.w	r3, r7, #24
 800374e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003752:	e882 0003 	stmia.w	r2, {r0, r1}
 8003756:	e143      	b.n	80039e0 <readThermistorVoltage+0x39a>

    //output reading by assigning to pointed array the first two bytes of registerAUXA_voltages
    for (int board = 0; board < BTM_NUM_DEVICES; board++)
 8003758:	2300      	movs	r3, #0
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
 800375c:	e134      	b.n	80039c8 <readThermistorVoltage+0x382>
    {
        // Combine 2 bytes of voltage reading
        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][1]) << 8)
 800375e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800376c:	4413      	add	r3, r2
 800376e:	3b13      	subs	r3, #19
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	021b      	lsls	r3, r3, #8
            | registerAUXA_voltages[board][0];
 8003774:	b219      	sxth	r1, r3
 8003776:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003784:	4413      	add	r3, r2
 8003786:	3b14      	subs	r3, #20
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b21b      	sxth	r3, r3
 800378c:	430b      	orrs	r3, r1
 800378e:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][1]) << 8)
 8003790:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        // Store in given array
        GPIO1_voltage[board] = voltage_reading;
 8003794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80037a0:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][3]) << 8)
 80037a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80037b0:	4413      	add	r3, r2
 80037b2:	3b11      	subs	r3, #17
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	021b      	lsls	r3, r3, #8
            | registerAUXA_voltages[board][2];
 80037b8:	b219      	sxth	r1, r3
 80037ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80037c8:	4413      	add	r3, r2
 80037ca:	3b12      	subs	r3, #18
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	430b      	orrs	r3, r1
 80037d2:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][3]) << 8)
 80037d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO2_voltage[board] = voltage_reading;
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80037e4:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][5]) << 8)
 80037e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80037f4:	4413      	add	r3, r2
 80037f6:	3b0f      	subs	r3, #15
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	021b      	lsls	r3, r3, #8
            | registerAUXA_voltages[board][4];
 80037fc:	b219      	sxth	r1, r3
 80037fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800380c:	4413      	add	r3, r2
 800380e:	3b10      	subs	r3, #16
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b21b      	sxth	r3, r3
 8003814:	430b      	orrs	r3, r1
 8003816:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXA_voltages[board][5]) << 8)
 8003818:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO3_voltage[board] = voltage_reading;
 800381c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	4413      	add	r3, r2
 8003824:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8003828:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXB_voltages[board][1]) << 8)
 800382a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800382c:	4613      	mov	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003838:	4413      	add	r3, r2
 800383a:	3b1f      	subs	r3, #31
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	021b      	lsls	r3, r3, #8
            | registerAUXB_voltages[board][0];
 8003840:	b219      	sxth	r1, r3
 8003842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003850:	4413      	add	r3, r2
 8003852:	3b20      	subs	r3, #32
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b21b      	sxth	r3, r3
 8003858:	430b      	orrs	r3, r1
 800385a:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXB_voltages[board][1]) << 8)
 800385c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO4_voltage[board] = voltage_reading;
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003866:	4413      	add	r3, r2
 8003868:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800386c:	801a      	strh	r2, [r3, #0]

        /*voltage_reading = ( ((uint16_t) registerAUXB_voltages[board][3]) << 8)
            | registerAUXB_voltages[board][2];
        GPIO5_voltage[board] = voltage_reading;*/

        voltage_reading = ( ((uint16_t) registerAUXB_voltages[board][5]) << 8)
 800386e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800387c:	4413      	add	r3, r2
 800387e:	3b1b      	subs	r3, #27
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	021b      	lsls	r3, r3, #8
            | registerAUXB_voltages[board][4];
 8003884:	b219      	sxth	r1, r3
 8003886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003894:	4413      	add	r3, r2
 8003896:	3b1c      	subs	r3, #28
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b21b      	sxth	r3, r3
 800389c:	430b      	orrs	r3, r1
 800389e:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXB_voltages[board][5]) << 8)
 80038a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        REF2_voltage[board] = voltage_reading;
 80038a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038aa:	4413      	add	r3, r2
 80038ac:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80038b0:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][1]) << 8)
 80038b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80038c0:	4413      	add	r3, r2
 80038c2:	3b2b      	subs	r3, #43	; 0x2b
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	021b      	lsls	r3, r3, #8
            | registerAUXC_voltages[board][0];
 80038c8:	b219      	sxth	r1, r3
 80038ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80038d8:	4413      	add	r3, r2
 80038da:	3b2c      	subs	r3, #44	; 0x2c
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b21b      	sxth	r3, r3
 80038e0:	430b      	orrs	r3, r1
 80038e2:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][1]) << 8)
 80038e4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO6_voltage[board] = voltage_reading;
 80038e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038ee:	4413      	add	r3, r2
 80038f0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80038f4:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][3]) << 8)
 80038f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003904:	4413      	add	r3, r2
 8003906:	3b29      	subs	r3, #41	; 0x29
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	021b      	lsls	r3, r3, #8
            | registerAUXC_voltages[board][2];
 800390c:	b219      	sxth	r1, r3
 800390e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800391c:	4413      	add	r3, r2
 800391e:	3b2a      	subs	r3, #42	; 0x2a
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b21b      	sxth	r3, r3
 8003924:	430b      	orrs	r3, r1
 8003926:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][3]) << 8)
 8003928:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO7_voltage[board] = voltage_reading;
 800392c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003932:	4413      	add	r3, r2
 8003934:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8003938:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][5]) << 8)
 800393a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003948:	4413      	add	r3, r2
 800394a:	3b27      	subs	r3, #39	; 0x27
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	021b      	lsls	r3, r3, #8
            | registerAUXC_voltages[board][4];
 8003950:	b219      	sxth	r1, r3
 8003952:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003960:	4413      	add	r3, r2
 8003962:	3b28      	subs	r3, #40	; 0x28
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b21b      	sxth	r3, r3
 8003968:	430b      	orrs	r3, r1
 800396a:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXC_voltages[board][5]) << 8)
 800396c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO8_voltage[board] = voltage_reading;
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003976:	4413      	add	r3, r2
 8003978:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800397c:	801a      	strh	r2, [r3, #0]

        voltage_reading = ( ((uint16_t) registerAUXD_voltages[board][1]) << 8)
 800397e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800398c:	4413      	add	r3, r2
 800398e:	3b37      	subs	r3, #55	; 0x37
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	021b      	lsls	r3, r3, #8
            | registerAUXD_voltages[board][0];
 8003994:	b219      	sxth	r1, r3
 8003996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80039a4:	4413      	add	r3, r2
 80039a6:	3b38      	subs	r3, #56	; 0x38
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	430b      	orrs	r3, r1
 80039ae:	b21b      	sxth	r3, r3
        voltage_reading = ( ((uint16_t) registerAUXD_voltages[board][1]) << 8)
 80039b0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        GPIO9_voltage[board] = voltage_reading;
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039ba:	4413      	add	r3, r2
 80039bc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80039c0:	801a      	strh	r2, [r3, #0]
    for (int board = 0; board < BTM_NUM_DEVICES; board++)
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	3301      	adds	r3, #1
 80039c6:	657b      	str	r3, [r7, #84]	; 0x54
 80039c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	f67f aec7 	bls.w	800375e <readThermistorVoltage+0x118>
    }

    return status;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80039e0:	6978      	ldr	r0, [r7, #20]
 80039e2:	3758      	adds	r7, #88	; 0x58
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <volts2temp>:
 * @param[in] Vout the thermistor voltage reading to convert
 * @param[in] REF2[] the measured reference voltage
 * @return the temperature of the thermistor in degrees celcius
 */
void volts2temp(uint16_t ADC[], uint16_t REF2[], float temp_celsius[])
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b08f      	sub	sp, #60	; 0x3c
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
    const float beta = 3435.0; // from NTC datasheet
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <volts2temp+0x108>)
 80039f6:	633b      	str	r3, [r7, #48]	; 0x30
    const float room_temp = 298.15; // kelvin
 80039f8:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <volts2temp+0x10c>)
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const float R_balance = 10000.0; // from LTC6813 datasheet p.84. note: this doesn't account for tolerance. to be exact, measure the 10k resistor with a multimeter
 80039fc:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <volts2temp+0x110>)
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    const float R_room_temp = 10000.0; // resistance at room temperature (25C)
 8003a00:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <volts2temp+0x110>)
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    float Vs = 0.0;
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	623b      	str	r3, [r7, #32]
    float R_therm = 0.0;
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
    float temp_kelvin = 0.0;
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
    float Vout = 0.0;
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

    // to get the voltage in volts from the LTC6813's value,
    // multiply it by 0.0001 as below.
    for(int board = 0; board < BTM_NUM_DEVICES; board++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a20:	e058      	b.n	8003ad4 <volts2temp+0xec>
    {
        Vs = BTM_regValToVoltage(REF2[board]);
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f87f 	bl	8002b30 <BTM_regValToVoltage>
 8003a32:	6238      	str	r0, [r7, #32]
        Vout = BTM_regValToVoltage(ADC[board]);
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f876 	bl	8002b30 <BTM_regValToVoltage>
 8003a44:	6178      	str	r0, [r7, #20]
        R_therm = R_balance * ((Vs / Vout) - 1);
 8003a46:	6979      	ldr	r1, [r7, #20]
 8003a48:	6a38      	ldr	r0, [r7, #32]
 8003a4a:	f7fd fa9b 	bl	8000f84 <__aeabi_fdiv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd f8d7 	bl	8000c08 <__aeabi_fsub>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a60:	f7fd f9dc 	bl	8000e1c <__aeabi_fmul>
 8003a64:	4603      	mov	r3, r0
 8003a66:	61fb      	str	r3, [r7, #28]
        temp_kelvin = (beta * room_temp)
 8003a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a6c:	f7fd f9d6 	bl	8000e1c <__aeabi_fmul>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461c      	mov	r4, r3
            / (beta + (room_temp * logf(R_therm / R_room_temp)));
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	69f8      	ldr	r0, [r7, #28]
 8003a78:	f7fd fa84 	bl	8000f84 <__aeabi_fdiv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fe2e 	bl	80096e0 <logf>
 8003a84:	4603      	mov	r3, r0
 8003a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd f9c7 	bl	8000e1c <__aeabi_fmul>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd f8ba 	bl	8000c0c <__addsf3>
 8003a98:	4603      	mov	r3, r0
        temp_kelvin = (beta * room_temp)
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7fd fa71 	bl	8000f84 <__aeabi_fdiv>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp_celsius[board] = temp_kelvin - 273.15;
 8003aa6:	69b8      	ldr	r0, [r7, #24]
 8003aa8:	f7fc fd2a 	bl	8000500 <__aeabi_f2d>
 8003aac:	a30e      	add	r3, pc, #56	; (adr r3, 8003ae8 <volts2temp+0x100>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fbc5 	bl	8000240 <__aeabi_dsub>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	4618      	mov	r0, r3
 8003abc:	4621      	mov	r1, r4
 8003abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	18d4      	adds	r4, r2, r3
 8003ac6:	f7fd f84b 	bl	8000b60 <__aeabi_d2f>
 8003aca:	4603      	mov	r3, r0
 8003acc:	6023      	str	r3, [r4, #0]
    for(int board = 0; board < BTM_NUM_DEVICES; board++)
 8003ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d9a3      	bls.n	8003a22 <volts2temp+0x3a>
    }
}
 8003ada:	bf00      	nop
 8003adc:	373c      	adds	r7, #60	; 0x3c
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	66666666 	.word	0x66666666
 8003aec:	40711266 	.word	0x40711266
 8003af0:	4556b000 	.word	0x4556b000
 8003af4:	43951333 	.word	0x43951333
 8003af8:	461c4000 	.word	0x461c4000

08003afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b24:	e000      	b.n	8003b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003b28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f9      	beq.n	8003b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003b3c:	687b      	ldr	r3, [r7, #4]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003b4e:	af00      	add	r7, sp, #0

  // BMS Data structures
  BTM_PackData_t pack;
  BTM_BAL_dch_setting_pack_t dch_setting_pack;

  unsigned int current_blink_tick = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  unsigned int last_blink_tick = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b5c:	f000 fcd4 	bl	8004508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b60:	f000 f842 	bl	8003be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b64:	f000 f99a 	bl	8003e9c <MX_GPIO_Init>
  MX_CAN_Init();
 8003b68:	f000 f88c 	bl	8003c84 <MX_CAN_Init>
  MX_SPI2_Init();
 8003b6c:	f000 f8c0 	bl	8003cf0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003b70:	f000 f8f4 	bl	8003d5c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003b74:	f000 f968 	bl	8003e48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Give the BMS functionality access to hardware resources
  BTM_SPI_handle = &hspi2;
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <main+0x8c>)
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <main+0x90>)
 8003b7c:	601a      	str	r2, [r3, #0]
  CONT_timer_handle = &htim3;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <main+0x94>)
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <main+0x98>)
 8003b82:	601a      	str	r2, [r3, #0]

  FSM_init();
 8003b84:	f7fd ff58 	bl	8001a38 <FSM_init>

  HAL_GPIO_WritePin(LED_OUT_GPIO_Port, LED_OUT_Pin, GPIO_PIN_SET); // Turn LED on
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	4815      	ldr	r0, [pc, #84]	; (8003be4 <main+0x9c>)
 8003b8e:	f001 f889 	bl	8004ca4 <HAL_GPIO_WritePin>
  current_blink_tick = HAL_GetTick();
 8003b92:	f000 fd11 	bl	80045b8 <HAL_GetTick>
 8003b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    FSM_run(&pack, &dch_setting_pack);
 8003b9a:	463a      	mov	r2, r7
 8003b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd ff62 	bl	8001a6c <FSM_run>

    // blink LED on master board
    current_blink_tick = HAL_GetTick();
 8003ba8:	f000 fd06 	bl	80045b8 <HAL_GetTick>
 8003bac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
    if (last_blink_tick - current_blink_tick >= LED_BLINK_INTERVAL)
 8003bb0:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8003bb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bbe:	d3ec      	bcc.n	8003b9a <main+0x52>
    {
        HAL_GPIO_TogglePin(LED_OUT_GPIO_Port, LED_OUT_Pin);
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4808      	ldr	r0, [pc, #32]	; (8003be4 <main+0x9c>)
 8003bc4:	f001 f886 	bl	8004cd4 <HAL_GPIO_TogglePin>
        last_blink_tick = current_blink_tick;
 8003bc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bcc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    FSM_run(&pack, &dch_setting_pack);
 8003bd0:	e7e3      	b.n	8003b9a <main+0x52>
 8003bd2:	bf00      	nop
 8003bd4:	20000220 	.word	0x20000220
 8003bd8:	2000024c 	.word	0x2000024c
 8003bdc:	20000228 	.word	0x20000228
 8003be0:	200002cc 	.word	0x200002cc
 8003be4:	40011000 	.word	0x40011000

08003be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b090      	sub	sp, #64	; 0x40
 8003bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bee:	f107 0318 	add.w	r3, r7, #24
 8003bf2:	2228      	movs	r2, #40	; 0x28
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 f996 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c14:	2300      	movs	r3, #0
 8003c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c2c:	f107 0318 	add.w	r3, r7, #24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 f869 	bl	8004d08 <HAL_RCC_OscConfig>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003c3c:	f000 f9e1 	bl	8004002 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c40:	230f      	movs	r3, #15
 8003c42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c44:	2302      	movs	r3, #2
 8003c46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c56:	1d3b      	adds	r3, r7, #4
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 fad4 	bl	8005208 <HAL_RCC_ClockConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003c66:	f000 f9cc 	bl	8004002 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8003c70:	2000      	movs	r0, #0
 8003c72:	f001 fbb3 	bl	80053dc <HAL_RCC_MCOConfig>
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003c76:	f001 fbe9 	bl	800544c <HAL_RCC_EnableCSS>
}
 8003c7a:	bf00      	nop
 8003c7c:	3740      	adds	r7, #64	; 0x40
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <MX_CAN_Init+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8003c8e:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003c90:	2212      	movs	r2, #18
 8003c92:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003ca2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8003ca6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003caa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003cae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003cd4:	4804      	ldr	r0, [pc, #16]	; (8003ce8 <MX_CAN_Init+0x64>)
 8003cd6:	f000 fc9b 	bl	8004610 <HAL_CAN_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8003ce0:	f000 f98f 	bl	8004002 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200002a4 	.word	0x200002a4
 8003cec:	40006400 	.word	0x40006400

08003cf0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003cf6:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <MX_SPI2_Init+0x68>)
 8003cf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003cfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d10:	2202      	movs	r2, #2
 8003d12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d24:	2228      	movs	r2, #40	; 0x28
 8003d26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d3c:	220a      	movs	r2, #10
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d40:	4804      	ldr	r0, [pc, #16]	; (8003d54 <MX_SPI2_Init+0x64>)
 8003d42:	f001 fc5b 	bl	80055fc <HAL_SPI_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d4c:	f000 f959 	bl	8004002 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d50:	bf00      	nop
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	2000024c 	.word	0x2000024c
 8003d58:	40003800 	.word	0x40003800

08003d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d70:	f107 0320 	add.w	r3, r7, #32
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
 8003d88:	615a      	str	r2, [r3, #20]
 8003d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <MX_TIM3_Init+0xe8>)
 8003d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003d94:	2207      	movs	r2, #7
 8003d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 359;
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003da0:	f240 1267 	movw	r2, #359	; 0x167
 8003da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dac:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003db2:	4823      	ldr	r0, [pc, #140]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003db4:	f002 f98e 	bl	80060d4 <HAL_TIM_Base_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003dbe:	f000 f920 	bl	8004002 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dcc:	4619      	mov	r1, r3
 8003dce:	481c      	ldr	r0, [pc, #112]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003dd0:	f002 fba0 	bl	8006514 <HAL_TIM_ConfigClockSource>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003dda:	f000 f912 	bl	8004002 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dde:	4818      	ldr	r0, [pc, #96]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003de0:	f002 f9c7 	bl	8006172 <HAL_TIM_PWM_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003dea:	f000 f90a 	bl	8004002 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003df6:	f107 0320 	add.w	r3, r7, #32
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4810      	ldr	r0, [pc, #64]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003dfe:	f002 ff21 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003e08:	f000 f8fb 	bl	8004002 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e0c:	2360      	movs	r3, #96	; 0x60
 8003e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	2208      	movs	r2, #8
 8003e20:	4619      	mov	r1, r3
 8003e22:	4807      	ldr	r0, [pc, #28]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003e24:	f002 fab8 	bl	8006398 <HAL_TIM_PWM_ConfigChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003e2e:	f000 f8e8 	bl	8004002 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e32:	4803      	ldr	r0, [pc, #12]	; (8003e40 <MX_TIM3_Init+0xe4>)
 8003e34:	f000 f9e8 	bl	8004208 <HAL_TIM_MspPostInit>

}
 8003e38:	bf00      	nop
 8003e3a:	3738      	adds	r7, #56	; 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200002cc 	.word	0x200002cc
 8003e44:	40000400 	.word	0x40000400

08003e48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <MX_USART1_UART_Init+0x50>)
 8003e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e6e:	220c      	movs	r2, #12
 8003e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e7e:	4805      	ldr	r0, [pc, #20]	; (8003e94 <MX_USART1_UART_Init+0x4c>)
 8003e80:	f002 ff4c 	bl	8006d1c <HAL_UART_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e8a:	f000 f8ba 	bl	8004002 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000314 	.word	0x20000314
 8003e98:	40013800 	.word	0x40013800

08003e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea2:	f107 0310 	add.w	r3, r7, #16
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	4a48      	ldr	r2, [pc, #288]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	6193      	str	r3, [r2, #24]
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec8:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4a42      	ldr	r2, [pc, #264]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003ece:	f043 0320 	orr.w	r3, r3, #32
 8003ed2:	6193      	str	r3, [r2, #24]
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6193      	str	r3, [r2, #24]
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef8:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003efe:	f043 0308 	orr.w	r3, r3, #8
 8003f02:	6193      	str	r3, [r2, #24]
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <MX_GPIO_Init+0x13c>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OT_OUT_Pin|BAL_OUT_Pin|FLT_OUT_Pin, GPIO_PIN_RESET);
 8003f10:	2200      	movs	r2, #0
 8003f12:	21e0      	movs	r1, #224	; 0xe0
 8003f14:	4831      	ldr	r0, [pc, #196]	; (8003fdc <MX_GPIO_Init+0x140>)
 8003f16:	f000 fec5 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LLIM_OUT_Pin|HLIM_OUT_Pin|LED_OUT_Pin, GPIO_PIN_RESET);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	2170      	movs	r1, #112	; 0x70
 8003f1e:	4830      	ldr	r0, [pc, #192]	; (8003fe0 <MX_GPIO_Init+0x144>)
 8003f20:	f000 fec0 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COM_OUT_Pin|SPI_LTC_CS_Pin, GPIO_PIN_RESET);
 8003f24:	2200      	movs	r2, #0
 8003f26:	f241 0102 	movw	r1, #4098	; 0x1002
 8003f2a:	482e      	ldr	r0, [pc, #184]	; (8003fe4 <MX_GPIO_Init+0x148>)
 8003f2c:	f000 feba 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_OUT_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_Pin;
 8003f30:	2310      	movs	r3, #16
 8003f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f34:	2303      	movs	r3, #3
 8003f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4827      	ldr	r0, [pc, #156]	; (8003fdc <MX_GPIO_Init+0x140>)
 8003f40:	f000 fd46 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OT_OUT_Pin BAL_OUT_Pin FLT_OUT_Pin */
  GPIO_InitStruct.Pin = OT_OUT_Pin|BAL_OUT_Pin|FLT_OUT_Pin;
 8003f44:	23e0      	movs	r3, #224	; 0xe0
 8003f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2302      	movs	r3, #2
 8003f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f54:	f107 0310 	add.w	r3, r7, #16
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4820      	ldr	r0, [pc, #128]	; (8003fdc <MX_GPIO_Init+0x140>)
 8003f5c:	f000 fd38 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LLIM_OUT_Pin HLIM_OUT_Pin LED_OUT_Pin */
  GPIO_InitStruct.Pin = LLIM_OUT_Pin|HLIM_OUT_Pin|LED_OUT_Pin;
 8003f60:	2370      	movs	r3, #112	; 0x70
 8003f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f64:	2301      	movs	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f70:	f107 0310 	add.w	r3, r7, #16
 8003f74:	4619      	mov	r1, r3
 8003f76:	481a      	ldr	r0, [pc, #104]	; (8003fe0 <MX_GPIO_Init+0x144>)
 8003f78:	f000 fd2a 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COM_OUT_Pin */
  GPIO_InitStruct.Pin = COM_OUT_Pin;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	4619      	mov	r1, r3
 8003f92:	4814      	ldr	r0, [pc, #80]	; (8003fe4 <MX_GPIO_Init+0x148>)
 8003f94:	f000 fd1c 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_LTC_CS_Pin */
  GPIO_InitStruct.Pin = SPI_LTC_CS_Pin;
 8003f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_LTC_CS_GPIO_Port, &GPIO_InitStruct);
 8003faa:	f107 0310 	add.w	r3, r7, #16
 8003fae:	4619      	mov	r1, r3
 8003fb0:	480c      	ldr	r0, [pc, #48]	; (8003fe4 <MX_GPIO_Init+0x148>)
 8003fb2:	f000 fd0d 	bl	80049d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4804      	ldr	r0, [pc, #16]	; (8003fdc <MX_GPIO_Init+0x140>)
 8003fcc:	f000 fd00 	bl	80049d0 <HAL_GPIO_Init>

}
 8003fd0:	bf00      	nop
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40010800 	.word	0x40010800
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	40010c00 	.word	0x40010c00

08003fe8 <__io_putchar>:

/* USER CODE BEGIN 4 */

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    // Un-comment either (or both) function call to route debugging output

    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fd82 	bl	8003afc <ITM_SendChar>

    // Output on UART
    //HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);

    return (ch);
 8003ff8:	687b      	ldr	r3, [r7, #4]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
	...

08004010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_MspInit+0x5c>)
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_MspInit+0x5c>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6193      	str	r3, [r2, #24]
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_MspInit+0x5c>)
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_MspInit+0x5c>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_MspInit+0x5c>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	61d3      	str	r3, [r2, #28]
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_MspInit+0x5c>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_MspInit+0x60>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_MspInit+0x60>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	40021000 	.word	0x40021000
 8004070:	40010000 	.word	0x40010000

08004074 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a25      	ldr	r2, [pc, #148]	; (8004124 <HAL_CAN_MspInit+0xb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d143      	bne.n	800411c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4a23      	ldr	r2, [pc, #140]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 800409a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800409e:	61d3      	str	r3, [r2, #28]
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ac:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 80040b2:	f043 0308 	orr.w	r3, r3, #8
 80040b6:	6193      	str	r3, [r2, #24]
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_CAN_MspInit+0xb4>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4619      	mov	r1, r3
 80040d8:	4814      	ldr	r0, [pc, #80]	; (800412c <HAL_CAN_MspInit+0xb8>)
 80040da:	f000 fc79 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	4619      	mov	r1, r3
 80040f2:	480e      	ldr	r0, [pc, #56]	; (800412c <HAL_CAN_MspInit+0xb8>)
 80040f4:	f000 fc6c 	bl	80049d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_CAN_MspInit+0xbc>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <HAL_CAN_MspInit+0xbc>)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800411c:	bf00      	nop
 800411e:	3728      	adds	r7, #40	; 0x28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40006400 	.word	0x40006400
 8004128:	40021000 	.word	0x40021000
 800412c:	40010c00 	.word	0x40010c00
 8004130:	40010000 	.word	0x40010000

08004134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_SPI_MspInit+0x8c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d131      	bne.n	80041b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 800415a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415e:	61d3      	str	r3, [r2, #28]
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 8004172:	f043 0308 	orr.w	r3, r3, #8
 8004176:	6193      	str	r3, [r2, #24]
 8004178:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_SPI_MspInit+0x90>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004184:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800418e:	2303      	movs	r3, #3
 8004190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004192:	f107 0310 	add.w	r3, r7, #16
 8004196:	4619      	mov	r1, r3
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <HAL_SPI_MspInit+0x94>)
 800419a:	f000 fc19 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800419e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	4619      	mov	r1, r3
 80041b2:	4805      	ldr	r0, [pc, #20]	; (80041c8 <HAL_SPI_MspInit+0x94>)
 80041b4:	f000 fc0c 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80041b8:	bf00      	nop
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40003800 	.word	0x40003800
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010c00 	.word	0x40010c00

080041cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_TIM_Base_MspInit+0x34>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d10b      	bne.n	80041f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_TIM_Base_MspInit+0x38>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <HAL_TIM_Base_MspInit+0x38>)
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	61d3      	str	r3, [r2, #28]
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <HAL_TIM_Base_MspInit+0x38>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	40000400 	.word	0x40000400
 8004204:	40021000 	.word	0x40021000

08004208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0310 	add.w	r3, r7, #16
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <HAL_TIM_MspPostInit+0x58>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d117      	bne.n	8004258 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_TIM_MspPostInit+0x5c>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_TIM_MspPostInit+0x5c>)
 800422e:	f043 0308 	orr.w	r3, r3, #8
 8004232:	6193      	str	r3, [r2, #24]
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_TIM_MspPostInit+0x5c>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8004240:	2301      	movs	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004248:	2302      	movs	r3, #2
 800424a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	4619      	mov	r1, r3
 8004252:	4805      	ldr	r0, [pc, #20]	; (8004268 <HAL_TIM_MspPostInit+0x60>)
 8004254:	f000 fbbc 	bl	80049d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004258:	bf00      	nop
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40000400 	.word	0x40000400
 8004264:	40021000 	.word	0x40021000
 8004268:	40010c00 	.word	0x40010c00

0800426c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_UART_MspInit+0xa4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d13d      	bne.n	8004308 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_UART_MspInit+0xa8>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_UART_MspInit+0xa8>)
 8004292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004296:	6193      	str	r3, [r2, #24]
 8004298:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <HAL_UART_MspInit+0xa8>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_UART_MspInit+0xa8>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_UART_MspInit+0xa8>)
 80042aa:	f043 0308 	orr.w	r3, r3, #8
 80042ae:	6193      	str	r3, [r2, #24]
 80042b0:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_UART_MspInit+0xa8>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042c4:	2303      	movs	r3, #3
 80042c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4812      	ldr	r0, [pc, #72]	; (8004318 <HAL_UART_MspInit+0xac>)
 80042d0:	f000 fb7e 	bl	80049d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042d8:	2300      	movs	r3, #0
 80042da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4619      	mov	r1, r3
 80042e6:	480c      	ldr	r0, [pc, #48]	; (8004318 <HAL_UART_MspInit+0xac>)
 80042e8:	f000 fb72 	bl	80049d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_UART_MspInit+0xb0>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	4a06      	ldr	r2, [pc, #24]	; (800431c <HAL_UART_MspInit+0xb0>)
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004308:	bf00      	nop
 800430a:	3728      	adds	r7, #40	; 0x28
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40013800 	.word	0x40013800
 8004314:	40021000 	.word	0x40021000
 8004318:	40010c00 	.word	0x40010c00
 800431c:	40010000 	.word	0x40010000

08004320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004324:	f001 f932 	bl	800558c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004328:	e7fe      	b.n	8004328 <NMI_Handler+0x8>

0800432a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800432e:	e7fe      	b.n	800432e <HardFault_Handler+0x4>

08004330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004334:	e7fe      	b.n	8004334 <MemManage_Handler+0x4>

08004336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433a:	e7fe      	b.n	800433a <BusFault_Handler+0x4>

0800433c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004340:	e7fe      	b.n	8004340 <UsageFault_Handler+0x4>

08004342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800436a:	f000 f913 	bl	8004594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}

08004372 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e00a      	b.n	800439a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004384:	f3af 8000 	nop.w
 8004388:	4601      	mov	r1, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	60ba      	str	r2, [r7, #8]
 8004390:	b2ca      	uxtb	r2, r1
 8004392:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3301      	adds	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	429a      	cmp	r2, r3
 80043a0:	dbf0      	blt.n	8004384 <_read+0x12>
	}

return len;
 80043a2:	687b      	ldr	r3, [r7, #4]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e009      	b.n	80043d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	60ba      	str	r2, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fe0e 	bl	8003fe8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3301      	adds	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	dbf1      	blt.n	80043be <_write+0x12>
	}
	return len;
 80043da:	687b      	ldr	r3, [r7, #4]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_close>:

int _close(int file)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	return -1;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800440a:	605a      	str	r2, [r3, #4]
	return 0;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <_isatty>:

int _isatty(int file)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	return 1;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
	return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <_sbrk+0x5c>)
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <_sbrk+0x60>)
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <_sbrk+0x64>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <_sbrk+0x64>)
 8004462:	4a12      	ldr	r2, [pc, #72]	; (80044ac <_sbrk+0x68>)
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <_sbrk+0x64>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	429a      	cmp	r2, r3
 8004472:	d207      	bcs.n	8004484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004474:	f002 fd2e 	bl	8006ed4 <__errno>
 8004478:	4602      	mov	r2, r0
 800447a:	230c      	movs	r3, #12
 800447c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	e009      	b.n	8004498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <_sbrk+0x64>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <_sbrk+0x64>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <_sbrk+0x64>)
 8004494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004496:	68fb      	ldr	r3, [r7, #12]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	2000c000 	.word	0x2000c000
 80044a4:	00000400 	.word	0x00000400
 80044a8:	2000020c 	.word	0x2000020c
 80044ac:	20000360 	.word	0x20000360

080044b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044bc:	480c      	ldr	r0, [pc, #48]	; (80044f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044be:	490d      	ldr	r1, [pc, #52]	; (80044f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044c4:	e002      	b.n	80044cc <LoopCopyDataInit>

080044c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ca:	3304      	adds	r3, #4

080044cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044d0:	d3f9      	bcc.n	80044c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044d4:	4c0a      	ldr	r4, [pc, #40]	; (8004500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044d8:	e001      	b.n	80044de <LoopFillZerobss>

080044da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044dc:	3204      	adds	r2, #4

080044de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044e0:	d3fb      	bcc.n	80044da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044e2:	f7ff ffe5 	bl	80044b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044e6:	f002 fcfb 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044ea:	f7ff fb2d 	bl	8003b48 <main>
  bx lr
 80044ee:	4770      	bx	lr
  ldr r0, =_sdata
 80044f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044f4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80044f8:	0800a130 	.word	0x0800a130
  ldr r2, =_sbss
 80044fc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004500:	20000360 	.word	0x20000360

08004504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004504:	e7fe      	b.n	8004504 <ADC1_2_IRQHandler>
	...

08004508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_Init+0x28>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_Init+0x28>)
 8004512:	f043 0310 	orr.w	r3, r3, #16
 8004516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004518:	2003      	movs	r0, #3
 800451a:	f000 fa25 	bl	8004968 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800451e:	2000      	movs	r0, #0
 8004520:	f000 f808 	bl	8004534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004524:	f7ff fd74 	bl	8004010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000

08004534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_InitTick+0x54>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_InitTick+0x58>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800454a:	fbb3 f3f1 	udiv	r3, r3, r1
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fa2f 	bl	80049b6 <HAL_SYSTICK_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e00e      	b.n	8004580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b0f      	cmp	r3, #15
 8004566:	d80a      	bhi.n	800457e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004568:	2200      	movs	r2, #0
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	f000 fa05 	bl	800497e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004574:	4a06      	ldr	r2, [pc, #24]	; (8004590 <HAL_InitTick+0x5c>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000010 	.word	0x20000010
 800458c:	20000018 	.word	0x20000018
 8004590:	20000014 	.word	0x20000014

08004594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_IncTick+0x1c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_IncTick+0x20>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <HAL_IncTick+0x20>)
 80045a6:	6013      	str	r3, [r2, #0]
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	20000018 	.word	0x20000018
 80045b4:	20000358 	.word	0x20000358

080045b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return uwTick;
 80045bc:	4b02      	ldr	r3, [pc, #8]	; (80045c8 <HAL_GetTick+0x10>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	20000358 	.word	0x20000358

080045cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045d4:	f7ff fff0 	bl	80045b8 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d005      	beq.n	80045f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_Delay+0x40>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045f2:	bf00      	nop
 80045f4:	f7ff ffe0 	bl	80045b8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	429a      	cmp	r2, r3
 8004602:	d8f7      	bhi.n	80045f4 <HAL_Delay+0x28>
  {
  }
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000018 	.word	0x20000018

08004610 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0ed      	b.n	80047fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff fd20 	bl	8004074 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004644:	f7ff ffb8 	bl	80045b8 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800464a:	e012      	b.n	8004672 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800464c:	f7ff ffb4 	bl	80045b8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b0a      	cmp	r3, #10
 8004658:	d90b      	bls.n	8004672 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2205      	movs	r2, #5
 800466a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0c5      	b.n	80047fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0e5      	beq.n	800464c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0202 	bic.w	r2, r2, #2
 800468e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004690:	f7ff ff92 	bl	80045b8 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004696:	e012      	b.n	80046be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004698:	f7ff ff8e 	bl	80045b8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b0a      	cmp	r3, #10
 80046a4:	d90b      	bls.n	80046be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2205      	movs	r2, #5
 80046b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e09f      	b.n	80047fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e5      	bne.n	8004698 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	7e1b      	ldrb	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d108      	bne.n	80046e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e007      	b.n	80046f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7e5b      	ldrb	r3, [r3, #25]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e007      	b.n	8004720 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7e9b      	ldrb	r3, [r3, #26]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d108      	bne.n	800473a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0220 	orr.w	r2, r2, #32
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e007      	b.n	800474a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0220 	bic.w	r2, r2, #32
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7edb      	ldrb	r3, [r3, #27]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0210 	bic.w	r2, r2, #16
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e007      	b.n	8004774 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0210 	orr.w	r2, r2, #16
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7f1b      	ldrb	r3, [r3, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d108      	bne.n	800478e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0208 	orr.w	r2, r2, #8
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e007      	b.n	800479e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0208 	bic.w	r2, r2, #8
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7f5b      	ldrb	r3, [r3, #29]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d108      	bne.n	80047b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0204 	orr.w	r2, r2, #4
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e007      	b.n	80047c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	ea42 0103 	orr.w	r1, r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <__NVIC_SetPriorityGrouping>:
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800483a:	4a04      	ldr	r2, [pc, #16]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	60d3      	str	r3, [r2, #12]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000ed00 	.word	0xe000ed00

08004850 <__NVIC_GetPriorityGrouping>:
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_SetPriority>:
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	6039      	str	r1, [r7, #0]
 8004876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487c:	2b00      	cmp	r3, #0
 800487e:	db0a      	blt.n	8004896 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	490c      	ldr	r1, [pc, #48]	; (80048b8 <__NVIC_SetPriority+0x4c>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	0112      	lsls	r2, r2, #4
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	440b      	add	r3, r1
 8004890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004894:	e00a      	b.n	80048ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <__NVIC_SetPriority+0x50>)
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	3b04      	subs	r3, #4
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	440b      	add	r3, r1
 80048aa:	761a      	strb	r2, [r3, #24]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000e100 	.word	0xe000e100
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <NVIC_EncodePriority>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f1c3 0307 	rsb	r3, r3, #7
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf28      	it	cs
 80048de:	2304      	movcs	r3, #4
 80048e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d902      	bls.n	80048f0 <NVIC_EncodePriority+0x30>
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3b03      	subs	r3, #3
 80048ee:	e000      	b.n	80048f2 <NVIC_EncodePriority+0x32>
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	401a      	ands	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004908:	f04f 31ff 	mov.w	r1, #4294967295
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	43d9      	mvns	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	4313      	orrs	r3, r2
}
 800491a:	4618      	mov	r0, r3
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <SysTick_Config>:
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004934:	d301      	bcc.n	800493a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004936:	2301      	movs	r3, #1
 8004938:	e00f      	b.n	800495a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800493a:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <SysTick_Config+0x40>)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004942:	210f      	movs	r1, #15
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	f7ff ff90 	bl	800486c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <SysTick_Config+0x40>)
 800494e:	2200      	movs	r2, #0
 8004950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004952:	4b04      	ldr	r3, [pc, #16]	; (8004964 <SysTick_Config+0x40>)
 8004954:	2207      	movs	r2, #7
 8004956:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	e000e010 	.word	0xe000e010

08004968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff49 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800497e:	b580      	push	{r7, lr}
 8004980:	b086      	sub	sp, #24
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004990:	f7ff ff5e 	bl	8004850 <__NVIC_GetPriorityGrouping>
 8004994:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	68b9      	ldr	r1, [r7, #8]
 800499a:	6978      	ldr	r0, [r7, #20]
 800499c:	f7ff ff90 	bl	80048c0 <NVIC_EncodePriority>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a6:	4611      	mov	r1, r2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff5f 	bl	800486c <__NVIC_SetPriority>
}
 80049ae:	bf00      	nop
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffb0 	bl	8004924 <SysTick_Config>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b08b      	sub	sp, #44	; 0x2c
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049da:	2300      	movs	r3, #0
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e2:	e133      	b.n	8004c4c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049e4:	2201      	movs	r2, #1
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	f040 8122 	bne.w	8004c46 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b12      	cmp	r3, #18
 8004a08:	d034      	beq.n	8004a74 <HAL_GPIO_Init+0xa4>
 8004a0a:	2b12      	cmp	r3, #18
 8004a0c:	d80d      	bhi.n	8004a2a <HAL_GPIO_Init+0x5a>
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d02b      	beq.n	8004a6a <HAL_GPIO_Init+0x9a>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d804      	bhi.n	8004a20 <HAL_GPIO_Init+0x50>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d031      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d01c      	beq.n	8004a58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a1e:	e048      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d043      	beq.n	8004aac <HAL_GPIO_Init+0xdc>
 8004a24:	2b11      	cmp	r3, #17
 8004a26:	d01b      	beq.n	8004a60 <HAL_GPIO_Init+0x90>
          break;
 8004a28:	e043      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a2a:	4a8f      	ldr	r2, [pc, #572]	; (8004c68 <HAL_GPIO_Init+0x298>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d026      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
 8004a30:	4a8d      	ldr	r2, [pc, #564]	; (8004c68 <HAL_GPIO_Init+0x298>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d806      	bhi.n	8004a44 <HAL_GPIO_Init+0x74>
 8004a36:	4a8d      	ldr	r2, [pc, #564]	; (8004c6c <HAL_GPIO_Init+0x29c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d020      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
 8004a3c:	4a8c      	ldr	r2, [pc, #560]	; (8004c70 <HAL_GPIO_Init+0x2a0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
          break;
 8004a42:	e036      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a44:	4a8b      	ldr	r2, [pc, #556]	; (8004c74 <HAL_GPIO_Init+0x2a4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d019      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
 8004a4a:	4a8b      	ldr	r2, [pc, #556]	; (8004c78 <HAL_GPIO_Init+0x2a8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d016      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
 8004a50:	4a8a      	ldr	r2, [pc, #552]	; (8004c7c <HAL_GPIO_Init+0x2ac>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <HAL_GPIO_Init+0xae>
          break;
 8004a56:	e02c      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	623b      	str	r3, [r7, #32]
          break;
 8004a5e:	e028      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	3304      	adds	r3, #4
 8004a66:	623b      	str	r3, [r7, #32]
          break;
 8004a68:	e023      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	623b      	str	r3, [r7, #32]
          break;
 8004a72:	e01e      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	623b      	str	r3, [r7, #32]
          break;
 8004a7c:	e019      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a86:	2304      	movs	r3, #4
 8004a88:	623b      	str	r3, [r7, #32]
          break;
 8004a8a:	e012      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a94:	2308      	movs	r3, #8
 8004a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	611a      	str	r2, [r3, #16]
          break;
 8004a9e:	e008      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	615a      	str	r2, [r3, #20]
          break;
 8004aaa:	e002      	b.n	8004ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004aac:	2300      	movs	r3, #0
 8004aae:	623b      	str	r3, [r7, #32]
          break;
 8004ab0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2bff      	cmp	r3, #255	; 0xff
 8004ab6:	d801      	bhi.n	8004abc <HAL_GPIO_Init+0xec>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	e001      	b.n	8004ac0 <HAL_GPIO_Init+0xf0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2bff      	cmp	r3, #255	; 0xff
 8004ac6:	d802      	bhi.n	8004ace <HAL_GPIO_Init+0xfe>
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	e002      	b.n	8004ad4 <HAL_GPIO_Init+0x104>
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3b08      	subs	r3, #8
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	210f      	movs	r1, #15
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	6a39      	ldr	r1, [r7, #32]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	431a      	orrs	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a2 	beq.w	8004c46 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b02:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_GPIO_Init+0x2b0>)
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <HAL_GPIO_Init+0x2b0>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6193      	str	r3, [r2, #24]
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <HAL_GPIO_Init+0x2b0>)
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b1a:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_GPIO_Init+0x2b4>)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	089b      	lsrs	r3, r3, #2
 8004b20:	3302      	adds	r3, #2
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	220f      	movs	r2, #15
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_GPIO_Init+0x2b8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x1b6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_GPIO_Init+0x2bc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x1b2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <HAL_GPIO_Init+0x2c0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x1ae>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <HAL_GPIO_Init+0x2c4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x1aa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4d      	ldr	r2, [pc, #308]	; (8004c98 <HAL_GPIO_Init+0x2c8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x1a6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_GPIO_Init+0x2cc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x1a2>
 8004b6e:	2305      	movs	r3, #5
 8004b70:	e00a      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b72:	2306      	movs	r3, #6
 8004b74:	e008      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b76:	2304      	movs	r3, #4
 8004b78:	e006      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e004      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_GPIO_Init+0x1b8>
 8004b86:	2300      	movs	r3, #0
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	f002 0203 	and.w	r2, r2, #3
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	4093      	lsls	r3, r2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b98:	493a      	ldr	r1, [pc, #232]	; (8004c84 <HAL_GPIO_Init+0x2b4>)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	493a      	ldr	r1, [pc, #232]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]
 8004bbe:	e006      	b.n	8004bce <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bc0:	4b37      	ldr	r3, [pc, #220]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	4935      	ldr	r1, [pc, #212]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d006      	beq.n	8004be8 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4930      	ldr	r1, [pc, #192]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
 8004be6:	e006      	b.n	8004bf6 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004be8:	4b2d      	ldr	r3, [pc, #180]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	492b      	ldr	r1, [pc, #172]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c02:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4926      	ldr	r1, [pc, #152]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
 8004c0e:	e006      	b.n	8004c1e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	4921      	ldr	r1, [pc, #132]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	491c      	ldr	r1, [pc, #112]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]
 8004c36:	e006      	b.n	8004c46 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c38:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	4917      	ldr	r1, [pc, #92]	; (8004ca0 <HAL_GPIO_Init+0x2d0>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	3301      	adds	r3, #1
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f47f aec4 	bne.w	80049e4 <HAL_GPIO_Init+0x14>
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	372c      	adds	r7, #44	; 0x2c
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	10210000 	.word	0x10210000
 8004c6c:	10110000 	.word	0x10110000
 8004c70:	10120000 	.word	0x10120000
 8004c74:	10310000 	.word	0x10310000
 8004c78:	10320000 	.word	0x10320000
 8004c7c:	10220000 	.word	0x10220000
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40010000 	.word	0x40010000
 8004c88:	40010800 	.word	0x40010800
 8004c8c:	40010c00 	.word	0x40010c00
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	40011800 	.word	0x40011800
 8004c9c:	40011c00 	.word	0x40011c00
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ce6:	887a      	ldrh	r2, [r7, #2]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4013      	ands	r3, r2
 8004cec:	041a      	lsls	r2, r3, #16
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	43d9      	mvns	r1, r3
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e26c      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8087 	beq.w	8004e36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d28:	4b92      	ldr	r3, [pc, #584]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d34:	4b8f      	ldr	r3, [pc, #572]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d112      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
 8004d40:	4b8c      	ldr	r3, [pc, #560]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4e:	4b89      	ldr	r3, [pc, #548]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x12c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d168      	bne.n	8004e34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e246      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCC_OscConfig+0x76>
 8004d70:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e02e      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x98>
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b78      	ldr	r3, [pc, #480]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e01d      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0xbc>
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0xd4>
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a6a      	ldr	r2, [pc, #424]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7ff fbe8 	bl	80045b8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dec:	f7ff fbe4 	bl	80045b8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1fa      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b5d      	ldr	r3, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0xe4>
 8004e0a:	e014      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7ff fbd4 	bl	80045b8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7ff fbd0 	bl	80045b8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1e6      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x10c>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d063      	beq.n	8004f0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e42:	4b4c      	ldr	r3, [pc, #304]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00b      	beq.n	8004e66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d11c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
 8004e5a:	4b46      	ldr	r3, [pc, #280]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d116      	bne.n	8004e94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e1ba      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4939      	ldr	r1, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e92:	e03a      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d020      	beq.n	8004ede <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7ff fb89 	bl	80045b8 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7ff fb85 	bl	80045b8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e19b      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec8:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4927      	ldr	r1, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7ff fb68 	bl	80045b8 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eec:	f7ff fb64 	bl	80045b8 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e17a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d03a      	beq.n	8004f8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d019      	beq.n	8004f52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f24:	f7ff fb48 	bl	80045b8 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2c:	f7ff fb44 	bl	80045b8 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e15a      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 fb32 	bl	80055b4 <RCC_Delay>
 8004f50:	e01c      	b.n	8004f8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_OscConfig+0x274>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f58:	f7ff fb2e 	bl	80045b8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5e:	e00f      	b.n	8004f80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7ff fb2a 	bl	80045b8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d908      	bls.n	8004f80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e140      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	42420000 	.word	0x42420000
 8004f7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e9      	bne.n	8004f60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a6 	beq.w	80050e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b97      	ldr	r3, [pc, #604]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10d      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b94      	ldr	r3, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4a93      	ldr	r2, [pc, #588]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	61d3      	str	r3, [r2, #28]
 8004fb6:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc6:	4b8e      	ldr	r3, [pc, #568]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a8a      	ldr	r2, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fde:	f7ff faeb 	bl	80045b8 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7ff fae7 	bl	80045b8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b64      	cmp	r3, #100	; 0x64
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e0fd      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x312>
 800500c:	4b7b      	ldr	r3, [pc, #492]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a7a      	ldr	r2, [pc, #488]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6213      	str	r3, [r2, #32]
 8005018:	e02d      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x334>
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6213      	str	r3, [r2, #32]
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	6213      	str	r3, [r2, #32]
 800503a:	e01c      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b05      	cmp	r3, #5
 8005042:	d10c      	bne.n	800505e <HAL_RCC_OscConfig+0x356>
 8005044:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800504a:	f043 0304 	orr.w	r3, r3, #4
 800504e:	6213      	str	r3, [r2, #32]
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	4a69      	ldr	r2, [pc, #420]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6213      	str	r3, [r2, #32]
 800505c:	e00b      	b.n	8005076 <HAL_RCC_OscConfig+0x36e>
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a66      	ldr	r2, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	4a63      	ldr	r2, [pc, #396]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005070:	f023 0304 	bic.w	r3, r3, #4
 8005074:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7ff fa9b 	bl	80045b8 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7ff fa97 	bl	80045b8 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0ab      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ee      	beq.n	8005086 <HAL_RCC_OscConfig+0x37e>
 80050a8:	e014      	b.n	80050d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7ff fa85 	bl	80045b8 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b0:	e00a      	b.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b2:	f7ff fa81 	bl	80045b8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e095      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ee      	bne.n	80050b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	4a47      	ldr	r2, [pc, #284]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8081 	beq.w	80051f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d061      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d146      	bne.n	8005192 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7ff fa55 	bl	80045b8 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7ff fa51 	bl	80045b8 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e067      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005124:	4b35      	ldr	r3, [pc, #212]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d108      	bne.n	800514c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	430b      	orrs	r3, r1
 800515e:	4927      	ldr	r1, [pc, #156]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7ff fa25 	bl	80045b8 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005172:	f7ff fa21 	bl	80045b8 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e037      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x46a>
 8005190:	e02f      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <HAL_RCC_OscConfig+0x4fc>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7ff fa0e 	bl	80045b8 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7ff fa0a 	bl	80045b8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e020      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x498>
 80051be:	e018      	b.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e013      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x4f4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
 8005204:	42420060 	.word	0x42420060

08005208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d0      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800521c:	4b6a      	ldr	r3, [pc, #424]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d910      	bls.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800522a:	4b67      	ldr	r3, [pc, #412]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 0207 	bic.w	r2, r3, #7
 8005232:	4965      	ldr	r1, [pc, #404]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0b8      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800526e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4a52      	ldr	r2, [pc, #328]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005286:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b50      	ldr	r3, [pc, #320]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	494d      	ldr	r1, [pc, #308]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d040      	beq.n	8005328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b47      	ldr	r3, [pc, #284]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d115      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e07f      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c6:	4b41      	ldr	r3, [pc, #260]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e073      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e06b      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e6:	4b39      	ldr	r3, [pc, #228]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f023 0203 	bic.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	4936      	ldr	r1, [pc, #216]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f8:	f7ff f95e 	bl	80045b8 <HAL_GetTick>
 80052fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fe:	e00a      	b.n	8005316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005300:	f7ff f95a 	bl	80045b8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e053      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 020c 	and.w	r2, r3, #12
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	429a      	cmp	r2, r3
 8005326:	d1eb      	bne.n	8005300 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d210      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 0207 	bic.w	r2, r3, #7
 800533e:	4922      	ldr	r1, [pc, #136]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e032      	b.n	80053be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4916      	ldr	r1, [pc, #88]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005396:	f000 f865 	bl	8005464 <HAL_RCC_GetSysClockFreq>
 800539a:	4601      	mov	r1, r0
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x1c8>)
 80053a8:	5cd3      	ldrb	r3, [r2, r3]
 80053aa:	fa21 f303 	lsr.w	r3, r1, r3
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <HAL_RCC_ClockConfig+0x1cc>)
 80053b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1d0>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f8bc 	bl	8004534 <HAL_InitTick>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40022000 	.word	0x40022000
 80053cc:	40021000 	.word	0x40021000
 80053d0:	08009e48 	.word	0x08009e48
 80053d4:	20000010 	.word	0x20000010
 80053d8:	20000014 	.word	0x20000014

080053dc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80053e8:	f107 0318 	add.w	r3, r7, #24
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80053f6:	2302      	movs	r3, #2
 80053f8:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80053fa:	2303      	movs	r3, #3
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8005402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005406:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <HAL_RCC_MCOConfig+0x68>)
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <HAL_RCC_MCOConfig+0x68>)
 800540e:	f043 0304 	orr.w	r3, r3, #4
 8005412:	6193      	str	r3, [r2, #24]
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_MCOConfig+0x68>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005420:	f107 0318 	add.w	r3, r7, #24
 8005424:	4619      	mov	r1, r3
 8005426:	4808      	ldr	r0, [pc, #32]	; (8005448 <HAL_RCC_MCOConfig+0x6c>)
 8005428:	f7ff fad2 	bl	80049d0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_MCOConfig+0x68>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005434:	4903      	ldr	r1, [pc, #12]	; (8005444 <HAL_RCC_MCOConfig+0x68>)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4313      	orrs	r3, r2
 800543a:	604b      	str	r3, [r1, #4]
}
 800543c:	bf00      	nop
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	40010800 	.word	0x40010800

0800544c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <HAL_RCC_EnableCSS+0x14>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	4242004c 	.word	0x4242004c

08005464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005464:	b490      	push	{r4, r7}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <HAL_RCC_GetSysClockFreq+0xb0>)
 800546c:	1d3c      	adds	r4, r7, #4
 800546e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005474:	4b28      	ldr	r3, [pc, #160]	; (8005518 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x40>
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x46>
 80054a2:	e02d      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054a6:	623b      	str	r3, [r7, #32]
      break;
 80054a8:	e02d      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	0c9b      	lsrs	r3, r3, #18
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054b6:	4413      	add	r3, r2
 80054b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80054bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d013      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_RCC_GetSysClockFreq+0xb8>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c5b      	lsrs	r3, r3, #17
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80054d6:	4413      	add	r3, r2
 80054d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80054dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054e2:	fb02 f203 	mul.w	r2, r2, r3
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
 80054ee:	e004      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	623b      	str	r3, [r7, #32]
      break;
 80054fe:	e002      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b07      	ldr	r3, [pc, #28]	; (8005520 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005502:	623b      	str	r3, [r7, #32]
      break;
 8005504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005506:	6a3b      	ldr	r3, [r7, #32]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	; 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bc90      	pop	{r4, r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	08009c34 	.word	0x08009c34
 8005518:	08009c44 	.word	0x08009c44
 800551c:	40021000 	.word	0x40021000
 8005520:	007a1200 	.word	0x007a1200
 8005524:	003d0900 	.word	0x003d0900

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b02      	ldr	r3, [pc, #8]	; (8005538 <HAL_RCC_GetHCLKFreq+0x10>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	20000010 	.word	0x20000010

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff2 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005544:	4601      	mov	r1, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4a03      	ldr	r2, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5cd3      	ldrb	r3, [r2, r3]
 8005554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40021000 	.word	0x40021000
 8005560:	08009e58 	.word	0x08009e58

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffde 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 800556c:	4601      	mov	r1, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0adb      	lsrs	r3, r3, #11
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4a03      	ldr	r2, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	08009e58 	.word	0x08009e58

0800558c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <HAL_RCC_NMI_IRQHandler+0x20>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d104      	bne.n	80055a6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800559c:	f000 f828 	bl	80055f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80055a2:	2280      	movs	r2, #128	; 0x80
 80055a4:	701a      	strb	r2, [r3, #0]
  }
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	4002100a 	.word	0x4002100a

080055b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <RCC_Delay+0x34>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <RCC_Delay+0x38>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	0a5b      	lsrs	r3, r3, #9
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055d0:	bf00      	nop
  }
  while (Delay --);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	60fa      	str	r2, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f9      	bne.n	80055d0 <RCC_Delay+0x1c>
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000010 	.word	0x20000010
 80055ec:	10624dd3 	.word	0x10624dd3

080055f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e076      	b.n	80056fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d108      	bne.n	8005628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561e:	d009      	beq.n	8005634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	61da      	str	r2, [r3, #28]
 8005626:	e005      	b.n	8005634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fe fd70 	bl	8004134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	ea42 0103 	orr.w	r1, r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	0c1a      	lsrs	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f002 0204 	and.w	r2, r2, #4
 80056da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_SPI_Transmit+0x22>
 8005722:	2302      	movs	r3, #2
 8005724:	e126      	b.n	8005974 <HAL_SPI_Transmit+0x270>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572e:	f7fe ff43 	bl	80045b8 <HAL_GetTick>
 8005732:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005748:	e10b      	b.n	8005962 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <HAL_SPI_Transmit+0x52>
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	77fb      	strb	r3, [r7, #31]
    goto error;
 800575a:	e102      	b.n	8005962 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2203      	movs	r2, #3
 8005760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a2:	d10f      	bne.n	80057c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b40      	cmp	r3, #64	; 0x40
 80057d0:	d007      	beq.n	80057e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ea:	d14b      	bne.n	8005884 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Transmit+0xf6>
 80057f4:	8afb      	ldrh	r3, [r7, #22]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d13e      	bne.n	8005878 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800581e:	e02b      	b.n	8005878 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d112      	bne.n	8005854 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	1c9a      	adds	r2, r3, #2
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	86da      	strh	r2, [r3, #54]	; 0x36
 8005852:	e011      	b.n	8005878 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005854:	f7fe feb0 	bl	80045b8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d803      	bhi.n	800586c <HAL_SPI_Transmit+0x168>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d102      	bne.n	8005872 <HAL_SPI_Transmit+0x16e>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005876:	e074      	b.n	8005962 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ce      	bne.n	8005820 <HAL_SPI_Transmit+0x11c>
 8005882:	e04c      	b.n	800591e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x18e>
 800588c:	8afb      	ldrh	r3, [r7, #22]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d140      	bne.n	8005914 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058b8:	e02c      	b.n	8005914 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d113      	bne.n	80058f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80058ee:	e011      	b.n	8005914 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f0:	f7fe fe62 	bl	80045b8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d803      	bhi.n	8005908 <HAL_SPI_Transmit+0x204>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d102      	bne.n	800590e <HAL_SPI_Transmit+0x20a>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005912:	e026      	b.n	8005962 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1cd      	bne.n	80058ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fbb8 	bl	8006098 <SPI_EndRxTxTransaction>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	77fb      	strb	r3, [r7, #31]
 800595e:	e000      	b.n	8005962 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005960:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005972:	7ffb      	ldrb	r3, [r7, #31]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005998:	d112      	bne.n	80059c0 <HAL_SPI_Receive+0x44>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10e      	bne.n	80059c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2204      	movs	r2, #4
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f8f1 	bl	8005b9e <HAL_SPI_TransmitReceive>
 80059bc:	4603      	mov	r3, r0
 80059be:	e0ea      	b.n	8005b96 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_SPI_Receive+0x52>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0e3      	b.n	8005b96 <HAL_SPI_Receive+0x21a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059d6:	f7fe fdef 	bl	80045b8 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059ec:	e0ca      	b.n	8005b84 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Receive+0x7e>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059fe:	e0c1      	b.n	8005b84 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2204      	movs	r2, #4
 8005a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a46:	d10f      	bne.n	8005a68 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d007      	beq.n	8005a86 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d162      	bne.n	8005b54 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a8e:	e02e      	b.n	8005aee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d115      	bne.n	8005aca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f103 020c 	add.w	r2, r3, #12
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	7812      	ldrb	r2, [r2, #0]
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ac8:	e011      	b.n	8005aee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aca:	f7fe fd75 	bl	80045b8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d803      	bhi.n	8005ae2 <HAL_SPI_Receive+0x166>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d102      	bne.n	8005ae8 <HAL_SPI_Receive+0x16c>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005aec:	e04a      	b.n	8005b84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1cb      	bne.n	8005a90 <HAL_SPI_Receive+0x114>
 8005af8:	e031      	b.n	8005b5e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d113      	bne.n	8005b30 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	b292      	uxth	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b2e:	e011      	b.n	8005b54 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b30:	f7fe fd42 	bl	80045b8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d803      	bhi.n	8005b48 <HAL_SPI_Receive+0x1cc>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Receive+0x1d2>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b52:	e017      	b.n	8005b84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cd      	bne.n	8005afa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	6839      	ldr	r1, [r7, #0]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 fa46 	bl	8005ff4 <SPI_EndRxTransaction>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
 8005b80:	e000      	b.n	8005b84 <HAL_SPI_Receive+0x208>
  }

error :
 8005b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b08c      	sub	sp, #48	; 0x30
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bac:	2301      	movs	r3, #1
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_SPI_TransmitReceive+0x26>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e18a      	b.n	8005eda <HAL_SPI_TransmitReceive+0x33c>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bcc:	f7fe fcf4 	bl	80045b8 <HAL_GetTick>
 8005bd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005be2:	887b      	ldrh	r3, [r7, #2]
 8005be4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00f      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x70>
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf4:	d107      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x68>
 8005bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
 8005c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c0c:	e15b      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x82>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x82>
 8005c1a:	887b      	ldrh	r3, [r7, #2]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c26:	e14e      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d003      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	887a      	ldrh	r2, [r7, #2]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d007      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d178      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x10a>
 8005ca2:	8b7b      	ldrh	r3, [r7, #26]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d166      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	881a      	ldrh	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb8:	1c9a      	adds	r2, r3, #2
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ccc:	e053      	b.n	8005d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d11b      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x176>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x176>
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d113      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	1c9a      	adds	r2, r3, #2
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d119      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x1b8>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d014      	beq.n	8005d56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	b292      	uxth	r2, r2
 8005d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d52:	2301      	movs	r3, #1
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d56:	f7fe fc2f 	bl	80045b8 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d807      	bhi.n	8005d76 <HAL_SPI_TransmitReceive+0x1d8>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d003      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d74:	e0a7      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1a6      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x130>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1a1      	bne.n	8005cce <HAL_SPI_TransmitReceive+0x130>
 8005d8a:	e07c      	b.n	8005e86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_SPI_TransmitReceive+0x1fc>
 8005d94:	8b7b      	ldrh	r3, [r7, #26]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d16b      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	7812      	ldrb	r2, [r2, #0]
 8005da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc0:	e057      	b.n	8005e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d11c      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x26c>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x26c>
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d114      	bne.n	8005e0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d119      	bne.n	8005e4c <HAL_SPI_TransmitReceive+0x2ae>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d014      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e4c:	f7fe fbb4 	bl	80045b8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d803      	bhi.n	8005e64 <HAL_SPI_TransmitReceive+0x2c6>
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_TransmitReceive+0x2cc>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005e70:	e029      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1a2      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x224>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d19d      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f904 	bl	8006098 <SPI_EndRxTxTransaction>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ea2:	e010      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	e000      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3730      	adds	r7, #48	; 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ef4:	f7fe fb60 	bl	80045b8 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f04:	f7fe fb58 	bl	80045b8 <HAL_GetTick>
 8005f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f0a:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	0d1b      	lsrs	r3, r3, #20
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1a:	e054      	b.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d050      	beq.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f24:	f7fe fb48 	bl	80045b8 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d902      	bls.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d13d      	bne.n	8005fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d111      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d004      	beq.n	8005f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f66:	d107      	bne.n	8005f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f80:	d10f      	bne.n	8005fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e017      	b.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2301      	moveq	r3, #1
 8005fd8:	2300      	movne	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d19b      	bne.n	8005f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000010 	.word	0x20000010

08005ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d111      	bne.n	800602e <SPI_EndRxTransaction+0x3a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d004      	beq.n	800601e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d107      	bne.n	800602e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006036:	d117      	bne.n	8006068 <SPI_EndRxTransaction+0x74>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006040:	d112      	bne.n	8006068 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	2101      	movs	r1, #1
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff ff49 	bl	8005ee4 <SPI_WaitFlagStateUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01a      	beq.n	800608e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e013      	b.n	8006090 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ff36 	bl	8005ee4 <SPI_WaitFlagStateUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	f043 0220 	orr.w	r2, r3, #32
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e000      	b.n	8006090 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ff18 	bl	8005ee4 <SPI_WaitFlagStateUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e000      	b.n	80060cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e041      	b.n	800616a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fe f866 	bl	80041cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fab6 	bl	8006684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e041      	b.n	8006208 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f839 	bl	8006210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f000 fa67 	bl	8006684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
	...

08006224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x24>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x3e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x58>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e072      	b.n	800637c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x82>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	e013      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0x92>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	e00b      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	e003      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fc90 	bl	8006bfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <HAL_TIM_PWM_Start+0x160>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_TIM_PWM_Start+0xcc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a27      	ldr	r2, [pc, #156]	; (8006388 <HAL_TIM_PWM_Start+0x164>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d101      	bne.n	80062f4 <HAL_TIM_PWM_Start+0xd0>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_TIM_PWM_Start+0xd2>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <HAL_TIM_PWM_Start+0x160>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_TIM_PWM_Start+0x122>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <HAL_TIM_PWM_Start+0x164>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_TIM_PWM_Start+0x122>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d00e      	beq.n	8006346 <HAL_TIM_PWM_Start+0x122>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a17      	ldr	r2, [pc, #92]	; (800638c <HAL_TIM_PWM_Start+0x168>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIM_PWM_Start+0x122>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_TIM_PWM_Start+0x16c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_PWM_Start+0x122>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a14      	ldr	r2, [pc, #80]	; (8006394 <HAL_TIM_PWM_Start+0x170>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d111      	bne.n	800636a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b06      	cmp	r3, #6
 8006356:	d010      	beq.n	800637a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006368:	e007      	b.n	800637a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40013400 	.word	0x40013400
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00

08006398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0ac      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x174>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b0c      	cmp	r3, #12
 80063be:	f200 809f 	bhi.w	8006500 <HAL_TIM_PWM_ConfigChannel+0x168>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063fd 	.word	0x080063fd
 80063cc:	08006501 	.word	0x08006501
 80063d0:	08006501 	.word	0x08006501
 80063d4:	08006501 	.word	0x08006501
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	08006501 	.word	0x08006501
 80063e0:	08006501 	.word	0x08006501
 80063e4:	08006501 	.word	0x08006501
 80063e8:	0800647f 	.word	0x0800647f
 80063ec:	08006501 	.word	0x08006501
 80063f0:	08006501 	.word	0x08006501
 80063f4:	08006501 	.word	0x08006501
 80063f8:	080064bf 	.word	0x080064bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f9b8 	bl	8006778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0208 	orr.w	r2, r2, #8
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	619a      	str	r2, [r3, #24]
      break;
 800643a:	e062      	b.n	8006502 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fa08 	bl	8006858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6999      	ldr	r1, [r3, #24]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	619a      	str	r2, [r3, #24]
      break;
 800647c:	e041      	b.n	8006502 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fa5b 	bl	8006940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0208 	orr.w	r2, r2, #8
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0204 	bic.w	r2, r2, #4
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]
      break;
 80064bc:	e021      	b.n	8006502 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 faaf 	bl	8006a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69d9      	ldr	r1, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	61da      	str	r2, [r3, #28]
      break;
 80064fe:	e000      	b.n	8006502 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIM_ConfigClockSource+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e0a6      	b.n	800667a <HAL_TIM_ConfigClockSource+0x166>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800654a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006552:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d067      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0x120>
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	d80b      	bhi.n	8006580 <HAL_TIM_ConfigClockSource+0x6c>
 8006568:	2b10      	cmp	r3, #16
 800656a:	d073      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0x140>
 800656c:	2b10      	cmp	r3, #16
 800656e:	d802      	bhi.n	8006576 <HAL_TIM_ConfigClockSource+0x62>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d06f      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006574:	e078      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006576:	2b20      	cmp	r3, #32
 8006578:	d06c      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0x140>
 800657a:	2b30      	cmp	r3, #48	; 0x30
 800657c:	d06a      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800657e:	e073      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006580:	2b70      	cmp	r3, #112	; 0x70
 8006582:	d00d      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x8c>
 8006584:	2b70      	cmp	r3, #112	; 0x70
 8006586:	d804      	bhi.n	8006592 <HAL_TIM_ConfigClockSource+0x7e>
 8006588:	2b50      	cmp	r3, #80	; 0x50
 800658a:	d033      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0xe0>
 800658c:	2b60      	cmp	r3, #96	; 0x60
 800658e:	d041      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006590:	e06a      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006596:	d066      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x152>
 8006598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659c:	d017      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800659e:	e063      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6899      	ldr	r1, [r3, #8]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f000 fb05 	bl	8006bbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
      break;
 80065cc:	e04c      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f000 faee 	bl	8006bbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f0:	609a      	str	r2, [r3, #8]
      break;
 80065f2:	e039      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	461a      	mov	r2, r3
 8006602:	f000 fa65 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2150      	movs	r1, #80	; 0x50
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fabc 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 8006612:	e029      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	461a      	mov	r2, r3
 8006622:	f000 fa83 	bl	8006b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2160      	movs	r1, #96	; 0x60
 800662c:	4618      	mov	r0, r3
 800662e:	f000 faac 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 8006632:	e019      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6859      	ldr	r1, [r3, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	461a      	mov	r2, r3
 8006642:	f000 fa45 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2140      	movs	r1, #64	; 0x40
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fa9c 	bl	8006b8a <TIM_ITRx_SetConfig>
      break;
 8006652:	e009      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4619      	mov	r1, r3
 800665e:	4610      	mov	r0, r2
 8006660:	f000 fa93 	bl	8006b8a <TIM_ITRx_SetConfig>
        break;
 8006664:	e000      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a33      	ldr	r2, [pc, #204]	; (8006764 <TIM_Base_SetConfig+0xe0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a32      	ldr	r2, [pc, #200]	; (8006768 <TIM_Base_SetConfig+0xe4>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00f      	beq.n	80066c4 <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d00b      	beq.n	80066c4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2f      	ldr	r2, [pc, #188]	; (800676c <TIM_Base_SetConfig+0xe8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d007      	beq.n	80066c4 <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2e      	ldr	r2, [pc, #184]	; (8006770 <TIM_Base_SetConfig+0xec>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <TIM_Base_SetConfig+0xf0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d108      	bne.n	80066d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a22      	ldr	r2, [pc, #136]	; (8006764 <TIM_Base_SetConfig+0xe0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <TIM_Base_SetConfig+0x82>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a21      	ldr	r2, [pc, #132]	; (8006768 <TIM_Base_SetConfig+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00f      	beq.n	8006706 <TIM_Base_SetConfig+0x82>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d00b      	beq.n	8006706 <TIM_Base_SetConfig+0x82>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1e      	ldr	r2, [pc, #120]	; (800676c <TIM_Base_SetConfig+0xe8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <TIM_Base_SetConfig+0x82>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <TIM_Base_SetConfig+0xec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_Base_SetConfig+0x82>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1c      	ldr	r2, [pc, #112]	; (8006774 <TIM_Base_SetConfig+0xf0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d108      	bne.n	8006718 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <TIM_Base_SetConfig+0xe0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_Base_SetConfig+0xc8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <TIM_Base_SetConfig+0xe4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d103      	bne.n	8006754 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	615a      	str	r2, [r3, #20]
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40013400 	.word	0x40013400
 800676c:	40000400 	.word	0x40000400
 8006770:	40000800 	.word	0x40000800
 8006774:	40000c00 	.word	0x40000c00

08006778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f023 0201 	bic.w	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 0302 	bic.w	r3, r3, #2
 80067c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a20      	ldr	r2, [pc, #128]	; (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC1_SetConfig+0x64>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <TIM_OC1_SetConfig+0xdc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10c      	bne.n	80067f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0308 	bic.w	r3, r3, #8
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC1_SetConfig+0xd8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0x8e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a14      	ldr	r2, [pc, #80]	; (8006854 <TIM_OC1_SetConfig+0xdc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40013400 	.word	0x40013400

08006858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0210 	bic.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a21      	ldr	r2, [pc, #132]	; (8006938 <TIM_OC2_SetConfig+0xe0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_OC2_SetConfig+0x68>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_OC2_SetConfig+0xe4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10d      	bne.n	80068dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a16      	ldr	r2, [pc, #88]	; (8006938 <TIM_OC2_SetConfig+0xe0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x94>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a15      	ldr	r2, [pc, #84]	; (800693c <TIM_OC2_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d113      	bne.n	8006914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	621a      	str	r2, [r3, #32]
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	40012c00 	.word	0x40012c00
 800693c:	40013400 	.word	0x40013400

08006940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a21      	ldr	r2, [pc, #132]	; (8006a20 <TIM_OC3_SetConfig+0xe0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_OC3_SetConfig+0x66>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a20      	ldr	r2, [pc, #128]	; (8006a24 <TIM_OC3_SetConfig+0xe4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10d      	bne.n	80069c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <TIM_OC3_SetConfig+0xe0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC3_SetConfig+0x92>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <TIM_OC3_SetConfig+0xe4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d113      	bne.n	80069fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40013400 	.word	0x40013400

08006a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	021b      	lsls	r3, r3, #8
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	031b      	lsls	r3, r3, #12
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a11      	ldr	r2, [pc, #68]	; (8006ac8 <TIM_OC4_SetConfig+0xa0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC4_SetConfig+0x68>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a10      	ldr	r2, [pc, #64]	; (8006acc <TIM_OC4_SetConfig+0xa4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d109      	bne.n	8006aa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	019b      	lsls	r3, r3, #6
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400

08006ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 030a 	bic.w	r3, r3, #10
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f023 0210 	bic.w	r2, r3, #16
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	031b      	lsls	r3, r3, #12
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	621a      	str	r2, [r3, #32]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f043 0307 	orr.w	r3, r3, #7
 8006bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	021a      	lsls	r2, r3, #8
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	609a      	str	r2, [r3, #8]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2201      	movs	r2, #1
 8006c10:	fa02 f303 	lsl.w	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	401a      	ands	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	fa01 f303 	lsl.w	r3, r1, r3
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e050      	b.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d10c      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00

08006d1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e03f      	b.n	8006dae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fd fa92 	bl	800426c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2224      	movs	r2, #36	; 0x24
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f829 	bl	8006db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006df2:	f023 030c 	bic.w	r3, r3, #12
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a2c      	ldr	r2, [pc, #176]	; (8006ecc <UART_SetConfig+0x114>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fe fba0 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006e28:	f7fe fb88 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006e2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009a      	lsls	r2, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e44:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	0119      	lsls	r1, r3, #4
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009a      	lsls	r2, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e64:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e66:	fba3 0302 	umull	r0, r3, r3, r2
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	2064      	movs	r0, #100	; 0x64
 8006e6e:	fb00 f303 	mul.w	r3, r0, r3
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	3332      	adds	r3, #50	; 0x32
 8006e78:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e84:	4419      	add	r1, r3
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009a      	lsls	r2, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <UART_SetConfig+0x118>)
 8006e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2064      	movs	r0, #100	; 0x64
 8006ea6:	fb00 f303 	mul.w	r3, r0, r3
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	3332      	adds	r3, #50	; 0x32
 8006eb0:	4a07      	ldr	r2, [pc, #28]	; (8006ed0 <UART_SetConfig+0x118>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	40013800 	.word	0x40013800
 8006ed0:	51eb851f 	.word	0x51eb851f

08006ed4 <__errno>:
 8006ed4:	4b01      	ldr	r3, [pc, #4]	; (8006edc <__errno+0x8>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	2000001c 	.word	0x2000001c

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	4e0c      	ldr	r6, [pc, #48]	; (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	; (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1ba4      	subs	r4, r4, r6
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a5      	cmp	r5, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f002 fd94 	bl	8009a1c <_init>
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	4e0a      	ldr	r6, [pc, #40]	; (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	; (8006f24 <__libc_init_array+0x44>)
 8006efa:	1ba4      	subs	r4, r4, r6
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a5      	cmp	r5, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f08:	4798      	blx	r3
 8006f0a:	3501      	adds	r5, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f12:	4798      	blx	r3
 8006f14:	3501      	adds	r5, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	0800a128 	.word	0x0800a128
 8006f1c:	0800a128 	.word	0x0800a128
 8006f20:	0800a128 	.word	0x0800a128
 8006f24:	0800a12c 	.word	0x0800a12c

08006f28 <memset>:
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4402      	add	r2, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <__cvt>:
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3e:	461e      	mov	r6, r3
 8006f40:	bfbb      	ittet	lt
 8006f42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	461e      	movlt	r6, r3
 8006f48:	2300      	movge	r3, #0
 8006f4a:	232d      	movlt	r3, #45	; 0x2d
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f50:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006f54:	f027 0720 	bic.w	r7, r7, #32
 8006f58:	2f46      	cmp	r7, #70	; 0x46
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f5e:	700b      	strb	r3, [r1, #0]
 8006f60:	d004      	beq.n	8006f6c <__cvt+0x34>
 8006f62:	2f45      	cmp	r7, #69	; 0x45
 8006f64:	d100      	bne.n	8006f68 <__cvt+0x30>
 8006f66:	3501      	adds	r5, #1
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e000      	b.n	8006f6e <__cvt+0x36>
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	aa07      	add	r2, sp, #28
 8006f70:	9204      	str	r2, [sp, #16]
 8006f72:	aa06      	add	r2, sp, #24
 8006f74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f78:	e9cd 3500 	strd	r3, r5, [sp]
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	4633      	mov	r3, r6
 8006f80:	f000 fe0a 	bl	8007b98 <_dtoa_r>
 8006f84:	2f47      	cmp	r7, #71	; 0x47
 8006f86:	4680      	mov	r8, r0
 8006f88:	d102      	bne.n	8006f90 <__cvt+0x58>
 8006f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f8c:	07db      	lsls	r3, r3, #31
 8006f8e:	d526      	bpl.n	8006fde <__cvt+0xa6>
 8006f90:	2f46      	cmp	r7, #70	; 0x46
 8006f92:	eb08 0905 	add.w	r9, r8, r5
 8006f96:	d111      	bne.n	8006fbc <__cvt+0x84>
 8006f98:	f898 3000 	ldrb.w	r3, [r8]
 8006f9c:	2b30      	cmp	r3, #48	; 0x30
 8006f9e:	d10a      	bne.n	8006fb6 <__cvt+0x7e>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	f7f9 fd6a 	bl	8000a80 <__aeabi_dcmpeq>
 8006fac:	b918      	cbnz	r0, 8006fb6 <__cvt+0x7e>
 8006fae:	f1c5 0501 	rsb	r5, r5, #1
 8006fb2:	f8ca 5000 	str.w	r5, [sl]
 8006fb6:	f8da 3000 	ldr.w	r3, [sl]
 8006fba:	4499      	add	r9, r3
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	f7f9 fd5c 	bl	8000a80 <__aeabi_dcmpeq>
 8006fc8:	b938      	cbnz	r0, 8006fda <__cvt+0xa2>
 8006fca:	2230      	movs	r2, #48	; 0x30
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	454b      	cmp	r3, r9
 8006fd0:	d205      	bcs.n	8006fde <__cvt+0xa6>
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	9107      	str	r1, [sp, #28]
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e7f8      	b.n	8006fcc <__cvt+0x94>
 8006fda:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fde:	4640      	mov	r0, r8
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fe4:	eba3 0308 	sub.w	r3, r3, r8
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	b008      	add	sp, #32
 8006fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006ff0 <__exponent>:
 8006ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	bfb4      	ite	lt
 8006ff6:	232d      	movlt	r3, #45	; 0x2d
 8006ff8:	232b      	movge	r3, #43	; 0x2b
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	bfb8      	it	lt
 8006ffe:	4249      	neglt	r1, r1
 8007000:	2909      	cmp	r1, #9
 8007002:	f804 2b02 	strb.w	r2, [r4], #2
 8007006:	7043      	strb	r3, [r0, #1]
 8007008:	dd21      	ble.n	800704e <__exponent+0x5e>
 800700a:	f10d 0307 	add.w	r3, sp, #7
 800700e:	461f      	mov	r7, r3
 8007010:	260a      	movs	r6, #10
 8007012:	fb91 f5f6 	sdiv	r5, r1, r6
 8007016:	fb06 1115 	mls	r1, r6, r5, r1
 800701a:	2d09      	cmp	r5, #9
 800701c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007020:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007024:	f103 32ff 	add.w	r2, r3, #4294967295
 8007028:	4629      	mov	r1, r5
 800702a:	dc09      	bgt.n	8007040 <__exponent+0x50>
 800702c:	3130      	adds	r1, #48	; 0x30
 800702e:	3b02      	subs	r3, #2
 8007030:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007034:	42bb      	cmp	r3, r7
 8007036:	4622      	mov	r2, r4
 8007038:	d304      	bcc.n	8007044 <__exponent+0x54>
 800703a:	1a10      	subs	r0, r2, r0
 800703c:	b003      	add	sp, #12
 800703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007040:	4613      	mov	r3, r2
 8007042:	e7e6      	b.n	8007012 <__exponent+0x22>
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	f804 2b01 	strb.w	r2, [r4], #1
 800704c:	e7f2      	b.n	8007034 <__exponent+0x44>
 800704e:	2330      	movs	r3, #48	; 0x30
 8007050:	4419      	add	r1, r3
 8007052:	7083      	strb	r3, [r0, #2]
 8007054:	1d02      	adds	r2, r0, #4
 8007056:	70c1      	strb	r1, [r0, #3]
 8007058:	e7ef      	b.n	800703a <__exponent+0x4a>
	...

0800705c <_printf_float>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	b091      	sub	sp, #68	; 0x44
 8007062:	460c      	mov	r4, r1
 8007064:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007066:	4693      	mov	fp, r2
 8007068:	461e      	mov	r6, r3
 800706a:	4605      	mov	r5, r0
 800706c:	f001 fcc2 	bl	80089f4 <_localeconv_r>
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	9309      	str	r3, [sp, #36]	; 0x24
 8007076:	f7f9 f8d7 	bl	8000228 <strlen>
 800707a:	2300      	movs	r3, #0
 800707c:	930e      	str	r3, [sp, #56]	; 0x38
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	900a      	str	r0, [sp, #40]	; 0x28
 8007082:	3307      	adds	r3, #7
 8007084:	f023 0307 	bic.w	r3, r3, #7
 8007088:	f103 0208 	add.w	r2, r3, #8
 800708c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007090:	f8d4 a000 	ldr.w	sl, [r4]
 8007094:	603a      	str	r2, [r7, #0]
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800709e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80070a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	4ba6      	ldr	r3, [pc, #664]	; (8007348 <_printf_float+0x2ec>)
 80070ae:	4638      	mov	r0, r7
 80070b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b2:	f7f9 fd17 	bl	8000ae4 <__aeabi_dcmpun>
 80070b6:	bb68      	cbnz	r0, 8007114 <_printf_float+0xb8>
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295
 80070bc:	4ba2      	ldr	r3, [pc, #648]	; (8007348 <_printf_float+0x2ec>)
 80070be:	4638      	mov	r0, r7
 80070c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070c2:	f7f9 fcf1 	bl	8000aa8 <__aeabi_dcmple>
 80070c6:	bb28      	cbnz	r0, 8007114 <_printf_float+0xb8>
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	4638      	mov	r0, r7
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 fce0 	bl	8000a94 <__aeabi_dcmplt>
 80070d4:	b110      	cbz	r0, 80070dc <_printf_float+0x80>
 80070d6:	232d      	movs	r3, #45	; 0x2d
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	4f9b      	ldr	r7, [pc, #620]	; (800734c <_printf_float+0x2f0>)
 80070de:	4b9c      	ldr	r3, [pc, #624]	; (8007350 <_printf_float+0x2f4>)
 80070e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070e4:	bf98      	it	ls
 80070e6:	461f      	movls	r7, r3
 80070e8:	2303      	movs	r3, #3
 80070ea:	f04f 0900 	mov.w	r9, #0
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	f02a 0304 	bic.w	r3, sl, #4
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	9600      	str	r6, [sp, #0]
 80070f8:	465b      	mov	r3, fp
 80070fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f9e2 	bl	80074c8 <_printf_common>
 8007104:	3001      	adds	r0, #1
 8007106:	f040 8090 	bne.w	800722a <_printf_float+0x1ce>
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	b011      	add	sp, #68	; 0x44
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	463a      	mov	r2, r7
 8007116:	464b      	mov	r3, r9
 8007118:	4638      	mov	r0, r7
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fce2 	bl	8000ae4 <__aeabi_dcmpun>
 8007120:	b110      	cbz	r0, 8007128 <_printf_float+0xcc>
 8007122:	4f8c      	ldr	r7, [pc, #560]	; (8007354 <_printf_float+0x2f8>)
 8007124:	4b8c      	ldr	r3, [pc, #560]	; (8007358 <_printf_float+0x2fc>)
 8007126:	e7db      	b.n	80070e0 <_printf_float+0x84>
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	a80d      	add	r0, sp, #52	; 0x34
 8007132:	a90e      	add	r1, sp, #56	; 0x38
 8007134:	d140      	bne.n	80071b8 <_printf_float+0x15c>
 8007136:	2306      	movs	r3, #6
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	f04f 0c00 	mov.w	ip, #0
 800713e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8007142:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	463a      	mov	r2, r7
 8007152:	464b      	mov	r3, r9
 8007154:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007158:	4628      	mov	r0, r5
 800715a:	f7ff feed 	bl	8006f38 <__cvt>
 800715e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8007162:	2b47      	cmp	r3, #71	; 0x47
 8007164:	4607      	mov	r7, r0
 8007166:	d109      	bne.n	800717c <_printf_float+0x120>
 8007168:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800716a:	1cd8      	adds	r0, r3, #3
 800716c:	db02      	blt.n	8007174 <_printf_float+0x118>
 800716e:	6862      	ldr	r2, [r4, #4]
 8007170:	4293      	cmp	r3, r2
 8007172:	dd47      	ble.n	8007204 <_printf_float+0x1a8>
 8007174:	f1a8 0802 	sub.w	r8, r8, #2
 8007178:	fa5f f888 	uxtb.w	r8, r8
 800717c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007180:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007182:	d824      	bhi.n	80071ce <_printf_float+0x172>
 8007184:	3901      	subs	r1, #1
 8007186:	4642      	mov	r2, r8
 8007188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800718c:	910d      	str	r1, [sp, #52]	; 0x34
 800718e:	f7ff ff2f 	bl	8006ff0 <__exponent>
 8007192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007194:	4681      	mov	r9, r0
 8007196:	1813      	adds	r3, r2, r0
 8007198:	2a01      	cmp	r2, #1
 800719a:	6123      	str	r3, [r4, #16]
 800719c:	dc02      	bgt.n	80071a4 <_printf_float+0x148>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	07d1      	lsls	r1, r2, #31
 80071a2:	d501      	bpl.n	80071a8 <_printf_float+0x14c>
 80071a4:	3301      	adds	r3, #1
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0a2      	beq.n	80070f6 <_printf_float+0x9a>
 80071b0:	232d      	movs	r3, #45	; 0x2d
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	e79e      	b.n	80070f6 <_printf_float+0x9a>
 80071b8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80071bc:	f000 816e 	beq.w	800749c <_printf_float+0x440>
 80071c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80071c4:	d1b9      	bne.n	800713a <_printf_float+0xde>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1b7      	bne.n	800713a <_printf_float+0xde>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7b4      	b.n	8007138 <_printf_float+0xdc>
 80071ce:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80071d2:	d119      	bne.n	8007208 <_printf_float+0x1ac>
 80071d4:	2900      	cmp	r1, #0
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	dd0c      	ble.n	80071f4 <_printf_float+0x198>
 80071da:	6121      	str	r1, [r4, #16]
 80071dc:	b913      	cbnz	r3, 80071e4 <_printf_float+0x188>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d2      	lsls	r2, r2, #31
 80071e2:	d502      	bpl.n	80071ea <_printf_float+0x18e>
 80071e4:	3301      	adds	r3, #1
 80071e6:	440b      	add	r3, r1
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80071f2:	e7d9      	b.n	80071a8 <_printf_float+0x14c>
 80071f4:	b913      	cbnz	r3, 80071fc <_printf_float+0x1a0>
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	07d0      	lsls	r0, r2, #31
 80071fa:	d501      	bpl.n	8007200 <_printf_float+0x1a4>
 80071fc:	3302      	adds	r3, #2
 80071fe:	e7f3      	b.n	80071e8 <_printf_float+0x18c>
 8007200:	2301      	movs	r3, #1
 8007202:	e7f1      	b.n	80071e8 <_printf_float+0x18c>
 8007204:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007208:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800720c:	4293      	cmp	r3, r2
 800720e:	db05      	blt.n	800721c <_printf_float+0x1c0>
 8007210:	6822      	ldr	r2, [r4, #0]
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	07d1      	lsls	r1, r2, #31
 8007216:	d5e8      	bpl.n	80071ea <_printf_float+0x18e>
 8007218:	3301      	adds	r3, #1
 800721a:	e7e5      	b.n	80071e8 <_printf_float+0x18c>
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfcc      	ite	gt
 8007220:	2301      	movgt	r3, #1
 8007222:	f1c3 0302 	rsble	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	e7de      	b.n	80071e8 <_printf_float+0x18c>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	055a      	lsls	r2, r3, #21
 800722e:	d407      	bmi.n	8007240 <_printf_float+0x1e4>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	463a      	mov	r2, r7
 8007234:	4659      	mov	r1, fp
 8007236:	4628      	mov	r0, r5
 8007238:	47b0      	blx	r6
 800723a:	3001      	adds	r0, #1
 800723c:	d129      	bne.n	8007292 <_printf_float+0x236>
 800723e:	e764      	b.n	800710a <_printf_float+0xae>
 8007240:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007244:	f240 80d7 	bls.w	80073f6 <_printf_float+0x39a>
 8007248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800724c:	2200      	movs	r2, #0
 800724e:	2300      	movs	r3, #0
 8007250:	f7f9 fc16 	bl	8000a80 <__aeabi_dcmpeq>
 8007254:	b388      	cbz	r0, 80072ba <_printf_float+0x25e>
 8007256:	2301      	movs	r3, #1
 8007258:	4a40      	ldr	r2, [pc, #256]	; (800735c <_printf_float+0x300>)
 800725a:	4659      	mov	r1, fp
 800725c:	4628      	mov	r0, r5
 800725e:	47b0      	blx	r6
 8007260:	3001      	adds	r0, #1
 8007262:	f43f af52 	beq.w	800710a <_printf_float+0xae>
 8007266:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800726a:	429a      	cmp	r2, r3
 800726c:	db02      	blt.n	8007274 <_printf_float+0x218>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	07d8      	lsls	r0, r3, #31
 8007272:	d50e      	bpl.n	8007292 <_printf_float+0x236>
 8007274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007278:	4659      	mov	r1, fp
 800727a:	4628      	mov	r0, r5
 800727c:	47b0      	blx	r6
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af43 	beq.w	800710a <_printf_float+0xae>
 8007284:	2700      	movs	r7, #0
 8007286:	f104 081a 	add.w	r8, r4, #26
 800728a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800728c:	3b01      	subs	r3, #1
 800728e:	42bb      	cmp	r3, r7
 8007290:	dc09      	bgt.n	80072a6 <_printf_float+0x24a>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	079f      	lsls	r7, r3, #30
 8007296:	f100 80fd 	bmi.w	8007494 <_printf_float+0x438>
 800729a:	68e0      	ldr	r0, [r4, #12]
 800729c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729e:	4298      	cmp	r0, r3
 80072a0:	bfb8      	it	lt
 80072a2:	4618      	movlt	r0, r3
 80072a4:	e733      	b.n	800710e <_printf_float+0xb2>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4642      	mov	r2, r8
 80072aa:	4659      	mov	r1, fp
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b0      	blx	r6
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f af2a 	beq.w	800710a <_printf_float+0xae>
 80072b6:	3701      	adds	r7, #1
 80072b8:	e7e7      	b.n	800728a <_printf_float+0x22e>
 80072ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc2b      	bgt.n	8007318 <_printf_float+0x2bc>
 80072c0:	2301      	movs	r3, #1
 80072c2:	4a26      	ldr	r2, [pc, #152]	; (800735c <_printf_float+0x300>)
 80072c4:	4659      	mov	r1, fp
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b0      	blx	r6
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af1d 	beq.w	800710a <_printf_float+0xae>
 80072d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d2:	b923      	cbnz	r3, 80072de <_printf_float+0x282>
 80072d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d6:	b913      	cbnz	r3, 80072de <_printf_float+0x282>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	07d9      	lsls	r1, r3, #31
 80072dc:	d5d9      	bpl.n	8007292 <_printf_float+0x236>
 80072de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072e2:	4659      	mov	r1, fp
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f af0e 	beq.w	800710a <_printf_float+0xae>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	f104 091a 	add.w	r9, r4, #26
 80072f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072f8:	425b      	negs	r3, r3
 80072fa:	4543      	cmp	r3, r8
 80072fc:	dc01      	bgt.n	8007302 <_printf_float+0x2a6>
 80072fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007300:	e797      	b.n	8007232 <_printf_float+0x1d6>
 8007302:	2301      	movs	r3, #1
 8007304:	464a      	mov	r2, r9
 8007306:	4659      	mov	r1, fp
 8007308:	4628      	mov	r0, r5
 800730a:	47b0      	blx	r6
 800730c:	3001      	adds	r0, #1
 800730e:	f43f aefc 	beq.w	800710a <_printf_float+0xae>
 8007312:	f108 0801 	add.w	r8, r8, #1
 8007316:	e7ee      	b.n	80072f6 <_printf_float+0x29a>
 8007318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800731a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800731c:	429a      	cmp	r2, r3
 800731e:	bfa8      	it	ge
 8007320:	461a      	movge	r2, r3
 8007322:	2a00      	cmp	r2, #0
 8007324:	4690      	mov	r8, r2
 8007326:	dd07      	ble.n	8007338 <_printf_float+0x2dc>
 8007328:	4613      	mov	r3, r2
 800732a:	4659      	mov	r1, fp
 800732c:	463a      	mov	r2, r7
 800732e:	4628      	mov	r0, r5
 8007330:	47b0      	blx	r6
 8007332:	3001      	adds	r0, #1
 8007334:	f43f aee9 	beq.w	800710a <_printf_float+0xae>
 8007338:	f104 031a 	add.w	r3, r4, #26
 800733c:	f04f 0a00 	mov.w	sl, #0
 8007340:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007344:	930b      	str	r3, [sp, #44]	; 0x2c
 8007346:	e015      	b.n	8007374 <_printf_float+0x318>
 8007348:	7fefffff 	.word	0x7fefffff
 800734c:	08009e68 	.word	0x08009e68
 8007350:	08009e64 	.word	0x08009e64
 8007354:	08009e70 	.word	0x08009e70
 8007358:	08009e6c 	.word	0x08009e6c
 800735c:	08009e74 	.word	0x08009e74
 8007360:	2301      	movs	r3, #1
 8007362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007364:	4659      	mov	r1, fp
 8007366:	4628      	mov	r0, r5
 8007368:	47b0      	blx	r6
 800736a:	3001      	adds	r0, #1
 800736c:	f43f aecd 	beq.w	800710a <_printf_float+0xae>
 8007370:	f10a 0a01 	add.w	sl, sl, #1
 8007374:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007378:	eba9 0308 	sub.w	r3, r9, r8
 800737c:	4553      	cmp	r3, sl
 800737e:	dcef      	bgt.n	8007360 <_printf_float+0x304>
 8007380:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007384:	429a      	cmp	r2, r3
 8007386:	444f      	add	r7, r9
 8007388:	db14      	blt.n	80073b4 <_printf_float+0x358>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	07da      	lsls	r2, r3, #31
 800738e:	d411      	bmi.n	80073b4 <_printf_float+0x358>
 8007390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007392:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007394:	eba3 0209 	sub.w	r2, r3, r9
 8007398:	eba3 0901 	sub.w	r9, r3, r1
 800739c:	4591      	cmp	r9, r2
 800739e:	bfa8      	it	ge
 80073a0:	4691      	movge	r9, r2
 80073a2:	f1b9 0f00 	cmp.w	r9, #0
 80073a6:	dc0d      	bgt.n	80073c4 <_printf_float+0x368>
 80073a8:	2700      	movs	r7, #0
 80073aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ae:	f104 081a 	add.w	r8, r4, #26
 80073b2:	e018      	b.n	80073e6 <_printf_float+0x38a>
 80073b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b8:	4659      	mov	r1, fp
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b0      	blx	r6
 80073be:	3001      	adds	r0, #1
 80073c0:	d1e6      	bne.n	8007390 <_printf_float+0x334>
 80073c2:	e6a2      	b.n	800710a <_printf_float+0xae>
 80073c4:	464b      	mov	r3, r9
 80073c6:	463a      	mov	r2, r7
 80073c8:	4659      	mov	r1, fp
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	3001      	adds	r0, #1
 80073d0:	d1ea      	bne.n	80073a8 <_printf_float+0x34c>
 80073d2:	e69a      	b.n	800710a <_printf_float+0xae>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4642      	mov	r2, r8
 80073d8:	4659      	mov	r1, fp
 80073da:	4628      	mov	r0, r5
 80073dc:	47b0      	blx	r6
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f ae93 	beq.w	800710a <_printf_float+0xae>
 80073e4:	3701      	adds	r7, #1
 80073e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073ea:	1a9b      	subs	r3, r3, r2
 80073ec:	eba3 0309 	sub.w	r3, r3, r9
 80073f0:	42bb      	cmp	r3, r7
 80073f2:	dcef      	bgt.n	80073d4 <_printf_float+0x378>
 80073f4:	e74d      	b.n	8007292 <_printf_float+0x236>
 80073f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073f8:	2a01      	cmp	r2, #1
 80073fa:	dc01      	bgt.n	8007400 <_printf_float+0x3a4>
 80073fc:	07db      	lsls	r3, r3, #31
 80073fe:	d538      	bpl.n	8007472 <_printf_float+0x416>
 8007400:	2301      	movs	r3, #1
 8007402:	463a      	mov	r2, r7
 8007404:	4659      	mov	r1, fp
 8007406:	4628      	mov	r0, r5
 8007408:	47b0      	blx	r6
 800740a:	3001      	adds	r0, #1
 800740c:	f43f ae7d 	beq.w	800710a <_printf_float+0xae>
 8007410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007414:	4659      	mov	r1, fp
 8007416:	4628      	mov	r0, r5
 8007418:	47b0      	blx	r6
 800741a:	3001      	adds	r0, #1
 800741c:	f107 0701 	add.w	r7, r7, #1
 8007420:	f43f ae73 	beq.w	800710a <_printf_float+0xae>
 8007424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800742a:	2200      	movs	r2, #0
 800742c:	f103 38ff 	add.w	r8, r3, #4294967295
 8007430:	2300      	movs	r3, #0
 8007432:	f7f9 fb25 	bl	8000a80 <__aeabi_dcmpeq>
 8007436:	b9c0      	cbnz	r0, 800746a <_printf_float+0x40e>
 8007438:	4643      	mov	r3, r8
 800743a:	463a      	mov	r2, r7
 800743c:	4659      	mov	r1, fp
 800743e:	4628      	mov	r0, r5
 8007440:	47b0      	blx	r6
 8007442:	3001      	adds	r0, #1
 8007444:	d10d      	bne.n	8007462 <_printf_float+0x406>
 8007446:	e660      	b.n	800710a <_printf_float+0xae>
 8007448:	2301      	movs	r3, #1
 800744a:	4642      	mov	r2, r8
 800744c:	4659      	mov	r1, fp
 800744e:	4628      	mov	r0, r5
 8007450:	47b0      	blx	r6
 8007452:	3001      	adds	r0, #1
 8007454:	f43f ae59 	beq.w	800710a <_printf_float+0xae>
 8007458:	3701      	adds	r7, #1
 800745a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745c:	3b01      	subs	r3, #1
 800745e:	42bb      	cmp	r3, r7
 8007460:	dcf2      	bgt.n	8007448 <_printf_float+0x3ec>
 8007462:	464b      	mov	r3, r9
 8007464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007468:	e6e4      	b.n	8007234 <_printf_float+0x1d8>
 800746a:	2700      	movs	r7, #0
 800746c:	f104 081a 	add.w	r8, r4, #26
 8007470:	e7f3      	b.n	800745a <_printf_float+0x3fe>
 8007472:	2301      	movs	r3, #1
 8007474:	e7e1      	b.n	800743a <_printf_float+0x3de>
 8007476:	2301      	movs	r3, #1
 8007478:	4642      	mov	r2, r8
 800747a:	4659      	mov	r1, fp
 800747c:	4628      	mov	r0, r5
 800747e:	47b0      	blx	r6
 8007480:	3001      	adds	r0, #1
 8007482:	f43f ae42 	beq.w	800710a <_printf_float+0xae>
 8007486:	3701      	adds	r7, #1
 8007488:	68e3      	ldr	r3, [r4, #12]
 800748a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	42bb      	cmp	r3, r7
 8007490:	dcf1      	bgt.n	8007476 <_printf_float+0x41a>
 8007492:	e702      	b.n	800729a <_printf_float+0x23e>
 8007494:	2700      	movs	r7, #0
 8007496:	f104 0819 	add.w	r8, r4, #25
 800749a:	e7f5      	b.n	8007488 <_printf_float+0x42c>
 800749c:	2b00      	cmp	r3, #0
 800749e:	f43f ae94 	beq.w	80071ca <_printf_float+0x16e>
 80074a2:	f04f 0c00 	mov.w	ip, #0
 80074a6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80074aa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80074b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	463a      	mov	r2, r7
 80074bc:	464b      	mov	r3, r9
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff fd3a 	bl	8006f38 <__cvt>
 80074c4:	4607      	mov	r7, r0
 80074c6:	e64f      	b.n	8007168 <_printf_float+0x10c>

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4691      	mov	r9, r2
 80074ce:	461f      	mov	r7, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	4606      	mov	r6, r0
 80074d6:	4293      	cmp	r3, r2
 80074d8:	bfb8      	it	lt
 80074da:	4613      	movlt	r3, r2
 80074dc:	f8c9 3000 	str.w	r3, [r9]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e4:	460c      	mov	r4, r1
 80074e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074ea:	b112      	cbz	r2, 80074f2 <_printf_common+0x2a>
 80074ec:	3301      	adds	r3, #1
 80074ee:	f8c9 3000 	str.w	r3, [r9]
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	0699      	lsls	r1, r3, #26
 80074f6:	bf42      	ittt	mi
 80074f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074fc:	3302      	addmi	r3, #2
 80074fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007502:	6825      	ldr	r5, [r4, #0]
 8007504:	f015 0506 	ands.w	r5, r5, #6
 8007508:	d107      	bne.n	800751a <_printf_common+0x52>
 800750a:	f104 0a19 	add.w	sl, r4, #25
 800750e:	68e3      	ldr	r3, [r4, #12]
 8007510:	f8d9 2000 	ldr.w	r2, [r9]
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	42ab      	cmp	r3, r5
 8007518:	dc29      	bgt.n	800756e <_printf_common+0xa6>
 800751a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800751e:	6822      	ldr	r2, [r4, #0]
 8007520:	3300      	adds	r3, #0
 8007522:	bf18      	it	ne
 8007524:	2301      	movne	r3, #1
 8007526:	0692      	lsls	r2, r2, #26
 8007528:	d42e      	bmi.n	8007588 <_printf_common+0xc0>
 800752a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800752e:	4639      	mov	r1, r7
 8007530:	4630      	mov	r0, r6
 8007532:	47c0      	blx	r8
 8007534:	3001      	adds	r0, #1
 8007536:	d021      	beq.n	800757c <_printf_common+0xb4>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	68e5      	ldr	r5, [r4, #12]
 800753c:	f003 0306 	and.w	r3, r3, #6
 8007540:	2b04      	cmp	r3, #4
 8007542:	bf18      	it	ne
 8007544:	2500      	movne	r5, #0
 8007546:	f8d9 2000 	ldr.w	r2, [r9]
 800754a:	f04f 0900 	mov.w	r9, #0
 800754e:	bf08      	it	eq
 8007550:	1aad      	subeq	r5, r5, r2
 8007552:	68a3      	ldr	r3, [r4, #8]
 8007554:	6922      	ldr	r2, [r4, #16]
 8007556:	bf08      	it	eq
 8007558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800755c:	4293      	cmp	r3, r2
 800755e:	bfc4      	itt	gt
 8007560:	1a9b      	subgt	r3, r3, r2
 8007562:	18ed      	addgt	r5, r5, r3
 8007564:	341a      	adds	r4, #26
 8007566:	454d      	cmp	r5, r9
 8007568:	d11a      	bne.n	80075a0 <_printf_common+0xd8>
 800756a:	2000      	movs	r0, #0
 800756c:	e008      	b.n	8007580 <_printf_common+0xb8>
 800756e:	2301      	movs	r3, #1
 8007570:	4652      	mov	r2, sl
 8007572:	4639      	mov	r1, r7
 8007574:	4630      	mov	r0, r6
 8007576:	47c0      	blx	r8
 8007578:	3001      	adds	r0, #1
 800757a:	d103      	bne.n	8007584 <_printf_common+0xbc>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007584:	3501      	adds	r5, #1
 8007586:	e7c2      	b.n	800750e <_printf_common+0x46>
 8007588:	2030      	movs	r0, #48	; 0x30
 800758a:	18e1      	adds	r1, r4, r3
 800758c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007596:	4422      	add	r2, r4
 8007598:	3302      	adds	r3, #2
 800759a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800759e:	e7c4      	b.n	800752a <_printf_common+0x62>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4622      	mov	r2, r4
 80075a4:	4639      	mov	r1, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0e6      	beq.n	800757c <_printf_common+0xb4>
 80075ae:	f109 0901 	add.w	r9, r9, #1
 80075b2:	e7d8      	b.n	8007566 <_printf_common+0x9e>

080075b4 <_printf_i>:
 80075b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80075bc:	460c      	mov	r4, r1
 80075be:	7e09      	ldrb	r1, [r1, #24]
 80075c0:	b085      	sub	sp, #20
 80075c2:	296e      	cmp	r1, #110	; 0x6e
 80075c4:	4617      	mov	r7, r2
 80075c6:	4606      	mov	r6, r0
 80075c8:	4698      	mov	r8, r3
 80075ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075cc:	f000 80b3 	beq.w	8007736 <_printf_i+0x182>
 80075d0:	d822      	bhi.n	8007618 <_printf_i+0x64>
 80075d2:	2963      	cmp	r1, #99	; 0x63
 80075d4:	d036      	beq.n	8007644 <_printf_i+0x90>
 80075d6:	d80a      	bhi.n	80075ee <_printf_i+0x3a>
 80075d8:	2900      	cmp	r1, #0
 80075da:	f000 80b9 	beq.w	8007750 <_printf_i+0x19c>
 80075de:	2958      	cmp	r1, #88	; 0x58
 80075e0:	f000 8083 	beq.w	80076ea <_printf_i+0x136>
 80075e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80075ec:	e032      	b.n	8007654 <_printf_i+0xa0>
 80075ee:	2964      	cmp	r1, #100	; 0x64
 80075f0:	d001      	beq.n	80075f6 <_printf_i+0x42>
 80075f2:	2969      	cmp	r1, #105	; 0x69
 80075f4:	d1f6      	bne.n	80075e4 <_printf_i+0x30>
 80075f6:	6820      	ldr	r0, [r4, #0]
 80075f8:	6813      	ldr	r3, [r2, #0]
 80075fa:	0605      	lsls	r5, r0, #24
 80075fc:	f103 0104 	add.w	r1, r3, #4
 8007600:	d52a      	bpl.n	8007658 <_printf_i+0xa4>
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	da03      	bge.n	8007612 <_printf_i+0x5e>
 800760a:	222d      	movs	r2, #45	; 0x2d
 800760c:	425b      	negs	r3, r3
 800760e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007612:	486f      	ldr	r0, [pc, #444]	; (80077d0 <_printf_i+0x21c>)
 8007614:	220a      	movs	r2, #10
 8007616:	e039      	b.n	800768c <_printf_i+0xd8>
 8007618:	2973      	cmp	r1, #115	; 0x73
 800761a:	f000 809d 	beq.w	8007758 <_printf_i+0x1a4>
 800761e:	d808      	bhi.n	8007632 <_printf_i+0x7e>
 8007620:	296f      	cmp	r1, #111	; 0x6f
 8007622:	d020      	beq.n	8007666 <_printf_i+0xb2>
 8007624:	2970      	cmp	r1, #112	; 0x70
 8007626:	d1dd      	bne.n	80075e4 <_printf_i+0x30>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	f043 0320 	orr.w	r3, r3, #32
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	e003      	b.n	800763a <_printf_i+0x86>
 8007632:	2975      	cmp	r1, #117	; 0x75
 8007634:	d017      	beq.n	8007666 <_printf_i+0xb2>
 8007636:	2978      	cmp	r1, #120	; 0x78
 8007638:	d1d4      	bne.n	80075e4 <_printf_i+0x30>
 800763a:	2378      	movs	r3, #120	; 0x78
 800763c:	4865      	ldr	r0, [pc, #404]	; (80077d4 <_printf_i+0x220>)
 800763e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007642:	e055      	b.n	80076f0 <_printf_i+0x13c>
 8007644:	6813      	ldr	r3, [r2, #0]
 8007646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800764a:	1d19      	adds	r1, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6011      	str	r1, [r2, #0]
 8007650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007654:	2301      	movs	r3, #1
 8007656:	e08c      	b.n	8007772 <_printf_i+0x1be>
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800765e:	6011      	str	r1, [r2, #0]
 8007660:	bf18      	it	ne
 8007662:	b21b      	sxthne	r3, r3
 8007664:	e7cf      	b.n	8007606 <_printf_i+0x52>
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	6825      	ldr	r5, [r4, #0]
 800766a:	1d18      	adds	r0, r3, #4
 800766c:	6010      	str	r0, [r2, #0]
 800766e:	0628      	lsls	r0, r5, #24
 8007670:	d501      	bpl.n	8007676 <_printf_i+0xc2>
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	e002      	b.n	800767c <_printf_i+0xc8>
 8007676:	0668      	lsls	r0, r5, #25
 8007678:	d5fb      	bpl.n	8007672 <_printf_i+0xbe>
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	296f      	cmp	r1, #111	; 0x6f
 800767e:	bf14      	ite	ne
 8007680:	220a      	movne	r2, #10
 8007682:	2208      	moveq	r2, #8
 8007684:	4852      	ldr	r0, [pc, #328]	; (80077d0 <_printf_i+0x21c>)
 8007686:	2100      	movs	r1, #0
 8007688:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768c:	6865      	ldr	r5, [r4, #4]
 800768e:	2d00      	cmp	r5, #0
 8007690:	60a5      	str	r5, [r4, #8]
 8007692:	f2c0 8095 	blt.w	80077c0 <_printf_i+0x20c>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	f021 0104 	bic.w	r1, r1, #4
 800769c:	6021      	str	r1, [r4, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d13d      	bne.n	800771e <_printf_i+0x16a>
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	f040 808e 	bne.w	80077c4 <_printf_i+0x210>
 80076a8:	4665      	mov	r5, ip
 80076aa:	2a08      	cmp	r2, #8
 80076ac:	d10b      	bne.n	80076c6 <_printf_i+0x112>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	07db      	lsls	r3, r3, #31
 80076b2:	d508      	bpl.n	80076c6 <_printf_i+0x112>
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	bfde      	ittt	le
 80076bc:	2330      	movle	r3, #48	; 0x30
 80076be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076c6:	ebac 0305 	sub.w	r3, ip, r5
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	f8cd 8000 	str.w	r8, [sp]
 80076d0:	463b      	mov	r3, r7
 80076d2:	aa03      	add	r2, sp, #12
 80076d4:	4621      	mov	r1, r4
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff fef6 	bl	80074c8 <_printf_common>
 80076dc:	3001      	adds	r0, #1
 80076de:	d14d      	bne.n	800777c <_printf_i+0x1c8>
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295
 80076e4:	b005      	add	sp, #20
 80076e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ea:	4839      	ldr	r0, [pc, #228]	; (80077d0 <_printf_i+0x21c>)
 80076ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80076f0:	6813      	ldr	r3, [r2, #0]
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	1d1d      	adds	r5, r3, #4
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6015      	str	r5, [r2, #0]
 80076fa:	060a      	lsls	r2, r1, #24
 80076fc:	d50b      	bpl.n	8007716 <_printf_i+0x162>
 80076fe:	07ca      	lsls	r2, r1, #31
 8007700:	bf44      	itt	mi
 8007702:	f041 0120 	orrmi.w	r1, r1, #32
 8007706:	6021      	strmi	r1, [r4, #0]
 8007708:	b91b      	cbnz	r3, 8007712 <_printf_i+0x15e>
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	f022 0220 	bic.w	r2, r2, #32
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	2210      	movs	r2, #16
 8007714:	e7b7      	b.n	8007686 <_printf_i+0xd2>
 8007716:	064d      	lsls	r5, r1, #25
 8007718:	bf48      	it	mi
 800771a:	b29b      	uxthmi	r3, r3
 800771c:	e7ef      	b.n	80076fe <_printf_i+0x14a>
 800771e:	4665      	mov	r5, ip
 8007720:	fbb3 f1f2 	udiv	r1, r3, r2
 8007724:	fb02 3311 	mls	r3, r2, r1, r3
 8007728:	5cc3      	ldrb	r3, [r0, r3]
 800772a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800772e:	460b      	mov	r3, r1
 8007730:	2900      	cmp	r1, #0
 8007732:	d1f5      	bne.n	8007720 <_printf_i+0x16c>
 8007734:	e7b9      	b.n	80076aa <_printf_i+0xf6>
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1d18      	adds	r0, r3, #4
 800773c:	6961      	ldr	r1, [r4, #20]
 800773e:	6010      	str	r0, [r2, #0]
 8007740:	0628      	lsls	r0, r5, #24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	d501      	bpl.n	800774a <_printf_i+0x196>
 8007746:	6019      	str	r1, [r3, #0]
 8007748:	e002      	b.n	8007750 <_printf_i+0x19c>
 800774a:	066a      	lsls	r2, r5, #25
 800774c:	d5fb      	bpl.n	8007746 <_printf_i+0x192>
 800774e:	8019      	strh	r1, [r3, #0]
 8007750:	2300      	movs	r3, #0
 8007752:	4665      	mov	r5, ip
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	e7b9      	b.n	80076cc <_printf_i+0x118>
 8007758:	6813      	ldr	r3, [r2, #0]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	681d      	ldr	r5, [r3, #0]
 8007760:	6862      	ldr	r2, [r4, #4]
 8007762:	2100      	movs	r1, #0
 8007764:	4628      	mov	r0, r5
 8007766:	f001 f9bf 	bl	8008ae8 <memchr>
 800776a:	b108      	cbz	r0, 8007770 <_printf_i+0x1bc>
 800776c:	1b40      	subs	r0, r0, r5
 800776e:	6060      	str	r0, [r4, #4]
 8007770:	6863      	ldr	r3, [r4, #4]
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	2300      	movs	r3, #0
 8007776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777a:	e7a7      	b.n	80076cc <_printf_i+0x118>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	462a      	mov	r2, r5
 8007780:	4639      	mov	r1, r7
 8007782:	4630      	mov	r0, r6
 8007784:	47c0      	blx	r8
 8007786:	3001      	adds	r0, #1
 8007788:	d0aa      	beq.n	80076e0 <_printf_i+0x12c>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	079b      	lsls	r3, r3, #30
 800778e:	d413      	bmi.n	80077b8 <_printf_i+0x204>
 8007790:	68e0      	ldr	r0, [r4, #12]
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	4298      	cmp	r0, r3
 8007796:	bfb8      	it	lt
 8007798:	4618      	movlt	r0, r3
 800779a:	e7a3      	b.n	80076e4 <_printf_i+0x130>
 800779c:	2301      	movs	r3, #1
 800779e:	464a      	mov	r2, r9
 80077a0:	4639      	mov	r1, r7
 80077a2:	4630      	mov	r0, r6
 80077a4:	47c0      	blx	r8
 80077a6:	3001      	adds	r0, #1
 80077a8:	d09a      	beq.n	80076e0 <_printf_i+0x12c>
 80077aa:	3501      	adds	r5, #1
 80077ac:	68e3      	ldr	r3, [r4, #12]
 80077ae:	9a03      	ldr	r2, [sp, #12]
 80077b0:	1a9b      	subs	r3, r3, r2
 80077b2:	42ab      	cmp	r3, r5
 80077b4:	dcf2      	bgt.n	800779c <_printf_i+0x1e8>
 80077b6:	e7eb      	b.n	8007790 <_printf_i+0x1dc>
 80077b8:	2500      	movs	r5, #0
 80077ba:	f104 0919 	add.w	r9, r4, #25
 80077be:	e7f5      	b.n	80077ac <_printf_i+0x1f8>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1ac      	bne.n	800771e <_printf_i+0x16a>
 80077c4:	7803      	ldrb	r3, [r0, #0]
 80077c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ce:	e76c      	b.n	80076aa <_printf_i+0xf6>
 80077d0:	08009e76 	.word	0x08009e76
 80077d4:	08009e87 	.word	0x08009e87

080077d8 <iprintf>:
 80077d8:	b40f      	push	{r0, r1, r2, r3}
 80077da:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <iprintf+0x2c>)
 80077dc:	b513      	push	{r0, r1, r4, lr}
 80077de:	681c      	ldr	r4, [r3, #0]
 80077e0:	b124      	cbz	r4, 80077ec <iprintf+0x14>
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	b913      	cbnz	r3, 80077ec <iprintf+0x14>
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 f87a 	bl	80088e0 <__sinit>
 80077ec:	ab05      	add	r3, sp, #20
 80077ee:	9a04      	ldr	r2, [sp, #16]
 80077f0:	68a1      	ldr	r1, [r4, #8]
 80077f2:	4620      	mov	r0, r4
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	f001 fd49 	bl	800928c <_vfiprintf_r>
 80077fa:	b002      	add	sp, #8
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007800:	b004      	add	sp, #16
 8007802:	4770      	bx	lr
 8007804:	2000001c 	.word	0x2000001c

08007808 <putchar>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <putchar+0x24>)
 800780c:	4605      	mov	r5, r0
 800780e:	681c      	ldr	r4, [r3, #0]
 8007810:	b124      	cbz	r4, 800781c <putchar+0x14>
 8007812:	69a3      	ldr	r3, [r4, #24]
 8007814:	b913      	cbnz	r3, 800781c <putchar+0x14>
 8007816:	4620      	mov	r0, r4
 8007818:	f001 f862 	bl	80088e0 <__sinit>
 800781c:	68a2      	ldr	r2, [r4, #8]
 800781e:	4629      	mov	r1, r5
 8007820:	4620      	mov	r0, r4
 8007822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007826:	f001 be47 	b.w	80094b8 <_putc_r>
 800782a:	bf00      	nop
 800782c:	2000001c 	.word	0x2000001c

08007830 <_puts_r>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	460e      	mov	r6, r1
 8007834:	4605      	mov	r5, r0
 8007836:	b118      	cbz	r0, 8007840 <_puts_r+0x10>
 8007838:	6983      	ldr	r3, [r0, #24]
 800783a:	b90b      	cbnz	r3, 8007840 <_puts_r+0x10>
 800783c:	f001 f850 	bl	80088e0 <__sinit>
 8007840:	69ab      	ldr	r3, [r5, #24]
 8007842:	68ac      	ldr	r4, [r5, #8]
 8007844:	b913      	cbnz	r3, 800784c <_puts_r+0x1c>
 8007846:	4628      	mov	r0, r5
 8007848:	f001 f84a 	bl	80088e0 <__sinit>
 800784c:	4b23      	ldr	r3, [pc, #140]	; (80078dc <_puts_r+0xac>)
 800784e:	429c      	cmp	r4, r3
 8007850:	d117      	bne.n	8007882 <_puts_r+0x52>
 8007852:	686c      	ldr	r4, [r5, #4]
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	071b      	lsls	r3, r3, #28
 8007858:	d51d      	bpl.n	8007896 <_puts_r+0x66>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	b1db      	cbz	r3, 8007896 <_puts_r+0x66>
 800785e:	3e01      	subs	r6, #1
 8007860:	68a3      	ldr	r3, [r4, #8]
 8007862:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007866:	3b01      	subs	r3, #1
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	b9e9      	cbnz	r1, 80078a8 <_puts_r+0x78>
 800786c:	2b00      	cmp	r3, #0
 800786e:	da2e      	bge.n	80078ce <_puts_r+0x9e>
 8007870:	4622      	mov	r2, r4
 8007872:	210a      	movs	r1, #10
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f83f 	bl	80078f8 <__swbuf_r>
 800787a:	3001      	adds	r0, #1
 800787c:	d011      	beq.n	80078a2 <_puts_r+0x72>
 800787e:	200a      	movs	r0, #10
 8007880:	e011      	b.n	80078a6 <_puts_r+0x76>
 8007882:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <_puts_r+0xb0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	d101      	bne.n	800788c <_puts_r+0x5c>
 8007888:	68ac      	ldr	r4, [r5, #8]
 800788a:	e7e3      	b.n	8007854 <_puts_r+0x24>
 800788c:	4b15      	ldr	r3, [pc, #84]	; (80078e4 <_puts_r+0xb4>)
 800788e:	429c      	cmp	r4, r3
 8007890:	bf08      	it	eq
 8007892:	68ec      	ldreq	r4, [r5, #12]
 8007894:	e7de      	b.n	8007854 <_puts_r+0x24>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f87f 	bl	800799c <__swsetup_r>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d0dd      	beq.n	800785e <_puts_r+0x2e>
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	da04      	bge.n	80078b6 <_puts_r+0x86>
 80078ac:	69a2      	ldr	r2, [r4, #24]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	dc06      	bgt.n	80078c0 <_puts_r+0x90>
 80078b2:	290a      	cmp	r1, #10
 80078b4:	d004      	beq.n	80078c0 <_puts_r+0x90>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	7019      	strb	r1, [r3, #0]
 80078be:	e7cf      	b.n	8007860 <_puts_r+0x30>
 80078c0:	4622      	mov	r2, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f818 	bl	80078f8 <__swbuf_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d1c9      	bne.n	8007860 <_puts_r+0x30>
 80078cc:	e7e9      	b.n	80078a2 <_puts_r+0x72>
 80078ce:	200a      	movs	r0, #10
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	6022      	str	r2, [r4, #0]
 80078d6:	7018      	strb	r0, [r3, #0]
 80078d8:	e7e5      	b.n	80078a6 <_puts_r+0x76>
 80078da:	bf00      	nop
 80078dc:	08009ec8 	.word	0x08009ec8
 80078e0:	08009ee8 	.word	0x08009ee8
 80078e4:	08009ea8 	.word	0x08009ea8

080078e8 <puts>:
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <puts+0xc>)
 80078ea:	4601      	mov	r1, r0
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f7ff bf9f 	b.w	8007830 <_puts_r>
 80078f2:	bf00      	nop
 80078f4:	2000001c 	.word	0x2000001c

080078f8 <__swbuf_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	460e      	mov	r6, r1
 80078fc:	4614      	mov	r4, r2
 80078fe:	4605      	mov	r5, r0
 8007900:	b118      	cbz	r0, 800790a <__swbuf_r+0x12>
 8007902:	6983      	ldr	r3, [r0, #24]
 8007904:	b90b      	cbnz	r3, 800790a <__swbuf_r+0x12>
 8007906:	f000 ffeb 	bl	80088e0 <__sinit>
 800790a:	4b21      	ldr	r3, [pc, #132]	; (8007990 <__swbuf_r+0x98>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d12a      	bne.n	8007966 <__swbuf_r+0x6e>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	69a3      	ldr	r3, [r4, #24]
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	071a      	lsls	r2, r3, #28
 800791a:	d52e      	bpl.n	800797a <__swbuf_r+0x82>
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	b363      	cbz	r3, 800797a <__swbuf_r+0x82>
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	6820      	ldr	r0, [r4, #0]
 8007924:	b2f6      	uxtb	r6, r6
 8007926:	1ac0      	subs	r0, r0, r3
 8007928:	6963      	ldr	r3, [r4, #20]
 800792a:	4637      	mov	r7, r6
 800792c:	4283      	cmp	r3, r0
 800792e:	dc04      	bgt.n	800793a <__swbuf_r+0x42>
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 ff6a 	bl	800880c <_fflush_r>
 8007938:	bb28      	cbnz	r0, 8007986 <__swbuf_r+0x8e>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	3001      	adds	r0, #1
 800793e:	3b01      	subs	r3, #1
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	701e      	strb	r6, [r3, #0]
 800794a:	6963      	ldr	r3, [r4, #20]
 800794c:	4283      	cmp	r3, r0
 800794e:	d004      	beq.n	800795a <__swbuf_r+0x62>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	07db      	lsls	r3, r3, #31
 8007954:	d519      	bpl.n	800798a <__swbuf_r+0x92>
 8007956:	2e0a      	cmp	r6, #10
 8007958:	d117      	bne.n	800798a <__swbuf_r+0x92>
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f000 ff55 	bl	800880c <_fflush_r>
 8007962:	b190      	cbz	r0, 800798a <__swbuf_r+0x92>
 8007964:	e00f      	b.n	8007986 <__swbuf_r+0x8e>
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <__swbuf_r+0x9c>)
 8007968:	429c      	cmp	r4, r3
 800796a:	d101      	bne.n	8007970 <__swbuf_r+0x78>
 800796c:	68ac      	ldr	r4, [r5, #8]
 800796e:	e7d0      	b.n	8007912 <__swbuf_r+0x1a>
 8007970:	4b09      	ldr	r3, [pc, #36]	; (8007998 <__swbuf_r+0xa0>)
 8007972:	429c      	cmp	r4, r3
 8007974:	bf08      	it	eq
 8007976:	68ec      	ldreq	r4, [r5, #12]
 8007978:	e7cb      	b.n	8007912 <__swbuf_r+0x1a>
 800797a:	4621      	mov	r1, r4
 800797c:	4628      	mov	r0, r5
 800797e:	f000 f80d 	bl	800799c <__swsetup_r>
 8007982:	2800      	cmp	r0, #0
 8007984:	d0cc      	beq.n	8007920 <__swbuf_r+0x28>
 8007986:	f04f 37ff 	mov.w	r7, #4294967295
 800798a:	4638      	mov	r0, r7
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798e:	bf00      	nop
 8007990:	08009ec8 	.word	0x08009ec8
 8007994:	08009ee8 	.word	0x08009ee8
 8007998:	08009ea8 	.word	0x08009ea8

0800799c <__swsetup_r>:
 800799c:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <__swsetup_r+0xcc>)
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	4606      	mov	r6, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	b125      	cbz	r5, 80079b2 <__swsetup_r+0x16>
 80079a8:	69ab      	ldr	r3, [r5, #24]
 80079aa:	b913      	cbnz	r3, 80079b2 <__swsetup_r+0x16>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f000 ff97 	bl	80088e0 <__sinit>
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <__swsetup_r+0xd0>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d10f      	bne.n	80079d8 <__swsetup_r+0x3c>
 80079b8:	686c      	ldr	r4, [r5, #4]
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	0715      	lsls	r5, r2, #28
 80079c2:	d42c      	bmi.n	8007a1e <__swsetup_r+0x82>
 80079c4:	06d0      	lsls	r0, r2, #27
 80079c6:	d411      	bmi.n	80079ec <__swsetup_r+0x50>
 80079c8:	2209      	movs	r2, #9
 80079ca:	6032      	str	r2, [r6, #0]
 80079cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	e03e      	b.n	8007a56 <__swsetup_r+0xba>
 80079d8:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <__swsetup_r+0xd4>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <__swsetup_r+0x46>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7eb      	b.n	80079ba <__swsetup_r+0x1e>
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <__swsetup_r+0xd8>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7e6      	b.n	80079ba <__swsetup_r+0x1e>
 80079ec:	0751      	lsls	r1, r2, #29
 80079ee:	d512      	bpl.n	8007a16 <__swsetup_r+0x7a>
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	b141      	cbz	r1, 8007a06 <__swsetup_r+0x6a>
 80079f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d002      	beq.n	8007a02 <__swsetup_r+0x66>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f001 fb77 	bl	80090f0 <_free_r>
 8007a02:	2300      	movs	r3, #0
 8007a04:	6363      	str	r3, [r4, #52]	; 0x34
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	b94b      	cbnz	r3, 8007a36 <__swsetup_r+0x9a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d003      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4630      	mov	r0, r6
 8007a32:	f001 f811 	bl	8008a58 <__smakebuf_r>
 8007a36:	89a2      	ldrh	r2, [r4, #12]
 8007a38:	f012 0301 	ands.w	r3, r2, #1
 8007a3c:	d00c      	beq.n	8007a58 <__swsetup_r+0xbc>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	6963      	ldr	r3, [r4, #20]
 8007a44:	425b      	negs	r3, r3
 8007a46:	61a3      	str	r3, [r4, #24]
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b953      	cbnz	r3, 8007a62 <__swsetup_r+0xc6>
 8007a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a54:	d1ba      	bne.n	80079cc <__swsetup_r+0x30>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	0792      	lsls	r2, r2, #30
 8007a5a:	bf58      	it	pl
 8007a5c:	6963      	ldrpl	r3, [r4, #20]
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	e7f2      	b.n	8007a48 <__swsetup_r+0xac>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7f7      	b.n	8007a56 <__swsetup_r+0xba>
 8007a66:	bf00      	nop
 8007a68:	2000001c 	.word	0x2000001c
 8007a6c:	08009ec8 	.word	0x08009ec8
 8007a70:	08009ee8 	.word	0x08009ee8
 8007a74:	08009ea8 	.word	0x08009ea8

08007a78 <quorem>:
 8007a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	6903      	ldr	r3, [r0, #16]
 8007a7e:	690c      	ldr	r4, [r1, #16]
 8007a80:	4680      	mov	r8, r0
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	f2c0 8084 	blt.w	8007b90 <quorem+0x118>
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	f101 0714 	add.w	r7, r1, #20
 8007a8e:	f100 0614 	add.w	r6, r0, #20
 8007a92:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007a96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007a9a:	3501      	adds	r5, #1
 8007a9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8007aa0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007aa4:	eb06 030c 	add.w	r3, r6, ip
 8007aa8:	eb07 090c 	add.w	r9, r7, ip
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	b39d      	cbz	r5, 8007b18 <quorem+0xa0>
 8007ab0:	f04f 0a00 	mov.w	sl, #0
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	46b6      	mov	lr, r6
 8007ab8:	46d3      	mov	fp, sl
 8007aba:	f850 2b04 	ldr.w	r2, [r0], #4
 8007abe:	b293      	uxth	r3, r2
 8007ac0:	fb05 a303 	mla	r3, r5, r3, sl
 8007ac4:	0c12      	lsrs	r2, r2, #16
 8007ac6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007aca:	fb05 a202 	mla	r2, r5, r2, sl
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	ebab 0303 	sub.w	r3, fp, r3
 8007ad4:	f8de b000 	ldr.w	fp, [lr]
 8007ad8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007adc:	fa1f fb8b 	uxth.w	fp, fp
 8007ae0:	445b      	add	r3, fp
 8007ae2:	fa1f fb82 	uxth.w	fp, r2
 8007ae6:	f8de 2000 	ldr.w	r2, [lr]
 8007aea:	4581      	cmp	r9, r0
 8007aec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007afa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007afe:	f84e 3b04 	str.w	r3, [lr], #4
 8007b02:	d2da      	bcs.n	8007aba <quorem+0x42>
 8007b04:	f856 300c 	ldr.w	r3, [r6, ip]
 8007b08:	b933      	cbnz	r3, 8007b18 <quorem+0xa0>
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	3b04      	subs	r3, #4
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	d331      	bcc.n	8007b78 <quorem+0x100>
 8007b14:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b18:	4640      	mov	r0, r8
 8007b1a:	f001 fa13 	bl	8008f44 <__mcmp>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	db26      	blt.n	8007b70 <quorem+0xf8>
 8007b22:	4630      	mov	r0, r6
 8007b24:	f04f 0c00 	mov.w	ip, #0
 8007b28:	3501      	adds	r5, #1
 8007b2a:	f857 1b04 	ldr.w	r1, [r7], #4
 8007b2e:	f8d0 e000 	ldr.w	lr, [r0]
 8007b32:	b28b      	uxth	r3, r1
 8007b34:	ebac 0303 	sub.w	r3, ip, r3
 8007b38:	fa1f f28e 	uxth.w	r2, lr
 8007b3c:	4413      	add	r3, r2
 8007b3e:	0c0a      	lsrs	r2, r1, #16
 8007b40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b4e:	45b9      	cmp	r9, r7
 8007b50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b54:	f840 3b04 	str.w	r3, [r0], #4
 8007b58:	d2e7      	bcs.n	8007b2a <quorem+0xb2>
 8007b5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007b5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007b62:	b92a      	cbnz	r2, 8007b70 <quorem+0xf8>
 8007b64:	3b04      	subs	r3, #4
 8007b66:	429e      	cmp	r6, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	d30b      	bcc.n	8007b84 <quorem+0x10c>
 8007b6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b70:	4628      	mov	r0, r5
 8007b72:	b003      	add	sp, #12
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	3b04      	subs	r3, #4
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	d1c9      	bne.n	8007b14 <quorem+0x9c>
 8007b80:	3c01      	subs	r4, #1
 8007b82:	e7c4      	b.n	8007b0e <quorem+0x96>
 8007b84:	6812      	ldr	r2, [r2, #0]
 8007b86:	3b04      	subs	r3, #4
 8007b88:	2a00      	cmp	r2, #0
 8007b8a:	d1ef      	bne.n	8007b6c <quorem+0xf4>
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	e7ea      	b.n	8007b66 <quorem+0xee>
 8007b90:	2000      	movs	r0, #0
 8007b92:	e7ee      	b.n	8007b72 <quorem+0xfa>
 8007b94:	0000      	movs	r0, r0
	...

08007b98 <_dtoa_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ba2:	b095      	sub	sp, #84	; 0x54
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007baa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007bae:	b93d      	cbnz	r5, 8007bc0 <_dtoa_r+0x28>
 8007bb0:	2010      	movs	r0, #16
 8007bb2:	f000 ff91 	bl	8008ad8 <malloc>
 8007bb6:	6260      	str	r0, [r4, #36]	; 0x24
 8007bb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bbc:	6005      	str	r5, [r0, #0]
 8007bbe:	60c5      	str	r5, [r0, #12]
 8007bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	b151      	cbz	r1, 8007bdc <_dtoa_r+0x44>
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4093      	lsls	r3, r2
 8007bcc:	604a      	str	r2, [r1, #4]
 8007bce:	608b      	str	r3, [r1, #8]
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 ffd6 	bl	8008b82 <_Bfree>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	1e3b      	subs	r3, r7, #0
 8007bde:	bfaf      	iteee	ge
 8007be0:	2300      	movge	r3, #0
 8007be2:	2201      	movlt	r2, #1
 8007be4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	9303      	strlt	r3, [sp, #12]
 8007bea:	bfac      	ite	ge
 8007bec:	f8c8 3000 	strge.w	r3, [r8]
 8007bf0:	f8c8 2000 	strlt.w	r2, [r8]
 8007bf4:	4bae      	ldr	r3, [pc, #696]	; (8007eb0 <_dtoa_r+0x318>)
 8007bf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007bfa:	ea33 0308 	bics.w	r3, r3, r8
 8007bfe:	d11b      	bne.n	8007c38 <_dtoa_r+0xa0>
 8007c00:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	9b02      	ldr	r3, [sp, #8]
 8007c0a:	b923      	cbnz	r3, 8007c16 <_dtoa_r+0x7e>
 8007c0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f000 8545 	beq.w	80086a0 <_dtoa_r+0xb08>
 8007c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c18:	b953      	cbnz	r3, 8007c30 <_dtoa_r+0x98>
 8007c1a:	4ba6      	ldr	r3, [pc, #664]	; (8007eb4 <_dtoa_r+0x31c>)
 8007c1c:	e021      	b.n	8007c62 <_dtoa_r+0xca>
 8007c1e:	4ba6      	ldr	r3, [pc, #664]	; (8007eb8 <_dtoa_r+0x320>)
 8007c20:	9306      	str	r3, [sp, #24]
 8007c22:	3308      	adds	r3, #8
 8007c24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	9806      	ldr	r0, [sp, #24]
 8007c2a:	b015      	add	sp, #84	; 0x54
 8007c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c30:	4ba0      	ldr	r3, [pc, #640]	; (8007eb4 <_dtoa_r+0x31c>)
 8007c32:	9306      	str	r3, [sp, #24]
 8007c34:	3303      	adds	r3, #3
 8007c36:	e7f5      	b.n	8007c24 <_dtoa_r+0x8c>
 8007c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff1c 	bl	8000a80 <__aeabi_dcmpeq>
 8007c48:	4682      	mov	sl, r0
 8007c4a:	b160      	cbz	r0, 8007c66 <_dtoa_r+0xce>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8520 	beq.w	800869a <_dtoa_r+0xb02>
 8007c5a:	4b98      	ldr	r3, [pc, #608]	; (8007ebc <_dtoa_r+0x324>)
 8007c5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	9306      	str	r3, [sp, #24]
 8007c64:	e7e0      	b.n	8007c28 <_dtoa_r+0x90>
 8007c66:	ab12      	add	r3, sp, #72	; 0x48
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	ab13      	add	r3, sp, #76	; 0x4c
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	4620      	mov	r0, r4
 8007c74:	f001 f9de 	bl	8009034 <__d2b>
 8007c78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c7c:	4683      	mov	fp, r0
 8007c7e:	2d00      	cmp	r5, #0
 8007c80:	d07d      	beq.n	8007d7e <_dtoa_r+0x1e6>
 8007c82:	46b0      	mov	r8, r6
 8007c84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007c8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007c90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4b89      	ldr	r3, [pc, #548]	; (8007ec0 <_dtoa_r+0x328>)
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	f7f8 face 	bl	8000240 <__aeabi_dsub>
 8007ca4:	a37c      	add	r3, pc, #496	; (adr r3, 8007e98 <_dtoa_r+0x300>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f7f8 fc81 	bl	80005b0 <__aeabi_dmul>
 8007cae:	a37c      	add	r3, pc, #496	; (adr r3, 8007ea0 <_dtoa_r+0x308>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fac6 	bl	8000244 <__adddf3>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	4628      	mov	r0, r5
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	f7f8 fc0d 	bl	80004dc <__aeabi_i2d>
 8007cc2:	a379      	add	r3, pc, #484	; (adr r3, 8007ea8 <_dtoa_r+0x310>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc72 	bl	80005b0 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 fab6 	bl	8000244 <__adddf3>
 8007cd8:	4606      	mov	r6, r0
 8007cda:	460f      	mov	r7, r1
 8007cdc:	f7f8 ff18 	bl	8000b10 <__aeabi_d2iz>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4682      	mov	sl, r0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 fed3 	bl	8000a94 <__aeabi_dcmplt>
 8007cee:	b148      	cbz	r0, 8007d04 <_dtoa_r+0x16c>
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	f7f8 fbf3 	bl	80004dc <__aeabi_i2d>
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	f7f8 fec1 	bl	8000a80 <__aeabi_dcmpeq>
 8007cfe:	b908      	cbnz	r0, 8007d04 <_dtoa_r+0x16c>
 8007d00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d04:	f1ba 0f16 	cmp.w	sl, #22
 8007d08:	d85a      	bhi.n	8007dc0 <_dtoa_r+0x228>
 8007d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d0e:	496d      	ldr	r1, [pc, #436]	; (8007ec4 <_dtoa_r+0x32c>)
 8007d10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d18:	f7f8 feda 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d051      	beq.n	8007dc4 <_dtoa_r+0x22c>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d26:	930d      	str	r3, [sp, #52]	; 0x34
 8007d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d2a:	1b5d      	subs	r5, r3, r5
 8007d2c:	1e6b      	subs	r3, r5, #1
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	bf43      	ittte	mi
 8007d32:	2300      	movmi	r3, #0
 8007d34:	f1c5 0901 	rsbmi	r9, r5, #1
 8007d38:	9307      	strmi	r3, [sp, #28]
 8007d3a:	f04f 0900 	movpl.w	r9, #0
 8007d3e:	f1ba 0f00 	cmp.w	sl, #0
 8007d42:	db41      	blt.n	8007dc8 <_dtoa_r+0x230>
 8007d44:	9b07      	ldr	r3, [sp, #28]
 8007d46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007d4a:	4453      	add	r3, sl
 8007d4c:	9307      	str	r3, [sp, #28]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	f200 808f 	bhi.w	8007e78 <_dtoa_r+0x2e0>
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	bfc4      	itt	gt
 8007d5e:	3b04      	subgt	r3, #4
 8007d60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d64:	bfc8      	it	gt
 8007d66:	2500      	movgt	r5, #0
 8007d68:	f1a3 0302 	sub.w	r3, r3, #2
 8007d6c:	bfd8      	it	le
 8007d6e:	2501      	movle	r5, #1
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	f200 808d 	bhi.w	8007e90 <_dtoa_r+0x2f8>
 8007d76:	e8df f003 	tbb	[pc, r3]
 8007d7a:	7d7b      	.short	0x7d7b
 8007d7c:	6f2f      	.short	0x6f2f
 8007d7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d82:	441d      	add	r5, r3
 8007d84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007d88:	2820      	cmp	r0, #32
 8007d8a:	dd13      	ble.n	8007db4 <_dtoa_r+0x21c>
 8007d8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	fa08 f800 	lsl.w	r8, r8, r0
 8007d96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007d9a:	fa23 f000 	lsr.w	r0, r3, r0
 8007d9e:	ea48 0000 	orr.w	r0, r8, r0
 8007da2:	f7f8 fb8b 	bl	80004bc <__aeabi_ui2d>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4680      	mov	r8, r0
 8007daa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007dae:	3d01      	subs	r5, #1
 8007db0:	9310      	str	r3, [sp, #64]	; 0x40
 8007db2:	e771      	b.n	8007c98 <_dtoa_r+0x100>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	f1c0 0020 	rsb	r0, r0, #32
 8007dba:	fa03 f000 	lsl.w	r0, r3, r0
 8007dbe:	e7f0      	b.n	8007da2 <_dtoa_r+0x20a>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7b0      	b.n	8007d26 <_dtoa_r+0x18e>
 8007dc4:	900d      	str	r0, [sp, #52]	; 0x34
 8007dc6:	e7af      	b.n	8007d28 <_dtoa_r+0x190>
 8007dc8:	f1ca 0300 	rsb	r3, sl, #0
 8007dcc:	9308      	str	r3, [sp, #32]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	eba9 090a 	sub.w	r9, r9, sl
 8007dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8007dd6:	e7bc      	b.n	8007d52 <_dtoa_r+0x1ba>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	9309      	str	r3, [sp, #36]	; 0x24
 8007ddc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dd74      	ble.n	8007ecc <_dtoa_r+0x334>
 8007de2:	4698      	mov	r8, r3
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	2200      	movs	r2, #0
 8007de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007dea:	6072      	str	r2, [r6, #4]
 8007dec:	2204      	movs	r2, #4
 8007dee:	f102 0014 	add.w	r0, r2, #20
 8007df2:	4298      	cmp	r0, r3
 8007df4:	6871      	ldr	r1, [r6, #4]
 8007df6:	d96e      	bls.n	8007ed6 <_dtoa_r+0x33e>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fe8e 	bl	8008b1a <_Balloc>
 8007dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e00:	6030      	str	r0, [r6, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f1b8 0f0e 	cmp.w	r8, #14
 8007e08:	9306      	str	r3, [sp, #24]
 8007e0a:	f200 80ed 	bhi.w	8007fe8 <_dtoa_r+0x450>
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	f000 80ea 	beq.w	8007fe8 <_dtoa_r+0x450>
 8007e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e18:	f1ba 0f00 	cmp.w	sl, #0
 8007e1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007e20:	dd77      	ble.n	8007f12 <_dtoa_r+0x37a>
 8007e22:	4a28      	ldr	r2, [pc, #160]	; (8007ec4 <_dtoa_r+0x32c>)
 8007e24:	f00a 030f 	and.w	r3, sl, #15
 8007e28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007e2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e30:	06f0      	lsls	r0, r6, #27
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007e3a:	d568      	bpl.n	8007f0e <_dtoa_r+0x376>
 8007e3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e40:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <_dtoa_r+0x330>)
 8007e42:	2503      	movs	r5, #3
 8007e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e48:	f7f8 fcdc 	bl	8000804 <__aeabi_ddiv>
 8007e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e50:	f006 060f 	and.w	r6, r6, #15
 8007e54:	4f1c      	ldr	r7, [pc, #112]	; (8007ec8 <_dtoa_r+0x330>)
 8007e56:	e04f      	b.n	8007ef8 <_dtoa_r+0x360>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e5e:	4453      	add	r3, sl
 8007e60:	f103 0801 	add.w	r8, r3, #1
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	4643      	mov	r3, r8
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	bfb8      	it	lt
 8007e6c:	2301      	movlt	r3, #1
 8007e6e:	e7ba      	b.n	8007de6 <_dtoa_r+0x24e>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e7b2      	b.n	8007dda <_dtoa_r+0x242>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e7f0      	b.n	8007e5a <_dtoa_r+0x2c2>
 8007e78:	2501      	movs	r5, #1
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9509      	str	r5, [sp, #36]	; 0x24
 8007e7e:	931e      	str	r3, [sp, #120]	; 0x78
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	2200      	movs	r2, #0
 8007e86:	9304      	str	r3, [sp, #16]
 8007e88:	4698      	mov	r8, r3
 8007e8a:	2312      	movs	r3, #18
 8007e8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8007e8e:	e7aa      	b.n	8007de6 <_dtoa_r+0x24e>
 8007e90:	2301      	movs	r3, #1
 8007e92:	9309      	str	r3, [sp, #36]	; 0x24
 8007e94:	e7f4      	b.n	8007e80 <_dtoa_r+0x2e8>
 8007e96:	bf00      	nop
 8007e98:	636f4361 	.word	0x636f4361
 8007e9c:	3fd287a7 	.word	0x3fd287a7
 8007ea0:	8b60c8b3 	.word	0x8b60c8b3
 8007ea4:	3fc68a28 	.word	0x3fc68a28
 8007ea8:	509f79fb 	.word	0x509f79fb
 8007eac:	3fd34413 	.word	0x3fd34413
 8007eb0:	7ff00000 	.word	0x7ff00000
 8007eb4:	08009ea1 	.word	0x08009ea1
 8007eb8:	08009e98 	.word	0x08009e98
 8007ebc:	08009e75 	.word	0x08009e75
 8007ec0:	3ff80000 	.word	0x3ff80000
 8007ec4:	08009f30 	.word	0x08009f30
 8007ec8:	08009f08 	.word	0x08009f08
 8007ecc:	2301      	movs	r3, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	e7da      	b.n	8007e8c <_dtoa_r+0x2f4>
 8007ed6:	3101      	adds	r1, #1
 8007ed8:	6071      	str	r1, [r6, #4]
 8007eda:	0052      	lsls	r2, r2, #1
 8007edc:	e787      	b.n	8007dee <_dtoa_r+0x256>
 8007ede:	07f1      	lsls	r1, r6, #31
 8007ee0:	d508      	bpl.n	8007ef4 <_dtoa_r+0x35c>
 8007ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eea:	f7f8 fb61 	bl	80005b0 <__aeabi_dmul>
 8007eee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	1076      	asrs	r6, r6, #1
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	d1f0      	bne.n	8007ede <_dtoa_r+0x346>
 8007efc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f04:	f7f8 fc7e 	bl	8000804 <__aeabi_ddiv>
 8007f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f0c:	e01b      	b.n	8007f46 <_dtoa_r+0x3ae>
 8007f0e:	2502      	movs	r5, #2
 8007f10:	e7a0      	b.n	8007e54 <_dtoa_r+0x2bc>
 8007f12:	f000 80a4 	beq.w	800805e <_dtoa_r+0x4c6>
 8007f16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f1a:	f1ca 0600 	rsb	r6, sl, #0
 8007f1e:	4ba0      	ldr	r3, [pc, #640]	; (80081a0 <_dtoa_r+0x608>)
 8007f20:	f006 020f 	and.w	r2, r6, #15
 8007f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 fb40 	bl	80005b0 <__aeabi_dmul>
 8007f30:	2502      	movs	r5, #2
 8007f32:	2300      	movs	r3, #0
 8007f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f38:	4f9a      	ldr	r7, [pc, #616]	; (80081a4 <_dtoa_r+0x60c>)
 8007f3a:	1136      	asrs	r6, r6, #4
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	f040 8083 	bne.w	8008048 <_dtoa_r+0x4b0>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e0      	bne.n	8007f08 <_dtoa_r+0x370>
 8007f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 808a 	beq.w	8008062 <_dtoa_r+0x4ca>
 8007f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4b92      	ldr	r3, [pc, #584]	; (80081a8 <_dtoa_r+0x610>)
 8007f5e:	f7f8 fd99 	bl	8000a94 <__aeabi_dcmplt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d07d      	beq.n	8008062 <_dtoa_r+0x4ca>
 8007f66:	f1b8 0f00 	cmp.w	r8, #0
 8007f6a:	d07a      	beq.n	8008062 <_dtoa_r+0x4ca>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	dd36      	ble.n	8007fe0 <_dtoa_r+0x448>
 8007f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f76:	2200      	movs	r2, #0
 8007f78:	4b8c      	ldr	r3, [pc, #560]	; (80081ac <_dtoa_r+0x614>)
 8007f7a:	f7f8 fb19 	bl	80005b0 <__aeabi_dmul>
 8007f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f82:	9e04      	ldr	r6, [sp, #16]
 8007f84:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007f88:	3501      	adds	r5, #1
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f7f8 faa6 	bl	80004dc <__aeabi_i2d>
 8007f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f94:	f7f8 fb0c 	bl	80005b0 <__aeabi_dmul>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4b85      	ldr	r3, [pc, #532]	; (80081b0 <_dtoa_r+0x618>)
 8007f9c:	f7f8 f952 	bl	8000244 <__adddf3>
 8007fa0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007fa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fa8:	950b      	str	r5, [sp, #44]	; 0x2c
 8007faa:	2e00      	cmp	r6, #0
 8007fac:	d15c      	bne.n	8008068 <_dtoa_r+0x4d0>
 8007fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4b7f      	ldr	r3, [pc, #508]	; (80081b4 <_dtoa_r+0x61c>)
 8007fb6:	f7f8 f943 	bl	8000240 <__aeabi_dsub>
 8007fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	f7f8 fd85 	bl	8000ad0 <__aeabi_dcmpgt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f040 8281 	bne.w	80084ce <_dtoa_r+0x936>
 8007fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fd2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007fd6:	f7f8 fd5d 	bl	8000a94 <__aeabi_dcmplt>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f040 8275 	bne.w	80084ca <_dtoa_r+0x932>
 8007fe0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f2c0 814b 	blt.w	8008286 <_dtoa_r+0x6ee>
 8007ff0:	f1ba 0f0e 	cmp.w	sl, #14
 8007ff4:	f300 8147 	bgt.w	8008286 <_dtoa_r+0x6ee>
 8007ff8:	4b69      	ldr	r3, [pc, #420]	; (80081a0 <_dtoa_r+0x608>)
 8007ffa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008006:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008008:	2b00      	cmp	r3, #0
 800800a:	f280 80d7 	bge.w	80081bc <_dtoa_r+0x624>
 800800e:	f1b8 0f00 	cmp.w	r8, #0
 8008012:	f300 80d3 	bgt.w	80081bc <_dtoa_r+0x624>
 8008016:	f040 8257 	bne.w	80084c8 <_dtoa_r+0x930>
 800801a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801e:	2200      	movs	r2, #0
 8008020:	4b64      	ldr	r3, [pc, #400]	; (80081b4 <_dtoa_r+0x61c>)
 8008022:	f7f8 fac5 	bl	80005b0 <__aeabi_dmul>
 8008026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800802a:	f7f8 fd47 	bl	8000abc <__aeabi_dcmpge>
 800802e:	4646      	mov	r6, r8
 8008030:	4647      	mov	r7, r8
 8008032:	2800      	cmp	r0, #0
 8008034:	f040 822d 	bne.w	8008492 <_dtoa_r+0x8fa>
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	9a06      	ldr	r2, [sp, #24]
 800803c:	1c5d      	adds	r5, r3, #1
 800803e:	2331      	movs	r3, #49	; 0x31
 8008040:	f10a 0a01 	add.w	sl, sl, #1
 8008044:	7013      	strb	r3, [r2, #0]
 8008046:	e228      	b.n	800849a <_dtoa_r+0x902>
 8008048:	07f2      	lsls	r2, r6, #31
 800804a:	d505      	bpl.n	8008058 <_dtoa_r+0x4c0>
 800804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008050:	f7f8 faae 	bl	80005b0 <__aeabi_dmul>
 8008054:	2301      	movs	r3, #1
 8008056:	3501      	adds	r5, #1
 8008058:	1076      	asrs	r6, r6, #1
 800805a:	3708      	adds	r7, #8
 800805c:	e76e      	b.n	8007f3c <_dtoa_r+0x3a4>
 800805e:	2502      	movs	r5, #2
 8008060:	e771      	b.n	8007f46 <_dtoa_r+0x3ae>
 8008062:	4657      	mov	r7, sl
 8008064:	4646      	mov	r6, r8
 8008066:	e790      	b.n	8007f8a <_dtoa_r+0x3f2>
 8008068:	4b4d      	ldr	r3, [pc, #308]	; (80081a0 <_dtoa_r+0x608>)
 800806a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800806e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d048      	beq.n	800810a <_dtoa_r+0x572>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	2000      	movs	r0, #0
 800807e:	494e      	ldr	r1, [pc, #312]	; (80081b8 <_dtoa_r+0x620>)
 8008080:	f7f8 fbc0 	bl	8000804 <__aeabi_ddiv>
 8008084:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008088:	f7f8 f8da 	bl	8000240 <__aeabi_dsub>
 800808c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008090:	9d06      	ldr	r5, [sp, #24]
 8008092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008096:	f7f8 fd3b 	bl	8000b10 <__aeabi_d2iz>
 800809a:	9011      	str	r0, [sp, #68]	; 0x44
 800809c:	f7f8 fa1e 	bl	80004dc <__aeabi_i2d>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a8:	f7f8 f8ca 	bl	8000240 <__aeabi_dsub>
 80080ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b2:	3330      	adds	r3, #48	; 0x30
 80080b4:	f805 3b01 	strb.w	r3, [r5], #1
 80080b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080bc:	f7f8 fcea 	bl	8000a94 <__aeabi_dcmplt>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d163      	bne.n	800818c <_dtoa_r+0x5f4>
 80080c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c8:	2000      	movs	r0, #0
 80080ca:	4937      	ldr	r1, [pc, #220]	; (80081a8 <_dtoa_r+0x610>)
 80080cc:	f7f8 f8b8 	bl	8000240 <__aeabi_dsub>
 80080d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080d4:	f7f8 fcde 	bl	8000a94 <__aeabi_dcmplt>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f040 80b5 	bne.w	8008248 <_dtoa_r+0x6b0>
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	1aeb      	subs	r3, r5, r3
 80080e2:	429e      	cmp	r6, r3
 80080e4:	f77f af7c 	ble.w	8007fe0 <_dtoa_r+0x448>
 80080e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080ec:	2200      	movs	r2, #0
 80080ee:	4b2f      	ldr	r3, [pc, #188]	; (80081ac <_dtoa_r+0x614>)
 80080f0:	f7f8 fa5e 	bl	80005b0 <__aeabi_dmul>
 80080f4:	2200      	movs	r2, #0
 80080f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fe:	4b2b      	ldr	r3, [pc, #172]	; (80081ac <_dtoa_r+0x614>)
 8008100:	f7f8 fa56 	bl	80005b0 <__aeabi_dmul>
 8008104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008108:	e7c3      	b.n	8008092 <_dtoa_r+0x4fa>
 800810a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800810e:	f7f8 fa4f 	bl	80005b0 <__aeabi_dmul>
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008118:	199d      	adds	r5, r3, r6
 800811a:	461e      	mov	r6, r3
 800811c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008120:	f7f8 fcf6 	bl	8000b10 <__aeabi_d2iz>
 8008124:	9011      	str	r0, [sp, #68]	; 0x44
 8008126:	f7f8 f9d9 	bl	80004dc <__aeabi_i2d>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008132:	f7f8 f885 	bl	8000240 <__aeabi_dsub>
 8008136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800813c:	3330      	adds	r3, #48	; 0x30
 800813e:	f806 3b01 	strb.w	r3, [r6], #1
 8008142:	42ae      	cmp	r6, r5
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	d124      	bne.n	8008194 <_dtoa_r+0x5fc>
 800814a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <_dtoa_r+0x620>)
 8008150:	f7f8 f878 	bl	8000244 <__adddf3>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800815c:	f7f8 fcb8 	bl	8000ad0 <__aeabi_dcmpgt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d171      	bne.n	8008248 <_dtoa_r+0x6b0>
 8008164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008168:	2000      	movs	r0, #0
 800816a:	4913      	ldr	r1, [pc, #76]	; (80081b8 <_dtoa_r+0x620>)
 800816c:	f7f8 f868 	bl	8000240 <__aeabi_dsub>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008178:	f7f8 fc8c 	bl	8000a94 <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f af2f 	beq.w	8007fe0 <_dtoa_r+0x448>
 8008182:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008186:	1e6a      	subs	r2, r5, #1
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d001      	beq.n	8008190 <_dtoa_r+0x5f8>
 800818c:	46ba      	mov	sl, r7
 800818e:	e04a      	b.n	8008226 <_dtoa_r+0x68e>
 8008190:	4615      	mov	r5, r2
 8008192:	e7f6      	b.n	8008182 <_dtoa_r+0x5ea>
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <_dtoa_r+0x614>)
 8008196:	f7f8 fa0b 	bl	80005b0 <__aeabi_dmul>
 800819a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800819e:	e7bd      	b.n	800811c <_dtoa_r+0x584>
 80081a0:	08009f30 	.word	0x08009f30
 80081a4:	08009f08 	.word	0x08009f08
 80081a8:	3ff00000 	.word	0x3ff00000
 80081ac:	40240000 	.word	0x40240000
 80081b0:	401c0000 	.word	0x401c0000
 80081b4:	40140000 	.word	0x40140000
 80081b8:	3fe00000 	.word	0x3fe00000
 80081bc:	9d06      	ldr	r5, [sp, #24]
 80081be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081c6:	4630      	mov	r0, r6
 80081c8:	4639      	mov	r1, r7
 80081ca:	f7f8 fb1b 	bl	8000804 <__aeabi_ddiv>
 80081ce:	f7f8 fc9f 	bl	8000b10 <__aeabi_d2iz>
 80081d2:	4681      	mov	r9, r0
 80081d4:	f7f8 f982 	bl	80004dc <__aeabi_i2d>
 80081d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081dc:	f7f8 f9e8 	bl	80005b0 <__aeabi_dmul>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 f82a 	bl	8000240 <__aeabi_dsub>
 80081ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80081f0:	f805 6b01 	strb.w	r6, [r5], #1
 80081f4:	9e06      	ldr	r6, [sp, #24]
 80081f6:	4602      	mov	r2, r0
 80081f8:	1bae      	subs	r6, r5, r6
 80081fa:	45b0      	cmp	r8, r6
 80081fc:	460b      	mov	r3, r1
 80081fe:	d135      	bne.n	800826c <_dtoa_r+0x6d4>
 8008200:	f7f8 f820 	bl	8000244 <__adddf3>
 8008204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008208:	4606      	mov	r6, r0
 800820a:	460f      	mov	r7, r1
 800820c:	f7f8 fc60 	bl	8000ad0 <__aeabi_dcmpgt>
 8008210:	b9c8      	cbnz	r0, 8008246 <_dtoa_r+0x6ae>
 8008212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008216:	4630      	mov	r0, r6
 8008218:	4639      	mov	r1, r7
 800821a:	f7f8 fc31 	bl	8000a80 <__aeabi_dcmpeq>
 800821e:	b110      	cbz	r0, 8008226 <_dtoa_r+0x68e>
 8008220:	f019 0f01 	tst.w	r9, #1
 8008224:	d10f      	bne.n	8008246 <_dtoa_r+0x6ae>
 8008226:	4659      	mov	r1, fp
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fcaa 	bl	8008b82 <_Bfree>
 800822e:	2300      	movs	r3, #0
 8008230:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008232:	702b      	strb	r3, [r5, #0]
 8008234:	f10a 0301 	add.w	r3, sl, #1
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800823c:	2b00      	cmp	r3, #0
 800823e:	f43f acf3 	beq.w	8007c28 <_dtoa_r+0x90>
 8008242:	601d      	str	r5, [r3, #0]
 8008244:	e4f0      	b.n	8007c28 <_dtoa_r+0x90>
 8008246:	4657      	mov	r7, sl
 8008248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800824c:	1e6b      	subs	r3, r5, #1
 800824e:	2a39      	cmp	r2, #57	; 0x39
 8008250:	d106      	bne.n	8008260 <_dtoa_r+0x6c8>
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	429a      	cmp	r2, r3
 8008256:	d107      	bne.n	8008268 <_dtoa_r+0x6d0>
 8008258:	2330      	movs	r3, #48	; 0x30
 800825a:	7013      	strb	r3, [r2, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	3701      	adds	r7, #1
 8008260:	781a      	ldrb	r2, [r3, #0]
 8008262:	3201      	adds	r2, #1
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e791      	b.n	800818c <_dtoa_r+0x5f4>
 8008268:	461d      	mov	r5, r3
 800826a:	e7ed      	b.n	8008248 <_dtoa_r+0x6b0>
 800826c:	2200      	movs	r2, #0
 800826e:	4b99      	ldr	r3, [pc, #612]	; (80084d4 <_dtoa_r+0x93c>)
 8008270:	f7f8 f99e 	bl	80005b0 <__aeabi_dmul>
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	4606      	mov	r6, r0
 800827a:	460f      	mov	r7, r1
 800827c:	f7f8 fc00 	bl	8000a80 <__aeabi_dcmpeq>
 8008280:	2800      	cmp	r0, #0
 8008282:	d09e      	beq.n	80081c2 <_dtoa_r+0x62a>
 8008284:	e7cf      	b.n	8008226 <_dtoa_r+0x68e>
 8008286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008288:	2a00      	cmp	r2, #0
 800828a:	f000 8088 	beq.w	800839e <_dtoa_r+0x806>
 800828e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008290:	2a01      	cmp	r2, #1
 8008292:	dc6d      	bgt.n	8008370 <_dtoa_r+0x7d8>
 8008294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008296:	2a00      	cmp	r2, #0
 8008298:	d066      	beq.n	8008368 <_dtoa_r+0x7d0>
 800829a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800829e:	464d      	mov	r5, r9
 80082a0:	9e08      	ldr	r6, [sp, #32]
 80082a2:	9a07      	ldr	r2, [sp, #28]
 80082a4:	2101      	movs	r1, #1
 80082a6:	441a      	add	r2, r3
 80082a8:	4620      	mov	r0, r4
 80082aa:	4499      	add	r9, r3
 80082ac:	9207      	str	r2, [sp, #28]
 80082ae:	f000 fd08 	bl	8008cc2 <__i2b>
 80082b2:	4607      	mov	r7, r0
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	dd0b      	ble.n	80082d0 <_dtoa_r+0x738>
 80082b8:	9b07      	ldr	r3, [sp, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd08      	ble.n	80082d0 <_dtoa_r+0x738>
 80082be:	42ab      	cmp	r3, r5
 80082c0:	bfa8      	it	ge
 80082c2:	462b      	movge	r3, r5
 80082c4:	9a07      	ldr	r2, [sp, #28]
 80082c6:	eba9 0903 	sub.w	r9, r9, r3
 80082ca:	1aed      	subs	r5, r5, r3
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	9307      	str	r3, [sp, #28]
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	b1eb      	cbz	r3, 8008310 <_dtoa_r+0x778>
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d065      	beq.n	80083a6 <_dtoa_r+0x80e>
 80082da:	b18e      	cbz	r6, 8008300 <_dtoa_r+0x768>
 80082dc:	4639      	mov	r1, r7
 80082de:	4632      	mov	r2, r6
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fd8d 	bl	8008e00 <__pow5mult>
 80082e6:	465a      	mov	r2, fp
 80082e8:	4601      	mov	r1, r0
 80082ea:	4607      	mov	r7, r0
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fcf1 	bl	8008cd4 <__multiply>
 80082f2:	4659      	mov	r1, fp
 80082f4:	900a      	str	r0, [sp, #40]	; 0x28
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fc43 	bl	8008b82 <_Bfree>
 80082fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fe:	469b      	mov	fp, r3
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	1b9a      	subs	r2, r3, r6
 8008304:	d004      	beq.n	8008310 <_dtoa_r+0x778>
 8008306:	4659      	mov	r1, fp
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fd79 	bl	8008e00 <__pow5mult>
 800830e:	4683      	mov	fp, r0
 8008310:	2101      	movs	r1, #1
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fcd5 	bl	8008cc2 <__i2b>
 8008318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800831a:	4606      	mov	r6, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 81c6 	beq.w	80086ae <_dtoa_r+0xb16>
 8008322:	461a      	mov	r2, r3
 8008324:	4601      	mov	r1, r0
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fd6a 	bl	8008e00 <__pow5mult>
 800832c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800832e:	4606      	mov	r6, r0
 8008330:	2b01      	cmp	r3, #1
 8008332:	dc3e      	bgt.n	80083b2 <_dtoa_r+0x81a>
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d137      	bne.n	80083aa <_dtoa_r+0x812>
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008340:	2b00      	cmp	r3, #0
 8008342:	d134      	bne.n	80083ae <_dtoa_r+0x816>
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800834a:	0d1b      	lsrs	r3, r3, #20
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	b12b      	cbz	r3, 800835c <_dtoa_r+0x7c4>
 8008350:	9b07      	ldr	r3, [sp, #28]
 8008352:	f109 0901 	add.w	r9, r9, #1
 8008356:	3301      	adds	r3, #1
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	2301      	movs	r3, #1
 800835c:	9308      	str	r3, [sp, #32]
 800835e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008360:	2b00      	cmp	r3, #0
 8008362:	d128      	bne.n	80083b6 <_dtoa_r+0x81e>
 8008364:	2001      	movs	r0, #1
 8008366:	e02e      	b.n	80083c6 <_dtoa_r+0x82e>
 8008368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800836e:	e796      	b.n	800829e <_dtoa_r+0x706>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	f108 36ff 	add.w	r6, r8, #4294967295
 8008376:	42b3      	cmp	r3, r6
 8008378:	bfb7      	itett	lt
 800837a:	9b08      	ldrlt	r3, [sp, #32]
 800837c:	1b9e      	subge	r6, r3, r6
 800837e:	1af2      	sublt	r2, r6, r3
 8008380:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008382:	bfbf      	itttt	lt
 8008384:	9608      	strlt	r6, [sp, #32]
 8008386:	189b      	addlt	r3, r3, r2
 8008388:	930c      	strlt	r3, [sp, #48]	; 0x30
 800838a:	2600      	movlt	r6, #0
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	bfb9      	ittee	lt
 8008392:	eba9 0508 	sublt.w	r5, r9, r8
 8008396:	2300      	movlt	r3, #0
 8008398:	464d      	movge	r5, r9
 800839a:	4643      	movge	r3, r8
 800839c:	e781      	b.n	80082a2 <_dtoa_r+0x70a>
 800839e:	9e08      	ldr	r6, [sp, #32]
 80083a0:	464d      	mov	r5, r9
 80083a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083a4:	e786      	b.n	80082b4 <_dtoa_r+0x71c>
 80083a6:	9a08      	ldr	r2, [sp, #32]
 80083a8:	e7ad      	b.n	8008306 <_dtoa_r+0x76e>
 80083aa:	2300      	movs	r3, #0
 80083ac:	e7d6      	b.n	800835c <_dtoa_r+0x7c4>
 80083ae:	9b02      	ldr	r3, [sp, #8]
 80083b0:	e7d4      	b.n	800835c <_dtoa_r+0x7c4>
 80083b2:	2300      	movs	r3, #0
 80083b4:	9308      	str	r3, [sp, #32]
 80083b6:	6933      	ldr	r3, [r6, #16]
 80083b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083bc:	6918      	ldr	r0, [r3, #16]
 80083be:	f000 fc32 	bl	8008c26 <__hi0bits>
 80083c2:	f1c0 0020 	rsb	r0, r0, #32
 80083c6:	9b07      	ldr	r3, [sp, #28]
 80083c8:	4418      	add	r0, r3
 80083ca:	f010 001f 	ands.w	r0, r0, #31
 80083ce:	d047      	beq.n	8008460 <_dtoa_r+0x8c8>
 80083d0:	f1c0 0320 	rsb	r3, r0, #32
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	dd3b      	ble.n	8008450 <_dtoa_r+0x8b8>
 80083d8:	9b07      	ldr	r3, [sp, #28]
 80083da:	f1c0 001c 	rsb	r0, r0, #28
 80083de:	4481      	add	r9, r0
 80083e0:	4405      	add	r5, r0
 80083e2:	4403      	add	r3, r0
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	f1b9 0f00 	cmp.w	r9, #0
 80083ea:	dd05      	ble.n	80083f8 <_dtoa_r+0x860>
 80083ec:	4659      	mov	r1, fp
 80083ee:	464a      	mov	r2, r9
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 fd53 	bl	8008e9c <__lshift>
 80083f6:	4683      	mov	fp, r0
 80083f8:	9b07      	ldr	r3, [sp, #28]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dd05      	ble.n	800840a <_dtoa_r+0x872>
 80083fe:	4631      	mov	r1, r6
 8008400:	461a      	mov	r2, r3
 8008402:	4620      	mov	r0, r4
 8008404:	f000 fd4a 	bl	8008e9c <__lshift>
 8008408:	4606      	mov	r6, r0
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	b353      	cbz	r3, 8008464 <_dtoa_r+0x8cc>
 800840e:	4631      	mov	r1, r6
 8008410:	4658      	mov	r0, fp
 8008412:	f000 fd97 	bl	8008f44 <__mcmp>
 8008416:	2800      	cmp	r0, #0
 8008418:	da24      	bge.n	8008464 <_dtoa_r+0x8cc>
 800841a:	2300      	movs	r3, #0
 800841c:	4659      	mov	r1, fp
 800841e:	220a      	movs	r2, #10
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fbc5 	bl	8008bb0 <__multadd>
 8008426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008428:	f10a 3aff 	add.w	sl, sl, #4294967295
 800842c:	4683      	mov	fp, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8144 	beq.w	80086bc <_dtoa_r+0xb24>
 8008434:	2300      	movs	r3, #0
 8008436:	4639      	mov	r1, r7
 8008438:	220a      	movs	r2, #10
 800843a:	4620      	mov	r0, r4
 800843c:	f000 fbb8 	bl	8008bb0 <__multadd>
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	4607      	mov	r7, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	dc4d      	bgt.n	80084e4 <_dtoa_r+0x94c>
 8008448:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800844a:	2b02      	cmp	r3, #2
 800844c:	dd4a      	ble.n	80084e4 <_dtoa_r+0x94c>
 800844e:	e011      	b.n	8008474 <_dtoa_r+0x8dc>
 8008450:	d0c9      	beq.n	80083e6 <_dtoa_r+0x84e>
 8008452:	9a07      	ldr	r2, [sp, #28]
 8008454:	331c      	adds	r3, #28
 8008456:	441a      	add	r2, r3
 8008458:	4499      	add	r9, r3
 800845a:	441d      	add	r5, r3
 800845c:	4613      	mov	r3, r2
 800845e:	e7c1      	b.n	80083e4 <_dtoa_r+0x84c>
 8008460:	4603      	mov	r3, r0
 8008462:	e7f6      	b.n	8008452 <_dtoa_r+0x8ba>
 8008464:	f1b8 0f00 	cmp.w	r8, #0
 8008468:	dc36      	bgt.n	80084d8 <_dtoa_r+0x940>
 800846a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800846c:	2b02      	cmp	r3, #2
 800846e:	dd33      	ble.n	80084d8 <_dtoa_r+0x940>
 8008470:	f8cd 8010 	str.w	r8, [sp, #16]
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	b963      	cbnz	r3, 8008492 <_dtoa_r+0x8fa>
 8008478:	4631      	mov	r1, r6
 800847a:	2205      	movs	r2, #5
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fb97 	bl	8008bb0 <__multadd>
 8008482:	4601      	mov	r1, r0
 8008484:	4606      	mov	r6, r0
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fd5c 	bl	8008f44 <__mcmp>
 800848c:	2800      	cmp	r0, #0
 800848e:	f73f add3 	bgt.w	8008038 <_dtoa_r+0x4a0>
 8008492:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008494:	9d06      	ldr	r5, [sp, #24]
 8008496:	ea6f 0a03 	mvn.w	sl, r3
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	4631      	mov	r1, r6
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fb6e 	bl	8008b82 <_Bfree>
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	f43f aebd 	beq.w	8008226 <_dtoa_r+0x68e>
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	d005      	beq.n	80084be <_dtoa_r+0x926>
 80084b2:	45b9      	cmp	r9, r7
 80084b4:	d003      	beq.n	80084be <_dtoa_r+0x926>
 80084b6:	4649      	mov	r1, r9
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fb62 	bl	8008b82 <_Bfree>
 80084be:	4639      	mov	r1, r7
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fb5e 	bl	8008b82 <_Bfree>
 80084c6:	e6ae      	b.n	8008226 <_dtoa_r+0x68e>
 80084c8:	2600      	movs	r6, #0
 80084ca:	4637      	mov	r7, r6
 80084cc:	e7e1      	b.n	8008492 <_dtoa_r+0x8fa>
 80084ce:	46ba      	mov	sl, r7
 80084d0:	4637      	mov	r7, r6
 80084d2:	e5b1      	b.n	8008038 <_dtoa_r+0x4a0>
 80084d4:	40240000 	.word	0x40240000
 80084d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084da:	f8cd 8010 	str.w	r8, [sp, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 80f3 	beq.w	80086ca <_dtoa_r+0xb32>
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	dd05      	ble.n	80084f4 <_dtoa_r+0x95c>
 80084e8:	4639      	mov	r1, r7
 80084ea:	462a      	mov	r2, r5
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fcd5 	bl	8008e9c <__lshift>
 80084f2:	4607      	mov	r7, r0
 80084f4:	9b08      	ldr	r3, [sp, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d04c      	beq.n	8008594 <_dtoa_r+0x9fc>
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fb0c 	bl	8008b1a <_Balloc>
 8008502:	4605      	mov	r5, r0
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	f107 010c 	add.w	r1, r7, #12
 800850a:	3202      	adds	r2, #2
 800850c:	0092      	lsls	r2, r2, #2
 800850e:	300c      	adds	r0, #12
 8008510:	f000 faf8 	bl	8008b04 <memcpy>
 8008514:	2201      	movs	r2, #1
 8008516:	4629      	mov	r1, r5
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fcbf 	bl	8008e9c <__lshift>
 800851e:	46b9      	mov	r9, r7
 8008520:	4607      	mov	r7, r0
 8008522:	9b06      	ldr	r3, [sp, #24]
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	9b02      	ldr	r3, [sp, #8]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	9308      	str	r3, [sp, #32]
 800852e:	4631      	mov	r1, r6
 8008530:	4658      	mov	r0, fp
 8008532:	f7ff faa1 	bl	8007a78 <quorem>
 8008536:	4649      	mov	r1, r9
 8008538:	4605      	mov	r5, r0
 800853a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800853e:	4658      	mov	r0, fp
 8008540:	f000 fd00 	bl	8008f44 <__mcmp>
 8008544:	463a      	mov	r2, r7
 8008546:	9002      	str	r0, [sp, #8]
 8008548:	4631      	mov	r1, r6
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fd14 	bl	8008f78 <__mdiff>
 8008550:	68c3      	ldr	r3, [r0, #12]
 8008552:	4602      	mov	r2, r0
 8008554:	bb03      	cbnz	r3, 8008598 <_dtoa_r+0xa00>
 8008556:	4601      	mov	r1, r0
 8008558:	9009      	str	r0, [sp, #36]	; 0x24
 800855a:	4658      	mov	r0, fp
 800855c:	f000 fcf2 	bl	8008f44 <__mcmp>
 8008560:	4603      	mov	r3, r0
 8008562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008564:	4611      	mov	r1, r2
 8008566:	4620      	mov	r0, r4
 8008568:	9309      	str	r3, [sp, #36]	; 0x24
 800856a:	f000 fb0a 	bl	8008b82 <_Bfree>
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	b9a3      	cbnz	r3, 800859c <_dtoa_r+0xa04>
 8008572:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008574:	b992      	cbnz	r2, 800859c <_dtoa_r+0xa04>
 8008576:	9a08      	ldr	r2, [sp, #32]
 8008578:	b982      	cbnz	r2, 800859c <_dtoa_r+0xa04>
 800857a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800857e:	d029      	beq.n	80085d4 <_dtoa_r+0xa3c>
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd01      	ble.n	800858a <_dtoa_r+0x9f2>
 8008586:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800858a:	9b07      	ldr	r3, [sp, #28]
 800858c:	1c5d      	adds	r5, r3, #1
 800858e:	f883 8000 	strb.w	r8, [r3]
 8008592:	e784      	b.n	800849e <_dtoa_r+0x906>
 8008594:	4638      	mov	r0, r7
 8008596:	e7c2      	b.n	800851e <_dtoa_r+0x986>
 8008598:	2301      	movs	r3, #1
 800859a:	e7e3      	b.n	8008564 <_dtoa_r+0x9cc>
 800859c:	9a02      	ldr	r2, [sp, #8]
 800859e:	2a00      	cmp	r2, #0
 80085a0:	db04      	blt.n	80085ac <_dtoa_r+0xa14>
 80085a2:	d123      	bne.n	80085ec <_dtoa_r+0xa54>
 80085a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80085a6:	bb0a      	cbnz	r2, 80085ec <_dtoa_r+0xa54>
 80085a8:	9a08      	ldr	r2, [sp, #32]
 80085aa:	b9fa      	cbnz	r2, 80085ec <_dtoa_r+0xa54>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	ddec      	ble.n	800858a <_dtoa_r+0x9f2>
 80085b0:	4659      	mov	r1, fp
 80085b2:	2201      	movs	r2, #1
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fc71 	bl	8008e9c <__lshift>
 80085ba:	4631      	mov	r1, r6
 80085bc:	4683      	mov	fp, r0
 80085be:	f000 fcc1 	bl	8008f44 <__mcmp>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	dc03      	bgt.n	80085ce <_dtoa_r+0xa36>
 80085c6:	d1e0      	bne.n	800858a <_dtoa_r+0x9f2>
 80085c8:	f018 0f01 	tst.w	r8, #1
 80085cc:	d0dd      	beq.n	800858a <_dtoa_r+0x9f2>
 80085ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085d2:	d1d8      	bne.n	8008586 <_dtoa_r+0x9ee>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	9a07      	ldr	r2, [sp, #28]
 80085d8:	1c5d      	adds	r5, r3, #1
 80085da:	2339      	movs	r3, #57	; 0x39
 80085dc:	7013      	strb	r3, [r2, #0]
 80085de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085e2:	1e6a      	subs	r2, r5, #1
 80085e4:	2b39      	cmp	r3, #57	; 0x39
 80085e6:	d04d      	beq.n	8008684 <_dtoa_r+0xaec>
 80085e8:	3301      	adds	r3, #1
 80085ea:	e052      	b.n	8008692 <_dtoa_r+0xafa>
 80085ec:	9a07      	ldr	r2, [sp, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f102 0501 	add.w	r5, r2, #1
 80085f4:	dd06      	ble.n	8008604 <_dtoa_r+0xa6c>
 80085f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085fa:	d0eb      	beq.n	80085d4 <_dtoa_r+0xa3c>
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	9b07      	ldr	r3, [sp, #28]
 8008602:	e7c4      	b.n	800858e <_dtoa_r+0x9f6>
 8008604:	9b06      	ldr	r3, [sp, #24]
 8008606:	9a04      	ldr	r2, [sp, #16]
 8008608:	1aeb      	subs	r3, r5, r3
 800860a:	4293      	cmp	r3, r2
 800860c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008610:	d021      	beq.n	8008656 <_dtoa_r+0xabe>
 8008612:	4659      	mov	r1, fp
 8008614:	2300      	movs	r3, #0
 8008616:	220a      	movs	r2, #10
 8008618:	4620      	mov	r0, r4
 800861a:	f000 fac9 	bl	8008bb0 <__multadd>
 800861e:	45b9      	cmp	r9, r7
 8008620:	4683      	mov	fp, r0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	f04f 020a 	mov.w	r2, #10
 800862a:	4649      	mov	r1, r9
 800862c:	4620      	mov	r0, r4
 800862e:	d105      	bne.n	800863c <_dtoa_r+0xaa4>
 8008630:	f000 fabe 	bl	8008bb0 <__multadd>
 8008634:	4681      	mov	r9, r0
 8008636:	4607      	mov	r7, r0
 8008638:	9507      	str	r5, [sp, #28]
 800863a:	e778      	b.n	800852e <_dtoa_r+0x996>
 800863c:	f000 fab8 	bl	8008bb0 <__multadd>
 8008640:	4639      	mov	r1, r7
 8008642:	4681      	mov	r9, r0
 8008644:	2300      	movs	r3, #0
 8008646:	220a      	movs	r2, #10
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fab1 	bl	8008bb0 <__multadd>
 800864e:	4607      	mov	r7, r0
 8008650:	e7f2      	b.n	8008638 <_dtoa_r+0xaa0>
 8008652:	f04f 0900 	mov.w	r9, #0
 8008656:	4659      	mov	r1, fp
 8008658:	2201      	movs	r2, #1
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fc1e 	bl	8008e9c <__lshift>
 8008660:	4631      	mov	r1, r6
 8008662:	4683      	mov	fp, r0
 8008664:	f000 fc6e 	bl	8008f44 <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	dcb8      	bgt.n	80085de <_dtoa_r+0xa46>
 800866c:	d102      	bne.n	8008674 <_dtoa_r+0xadc>
 800866e:	f018 0f01 	tst.w	r8, #1
 8008672:	d1b4      	bne.n	80085de <_dtoa_r+0xa46>
 8008674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008678:	1e6a      	subs	r2, r5, #1
 800867a:	2b30      	cmp	r3, #48	; 0x30
 800867c:	f47f af0f 	bne.w	800849e <_dtoa_r+0x906>
 8008680:	4615      	mov	r5, r2
 8008682:	e7f7      	b.n	8008674 <_dtoa_r+0xadc>
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	4293      	cmp	r3, r2
 8008688:	d105      	bne.n	8008696 <_dtoa_r+0xafe>
 800868a:	2331      	movs	r3, #49	; 0x31
 800868c:	9a06      	ldr	r2, [sp, #24]
 800868e:	f10a 0a01 	add.w	sl, sl, #1
 8008692:	7013      	strb	r3, [r2, #0]
 8008694:	e703      	b.n	800849e <_dtoa_r+0x906>
 8008696:	4615      	mov	r5, r2
 8008698:	e7a1      	b.n	80085de <_dtoa_r+0xa46>
 800869a:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <_dtoa_r+0xb60>)
 800869c:	f7ff bae1 	b.w	8007c62 <_dtoa_r+0xca>
 80086a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f aabb 	bne.w	8007c1e <_dtoa_r+0x86>
 80086a8:	4b14      	ldr	r3, [pc, #80]	; (80086fc <_dtoa_r+0xb64>)
 80086aa:	f7ff bada 	b.w	8007c62 <_dtoa_r+0xca>
 80086ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	f77f ae3f 	ble.w	8008334 <_dtoa_r+0x79c>
 80086b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086b8:	9308      	str	r3, [sp, #32]
 80086ba:	e653      	b.n	8008364 <_dtoa_r+0x7cc>
 80086bc:	9b04      	ldr	r3, [sp, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc03      	bgt.n	80086ca <_dtoa_r+0xb32>
 80086c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	f73f aed5 	bgt.w	8008474 <_dtoa_r+0x8dc>
 80086ca:	9d06      	ldr	r5, [sp, #24]
 80086cc:	4631      	mov	r1, r6
 80086ce:	4658      	mov	r0, fp
 80086d0:	f7ff f9d2 	bl	8007a78 <quorem>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086da:	f805 8b01 	strb.w	r8, [r5], #1
 80086de:	9a04      	ldr	r2, [sp, #16]
 80086e0:	1aeb      	subs	r3, r5, r3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	ddb5      	ble.n	8008652 <_dtoa_r+0xaba>
 80086e6:	4659      	mov	r1, fp
 80086e8:	2300      	movs	r3, #0
 80086ea:	220a      	movs	r2, #10
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fa5f 	bl	8008bb0 <__multadd>
 80086f2:	4683      	mov	fp, r0
 80086f4:	e7ea      	b.n	80086cc <_dtoa_r+0xb34>
 80086f6:	bf00      	nop
 80086f8:	08009e74 	.word	0x08009e74
 80086fc:	08009e98 	.word	0x08009e98

08008700 <__sflush_r>:
 8008700:	898a      	ldrh	r2, [r1, #12]
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	0710      	lsls	r0, r2, #28
 800870a:	460c      	mov	r4, r1
 800870c:	d458      	bmi.n	80087c0 <__sflush_r+0xc0>
 800870e:	684b      	ldr	r3, [r1, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc05      	bgt.n	8008720 <__sflush_r+0x20>
 8008714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc02      	bgt.n	8008720 <__sflush_r+0x20>
 800871a:	2000      	movs	r0, #0
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008722:	2e00      	cmp	r6, #0
 8008724:	d0f9      	beq.n	800871a <__sflush_r+0x1a>
 8008726:	2300      	movs	r3, #0
 8008728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800872c:	682f      	ldr	r7, [r5, #0]
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	d032      	beq.n	800879a <__sflush_r+0x9a>
 8008734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	075a      	lsls	r2, r3, #29
 800873a:	d505      	bpl.n	8008748 <__sflush_r+0x48>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	1ac0      	subs	r0, r0, r3
 8008740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008742:	b10b      	cbz	r3, 8008748 <__sflush_r+0x48>
 8008744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008746:	1ac0      	subs	r0, r0, r3
 8008748:	2300      	movs	r3, #0
 800874a:	4602      	mov	r2, r0
 800874c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874e:	6a21      	ldr	r1, [r4, #32]
 8008750:	4628      	mov	r0, r5
 8008752:	47b0      	blx	r6
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	d106      	bne.n	8008768 <__sflush_r+0x68>
 800875a:	6829      	ldr	r1, [r5, #0]
 800875c:	291d      	cmp	r1, #29
 800875e:	d848      	bhi.n	80087f2 <__sflush_r+0xf2>
 8008760:	4a29      	ldr	r2, [pc, #164]	; (8008808 <__sflush_r+0x108>)
 8008762:	40ca      	lsrs	r2, r1
 8008764:	07d6      	lsls	r6, r2, #31
 8008766:	d544      	bpl.n	80087f2 <__sflush_r+0xf2>
 8008768:	2200      	movs	r2, #0
 800876a:	6062      	str	r2, [r4, #4]
 800876c:	6922      	ldr	r2, [r4, #16]
 800876e:	04d9      	lsls	r1, r3, #19
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	d504      	bpl.n	800877e <__sflush_r+0x7e>
 8008774:	1c42      	adds	r2, r0, #1
 8008776:	d101      	bne.n	800877c <__sflush_r+0x7c>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b903      	cbnz	r3, 800877e <__sflush_r+0x7e>
 800877c:	6560      	str	r0, [r4, #84]	; 0x54
 800877e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008780:	602f      	str	r7, [r5, #0]
 8008782:	2900      	cmp	r1, #0
 8008784:	d0c9      	beq.n	800871a <__sflush_r+0x1a>
 8008786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800878a:	4299      	cmp	r1, r3
 800878c:	d002      	beq.n	8008794 <__sflush_r+0x94>
 800878e:	4628      	mov	r0, r5
 8008790:	f000 fcae 	bl	80090f0 <_free_r>
 8008794:	2000      	movs	r0, #0
 8008796:	6360      	str	r0, [r4, #52]	; 0x34
 8008798:	e7c0      	b.n	800871c <__sflush_r+0x1c>
 800879a:	2301      	movs	r3, #1
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	1c41      	adds	r1, r0, #1
 80087a2:	d1c8      	bne.n	8008736 <__sflush_r+0x36>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0c5      	beq.n	8008736 <__sflush_r+0x36>
 80087aa:	2b1d      	cmp	r3, #29
 80087ac:	d001      	beq.n	80087b2 <__sflush_r+0xb2>
 80087ae:	2b16      	cmp	r3, #22
 80087b0:	d101      	bne.n	80087b6 <__sflush_r+0xb6>
 80087b2:	602f      	str	r7, [r5, #0]
 80087b4:	e7b1      	b.n	800871a <__sflush_r+0x1a>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	e7ad      	b.n	800871c <__sflush_r+0x1c>
 80087c0:	690f      	ldr	r7, [r1, #16]
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	d0a9      	beq.n	800871a <__sflush_r+0x1a>
 80087c6:	0793      	lsls	r3, r2, #30
 80087c8:	bf18      	it	ne
 80087ca:	2300      	movne	r3, #0
 80087cc:	680e      	ldr	r6, [r1, #0]
 80087ce:	bf08      	it	eq
 80087d0:	694b      	ldreq	r3, [r1, #20]
 80087d2:	eba6 0807 	sub.w	r8, r6, r7
 80087d6:	600f      	str	r7, [r1, #0]
 80087d8:	608b      	str	r3, [r1, #8]
 80087da:	f1b8 0f00 	cmp.w	r8, #0
 80087de:	dd9c      	ble.n	800871a <__sflush_r+0x1a>
 80087e0:	4643      	mov	r3, r8
 80087e2:	463a      	mov	r2, r7
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	4628      	mov	r0, r5
 80087e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087ea:	47b0      	blx	r6
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dc06      	bgt.n	80087fe <__sflush_r+0xfe>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295
 80087fc:	e78e      	b.n	800871c <__sflush_r+0x1c>
 80087fe:	4407      	add	r7, r0
 8008800:	eba8 0800 	sub.w	r8, r8, r0
 8008804:	e7e9      	b.n	80087da <__sflush_r+0xda>
 8008806:	bf00      	nop
 8008808:	20400001 	.word	0x20400001

0800880c <_fflush_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	690b      	ldr	r3, [r1, #16]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b1db      	cbz	r3, 800884e <_fflush_r+0x42>
 8008816:	b118      	cbz	r0, 8008820 <_fflush_r+0x14>
 8008818:	6983      	ldr	r3, [r0, #24]
 800881a:	b90b      	cbnz	r3, 8008820 <_fflush_r+0x14>
 800881c:	f000 f860 	bl	80088e0 <__sinit>
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <_fflush_r+0x48>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d109      	bne.n	800883a <_fflush_r+0x2e>
 8008826:	686c      	ldr	r4, [r5, #4]
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	b17b      	cbz	r3, 800884e <_fflush_r+0x42>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008836:	f7ff bf63 	b.w	8008700 <__sflush_r>
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <_fflush_r+0x4c>)
 800883c:	429c      	cmp	r4, r3
 800883e:	d101      	bne.n	8008844 <_fflush_r+0x38>
 8008840:	68ac      	ldr	r4, [r5, #8]
 8008842:	e7f1      	b.n	8008828 <_fflush_r+0x1c>
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <_fflush_r+0x50>)
 8008846:	429c      	cmp	r4, r3
 8008848:	bf08      	it	eq
 800884a:	68ec      	ldreq	r4, [r5, #12]
 800884c:	e7ec      	b.n	8008828 <_fflush_r+0x1c>
 800884e:	2000      	movs	r0, #0
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	08009ec8 	.word	0x08009ec8
 8008858:	08009ee8 	.word	0x08009ee8
 800885c:	08009ea8 	.word	0x08009ea8

08008860 <std>:
 8008860:	2300      	movs	r3, #0
 8008862:	b510      	push	{r4, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	e9c0 3300 	strd	r3, r3, [r0]
 800886a:	6083      	str	r3, [r0, #8]
 800886c:	8181      	strh	r1, [r0, #12]
 800886e:	6643      	str	r3, [r0, #100]	; 0x64
 8008870:	81c2      	strh	r2, [r0, #14]
 8008872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008876:	6183      	str	r3, [r0, #24]
 8008878:	4619      	mov	r1, r3
 800887a:	2208      	movs	r2, #8
 800887c:	305c      	adds	r0, #92	; 0x5c
 800887e:	f7fe fb53 	bl	8006f28 <memset>
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <std+0x38>)
 8008884:	6224      	str	r4, [r4, #32]
 8008886:	6263      	str	r3, [r4, #36]	; 0x24
 8008888:	4b04      	ldr	r3, [pc, #16]	; (800889c <std+0x3c>)
 800888a:	62a3      	str	r3, [r4, #40]	; 0x28
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <std+0x40>)
 800888e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008890:	4b04      	ldr	r3, [pc, #16]	; (80088a4 <std+0x44>)
 8008892:	6323      	str	r3, [r4, #48]	; 0x30
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	08009545 	.word	0x08009545
 800889c:	08009567 	.word	0x08009567
 80088a0:	0800959f 	.word	0x0800959f
 80088a4:	080095c3 	.word	0x080095c3

080088a8 <_cleanup_r>:
 80088a8:	4901      	ldr	r1, [pc, #4]	; (80088b0 <_cleanup_r+0x8>)
 80088aa:	f000 b885 	b.w	80089b8 <_fwalk_reent>
 80088ae:	bf00      	nop
 80088b0:	0800880d 	.word	0x0800880d

080088b4 <__sfmoreglue>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	2568      	movs	r5, #104	; 0x68
 80088b8:	1e4a      	subs	r2, r1, #1
 80088ba:	4355      	muls	r5, r2
 80088bc:	460e      	mov	r6, r1
 80088be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088c2:	f000 fc61 	bl	8009188 <_malloc_r>
 80088c6:	4604      	mov	r4, r0
 80088c8:	b140      	cbz	r0, 80088dc <__sfmoreglue+0x28>
 80088ca:	2100      	movs	r1, #0
 80088cc:	e9c0 1600 	strd	r1, r6, [r0]
 80088d0:	300c      	adds	r0, #12
 80088d2:	60a0      	str	r0, [r4, #8]
 80088d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088d8:	f7fe fb26 	bl	8006f28 <memset>
 80088dc:	4620      	mov	r0, r4
 80088de:	bd70      	pop	{r4, r5, r6, pc}

080088e0 <__sinit>:
 80088e0:	6983      	ldr	r3, [r0, #24]
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	bb33      	cbnz	r3, 8008936 <__sinit+0x56>
 80088e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80088ec:	6503      	str	r3, [r0, #80]	; 0x50
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <__sinit+0x58>)
 80088f0:	4a12      	ldr	r2, [pc, #72]	; (800893c <__sinit+0x5c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6282      	str	r2, [r0, #40]	; 0x28
 80088f6:	4298      	cmp	r0, r3
 80088f8:	bf04      	itt	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	6183      	streq	r3, [r0, #24]
 80088fe:	f000 f81f 	bl	8008940 <__sfp>
 8008902:	6060      	str	r0, [r4, #4]
 8008904:	4620      	mov	r0, r4
 8008906:	f000 f81b 	bl	8008940 <__sfp>
 800890a:	60a0      	str	r0, [r4, #8]
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f817 	bl	8008940 <__sfp>
 8008912:	2200      	movs	r2, #0
 8008914:	60e0      	str	r0, [r4, #12]
 8008916:	2104      	movs	r1, #4
 8008918:	6860      	ldr	r0, [r4, #4]
 800891a:	f7ff ffa1 	bl	8008860 <std>
 800891e:	2201      	movs	r2, #1
 8008920:	2109      	movs	r1, #9
 8008922:	68a0      	ldr	r0, [r4, #8]
 8008924:	f7ff ff9c 	bl	8008860 <std>
 8008928:	2202      	movs	r2, #2
 800892a:	2112      	movs	r1, #18
 800892c:	68e0      	ldr	r0, [r4, #12]
 800892e:	f7ff ff97 	bl	8008860 <std>
 8008932:	2301      	movs	r3, #1
 8008934:	61a3      	str	r3, [r4, #24]
 8008936:	bd10      	pop	{r4, pc}
 8008938:	08009e60 	.word	0x08009e60
 800893c:	080088a9 	.word	0x080088a9

08008940 <__sfp>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <__sfp+0x70>)
 8008944:	4607      	mov	r7, r0
 8008946:	681e      	ldr	r6, [r3, #0]
 8008948:	69b3      	ldr	r3, [r6, #24]
 800894a:	b913      	cbnz	r3, 8008952 <__sfp+0x12>
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff ffc7 	bl	80088e0 <__sinit>
 8008952:	3648      	adds	r6, #72	; 0x48
 8008954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008958:	3b01      	subs	r3, #1
 800895a:	d503      	bpl.n	8008964 <__sfp+0x24>
 800895c:	6833      	ldr	r3, [r6, #0]
 800895e:	b133      	cbz	r3, 800896e <__sfp+0x2e>
 8008960:	6836      	ldr	r6, [r6, #0]
 8008962:	e7f7      	b.n	8008954 <__sfp+0x14>
 8008964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008968:	b16d      	cbz	r5, 8008986 <__sfp+0x46>
 800896a:	3468      	adds	r4, #104	; 0x68
 800896c:	e7f4      	b.n	8008958 <__sfp+0x18>
 800896e:	2104      	movs	r1, #4
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ff9f 	bl	80088b4 <__sfmoreglue>
 8008976:	6030      	str	r0, [r6, #0]
 8008978:	2800      	cmp	r0, #0
 800897a:	d1f1      	bne.n	8008960 <__sfp+0x20>
 800897c:	230c      	movs	r3, #12
 800897e:	4604      	mov	r4, r0
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4620      	mov	r0, r4
 8008984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008986:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <__sfp+0x74>)
 8008988:	6665      	str	r5, [r4, #100]	; 0x64
 800898a:	e9c4 5500 	strd	r5, r5, [r4]
 800898e:	60a5      	str	r5, [r4, #8]
 8008990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008998:	2208      	movs	r2, #8
 800899a:	4629      	mov	r1, r5
 800899c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a0:	f7fe fac2 	bl	8006f28 <memset>
 80089a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089ac:	e7e9      	b.n	8008982 <__sfp+0x42>
 80089ae:	bf00      	nop
 80089b0:	08009e60 	.word	0x08009e60
 80089b4:	ffff0001 	.word	0xffff0001

080089b8 <_fwalk_reent>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	2600      	movs	r6, #0
 80089c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089c6:	b914      	cbnz	r4, 80089ce <_fwalk_reent+0x16>
 80089c8:	4630      	mov	r0, r6
 80089ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80089d2:	3f01      	subs	r7, #1
 80089d4:	d501      	bpl.n	80089da <_fwalk_reent+0x22>
 80089d6:	6824      	ldr	r4, [r4, #0]
 80089d8:	e7f5      	b.n	80089c6 <_fwalk_reent+0xe>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d907      	bls.n	80089f0 <_fwalk_reent+0x38>
 80089e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089e4:	3301      	adds	r3, #1
 80089e6:	d003      	beq.n	80089f0 <_fwalk_reent+0x38>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4640      	mov	r0, r8
 80089ec:	47c8      	blx	r9
 80089ee:	4306      	orrs	r6, r0
 80089f0:	3568      	adds	r5, #104	; 0x68
 80089f2:	e7ee      	b.n	80089d2 <_fwalk_reent+0x1a>

080089f4 <_localeconv_r>:
 80089f4:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <_localeconv_r+0x14>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a18      	ldr	r0, [r3, #32]
 80089fa:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <_localeconv_r+0x18>)
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bf08      	it	eq
 8008a00:	4618      	moveq	r0, r3
 8008a02:	30f0      	adds	r0, #240	; 0xf0
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	2000001c 	.word	0x2000001c
 8008a0c:	20000080 	.word	0x20000080

08008a10 <__swhatbuf_r>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	460e      	mov	r6, r1
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	b096      	sub	sp, #88	; 0x58
 8008a1a:	2900      	cmp	r1, #0
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	461d      	mov	r5, r3
 8008a20:	da07      	bge.n	8008a32 <__swhatbuf_r+0x22>
 8008a22:	2300      	movs	r3, #0
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	89b3      	ldrh	r3, [r6, #12]
 8008a28:	061a      	lsls	r2, r3, #24
 8008a2a:	d410      	bmi.n	8008a4e <__swhatbuf_r+0x3e>
 8008a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a30:	e00e      	b.n	8008a50 <__swhatbuf_r+0x40>
 8008a32:	466a      	mov	r2, sp
 8008a34:	f000 fdec 	bl	8009610 <_fstat_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dbf2      	blt.n	8008a22 <__swhatbuf_r+0x12>
 8008a3c:	9a01      	ldr	r2, [sp, #4]
 8008a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a46:	425a      	negs	r2, r3
 8008a48:	415a      	adcs	r2, r3
 8008a4a:	602a      	str	r2, [r5, #0]
 8008a4c:	e7ee      	b.n	8008a2c <__swhatbuf_r+0x1c>
 8008a4e:	2340      	movs	r3, #64	; 0x40
 8008a50:	2000      	movs	r0, #0
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	b016      	add	sp, #88	; 0x58
 8008a56:	bd70      	pop	{r4, r5, r6, pc}

08008a58 <__smakebuf_r>:
 8008a58:	898b      	ldrh	r3, [r1, #12]
 8008a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a5c:	079d      	lsls	r5, r3, #30
 8008a5e:	4606      	mov	r6, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	d507      	bpl.n	8008a74 <__smakebuf_r+0x1c>
 8008a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	6163      	str	r3, [r4, #20]
 8008a70:	b002      	add	sp, #8
 8008a72:	bd70      	pop	{r4, r5, r6, pc}
 8008a74:	ab01      	add	r3, sp, #4
 8008a76:	466a      	mov	r2, sp
 8008a78:	f7ff ffca 	bl	8008a10 <__swhatbuf_r>
 8008a7c:	9900      	ldr	r1, [sp, #0]
 8008a7e:	4605      	mov	r5, r0
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 fb81 	bl	8009188 <_malloc_r>
 8008a86:	b948      	cbnz	r0, 8008a9c <__smakebuf_r+0x44>
 8008a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8c:	059a      	lsls	r2, r3, #22
 8008a8e:	d4ef      	bmi.n	8008a70 <__smakebuf_r+0x18>
 8008a90:	f023 0303 	bic.w	r3, r3, #3
 8008a94:	f043 0302 	orr.w	r3, r3, #2
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	e7e3      	b.n	8008a64 <__smakebuf_r+0xc>
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <__smakebuf_r+0x7c>)
 8008a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	6020      	str	r0, [r4, #0]
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	9b00      	ldr	r3, [sp, #0]
 8008aac:	6120      	str	r0, [r4, #16]
 8008aae:	6163      	str	r3, [r4, #20]
 8008ab0:	9b01      	ldr	r3, [sp, #4]
 8008ab2:	b15b      	cbz	r3, 8008acc <__smakebuf_r+0x74>
 8008ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 fdbb 	bl	8009634 <_isatty_r>
 8008abe:	b128      	cbz	r0, 8008acc <__smakebuf_r+0x74>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	431d      	orrs	r5, r3
 8008ad0:	81a5      	strh	r5, [r4, #12]
 8008ad2:	e7cd      	b.n	8008a70 <__smakebuf_r+0x18>
 8008ad4:	080088a9 	.word	0x080088a9

08008ad8 <malloc>:
 8008ad8:	4b02      	ldr	r3, [pc, #8]	; (8008ae4 <malloc+0xc>)
 8008ada:	4601      	mov	r1, r0
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	f000 bb53 	b.w	8009188 <_malloc_r>
 8008ae2:	bf00      	nop
 8008ae4:	2000001c 	.word	0x2000001c

08008ae8 <memchr>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	b2c9      	uxtb	r1, r1
 8008aec:	4402      	add	r2, r0
 8008aee:	4290      	cmp	r0, r2
 8008af0:	4603      	mov	r3, r0
 8008af2:	d101      	bne.n	8008af8 <memchr+0x10>
 8008af4:	2300      	movs	r3, #0
 8008af6:	e003      	b.n	8008b00 <memchr+0x18>
 8008af8:	781c      	ldrb	r4, [r3, #0]
 8008afa:	3001      	adds	r0, #1
 8008afc:	428c      	cmp	r4, r1
 8008afe:	d1f6      	bne.n	8008aee <memchr+0x6>
 8008b00:	4618      	mov	r0, r3
 8008b02:	bd10      	pop	{r4, pc}

08008b04 <memcpy>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	1e43      	subs	r3, r0, #1
 8008b08:	440a      	add	r2, r1
 8008b0a:	4291      	cmp	r1, r2
 8008b0c:	d100      	bne.n	8008b10 <memcpy+0xc>
 8008b0e:	bd10      	pop	{r4, pc}
 8008b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b18:	e7f7      	b.n	8008b0a <memcpy+0x6>

08008b1a <_Balloc>:
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460e      	mov	r6, r1
 8008b22:	b93d      	cbnz	r5, 8008b34 <_Balloc+0x1a>
 8008b24:	2010      	movs	r0, #16
 8008b26:	f7ff ffd7 	bl	8008ad8 <malloc>
 8008b2a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b30:	6005      	str	r5, [r0, #0]
 8008b32:	60c5      	str	r5, [r0, #12]
 8008b34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b36:	68eb      	ldr	r3, [r5, #12]
 8008b38:	b183      	cbz	r3, 8008b5c <_Balloc+0x42>
 8008b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b42:	b9b8      	cbnz	r0, 8008b74 <_Balloc+0x5a>
 8008b44:	2101      	movs	r1, #1
 8008b46:	fa01 f506 	lsl.w	r5, r1, r6
 8008b4a:	1d6a      	adds	r2, r5, #5
 8008b4c:	0092      	lsls	r2, r2, #2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fabf 	bl	80090d2 <_calloc_r>
 8008b54:	b160      	cbz	r0, 8008b70 <_Balloc+0x56>
 8008b56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b5a:	e00e      	b.n	8008b7a <_Balloc+0x60>
 8008b5c:	2221      	movs	r2, #33	; 0x21
 8008b5e:	2104      	movs	r1, #4
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 fab6 	bl	80090d2 <_calloc_r>
 8008b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b68:	60e8      	str	r0, [r5, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e4      	bne.n	8008b3a <_Balloc+0x20>
 8008b70:	2000      	movs	r0, #0
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	6802      	ldr	r2, [r0, #0]
 8008b76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b80:	e7f7      	b.n	8008b72 <_Balloc+0x58>

08008b82 <_Bfree>:
 8008b82:	b570      	push	{r4, r5, r6, lr}
 8008b84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b86:	4606      	mov	r6, r0
 8008b88:	460d      	mov	r5, r1
 8008b8a:	b93c      	cbnz	r4, 8008b9c <_Bfree+0x1a>
 8008b8c:	2010      	movs	r0, #16
 8008b8e:	f7ff ffa3 	bl	8008ad8 <malloc>
 8008b92:	6270      	str	r0, [r6, #36]	; 0x24
 8008b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b98:	6004      	str	r4, [r0, #0]
 8008b9a:	60c4      	str	r4, [r0, #12]
 8008b9c:	b13d      	cbz	r5, 8008bae <_Bfree+0x2c>
 8008b9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008ba0:	686a      	ldr	r2, [r5, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ba8:	6029      	str	r1, [r5, #0]
 8008baa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bae:	bd70      	pop	{r4, r5, r6, pc}

08008bb0 <__multadd>:
 8008bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	461f      	mov	r7, r3
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	460c      	mov	r4, r1
 8008bba:	2300      	movs	r3, #0
 8008bbc:	690d      	ldr	r5, [r1, #16]
 8008bbe:	f101 0c14 	add.w	ip, r1, #20
 8008bc2:	f8dc 0000 	ldr.w	r0, [ip]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	b281      	uxth	r1, r0
 8008bca:	fb02 7101 	mla	r1, r2, r1, r7
 8008bce:	0c00      	lsrs	r0, r0, #16
 8008bd0:	0c0f      	lsrs	r7, r1, #16
 8008bd2:	fb02 7000 	mla	r0, r2, r0, r7
 8008bd6:	b289      	uxth	r1, r1
 8008bd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008bdc:	429d      	cmp	r5, r3
 8008bde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008be2:	f84c 1b04 	str.w	r1, [ip], #4
 8008be6:	dcec      	bgt.n	8008bc2 <__multadd+0x12>
 8008be8:	b1d7      	cbz	r7, 8008c20 <__multadd+0x70>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	dc12      	bgt.n	8008c16 <__multadd+0x66>
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	3101      	adds	r1, #1
 8008bf6:	f7ff ff90 	bl	8008b1a <_Balloc>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	f104 010c 	add.w	r1, r4, #12
 8008c02:	3202      	adds	r2, #2
 8008c04:	0092      	lsls	r2, r2, #2
 8008c06:	300c      	adds	r0, #12
 8008c08:	f7ff ff7c 	bl	8008b04 <memcpy>
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ffb7 	bl	8008b82 <_Bfree>
 8008c14:	4644      	mov	r4, r8
 8008c16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c1a:	3501      	adds	r5, #1
 8008c1c:	615f      	str	r7, [r3, #20]
 8008c1e:	6125      	str	r5, [r4, #16]
 8008c20:	4620      	mov	r0, r4
 8008c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c26 <__hi0bits>:
 8008c26:	0c02      	lsrs	r2, r0, #16
 8008c28:	0412      	lsls	r2, r2, #16
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	b9b2      	cbnz	r2, 8008c5c <__hi0bits+0x36>
 8008c2e:	0403      	lsls	r3, r0, #16
 8008c30:	2010      	movs	r0, #16
 8008c32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c36:	bf04      	itt	eq
 8008c38:	021b      	lsleq	r3, r3, #8
 8008c3a:	3008      	addeq	r0, #8
 8008c3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c40:	bf04      	itt	eq
 8008c42:	011b      	lsleq	r3, r3, #4
 8008c44:	3004      	addeq	r0, #4
 8008c46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c4a:	bf04      	itt	eq
 8008c4c:	009b      	lsleq	r3, r3, #2
 8008c4e:	3002      	addeq	r0, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db06      	blt.n	8008c62 <__hi0bits+0x3c>
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	d503      	bpl.n	8008c60 <__hi0bits+0x3a>
 8008c58:	3001      	adds	r0, #1
 8008c5a:	4770      	bx	lr
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e7e8      	b.n	8008c32 <__hi0bits+0xc>
 8008c60:	2020      	movs	r0, #32
 8008c62:	4770      	bx	lr

08008c64 <__lo0bits>:
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	4601      	mov	r1, r0
 8008c68:	f013 0207 	ands.w	r2, r3, #7
 8008c6c:	d00b      	beq.n	8008c86 <__lo0bits+0x22>
 8008c6e:	07da      	lsls	r2, r3, #31
 8008c70:	d423      	bmi.n	8008cba <__lo0bits+0x56>
 8008c72:	0798      	lsls	r0, r3, #30
 8008c74:	bf49      	itett	mi
 8008c76:	085b      	lsrmi	r3, r3, #1
 8008c78:	089b      	lsrpl	r3, r3, #2
 8008c7a:	2001      	movmi	r0, #1
 8008c7c:	600b      	strmi	r3, [r1, #0]
 8008c7e:	bf5c      	itt	pl
 8008c80:	600b      	strpl	r3, [r1, #0]
 8008c82:	2002      	movpl	r0, #2
 8008c84:	4770      	bx	lr
 8008c86:	b298      	uxth	r0, r3
 8008c88:	b9a8      	cbnz	r0, 8008cb6 <__lo0bits+0x52>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c92:	bf04      	itt	eq
 8008c94:	0a1b      	lsreq	r3, r3, #8
 8008c96:	3008      	addeq	r0, #8
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	bf04      	itt	eq
 8008c9c:	091b      	lsreq	r3, r3, #4
 8008c9e:	3004      	addeq	r0, #4
 8008ca0:	079a      	lsls	r2, r3, #30
 8008ca2:	bf04      	itt	eq
 8008ca4:	089b      	lsreq	r3, r3, #2
 8008ca6:	3002      	addeq	r0, #2
 8008ca8:	07da      	lsls	r2, r3, #31
 8008caa:	d402      	bmi.n	8008cb2 <__lo0bits+0x4e>
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	d006      	beq.n	8008cbe <__lo0bits+0x5a>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	600b      	str	r3, [r1, #0]
 8008cb4:	4770      	bx	lr
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	e7e9      	b.n	8008c8e <__lo0bits+0x2a>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	4770      	bx	lr
 8008cbe:	2020      	movs	r0, #32
 8008cc0:	4770      	bx	lr

08008cc2 <__i2b>:
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	f7ff ff27 	bl	8008b1a <_Balloc>
 8008ccc:	2201      	movs	r2, #1
 8008cce:	6144      	str	r4, [r0, #20]
 8008cd0:	6102      	str	r2, [r0, #16]
 8008cd2:	bd10      	pop	{r4, pc}

08008cd4 <__multiply>:
 8008cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	4614      	mov	r4, r2
 8008cda:	690a      	ldr	r2, [r1, #16]
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	4688      	mov	r8, r1
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bfbe      	ittt	lt
 8008ce4:	460b      	movlt	r3, r1
 8008ce6:	46a0      	movlt	r8, r4
 8008ce8:	461c      	movlt	r4, r3
 8008cea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008cf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cfa:	eb07 0609 	add.w	r6, r7, r9
 8008cfe:	42b3      	cmp	r3, r6
 8008d00:	bfb8      	it	lt
 8008d02:	3101      	addlt	r1, #1
 8008d04:	f7ff ff09 	bl	8008b1a <_Balloc>
 8008d08:	f100 0514 	add.w	r5, r0, #20
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	2200      	movs	r2, #0
 8008d10:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d14:	4573      	cmp	r3, lr
 8008d16:	d316      	bcc.n	8008d46 <__multiply+0x72>
 8008d18:	f104 0214 	add.w	r2, r4, #20
 8008d1c:	f108 0114 	add.w	r1, r8, #20
 8008d20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	9201      	str	r2, [sp, #4]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d80c      	bhi.n	8008d4c <__multiply+0x78>
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	dd03      	ble.n	8008d3e <__multiply+0x6a>
 8008d36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d05d      	beq.n	8008dfa <__multiply+0x126>
 8008d3e:	6106      	str	r6, [r0, #16]
 8008d40:	b003      	add	sp, #12
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	f843 2b04 	str.w	r2, [r3], #4
 8008d4a:	e7e3      	b.n	8008d14 <__multiply+0x40>
 8008d4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d50:	f1bb 0f00 	cmp.w	fp, #0
 8008d54:	d023      	beq.n	8008d9e <__multiply+0xca>
 8008d56:	4689      	mov	r9, r1
 8008d58:	46ac      	mov	ip, r5
 8008d5a:	f04f 0800 	mov.w	r8, #0
 8008d5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d62:	f8dc a000 	ldr.w	sl, [ip]
 8008d66:	b2a3      	uxth	r3, r4
 8008d68:	fa1f fa8a 	uxth.w	sl, sl
 8008d6c:	fb0b a303 	mla	r3, fp, r3, sl
 8008d70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d74:	f8dc 4000 	ldr.w	r4, [ip]
 8008d78:	4443      	add	r3, r8
 8008d7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008d82:	46e2      	mov	sl, ip
 8008d84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008d8e:	454f      	cmp	r7, r9
 8008d90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008d94:	f84a 3b04 	str.w	r3, [sl], #4
 8008d98:	d82b      	bhi.n	8008df2 <__multiply+0x11e>
 8008d9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	3204      	adds	r2, #4
 8008da2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008da6:	f1ba 0f00 	cmp.w	sl, #0
 8008daa:	d020      	beq.n	8008dee <__multiply+0x11a>
 8008dac:	4689      	mov	r9, r1
 8008dae:	46a8      	mov	r8, r5
 8008db0:	f04f 0b00 	mov.w	fp, #0
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	f8b9 c000 	ldrh.w	ip, [r9]
 8008dba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	fb0a 440c 	mla	r4, sl, ip, r4
 8008dc4:	46c4      	mov	ip, r8
 8008dc6:	445c      	add	r4, fp
 8008dc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dcc:	f84c 3b04 	str.w	r3, [ip], #4
 8008dd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008dd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008dd8:	0c1b      	lsrs	r3, r3, #16
 8008dda:	fb0a b303 	mla	r3, sl, r3, fp
 8008dde:	454f      	cmp	r7, r9
 8008de0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008de4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008de8:	d805      	bhi.n	8008df6 <__multiply+0x122>
 8008dea:	f8c8 3004 	str.w	r3, [r8, #4]
 8008dee:	3504      	adds	r5, #4
 8008df0:	e79b      	b.n	8008d2a <__multiply+0x56>
 8008df2:	46d4      	mov	ip, sl
 8008df4:	e7b3      	b.n	8008d5e <__multiply+0x8a>
 8008df6:	46e0      	mov	r8, ip
 8008df8:	e7dd      	b.n	8008db6 <__multiply+0xe2>
 8008dfa:	3e01      	subs	r6, #1
 8008dfc:	e799      	b.n	8008d32 <__multiply+0x5e>
	...

08008e00 <__pow5mult>:
 8008e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e04:	4615      	mov	r5, r2
 8008e06:	f012 0203 	ands.w	r2, r2, #3
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	d007      	beq.n	8008e20 <__pow5mult+0x20>
 8008e10:	4c21      	ldr	r4, [pc, #132]	; (8008e98 <__pow5mult+0x98>)
 8008e12:	3a01      	subs	r2, #1
 8008e14:	2300      	movs	r3, #0
 8008e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e1a:	f7ff fec9 	bl	8008bb0 <__multadd>
 8008e1e:	4607      	mov	r7, r0
 8008e20:	10ad      	asrs	r5, r5, #2
 8008e22:	d035      	beq.n	8008e90 <__pow5mult+0x90>
 8008e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e26:	b93c      	cbnz	r4, 8008e38 <__pow5mult+0x38>
 8008e28:	2010      	movs	r0, #16
 8008e2a:	f7ff fe55 	bl	8008ad8 <malloc>
 8008e2e:	6270      	str	r0, [r6, #36]	; 0x24
 8008e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e34:	6004      	str	r4, [r0, #0]
 8008e36:	60c4      	str	r4, [r0, #12]
 8008e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e40:	b94c      	cbnz	r4, 8008e56 <__pow5mult+0x56>
 8008e42:	f240 2171 	movw	r1, #625	; 0x271
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ff3b 	bl	8008cc2 <__i2b>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	f04f 0800 	mov.w	r8, #0
 8008e5a:	07eb      	lsls	r3, r5, #31
 8008e5c:	d50a      	bpl.n	8008e74 <__pow5mult+0x74>
 8008e5e:	4639      	mov	r1, r7
 8008e60:	4622      	mov	r2, r4
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7ff ff36 	bl	8008cd4 <__multiply>
 8008e68:	4681      	mov	r9, r0
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff fe88 	bl	8008b82 <_Bfree>
 8008e72:	464f      	mov	r7, r9
 8008e74:	106d      	asrs	r5, r5, #1
 8008e76:	d00b      	beq.n	8008e90 <__pow5mult+0x90>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	b938      	cbnz	r0, 8008e8c <__pow5mult+0x8c>
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff ff27 	bl	8008cd4 <__multiply>
 8008e86:	6020      	str	r0, [r4, #0]
 8008e88:	f8c0 8000 	str.w	r8, [r0]
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e7e4      	b.n	8008e5a <__pow5mult+0x5a>
 8008e90:	4638      	mov	r0, r7
 8008e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e96:	bf00      	nop
 8008e98:	08009ff8 	.word	0x08009ff8

08008e9c <__lshift>:
 8008e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	4616      	mov	r6, r2
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eac:	eb0a 0903 	add.w	r9, sl, r3
 8008eb0:	6849      	ldr	r1, [r1, #4]
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	f109 0501 	add.w	r5, r9, #1
 8008eb8:	42ab      	cmp	r3, r5
 8008eba:	db32      	blt.n	8008f22 <__lshift+0x86>
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff fe2c 	bl	8008b1a <_Balloc>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f100 0114 	add.w	r1, r0, #20
 8008ecc:	4553      	cmp	r3, sl
 8008ece:	db2b      	blt.n	8008f28 <__lshift+0x8c>
 8008ed0:	6920      	ldr	r0, [r4, #16]
 8008ed2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ed6:	f104 0314 	add.w	r3, r4, #20
 8008eda:	f016 021f 	ands.w	r2, r6, #31
 8008ede:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ee2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ee6:	d025      	beq.n	8008f34 <__lshift+0x98>
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f1c2 0e20 	rsb	lr, r2, #32
 8008eee:	468a      	mov	sl, r1
 8008ef0:	681e      	ldr	r6, [r3, #0]
 8008ef2:	4096      	lsls	r6, r2
 8008ef4:	4330      	orrs	r0, r6
 8008ef6:	f84a 0b04 	str.w	r0, [sl], #4
 8008efa:	f853 0b04 	ldr.w	r0, [r3], #4
 8008efe:	459c      	cmp	ip, r3
 8008f00:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f04:	d814      	bhi.n	8008f30 <__lshift+0x94>
 8008f06:	6048      	str	r0, [r1, #4]
 8008f08:	b108      	cbz	r0, 8008f0e <__lshift+0x72>
 8008f0a:	f109 0502 	add.w	r5, r9, #2
 8008f0e:	3d01      	subs	r5, #1
 8008f10:	4638      	mov	r0, r7
 8008f12:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f16:	4621      	mov	r1, r4
 8008f18:	f7ff fe33 	bl	8008b82 <_Bfree>
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f22:	3101      	adds	r1, #1
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	e7c7      	b.n	8008eb8 <__lshift+0x1c>
 8008f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	e7cd      	b.n	8008ecc <__lshift+0x30>
 8008f30:	4651      	mov	r1, sl
 8008f32:	e7dc      	b.n	8008eee <__lshift+0x52>
 8008f34:	3904      	subs	r1, #4
 8008f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3a:	459c      	cmp	ip, r3
 8008f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f40:	d8f9      	bhi.n	8008f36 <__lshift+0x9a>
 8008f42:	e7e4      	b.n	8008f0e <__lshift+0x72>

08008f44 <__mcmp>:
 8008f44:	6903      	ldr	r3, [r0, #16]
 8008f46:	690a      	ldr	r2, [r1, #16]
 8008f48:	b530      	push	{r4, r5, lr}
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	d10c      	bne.n	8008f68 <__mcmp+0x24>
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	3014      	adds	r0, #20
 8008f52:	3114      	adds	r1, #20
 8008f54:	1884      	adds	r4, r0, r2
 8008f56:	4411      	add	r1, r2
 8008f58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f60:	4295      	cmp	r5, r2
 8008f62:	d003      	beq.n	8008f6c <__mcmp+0x28>
 8008f64:	d305      	bcc.n	8008f72 <__mcmp+0x2e>
 8008f66:	2301      	movs	r3, #1
 8008f68:	4618      	mov	r0, r3
 8008f6a:	bd30      	pop	{r4, r5, pc}
 8008f6c:	42a0      	cmp	r0, r4
 8008f6e:	d3f3      	bcc.n	8008f58 <__mcmp+0x14>
 8008f70:	e7fa      	b.n	8008f68 <__mcmp+0x24>
 8008f72:	f04f 33ff 	mov.w	r3, #4294967295
 8008f76:	e7f7      	b.n	8008f68 <__mcmp+0x24>

08008f78 <__mdiff>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	4607      	mov	r7, r0
 8008f80:	4611      	mov	r1, r2
 8008f82:	4628      	mov	r0, r5
 8008f84:	4614      	mov	r4, r2
 8008f86:	f7ff ffdd 	bl	8008f44 <__mcmp>
 8008f8a:	1e06      	subs	r6, r0, #0
 8008f8c:	d108      	bne.n	8008fa0 <__mdiff+0x28>
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff fdc2 	bl	8008b1a <_Balloc>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	bfa4      	itt	ge
 8008fa2:	4623      	movge	r3, r4
 8008fa4:	462c      	movge	r4, r5
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	6861      	ldr	r1, [r4, #4]
 8008faa:	bfa6      	itte	ge
 8008fac:	461d      	movge	r5, r3
 8008fae:	2600      	movge	r6, #0
 8008fb0:	2601      	movlt	r6, #1
 8008fb2:	f7ff fdb2 	bl	8008b1a <_Balloc>
 8008fb6:	f04f 0e00 	mov.w	lr, #0
 8008fba:	60c6      	str	r6, [r0, #12]
 8008fbc:	692b      	ldr	r3, [r5, #16]
 8008fbe:	6926      	ldr	r6, [r4, #16]
 8008fc0:	f104 0214 	add.w	r2, r4, #20
 8008fc4:	f105 0914 	add.w	r9, r5, #20
 8008fc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008fcc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008fd0:	f100 0114 	add.w	r1, r0, #20
 8008fd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8008fd8:	f859 5b04 	ldr.w	r5, [r9], #4
 8008fdc:	fa1f f38a 	uxth.w	r3, sl
 8008fe0:	4473      	add	r3, lr
 8008fe2:	b2ac      	uxth	r4, r5
 8008fe4:	1b1b      	subs	r3, r3, r4
 8008fe6:	0c2c      	lsrs	r4, r5, #16
 8008fe8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008fec:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8008ff6:	45c8      	cmp	r8, r9
 8008ff8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008ffc:	4694      	mov	ip, r2
 8008ffe:	f841 4b04 	str.w	r4, [r1], #4
 8009002:	d8e7      	bhi.n	8008fd4 <__mdiff+0x5c>
 8009004:	45bc      	cmp	ip, r7
 8009006:	d304      	bcc.n	8009012 <__mdiff+0x9a>
 8009008:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800900c:	b183      	cbz	r3, 8009030 <__mdiff+0xb8>
 800900e:	6106      	str	r6, [r0, #16]
 8009010:	e7c4      	b.n	8008f9c <__mdiff+0x24>
 8009012:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009016:	b2a2      	uxth	r2, r4
 8009018:	4472      	add	r2, lr
 800901a:	1413      	asrs	r3, r2, #16
 800901c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009020:	b292      	uxth	r2, r2
 8009022:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009026:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800902a:	f841 2b04 	str.w	r2, [r1], #4
 800902e:	e7e9      	b.n	8009004 <__mdiff+0x8c>
 8009030:	3e01      	subs	r6, #1
 8009032:	e7e9      	b.n	8009008 <__mdiff+0x90>

08009034 <__d2b>:
 8009034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009038:	461c      	mov	r4, r3
 800903a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800903e:	2101      	movs	r1, #1
 8009040:	4690      	mov	r8, r2
 8009042:	f7ff fd6a 	bl	8008b1a <_Balloc>
 8009046:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800904a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800904e:	4607      	mov	r7, r0
 8009050:	bb34      	cbnz	r4, 80090a0 <__d2b+0x6c>
 8009052:	9201      	str	r2, [sp, #4]
 8009054:	f1b8 0200 	subs.w	r2, r8, #0
 8009058:	d027      	beq.n	80090aa <__d2b+0x76>
 800905a:	a802      	add	r0, sp, #8
 800905c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009060:	f7ff fe00 	bl	8008c64 <__lo0bits>
 8009064:	9900      	ldr	r1, [sp, #0]
 8009066:	b1f0      	cbz	r0, 80090a6 <__d2b+0x72>
 8009068:	9a01      	ldr	r2, [sp, #4]
 800906a:	f1c0 0320 	rsb	r3, r0, #32
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	430b      	orrs	r3, r1
 8009074:	40c2      	lsrs	r2, r0
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	9201      	str	r2, [sp, #4]
 800907a:	9b01      	ldr	r3, [sp, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	bf14      	ite	ne
 8009080:	2102      	movne	r1, #2
 8009082:	2101      	moveq	r1, #1
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	6139      	str	r1, [r7, #16]
 8009088:	b1c4      	cbz	r4, 80090bc <__d2b+0x88>
 800908a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800908e:	4404      	add	r4, r0
 8009090:	6034      	str	r4, [r6, #0]
 8009092:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009096:	6028      	str	r0, [r5, #0]
 8009098:	4638      	mov	r0, r7
 800909a:	b002      	add	sp, #8
 800909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80090a4:	e7d5      	b.n	8009052 <__d2b+0x1e>
 80090a6:	6179      	str	r1, [r7, #20]
 80090a8:	e7e7      	b.n	800907a <__d2b+0x46>
 80090aa:	a801      	add	r0, sp, #4
 80090ac:	f7ff fdda 	bl	8008c64 <__lo0bits>
 80090b0:	2101      	movs	r1, #1
 80090b2:	9b01      	ldr	r3, [sp, #4]
 80090b4:	6139      	str	r1, [r7, #16]
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	3020      	adds	r0, #32
 80090ba:	e7e5      	b.n	8009088 <__d2b+0x54>
 80090bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80090c4:	6030      	str	r0, [r6, #0]
 80090c6:	6918      	ldr	r0, [r3, #16]
 80090c8:	f7ff fdad 	bl	8008c26 <__hi0bits>
 80090cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80090d0:	e7e1      	b.n	8009096 <__d2b+0x62>

080090d2 <_calloc_r>:
 80090d2:	b538      	push	{r3, r4, r5, lr}
 80090d4:	fb02 f401 	mul.w	r4, r2, r1
 80090d8:	4621      	mov	r1, r4
 80090da:	f000 f855 	bl	8009188 <_malloc_r>
 80090de:	4605      	mov	r5, r0
 80090e0:	b118      	cbz	r0, 80090ea <_calloc_r+0x18>
 80090e2:	4622      	mov	r2, r4
 80090e4:	2100      	movs	r1, #0
 80090e6:	f7fd ff1f 	bl	8006f28 <memset>
 80090ea:	4628      	mov	r0, r5
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080090f0 <_free_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4605      	mov	r5, r0
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d043      	beq.n	8009180 <_free_r+0x90>
 80090f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fc:	1f0c      	subs	r4, r1, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfb8      	it	lt
 8009102:	18e4      	addlt	r4, r4, r3
 8009104:	f000 faca 	bl	800969c <__malloc_lock>
 8009108:	4a1e      	ldr	r2, [pc, #120]	; (8009184 <_free_r+0x94>)
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	4610      	mov	r0, r2
 800910e:	b933      	cbnz	r3, 800911e <_free_r+0x2e>
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6014      	str	r4, [r2, #0]
 8009114:	4628      	mov	r0, r5
 8009116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800911a:	f000 bac0 	b.w	800969e <__malloc_unlock>
 800911e:	42a3      	cmp	r3, r4
 8009120:	d90b      	bls.n	800913a <_free_r+0x4a>
 8009122:	6821      	ldr	r1, [r4, #0]
 8009124:	1862      	adds	r2, r4, r1
 8009126:	4293      	cmp	r3, r2
 8009128:	bf01      	itttt	eq
 800912a:	681a      	ldreq	r2, [r3, #0]
 800912c:	685b      	ldreq	r3, [r3, #4]
 800912e:	1852      	addeq	r2, r2, r1
 8009130:	6022      	streq	r2, [r4, #0]
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	6004      	str	r4, [r0, #0]
 8009136:	e7ed      	b.n	8009114 <_free_r+0x24>
 8009138:	4613      	mov	r3, r2
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	b10a      	cbz	r2, 8009142 <_free_r+0x52>
 800913e:	42a2      	cmp	r2, r4
 8009140:	d9fa      	bls.n	8009138 <_free_r+0x48>
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	1858      	adds	r0, r3, r1
 8009146:	42a0      	cmp	r0, r4
 8009148:	d10b      	bne.n	8009162 <_free_r+0x72>
 800914a:	6820      	ldr	r0, [r4, #0]
 800914c:	4401      	add	r1, r0
 800914e:	1858      	adds	r0, r3, r1
 8009150:	4282      	cmp	r2, r0
 8009152:	6019      	str	r1, [r3, #0]
 8009154:	d1de      	bne.n	8009114 <_free_r+0x24>
 8009156:	6810      	ldr	r0, [r2, #0]
 8009158:	6852      	ldr	r2, [r2, #4]
 800915a:	4401      	add	r1, r0
 800915c:	6019      	str	r1, [r3, #0]
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	e7d8      	b.n	8009114 <_free_r+0x24>
 8009162:	d902      	bls.n	800916a <_free_r+0x7a>
 8009164:	230c      	movs	r3, #12
 8009166:	602b      	str	r3, [r5, #0]
 8009168:	e7d4      	b.n	8009114 <_free_r+0x24>
 800916a:	6820      	ldr	r0, [r4, #0]
 800916c:	1821      	adds	r1, r4, r0
 800916e:	428a      	cmp	r2, r1
 8009170:	bf01      	itttt	eq
 8009172:	6811      	ldreq	r1, [r2, #0]
 8009174:	6852      	ldreq	r2, [r2, #4]
 8009176:	1809      	addeq	r1, r1, r0
 8009178:	6021      	streq	r1, [r4, #0]
 800917a:	6062      	str	r2, [r4, #4]
 800917c:	605c      	str	r4, [r3, #4]
 800917e:	e7c9      	b.n	8009114 <_free_r+0x24>
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	20000210 	.word	0x20000210

08009188 <_malloc_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	1ccd      	adds	r5, r1, #3
 800918c:	f025 0503 	bic.w	r5, r5, #3
 8009190:	3508      	adds	r5, #8
 8009192:	2d0c      	cmp	r5, #12
 8009194:	bf38      	it	cc
 8009196:	250c      	movcc	r5, #12
 8009198:	2d00      	cmp	r5, #0
 800919a:	4606      	mov	r6, r0
 800919c:	db01      	blt.n	80091a2 <_malloc_r+0x1a>
 800919e:	42a9      	cmp	r1, r5
 80091a0:	d903      	bls.n	80091aa <_malloc_r+0x22>
 80091a2:	230c      	movs	r3, #12
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	2000      	movs	r0, #0
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	f000 fa77 	bl	800969c <__malloc_lock>
 80091ae:	4a21      	ldr	r2, [pc, #132]	; (8009234 <_malloc_r+0xac>)
 80091b0:	6814      	ldr	r4, [r2, #0]
 80091b2:	4621      	mov	r1, r4
 80091b4:	b991      	cbnz	r1, 80091dc <_malloc_r+0x54>
 80091b6:	4c20      	ldr	r4, [pc, #128]	; (8009238 <_malloc_r+0xb0>)
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	b91b      	cbnz	r3, 80091c4 <_malloc_r+0x3c>
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f9b1 	bl	8009524 <_sbrk_r>
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	4629      	mov	r1, r5
 80091c6:	4630      	mov	r0, r6
 80091c8:	f000 f9ac 	bl	8009524 <_sbrk_r>
 80091cc:	1c43      	adds	r3, r0, #1
 80091ce:	d124      	bne.n	800921a <_malloc_r+0x92>
 80091d0:	230c      	movs	r3, #12
 80091d2:	4630      	mov	r0, r6
 80091d4:	6033      	str	r3, [r6, #0]
 80091d6:	f000 fa62 	bl	800969e <__malloc_unlock>
 80091da:	e7e4      	b.n	80091a6 <_malloc_r+0x1e>
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1b5b      	subs	r3, r3, r5
 80091e0:	d418      	bmi.n	8009214 <_malloc_r+0x8c>
 80091e2:	2b0b      	cmp	r3, #11
 80091e4:	d90f      	bls.n	8009206 <_malloc_r+0x7e>
 80091e6:	600b      	str	r3, [r1, #0]
 80091e8:	18cc      	adds	r4, r1, r3
 80091ea:	50cd      	str	r5, [r1, r3]
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 fa56 	bl	800969e <__malloc_unlock>
 80091f2:	f104 000b 	add.w	r0, r4, #11
 80091f6:	1d23      	adds	r3, r4, #4
 80091f8:	f020 0007 	bic.w	r0, r0, #7
 80091fc:	1ac3      	subs	r3, r0, r3
 80091fe:	d0d3      	beq.n	80091a8 <_malloc_r+0x20>
 8009200:	425a      	negs	r2, r3
 8009202:	50e2      	str	r2, [r4, r3]
 8009204:	e7d0      	b.n	80091a8 <_malloc_r+0x20>
 8009206:	684b      	ldr	r3, [r1, #4]
 8009208:	428c      	cmp	r4, r1
 800920a:	bf16      	itet	ne
 800920c:	6063      	strne	r3, [r4, #4]
 800920e:	6013      	streq	r3, [r2, #0]
 8009210:	460c      	movne	r4, r1
 8009212:	e7eb      	b.n	80091ec <_malloc_r+0x64>
 8009214:	460c      	mov	r4, r1
 8009216:	6849      	ldr	r1, [r1, #4]
 8009218:	e7cc      	b.n	80091b4 <_malloc_r+0x2c>
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d005      	beq.n	8009230 <_malloc_r+0xa8>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4630      	mov	r0, r6
 8009228:	f000 f97c 	bl	8009524 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d0cf      	beq.n	80091d0 <_malloc_r+0x48>
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	e7db      	b.n	80091ec <_malloc_r+0x64>
 8009234:	20000210 	.word	0x20000210
 8009238:	20000214 	.word	0x20000214

0800923c <__sfputc_r>:
 800923c:	6893      	ldr	r3, [r2, #8]
 800923e:	b410      	push	{r4}
 8009240:	3b01      	subs	r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	6093      	str	r3, [r2, #8]
 8009246:	da07      	bge.n	8009258 <__sfputc_r+0x1c>
 8009248:	6994      	ldr	r4, [r2, #24]
 800924a:	42a3      	cmp	r3, r4
 800924c:	db01      	blt.n	8009252 <__sfputc_r+0x16>
 800924e:	290a      	cmp	r1, #10
 8009250:	d102      	bne.n	8009258 <__sfputc_r+0x1c>
 8009252:	bc10      	pop	{r4}
 8009254:	f7fe bb50 	b.w	80078f8 <__swbuf_r>
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	1c58      	adds	r0, r3, #1
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	7019      	strb	r1, [r3, #0]
 8009260:	4608      	mov	r0, r1
 8009262:	bc10      	pop	{r4}
 8009264:	4770      	bx	lr

08009266 <__sfputs_r>:
 8009266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009268:	4606      	mov	r6, r0
 800926a:	460f      	mov	r7, r1
 800926c:	4614      	mov	r4, r2
 800926e:	18d5      	adds	r5, r2, r3
 8009270:	42ac      	cmp	r4, r5
 8009272:	d101      	bne.n	8009278 <__sfputs_r+0x12>
 8009274:	2000      	movs	r0, #0
 8009276:	e007      	b.n	8009288 <__sfputs_r+0x22>
 8009278:	463a      	mov	r2, r7
 800927a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ffdc 	bl	800923c <__sfputc_r>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d1f3      	bne.n	8009270 <__sfputs_r+0xa>
 8009288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	b09d      	sub	sp, #116	; 0x74
 8009294:	4617      	mov	r7, r2
 8009296:	461d      	mov	r5, r3
 8009298:	4606      	mov	r6, r0
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6983      	ldr	r3, [r0, #24]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f7ff fb1e 	bl	80088e0 <__sinit>
 80092a4:	4b7c      	ldr	r3, [pc, #496]	; (8009498 <_vfiprintf_r+0x20c>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	d158      	bne.n	800935c <_vfiprintf_r+0xd0>
 80092aa:	6874      	ldr	r4, [r6, #4]
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	0718      	lsls	r0, r3, #28
 80092b0:	d55e      	bpl.n	8009370 <_vfiprintf_r+0xe4>
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d05b      	beq.n	8009370 <_vfiprintf_r+0xe4>
 80092b8:	2300      	movs	r3, #0
 80092ba:	9309      	str	r3, [sp, #36]	; 0x24
 80092bc:	2320      	movs	r3, #32
 80092be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092c2:	2330      	movs	r3, #48	; 0x30
 80092c4:	f04f 0b01 	mov.w	fp, #1
 80092c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092cc:	9503      	str	r5, [sp, #12]
 80092ce:	46b8      	mov	r8, r7
 80092d0:	4645      	mov	r5, r8
 80092d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092d6:	b10b      	cbz	r3, 80092dc <_vfiprintf_r+0x50>
 80092d8:	2b25      	cmp	r3, #37	; 0x25
 80092da:	d154      	bne.n	8009386 <_vfiprintf_r+0xfa>
 80092dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80092e0:	d00b      	beq.n	80092fa <_vfiprintf_r+0x6e>
 80092e2:	4653      	mov	r3, sl
 80092e4:	463a      	mov	r2, r7
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ffbc 	bl	8009266 <__sfputs_r>
 80092ee:	3001      	adds	r0, #1
 80092f0:	f000 80c2 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 80092f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f6:	4453      	add	r3, sl
 80092f8:	9309      	str	r3, [sp, #36]	; 0x24
 80092fa:	f898 3000 	ldrb.w	r3, [r8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 80ba 	beq.w	8009478 <_vfiprintf_r+0x1ec>
 8009304:	2300      	movs	r3, #0
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009316:	931a      	str	r3, [sp, #104]	; 0x68
 8009318:	46a8      	mov	r8, r5
 800931a:	2205      	movs	r2, #5
 800931c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009320:	485e      	ldr	r0, [pc, #376]	; (800949c <_vfiprintf_r+0x210>)
 8009322:	f7ff fbe1 	bl	8008ae8 <memchr>
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	bb78      	cbnz	r0, 800938a <_vfiprintf_r+0xfe>
 800932a:	06d9      	lsls	r1, r3, #27
 800932c:	bf44      	itt	mi
 800932e:	2220      	movmi	r2, #32
 8009330:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009334:	071a      	lsls	r2, r3, #28
 8009336:	bf44      	itt	mi
 8009338:	222b      	movmi	r2, #43	; 0x2b
 800933a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800933e:	782a      	ldrb	r2, [r5, #0]
 8009340:	2a2a      	cmp	r2, #42	; 0x2a
 8009342:	d02a      	beq.n	800939a <_vfiprintf_r+0x10e>
 8009344:	46a8      	mov	r8, r5
 8009346:	2000      	movs	r0, #0
 8009348:	250a      	movs	r5, #10
 800934a:	9a07      	ldr	r2, [sp, #28]
 800934c:	4641      	mov	r1, r8
 800934e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009352:	3b30      	subs	r3, #48	; 0x30
 8009354:	2b09      	cmp	r3, #9
 8009356:	d969      	bls.n	800942c <_vfiprintf_r+0x1a0>
 8009358:	b360      	cbz	r0, 80093b4 <_vfiprintf_r+0x128>
 800935a:	e024      	b.n	80093a6 <_vfiprintf_r+0x11a>
 800935c:	4b50      	ldr	r3, [pc, #320]	; (80094a0 <_vfiprintf_r+0x214>)
 800935e:	429c      	cmp	r4, r3
 8009360:	d101      	bne.n	8009366 <_vfiprintf_r+0xda>
 8009362:	68b4      	ldr	r4, [r6, #8]
 8009364:	e7a2      	b.n	80092ac <_vfiprintf_r+0x20>
 8009366:	4b4f      	ldr	r3, [pc, #316]	; (80094a4 <_vfiprintf_r+0x218>)
 8009368:	429c      	cmp	r4, r3
 800936a:	bf08      	it	eq
 800936c:	68f4      	ldreq	r4, [r6, #12]
 800936e:	e79d      	b.n	80092ac <_vfiprintf_r+0x20>
 8009370:	4621      	mov	r1, r4
 8009372:	4630      	mov	r0, r6
 8009374:	f7fe fb12 	bl	800799c <__swsetup_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	d09d      	beq.n	80092b8 <_vfiprintf_r+0x2c>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	b01d      	add	sp, #116	; 0x74
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	46a8      	mov	r8, r5
 8009388:	e7a2      	b.n	80092d0 <_vfiprintf_r+0x44>
 800938a:	4a44      	ldr	r2, [pc, #272]	; (800949c <_vfiprintf_r+0x210>)
 800938c:	4645      	mov	r5, r8
 800938e:	1a80      	subs	r0, r0, r2
 8009390:	fa0b f000 	lsl.w	r0, fp, r0
 8009394:	4318      	orrs	r0, r3
 8009396:	9004      	str	r0, [sp, #16]
 8009398:	e7be      	b.n	8009318 <_vfiprintf_r+0x8c>
 800939a:	9a03      	ldr	r2, [sp, #12]
 800939c:	1d11      	adds	r1, r2, #4
 800939e:	6812      	ldr	r2, [r2, #0]
 80093a0:	9103      	str	r1, [sp, #12]
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	db01      	blt.n	80093aa <_vfiprintf_r+0x11e>
 80093a6:	9207      	str	r2, [sp, #28]
 80093a8:	e004      	b.n	80093b4 <_vfiprintf_r+0x128>
 80093aa:	4252      	negs	r2, r2
 80093ac:	f043 0302 	orr.w	r3, r3, #2
 80093b0:	9207      	str	r2, [sp, #28]
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	f898 3000 	ldrb.w	r3, [r8]
 80093b8:	2b2e      	cmp	r3, #46	; 0x2e
 80093ba:	d10e      	bne.n	80093da <_vfiprintf_r+0x14e>
 80093bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80093c0:	2b2a      	cmp	r3, #42	; 0x2a
 80093c2:	d138      	bne.n	8009436 <_vfiprintf_r+0x1aa>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	f108 0802 	add.w	r8, r8, #2
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	9203      	str	r2, [sp, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bfb8      	it	lt
 80093d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80093d8:	9305      	str	r3, [sp, #20]
 80093da:	4d33      	ldr	r5, [pc, #204]	; (80094a8 <_vfiprintf_r+0x21c>)
 80093dc:	2203      	movs	r2, #3
 80093de:	f898 1000 	ldrb.w	r1, [r8]
 80093e2:	4628      	mov	r0, r5
 80093e4:	f7ff fb80 	bl	8008ae8 <memchr>
 80093e8:	b140      	cbz	r0, 80093fc <_vfiprintf_r+0x170>
 80093ea:	2340      	movs	r3, #64	; 0x40
 80093ec:	1b40      	subs	r0, r0, r5
 80093ee:	fa03 f000 	lsl.w	r0, r3, r0
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	f108 0801 	add.w	r8, r8, #1
 80093f8:	4303      	orrs	r3, r0
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	f898 1000 	ldrb.w	r1, [r8]
 8009400:	2206      	movs	r2, #6
 8009402:	482a      	ldr	r0, [pc, #168]	; (80094ac <_vfiprintf_r+0x220>)
 8009404:	f108 0701 	add.w	r7, r8, #1
 8009408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800940c:	f7ff fb6c 	bl	8008ae8 <memchr>
 8009410:	2800      	cmp	r0, #0
 8009412:	d037      	beq.n	8009484 <_vfiprintf_r+0x1f8>
 8009414:	4b26      	ldr	r3, [pc, #152]	; (80094b0 <_vfiprintf_r+0x224>)
 8009416:	bb1b      	cbnz	r3, 8009460 <_vfiprintf_r+0x1d4>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	3307      	adds	r3, #7
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	3308      	adds	r3, #8
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	444b      	add	r3, r9
 8009428:	9309      	str	r3, [sp, #36]	; 0x24
 800942a:	e750      	b.n	80092ce <_vfiprintf_r+0x42>
 800942c:	fb05 3202 	mla	r2, r5, r2, r3
 8009430:	2001      	movs	r0, #1
 8009432:	4688      	mov	r8, r1
 8009434:	e78a      	b.n	800934c <_vfiprintf_r+0xc0>
 8009436:	2300      	movs	r3, #0
 8009438:	250a      	movs	r5, #10
 800943a:	4619      	mov	r1, r3
 800943c:	f108 0801 	add.w	r8, r8, #1
 8009440:	9305      	str	r3, [sp, #20]
 8009442:	4640      	mov	r0, r8
 8009444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009448:	3a30      	subs	r2, #48	; 0x30
 800944a:	2a09      	cmp	r2, #9
 800944c:	d903      	bls.n	8009456 <_vfiprintf_r+0x1ca>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0c3      	beq.n	80093da <_vfiprintf_r+0x14e>
 8009452:	9105      	str	r1, [sp, #20]
 8009454:	e7c1      	b.n	80093da <_vfiprintf_r+0x14e>
 8009456:	fb05 2101 	mla	r1, r5, r1, r2
 800945a:	2301      	movs	r3, #1
 800945c:	4680      	mov	r8, r0
 800945e:	e7f0      	b.n	8009442 <_vfiprintf_r+0x1b6>
 8009460:	ab03      	add	r3, sp, #12
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	4622      	mov	r2, r4
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <_vfiprintf_r+0x228>)
 8009468:	a904      	add	r1, sp, #16
 800946a:	4630      	mov	r0, r6
 800946c:	f7fd fdf6 	bl	800705c <_printf_float>
 8009470:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009474:	4681      	mov	r9, r0
 8009476:	d1d5      	bne.n	8009424 <_vfiprintf_r+0x198>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	065b      	lsls	r3, r3, #25
 800947c:	f53f af7e 	bmi.w	800937c <_vfiprintf_r+0xf0>
 8009480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009482:	e77d      	b.n	8009380 <_vfiprintf_r+0xf4>
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4622      	mov	r2, r4
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <_vfiprintf_r+0x228>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	4630      	mov	r0, r6
 8009490:	f7fe f890 	bl	80075b4 <_printf_i>
 8009494:	e7ec      	b.n	8009470 <_vfiprintf_r+0x1e4>
 8009496:	bf00      	nop
 8009498:	08009ec8 	.word	0x08009ec8
 800949c:	0800a004 	.word	0x0800a004
 80094a0:	08009ee8 	.word	0x08009ee8
 80094a4:	08009ea8 	.word	0x08009ea8
 80094a8:	0800a00a 	.word	0x0800a00a
 80094ac:	0800a00e 	.word	0x0800a00e
 80094b0:	0800705d 	.word	0x0800705d
 80094b4:	08009267 	.word	0x08009267

080094b8 <_putc_r>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	460d      	mov	r5, r1
 80094bc:	4614      	mov	r4, r2
 80094be:	4606      	mov	r6, r0
 80094c0:	b118      	cbz	r0, 80094ca <_putc_r+0x12>
 80094c2:	6983      	ldr	r3, [r0, #24]
 80094c4:	b90b      	cbnz	r3, 80094ca <_putc_r+0x12>
 80094c6:	f7ff fa0b 	bl	80088e0 <__sinit>
 80094ca:	4b13      	ldr	r3, [pc, #76]	; (8009518 <_putc_r+0x60>)
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d112      	bne.n	80094f6 <_putc_r+0x3e>
 80094d0:	6874      	ldr	r4, [r6, #4]
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	60a3      	str	r3, [r4, #8]
 80094da:	da16      	bge.n	800950a <_putc_r+0x52>
 80094dc:	69a2      	ldr	r2, [r4, #24]
 80094de:	4293      	cmp	r3, r2
 80094e0:	db02      	blt.n	80094e8 <_putc_r+0x30>
 80094e2:	b2eb      	uxtb	r3, r5
 80094e4:	2b0a      	cmp	r3, #10
 80094e6:	d110      	bne.n	800950a <_putc_r+0x52>
 80094e8:	4622      	mov	r2, r4
 80094ea:	4629      	mov	r1, r5
 80094ec:	4630      	mov	r0, r6
 80094ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094f2:	f7fe ba01 	b.w	80078f8 <__swbuf_r>
 80094f6:	4b09      	ldr	r3, [pc, #36]	; (800951c <_putc_r+0x64>)
 80094f8:	429c      	cmp	r4, r3
 80094fa:	d101      	bne.n	8009500 <_putc_r+0x48>
 80094fc:	68b4      	ldr	r4, [r6, #8]
 80094fe:	e7e8      	b.n	80094d2 <_putc_r+0x1a>
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <_putc_r+0x68>)
 8009502:	429c      	cmp	r4, r3
 8009504:	bf08      	it	eq
 8009506:	68f4      	ldreq	r4, [r6, #12]
 8009508:	e7e3      	b.n	80094d2 <_putc_r+0x1a>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	b2e8      	uxtb	r0, r5
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	6022      	str	r2, [r4, #0]
 8009512:	701d      	strb	r5, [r3, #0]
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	bf00      	nop
 8009518:	08009ec8 	.word	0x08009ec8
 800951c:	08009ee8 	.word	0x08009ee8
 8009520:	08009ea8 	.word	0x08009ea8

08009524 <_sbrk_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	2300      	movs	r3, #0
 8009528:	4c05      	ldr	r4, [pc, #20]	; (8009540 <_sbrk_r+0x1c>)
 800952a:	4605      	mov	r5, r0
 800952c:	4608      	mov	r0, r1
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	f7fa ff88 	bl	8004444 <_sbrk>
 8009534:	1c43      	adds	r3, r0, #1
 8009536:	d102      	bne.n	800953e <_sbrk_r+0x1a>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	b103      	cbz	r3, 800953e <_sbrk_r+0x1a>
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	2000035c 	.word	0x2000035c

08009544 <__sread>:
 8009544:	b510      	push	{r4, lr}
 8009546:	460c      	mov	r4, r1
 8009548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954c:	f000 f8a8 	bl	80096a0 <_read_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	bfab      	itete	ge
 8009554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009556:	89a3      	ldrhlt	r3, [r4, #12]
 8009558:	181b      	addge	r3, r3, r0
 800955a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800955e:	bfac      	ite	ge
 8009560:	6563      	strge	r3, [r4, #84]	; 0x54
 8009562:	81a3      	strhlt	r3, [r4, #12]
 8009564:	bd10      	pop	{r4, pc}

08009566 <__swrite>:
 8009566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956a:	461f      	mov	r7, r3
 800956c:	898b      	ldrh	r3, [r1, #12]
 800956e:	4605      	mov	r5, r0
 8009570:	05db      	lsls	r3, r3, #23
 8009572:	460c      	mov	r4, r1
 8009574:	4616      	mov	r6, r2
 8009576:	d505      	bpl.n	8009584 <__swrite+0x1e>
 8009578:	2302      	movs	r3, #2
 800957a:	2200      	movs	r2, #0
 800957c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009580:	f000 f868 	bl	8009654 <_lseek_r>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	4632      	mov	r2, r6
 8009588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009592:	463b      	mov	r3, r7
 8009594:	4628      	mov	r0, r5
 8009596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800959a:	f000 b817 	b.w	80095cc <_write_r>

0800959e <__sseek>:
 800959e:	b510      	push	{r4, lr}
 80095a0:	460c      	mov	r4, r1
 80095a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a6:	f000 f855 	bl	8009654 <_lseek_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	bf15      	itete	ne
 80095b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80095b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095ba:	81a3      	strheq	r3, [r4, #12]
 80095bc:	bf18      	it	ne
 80095be:	81a3      	strhne	r3, [r4, #12]
 80095c0:	bd10      	pop	{r4, pc}

080095c2 <__sclose>:
 80095c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c6:	f000 b813 	b.w	80095f0 <_close_r>
	...

080095cc <_write_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4605      	mov	r5, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	2200      	movs	r2, #0
 80095d6:	4c05      	ldr	r4, [pc, #20]	; (80095ec <_write_r+0x20>)
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	f7fa fee6 	bl	80043ac <_write>
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	d102      	bne.n	80095ea <_write_r+0x1e>
 80095e4:	6823      	ldr	r3, [r4, #0]
 80095e6:	b103      	cbz	r3, 80095ea <_write_r+0x1e>
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	bd38      	pop	{r3, r4, r5, pc}
 80095ec:	2000035c 	.word	0x2000035c

080095f0 <_close_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	2300      	movs	r3, #0
 80095f4:	4c05      	ldr	r4, [pc, #20]	; (800960c <_close_r+0x1c>)
 80095f6:	4605      	mov	r5, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	f7fa fef2 	bl	80043e4 <_close>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_close_r+0x1a>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	b103      	cbz	r3, 800960a <_close_r+0x1a>
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	2000035c 	.word	0x2000035c

08009610 <_fstat_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	2300      	movs	r3, #0
 8009614:	4c06      	ldr	r4, [pc, #24]	; (8009630 <_fstat_r+0x20>)
 8009616:	4605      	mov	r5, r0
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	f7fa feec 	bl	80043fa <_fstat>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d102      	bne.n	800962c <_fstat_r+0x1c>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	b103      	cbz	r3, 800962c <_fstat_r+0x1c>
 800962a:	602b      	str	r3, [r5, #0]
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	2000035c 	.word	0x2000035c

08009634 <_isatty_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	2300      	movs	r3, #0
 8009638:	4c05      	ldr	r4, [pc, #20]	; (8009650 <_isatty_r+0x1c>)
 800963a:	4605      	mov	r5, r0
 800963c:	4608      	mov	r0, r1
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	f7fa feea 	bl	8004418 <_isatty>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_isatty_r+0x1a>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	b103      	cbz	r3, 800964e <_isatty_r+0x1a>
 800964c:	602b      	str	r3, [r5, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	2000035c 	.word	0x2000035c

08009654 <_lseek_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4605      	mov	r5, r0
 8009658:	4608      	mov	r0, r1
 800965a:	4611      	mov	r1, r2
 800965c:	2200      	movs	r2, #0
 800965e:	4c05      	ldr	r4, [pc, #20]	; (8009674 <_lseek_r+0x20>)
 8009660:	6022      	str	r2, [r4, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7fa fee2 	bl	800442c <_lseek>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_lseek_r+0x1e>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	b103      	cbz	r3, 8009672 <_lseek_r+0x1e>
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	2000035c 	.word	0x2000035c

08009678 <__ascii_mbtowc>:
 8009678:	b082      	sub	sp, #8
 800967a:	b901      	cbnz	r1, 800967e <__ascii_mbtowc+0x6>
 800967c:	a901      	add	r1, sp, #4
 800967e:	b142      	cbz	r2, 8009692 <__ascii_mbtowc+0x1a>
 8009680:	b14b      	cbz	r3, 8009696 <__ascii_mbtowc+0x1e>
 8009682:	7813      	ldrb	r3, [r2, #0]
 8009684:	600b      	str	r3, [r1, #0]
 8009686:	7812      	ldrb	r2, [r2, #0]
 8009688:	1c10      	adds	r0, r2, #0
 800968a:	bf18      	it	ne
 800968c:	2001      	movne	r0, #1
 800968e:	b002      	add	sp, #8
 8009690:	4770      	bx	lr
 8009692:	4610      	mov	r0, r2
 8009694:	e7fb      	b.n	800968e <__ascii_mbtowc+0x16>
 8009696:	f06f 0001 	mvn.w	r0, #1
 800969a:	e7f8      	b.n	800968e <__ascii_mbtowc+0x16>

0800969c <__malloc_lock>:
 800969c:	4770      	bx	lr

0800969e <__malloc_unlock>:
 800969e:	4770      	bx	lr

080096a0 <_read_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4605      	mov	r5, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	2200      	movs	r2, #0
 80096aa:	4c05      	ldr	r4, [pc, #20]	; (80096c0 <_read_r+0x20>)
 80096ac:	6022      	str	r2, [r4, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f7fa fe5f 	bl	8004372 <_read>
 80096b4:	1c43      	adds	r3, r0, #1
 80096b6:	d102      	bne.n	80096be <_read_r+0x1e>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	b103      	cbz	r3, 80096be <_read_r+0x1e>
 80096bc:	602b      	str	r3, [r5, #0]
 80096be:	bd38      	pop	{r3, r4, r5, pc}
 80096c0:	2000035c 	.word	0x2000035c

080096c4 <__ascii_wctomb>:
 80096c4:	b149      	cbz	r1, 80096da <__ascii_wctomb+0x16>
 80096c6:	2aff      	cmp	r2, #255	; 0xff
 80096c8:	bf8b      	itete	hi
 80096ca:	238a      	movhi	r3, #138	; 0x8a
 80096cc:	700a      	strbls	r2, [r1, #0]
 80096ce:	6003      	strhi	r3, [r0, #0]
 80096d0:	2001      	movls	r0, #1
 80096d2:	bf88      	it	hi
 80096d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80096d8:	4770      	bx	lr
 80096da:	4608      	mov	r0, r1
 80096dc:	4770      	bx	lr
	...

080096e0 <logf>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	b08a      	sub	sp, #40	; 0x28
 80096e4:	4604      	mov	r4, r0
 80096e6:	f000 f86d 	bl	80097c4 <__ieee754_logf>
 80096ea:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <logf+0xd0>)
 80096ec:	4606      	mov	r6, r0
 80096ee:	f993 5000 	ldrsb.w	r5, [r3]
 80096f2:	1c6b      	adds	r3, r5, #1
 80096f4:	d059      	beq.n	80097aa <logf+0xca>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4620      	mov	r0, r4
 80096fa:	f7f7 fd55 	bl	80011a8 <__aeabi_fcmpun>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d153      	bne.n	80097aa <logf+0xca>
 8009702:	2100      	movs	r1, #0
 8009704:	4620      	mov	r0, r4
 8009706:	f7f7 fd45 	bl	8001194 <__aeabi_fcmpgt>
 800970a:	2800      	cmp	r0, #0
 800970c:	d14d      	bne.n	80097aa <logf+0xca>
 800970e:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <logf+0xd4>)
 8009710:	9008      	str	r0, [sp, #32]
 8009712:	4620      	mov	r0, r4
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	f7f6 fef3 	bl	8000500 <__aeabi_f2d>
 800971a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800971e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009722:	b995      	cbnz	r5, 800974a <logf+0x6a>
 8009724:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009728:	4b23      	ldr	r3, [pc, #140]	; (80097b8 <logf+0xd8>)
 800972a:	2100      	movs	r1, #0
 800972c:	4620      	mov	r0, r4
 800972e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009732:	f7f7 fd07 	bl	8001144 <__aeabi_fcmpeq>
 8009736:	bb30      	cbnz	r0, 8009786 <logf+0xa6>
 8009738:	2301      	movs	r3, #1
 800973a:	2d02      	cmp	r5, #2
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	d117      	bne.n	8009770 <logf+0x90>
 8009740:	f7fd fbc8 	bl	8006ed4 <__errno>
 8009744:	2321      	movs	r3, #33	; 0x21
 8009746:	6003      	str	r3, [r0, #0]
 8009748:	e017      	b.n	800977a <logf+0x9a>
 800974a:	2200      	movs	r2, #0
 800974c:	4b1b      	ldr	r3, [pc, #108]	; (80097bc <logf+0xdc>)
 800974e:	2100      	movs	r1, #0
 8009750:	4620      	mov	r0, r4
 8009752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009756:	f7f7 fcf5 	bl	8001144 <__aeabi_fcmpeq>
 800975a:	2800      	cmp	r0, #0
 800975c:	d0ec      	beq.n	8009738 <logf+0x58>
 800975e:	2302      	movs	r3, #2
 8009760:	429d      	cmp	r5, r3
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	d111      	bne.n	800978a <logf+0xaa>
 8009766:	f7fd fbb5 	bl	8006ed4 <__errno>
 800976a:	2322      	movs	r3, #34	; 0x22
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	e011      	b.n	8009794 <logf+0xb4>
 8009770:	4668      	mov	r0, sp
 8009772:	f000 f94b 	bl	8009a0c <matherr>
 8009776:	2800      	cmp	r0, #0
 8009778:	d0e2      	beq.n	8009740 <logf+0x60>
 800977a:	4811      	ldr	r0, [pc, #68]	; (80097c0 <logf+0xe0>)
 800977c:	f000 f948 	bl	8009a10 <nan>
 8009780:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009784:	e006      	b.n	8009794 <logf+0xb4>
 8009786:	2302      	movs	r3, #2
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4668      	mov	r0, sp
 800978c:	f000 f93e 	bl	8009a0c <matherr>
 8009790:	2800      	cmp	r0, #0
 8009792:	d0e8      	beq.n	8009766 <logf+0x86>
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	b11b      	cbz	r3, 80097a0 <logf+0xc0>
 8009798:	f7fd fb9c 	bl	8006ed4 <__errno>
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	6003      	str	r3, [r0, #0]
 80097a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097a4:	f7f7 f9dc 	bl	8000b60 <__aeabi_d2f>
 80097a8:	4606      	mov	r6, r0
 80097aa:	4630      	mov	r0, r6
 80097ac:	b00a      	add	sp, #40	; 0x28
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	200001ec 	.word	0x200001ec
 80097b4:	0800a120 	.word	0x0800a120
 80097b8:	c7efffff 	.word	0xc7efffff
 80097bc:	fff00000 	.word	0xfff00000
 80097c0:	0800a009 	.word	0x0800a009

080097c4 <__ieee754_logf>:
 80097c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80097cc:	4601      	mov	r1, r0
 80097ce:	4604      	mov	r4, r0
 80097d0:	d106      	bne.n	80097e0 <__ieee754_logf+0x1c>
 80097d2:	2100      	movs	r1, #0
 80097d4:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 80097d8:	f7f7 fbd4 	bl	8000f84 <__aeabi_fdiv>
 80097dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	2800      	cmp	r0, #0
 80097e2:	da03      	bge.n	80097ec <__ieee754_logf+0x28>
 80097e4:	f7f7 fa10 	bl	8000c08 <__aeabi_fsub>
 80097e8:	2100      	movs	r1, #0
 80097ea:	e7f5      	b.n	80097d8 <__ieee754_logf+0x14>
 80097ec:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80097f0:	db02      	blt.n	80097f8 <__ieee754_logf+0x34>
 80097f2:	f7f7 fa0b 	bl	8000c0c <__addsf3>
 80097f6:	e7f1      	b.n	80097dc <__ieee754_logf+0x18>
 80097f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80097fc:	da36      	bge.n	800986c <__ieee754_logf+0xa8>
 80097fe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009802:	f7f7 fb0b 	bl	8000e1c <__aeabi_fmul>
 8009806:	f06f 0218 	mvn.w	r2, #24
 800980a:	4604      	mov	r4, r0
 800980c:	4b73      	ldr	r3, [pc, #460]	; (80099dc <__ieee754_logf+0x218>)
 800980e:	15e6      	asrs	r6, r4, #23
 8009810:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009814:	3e7f      	subs	r6, #127	; 0x7f
 8009816:	4423      	add	r3, r4
 8009818:	4416      	add	r6, r2
 800981a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800981e:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8009822:	f083 537e 	eor.w	r3, r3, #1065353216	; 0x3f800000
 8009826:	ea43 0004 	orr.w	r0, r3, r4
 800982a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800982e:	f7f7 f9eb 	bl	8000c08 <__aeabi_fsub>
 8009832:	f104 030f 	add.w	r3, r4, #15
 8009836:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800983a:	2b0f      	cmp	r3, #15
 800983c:	4605      	mov	r5, r0
 800983e:	dc3a      	bgt.n	80098b6 <__ieee754_logf+0xf2>
 8009840:	2100      	movs	r1, #0
 8009842:	f7f7 fc7f 	bl	8001144 <__aeabi_fcmpeq>
 8009846:	b198      	cbz	r0, 8009870 <__ieee754_logf+0xac>
 8009848:	2e00      	cmp	r6, #0
 800984a:	f000 80c4 	beq.w	80099d6 <__ieee754_logf+0x212>
 800984e:	4630      	mov	r0, r6
 8009850:	f7f7 fa90 	bl	8000d74 <__aeabi_i2f>
 8009854:	4962      	ldr	r1, [pc, #392]	; (80099e0 <__ieee754_logf+0x21c>)
 8009856:	4605      	mov	r5, r0
 8009858:	f7f7 fae0 	bl	8000e1c <__aeabi_fmul>
 800985c:	4961      	ldr	r1, [pc, #388]	; (80099e4 <__ieee754_logf+0x220>)
 800985e:	4604      	mov	r4, r0
 8009860:	4628      	mov	r0, r5
 8009862:	f7f7 fadb 	bl	8000e1c <__aeabi_fmul>
 8009866:	4601      	mov	r1, r0
 8009868:	4620      	mov	r0, r4
 800986a:	e7c2      	b.n	80097f2 <__ieee754_logf+0x2e>
 800986c:	2200      	movs	r2, #0
 800986e:	e7cd      	b.n	800980c <__ieee754_logf+0x48>
 8009870:	495d      	ldr	r1, [pc, #372]	; (80099e8 <__ieee754_logf+0x224>)
 8009872:	4628      	mov	r0, r5
 8009874:	f7f7 fad2 	bl	8000e1c <__aeabi_fmul>
 8009878:	4601      	mov	r1, r0
 800987a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800987e:	f7f7 f9c3 	bl	8000c08 <__aeabi_fsub>
 8009882:	4629      	mov	r1, r5
 8009884:	4604      	mov	r4, r0
 8009886:	4628      	mov	r0, r5
 8009888:	f7f7 fac8 	bl	8000e1c <__aeabi_fmul>
 800988c:	4601      	mov	r1, r0
 800988e:	4620      	mov	r0, r4
 8009890:	f7f7 fac4 	bl	8000e1c <__aeabi_fmul>
 8009894:	4604      	mov	r4, r0
 8009896:	b90e      	cbnz	r6, 800989c <__ieee754_logf+0xd8>
 8009898:	4621      	mov	r1, r4
 800989a:	e06f      	b.n	800997c <__ieee754_logf+0x1b8>
 800989c:	4630      	mov	r0, r6
 800989e:	f7f7 fa69 	bl	8000d74 <__aeabi_i2f>
 80098a2:	494f      	ldr	r1, [pc, #316]	; (80099e0 <__ieee754_logf+0x21c>)
 80098a4:	4607      	mov	r7, r0
 80098a6:	f7f7 fab9 	bl	8000e1c <__aeabi_fmul>
 80098aa:	4606      	mov	r6, r0
 80098ac:	4638      	mov	r0, r7
 80098ae:	494d      	ldr	r1, [pc, #308]	; (80099e4 <__ieee754_logf+0x220>)
 80098b0:	f7f7 fab4 	bl	8000e1c <__aeabi_fmul>
 80098b4:	e072      	b.n	800999c <__ieee754_logf+0x1d8>
 80098b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80098ba:	f7f7 f9a7 	bl	8000c0c <__addsf3>
 80098be:	4601      	mov	r1, r0
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7f7 fb5f 	bl	8000f84 <__aeabi_fdiv>
 80098c6:	4681      	mov	r9, r0
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7f7 fa53 	bl	8000d74 <__aeabi_i2f>
 80098ce:	4649      	mov	r1, r9
 80098d0:	4680      	mov	r8, r0
 80098d2:	4648      	mov	r0, r9
 80098d4:	f7f7 faa2 	bl	8000e1c <__aeabi_fmul>
 80098d8:	4601      	mov	r1, r0
 80098da:	4683      	mov	fp, r0
 80098dc:	f7f7 fa9e 	bl	8000e1c <__aeabi_fmul>
 80098e0:	4607      	mov	r7, r0
 80098e2:	4942      	ldr	r1, [pc, #264]	; (80099ec <__ieee754_logf+0x228>)
 80098e4:	f7f7 fa9a 	bl	8000e1c <__aeabi_fmul>
 80098e8:	4941      	ldr	r1, [pc, #260]	; (80099f0 <__ieee754_logf+0x22c>)
 80098ea:	f7f7 f98f 	bl	8000c0c <__addsf3>
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f7 fa94 	bl	8000e1c <__aeabi_fmul>
 80098f4:	493f      	ldr	r1, [pc, #252]	; (80099f4 <__ieee754_logf+0x230>)
 80098f6:	f7f7 f989 	bl	8000c0c <__addsf3>
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f7 fa8e 	bl	8000e1c <__aeabi_fmul>
 8009900:	493d      	ldr	r1, [pc, #244]	; (80099f8 <__ieee754_logf+0x234>)
 8009902:	f7f7 f983 	bl	8000c0c <__addsf3>
 8009906:	4659      	mov	r1, fp
 8009908:	f7f7 fa88 	bl	8000e1c <__aeabi_fmul>
 800990c:	493b      	ldr	r1, [pc, #236]	; (80099fc <__ieee754_logf+0x238>)
 800990e:	4683      	mov	fp, r0
 8009910:	4638      	mov	r0, r7
 8009912:	f7f7 fa83 	bl	8000e1c <__aeabi_fmul>
 8009916:	493a      	ldr	r1, [pc, #232]	; (8009a00 <__ieee754_logf+0x23c>)
 8009918:	f7f7 f978 	bl	8000c0c <__addsf3>
 800991c:	4639      	mov	r1, r7
 800991e:	f7f7 fa7d 	bl	8000e1c <__aeabi_fmul>
 8009922:	4938      	ldr	r1, [pc, #224]	; (8009a04 <__ieee754_logf+0x240>)
 8009924:	f7f7 f972 	bl	8000c0c <__addsf3>
 8009928:	4639      	mov	r1, r7
 800992a:	f7f7 fa77 	bl	8000e1c <__aeabi_fmul>
 800992e:	4601      	mov	r1, r0
 8009930:	4658      	mov	r0, fp
 8009932:	f7f7 f96b 	bl	8000c0c <__addsf3>
 8009936:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8009a08 <__ieee754_logf+0x244>
 800993a:	4607      	mov	r7, r0
 800993c:	f5c4 1057 	rsb	r0, r4, #3522560	; 0x35c000
 8009940:	44a2      	add	sl, r4
 8009942:	f500 7022 	add.w	r0, r0, #648	; 0x288
 8009946:	ea40 000a 	orr.w	r0, r0, sl
 800994a:	2800      	cmp	r0, #0
 800994c:	dd30      	ble.n	80099b0 <__ieee754_logf+0x1ec>
 800994e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009952:	4628      	mov	r0, r5
 8009954:	f7f7 fa62 	bl	8000e1c <__aeabi_fmul>
 8009958:	4629      	mov	r1, r5
 800995a:	f7f7 fa5f 	bl	8000e1c <__aeabi_fmul>
 800995e:	4601      	mov	r1, r0
 8009960:	4604      	mov	r4, r0
 8009962:	4638      	mov	r0, r7
 8009964:	f7f7 f952 	bl	8000c0c <__addsf3>
 8009968:	4649      	mov	r1, r9
 800996a:	f7f7 fa57 	bl	8000e1c <__aeabi_fmul>
 800996e:	4607      	mov	r7, r0
 8009970:	b946      	cbnz	r6, 8009984 <__ieee754_logf+0x1c0>
 8009972:	4601      	mov	r1, r0
 8009974:	4620      	mov	r0, r4
 8009976:	f7f7 f947 	bl	8000c08 <__aeabi_fsub>
 800997a:	4601      	mov	r1, r0
 800997c:	4628      	mov	r0, r5
 800997e:	f7f7 f943 	bl	8000c08 <__aeabi_fsub>
 8009982:	e72b      	b.n	80097dc <__ieee754_logf+0x18>
 8009984:	4916      	ldr	r1, [pc, #88]	; (80099e0 <__ieee754_logf+0x21c>)
 8009986:	4640      	mov	r0, r8
 8009988:	f7f7 fa48 	bl	8000e1c <__aeabi_fmul>
 800998c:	4915      	ldr	r1, [pc, #84]	; (80099e4 <__ieee754_logf+0x220>)
 800998e:	4606      	mov	r6, r0
 8009990:	4640      	mov	r0, r8
 8009992:	f7f7 fa43 	bl	8000e1c <__aeabi_fmul>
 8009996:	4639      	mov	r1, r7
 8009998:	f7f7 f938 	bl	8000c0c <__addsf3>
 800999c:	4601      	mov	r1, r0
 800999e:	4620      	mov	r0, r4
 80099a0:	f7f7 f932 	bl	8000c08 <__aeabi_fsub>
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f7 f92f 	bl	8000c08 <__aeabi_fsub>
 80099aa:	4601      	mov	r1, r0
 80099ac:	4630      	mov	r0, r6
 80099ae:	e7e6      	b.n	800997e <__ieee754_logf+0x1ba>
 80099b0:	4639      	mov	r1, r7
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7f7 f928 	bl	8000c08 <__aeabi_fsub>
 80099b8:	4649      	mov	r1, r9
 80099ba:	f7f7 fa2f 	bl	8000e1c <__aeabi_fmul>
 80099be:	4604      	mov	r4, r0
 80099c0:	2e00      	cmp	r6, #0
 80099c2:	f43f af69 	beq.w	8009898 <__ieee754_logf+0xd4>
 80099c6:	4906      	ldr	r1, [pc, #24]	; (80099e0 <__ieee754_logf+0x21c>)
 80099c8:	4640      	mov	r0, r8
 80099ca:	f7f7 fa27 	bl	8000e1c <__aeabi_fmul>
 80099ce:	4905      	ldr	r1, [pc, #20]	; (80099e4 <__ieee754_logf+0x220>)
 80099d0:	4606      	mov	r6, r0
 80099d2:	4640      	mov	r0, r8
 80099d4:	e76c      	b.n	80098b0 <__ieee754_logf+0xec>
 80099d6:	2000      	movs	r0, #0
 80099d8:	e700      	b.n	80097dc <__ieee754_logf+0x18>
 80099da:	bf00      	nop
 80099dc:	004afb20 	.word	0x004afb20
 80099e0:	3f317180 	.word	0x3f317180
 80099e4:	3717f7d1 	.word	0x3717f7d1
 80099e8:	3eaaaaab 	.word	0x3eaaaaab
 80099ec:	3e178897 	.word	0x3e178897
 80099f0:	3e3a3325 	.word	0x3e3a3325
 80099f4:	3e924925 	.word	0x3e924925
 80099f8:	3f2aaaab 	.word	0x3f2aaaab
 80099fc:	3e1cd04f 	.word	0x3e1cd04f
 8009a00:	3e638e29 	.word	0x3e638e29
 8009a04:	3ecccccd 	.word	0x3ecccccd
 8009a08:	ffcf5c30 	.word	0xffcf5c30

08009a0c <matherr>:
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	4770      	bx	lr

08009a10 <nan>:
 8009a10:	2000      	movs	r0, #0
 8009a12:	4901      	ldr	r1, [pc, #4]	; (8009a18 <nan+0x8>)
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	7ff80000 	.word	0x7ff80000

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
