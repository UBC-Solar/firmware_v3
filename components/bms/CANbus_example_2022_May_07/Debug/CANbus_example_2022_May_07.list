
CANbus_example_2022_May_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003328  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003458  08003458  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003458  08003458  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003458  08003458  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000030  08003490  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003490  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed9  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a68  00000000  00000000  00027f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729a  00000000  00000000  0002a8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091de  00000000  00000000  00041b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008564d  00000000  00000000  0004ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d036d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002294  00000000  00000000  000d03c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	08003420 	.word	0x08003420

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	08003420 	.word	0x08003420

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2uiz>:
 8000bb4:	004a      	lsls	r2, r1, #1
 8000bb6:	d211      	bcs.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bbc:	d211      	bcs.n	8000be2 <__aeabi_d2uiz+0x2e>
 8000bbe:	d50d      	bpl.n	8000bdc <__aeabi_d2uiz+0x28>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d40e      	bmi.n	8000be8 <__aeabi_d2uiz+0x34>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d102      	bne.n	8000bee <__aeabi_d2uiz+0x3a>
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_d2f>:
 8000bf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bfc:	bf24      	itt	cs
 8000bfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c06:	d90d      	bls.n	8000c24 <__aeabi_d2f+0x30>
 8000c08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c28:	d121      	bne.n	8000c6e <__aeabi_d2f+0x7a>
 8000c2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2e:	bfbc      	itt	lt
 8000c30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	4770      	bxlt	lr
 8000c36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3e:	f1c2 0218 	rsb	r2, r2, #24
 8000c42:	f1c2 0c20 	rsb	ip, r2, #32
 8000c46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4e:	bf18      	it	ne
 8000c50:	f040 0001 	orrne.w	r0, r0, #1
 8000c54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c60:	ea40 000c 	orr.w	r0, r0, ip
 8000c64:	fa23 f302 	lsr.w	r3, r3, r2
 8000c68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c6c:	e7cc      	b.n	8000c08 <__aeabi_d2f+0x14>
 8000c6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c72:	d107      	bne.n	8000c84 <__aeabi_d2f+0x90>
 8000c74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c78:	bf1e      	ittt	ne
 8000c7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c82:	4770      	bxne	lr
 8000c84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <__aeabi_frsub>:
 8000c94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	e002      	b.n	8000ca0 <__addsf3>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fsub>:
 8000c9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca0 <__addsf3>:
 8000ca0:	0042      	lsls	r2, r0, #1
 8000ca2:	bf1f      	itttt	ne
 8000ca4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca8:	ea92 0f03 	teqne	r2, r3
 8000cac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb4:	d06a      	beq.n	8000d8c <__addsf3+0xec>
 8000cb6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cbe:	bfc1      	itttt	gt
 8000cc0:	18d2      	addgt	r2, r2, r3
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	4048      	eorgt	r0, r1
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	bfb8      	it	lt
 8000cca:	425b      	neglt	r3, r3
 8000ccc:	2b19      	cmp	r3, #25
 8000cce:	bf88      	it	hi
 8000cd0:	4770      	bxhi	lr
 8000cd2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cde:	bf18      	it	ne
 8000ce0:	4240      	negne	r0, r0
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4249      	negne	r1, r1
 8000cf2:	ea92 0f03 	teq	r2, r3
 8000cf6:	d03f      	beq.n	8000d78 <__addsf3+0xd8>
 8000cf8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cfc:	fa41 fc03 	asr.w	ip, r1, r3
 8000d00:	eb10 000c 	adds.w	r0, r0, ip
 8000d04:	f1c3 0320 	rsb	r3, r3, #32
 8000d08:	fa01 f103 	lsl.w	r1, r1, r3
 8000d0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__addsf3+0x78>
 8000d12:	4249      	negs	r1, r1
 8000d14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d1c:	d313      	bcc.n	8000d46 <__addsf3+0xa6>
 8000d1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d22:	d306      	bcc.n	8000d32 <__addsf3+0x92>
 8000d24:	0840      	lsrs	r0, r0, #1
 8000d26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2a:	f102 0201 	add.w	r2, r2, #1
 8000d2e:	2afe      	cmp	r2, #254	; 0xfe
 8000d30:	d251      	bcs.n	8000dd6 <__addsf3+0x136>
 8000d32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3a:	bf08      	it	eq
 8000d3c:	f020 0001 	biceq.w	r0, r0, #1
 8000d40:	ea40 0003 	orr.w	r0, r0, r3
 8000d44:	4770      	bx	lr
 8000d46:	0049      	lsls	r1, r1, #1
 8000d48:	eb40 0000 	adc.w	r0, r0, r0
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d54:	d2ed      	bcs.n	8000d32 <__addsf3+0x92>
 8000d56:	fab0 fc80 	clz	ip, r0
 8000d5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d66:	bfaa      	itet	ge
 8000d68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d6c:	4252      	neglt	r2, r2
 8000d6e:	4318      	orrge	r0, r3
 8000d70:	bfbc      	itt	lt
 8000d72:	40d0      	lsrlt	r0, r2
 8000d74:	4318      	orrlt	r0, r3
 8000d76:	4770      	bx	lr
 8000d78:	f092 0f00 	teq	r2, #0
 8000d7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d80:	bf06      	itte	eq
 8000d82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d86:	3201      	addeq	r2, #1
 8000d88:	3b01      	subne	r3, #1
 8000d8a:	e7b5      	b.n	8000cf8 <__addsf3+0x58>
 8000d8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d94:	bf18      	it	ne
 8000d96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9a:	d021      	beq.n	8000de0 <__addsf3+0x140>
 8000d9c:	ea92 0f03 	teq	r2, r3
 8000da0:	d004      	beq.n	8000dac <__addsf3+0x10c>
 8000da2:	f092 0f00 	teq	r2, #0
 8000da6:	bf08      	it	eq
 8000da8:	4608      	moveq	r0, r1
 8000daa:	4770      	bx	lr
 8000dac:	ea90 0f01 	teq	r0, r1
 8000db0:	bf1c      	itt	ne
 8000db2:	2000      	movne	r0, #0
 8000db4:	4770      	bxne	lr
 8000db6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dba:	d104      	bne.n	8000dc6 <__addsf3+0x126>
 8000dbc:	0040      	lsls	r0, r0, #1
 8000dbe:	bf28      	it	cs
 8000dc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	4770      	bx	lr
 8000dc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dca:	bf3c      	itt	cc
 8000dcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd0:	4770      	bxcc	lr
 8000dd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dde:	4770      	bx	lr
 8000de0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de4:	bf16      	itet	ne
 8000de6:	4608      	movne	r0, r1
 8000de8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dec:	4601      	movne	r1, r0
 8000dee:	0242      	lsls	r2, r0, #9
 8000df0:	bf06      	itte	eq
 8000df2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df6:	ea90 0f01 	teqeq	r0, r1
 8000dfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfe:	4770      	bx	lr

08000e00 <__aeabi_ui2f>:
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e004      	b.n	8000e10 <__aeabi_i2f+0x8>
 8000e06:	bf00      	nop

08000e08 <__aeabi_i2f>:
 8000e08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e0c:	bf48      	it	mi
 8000e0e:	4240      	negmi	r0, r0
 8000e10:	ea5f 0c00 	movs.w	ip, r0
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	e01c      	b.n	8000e5e <__aeabi_l2f+0x2a>

08000e24 <__aeabi_ul2f>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e00a      	b.n	8000e48 <__aeabi_l2f+0x14>
 8000e32:	bf00      	nop

08000e34 <__aeabi_l2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	d502      	bpl.n	8000e48 <__aeabi_l2f+0x14>
 8000e42:	4240      	negs	r0, r0
 8000e44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e48:	ea5f 0c01 	movs.w	ip, r1
 8000e4c:	bf02      	ittt	eq
 8000e4e:	4684      	moveq	ip, r0
 8000e50:	4601      	moveq	r1, r0
 8000e52:	2000      	moveq	r0, #0
 8000e54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e58:	bf08      	it	eq
 8000e5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e62:	fabc f28c 	clz	r2, ip
 8000e66:	3a08      	subs	r2, #8
 8000e68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e6c:	db10      	blt.n	8000e90 <__aeabi_l2f+0x5c>
 8000e6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e72:	4463      	add	r3, ip
 8000e74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e78:	f1c2 0220 	rsb	r2, r2, #32
 8000e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e80:	fa20 f202 	lsr.w	r2, r0, r2
 8000e84:	eb43 0002 	adc.w	r0, r3, r2
 8000e88:	bf08      	it	eq
 8000e8a:	f020 0001 	biceq.w	r0, r0, #1
 8000e8e:	4770      	bx	lr
 8000e90:	f102 0220 	add.w	r2, r2, #32
 8000e94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e98:	f1c2 0220 	rsb	r2, r2, #32
 8000e9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea4:	eb43 0002 	adc.w	r0, r3, r2
 8000ea8:	bf08      	it	eq
 8000eaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eae:	4770      	bx	lr

08000eb0 <__gesf2>:
 8000eb0:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb4:	e006      	b.n	8000ec4 <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__lesf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	e002      	b.n	8000ec4 <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__cmpsf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed4:	bf18      	it	ne
 8000ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eda:	d011      	beq.n	8000f00 <__cmpsf2+0x40>
 8000edc:	b001      	add	sp, #4
 8000ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ee2:	bf18      	it	ne
 8000ee4:	ea90 0f01 	teqne	r0, r1
 8000ee8:	bf58      	it	pl
 8000eea:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eee:	bf88      	it	hi
 8000ef0:	17c8      	asrhi	r0, r1, #31
 8000ef2:	bf38      	it	cc
 8000ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef8:	bf18      	it	ne
 8000efa:	f040 0001 	orrne.w	r0, r0, #1
 8000efe:	4770      	bx	lr
 8000f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f04:	d102      	bne.n	8000f0c <__cmpsf2+0x4c>
 8000f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f0a:	d105      	bne.n	8000f18 <__cmpsf2+0x58>
 8000f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f10:	d1e4      	bne.n	8000edc <__cmpsf2+0x1c>
 8000f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f16:	d0e1      	beq.n	8000edc <__cmpsf2+0x1c>
 8000f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__aeabi_cfrcmple>:
 8000f20:	4684      	mov	ip, r0
 8000f22:	4608      	mov	r0, r1
 8000f24:	4661      	mov	r1, ip
 8000f26:	e7ff      	b.n	8000f28 <__aeabi_cfcmpeq>

08000f28 <__aeabi_cfcmpeq>:
 8000f28:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__cmpsf2>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	bf48      	it	mi
 8000f32:	f110 0f00 	cmnmi.w	r0, #0
 8000f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f38 <__aeabi_fcmpeq>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff fff4 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f40:	bf0c      	ite	eq
 8000f42:	2001      	moveq	r0, #1
 8000f44:	2000      	movne	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmplt>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffea 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f54:	bf34      	ite	cc
 8000f56:	2001      	movcc	r0, #1
 8000f58:	2000      	movcs	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmple>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffe0 	bl	8000f28 <__aeabi_cfcmpeq>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpge>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffd2 	bl	8000f20 <__aeabi_cfrcmple>
 8000f7c:	bf94      	ite	ls
 8000f7e:	2001      	movls	r0, #1
 8000f80:	2000      	movhi	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmpgt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffc8 	bl	8000f20 <__aeabi_cfrcmple>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_f2uiz>:
 8000f9c:	0042      	lsls	r2, r0, #1
 8000f9e:	d20e      	bcs.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa4:	d30b      	bcc.n	8000fbe <__aeabi_f2uiz+0x22>
 8000fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fae:	d409      	bmi.n	8000fc4 <__aeabi_f2uiz+0x28>
 8000fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2uiz+0x32>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d102      	bne.n	8000fd4 <__aeabi_f2uiz+0x38>
 8000fce:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd2:	4770      	bx	lr
 8000fd4:	f04f 0000 	mov.w	r0, #0
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <BLINKY_bluepill>:
 *  Input:
 *      uint32_t time1 - time of light on in milliseconds
 *      uint32_t time2 - time in light off in milliseconds
 */
void BLINKY_bluepill(uint32_t time1, uint32_t time2)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <BLINKY_bluepill+0x38>)
 8000fee:	f001 fd1f 	bl	8002a30 <HAL_GPIO_WritePin>
    HAL_Delay(time1); //different delays to test which of GPIO_PIN_RESET and SET turns on or off the LED.
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f001 f886 	bl	8002104 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <BLINKY_bluepill+0x38>)
 8001000:	f001 fd16 	bl	8002a30 <HAL_GPIO_WritePin>
    HAL_Delay(time2);
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f001 f87d 	bl	8002104 <HAL_Delay>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40011000 	.word	0x40011000

08001018 <CANstate_InitAll>:
*    This function handles the creation and organisation
*    of message structures preinitialised as global static
*    variables, arrays, and structs.
*/
extern Brightside_CAN_MessageSeries* CANstate_InitAll(CAN_HandleTypeDef * hcan)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    //initialize handles from cubeMX
	Brightside_CAN_handle = hcan;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <CANstate_InitAll+0x30>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]

	//Initialize static variables
    STATIC_lastInterval = 0;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <CANstate_InitAll+0x34>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
    STATIC_lastSubInterval = 0;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <CANstate_InitAll+0x38>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    //STATIC_messageArrays = 0;

    //initialize message series structures
    CAN_InitMessageSeries_Dynamic(
 8001032:	2304      	movs	r3, #4
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <CANstate_InitAll+0x3c>)
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <CANstate_InitAll+0x40>)
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <CANstate_InitAll+0x44>)
 800103a:	f000 f855 	bl	80010e8 <CAN_InitMessageSeries_Dynamic>
        &STATIC_ElithionSeries,
        STATIC_messagesWiseContent,
        STATIC_messageArrays,
        CAN_ELITHION_MESSAGE_SERIES_SIZE);

    return &STATIC_ElithionSeries;
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <CANstate_InitAll+0x44>)
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000004c 	.word	0x2000004c
 800104c:	20000054 	.word	0x20000054
 8001050:	20000058 	.word	0x20000058
 8001054:	200000e8 	.word	0x200000e8
 8001058:	20000068 	.word	0x20000068
 800105c:	2000005c 	.word	0x2000005c

08001060 <CAN_InitHeaderStruct>:
@note
    Currently, this function is meant for specific messages with CAN IDs of 622,623,626, and 627.
    This is a lazy bandaid feature and should be moved to a new function if more message series are added.
*/
void CAN_InitHeaderStruct(Brightside_CAN_Message * CANmessageWiseContent, int messageSeriesSize)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    Brightside_CAN_Message* elementAddress = CANmessageWiseContent;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]
    for(int i=0 ; i < messageSeriesSize ; ++i)
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	e01a      	b.n	80010aa <CAN_InitHeaderStruct+0x4a>
    {
        elementAddress -> header.StdId = CAN_INITIAL_ELITHION_SERIES_ADDRESS + i;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]
        elementAddress -> header.ExtId = CAN_UNUSED_EXT_ID;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <CAN_InitHeaderStruct+0x84>)
 8001084:	605a      	str	r2, [r3, #4]
        elementAddress -> header.IDE   = CAN_ID_STD;   //Predefined constant in stm32 include file.
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
        elementAddress -> header.RTR   = CAN_RTR_DATA; //Predefined constant in stm32 include file.
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
        elementAddress -> header.DLC   = CAN_BRIGHTSIDE_DATA_LENGTH;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2208      	movs	r2, #8
 8001096:	611a      	str	r2, [r3, #16]
        elementAddress -> header.TransmitGlobalTime = DISABLE;//We could use this eventually, if we use a custom message format
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	751a      	strb	r2, [r3, #20]

        ++elementAddress;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3320      	adds	r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
    for(int i=0 ; i < messageSeriesSize ; ++i)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbe0      	blt.n	8001074 <CAN_InitHeaderStruct+0x14>
    }

    //separate assignments for setting unique, non-consecutive addresses.
    (CANmessageWiseContent + 0) -> header.StdId = ADDRESS_622;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f240 226e 	movw	r2, #622	; 0x26e
 80010b8:	601a      	str	r2, [r3, #0]
    (CANmessageWiseContent + 1) -> header.StdId = ADDRESS_623;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3320      	adds	r3, #32
 80010be:	f240 226f 	movw	r2, #623	; 0x26f
 80010c2:	601a      	str	r2, [r3, #0]
    (CANmessageWiseContent + 2) -> header.StdId = ADDRESS_626;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3340      	adds	r3, #64	; 0x40
 80010c8:	f240 2272 	movw	r2, #626	; 0x272
 80010cc:	601a      	str	r2, [r3, #0]
    (CANmessageWiseContent + 3) -> header.StdId = ADDRESS_627;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3360      	adds	r3, #96	; 0x60
 80010d2:	f240 2273 	movw	r2, #627	; 0x273
 80010d6:	601a      	str	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	0deadbee 	.word	0x0deadbee

080010e8 <CAN_InitMessageSeries_Dynamic>:
void CAN_InitMessageSeries_Dynamic(
        Brightside_CAN_MessageSeries * seriesStruct,
        Brightside_CAN_Message * messageWiseContent,
        uint8_t messageArrays[CAN_ELITHION_MESSAGE_SERIES_SIZE][CAN_BRIGHTSIDE_DATA_LENGTH],
        int messageSeriesSize)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]

    CAN_InitHeaderStruct(messageWiseContent, messageSeriesSize);
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	68b8      	ldr	r0, [r7, #8]
 80010fa:	f7ff ffb1 	bl	8001060 <CAN_InitHeaderStruct>

    //intended function: assign to the Message struct the first address of the 2nd dimension of the message array
    for (int series_i = 0; series_i < messageSeriesSize; ++series_i)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e00b      	b.n	800111c <CAN_InitMessageSeries_Dynamic+0x34>
    {
    	//reminder: only giving the first dimension effectively passes the first address
    	//of a 1D array that contains the 2nd dimension's data.
        messageWiseContent[series_i].dataFrame = messageArrays[series_i];
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	00da      	lsls	r2, r3, #3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	015b      	lsls	r3, r3, #5
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	440b      	add	r3, r1
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	440a      	add	r2, r1
 8001114:	619a      	str	r2, [r3, #24]
    for (int series_i = 0; series_i < messageSeriesSize; ++series_i)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbef      	blt.n	8001104 <CAN_InitMessageSeries_Dynamic+0x1c>
    }

    seriesStruct->message = messageWiseContent;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	601a      	str	r2, [r3, #0]
    seriesStruct->runningIndex = 0;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
    seriesStruct->messageSeriesSize = messageSeriesSize;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	609a      	str	r2, [r3, #8]

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <CANstate>:
        - this function used to be called "CANstate_EntryCheck"
*/


extern HAL_StatusTypeDef CANstate(Brightside_CAN_MessageSeries * pSeries)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    uint32_t
        tickValue = HAL_GetTick(),
 8001148:	f000 ffd2 	bl	80020f0 <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]
        tickDelta,
        tickSubDelta;
    HAL_StatusTypeDef
        status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	72fb      	strb	r3, [r7, #11]

    //gets the absolute difference between tickValue and lastInterval
    //avoids counter reset edge-case
    if(tickValue >= STATIC_lastInterval)
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <CANstate+0xd8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d305      	bcc.n	8001168 <CANstate+0x28>
    {
        tickDelta = tickValue - STATIC_lastInterval;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <CANstate+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	e007      	b.n	8001178 <CANstate+0x38>
    }
    else //if(tickValue < lastInterval) //if overflow
    {
        tickDelta = PH_MAX_VALUE - STATIC_lastInterval + tickValue;
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <CANstate+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001174:	3b01      	subs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
    }

    //gets the absolute difference between tickValue and lastSubInterval
    if(tickValue >= STATIC_lastSubInterval)
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <CANstate+0xdc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	429a      	cmp	r2, r3
 8001180:	d305      	bcc.n	800118e <CANstate+0x4e>
    {
        tickSubDelta = tickValue - STATIC_lastSubInterval;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <CANstate+0xdc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	e007      	b.n	800119e <CANstate+0x5e>
    }
    else //if(tickValue < lastSubInterval)
    {
        tickSubDelta = PH_MAX_VALUE - STATIC_lastSubInterval + tickValue;
 800118e:	4b23      	ldr	r3, [pc, #140]	; (800121c <CANstate+0xdc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800119a:	3b01      	subs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
    }

    //check if called at 1.0s interval or greater
    //if so, run additional functions.
    if(tickDelta >= ONE_THOUSAND_MILLISECONDS)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a4:	d31c      	bcc.n	80011e0 <CANstate+0xa0>
    {
        //update lastInterval to be a multiple of 1.0s.
        STATIC_lastInterval = tickValue - (tickValue % ONE_THOUSAND_MILLISECONDS);
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <CANstate+0xe0>)
 80011aa:	fba3 1302 	umull	r1, r3, r3, r2
 80011ae:	099b      	lsrs	r3, r3, #6
 80011b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <CANstate+0xd8>)
 80011c0:	6013      	str	r3, [r2, #0]
        if(CANstate_staleCheck() != CAN_NOT_STALE)
 80011c2:	f000 f831 	bl	8001228 <CANstate_staleCheck>
        {
            //at this moment, there isn't anything special to do with stale messages
        }
        CANstate_compileAll(pSeries);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f840 	bl	800124c <CANstate_compileAll>
        CANstate_resetRequestQueue(pSeries);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f8c7 	bl	8001360 <CANstate_resetRequestQueue>
        status = CANstate_requestQueue(pSeries);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f86c 	bl	80012b0 <CANstate_requestQueue>
 80011d8:	4603      	mov	r3, r0
 80011da:	72fb      	strb	r3, [r7, #11]
        // if(status != HAL_OK)
        // {
        //     return status;
        // }
        // else
            return status;
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	e017      	b.n	8001210 <CANstate+0xd0>
    }

    else if(tickSubDelta < TWO_HUNDRED_MILLISECONDS)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2bc7      	cmp	r3, #199	; 0xc7
 80011e4:	d801      	bhi.n	80011ea <CANstate+0xaa>
    {
        return status;
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	e012      	b.n	8001210 <CANstate+0xd0>
    }

    else //if(tickSubDelta >= TWO_HUNDRED_MILLISECONDS)
    {
        //update lastSubInterval to be a multiple of 0.2s.
        STATIC_lastSubInterval = tickValue - (tickValue % TWO_HUNDRED_MILLISECONDS);
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <CANstate+0xe4>)
 80011ee:	fba3 1302 	umull	r1, r3, r3, r2
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	21c8      	movs	r1, #200	; 0xc8
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4a06      	ldr	r2, [pc, #24]	; (800121c <CANstate+0xdc>)
 8001202:	6013      	str	r3, [r2, #0]
        status = CANstate_requestQueue(pSeries);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f853 	bl	80012b0 <CANstate_requestQueue>
 800120a:	4603      	mov	r3, r0
 800120c:	72fb      	strb	r3, [r7, #11]
        // if(status != HAL_OK)
        // {
        //     return status;
        // }
        // else
            return status;
 800120e:	7afb      	ldrb	r3, [r7, #11]
    }
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000054 	.word	0x20000054
 800121c:	20000058 	.word	0x20000058
 8001220:	10624dd3 	.word	0x10624dd3
 8001224:	51eb851f 	.word	0x51eb851f

08001228 <CANstate_staleCheck>:

@returns    returns 1 if there is stale data
@returns    else, returns 0 if the mailboxes are empty, i.e. without stale data to send.
*/
uint8_t CANstate_staleCheck() //PH_ removed "static inline" to allow compilation. Consider adding keywords later or refactoring this function to be inline.
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    if(HAL_CAN_GetTxMailboxesFreeLevel(Brightside_CAN_handle) != 3)
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <CANstate_staleCheck+0x20>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f001 f960 	bl	80024f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b03      	cmp	r3, #3
 800123a:	d001      	beq.n	8001240 <CANstate_staleCheck+0x18>
    {
        return CAN_STALE;
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <CANstate_staleCheck+0x1a>
    }
    return CAN_NOT_STALE;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000004c 	.word	0x2000004c

0800124c <CANstate_compileAll>:
@note
Design Notes:
    Each CompileMessage() function call takes the message[].dataFrame element of the struct parameter.
*/
void CANstate_compileAll(Brightside_CAN_MessageSeries * pSeries)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    CAN_CompileMessage622(pSeries->message[0].dataFrame, CAN_PACKDATA_POINTER);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <CANstate_compileAll+0x60>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f889 	bl	8001378 <CAN_CompileMessage622>
    CAN_CompileMessage623(pSeries->message[1].dataFrame, CAN_PACKDATA_POINTER);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3320      	adds	r3, #32
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <CANstate_compileAll+0x60>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f8f7 	bl	8001468 <CAN_CompileMessage623>
    CAN_CompileMessage626(pSeries->message[2].dataFrame, CAN_PACKDATA_POINTER);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3340      	adds	r3, #64	; 0x40
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <CANstate_compileAll+0x60>)
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f9ab 	bl	80015e4 <CAN_CompileMessage626>
    CAN_CompileMessage627(pSeries->message[3].dataFrame, CAN_PACKDATA_POINTER);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3360      	adds	r3, #96	; 0x60
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <CANstate_compileAll+0x60>)
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f9b3 	bl	8001608 <CAN_CompileMessage627>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000050 	.word	0x20000050

080012b0 <CANstate_requestQueue>:
@par        Algorithm:

@note       Design Notes: This function should NOT reset the runningIndex.
*/
HAL_StatusTypeDef CANstate_requestQueue(Brightside_CAN_MessageSeries * pSeries)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

    //else

    HAL_StatusTypeDef
        status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
    uint8_t attempt = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73bb      	strb	r3, [r7, #14]

    int messageIndex = pSeries -> runningIndex;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
    if(messageIndex >= pSeries->messageSeriesSize)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	db2f      	blt.n	8001330 <CANstate_requestQueue+0x80>
    {
        return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e03e      	b.n	8001352 <CANstate_requestQueue+0xa2>
    {
#if CAN_ENABLE_REQUEST_QUEUE_REDUNDANCY == 1
        //attempt transmission at most three times
        do{
            status =
                HAL_CAN_AddTxMessage
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <CANstate_requestQueue+0xac>)
 80012d6:	6818      	ldr	r0, [r3, #0]
                    (
                    Brightside_CAN_handle,
                    &pSeries->message[messageIndex].header,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	015b      	lsls	r3, r3, #5
 80012e0:	4413      	add	r3, r2
                HAL_CAN_AddTxMessage
 80012e2:	461c      	mov	r4, r3
                    pSeries->message[messageIndex].dataFrame,//intent: pass the array using call by value.
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	015b      	lsls	r3, r3, #5
 80012ec:	4413      	add	r3, r2
                HAL_CAN_AddTxMessage
 80012ee:	6999      	ldr	r1, [r3, #24]
                    &pSeries->message[messageIndex].mailbox
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	4413      	add	r3, r2
                HAL_CAN_AddTxMessage
 80012fa:	331c      	adds	r3, #28
 80012fc:	460a      	mov	r2, r1
 80012fe:	4621      	mov	r1, r4
 8001300:	f001 f81f 	bl	8002342 <HAL_CAN_AddTxMessage>
 8001304:	4603      	mov	r3, r0
 8001306:	73fb      	strb	r3, [r7, #15]
                    );
            attempt++;
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	3301      	adds	r3, #1
 800130c:	73bb      	strb	r3, [r7, #14]
        }
        while(status != HAL_OK && attempt < CAN_REQUEST_ATTEMPT_MAX);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <CANstate_requestQueue+0x6a>
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d9dc      	bls.n	80012d4 <CANstate_requestQueue+0x24>

        //if all three transmission retrys fail.
        if(status != HAL_OK)
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <CANstate_requestQueue+0x7a>
        {
            pSeries -> runningIndex = messageIndex;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	605a      	str	r2, [r3, #4]
            return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	e013      	b.n	8001352 <CANstate_requestQueue+0xa2>
                pSeries->message[messageIndex].dataFrame,//intent: pass the array using call by value.
                &pSeries->message[messageIndex].mailbox
                );
#endif

        messageIndex++;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3301      	adds	r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
        (HAL_CAN_GetTxMailboxesFreeLevel(Brightside_CAN_handle) > 0
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <CANstate_requestQueue+0xac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f8de 	bl	80024f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <CANstate_requestQueue+0x9a>
         && messageIndex < pSeries->messageSeriesSize)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	dbc4      	blt.n	80012d4 <CANstate_requestQueue+0x24>
    }

    pSeries -> runningIndex = messageIndex;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	605a      	str	r2, [r3, #4]
    return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	bf00      	nop
 800135c:	2000004c 	.word	0x2000004c

08001360 <CANstate_resetRequestQueue>:

/**
@note This is the function that resets the running index in the struct
*/
void CANstate_resetRequestQueue(Brightside_CAN_MessageSeries * pSeries)//PH_ removed "static inline" to allow compilation. Consider adding keywords later or refactoring this function to be inline.
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    pSeries -> runningIndex = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <CAN_CompileMessage622>:
    1) Retrieve fault flags specified.
    2) Place fault flag data into Elithion format.
    3) Place data into message array, while following Elithion format.
*/
void CAN_CompileMessage622(uint8_t aData_series622[CAN_BRIGHTSIDE_DATA_LENGTH], BTM_PackData_t * pPACKDATA)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    uint8_t
        stateBYTE           = 0,
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
        //timerBYTE           = 0,
        //flagsBYTE           = 0,
        faultCodeBYTE       = 0,
 8001386:	2300      	movs	r3, #0
 8001388:	733b      	strb	r3, [r7, #12]
        levelFaultFlagsBYTE = 0,
 800138a:	2300      	movs	r3, #0
 800138c:	73bb      	strb	r3, [r7, #14]
        warningFlagsBYTE    = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	737b      	strb	r3, [r7, #13]



    int
        status_var = pPACKDATA->PH_status; //should access the variable that summarizes the whole pack's warning and fault flags
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001398:	60bb      	str	r3, [r7, #8]
    /*
    Update stateBYTE.
    */
    //Bit 0: fault state.
    if( (status_var & CAN_FAULT_VALUES) != 0)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <CAN_CompileMessage622+0x34>
    {
        stateBYTE |= CAN_BITFLAG_FAULT_STATE;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]

/*
Update levelFaultFlagsBYTE.
*/
    // Bit 7: Over voltage.
    if((status_var & BMS_FAULT_OV) != 0)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <CAN_CompileMessage622+0x46>
    {
        levelFaultFlagsBYTE |= CAN_FAULTFLAG_OVERVOLTAGE;
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013bc:	73bb      	strb	r3, [r7, #14]
    }
    // Bit 6: Under voltage.
    if((status_var & BMS_FAULT_UV) != 0)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <CAN_CompileMessage622+0x58>
    {
        levelFaultFlagsBYTE |= CAN_FAULTFLAG_UNDERVOLTAGE;
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ce:	73bb      	strb	r3, [r7, #14]
    }

    // Bit 5: Over-temperature.
    if((status_var & BMS_FAULT_OT) != 0)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <CAN_CompileMessage622+0x6a>
    {
        levelFaultFlagsBYTE |= CAN_FAULTFLAG_OVERTEMP;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	73bb      	strb	r3, [r7, #14]

    // Bit 4: Discharge overcurrent.
    // Bit 3: Charge overcurrent.

    // Bit 2: Communication fault with a bank or cell.
    if((status_var & BMS_FAULT_COMM) != 0)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <CAN_CompileMessage622+0x7c>
    {
        levelFaultFlagsBYTE |= CAN_FAULTFLAG_COMMFAULT;
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	73bb      	strb	r3, [r7, #14]
    */

    // Bit 7 : isolation fault.
    // Bit 6 : low SOH.
    // Bit 5 : hot temperature.
    if((status_var & BMS_WARNING_HIGH_T) != 0)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <CAN_CompileMessage622+0x8e>
    {
        warningFlagsBYTE |= CAN_WARNFLAG_HIGHTEMP;
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	f043 0320 	orr.w	r3, r3, #32
 8001404:	737b      	strb	r3, [r7, #13]
    }

    // Bit 4 : cold temperature.
    if((status_var & BMS_WARNING_LOW_T) != 0)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <CAN_CompileMessage622+0xa0>
    {
        warningFlagsBYTE |= CAN_WARNFLAG_LOWTEMP;
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	737b      	strb	r3, [r7, #13]
    }

    // Bit 3 : discharge overcurrent.
    // Bit 2 : charge overcurrent.
    // Bit 1 : high voltage.
    if((status_var & BMS_WARNING_HIGH_V) != 0)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <CAN_CompileMessage622+0xb2>
    {
        warningFlagsBYTE |= CAN_WARNFLAG_HIGHVOLTAGE;
 8001422:	7b7b      	ldrb	r3, [r7, #13]
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	737b      	strb	r3, [r7, #13]
    }
    // Bit 0 : low voltage.
    if((status_var & BMS_WARNING_LOW_V) != 0)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <CAN_CompileMessage622+0xc4>
    {
        warningFlagsBYTE |= CAN_WARNFLAG_LOWVOLTAGE;
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	737b      	strb	r3, [r7, #13]
    }

    //setting byte order in aData_series622 array
    aData_series622[0] = stateBYTE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	701a      	strb	r2, [r3, #0]
    //aData_series623[1] = timerBYTE;
    //aData_series623[2] = timerBYTE;
    //aData_series622[3] = flagsBYTE;
    aData_series622[4] = faultCodeBYTE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	7b3a      	ldrb	r2, [r7, #12]
 8001448:	701a      	strb	r2, [r3, #0]
    aData_series622[5] = levelFaultFlagsBYTE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3305      	adds	r3, #5
 800144e:	7bba      	ldrb	r2, [r7, #14]
 8001450:	701a      	strb	r2, [r3, #0]
    aData_series622[6] = warningFlagsBYTE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3306      	adds	r3, #6
 8001456:	7b7a      	ldrb	r2, [r7, #13]
 8001458:	701a      	strb	r2, [r3, #0]
    //aData_series623[7] = outOfBounds;

  //end of function
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	0000      	movs	r0, r0
	...

08001468 <CAN_CompileMessage623>:
                Note: this step is where data is made to match Elithion format's
                units, and where the numbers are casted to uint8_t.
        3) Place data into message array, while following Elithion format.
*/
void CAN_CompileMessage623(uint8_t aData_series623[CAN_BRIGHTSIDE_DATA_LENGTH], BTM_PackData_t * pPACKDATA)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af04      	add	r7, sp, #16
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
    int32_t
        packVoltage = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t
        minVtg = 0,
 8001476:	2300      	movs	r3, #0
 8001478:	827b      	strh	r3, [r7, #18]
        maxVtg = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	823b      	strh	r3, [r7, #16]
    uint8_t
        minStack = 0,
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
        minModule = 0,
 8001482:	2300      	movs	r3, #0
 8001484:	73bb      	strb	r3, [r7, #14]
        maxStack = 0,
 8001486:	2300      	movs	r3, #0
 8001488:	737b      	strb	r3, [r7, #13]
        maxModule = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	733b      	strb	r3, [r7, #12]
    uint8_t
        minVtgBYTE = 0,
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        maxVtgBYTE = 0,
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        minBattModuleSticker = 0,
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        maxBattModuleSticker = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3020 	strb.w	r3, [r7, #32]
    uint8_t
        outOfBounds = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	77fb      	strb	r3, [r7, #31]
    float
//        packVoltageFLOAT = 0,
        minVtgFLOAT = 0,
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
        maxVtgFLOAT = 0;
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]

  //Collecting and translating the collected data into CAN frame format

  //gather min and max voltages
    VoltageInfoRetrieval(
 80014b6:	f107 000f 	add.w	r0, r7, #15
 80014ba:	f107 0210 	add.w	r2, r7, #16
 80014be:	f107 0112 	add.w	r1, r7, #18
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	f107 030d 	add.w	r3, r7, #13
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f107 030e 	add.w	r3, r7, #14
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f000 f9dc 	bl	8001894 <VoltageInfoRetrieval>
        &minModule,
        &maxStack,
        &maxModule
    );

	packVoltage = Pack_getPackVoltage();
 80014dc:	f000 f988 	bl	80017f0 <Pack_getPackVoltage>
 80014e0:	6278      	str	r0, [r7, #36]	; 0x24
    }

    //Convert units of 100uV to V.
    //Then check if value is out of out of expected bounds, and cast uint16_t to uint8_t.
    //minVtgFLOAT = BTM_regValToVoltage(minVtg);
    minVtgFLOAT = (float)minVtg * 0.0001;
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc8b 	bl	8000e00 <__aeabi_ui2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f847 	bl	8000580 <__aeabi_f2d>
 80014f2:	a339      	add	r3, pc, #228	; (adr r3, 80015d8 <CAN_CompileMessage623+0x170>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f89a 	bl	8000630 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb76 	bl	8000bf4 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]
    minVtgBYTE = outOfBoundsAndConvert_moduleVoltage(minVtgFLOAT);
 800150c:	69b8      	ldr	r0, [r7, #24]
 800150e:	f000 f92f 	bl	8001770 <outOfBoundsAndConvert_moduleVoltage>
 8001512:	4603      	mov	r3, r0
 8001514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    //maxVtgFLOAT = BTM_regValToVoltage(maxVtg);
    maxVtgFLOAT = (float)maxVtg * 0.0001;
 8001518:	8a3b      	ldrh	r3, [r7, #16]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc70 	bl	8000e00 <__aeabi_ui2f>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f82c 	bl	8000580 <__aeabi_f2d>
 8001528:	a32b      	add	r3, pc, #172	; (adr r3, 80015d8 <CAN_CompileMessage623+0x170>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f87f 	bl	8000630 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fb5b 	bl	8000bf4 <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	617b      	str	r3, [r7, #20]
    maxVtgBYTE = outOfBoundsAndConvert_moduleVoltage(maxVtgFLOAT);
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f000 f914 	bl	8001770 <outOfBoundsAndConvert_moduleVoltage>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    minBattModuleSticker = LUT_moduleStickers[minStack][minModule];
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4619      	mov	r1, r3
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	4618      	mov	r0, r3
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <CAN_CompileMessage623+0x178>)
 8001558:	460b      	mov	r3, r1
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	4403      	add	r3, r0
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    maxBattModuleSticker = LUT_moduleStickers[maxStack][maxModule];
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	4619      	mov	r1, r3
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	4618      	mov	r0, r3
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <CAN_CompileMessage623+0x178>)
 8001574:	460b      	mov	r3, r1
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	4403      	add	r3, r0
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f887 3020 	strb.w	r3, [r7, #32]

    //setting byte order in aData_series623 array
    aData_series623[0] = (uint8_t)(packVoltage >> 8);//intent: most-sig half of pack_voltage is bit-shifted right by 8 bits, such that ONLY the MSH is casted.
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	121b      	asrs	r3, r3, #8
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	701a      	strb	r2, [r3, #0]
    aData_series623[1] = (uint8_t)(packVoltage);     //intent: only the LSB half is stored. the MSB half is truncated by the casting.
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3301      	adds	r3, #1
 8001594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
    aData_series623[2] = (uint8_t)minVtgBYTE;                 //NOTE: the voltage is in units of 100mV
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3302      	adds	r3, #2
 800159e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015a2:	701a      	strb	r2, [r3, #0]
    aData_series623[3] = (uint8_t)minBattModuleSticker;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3303      	adds	r3, #3
 80015a8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80015ac:	701a      	strb	r2, [r3, #0]
    aData_series623[4] = (uint8_t)maxVtgBYTE;                 //NOTE: the voltage is in units of 100mV
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80015b6:	701a      	strb	r2, [r3, #0]
    aData_series623[5] = (uint8_t)maxBattModuleSticker;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3305      	adds	r3, #5
 80015bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c0:	701a      	strb	r2, [r3, #0]
    //aData_series623[6] = 0;                        //redundant
    aData_series623[7] = (uint8_t)outOfBounds;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3307      	adds	r3, #7
 80015c6:	7ffa      	ldrb	r2, [r7, #31]
 80015c8:	701a      	strb	r2, [r3, #0]

  //end of function
}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	eb1c432d 	.word	0xeb1c432d
 80015dc:	3f1a36e2 	.word	0x3f1a36e2
 80015e0:	20000000 	.word	0x20000000

080015e4 <CAN_CompileMessage626>:

        1) Retrieve state of charge
        2) Place data into message array, while following Elithion format.
*/
void CAN_CompileMessage626(uint8_t aData_series626[CAN_BRIGHTSIDE_DATA_LENGTH], BTM_PackData_t * pPACKDATA)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    uint8_t StateOfChargeBYTE;

    StateOfChargeBYTE = pPACKDATA->PH_SOC_LOCATION;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f893 31d8 	ldrb.w	r3, [r3, #472]	; 0x1d8
 80015f4:	73fb      	strb	r3, [r7, #15]

    //setting byte order in aData_series626 array
    aData_series626[0] = StateOfChargeBYTE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	701a      	strb	r2, [r3, #0]
    // aData_series626[3] = 0;
    // aData_series626[4] = 0;
    // aData_series626[5] = 0;
    // aData_series626[6] = 0;
    // aData_series623[7] = 0;
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <CAN_CompileMessage627>:
                Note: this step is where data is made to match Elithion format's units,
                and where the numbers are casted to uint8_t.
        3) Place data into message array, while matching the Elithion format.

*/
void CAN_CompileMessage627(uint8_t aData_series627[CAN_BRIGHTSIDE_DATA_LENGTH], BTM_PackData_t * pPACKDATA){
 8001608:	b580      	push	{r7, lr}
 800160a:	b092      	sub	sp, #72	; 0x48
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    uint8_t
        averageTemperatureBYTE = 0,
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        minTmpBYTE = 0,
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        maxTmpBYTE = 0,
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        minTmpModuleSticker = 255,
 8001624:	23ff      	movs	r3, #255	; 0xff
 8001626:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        maxTmpModuleSticker = 255;
 800162a:	23ff      	movs	r3, #255	; 0xff
 800162c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    uint8_t
        minTmpStack = 0,
 8001630:	2300      	movs	r3, #0
 8001632:	75fb      	strb	r3, [r7, #23]
        maxTmpStack = 0,
 8001634:	2300      	movs	r3, #0
 8001636:	75bb      	strb	r3, [r7, #22]
        minTmpModule = 0,
 8001638:	2300      	movs	r3, #0
 800163a:	757b      	strb	r3, [r7, #21]
        maxTmpModule = 0,
 800163c:	2300      	movs	r3, #0
 800163e:	753b      	strb	r3, [r7, #20]
        outOfBounds = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	74fb      	strb	r3, [r7, #19]
        averageTemperatureDOUBLE,
        minTmpDOUBLE,
        maxTmpDOUBLE;

    //1) scans the struct and calculates the relevant information needed
    temperatureDataRetrieval(
 8001644:	f107 000c 	add.w	r0, r7, #12
 8001648:	f107 020e 	add.w	r2, r7, #14
 800164c:	f107 0110 	add.w	r1, r7, #16
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	9303      	str	r3, [sp, #12]
 8001656:	f107 0315 	add.w	r3, r7, #21
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	f107 0316 	add.w	r3, r7, #22
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f107 0317 	add.w	r3, r7, #23
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	4603      	mov	r3, r0
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f000 f990 	bl	8001990 <temperatureDataRetrieval>
        &maxTmpModule
    );

    //2) Translating Data

    averageTemperatureDOUBLE = BTM_TEMP_volts2temp((double)averageTemperature2BYTE);
 8001670:	8a3b      	ldrh	r3, [r7, #16]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff62 	bl	800053c <__aeabi_ui2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f000 f8a2 	bl	80017c8 <BTM_TEMP_volts2temp>
 8001684:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    averageTemperatureBYTE = TwosComplement_TemperatureConverter(averageTemperatureDOUBLE, &outOfBounds);
 8001688:	f107 0313 	add.w	r3, r7, #19
 800168c:	461a      	mov	r2, r3
 800168e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001692:	f000 fa59 	bl	8001b48 <TwosComplement_TemperatureConverter>
 8001696:	4603      	mov	r3, r0
 8001698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    minTmpDOUBLE = BTM_TEMP_volts2temp((double)minTmp);
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff4c 	bl	800053c <__aeabi_ui2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f000 f88c 	bl	80017c8 <BTM_TEMP_volts2temp>
 80016b0:	e9c7 0108 	strd	r0, r1, [r7, #32]
    minTmpBYTE = TwosComplement_TemperatureConverter(minTmpDOUBLE, &outOfBounds);
 80016b4:	f107 0313 	add.w	r3, r7, #19
 80016b8:	461a      	mov	r2, r3
 80016ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016be:	f000 fa43 	bl	8001b48 <TwosComplement_TemperatureConverter>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    maxTmpDOUBLE = BTM_TEMP_volts2temp((double)maxTmp);
 80016c8:	89bb      	ldrh	r3, [r7, #12]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff36 	bl	800053c <__aeabi_ui2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f000 f876 	bl	80017c8 <BTM_TEMP_volts2temp>
 80016dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
    maxTmpBYTE = TwosComplement_TemperatureConverter(maxTmpDOUBLE, &outOfBounds);
 80016e0:	f107 0313 	add.w	r3, r7, #19
 80016e4:	461a      	mov	r2, r3
 80016e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016ea:	f000 fa2d 	bl	8001b48 <TwosComplement_TemperatureConverter>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    minTmpModuleSticker = LUT_moduleStickers[minTmpStack][minTmpModule];
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	4619      	mov	r1, r3
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
 80016fa:	4618      	mov	r0, r3
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <CAN_CompileMessage627+0x164>)
 80016fe:	460b      	mov	r3, r1
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	4403      	add	r3, r0
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    maxTmpModuleSticker = LUT_moduleStickers[maxTmpStack][maxTmpModule];
 8001710:	7dbb      	ldrb	r3, [r7, #22]
 8001712:	4619      	mov	r1, r3
 8001714:	7d3b      	ldrb	r3, [r7, #20]
 8001716:	4618      	mov	r0, r3
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <CAN_CompileMessage627+0x164>)
 800171a:	460b      	mov	r3, r1
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	4403      	add	r3, r0
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    //3) Placing data into message array.
    aData_series627[0] = averageTemperatureBYTE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001732:	701a      	strb	r2, [r3, #0]
    // aData_series627[1] = 0; //redundant
    aData_series627[2] = minTmpBYTE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3302      	adds	r3, #2
 8001738:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800173c:	701a      	strb	r2, [r3, #0]
    aData_series627[3] = minTmpModuleSticker;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001746:	701a      	strb	r2, [r3, #0]
    aData_series627[4] = maxTmpBYTE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3304      	adds	r3, #4
 800174c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8001750:	701a      	strb	r2, [r3, #0]
    aData_series627[5] = maxTmpModuleSticker;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3305      	adds	r3, #5
 8001756:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800175a:	701a      	strb	r2, [r3, #0]
    // aData_series627[6] = 0; //redundant
    aData_series627[7] = outOfBounds;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3307      	adds	r3, #7
 8001760:	7cfa      	ldrb	r2, [r7, #19]
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3738      	adds	r7, #56	; 0x38
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000

08001770 <outOfBoundsAndConvert_moduleVoltage>:
@param      uint8_t * outOfBounds - The pointer to a variable used as a flag for if bounds are broken.

@returns    The moduleVoltage100mV value, casted to uint8_t.
@note       moduleVoltage100mV is moduleVoltageFLOAT converted to units of 100mV.
*/
uint16_t outOfBoundsAndConvert_moduleVoltage(float moduleVoltageFLOAT){
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    float moduleVoltage100mV = moduleVoltageFLOAT * 10;
 8001778:	4911      	ldr	r1, [pc, #68]	; (80017c0 <outOfBoundsAndConvert_moduleVoltage+0x50>)
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe fce8 	bl	8000150 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]

    if(moduleVoltage100mV < CAN_MODULE_MINIMUM){
 8001784:	f04f 0100 	mov.w	r1, #0
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fbdf 	bl	8000f4c <__aeabi_fcmplt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <outOfBoundsAndConvert_moduleVoltage+0x28>
        return -CAN_MODULE_MINIMUM;
 8001794:	2300      	movs	r3, #0
 8001796:	e00f      	b.n	80017b8 <outOfBoundsAndConvert_moduleVoltage+0x48>
    }
    else if(moduleVoltage100mV > CAN_MODULE_MAXIMUM){
 8001798:	490a      	ldr	r1, [pc, #40]	; (80017c4 <outOfBoundsAndConvert_moduleVoltage+0x54>)
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff fbf4 	bl	8000f88 <__aeabi_fcmpgt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <outOfBoundsAndConvert_moduleVoltage+0x3c>
        return -CAN_MODULE_MAXIMUM;
 80017a6:	f64f 7301 	movw	r3, #65281	; 0xff01
 80017aa:	e005      	b.n	80017b8 <outOfBoundsAndConvert_moduleVoltage+0x48>
    }
    else
    return (uint8_t)moduleVoltage100mV; //DOUBLE CHECK IF THE CASTING WORKS
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fbf5 	bl	8000f9c <__aeabi_f2uiz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	b29b      	uxth	r3, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	41200000 	.word	0x41200000
 80017c4:	437f0000 	.word	0x437f0000

080017c8 <BTM_TEMP_volts2temp>:
\note
    I think this prototype was included for the sake of testing cubeIDE
    compilation. Needs to be double checked.
*/
double BTM_TEMP_volts2temp(double vout)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	e9c7 0100 	strd	r0, r1, [r7]
	return 1337.1337;
 80017d2:	a305      	add	r3, pc, #20	; (adr r3, 80017e8 <BTM_TEMP_volts2temp+0x20>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	f3af 8000 	nop.w
 80017e8:	e8a71de7 	.word	0xe8a71de7
 80017ec:	4094e488 	.word	0x4094e488

080017f0 <Pack_getPackVoltage>:

@note      The packVoltage value is returned as int32_t, but it should be treated and casted to uint16_t after checking for negative value. A negative value indicates an out-of-bounds event.
*/

int32_t Pack_getPackVoltage()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
    float packVoltageFLOAT;
    int32_t packVoltage;

    //Convert units of 100uV to V.

    packVoltageFLOAT = (float)(pPACKDATA->pack_voltage) * 0.0001;
 80017f6:	4b24      	ldr	r3, [pc, #144]	; (8001888 <Pack_getPackVoltage+0x98>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff faff 	bl	8000e00 <__aeabi_ui2f>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe febb 	bl	8000580 <__aeabi_f2d>
 800180a:	a31d      	add	r3, pc, #116	; (adr r3, 8001880 <Pack_getPackVoltage+0x90>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ff0e 	bl	8000630 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f9ea 	bl	8000bf4 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	603b      	str	r3, [r7, #0]

    //check if value is outside of expected bounds
    if(packVoltageFLOAT < CAN_PACK_MINIMUM){
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7ff fb8f 	bl	8000f4c <__aeabi_fcmplt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <Pack_getPackVoltage+0x4a>
        packVoltage = -CAN_PACK_MINIMUM; //should be -0, negative to indicate error
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	e01a      	b.n	8001870 <Pack_getPackVoltage+0x80>
    }
    else if(packVoltageFLOAT > CAN_PACK_MAXIMUM){
 800183a:	4914      	ldr	r1, [pc, #80]	; (800188c <Pack_getPackVoltage+0x9c>)
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f7ff fba3 	bl	8000f88 <__aeabi_fcmpgt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <Pack_getPackVoltage+0x5e>
        packVoltage = -CAN_PACK_MAXIMUM; //should be -65000, below 16 bits, negative to indicate error
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <Pack_getPackVoltage+0xa0>)
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	e010      	b.n	8001870 <Pack_getPackVoltage+0x80>
    }
    else{ //if packVolage is within bounds
        packVoltage = (int32_t)(round(packVoltageFLOAT)); //DOUBLE CHECK IF THE CASTING WORKS
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f7fe fe96 	bl	8000580 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f001 fd98 	bl	8003390 <round>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f97c 	bl	8000b64 <__aeabi_d2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	607b      	str	r3, [r7, #4]
    }

    return packVoltage;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	eb1c432d 	.word	0xeb1c432d
 8001884:	3f1a36e2 	.word	0x3f1a36e2
 8001888:	20000108 	.word	0x20000108
 800188c:	477de800 	.word	0x477de800
 8001890:	ffff0218 	.word	0xffff0218

08001894 <VoltageInfoRetrieval>:
    uint8_t * pMinStack,
    uint8_t * pMinModule,
    uint8_t * pMaxStack,
    uint8_t * pMaxModule
)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
    uint16_t
        localMinVolt = 65535, //note that the raw register readings are decimal-shifted to avoid storing floating points. 2^16 - 1
 80018a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a6:	84fb      	strh	r3, [r7, #38]	; 0x26
        localMaxVolt = 0,
 80018a8:	2300      	movs	r3, #0
 80018aa:	84bb      	strh	r3, [r7, #36]	; 0x24
        localVoltage = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	82fb      	strh	r3, [r7, #22]
    uint8_t
        minStack = 0,
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        minModule = 0,
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        maxStack = 0,
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        maxModule = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3020 	strb.w	r3, [r7, #32]

  //combines the minVolt and maxVolt loops to reduce redundant struct pulls.
    //localMinVolt = pPACKDATA->stack[0].module[0].voltage; //Meant to avoid edge case where values are not updated from default.
    //localMaxVolt = pPACKDATA->stack[0].module[0].voltage; //Meant to avoid edge case where values are not updated.
    for(int i = 0; i < BTM_NUM_DEVICES; ++i)
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	e042      	b.n	8001954 <VoltageInfoRetrieval+0xc0>
    {
        for(int j = 0; j < BTM_NUM_MODULES; ++j)
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	e039      	b.n	8001948 <VoltageInfoRetrieval+0xb4>
        {
            if(pPACKDATA -> stack[i].module[j].enable == 1)
 80018d4:	68f9      	ldr	r1, [r7, #12]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	69f8      	ldr	r0, [r7, #28]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	22e8      	movs	r2, #232	; 0xe8
 80018e4:	fb00 f202 	mul.w	r2, r0, r2
 80018e8:	4413      	add	r3, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	3314      	adds	r3, #20
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d126      	bne.n	8001942 <VoltageInfoRetrieval+0xae>
            {
                localVoltage = pPACKDATA -> stack[i].module[j].voltage;
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	69f8      	ldr	r0, [r7, #28]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	22e8      	movs	r2, #232	; 0xe8
 8001904:	fb00 f202 	mul.w	r2, r0, r2
 8001908:	4413      	add	r3, r2
 800190a:	440b      	add	r3, r1
 800190c:	3316      	adds	r3, #22
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	82fb      	strh	r3, [r7, #22]

                if(localVoltage < localMinVolt)
 8001912:	8afa      	ldrh	r2, [r7, #22]
 8001914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001916:	429a      	cmp	r2, r3
 8001918:	d207      	bcs.n	800192a <VoltageInfoRetrieval+0x96>
                {
                    localMinVolt = localVoltage;
 800191a:	8afb      	ldrh	r3, [r7, #22]
 800191c:	84fb      	strh	r3, [r7, #38]	; 0x26
                    minStack = i;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    minModule = j;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                }
                if(localVoltage > localMaxVolt)
 800192a:	8afa      	ldrh	r2, [r7, #22]
 800192c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800192e:	429a      	cmp	r2, r3
 8001930:	d907      	bls.n	8001942 <VoltageInfoRetrieval+0xae>
                {
                    localMaxVolt = localVoltage;
 8001932:	8afb      	ldrh	r3, [r7, #22]
 8001934:	84bb      	strh	r3, [r7, #36]	; 0x24
                    maxStack = i;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    maxModule = j;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f887 3020 	strb.w	r3, [r7, #32]
        for(int j = 0; j < BTM_NUM_MODULES; ++j)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	3301      	adds	r3, #1
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b11      	cmp	r3, #17
 800194c:	ddc2      	ble.n	80018d4 <VoltageInfoRetrieval+0x40>
    for(int i = 0; i < BTM_NUM_DEVICES; ++i)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d9b9      	bls.n	80018ce <VoltageInfoRetrieval+0x3a>
            }
        }
    }

  //"return" min and max voltage
    *pMinVoltage = localMinVolt;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800195e:	801a      	strh	r2, [r3, #0]
    *pMaxVoltage = localMaxVolt;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001964:	801a      	strh	r2, [r3, #0]
    *pMinStack = minStack;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800196c:	701a      	strb	r2, [r3, #0]
    *pMinModule = minModule;
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001974:	701a      	strb	r2, [r3, #0]
    *pMaxStack = maxStack;
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800197c:	701a      	strb	r2, [r3, #0]
    *pMaxModule = maxModule;
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001984:	701a      	strb	r2, [r3, #0]

}
 8001986:	bf00      	nop
 8001988:	372c      	adds	r7, #44	; 0x2c
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <temperatureDataRetrieval>:
    uint8_t * pMinTmpStack,
    uint8_t * pMaxTmpStack,
    uint8_t * pMinTmpModule,
    uint8_t * pMaxTmpModule
)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	; 0x38
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
    uint16_t
        localTemperature = 0,
 800199e:	2300      	movs	r3, #0
 80019a0:	827b      	strh	r3, [r7, #18]
        localMinTmp = 65535,
 80019a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        localMaxTmp = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t
        minStack = 255,
 80019ac:	23ff      	movs	r3, #255	; 0xff
 80019ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        maxStack = 255,
 80019b2:	23ff      	movs	r3, #255	; 0xff
 80019b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        minModule = 255,
 80019b8:	23ff      	movs	r3, #255	; 0xff
 80019ba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        maxModule = 255;
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    double
        temperatureTotal = 0,
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        localAverage = 0;
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9c7 2308 	strd	r2, r3, [r7, #32]

    int
        i = 0,
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
        total_mux_read = 0; //i have no idea why it's called "mux_read"
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]

    for(i = 0; i < BTM_NUM_DEVICES; ++i)
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	e057      	b.n	8001a9a <temperatureDataRetrieval+0x10a>
    {
        for(int j = 0; j < BTM_NUM_MODULES; ++j)
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e04e      	b.n	8001a8e <temperatureDataRetrieval+0xfe>
        {
            if(pPACKDATA -> stack[i].module[j].enable == MODULE_ENABLED)
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	69f8      	ldr	r0, [r7, #28]
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	22e8      	movs	r2, #232	; 0xe8
 8001a00:	fb00 f202 	mul.w	r2, r0, r2
 8001a04:	4413      	add	r3, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	3314      	adds	r3, #20
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d13b      	bne.n	8001a88 <temperatureDataRetrieval+0xf8>
            {
                localTemperature = pPACKDATA -> stack[i].module[j].temperature;
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	69f8      	ldr	r0, [r7, #28]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	22e8      	movs	r2, #232	; 0xe8
 8001a20:	fb00 f202 	mul.w	r2, r0, r2
 8001a24:	4413      	add	r3, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	3318      	adds	r3, #24
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fab5 	bl	8000f9c <__aeabi_f2uiz>
 8001a32:	4603      	mov	r3, r0
 8001a34:	827b      	strh	r3, [r7, #18]
                //never add up to a number greater than the max double value.
                //assuming that the thermistors can handle up to the solder melting point,
                //about 300 degree Celcius, the three digits multiplied by 12 is way-way-way
                //lower than the max value of data type double.
                //So, the risk of overflow should be negligible.
                temperatureTotal = temperatureTotal + localTemperature;
 8001a36:	8a7b      	ldrh	r3, [r7, #18]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd8f 	bl	800055c <__aeabi_i2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a46:	f7fe fc3d 	bl	80002c4 <__adddf3>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

                if(localTemperature <= localMinTmp){
 8001a52:	8a7a      	ldrh	r2, [r7, #18]
 8001a54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d807      	bhi.n	8001a6a <temperatureDataRetrieval+0xda>
                    localMinTmp = localTemperature;
 8001a5a:	8a7b      	ldrh	r3, [r7, #18]
 8001a5c:	86fb      	strh	r3, [r7, #54]	; 0x36
                    minStack = i;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    minModule = j;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                }

                if(localTemperature >= localMaxTmp){
 8001a6a:	8a7a      	ldrh	r2, [r7, #18]
 8001a6c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d307      	bcc.n	8001a82 <temperatureDataRetrieval+0xf2>
                    localMaxTmp = localTemperature;
 8001a72:	8a7b      	ldrh	r3, [r7, #18]
 8001a74:	86bb      	strh	r3, [r7, #52]	; 0x34
                    maxStack = i;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                    maxModule = j;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                }
                total_mux_read++;
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61bb      	str	r3, [r7, #24]
        for(int j = 0; j < BTM_NUM_MODULES; ++j)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	2b11      	cmp	r3, #17
 8001a92:	ddad      	ble.n	80019f0 <temperatureDataRetrieval+0x60>
    for(i = 0; i < BTM_NUM_DEVICES; ++i)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d9a4      	bls.n	80019ea <temperatureDataRetrieval+0x5a>
            }
        }
    }

    localAverage = temperatureTotal / total_mux_read;
 8001aa0:	69b8      	ldr	r0, [r7, #24]
 8001aa2:	f7fe fd5b 	bl	800055c <__aeabi_i2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aae:	f7fe fee9 	bl	8000884 <__aeabi_ddiv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    //Ensuring that the value fits into the uint16_t size.
    //If it's breaks the bounds, it will be set to the bounds.
    //If the bounds ever appear, that is a sign that something may be off.
    if(localAverage > 65535){
 8001aba:	a321      	add	r3, pc, #132	; (adr r3, 8001b40 <temperatureDataRetrieval+0x1b0>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ac4:	f7ff f844 	bl	8000b50 <__aeabi_dcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <temperatureDataRetrieval+0x14a>
        localAverage = 65535;
 8001ace:	a31c      	add	r3, pc, #112	; (adr r3, 8001b40 <temperatureDataRetrieval+0x1b0>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ad8:	e010      	b.n	8001afc <temperatureDataRetrieval+0x16c>
    }
    else if(localAverage < 0){
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae6:	f7ff f815 	bl	8000b14 <__aeabi_dcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <temperatureDataRetrieval+0x16c>
        localAverage = 0;
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }

    *pAverageTemperature = (uint16_t)localAverage;
 8001afc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b00:	f7ff f858 	bl	8000bb4 <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	801a      	strh	r2, [r3, #0]
    *pMinTmp = localMinTmp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b10:	801a      	strh	r2, [r3, #0]
    *pMaxTmp = localMaxTmp;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b16:	801a      	strh	r2, [r3, #0]
    *pMinTmpStack = minStack;
 8001b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001b1e:	701a      	strb	r2, [r3, #0]
    *pMinTmpModule = minModule;
 8001b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b22:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001b26:	701a      	strb	r2, [r3, #0]
    *pMaxTmpStack = maxStack;
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001b2e:	701a      	strb	r2, [r3, #0]
    *pMaxTmpModule = maxModule;
 8001b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b32:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001b36:	701a      	strb	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3738      	adds	r7, #56	; 0x38
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40efffe0 	.word	0x40efffe0

08001b48 <TwosComplement_TemperatureConverter>:
    4) Convert temperatureBYTE to two's complement, then return the value.

@note       We use twos complement to match the Elithion Lithiumate format.
*/
uint8_t TwosComplement_TemperatureConverter(double temperatureDOUBLE, uint8_t * outOfBounds)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
    uint8_t temperatureBYTE;

    if(temperatureDOUBLE > CAN_TEMPERATURE_MAXIMUM)
 8001b54:	a31e      	add	r3, pc, #120	; (adr r3, 8001bd0 <TwosComplement_TemperatureConverter+0x88>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5e:	f7fe fff7 	bl	8000b50 <__aeabi_dcmpgt>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <TwosComplement_TemperatureConverter+0x2a>
    {
        *outOfBounds = 1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
        return CAN_TEMPERATURE_MAXIMUM;
 8001b6e:	237f      	movs	r3, #127	; 0x7f
 8001b70:	e028      	b.n	8001bc4 <TwosComplement_TemperatureConverter+0x7c>
    }
    else if(temperatureDOUBLE < CAN_TEMPERATURE_MINIMUM)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <TwosComplement_TemperatureConverter+0x90>)
 8001b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b7c:	f7fe ffca 	bl	8000b14 <__aeabi_dcmplt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <TwosComplement_TemperatureConverter+0x48>
    {
        *outOfBounds = 1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
        return ~(CAN_TEMPERATURE_MINIMUM)+1;
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	e019      	b.n	8001bc4 <TwosComplement_TemperatureConverter+0x7c>
    }
    else
    {
        temperatureBYTE = (uint8_t)fabs(temperatureDOUBLE);
 8001b90:	68bc      	ldr	r4, [r7, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f7ff f80a 	bl	8000bb4 <__aeabi_d2uiz>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	75fb      	strb	r3, [r7, #23]
        if(temperatureDOUBLE >= 0)
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb0:	f7fe ffc4 	bl	8000b3c <__aeabi_dcmpge>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <TwosComplement_TemperatureConverter+0x76>
            return temperatureBYTE;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	e002      	b.n	8001bc4 <TwosComplement_TemperatureConverter+0x7c>
        else
            //Conversion to two's complement, for negative numbers.
            return ~temperatureBYTE + 1;
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	425b      	negs	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
    }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bdb0      	pop	{r4, r5, r7, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	405fc000 	.word	0x405fc000
 8001bd8:	c0600000 	.word	0xc0600000

08001bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be2:	f000 fa2d 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be6:	f000 f815 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bea:	f000 f8b9 	bl	8001d60 <MX_GPIO_Init>
  MX_CAN_Init();
 8001bee:	f000 f84d 	bl	8001c8c <MX_CAN_Init>
  MX_SPI2_Init();
 8001bf2:	f000 f87f 	bl	8001cf4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  pSeries = CANstate_InitAll(&hcan);
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <main+0x34>)
 8001bf8:	f7ff fa0e 	bl	8001018 <CANstate_InitAll>
 8001bfc:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BLINKY_bluepill(100, 400);
 8001bfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001c02:	2064      	movs	r0, #100	; 0x64
 8001c04:	f7ff f9ea 	bl	8000fdc <BLINKY_bluepill>
	  CANstate(pSeries);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fa99 	bl	8001140 <CANstate>
	  BLINKY_bluepill(100, 400);
 8001c0e:	e7f6      	b.n	8001bfe <main+0x22>
 8001c10:	2000010c 	.word	0x2000010c

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b090      	sub	sp, #64	; 0x40
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	2228      	movs	r2, #40	; 0x28
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fbac 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3e:	2310      	movs	r3, #16
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 ff08 	bl	8002a60 <HAL_RCC_OscConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001c56:	f000 f8cf 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 f976 	bl	8002f64 <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c7e:	f000 f8bb 	bl	8001df8 <Error_Handler>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3740      	adds	r7, #64	; 0x40
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_CAN_Init+0x60>)
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <MX_CAN_Init+0x64>)
 8001c94:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_CAN_Init+0x60>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <MX_CAN_Init+0x60>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_CAN_Init+0x60>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_CAN_Init+0x60>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_CAN_Init+0x60>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <MX_CAN_Init+0x60>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_CAN_Init+0x60>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_CAN_Init+0x60>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_CAN_Init+0x60>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_CAN_Init+0x60>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_CAN_Init+0x60>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_CAN_Init+0x60>)
 8001cda:	f000 fa37 	bl	800214c <HAL_CAN_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001ce4:	f000 f888 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000010c 	.word	0x2000010c
 8001cf0:	40006400 	.word	0x40006400

08001cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <MX_SPI2_Init+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d40:	220a      	movs	r2, #10
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_SPI2_Init+0x64>)
 8001d46:	f001 fa73 	bl	8003230 <HAL_SPI_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d50:	f000 f852 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000134 	.word	0x20000134
 8001d5c:	40003800 	.word	0x40003800

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d92:	f043 0308 	orr.w	r3, r3, #8
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_GPIO_Init+0x90>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc2:	480c      	ldr	r0, [pc, #48]	; (8001df4 <MX_GPIO_Init+0x94>)
 8001dc4:	f000 fe34 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_GPIO_Init+0x94>)
 8001de2:	f000 fca1 	bl	8002728 <HAL_GPIO_Init>

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40011000 	.word	0x40011000

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x60>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_MspInit+0x60>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_CAN_MspInit+0x8c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d131      	bne.n	8001eec <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e92:	61d3      	str	r3, [r2, #28]
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_CAN_MspInit+0x90>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <HAL_CAN_MspInit+0x94>)
 8001ece:	f000 fc2b 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_CAN_MspInit+0x94>)
 8001ee8:	f000 fc1e 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40006400 	.word	0x40006400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800

08001f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_SPI_MspInit+0x8c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d131      	bne.n	8001f84 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4a1a      	ldr	r2, [pc, #104]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2a:	61d3      	str	r3, [r2, #28]
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f3e:	f043 0308 	orr.w	r3, r3, #8
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_SPI_MspInit+0x90>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f50:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4619      	mov	r1, r3
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <HAL_SPI_MspInit+0x94>)
 8001f66:	f000 fbdf 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_SPI_MspInit+0x94>)
 8001f80:	f000 fbd2 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40003800 	.word	0x40003800
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010c00 	.word	0x40010c00

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <NMI_Handler+0x4>

08001f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler+0x4>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fae:	e7fe      	b.n	8001fae <BusFault_Handler+0x4>

08001fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb4:	e7fe      	b.n	8001fb4 <UsageFault_Handler+0x4>

08001fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fde:	f000 f875 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	; (800202c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800201a:	f7ff ffe4 	bl	8001fe6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201e:	f001 f98b 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002022:	f7ff fddb 	bl	8001bdc <main>
  bx lr
 8002026:	4770      	bx	lr
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002030:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8002034:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8002038:	20000190 	.word	0x20000190

0800203c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC1_2_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x28>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x28>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 fb35 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fed2 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fb3f 	bl	800270e <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 fb15 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000024 	.word	0x20000024
 80020c4:	2000002c 	.word	0x2000002c
 80020c8:	20000028 	.word	0x20000028

080020cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x1c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_IncTick+0x20>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_IncTick+0x20>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	2000002c 	.word	0x2000002c
 80020ec:	2000018c 	.word	0x2000018c

080020f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_GetTick+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	2000018c 	.word	0x2000018c

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fff0 	bl	80020f0 <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffe0 	bl	80020f0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000002c 	.word	0x2000002c

0800214c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0ed      	b.n	800233a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fe7c 	bl	8001e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff ffb6 	bl	80020f0 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002186:	e012      	b.n	80021ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002188:	f7ff ffb2 	bl	80020f0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b0a      	cmp	r3, #10
 8002194:	d90b      	bls.n	80021ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2205      	movs	r2, #5
 80021a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e0c5      	b.n	800233a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0e5      	beq.n	8002188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0202 	bic.w	r2, r2, #2
 80021ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff ff90 	bl	80020f0 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021d2:	e012      	b.n	80021fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021d4:	f7ff ff8c 	bl	80020f0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d90b      	bls.n	80021fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2205      	movs	r2, #5
 80021f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e09f      	b.n	800233a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7e5b      	ldrb	r3, [r3, #25]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e9b      	ldrb	r3, [r3, #26]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d108      	bne.n	8002276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e007      	b.n	8002286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0220 	bic.w	r2, r2, #32
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7edb      	ldrb	r3, [r3, #27]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0210 	bic.w	r2, r2, #16
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0210 	orr.w	r2, r2, #16
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7f1b      	ldrb	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e007      	b.n	80022da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f5b      	ldrb	r3, [r3, #29]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d108      	bne.n	80022f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	ea42 0103 	orr.w	r1, r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	1e5a      	subs	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002342:	b480      	push	{r7}
 8002344:	b089      	sub	sp, #36	; 0x24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002356:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d003      	beq.n	800236e <HAL_CAN_AddTxMessage+0x2c>
 8002366:	7ffb      	ldrb	r3, [r7, #31]
 8002368:	2b02      	cmp	r3, #2
 800236a:	f040 80b8 	bne.w	80024de <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a0 	beq.w	80024ce <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	0e1b      	lsrs	r3, r3, #24
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d907      	bls.n	80023ae <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e09e      	b.n	80024ec <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10d      	bne.n	80023dc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	6809      	ldr	r1, [r1, #0]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3318      	adds	r3, #24
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	440b      	add	r3, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e00f      	b.n	80023fc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3318      	adds	r3, #24
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	440b      	add	r3, r1
 80023fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3318      	adds	r3, #24
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	7d1b      	ldrb	r3, [r3, #20]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d111      	bne.n	800243c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3318      	adds	r3, #24
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	6811      	ldr	r1, [r2, #0]
 800242c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3318      	adds	r3, #24
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	440b      	add	r3, r1
 8002438:	3304      	adds	r3, #4
 800243a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3307      	adds	r3, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	061a      	lsls	r2, r3, #24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3306      	adds	r3, #6
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3305      	adds	r3, #5
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	4313      	orrs	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	3204      	adds	r2, #4
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	4610      	mov	r0, r2
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6811      	ldr	r1, [r2, #0]
 8002464:	ea43 0200 	orr.w	r2, r3, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	440b      	add	r3, r1
 800246e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002472:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3303      	adds	r3, #3
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	061a      	lsls	r2, r3, #24
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3302      	adds	r3, #2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3301      	adds	r3, #1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	4313      	orrs	r3, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	4610      	mov	r0, r2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	ea43 0200 	orr.w	r2, r3, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80024a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3318      	adds	r3, #24
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3318      	adds	r3, #24
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e00e      	b.n	80024ec <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e006      	b.n	80024ec <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d11d      	bne.n	8002552 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
	...

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db0a      	blt.n	80025ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	490c      	ldr	r1, [pc, #48]	; (8002610 <__NVIC_SetPriority+0x4c>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	0112      	lsls	r2, r2, #4
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	440b      	add	r3, r1
 80025e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ec:	e00a      	b.n	8002604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <__NVIC_SetPriority+0x50>)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	3b04      	subs	r3, #4
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	440b      	add	r3, r1
 8002602:	761a      	strb	r2, [r3, #24]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f1c3 0307 	rsb	r3, r3, #7
 8002632:	2b04      	cmp	r3, #4
 8002634:	bf28      	it	cs
 8002636:	2304      	movcs	r3, #4
 8002638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3304      	adds	r3, #4
 800263e:	2b06      	cmp	r3, #6
 8002640:	d902      	bls.n	8002648 <NVIC_EncodePriority+0x30>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3b03      	subs	r3, #3
 8002646:	e000      	b.n	800264a <NVIC_EncodePriority+0x32>
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002660:	f04f 31ff 	mov.w	r1, #4294967295
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa01 f303 	lsl.w	r3, r1, r3
 800266a:	43d9      	mvns	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	4313      	orrs	r3, r2
         );
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff90 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff49 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff5e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff90 	bl	8002618 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5f 	bl	80025c4 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffb0 	bl	800267c <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e169      	b.n	8002a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8158 	bne.w	8002a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a9a      	ldr	r2, [pc, #616]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002764:	4a98      	ldr	r2, [pc, #608]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d875      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800276a:	4a98      	ldr	r2, [pc, #608]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d058      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002770:	4a96      	ldr	r2, [pc, #600]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d86f      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002776:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d052      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 800277c:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d869      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002782:	4a94      	ldr	r2, [pc, #592]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04c      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002788:	4a92      	ldr	r2, [pc, #584]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d863      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800278e:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d046      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002794:	4a90      	ldr	r2, [pc, #576]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d85d      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d82a      	bhi.n	80027f4 <HAL_GPIO_Init+0xcc>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d859      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_GPIO_Init+0x80>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	08002823 	.word	0x08002823
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	0800280f 	.word	0x0800280f
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002857 	.word	0x08002857
 80027bc:	08002857 	.word	0x08002857
 80027c0:	08002857 	.word	0x08002857
 80027c4:	08002857 	.word	0x08002857
 80027c8:	08002857 	.word	0x08002857
 80027cc:	08002857 	.word	0x08002857
 80027d0:	08002857 	.word	0x08002857
 80027d4:	08002857 	.word	0x08002857
 80027d8:	08002857 	.word	0x08002857
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002857 	.word	0x08002857
 80027e4:	08002857 	.word	0x08002857
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002819 	.word	0x08002819
 80027f4:	4a79      	ldr	r2, [pc, #484]	; (80029dc <HAL_GPIO_Init+0x2b4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fa:	e02c      	b.n	8002856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e029      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e024      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	3308      	adds	r3, #8
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e01f      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	330c      	adds	r3, #12
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e01a      	b.n	8002858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282a:	2304      	movs	r3, #4
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e013      	b.n	8002858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	611a      	str	r2, [r3, #16]
          break;
 8002842:	e009      	b.n	8002858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002844:	2308      	movs	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	615a      	str	r2, [r3, #20]
          break;
 800284e:	e003      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x130>
          break;
 8002856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d801      	bhi.n	8002862 <HAL_GPIO_Init+0x13a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_Init+0x13e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d802      	bhi.n	8002874 <HAL_GPIO_Init+0x14c>
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x152>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3b08      	subs	r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	210f      	movs	r1, #15
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80b1 	beq.w	8002a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x1ec>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_GPIO_Init+0x2c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x1e8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3e      	ldr	r2, [pc, #248]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <HAL_GPIO_Init+0x2cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x1e0>
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002908:	2304      	movs	r3, #4
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002914:	2300      	movs	r3, #0
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002926:	492f      	ldr	r1, [pc, #188]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	492c      	ldr	r1, [pc, #176]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	43db      	mvns	r3, r3
 8002956:	4928      	ldr	r1, [pc, #160]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002958:	4013      	ands	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	43db      	mvns	r3, r3
 800297e:	491e      	ldr	r1, [pc, #120]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002980:	4013      	ands	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4918      	ldr	r1, [pc, #96]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4914      	ldr	r1, [pc, #80]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
 80029c4:	e021      	b.n	8002a0a <HAL_GPIO_Init+0x2e2>
 80029c6:	bf00      	nop
 80029c8:	10320000 	.word	0x10320000
 80029cc:	10310000 	.word	0x10310000
 80029d0:	10220000 	.word	0x10220000
 80029d4:	10210000 	.word	0x10210000
 80029d8:	10120000 	.word	0x10120000
 80029dc:	10110000 	.word	0x10110000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_GPIO_Init+0x304>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4909      	ldr	r1, [pc, #36]	; (8002a2c <HAL_GPIO_Init+0x304>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f ae8e 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	372c      	adds	r7, #44	; 0x2c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e272      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8087 	beq.w	8002b8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d112      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
 8002a98:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa6:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d06c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x12c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d168      	bne.n	8002b8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e24c      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x76>
 8002ac8:	4b80      	ldr	r3, [pc, #512]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a7f      	ldr	r2, [pc, #508]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x98>
 8002ade:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b78      	ldr	r3, [pc, #480]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a77      	ldr	r2, [pc, #476]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0xbc>
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a71      	ldr	r2, [pc, #452]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a6a      	ldr	r2, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b68      	ldr	r3, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a67      	ldr	r2, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7ff fad8 	bl	80020f0 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7ff fad4 	bl	80020f0 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	; 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e200      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe4>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fac4 	bl	80020f0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7ff fac0 	bl	80020f0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1ec      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7e:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x10c>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d063      	beq.n	8002c62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ba6:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11c      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
 8002bb2:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d116      	bne.n	8002bec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bbe:	4b43      	ldr	r3, [pc, #268]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1c0      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4939      	ldr	r1, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	e03a      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fa79 	bl	80020f0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7ff fa75 	bl	80020f0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e1a1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c14:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4927      	ldr	r1, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]
 8002c34:	e015      	b.n	8002c62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_RCC_OscConfig+0x270>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fa58 	bl	80020f0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7ff fa54 	bl	80020f0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e180      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03a      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fa38 	bl	80020f0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7ff fa34 	bl	80020f0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e160      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 faa6 	bl	80031f4 <RCC_Delay>
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x274>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff fa1e 	bl	80020f0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb6:	e00f      	b.n	8002cd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff fa1a 	bl	80020f0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d908      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e146      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	42420000 	.word	0x42420000
 8002cd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e9      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a6 	beq.w	8002e3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	4b88      	ldr	r3, [pc, #544]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4a87      	ldr	r2, [pc, #540]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	61d3      	str	r3, [r2, #28]
 8002d0e:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	; (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	; (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7ff f9db 	bl	80020f0 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7ff f9d7 	bl	80020f0 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e103      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <HAL_RCC_OscConfig+0x4c8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x312>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4a6e      	ldr	r2, [pc, #440]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6213      	str	r3, [r2, #32]
 8002d70:	e02d      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x334>
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b67      	ldr	r3, [pc, #412]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a66      	ldr	r2, [pc, #408]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
 8002d92:	e01c      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_OscConfig+0x356>
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4a60      	ldr	r2, [pc, #384]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6213      	str	r3, [r2, #32]
 8002da8:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e00b      	b.n	8002dce <HAL_RCC_OscConfig+0x36e>
 8002db6:	4b5b      	ldr	r3, [pc, #364]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6213      	str	r3, [r2, #32]
 8002dc2:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d015      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f98b 	bl	80020f0 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7ff f987 	bl	80020f0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0b1      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df4:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ee      	beq.n	8002dde <HAL_RCC_OscConfig+0x37e>
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7ff f975 	bl	80020f0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7ff f971 	bl	80020f0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e09b      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e20:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8087 	beq.w	8002f56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d061      	beq.n	8002f18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d146      	bne.n	8002eea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7ff f945 	bl	80020f0 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6a:	f7ff f941 	bl	80020f0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e06d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4921      	ldr	r1, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a19      	ldr	r1, [r3, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	491b      	ldr	r1, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7ff f915 	bl	80020f0 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eca:	f7ff f911 	bl	80020f0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x46a>
 8002ee8:	e035      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f8fe 	bl	80020f0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff f8fa 	bl	80020f0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e026      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x498>
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e019      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
 8002f2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x500>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 0207 	bic.w	r2, r3, #7
 8002f8e:	4965      	ldr	r1, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003054:	f7ff f84c 	bl	80020f0 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7ff f848 	bl	80020f0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0207 	bic.w	r2, r3, #7
 800309a:	4922      	ldr	r1, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1cc>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe ffaa 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	08003448 	.word	0x08003448
 8003130:	20000024 	.word	0x20000024
 8003134:	20000028 	.word	0x20000028

08003138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b490      	push	{r4, r7}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003140:	1d3c      	adds	r4, r7, #4
 8003142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003148:	f240 2301 	movw	r3, #513	; 0x201
 800314c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	2300      	movs	r3, #0
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x46>
 8003176:	e02b      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b1c      	ldr	r3, [pc, #112]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800317a:	623b      	str	r3, [r7, #32]
      break;
 800317c:	e02b      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3328      	adds	r3, #40	; 0x28
 8003188:	443b      	add	r3, r7
 800318a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800318e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d012      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	3328      	adds	r3, #40	; 0x28
 80031a6:	443b      	add	r3, r7
 80031a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4a0e      	ldr	r2, [pc, #56]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80031b2:	fb03 f202 	mul.w	r2, r3, r2
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	e004      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	623b      	str	r3, [r7, #32]
      break;
 80031ce:	e002      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80031d2:	623b      	str	r3, [r7, #32]
      break;
 80031d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d6:	6a3b      	ldr	r3, [r7, #32]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc90      	pop	{r4, r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	08003438 	.word	0x08003438
 80031e8:	40021000 	.word	0x40021000
 80031ec:	007a1200 	.word	0x007a1200
 80031f0:	003d0900 	.word	0x003d0900

080031f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <RCC_Delay+0x34>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	; (800322c <RCC_Delay+0x38>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0a5b      	lsrs	r3, r3, #9
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003210:	bf00      	nop
  }
  while (Delay --);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	60fa      	str	r2, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <RCC_Delay+0x1c>
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	20000024 	.word	0x20000024
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e076      	b.n	8003330 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003252:	d009      	beq.n	8003268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]
 800325a:	e005      	b.n	8003268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fe3c 	bl	8001f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	ea42 0103 	orr.w	r1, r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	0c1a      	lsrs	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f002 0204 	and.w	r2, r2, #4
 800330e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	2600      	movs	r6, #0
 800333c:	4d0c      	ldr	r5, [pc, #48]	; (8003370 <__libc_init_array+0x38>)
 800333e:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	42a6      	cmp	r6, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	f000 f86a 	bl	8003420 <_init>
 800334c:	2600      	movs	r6, #0
 800334e:	4d0a      	ldr	r5, [pc, #40]	; (8003378 <__libc_init_array+0x40>)
 8003350:	4c0a      	ldr	r4, [pc, #40]	; (800337c <__libc_init_array+0x44>)
 8003352:	1b64      	subs	r4, r4, r5
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	42a6      	cmp	r6, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003360:	4798      	blx	r3
 8003362:	3601      	adds	r6, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f855 3b04 	ldr.w	r3, [r5], #4
 800336a:	4798      	blx	r3
 800336c:	3601      	adds	r6, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	08003458 	.word	0x08003458
 8003374:	08003458 	.word	0x08003458
 8003378:	08003458 	.word	0x08003458
 800337c:	0800345c 	.word	0x0800345c

08003380 <memset>:
 8003380:	4603      	mov	r3, r0
 8003382:	4402      	add	r2, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <round>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003396:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800339a:	2c13      	cmp	r4, #19
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4606      	mov	r6, r0
 80033a2:	460d      	mov	r5, r1
 80033a4:	dc19      	bgt.n	80033da <round+0x4a>
 80033a6:	2c00      	cmp	r4, #0
 80033a8:	da09      	bge.n	80033be <round+0x2e>
 80033aa:	3401      	adds	r4, #1
 80033ac:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80033b0:	d103      	bne.n	80033ba <round+0x2a>
 80033b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80033b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80033ba:	2200      	movs	r2, #0
 80033bc:	e02a      	b.n	8003414 <round+0x84>
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <round+0x8c>)
 80033c0:	4121      	asrs	r1, r4
 80033c2:	ea03 0001 	and.w	r0, r3, r1
 80033c6:	4302      	orrs	r2, r0
 80033c8:	d010      	beq.n	80033ec <round+0x5c>
 80033ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033ce:	fa42 f404 	asr.w	r4, r2, r4
 80033d2:	4423      	add	r3, r4
 80033d4:	ea23 0301 	bic.w	r3, r3, r1
 80033d8:	e7ef      	b.n	80033ba <round+0x2a>
 80033da:	2c33      	cmp	r4, #51	; 0x33
 80033dc:	dd09      	ble.n	80033f2 <round+0x62>
 80033de:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80033e2:	d103      	bne.n	80033ec <round+0x5c>
 80033e4:	f7fc ff6e 	bl	80002c4 <__adddf3>
 80033e8:	4606      	mov	r6, r0
 80033ea:	460d      	mov	r5, r1
 80033ec:	4630      	mov	r0, r6
 80033ee:	4629      	mov	r1, r5
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f2:	f04f 31ff 	mov.w	r1, #4294967295
 80033f6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80033fa:	40f9      	lsrs	r1, r7
 80033fc:	4208      	tst	r0, r1
 80033fe:	d0f5      	beq.n	80033ec <round+0x5c>
 8003400:	2001      	movs	r0, #1
 8003402:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8003406:	fa00 f404 	lsl.w	r4, r0, r4
 800340a:	1912      	adds	r2, r2, r4
 800340c:	bf28      	it	cs
 800340e:	181b      	addcs	r3, r3, r0
 8003410:	ea22 0201 	bic.w	r2, r2, r1
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	e7e6      	b.n	80033e8 <round+0x58>
 800341a:	bf00      	nop
 800341c:	000fffff 	.word	0x000fffff

08003420 <_init>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr

0800342c <_fini>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	bf00      	nop
 8003430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003432:	bc08      	pop	{r3}
 8003434:	469e      	mov	lr, r3
 8003436:	4770      	bx	lr
