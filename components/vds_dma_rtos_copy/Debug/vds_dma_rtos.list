
vds_dma_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  08006abc  08006abc  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006abc  08006abc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006ac4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  2000006c  08006b30  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c9c  08006b30  00008c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019228  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae4  00000000  00000000  000212bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00024da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ab  00000000  00000000  00026468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a8d  00000000  00000000  00027613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b66  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d74d  00000000  00000000  00045c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  000e3398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e9958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c4 	.word	0x080069c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080069c4 	.word	0x080069c4

08000150 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000158:	1d39      	adds	r1, r7, #4
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	2201      	movs	r2, #1
 8000160:	4803      	ldr	r0, [pc, #12]	@ (8000170 <__io_putchar+0x20>)
 8000162:	f003 f8eb 	bl	800333c <HAL_UART_Transmit>
  return ch;
 8000166:	687b      	ldr	r3, [r7, #4]
}
 8000168:	4618      	mov	r0, r3
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20000124 	.word	0x20000124

08000174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017a:	f000 fd6b 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017e:	f000 f835 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000182:	f000 f9a9 	bl	80004d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000186:	f000 f989 	bl	800049c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800018a:	f000 f95d 	bl	8000448 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800018e:	f000 f883 	bl	8000298 <MX_ADC1_Init>
  MX_CAN_Init();
 8000192:	f000 f923 	bl	80003dc <MX_CAN_Init>
//  CanFilterSetup();
//  HAL_CAN_Start(&hcan);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000196:	f003 fa51 	bl	800363c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(getSensorData, NULL, &defaultTask_attributes);
 800019a:	4a0c      	ldr	r2, [pc, #48]	@ (80001cc <main+0x58>)
 800019c:	2100      	movs	r1, #0
 800019e:	480c      	ldr	r0, [pc, #48]	@ (80001d0 <main+0x5c>)
 80001a0:	f003 fab2 	bl	8003708 <osThreadNew>
 80001a4:	4603      	mov	r3, r0
 80001a6:	4a0b      	ldr	r2, [pc, #44]	@ (80001d4 <main+0x60>)
 80001a8:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(validateData, NULL, &task2_attributes);
 80001aa:	4a0b      	ldr	r2, [pc, #44]	@ (80001d8 <main+0x64>)
 80001ac:	2100      	movs	r1, #0
 80001ae:	480b      	ldr	r0, [pc, #44]	@ (80001dc <main+0x68>)
 80001b0:	f003 faaa 	bl	8003708 <osThreadNew>
 80001b4:	4603      	mov	r3, r0
 80001b6:	4a0a      	ldr	r2, [pc, #40]	@ (80001e0 <main+0x6c>)
 80001b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001ba:	f003 fa71 	bl	80036a0 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcResults,adcChannels);
 80001be:	2310      	movs	r3, #16
 80001c0:	461a      	mov	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	@ (80001e4 <main+0x70>)
 80001c4:	4808      	ldr	r0, [pc, #32]	@ (80001e8 <main+0x74>)
 80001c6:	f000 fe73 	bl	8000eb0 <HAL_ADC_Start_DMA>
 80001ca:	e7f8      	b.n	80001be <main+0x4a>
 80001cc:	08006a48 	.word	0x08006a48
 80001d0:	080005d1 	.word	0x080005d1
 80001d4:	2000016c 	.word	0x2000016c
 80001d8:	08006a6c 	.word	0x08006a6c
 80001dc:	08000625 	.word	0x08000625
 80001e0:	20000170 	.word	0x20000170
 80001e4:	20000174 	.word	0x20000174
 80001e8:	20000088 	.word	0x20000088

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	@ 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f6:	2228      	movs	r2, #40	@ 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f006 f926 	bl	800644c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000224:	2310      	movs	r3, #16
 8000226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800022c:	2300      	movs	r3, #0
 800022e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000230:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800023a:	4618      	mov	r0, r3
 800023c:	f002 f8ee 	bl	800241c <HAL_RCC_OscConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000246:	f000 fa13 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024a:	230f      	movs	r3, #15
 800024c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024e:	2302      	movs	r3, #2
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fb5a 	bl	8002920 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000272:	f000 f9fd 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000276:	2302      	movs	r3, #2
 8000278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fd0b 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800028c:	f000 f9f0 	bl	8000670 <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3750      	adds	r7, #80	@ 0x50
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a8:	4b4a      	ldr	r3, [pc, #296]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002aa:	4a4b      	ldr	r2, [pc, #300]	@ (80003d8 <MX_ADC1_Init+0x140>)
 80002ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002ae:	4b49      	ldr	r3, [pc, #292]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002b6:	4b47      	ldr	r3, [pc, #284]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002bc:	4b45      	ldr	r3, [pc, #276]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c2:	4b44      	ldr	r3, [pc, #272]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002c4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ca:	4b42      	ldr	r3, [pc, #264]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80002d0:	4b40      	ldr	r3, [pc, #256]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002d2:	2208      	movs	r2, #8
 80002d4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d6:	483f      	ldr	r0, [pc, #252]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002d8:	f000 fd12 	bl	8000d00 <HAL_ADC_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002e2:	f000 f9c5 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002e6:	2306      	movs	r3, #6
 80002e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4837      	ldr	r0, [pc, #220]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80002f8:	f000 feca 	bl	8001090 <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000302:	f000 f9b5 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000306:	2307      	movs	r3, #7
 8000308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800030a:	2302      	movs	r3, #2
 800030c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4619      	mov	r1, r3
 8000312:	4830      	ldr	r0, [pc, #192]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 8000314:	f000 febc 	bl	8001090 <HAL_ADC_ConfigChannel>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800031e:	f000 f9a7 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000322:	2308      	movs	r3, #8
 8000324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000326:	2303      	movs	r3, #3
 8000328:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4829      	ldr	r0, [pc, #164]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 8000330:	f000 feae 	bl	8001090 <HAL_ADC_ConfigChannel>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800033a:	f000 f999 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800033e:	2309      	movs	r3, #9
 8000340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000342:	2304      	movs	r3, #4
 8000344:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4619      	mov	r1, r3
 800034a:	4822      	ldr	r0, [pc, #136]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 800034c:	f000 fea0 	bl	8001090 <HAL_ADC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000356:	f000 f98b 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800035a:	230a      	movs	r3, #10
 800035c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800035e:	2305      	movs	r3, #5
 8000360:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	481b      	ldr	r0, [pc, #108]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 8000368:	f000 fe92 	bl	8001090 <HAL_ADC_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000372:	f000 f97d 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000376:	230b      	movs	r3, #11
 8000378:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800037a:	2306      	movs	r3, #6
 800037c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4814      	ldr	r0, [pc, #80]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 8000384:	f000 fe84 	bl	8001090 <HAL_ADC_ConfigChannel>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800038e:	f000 f96f 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000392:	230c      	movs	r3, #12
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000396:	2307      	movs	r3, #7
 8000398:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80003a0:	f000 fe76 	bl	8001090 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80003aa:	f000 f961 	bl	8000670 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80003ae:	230d      	movs	r3, #13
 80003b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80003b2:	2308      	movs	r3, #8
 80003b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	@ (80003d4 <MX_ADC1_Init+0x13c>)
 80003bc:	f000 fe68 	bl	8001090 <HAL_ADC_ConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80003c6:	f000 f953 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000088 	.word	0x20000088
 80003d8:	40012400 	.word	0x40012400

080003dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <MX_CAN_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	@ (8000444 <MX_CAN_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003e6:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <MX_CAN_Init+0x64>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_CAN_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_CAN_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_CAN_Init+0x64>)
 80003fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80003fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_CAN_Init+0x64>)
 8000402:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000406:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <MX_CAN_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_CAN_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_CAN_Init+0x64>)
 800042e:	f001 f828 	bl	8001482 <HAL_CAN_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000438:	f000 f91a 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000fc 	.word	0x200000fc
 8000444:	40006400 	.word	0x40006400

08000448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <MX_USART2_UART_Init+0x50>)
 8000450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_USART2_UART_Init+0x4c>)
 8000480:	f002 ff0c 	bl	800329c <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800048a:	f000 f8f1 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000124 	.word	0x20000124
 8000498:	40004400 	.word	0x40004400

0800049c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_DMA_Init+0x38>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	@ (80004d4 <MX_DMA_Init+0x38>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_DMA_Init+0x38>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2105      	movs	r1, #5
 80004be:	200b      	movs	r0, #11
 80004c0:	f001 fbbb 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004c4:	200b      	movs	r0, #11
 80004c6:	f001 fbd4 	bl	8001c72 <HAL_NVIC_EnableIRQ>

}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a2c      	ldr	r2, [pc, #176]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 80004f2:	f043 0310 	orr.w	r3, r3, #16
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0310 	and.w	r3, r3, #16
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a26      	ldr	r2, [pc, #152]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a20      	ldr	r2, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a1a      	ldr	r2, [pc, #104]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 800053a:	f043 0308 	orr.w	r3, r3, #8
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_GPIO_Init+0xcc>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0308 	and.w	r3, r3, #8
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	4815      	ldr	r0, [pc, #84]	@ (80005a8 <MX_GPIO_Init+0xd0>)
 8000552:	f001 ff0f 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_GPIO_Init+0xd4>)
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4811      	ldr	r0, [pc, #68]	@ (80005b0 <MX_GPIO_Init+0xd8>)
 800056c:	f001 fd7e 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000570:	2320      	movs	r3, #32
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <MX_GPIO_Init+0xd0>)
 8000588:	f001 fd70 	bl	800206c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2105      	movs	r1, #5
 8000590:	2028      	movs	r0, #40	@ 0x28
 8000592:	f001 fb52 	bl	8001c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000596:	2028      	movs	r0, #40	@ 0x28
 8000598:	f001 fb6b 	bl	8001c72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010800 	.word	0x40010800
 80005ac:	10110000 	.word	0x10110000
 80005b0:	40011000 	.word	0x40011000

080005b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  adcConversionCompleted = 1; //set this flag when DMA is completed
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200001b4 	.word	0x200001b4

080005d0 <getSensorData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_getSensorData */
void getSensorData(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	   	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcResults,adcChannels);
 80005d8:	2310      	movs	r3, #16
 80005da:	461a      	mov	r2, r3
 80005dc:	490c      	ldr	r1, [pc, #48]	@ (8000610 <getSensorData+0x40>)
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <getSensorData+0x44>)
 80005e0:	f000 fc66 	bl	8000eb0 <HAL_ADC_Start_DMA>

		  while(adcConversionCompleted == 0){
 80005e4:	bf00      	nop
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <getSensorData+0x48>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0fb      	beq.n	80005e6 <getSensorData+0x16>
			  //Code to run during DMA
		  }

		  adcConversionCompleted = 0;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <getSensorData+0x48>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //Toggle light when transfer is completed
 80005f4:	2120      	movs	r1, #32
 80005f6:	4809      	ldr	r0, [pc, #36]	@ (800061c <getSensorData+0x4c>)
 80005f8:	f001 fed4 	bl	80023a4 <HAL_GPIO_TogglePin>
		  printf("Sensor Data: SUCCESS \r\n");
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <getSensorData+0x50>)
 80005fe:	f005 fe45 	bl	800628c <puts>
		  HAL_Delay(100);
 8000602:	2064      	movs	r0, #100	@ 0x64
 8000604:	f000 fb58 	bl	8000cb8 <HAL_Delay>
		  osDelay(100);
 8000608:	2064      	movs	r0, #100	@ 0x64
 800060a:	f003 f927 	bl	800385c <osDelay>
	   	  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adcResults,adcChannels);
 800060e:	e7e3      	b.n	80005d8 <getSensorData+0x8>
 8000610:	20000174 	.word	0x20000174
 8000614:	20000088 	.word	0x20000088
 8000618:	200001b4 	.word	0x200001b4
 800061c:	40010800 	.word	0x40010800
 8000620:	080069f0 	.word	0x080069f0

08000624 <validateData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_validateData */
void validateData(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN validateData */
  /* Infinite loop */
  for(;;)
  {
	printf("Validation of sensor data completed \r\n");
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <validateData+0x24>)
 800062e:	f005 fe2d 	bl	800628c <puts>
	HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000636:	f000 fb3f 	bl	8000cb8 <HAL_Delay>
    osDelay(1000);
 800063a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063e:	f003 f90d 	bl	800385c <osDelay>
	printf("Validation of sensor data completed \r\n");
 8000642:	bf00      	nop
 8000644:	e7f2      	b.n	800062c <validateData+0x8>
 8000646:	bf00      	nop
 8000648:	08006a08 	.word	0x08006a08

0800064c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a04      	ldr	r2, [pc, #16]	@ (800066c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d101      	bne.n	8000662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800065e:	f000 fb0f 	bl	8000c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40000800 	.word	0x40000800

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <HAL_MspInit+0x68>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <HAL_MspInit+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_MspInit+0x68>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_MspInit+0x68>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <HAL_MspInit+0x68>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <HAL_MspInit+0x68>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	f06f 0001 	mvn.w	r0, #1
 80006ba:	f001 fabe 	bl	8001c3a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006be:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <HAL_MspInit+0x6c>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <HAL_MspInit+0x6c>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010000 	.word	0x40010000

080006ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a3e      	ldr	r2, [pc, #248]	@ (8000800 <HAL_ADC_MspInit+0x114>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d175      	bne.n	80007f8 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070c:	4b3d      	ldr	r3, [pc, #244]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a3c      	ldr	r2, [pc, #240]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a36      	ldr	r2, [pc, #216]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a30      	ldr	r2, [pc, #192]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a2a      	ldr	r2, [pc, #168]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <HAL_ADC_MspInit+0x118>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800076c:	230f      	movs	r3, #15
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 0318 	add.w	r3, r7, #24
 8000778:	4619      	mov	r1, r3
 800077a:	4823      	ldr	r0, [pc, #140]	@ (8000808 <HAL_ADC_MspInit+0x11c>)
 800077c:	f001 fc76 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000780:	23c0      	movs	r3, #192	@ 0xc0
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	481f      	ldr	r0, [pc, #124]	@ (800080c <HAL_ADC_MspInit+0x120>)
 8000790:	f001 fc6c 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000794:	2303      	movs	r3, #3
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000798:	2303      	movs	r3, #3
 800079a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0318 	add.w	r3, r7, #24
 80007a0:	4619      	mov	r1, r3
 80007a2:	481b      	ldr	r0, [pc, #108]	@ (8000810 <HAL_ADC_MspInit+0x124>)
 80007a4:	f001 fc62 	bl	800206c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000818 <HAL_ADC_MspInit+0x12c>)
 80007ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007d2:	2220      	movs	r2, #32
 80007d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007de:	f001 fa57 	bl	8001c90 <HAL_DMA_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80007e8:	f7ff ff42 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007f0:	621a      	str	r2, [r3, #32]
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_ADC_MspInit+0x128>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40012400 	.word	0x40012400
 8000804:	40021000 	.word	0x40021000
 8000808:	40011000 	.word	0x40011000
 800080c:	40010800 	.word	0x40010800
 8000810:	40010c00 	.word	0x40010c00
 8000814:	200000b8 	.word	0x200000b8
 8000818:	40020008 	.word	0x40020008

0800081c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a20      	ldr	r2, [pc, #128]	@ (80008b8 <HAL_CAN_MspInit+0x9c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d139      	bne.n	80008b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 8000842:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000846:	61d3      	str	r3, [r2, #28]
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_CAN_MspInit+0xa0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800086c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <HAL_CAN_MspInit+0xa4>)
 8000882:	f001 fbf3 	bl	800206c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <HAL_CAN_MspInit+0xa4>)
 800089c:	f001 fbe6 	bl	800206c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2105      	movs	r1, #5
 80008a4:	2014      	movs	r0, #20
 80008a6:	f001 f9c8 	bl	8001c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008aa:	2014      	movs	r0, #20
 80008ac:	f001 f9e1 	bl	8001c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40006400 	.word	0x40006400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x70>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d123      	bne.n	800092c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <HAL_UART_MspInit+0x74>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	4a13      	ldr	r2, [pc, #76]	@ (8000938 <HAL_UART_MspInit+0x74>)
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ee:	61d3      	str	r3, [r2, #28]
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_UART_MspInit+0x74>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_UART_MspInit+0x74>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_UART_MspInit+0x74>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_UART_MspInit+0x74>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000914:	230c      	movs	r3, #12
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2302      	movs	r3, #2
 800091e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <HAL_UART_MspInit+0x78>)
 8000928:	f001 fba0 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40004400 	.word	0x40004400
 8000938:	40021000 	.word	0x40021000
 800093c:	40010800 	.word	0x40010800

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000956:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <HAL_InitTick+0xe8>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a33      	ldr	r2, [pc, #204]	@ (8000a28 <HAL_InitTick+0xe8>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b31      	ldr	r3, [pc, #196]	@ (8000a28 <HAL_InitTick+0xe8>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800096e:	f107 0210 	add.w	r2, r7, #16
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f002 f941 	bl	8002c00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000988:	f002 f912 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 800098c:	6378      	str	r0, [r7, #52]	@ 0x34
 800098e:	e004      	b.n	800099a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000990:	f002 f90e 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8000994:	4603      	mov	r3, r0
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099c:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <HAL_InitTick+0xec>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	3b01      	subs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009aa:	4a22      	ldr	r2, [pc, #136]	@ (8000a34 <HAL_InitTick+0xf4>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009ce:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009d0:	f002 fa1a 	bl	8002e08 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d11b      	bne.n	8000a1a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009e2:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <HAL_InitTick+0xf0>)
 80009e4:	f002 fa68 	bl	8002eb8 <HAL_TIM_Base_Start_IT>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d111      	bne.n	8000a1a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009f6:	201e      	movs	r0, #30
 80009f8:	f001 f93b 	bl	8001c72 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d808      	bhi.n	8000a14 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a02:	2200      	movs	r2, #0
 8000a04:	6879      	ldr	r1, [r7, #4]
 8000a06:	201e      	movs	r0, #30
 8000a08:	f001 f917 	bl	8001c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_InitTick+0xf8>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e002      	b.n	8000a1a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3738      	adds	r7, #56	@ 0x38
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	200001b8 	.word	0x200001b8
 8000a34:	40000800 	.word	0x40000800
 8000a38:	20000004 	.word	0x20000004

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <DMA1_Channel1_IRQHandler+0x10>)
 8000a76:	f001 f9c5 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000b8 	.word	0x200000b8

08000a84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a8a:	f000 fdf5 	bl	8001678 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000fc 	.word	0x200000fc

08000a98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <TIM4_IRQHandler+0x10>)
 8000a9e:	f002 fa5d 	bl	8002f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ab4:	f001 fc90 	bl	80023d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
  }

  return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e009      	b.n	8000b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb1d 	bl	8000150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf1      	blt.n	8000b08 <_write+0x12>
  }
  return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_close>:

int _close(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b54:	605a      	str	r2, [r3, #4]
  return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <_isatty>:

int _isatty(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	@ (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f005 fc92 	bl	80064e8 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20005000 	.word	0x20005000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000200 	.word	0x20000200
 8000bf8:	20001ca0 	.word	0x20001ca0

08000bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff fff8 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0e:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c10:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c24:	4c09      	ldr	r4, [pc, #36]	@ (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f005 fc5f 	bl	80064f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff fa9d 	bl	8000174 <main>
  bx lr
 8000c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c44:	08006ac4 	.word	0x08006ac4
  ldr r2, =_sbss
 8000c48:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c4c:	20001c9c 	.word	0x20001c9c

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 ffdd 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe68 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fd04 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a03      	ldr	r2, [pc, #12]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000204 	.word	0x20000204

08000ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	@ (8000cb4 <HAL_GetTick+0x10>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000204 	.word	0x20000204

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff fff0 	bl	8000ca4 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d005      	beq.n	8000cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_Delay+0x44>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cde:	bf00      	nop
 8000ce0:	f7ff ffe0 	bl	8000ca4 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8f7      	bhi.n	8000ce0 <HAL_Delay+0x28>
  {
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0be      	b.n	8000ea0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d109      	bne.n	8000d44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fcd4 	bl	80006ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 faf5 	bl	8001334 <ADC_ConversionStop_Disable>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8099 	bne.w	8000e8e <HAL_ADC_Init+0x18e>
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8095 	bne.w	8000e8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d68:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d6c:	f023 0302 	bic.w	r3, r3, #2
 8000d70:	f043 0202 	orr.w	r2, r3, #2
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7b1b      	ldrb	r3, [r3, #12]
 8000d86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d98:	d003      	beq.n	8000da2 <HAL_ADC_Init+0xa2>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d102      	bne.n	8000da8 <HAL_ADC_Init+0xa8>
 8000da2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da6:	e000      	b.n	8000daa <HAL_ADC_Init+0xaa>
 8000da8:	2300      	movs	r3, #0
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7d1b      	ldrb	r3, [r3, #20]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d119      	bne.n	8000dec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7b1b      	ldrb	r3, [r3, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d109      	bne.n	8000dd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	035a      	lsls	r2, r3, #13
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	e00b      	b.n	8000dec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd8:	f043 0220 	orr.w	r2, r3, #32
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	4b28      	ldr	r3, [pc, #160]	@ (8000ea8 <HAL_ADC_Init+0x1a8>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e1c:	d003      	beq.n	8000e26 <HAL_ADC_Init+0x126>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d104      	bne.n	8000e30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	051b      	lsls	r3, r3, #20
 8000e2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e36:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_ADC_Init+0x1ac>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d10b      	bne.n	8000e6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5e:	f023 0303 	bic.w	r3, r3, #3
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e6a:	e018      	b.n	8000e9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e70:	f023 0312 	bic.w	r3, r3, #18
 8000e74:	f043 0210 	orr.w	r2, r3, #16
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e80:	f043 0201 	orr.w	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e8c:	e007      	b.n	8000e9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e92:	f043 0210 	orr.w	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	ffe1f7fd 	.word	0xffe1f7fd
 8000eac:	ff1f0efe 	.word	0xff1f0efe

08000eb0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a64      	ldr	r2, [pc, #400]	@ (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d004      	beq.n	8000ed4 <HAL_ADC_Start_DMA+0x24>
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a63      	ldr	r2, [pc, #396]	@ (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <HAL_ADC_Start_DMA+0x32>
 8000ed4:	4b60      	ldr	r3, [pc, #384]	@ (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 80b3 	bne.w	8001048 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_Start_DMA+0x40>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e0ae      	b.n	800104e <HAL_ADC_Start_DMA+0x19e>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 f9c1 	bl	8001280 <ADC_Enable>
 8000efe:	4603      	mov	r3, r0
 8000f00:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 809a 	bne.w	800103e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000f12:	f023 0301 	bic.w	r3, r3, #1
 8000f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a4e      	ldr	r2, [pc, #312]	@ (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_Start_DMA+0x84>
 8000f28:	4b4b      	ldr	r3, [pc, #300]	@ (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d115      	bne.n	8000f60 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d026      	beq.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f5e:	e01d      	b.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a39      	ldr	r2, [pc, #228]	@ (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d004      	beq.n	8000f80 <HAL_ADC_Start_DMA+0xd0>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a38      	ldr	r2, [pc, #224]	@ (800105c <HAL_ADC_Start_DMA+0x1ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d10d      	bne.n	8000f9c <HAL_ADC_Start_DMA+0xec>
 8000f80:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <HAL_ADC_Start_DMA+0x1a8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fac:	f023 0206 	bic.w	r2, r3, #6
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4a25      	ldr	r2, [pc, #148]	@ (8001060 <HAL_ADC_Start_DMA+0x1b0>)
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	4a24      	ldr	r2, [pc, #144]	@ (8001064 <HAL_ADC_Start_DMA+0x1b4>)
 8000fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <HAL_ADC_Start_DMA+0x1b8>)
 8000fda:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f06f 0202 	mvn.w	r2, #2
 8000fe4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ff4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a18      	ldr	r0, [r3, #32]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	334c      	adds	r3, #76	@ 0x4c
 8001000:	4619      	mov	r1, r3
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f000 fe9d 	bl	8001d44 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001014:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001018:	d108      	bne.n	800102c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001028:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800102a:	e00f      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800103a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800103c:	e006      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001046:	e001      	b.n	800104c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012400 	.word	0x40012400
 800105c:	40012800 	.word	0x40012800
 8001060:	080013b7 	.word	0x080013b7
 8001064:	08001433 	.word	0x08001433
 8001068:	0800144f 	.word	0x0800144f

0800106c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_ConfigChannel+0x20>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e0dc      	b.n	800126a <HAL_ADC_ConfigChannel+0x1da>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b06      	cmp	r3, #6
 80010be:	d81c      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b05      	subs	r3, #5
 80010d2:	221f      	movs	r2, #31
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4019      	ands	r1, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b05      	subs	r3, #5
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f8:	e03c      	b.n	8001174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d81c      	bhi.n	800113c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b23      	subs	r3, #35	@ 0x23
 8001114:	221f      	movs	r2, #31
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	4019      	ands	r1, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b23      	subs	r3, #35	@ 0x23
 800112e:	fa00 f203 	lsl.w	r2, r0, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	631a      	str	r2, [r3, #48]	@ 0x30
 800113a:	e01b      	b.n	8001174 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b41      	subs	r3, #65	@ 0x41
 800114e:	221f      	movs	r2, #31
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b41      	subs	r3, #65	@ 0x41
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d91c      	bls.n	80011b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	3b1e      	subs	r3, #30
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6898      	ldr	r0, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	e019      	b.n	80011ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6919      	ldr	r1, [r3, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	2207      	movs	r2, #7
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4019      	ands	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6898      	ldr	r0, [r3, #8]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d003      	beq.n	80011fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d132      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <HAL_ADC_ConfigChannel+0x1e4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d125      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d126      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001220:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d11a      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <HAL_ADC_ConfigChannel+0x1e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a13      	ldr	r2, [pc, #76]	@ (800127c <HAL_ADC_ConfigChannel+0x1ec>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	0c9a      	lsrs	r2, r3, #18
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001240:	e002      	b.n	8001248 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3b01      	subs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x1b2>
 800124e:	e007      	b.n	8001260 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	f043 0220 	orr.w	r2, r3, #32
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40012400 	.word	0x40012400
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	d040      	beq.n	8001320 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ae:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <ADC_Enable+0xac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001330 <ADC_Enable+0xb0>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012bc:	e002      	b.n	80012c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f9      	bne.n	80012be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ca:	f7ff fceb 	bl	8000ca4 <HAL_GetTick>
 80012ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	e01f      	b.n	8001312 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012d2:	f7ff fce7 	bl	8000ca4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d918      	bls.n	8001312 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d011      	beq.n	8001312 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	f043 0210 	orr.w	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e007      	b.n	8001322 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d1d8      	bne.n	80012d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83

08001334 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b01      	cmp	r3, #1
 800134c:	d12e      	bne.n	80013ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800135e:	f7ff fca1 	bl	8000ca4 <HAL_GetTick>
 8001362:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001364:	e01b      	b.n	800139e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001366:	f7ff fc9d 	bl	8000ca4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d914      	bls.n	800139e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b01      	cmp	r3, #1
 8001380:	d10d      	bne.n	800139e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e007      	b.n	80013ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d0dc      	beq.n	8001366 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d127      	bne.n	8001420 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013e6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013ea:	d115      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff f8cb 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800141e:	e004      	b.n	800142a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fe13 	bl	800106c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	f043 0204 	orr.w	r2, r3, #4
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fe02 	bl	800107e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0ed      	b.n	8001670 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff f9bb 	bl	800081c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b6:	f7ff fbf5 	bl	8000ca4 <HAL_GetTick>
 80014ba:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014bc:	e012      	b.n	80014e4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014be:	f7ff fbf1 	bl	8000ca4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	d90b      	bls.n	80014e4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2205      	movs	r2, #5
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0c5      	b.n	8001670 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0e5      	beq.n	80014be <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0202 	bic.w	r2, r2, #2
 8001500:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001502:	f7ff fbcf 	bl	8000ca4 <HAL_GetTick>
 8001506:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001508:	e012      	b.n	8001530 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150a:	f7ff fbcb 	bl	8000ca4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d90b      	bls.n	8001530 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2205      	movs	r2, #5
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e09f      	b.n	8001670 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e5      	bne.n	800150a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e1b      	ldrb	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e007      	b.n	8001568 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e5b      	ldrb	r3, [r3, #25]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e007      	b.n	8001592 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e9b      	ldrb	r3, [r3, #26]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0220 	bic.w	r2, r2, #32
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7edb      	ldrb	r3, [r3, #27]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0210 	bic.w	r2, r2, #16
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0210 	orr.w	r2, r2, #16
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7f1b      	ldrb	r3, [r3, #28]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0208 	orr.w	r2, r2, #8
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0208 	bic.w	r2, r2, #8
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7f5b      	ldrb	r3, [r3, #29]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0204 	orr.w	r2, r2, #4
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0204 	bic.w	r2, r2, #4
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	ea42 0103 	orr.w	r1, r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d07c      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f983 	bl	80019e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80016e0:	e016      	b.n	8001710 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f4:	e00c      	b.n	8001710 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
 8001708:	e002      	b.n	8001710 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f986 	bl	8001a1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001722:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f962 	bl	80019f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001734:	e016      	b.n	8001764 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
 8001748:	e00c      	b.n	8001764 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
 800175c:	e002      	b.n	8001764 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f965 	bl	8001a2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001776:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f941 	bl	8001a0a <HAL_CAN_TxMailbox2CompleteCallback>
 8001788:	e016      	b.n	80017b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
 800179c:	e00c      	b.n	80017b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b0:	e002      	b.n	80017b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f944 	bl	8001a40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2208      	movs	r2, #8
 80017f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f933 	bl	8001a64 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f91b 	bl	8001a52 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00c      	beq.n	8001840 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2210      	movs	r2, #16
 800183e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2208      	movs	r2, #8
 800185a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f913 	bl	8001a88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8fb 	bl	8001a76 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2210      	movs	r2, #16
 800189a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8fc 	bl	8001a9a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2208      	movs	r2, #8
 80018bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f8f4 	bl	8001aac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d07b      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d072      	beq.n	80019be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001932:	2b00      	cmp	r3, #0
 8001934:	d043      	beq.n	80019be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03e      	beq.n	80019be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001946:	2b60      	cmp	r3, #96	@ 0x60
 8001948:	d02b      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x32a>
 800194a:	2b60      	cmp	r3, #96	@ 0x60
 800194c:	d82e      	bhi.n	80019ac <HAL_CAN_IRQHandler+0x334>
 800194e:	2b50      	cmp	r3, #80	@ 0x50
 8001950:	d022      	beq.n	8001998 <HAL_CAN_IRQHandler+0x320>
 8001952:	2b50      	cmp	r3, #80	@ 0x50
 8001954:	d82a      	bhi.n	80019ac <HAL_CAN_IRQHandler+0x334>
 8001956:	2b40      	cmp	r3, #64	@ 0x40
 8001958:	d019      	beq.n	800198e <HAL_CAN_IRQHandler+0x316>
 800195a:	2b40      	cmp	r3, #64	@ 0x40
 800195c:	d826      	bhi.n	80019ac <HAL_CAN_IRQHandler+0x334>
 800195e:	2b30      	cmp	r3, #48	@ 0x30
 8001960:	d010      	beq.n	8001984 <HAL_CAN_IRQHandler+0x30c>
 8001962:	2b30      	cmp	r3, #48	@ 0x30
 8001964:	d822      	bhi.n	80019ac <HAL_CAN_IRQHandler+0x334>
 8001966:	2b10      	cmp	r3, #16
 8001968:	d002      	beq.n	8001970 <HAL_CAN_IRQHandler+0x2f8>
 800196a:	2b20      	cmp	r3, #32
 800196c:	d005      	beq.n	800197a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800196e:	e01d      	b.n	80019ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001978:	e019      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001982:	e014      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800198c:	e00f      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001996:	e00a      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a0:	e005      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019aa:	e000      	b.n	80019ae <HAL_CAN_IRQHandler+0x336>
            break;
 80019ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f870 	bl	8001abe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	@ 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4906      	ldr	r1, [pc, #24]	@ (8001b68 <__NVIC_EnableIRQ+0x34>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff4f 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff64 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ffb2 	bl	8001bc0 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff81 	bl	8001b6c <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff57 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e043      	b.n	8001d2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <HAL_DMA_Init+0xa8>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a22      	ldr	r2, [pc, #136]	@ (8001d3c <HAL_DMA_Init+0xac>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	009a      	lsls	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_DMA_Init+0xb0>)
 8001cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cda:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001cde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	bffdfff8 	.word	0xbffdfff8
 8001d3c:	cccccccd 	.word	0xcccccccd
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Start_IT+0x20>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e04b      	b.n	8001dfc <HAL_DMA_Start_IT+0xb8>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d13a      	bne.n	8001dee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f937 	bl	8002010 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 020e 	orr.w	r2, r2, #14
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	e00f      	b.n	8001ddc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 020a 	orr.w	r2, r2, #10
 8001dda:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e005      	b.n	8001dfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	2204      	movs	r2, #4
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d04f      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xc8>
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d04a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d107      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0204 	bic.w	r2, r2, #4
 8001e52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a66      	ldr	r2, [pc, #408]	@ (8001ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d029      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0xae>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_DMA_IRQHandler+0x1f4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_IRQHandler+0xaa>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a63      	ldr	r2, [pc, #396]	@ (8001ffc <HAL_DMA_IRQHandler+0x1f8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0xa4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a62      	ldr	r2, [pc, #392]	@ (8002000 <HAL_DMA_IRQHandler+0x1fc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d012      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0x9e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a60      	ldr	r2, [pc, #384]	@ (8002004 <HAL_DMA_IRQHandler+0x200>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00a      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x98>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002008 <HAL_DMA_IRQHandler+0x204>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <HAL_DMA_IRQHandler+0x92>
 8001e90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e94:	e00e      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001e96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e9a:	e00b      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001e9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ea0:	e008      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001ea2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ea6:	e005      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eac:	e002      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001eae:	2340      	movs	r3, #64	@ 0x40
 8001eb0:	e000      	b.n	8001eb4 <HAL_DMA_IRQHandler+0xb0>
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	4a55      	ldr	r2, [pc, #340]	@ (800200c <HAL_DMA_IRQHandler+0x208>)
 8001eb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 8094 	beq.w	8001fea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	e08e      	b.n	8001fea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d056      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x186>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d051      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 020a 	bic.w	r2, r2, #10
 8001f02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a38      	ldr	r2, [pc, #224]	@ (8001ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d029      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x166>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	@ (8001ff8 <HAL_DMA_IRQHandler+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d022      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x162>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a35      	ldr	r2, [pc, #212]	@ (8001ffc <HAL_DMA_IRQHandler+0x1f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01a      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x15c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <HAL_DMA_IRQHandler+0x1fc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d012      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x156>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a32      	ldr	r2, [pc, #200]	@ (8002004 <HAL_DMA_IRQHandler+0x200>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00a      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x150>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_DMA_IRQHandler+0x204>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d102      	bne.n	8001f4e <HAL_DMA_IRQHandler+0x14a>
 8001f48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f4c:	e00e      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f52:	e00b      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f58:	e008      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f5e:	e005      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f64:	e002      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f66:	2320      	movs	r3, #32
 8001f68:	e000      	b.n	8001f6c <HAL_DMA_IRQHandler+0x168>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	4a27      	ldr	r2, [pc, #156]	@ (800200c <HAL_DMA_IRQHandler+0x208>)
 8001f6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d034      	beq.n	8001fea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f88:	e02f      	b.n	8001fea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	2208      	movs	r2, #8
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d028      	beq.n	8001fec <HAL_DMA_IRQHandler+0x1e8>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020e 	bic.w	r2, r2, #14
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
    }
  }
  return;
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
}
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020008 	.word	0x40020008
 8001ff8:	4002001c 	.word	0x4002001c
 8001ffc:	40020030 	.word	0x40020030
 8002000:	40020044 	.word	0x40020044
 8002004:	40020058 	.word	0x40020058
 8002008:	4002006c 	.word	0x4002006c
 800200c:	40020000 	.word	0x40020000

08002010 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	2101      	movs	r1, #1
 8002028:	fa01 f202 	lsl.w	r2, r1, r2
 800202c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b10      	cmp	r3, #16
 800203c:	d108      	bne.n	8002050 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800204e:	e007      	b.n	8002060 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
	...

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b08b      	sub	sp, #44	@ 0x2c
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	e169      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002080:	2201      	movs	r2, #1
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8158 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a9a      	ldr	r2, [pc, #616]	@ (800230c <HAL_GPIO_Init+0x2a0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020a8:	4a98      	ldr	r2, [pc, #608]	@ (800230c <HAL_GPIO_Init+0x2a0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d875      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ae:	4a98      	ldr	r2, [pc, #608]	@ (8002310 <HAL_GPIO_Init+0x2a4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d058      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020b4:	4a96      	ldr	r2, [pc, #600]	@ (8002310 <HAL_GPIO_Init+0x2a4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d86f      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020ba:	4a96      	ldr	r2, [pc, #600]	@ (8002314 <HAL_GPIO_Init+0x2a8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d052      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020c0:	4a94      	ldr	r2, [pc, #592]	@ (8002314 <HAL_GPIO_Init+0x2a8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d869      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020c6:	4a94      	ldr	r2, [pc, #592]	@ (8002318 <HAL_GPIO_Init+0x2ac>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04c      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020cc:	4a92      	ldr	r2, [pc, #584]	@ (8002318 <HAL_GPIO_Init+0x2ac>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d863      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020d2:	4a92      	ldr	r2, [pc, #584]	@ (800231c <HAL_GPIO_Init+0x2b0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d046      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
 80020d8:	4a90      	ldr	r2, [pc, #576]	@ (800231c <HAL_GPIO_Init+0x2b0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d85d      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d82a      	bhi.n	8002138 <HAL_GPIO_Init+0xcc>
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	d859      	bhi.n	800219a <HAL_GPIO_Init+0x12e>
 80020e6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ec <HAL_GPIO_Init+0x80>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002141 	.word	0x08002141
 80020f4:	08002153 	.word	0x08002153
 80020f8:	08002195 	.word	0x08002195
 80020fc:	0800219b 	.word	0x0800219b
 8002100:	0800219b 	.word	0x0800219b
 8002104:	0800219b 	.word	0x0800219b
 8002108:	0800219b 	.word	0x0800219b
 800210c:	0800219b 	.word	0x0800219b
 8002110:	0800219b 	.word	0x0800219b
 8002114:	0800219b 	.word	0x0800219b
 8002118:	0800219b 	.word	0x0800219b
 800211c:	0800219b 	.word	0x0800219b
 8002120:	0800219b 	.word	0x0800219b
 8002124:	0800219b 	.word	0x0800219b
 8002128:	0800219b 	.word	0x0800219b
 800212c:	0800219b 	.word	0x0800219b
 8002130:	08002149 	.word	0x08002149
 8002134:	0800215d 	.word	0x0800215d
 8002138:	4a79      	ldr	r2, [pc, #484]	@ (8002320 <HAL_GPIO_Init+0x2b4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800213e:	e02c      	b.n	800219a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e029      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	3304      	adds	r3, #4
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e024      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	3308      	adds	r3, #8
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e01f      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	330c      	adds	r3, #12
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e01a      	b.n	800219c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800216e:	2304      	movs	r3, #4
 8002170:	623b      	str	r3, [r7, #32]
          break;
 8002172:	e013      	b.n	800219c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800217c:	2308      	movs	r3, #8
 800217e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	611a      	str	r2, [r3, #16]
          break;
 8002186:	e009      	b.n	800219c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002188:	2308      	movs	r3, #8
 800218a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	615a      	str	r2, [r3, #20]
          break;
 8002192:	e003      	b.n	800219c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
          break;
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x130>
          break;
 800219a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2bff      	cmp	r3, #255	@ 0xff
 80021a0:	d801      	bhi.n	80021a6 <HAL_GPIO_Init+0x13a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_Init+0x13e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3304      	adds	r3, #4
 80021aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2bff      	cmp	r3, #255	@ 0xff
 80021b0:	d802      	bhi.n	80021b8 <HAL_GPIO_Init+0x14c>
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x152>
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	3b08      	subs	r3, #8
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	210f      	movs	r1, #15
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fa01 f303 	lsl.w	r3, r1, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	6a39      	ldr	r1, [r7, #32]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80b1 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002324 <HAL_GPIO_Init+0x2b8>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002324 <HAL_GPIO_Init+0x2b8>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002324 <HAL_GPIO_Init+0x2b8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002204:	4a48      	ldr	r2, [pc, #288]	@ (8002328 <HAL_GPIO_Init+0x2bc>)
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a40      	ldr	r2, [pc, #256]	@ (800232c <HAL_GPIO_Init+0x2c0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_GPIO_Init+0x1ec>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3f      	ldr	r2, [pc, #252]	@ (8002330 <HAL_GPIO_Init+0x2c4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00d      	beq.n	8002254 <HAL_GPIO_Init+0x1e8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3e      	ldr	r2, [pc, #248]	@ (8002334 <HAL_GPIO_Init+0x2c8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <HAL_GPIO_Init+0x1e4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3d      	ldr	r2, [pc, #244]	@ (8002338 <HAL_GPIO_Init+0x2cc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_GPIO_Init+0x1e0>
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 800224c:	2304      	movs	r3, #4
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002250:	2302      	movs	r3, #2
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1ee>
 8002258:	2300      	movs	r3, #0
 800225a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800226a:	492f      	ldr	r1, [pc, #188]	@ (8002328 <HAL_GPIO_Init+0x2bc>)
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002284:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	492c      	ldr	r1, [pc, #176]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002292:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	43db      	mvns	r3, r3
 800229a:	4928      	ldr	r1, [pc, #160]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 800229c:	4013      	ands	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	4922      	ldr	r1, [pc, #136]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022ba:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	491e      	ldr	r1, [pc, #120]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4918      	ldr	r1, [pc, #96]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	4914      	ldr	r1, [pc, #80]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d021      	beq.n	8002340 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022fc:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	490e      	ldr	r1, [pc, #56]	@ (800233c <HAL_GPIO_Init+0x2d0>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e021      	b.n	800234e <HAL_GPIO_Init+0x2e2>
 800230a:	bf00      	nop
 800230c:	10320000 	.word	0x10320000
 8002310:	10310000 	.word	0x10310000
 8002314:	10220000 	.word	0x10220000
 8002318:	10210000 	.word	0x10210000
 800231c:	10120000 	.word	0x10120000
 8002320:	10110000 	.word	0x10110000
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000
 800232c:	40010800 	.word	0x40010800
 8002330:	40010c00 	.word	0x40010c00
 8002334:	40011000 	.word	0x40011000
 8002338:	40011400 	.word	0x40011400
 800233c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_GPIO_Init+0x304>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	43db      	mvns	r3, r3
 8002348:	4909      	ldr	r1, [pc, #36]	@ (8002370 <HAL_GPIO_Init+0x304>)
 800234a:	4013      	ands	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	f47f ae8e 	bne.w	8002080 <HAL_GPIO_Init+0x14>
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	372c      	adds	r7, #44	@ 0x2c
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43d9      	mvns	r1, r3
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	400b      	ands	r3, r1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	611a      	str	r2, [r3, #16]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ee:	4a05      	ldr	r2, [pc, #20]	@ (8002404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f806 	bl	8002408 <HAL_GPIO_EXTI_Callback>
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40010400 	.word	0x40010400

08002408 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e272      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8087 	beq.w	800254a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00c      	beq.n	8002462 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002448:	4b8f      	ldr	r3, [pc, #572]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
 8002454:	4b8c      	ldr	r3, [pc, #560]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b89      	ldr	r3, [pc, #548]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_RCC_OscConfig+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d168      	bne.n	8002548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e24c      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x76>
 8002484:	4b80      	ldr	r3, [pc, #512]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7f      	ldr	r2, [pc, #508]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b7b      	ldr	r3, [pc, #492]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a7a      	ldr	r2, [pc, #488]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b78      	ldr	r3, [pc, #480]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbc>
 80024be:	4b72      	ldr	r3, [pc, #456]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a71      	ldr	r2, [pc, #452]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b68      	ldr	r3, [pc, #416]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a67      	ldr	r2, [pc, #412]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fbd4 	bl	8000ca4 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe fbd0 	bl	8000ca4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e200      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5d      	ldr	r3, [pc, #372]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe4>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fbc0 	bl	8000ca4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fbbc 	bl	8000ca4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1ec      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b53      	ldr	r3, [pc, #332]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x10c>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002562:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
 800256e:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c0      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4939      	ldr	r1, [pc, #228]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b36      	ldr	r3, [pc, #216]	@ (800268c <HAL_RCC_OscConfig+0x270>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fb75 	bl	8000ca4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fb71 	bl	8000ca4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a1      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4927      	ldr	r1, [pc, #156]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_RCC_OscConfig+0x270>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fb54 	bl	8000ca4 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fb50 	bl	8000ca4 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e180      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d019      	beq.n	8002666 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <HAL_RCC_OscConfig+0x274>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe fb34 	bl	8000ca4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fb30 	bl	8000ca4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e160      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <HAL_RCC_OscConfig+0x26c>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f000 fafe 	bl	8002c60 <RCC_Delay>
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <HAL_RCC_OscConfig+0x274>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266c:	f7fe fb1a 	bl	8000ca4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002672:	e00f      	b.n	8002694 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002674:	f7fe fb16 	bl	8000ca4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d908      	bls.n	8002694 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e146      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	42420000 	.word	0x42420000
 8002690:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b92      	ldr	r3, [pc, #584]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e9      	bne.n	8002674 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a6 	beq.w	80027fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b8b      	ldr	r3, [pc, #556]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	4a87      	ldr	r2, [pc, #540]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c8:	61d3      	str	r3, [r2, #28]
 80026ca:	4b85      	ldr	r3, [pc, #532]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b82      	ldr	r3, [pc, #520]	@ (80028e4 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b7f      	ldr	r3, [pc, #508]	@ (80028e4 <HAL_RCC_OscConfig+0x4c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a7e      	ldr	r2, [pc, #504]	@ (80028e4 <HAL_RCC_OscConfig+0x4c8>)
 80026ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f2:	f7fe fad7 	bl	8000ca4 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fa:	f7fe fad3 	bl	8000ca4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b64      	cmp	r3, #100	@ 0x64
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e103      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b75      	ldr	r3, [pc, #468]	@ (80028e4 <HAL_RCC_OscConfig+0x4c8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x312>
 8002720:	4b6f      	ldr	r3, [pc, #444]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a6e      	ldr	r2, [pc, #440]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e02d      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x334>
 8002736:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a69      	ldr	r2, [pc, #420]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b67      	ldr	r3, [pc, #412]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a66      	ldr	r2, [pc, #408]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
 800274e:	e01c      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d10c      	bne.n	8002772 <HAL_RCC_OscConfig+0x356>
 8002758:	4b61      	ldr	r3, [pc, #388]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a60      	ldr	r2, [pc, #384]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b5e      	ldr	r3, [pc, #376]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a5d      	ldr	r2, [pc, #372]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	e00b      	b.n	800278a <HAL_RCC_OscConfig+0x36e>
 8002772:	4b5b      	ldr	r3, [pc, #364]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a5a      	ldr	r2, [pc, #360]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6213      	str	r3, [r2, #32]
 800277e:	4b58      	ldr	r3, [pc, #352]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a57      	ldr	r2, [pc, #348]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d015      	beq.n	80027be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7fe fa87 	bl	8000ca4 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fa83 	bl	8000ca4 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e0b1      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b0:	4b4b      	ldr	r3, [pc, #300]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ee      	beq.n	800279a <HAL_RCC_OscConfig+0x37e>
 80027bc:	e014      	b.n	80027e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe fa71 	bl	8000ca4 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	e00a      	b.n	80027dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c6:	f7fe fa6d 	bl	8000ca4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e09b      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027dc:	4b40      	ldr	r3, [pc, #256]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ee      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b3c      	ldr	r3, [pc, #240]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a3b      	ldr	r2, [pc, #236]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8087 	beq.w	8002912 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d061      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d146      	bne.n	80028a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002818:	4b33      	ldr	r3, [pc, #204]	@ (80028e8 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fa41 	bl	8000ca4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fa3d 	bl	8000ca4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e06d      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284e:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4921      	ldr	r1, [pc, #132]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a19      	ldr	r1, [r3, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	430b      	orrs	r3, r1
 8002872:	491b      	ldr	r1, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fa11 	bl	8000ca4 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fa0d 	bl	8000ca4 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x46a>
 80028a4:	e035      	b.n	8002912 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe f9fa 	bl	8000ca4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe f9f6 	bl	8000ca4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e026      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x498>
 80028d2:	e01e      	b.n	8002912 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e019      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
 80028e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_OscConfig+0x500>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0d0      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d910      	bls.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b67      	ldr	r3, [pc, #412]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4965      	ldr	r1, [pc, #404]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a58      	ldr	r2, [pc, #352]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a52      	ldr	r2, [pc, #328]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800299e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d040      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d115      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b41      	ldr	r3, [pc, #260]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e073      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4936      	ldr	r1, [pc, #216]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe f948 	bl	8000ca4 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe f944 	bl	8000ca4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e053      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d210      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4922      	ldr	r1, [pc, #136]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	@ (8002aec <HAL_RCC_ClockConfig+0x1cc>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_RCC_ClockConfig+0x1d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd ff36 	bl	8000940 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08006a90 	.word	0x08006a90
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x30>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x36>
 8002b22:	e027      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b26:	613b      	str	r3, [r7, #16]
      break;
 8002b28:	e027      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b34:	5cd3      	ldrb	r3, [r2, r3]
 8002b36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d010      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b42:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	0c5b      	lsrs	r3, r3, #17
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e004      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	613b      	str	r3, [r7, #16]
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b76:	613b      	str	r3, [r7, #16]
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	693b      	ldr	r3, [r7, #16]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	08006aa8 	.word	0x08006aa8
 8002b94:	08006ab8 	.word	0x08006ab8
 8002b98:	003d0900 	.word	0x003d0900

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	@ (8002bac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb4:	f7ff fff2 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	4903      	ldr	r1, [pc, #12]	@ (8002bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08006aa0 	.word	0x08006aa0

08002bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bdc:	f7ff ffde 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0adb      	lsrs	r3, r3, #11
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4903      	ldr	r1, [pc, #12]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08006aa0 	.word	0x08006aa0

08002c00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_RCC_GetClockConfig+0x58>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0203 	and.w	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_RCC_GetClockConfig+0x58>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_RCC_GetClockConfig+0x58>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <HAL_RCC_GetClockConfig+0x58>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_GetClockConfig+0x5c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0207 	and.w	r2, r3, #7
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40022000 	.word	0x40022000

08002c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <RCC_Delay+0x34>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <RCC_Delay+0x38>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	0a5b      	lsrs	r3, r3, #9
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c7c:	bf00      	nop
  }
  while (Delay --);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f9      	bne.n	8002c7c <RCC_Delay+0x1c>
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000000 	.word	0x20000000
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d07d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	61d3      	str	r3, [r2, #28]
 8002cd4:	4b49      	ldr	r3, [pc, #292]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	4b46      	ldr	r3, [pc, #280]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d118      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf0:	4b43      	ldr	r3, [pc, #268]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a42      	ldr	r2, [pc, #264]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfc:	f7fd ffd2 	bl	8000ca4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7fd ffce 	bl	8000ca4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e06d      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d22:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d02e      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d027      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d40:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d50:	4b2c      	ldr	r3, [pc, #176]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d56:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d014      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fd ff9d 	bl	8000ca4 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fd ff99 	bl	8000ca4 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e036      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4917      	ldr	r1, [pc, #92]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a13      	ldr	r2, [pc, #76]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	490b      	ldr	r1, [pc, #44]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dde:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4904      	ldr	r1, [pc, #16]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	42420440 	.word	0x42420440

08002e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e041      	b.n	8002e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f839 	bl	8002ea6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	4610      	mov	r0, r2
 8002e48:	f000 f9b4 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e03a      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_TIM_Base_Start_IT+0x98>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x58>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x58>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x58>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a13      	ldr	r2, [pc, #76]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d010      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	e007      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40000800 	.word	0x40000800

08002f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0202 	mvn.w	r2, #2
 8002f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f8ed 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8e0 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8ef 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d122      	bne.n	800300c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0204 	mvn.w	r2, #4
 8002fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8c3 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002ff8:	e005      	b.n	8003006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8b6 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f8c5 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d122      	bne.n	8003060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d11b      	bne.n	8003060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0208 	mvn.w	r2, #8
 8003030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f899 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f88c 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f89b 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b10      	cmp	r3, #16
 800306c:	d122      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d11b      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0210 	mvn.w	r2, #16
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2208      	movs	r2, #8
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f86f 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f862 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f871 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0201 	mvn.w	r2, #1
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fab6 	bl	800064c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	2b80      	cmp	r3, #128	@ 0x80
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b80      	cmp	r3, #128	@ 0x80
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8bf 	bl	800328a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003116:	2b40      	cmp	r3, #64	@ 0x40
 8003118:	d10e      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003124:	2b40      	cmp	r3, #64	@ 0x40
 8003126:	d107      	bne.n	8003138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f835 	bl	80031a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b20      	cmp	r3, #32
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0220 	mvn.w	r2, #32
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f88a 	bl	8003278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a29      	ldr	r2, [pc, #164]	@ (800326c <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a26      	ldr	r2, [pc, #152]	@ (8003270 <TIM_Base_SetConfig+0xbc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a25      	ldr	r2, [pc, #148]	@ (8003274 <TIM_Base_SetConfig+0xc0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <TIM_Base_SetConfig+0xb8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a19      	ldr	r2, [pc, #100]	@ (8003270 <TIM_Base_SetConfig+0xbc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <TIM_Base_SetConfig+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a07      	ldr	r2, [pc, #28]	@ (800326c <TIM_Base_SetConfig+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800

08003278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e042      	b.n	8003334 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fafe 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f91d 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b20      	cmp	r3, #32
 800335a:	d16d      	bne.n	8003438 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Transmit+0x2c>
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e066      	b.n	800343a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	@ 0x21
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337a:	f7fd fc93 	bl	8000ca4 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003394:	d108      	bne.n	80033a8 <HAL_UART_Transmit+0x6c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e003      	b.n	80033b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b0:	e02a      	b.n	8003408 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f840 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e036      	b.n	800343a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10b      	bne.n	80033ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3302      	adds	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e007      	b.n	80033fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	781a      	ldrb	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1cf      	bne.n	80033b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2200      	movs	r2, #0
 800341a:	2140      	movs	r1, #64	@ 0x40
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f810 	bl	8003442 <UART_WaitOnFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e006      	b.n	800343a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b090      	sub	sp, #64	@ 0x40
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003452:	e050      	b.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d04c      	beq.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800345c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x30>
 8003462:	f7fd fc1f 	bl	8000ca4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800346e:	429a      	cmp	r2, r3
 8003470:	d241      	bcs.n	80034f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003492:	637a      	str	r2, [r7, #52]	@ 0x34
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e5      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	613b      	str	r3, [r7, #16]
   return(result);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034c6:	623a      	str	r2, [r7, #32]
 80034c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	69f9      	ldr	r1, [r7, #28]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e5      	bne.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00f      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d09f      	beq.n	8003454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3740      	adds	r7, #64	@ 0x40
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800355a:	f023 030c 	bic.w	r3, r3, #12
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	430b      	orrs	r3, r1
 8003566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2c      	ldr	r2, [pc, #176]	@ (8003634 <UART_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d103      	bne.n	8003590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff fb26 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	e002      	b.n	8003596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003590:	f7ff fb0e 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	4a22      	ldr	r2, [pc, #136]	@ (8003638 <UART_SetConfig+0x118>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	0119      	lsls	r1, r3, #4
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <UART_SetConfig+0x118>)
 80035ce:	fba3 0302 	umull	r0, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2064      	movs	r0, #100	@ 0x64
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	@ 0x32
 80035e0:	4a15      	ldr	r2, [pc, #84]	@ (8003638 <UART_SetConfig+0x118>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ec:	4419      	add	r1, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009a      	lsls	r2, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb2 f2f3 	udiv	r2, r2, r3
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <UART_SetConfig+0x118>)
 8003606:	fba3 0302 	umull	r0, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2064      	movs	r0, #100	@ 0x64
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3332      	adds	r3, #50	@ 0x32
 8003618:	4a07      	ldr	r2, [pc, #28]	@ (8003638 <UART_SetConfig+0x118>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	440a      	add	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40013800 	.word	0x40013800
 8003638:	51eb851f 	.word	0x51eb851f

0800363c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003642:	f3ef 8305 	mrs	r3, IPSR
 8003646:	60bb      	str	r3, [r7, #8]
  return(result);
 8003648:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	607b      	str	r3, [r7, #4]
  return(result);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <osKernelInitialize+0x32>
 800365a:	4b10      	ldr	r3, [pc, #64]	@ (800369c <osKernelInitialize+0x60>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d109      	bne.n	8003676 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003662:	f3ef 8311 	mrs	r3, BASEPRI
 8003666:	603b      	str	r3, [r7, #0]
  return(result);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800366e:	f06f 0305 	mvn.w	r3, #5
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e00c      	b.n	8003690 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003676:	4b09      	ldr	r3, [pc, #36]	@ (800369c <osKernelInitialize+0x60>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800367e:	4b07      	ldr	r3, [pc, #28]	@ (800369c <osKernelInitialize+0x60>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e002      	b.n	8003690 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003690:	68fb      	ldr	r3, [r7, #12]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	20000208 	.word	0x20000208

080036a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a6:	f3ef 8305 	mrs	r3, IPSR
 80036aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b2:	f3ef 8310 	mrs	r3, PRIMASK
 80036b6:	607b      	str	r3, [r7, #4]
  return(result);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <osKernelStart+0x32>
 80036be:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <osKernelStart+0x64>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d109      	bne.n	80036da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036c6:	f3ef 8311 	mrs	r3, BASEPRI
 80036ca:	603b      	str	r3, [r7, #0]
  return(result);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <osKernelStart+0x3a>
    stat = osErrorISR;
 80036d2:	f06f 0305 	mvn.w	r3, #5
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e00e      	b.n	80036f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036da:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <osKernelStart+0x64>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <osKernelStart+0x64>)
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80036e8:	f001 f890 	bl	800480c <vTaskStartScheduler>
      stat = osOK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e002      	b.n	80036f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036f8:	68fb      	ldr	r3, [r7, #12]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000208 	.word	0x20000208

08003708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b092      	sub	sp, #72	@ 0x48
 800370c:	af04      	add	r7, sp, #16
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003718:	f3ef 8305 	mrs	r3, IPSR
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 8094 	bne.w	800384e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003726:	f3ef 8310 	mrs	r3, PRIMASK
 800372a:	623b      	str	r3, [r7, #32]
  return(result);
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 808d 	bne.w	800384e <osThreadNew+0x146>
 8003734:	4b48      	ldr	r3, [pc, #288]	@ (8003858 <osThreadNew+0x150>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d106      	bne.n	800374a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800373c:	f3ef 8311 	mrs	r3, BASEPRI
 8003740:	61fb      	str	r3, [r7, #28]
  return(result);
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 8082 	bne.w	800384e <osThreadNew+0x146>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d07e      	beq.n	800384e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003754:	2318      	movs	r3, #24
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003758:	2300      	movs	r3, #0
 800375a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800375c:	f107 031b 	add.w	r3, r7, #27
 8003760:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d045      	beq.n	80037fa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <osThreadNew+0x74>
        name = attr->name;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800378a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <osThreadNew+0x9a>
 8003790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003792:	2b38      	cmp	r3, #56	@ 0x38
 8003794:	d805      	bhi.n	80037a2 <osThreadNew+0x9a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <osThreadNew+0x9e>
        return (NULL);
 80037a2:	2300      	movs	r3, #0
 80037a4:	e054      	b.n	8003850 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00e      	beq.n	80037dc <osThreadNew+0xd4>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80037c4:	d90a      	bls.n	80037dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <osThreadNew+0xd4>
        mem = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037da:	e010      	b.n	80037fe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10c      	bne.n	80037fe <osThreadNew+0xf6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <osThreadNew+0xf6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <osThreadNew+0xf6>
          mem = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f8:	e001      	b.n	80037fe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	2b01      	cmp	r3, #1
 8003802:	d110      	bne.n	8003826 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800380c:	9202      	str	r2, [sp, #8]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003818:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fe24 	bl	8004468 <xTaskCreateStatic>
 8003820:	4603      	mov	r3, r0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e013      	b.n	800384e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	d110      	bne.n	800384e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	b29a      	uxth	r2, r3
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fe71 	bl	8004526 <xTaskCreate>
 8003844:	4603      	mov	r3, r0
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <osThreadNew+0x146>
          hTask = NULL;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3738      	adds	r7, #56	@ 0x38
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000208 	.word	0x20000208

0800385c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003864:	f3ef 8305 	mrs	r3, IPSR
 8003868:	613b      	str	r3, [r7, #16]
  return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003870:	f3ef 8310 	mrs	r3, PRIMASK
 8003874:	60fb      	str	r3, [r7, #12]
  return(result);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <osDelay+0x34>
 800387c:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <osDelay+0x58>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d109      	bne.n	8003898 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003884:	f3ef 8311 	mrs	r3, BASEPRI
 8003888:	60bb      	str	r3, [r7, #8]
  return(result);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <osDelay+0x3c>
    stat = osErrorISR;
 8003890:	f06f 0305 	mvn.w	r3, #5
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	e007      	b.n	80038a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 ff7c 	bl	80047a0 <vTaskDelay>
    }
  }

  return (stat);
 80038a8:	697b      	ldr	r3, [r7, #20]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000208 	.word	0x20000208

080038b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a06      	ldr	r2, [pc, #24]	@ (80038e0 <vApplicationGetIdleTaskMemory+0x28>)
 80038c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4a05      	ldr	r2, [pc, #20]	@ (80038e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80038ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2280      	movs	r2, #128	@ 0x80
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	2000020c 	.word	0x2000020c
 80038e4:	20000268 	.word	0x20000268

080038e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a07      	ldr	r2, [pc, #28]	@ (8003914 <vApplicationGetTimerTaskMemory+0x2c>)
 80038f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a06      	ldr	r2, [pc, #24]	@ (8003918 <vApplicationGetTimerTaskMemory+0x30>)
 80038fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003906:	601a      	str	r2, [r3, #0]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000468 	.word	0x20000468
 8003918:	200004c4 	.word	0x200004c4

0800391c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d103      	bne.n	80039d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e00c      	b.n	80039f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3308      	adds	r3, #8
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e002      	b.n	80039e6 <vListInsert+0x2e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d2f6      	bcs.n	80039e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6852      	ldr	r2, [r2, #4]
 8003a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d103      	bne.n	8003a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
	...

08003a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003aa2:	bf00      	nop
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003aa8:	f001 fff8 	bl	8005a9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	68f9      	ldr	r1, [r7, #12]
 8003ab6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	441a      	add	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	441a      	add	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	22ff      	movs	r2, #255	@ 0xff
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	@ 0xff
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d114      	bne.n	8003b28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d01a      	beq.n	8003b3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3310      	adds	r3, #16
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f910 	bl	8004d30 <xTaskRemoveFromEventList>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <xQueueGenericReset+0xd0>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	e009      	b.n	8003b3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3310      	adds	r3, #16
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fef5 	bl	800391c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3324      	adds	r3, #36	@ 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fef0 	bl	800391c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b3c:	f001 ffde 	bl	8005afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08e      	sub	sp, #56	@ 0x38
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <xQueueGenericCreateStatic+0x56>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <xQueueGenericCreateStatic+0x5a>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericCreateStatic+0x5c>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	623b      	str	r3, [r7, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xQueueGenericCreateStatic+0x84>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <xQueueGenericCreateStatic+0x88>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <xQueueGenericCreateStatic+0x8a>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	61fb      	str	r3, [r7, #28]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bf6:	2350      	movs	r3, #80	@ 0x50
 8003bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b50      	cmp	r3, #80	@ 0x50
 8003bfe:	d00b      	beq.n	8003c18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61bb      	str	r3, [r7, #24]
}
 8003c12:	bf00      	nop
 8003c14:	bf00      	nop
 8003c16:	e7fd      	b.n	8003c14 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c2a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	4613      	mov	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f805 	bl	8003c48 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3730      	adds	r7, #48	@ 0x30
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e002      	b.n	8003c6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c76:	2101      	movs	r1, #1
 8003c78:	69b8      	ldr	r0, [r7, #24]
 8003c7a:	f7ff feff 	bl	8003a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	@ 0x38
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <xQueueGenericSend+0x34>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <xQueueGenericSend+0x42>
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueGenericSend+0x46>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericSend+0x48>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <xQueueGenericSend+0x64>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d103      	bne.n	8003d02 <xQueueGenericSend+0x72>
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <xQueueGenericSend+0x76>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <xQueueGenericSend+0x78>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <xQueueGenericSend+0x94>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	623b      	str	r3, [r7, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d24:	f001 f9c8 	bl	80050b8 <xTaskGetSchedulerState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <xQueueGenericSend+0xa4>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <xQueueGenericSend+0xa8>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <xQueueGenericSend+0xaa>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <xQueueGenericSend+0xc6>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fb      	str	r3, [r7, #28]
}
 8003d50:	bf00      	nop
 8003d52:	bf00      	nop
 8003d54:	e7fd      	b.n	8003d52 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d56:	f001 fea1 	bl	8005a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <xQueueGenericSend+0xdc>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d129      	bne.n	8003dc0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d72:	f000 fa0d 	bl	8004190 <prvCopyDataToQueue>
 8003d76:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d010      	beq.n	8003da2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	3324      	adds	r3, #36	@ 0x24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ffd3 	bl	8004d30 <xTaskRemoveFromEventList>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d90:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	e00a      	b.n	8003db8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003db8:	f001 fea0 	bl	8005afc <vPortExitCritical>
				return pdPASS;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e063      	b.n	8003e88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dc6:	f001 fe99 	bl	8005afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e05c      	b.n	8003e88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f80d 	bl	8004df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003de2:	f001 fe8b 	bl	8005afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003de6:	f000 fd79 	bl	80048dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dea:	f001 fe57 	bl	8005a9c <vPortEnterCritical>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfa:	d103      	bne.n	8003e04 <xQueueGenericSend+0x174>
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e0a:	b25b      	sxtb	r3, r3
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d103      	bne.n	8003e1a <xQueueGenericSend+0x18a>
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e1a:	f001 fe6f 	bl	8005afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e1e:	1d3a      	adds	r2, r7, #4
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fffc 	bl	8004e24 <xTaskCheckForTimeOut>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d124      	bne.n	8003e7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e34:	f000 faa4 	bl	8004380 <prvIsQueueFull>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d018      	beq.n	8003e70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	3310      	adds	r3, #16
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 ff20 	bl	8004c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e4e:	f000 fa2f 	bl	80042b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e52:	f000 fd51 	bl	80048f8 <xTaskResumeAll>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f af7c 	bne.w	8003d56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <xQueueGenericSend+0x200>)
 8003e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	e772      	b.n	8003d56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e72:	f000 fa1d 	bl	80042b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e76:	f000 fd3f 	bl	80048f8 <xTaskResumeAll>
 8003e7a:	e76c      	b.n	8003d56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e7e:	f000 fa17 	bl	80042b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e82:	f000 fd39 	bl	80048f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e86:	2300      	movs	r3, #0
		}
	}
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3738      	adds	r7, #56	@ 0x38
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08e      	sub	sp, #56	@ 0x38
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSendFromISR+0x3e>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericSendFromISR+0x42>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericSendFromISR+0x44>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	623b      	str	r3, [r7, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d103      	bne.n	8003f02 <xQueueGenericSendFromISR+0x6e>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <xQueueGenericSendFromISR+0x72>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueGenericSendFromISR+0x74>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61fb      	str	r3, [r7, #28]
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f24:	f001 fe7c 	bl	8005c20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f28:	f3ef 8211 	mrs	r2, BASEPRI
 8003f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61ba      	str	r2, [r7, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <xQueueGenericSendFromISR+0xc2>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d12c      	bne.n	8003fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f66:	f000 f913 	bl	8004190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d112      	bne.n	8003f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d016      	beq.n	8003faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	3324      	adds	r3, #36	@ 0x24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fed5 	bl	8004d30 <xTaskRemoveFromEventList>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e007      	b.n	8003faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	b25a      	sxtb	r2, r3
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003faa:	2301      	movs	r3, #1
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003fae:	e001      	b.n	8003fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3738      	adds	r7, #56	@ 0x38
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08c      	sub	sp, #48	@ 0x30
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <xQueueReceive+0x32>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	623b      	str	r3, [r7, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	e7fd      	b.n	8003ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d103      	bne.n	800400c <xQueueReceive+0x40>
 8004004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <xQueueReceive+0x44>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <xQueueReceive+0x46>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <xQueueReceive+0x62>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	61fb      	str	r3, [r7, #28]
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	e7fd      	b.n	800402a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800402e:	f001 f843 	bl	80050b8 <xTaskGetSchedulerState>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <xQueueReceive+0x72>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <xQueueReceive+0x76>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <xQueueReceive+0x78>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xQueueReceive+0x94>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61bb      	str	r3, [r7, #24]
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004060:	f001 fd1c 	bl	8005a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800406a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01f      	beq.n	80040b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004074:	f000 f8f6 	bl	8004264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00f      	beq.n	80040a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	3310      	adds	r3, #16
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fe4f 	bl	8004d30 <xTaskRemoveFromEventList>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004098:	4b3c      	ldr	r3, [pc, #240]	@ (800418c <xQueueReceive+0x1c0>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040a8:	f001 fd28 	bl	8005afc <vPortExitCritical>
				return pdPASS;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e069      	b.n	8004184 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040b6:	f001 fd21 	bl	8005afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e062      	b.n	8004184 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fe95 	bl	8004df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ce:	2301      	movs	r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040d2:	f001 fd13 	bl	8005afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040d6:	f000 fc01 	bl	80048dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040da:	f001 fcdf 	bl	8005a9c <vPortEnterCritical>
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040e4:	b25b      	sxtb	r3, r3
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d103      	bne.n	80040f4 <xQueueReceive+0x128>
 80040ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d103      	bne.n	800410a <xQueueReceive+0x13e>
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800410a:	f001 fcf7 	bl	8005afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800410e:	1d3a      	adds	r2, r7, #4
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fe84 	bl	8004e24 <xTaskCheckForTimeOut>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d123      	bne.n	800416a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004124:	f000 f916 	bl	8004354 <prvIsQueueEmpty>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	3324      	adds	r3, #36	@ 0x24
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fda8 	bl	8004c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800413c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800413e:	f000 f8b7 	bl	80042b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004142:	f000 fbd9 	bl	80048f8 <xTaskResumeAll>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d189      	bne.n	8004060 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <xQueueReceive+0x1c0>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	e780      	b.n	8004060 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800415e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004160:	f000 f8a6 	bl	80042b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004164:	f000 fbc8 	bl	80048f8 <xTaskResumeAll>
 8004168:	e77a      	b.n	8004060 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800416a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800416c:	f000 f8a0 	bl	80042b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004170:	f000 fbc2 	bl	80048f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004176:	f000 f8ed 	bl	8004354 <prvIsQueueEmpty>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	f43f af6f 	beq.w	8004060 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004184:	4618      	mov	r0, r3
 8004186:	3730      	adds	r7, #48	@ 0x30
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d14d      	bne.n	8004252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 ff9a 	bl	80050f4 <xTaskPriorityDisinherit>
 80041c0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	e043      	b.n	8004252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d119      	bne.n	8004204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6898      	ldr	r0, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	461a      	mov	r2, r3
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	f002 f9b1 	bl	8006542 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d32b      	bcc.n	8004252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	e026      	b.n	8004252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68d8      	ldr	r0, [r3, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	461a      	mov	r2, r3
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	f002 f997 	bl	8006542 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	425b      	negs	r3, r3
 800421e:	441a      	add	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d207      	bcs.n	8004240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	425b      	negs	r3, r3
 800423a:	441a      	add	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d105      	bne.n	8004252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3b01      	subs	r3, #1
 8004250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800425a:	697b      	ldr	r3, [r7, #20]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	441a      	add	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d303      	bcc.n	8004298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68d9      	ldr	r1, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	461a      	mov	r2, r3
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f002 f94d 	bl	8006542 <memcpy>
	}
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042b8:	f001 fbf0 	bl	8005a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c4:	e011      	b.n	80042ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d012      	beq.n	80042f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fd2c 	bl	8004d30 <xTaskRemoveFromEventList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042de:	f000 fe05 	bl	8004eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	dce9      	bgt.n	80042c6 <prvUnlockQueue+0x16>
 80042f2:	e000      	b.n	80042f6 <prvUnlockQueue+0x46>
					break;
 80042f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042fe:	f001 fbfd 	bl	8005afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004302:	f001 fbcb 	bl	8005a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800430c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800430e:	e011      	b.n	8004334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fd07 	bl	8004d30 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004328:	f000 fde0 	bl	8004eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800432c:	7bbb      	ldrb	r3, [r7, #14]
 800432e:	3b01      	subs	r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dce9      	bgt.n	8004310 <prvUnlockQueue+0x60>
 800433c:	e000      	b.n	8004340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800433e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004348:	f001 fbd8 	bl	8005afc <vPortExitCritical>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800435c:	f001 fb9e 	bl	8005a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e001      	b.n	8004372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004372:	f001 fbc3 	bl	8005afc <vPortExitCritical>

	return xReturn;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004388:	f001 fb88 	bl	8005a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004394:	429a      	cmp	r2, r3
 8004396:	d102      	bne.n	800439e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e001      	b.n	80043a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043a2:	f001 fbab 	bl	8005afc <vPortExitCritical>

	return xReturn;
 80043a6:	68fb      	ldr	r3, [r7, #12]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e014      	b.n	80043ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043c0:	4a0e      	ldr	r2, [pc, #56]	@ (80043fc <vQueueAddToRegistry+0x4c>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043cc:	490b      	ldr	r1, [pc, #44]	@ (80043fc <vQueueAddToRegistry+0x4c>)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043d6:	4a09      	ldr	r2, [pc, #36]	@ (80043fc <vQueueAddToRegistry+0x4c>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043e2:	e006      	b.n	80043f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b07      	cmp	r3, #7
 80043ee:	d9e7      	bls.n	80043c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr
 80043fc:	200008c4 	.word	0x200008c4

08004400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004410:	f001 fb44 	bl	8005a9c <vPortEnterCritical>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800441a:	b25b      	sxtb	r3, r3
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d103      	bne.n	800442a <vQueueWaitForMessageRestricted+0x2a>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004430:	b25b      	sxtb	r3, r3
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d103      	bne.n	8004440 <vQueueWaitForMessageRestricted+0x40>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004440:	f001 fb5c 	bl	8005afc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3324      	adds	r3, #36	@ 0x24
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fc3f 	bl	8004cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800445a:	6978      	ldr	r0, [r7, #20]
 800445c:	f7ff ff28 	bl	80042b0 <prvUnlockQueue>
	}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08e      	sub	sp, #56	@ 0x38
 800446c:	af04      	add	r7, sp, #16
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <xTaskCreateStatic+0x2c>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	623b      	str	r3, [r7, #32]
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	e7fd      	b.n	8004490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	61fb      	str	r3, [r7, #28]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044b2:	235c      	movs	r3, #92	@ 0x5c
 80044b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80044ba:	d00b      	beq.n	80044d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	61bb      	str	r3, [r7, #24]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <xTaskCreateStatic+0xb0>
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044f2:	2300      	movs	r3, #0
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f850 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004512:	f000 f8d5 	bl	80046c0 <prvAddNewTaskToReadyList>
 8004516:	e001      	b.n	800451c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800451c:	697b      	ldr	r3, [r7, #20]
	}
 800451e:	4618      	mov	r0, r3
 8004520:	3728      	adds	r7, #40	@ 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08c      	sub	sp, #48	@ 0x30
 800452a:	af04      	add	r7, sp, #16
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 fbb0 	bl	8005ca0 <pvPortMalloc>
 8004540:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004548:	205c      	movs	r0, #92	@ 0x5c
 800454a:	f001 fba9 	bl	8005ca0 <pvPortMalloc>
 800454e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
 800455c:	e005      	b.n	800456a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f001 fc66 	bl	8005e30 <vPortFree>
 8004564:	e001      	b.n	800456a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	2300      	movs	r3, #0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f80e 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004594:	69f8      	ldr	r0, [r7, #28]
 8004596:	f000 f893 	bl	80046c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e002      	b.n	80045a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045a6:	69bb      	ldr	r3, [r7, #24]
	}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	461a      	mov	r2, r3
 80045c8:	21a5      	movs	r1, #165	@ 0xa5
 80045ca:	f001 ff3f 	bl	800644c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	3b01      	subs	r3, #1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	617b      	str	r3, [r7, #20]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e012      	b.n	8004636 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	7819      	ldrb	r1, [r3, #0]
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	3334      	adds	r3, #52	@ 0x34
 8004620:	460a      	mov	r2, r1
 8004622:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d9e9      	bls.n	8004610 <prvInitialiseNewTask+0x60>
 800463c:	e000      	b.n	8004640 <prvInitialiseNewTask+0x90>
		{
			break;
 800463e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2b37      	cmp	r3, #55	@ 0x37
 800464c:	d901      	bls.n	8004652 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800464e:	2337      	movs	r3, #55	@ 0x37
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004656:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800465c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f976 	bl	800395a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f971 	bl	800395a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68f9      	ldr	r1, [r7, #12]
 80046a0:	69b8      	ldr	r0, [r7, #24]
 80046a2:	f001 f90b 	bl	80058bc <pxPortInitialiseStack>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80046ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046b8:	bf00      	nop
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c8:	f001 f9e8 	bl	8005a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d110      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046ec:	f000 fc22 	bl	8004f34 <prvInitialiseTaskLists>
 80046f0:	e00d      	b.n	800470e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	429a      	cmp	r2, r3
 8004706:	d802      	bhi.n	800470e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d903      	bls.n	8004734 <prvAddNewTaskToReadyList+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvAddNewTaskToReadyList+0xd8>)
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7ff f911 	bl	8003972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004750:	f001 f9d4 	bl	8005afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00e      	beq.n	800477a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d207      	bcs.n	800477a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <prvAddNewTaskToReadyList+0xdc>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000dd8 	.word	0x20000dd8
 8004788:	20000904 	.word	0x20000904
 800478c:	20000de4 	.word	0x20000de4
 8004790:	20000df4 	.word	0x20000df4
 8004794:	20000de0 	.word	0x20000de0
 8004798:	20000908 	.word	0x20000908
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <vTaskDelay+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <vTaskDelay+0x32>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	60bb      	str	r3, [r7, #8]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047d2:	f000 f883 	bl	80048dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fcfb 	bl	80051d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047de:	f000 f88b 	bl	80048f8 <xTaskResumeAll>
 80047e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <vTaskDelay+0x68>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000e00 	.word	0x20000e00
 8004808:	e000ed04 	.word	0xe000ed04

0800480c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800481a:	463a      	mov	r2, r7
 800481c:	1d39      	adds	r1, r7, #4
 800481e:	f107 0308 	add.w	r3, r7, #8
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f848 	bl	80038b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	9202      	str	r2, [sp, #8]
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	2300      	movs	r3, #0
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	460a      	mov	r2, r1
 800483a:	4922      	ldr	r1, [pc, #136]	@ (80048c4 <vTaskStartScheduler+0xb8>)
 800483c:	4822      	ldr	r0, [pc, #136]	@ (80048c8 <vTaskStartScheduler+0xbc>)
 800483e:	f7ff fe13 	bl	8004468 <xTaskCreateStatic>
 8004842:	4603      	mov	r3, r0
 8004844:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <vTaskStartScheduler+0xc0>)
 8004846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <vTaskStartScheduler+0xc0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004850:	2301      	movs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e001      	b.n	800485a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d102      	bne.n	8004866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004860:	f000 fd0c 	bl	800527c <xTimerCreateTimerTask>
 8004864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d116      	bne.n	800489a <vTaskStartScheduler+0x8e>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	613b      	str	r3, [r7, #16]
}
 800487e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004880:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <vTaskStartScheduler+0xc4>)
 8004882:	f04f 32ff 	mov.w	r2, #4294967295
 8004886:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <vTaskStartScheduler+0xc8>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800488e:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <vTaskStartScheduler+0xcc>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004894:	f001 f890 	bl	80059b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004898:	e00f      	b.n	80048ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d10b      	bne.n	80048ba <vTaskStartScheduler+0xae>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <vTaskStartScheduler+0xaa>
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08006a30 	.word	0x08006a30
 80048c8:	08004f05 	.word	0x08004f05
 80048cc:	20000dfc 	.word	0x20000dfc
 80048d0:	20000df8 	.word	0x20000df8
 80048d4:	20000de4 	.word	0x20000de4
 80048d8:	20000ddc 	.word	0x20000ddc

080048dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <vTaskSuspendAll+0x18>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a03      	ldr	r2, [pc, #12]	@ (80048f4 <vTaskSuspendAll+0x18>)
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000e00 	.word	0x20000e00

080048f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004906:	4b42      	ldr	r3, [pc, #264]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <xTaskResumeAll+0x2e>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004926:	f001 f8b9 	bl	8005a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800492a:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <xTaskResumeAll+0x118>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3b01      	subs	r3, #1
 8004930:	4a37      	ldr	r2, [pc, #220]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004932:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004934:	4b36      	ldr	r3, [pc, #216]	@ (8004a10 <xTaskResumeAll+0x118>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d162      	bne.n	8004a02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <xTaskResumeAll+0x11c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d05e      	beq.n	8004a02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004944:	e02f      	b.n	80049a6 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <xTaskResumeAll+0x120>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff f868 	bl	8003a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff f863 	bl	8003a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <xTaskResumeAll+0x124>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d903      	bls.n	8004976 <xTaskResumeAll+0x7e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <xTaskResumeAll+0x124>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a27      	ldr	r2, [pc, #156]	@ (8004a20 <xTaskResumeAll+0x128>)
 8004984:	441a      	add	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe fff0 	bl	8003972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b23      	ldr	r3, [pc, #140]	@ (8004a24 <xTaskResumeAll+0x12c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80049a0:	4b21      	ldr	r3, [pc, #132]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <xTaskResumeAll+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1cb      	bne.n	8004946 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049b4:	f000 fb5c 	bl	8005070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049b8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <xTaskResumeAll+0x134>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d010      	beq.n	80049e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049c4:	f000 f844 	bl	8004a50 <xTaskIncrementTick>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049ce:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f1      	bne.n	80049c4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80049e0:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <xTaskResumeAll+0x134>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <xTaskResumeAll+0x130>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049ee:	2301      	movs	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <xTaskResumeAll+0x138>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a02:	f001 f87b 	bl	8005afc <vPortExitCritical>

	return xAlreadyYielded;
 8004a06:	68bb      	ldr	r3, [r7, #8]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000e00 	.word	0x20000e00
 8004a14:	20000dd8 	.word	0x20000dd8
 8004a18:	20000d98 	.word	0x20000d98
 8004a1c:	20000de0 	.word	0x20000de0
 8004a20:	20000908 	.word	0x20000908
 8004a24:	20000904 	.word	0x20000904
 8004a28:	20000dec 	.word	0x20000dec
 8004a2c:	20000de8 	.word	0x20000de8
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a3a:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <xTaskGetTickCount+0x18>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a40:	687b      	ldr	r3, [r7, #4]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	20000ddc 	.word	0x20000ddc

08004a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5a:	4b52      	ldr	r3, [pc, #328]	@ (8004ba4 <xTaskIncrementTick+0x154>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 808f 	bne.w	8004b82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a64:	4b50      	ldr	r3, [pc, #320]	@ (8004ba8 <xTaskIncrementTick+0x158>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba8 <xTaskIncrementTick+0x158>)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d121      	bne.n	8004abc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a78:	4b4c      	ldr	r3, [pc, #304]	@ (8004bac <xTaskIncrementTick+0x15c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	603b      	str	r3, [r7, #0]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xTaskIncrementTick+0x46>
 8004a9a:	4b44      	ldr	r3, [pc, #272]	@ (8004bac <xTaskIncrementTick+0x15c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <xTaskIncrementTick+0x160>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <xTaskIncrementTick+0x15c>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4a41      	ldr	r2, [pc, #260]	@ (8004bb0 <xTaskIncrementTick+0x160>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b41      	ldr	r3, [pc, #260]	@ (8004bb4 <xTaskIncrementTick+0x164>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb4 <xTaskIncrementTick+0x164>)
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	f000 fada 	bl	8005070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004abc:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb8 <xTaskIncrementTick+0x168>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d34e      	bcc.n	8004b64 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac6:	4b39      	ldr	r3, [pc, #228]	@ (8004bac <xTaskIncrementTick+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <xTaskIncrementTick+0x84>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <xTaskIncrementTick+0x86>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ada:	4b37      	ldr	r3, [pc, #220]	@ (8004bb8 <xTaskIncrementTick+0x168>)
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae0:	601a      	str	r2, [r3, #0]
					break;
 8004ae2:	e03f      	b.n	8004b64 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ae4:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <xTaskIncrementTick+0x15c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d203      	bcs.n	8004b04 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004afc:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb8 <xTaskIncrementTick+0x168>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
						break;
 8004b02:	e02f      	b.n	8004b64 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe ff8d 	bl	8003a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe ff84 	bl	8003a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b24:	4b25      	ldr	r3, [pc, #148]	@ (8004bbc <xTaskIncrementTick+0x16c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <xTaskIncrementTick+0xe4>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	4a22      	ldr	r2, [pc, #136]	@ (8004bbc <xTaskIncrementTick+0x16c>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc0 <xTaskIncrementTick+0x170>)
 8004b42:	441a      	add	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe ff11 	bl	8003972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <xTaskIncrementTick+0x174>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3b3      	bcc.n	8004ac6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b62:	e7b0      	b.n	8004ac6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <xTaskIncrementTick+0x174>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	4915      	ldr	r1, [pc, #84]	@ (8004bc0 <xTaskIncrementTick+0x170>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d907      	bls.n	8004b8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e004      	b.n	8004b8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <xTaskIncrementTick+0x178>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc8 <xTaskIncrementTick+0x178>)
 8004b8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bcc <xTaskIncrementTick+0x17c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000e00 	.word	0x20000e00
 8004ba8:	20000ddc 	.word	0x20000ddc
 8004bac:	20000d90 	.word	0x20000d90
 8004bb0:	20000d94 	.word	0x20000d94
 8004bb4:	20000df0 	.word	0x20000df0
 8004bb8:	20000df8 	.word	0x20000df8
 8004bbc:	20000de0 	.word	0x20000de0
 8004bc0:	20000908 	.word	0x20000908
 8004bc4:	20000904 	.word	0x20000904
 8004bc8:	20000de8 	.word	0x20000de8
 8004bcc:	20000dec 	.word	0x20000dec

08004bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <vTaskSwitchContext+0xa8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bde:	4b27      	ldr	r3, [pc, #156]	@ (8004c7c <vTaskSwitchContext+0xac>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004be4:	e042      	b.n	8004c6c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004be6:	4b25      	ldr	r3, [pc, #148]	@ (8004c7c <vTaskSwitchContext+0xac>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <vTaskSwitchContext+0xb0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e011      	b.n	8004c18 <vTaskSwitchContext+0x48>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10b      	bne.n	8004c12 <vTaskSwitchContext+0x42>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	607b      	str	r3, [r7, #4]
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	e7fd      	b.n	8004c0e <vTaskSwitchContext+0x3e>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	491a      	ldr	r1, [pc, #104]	@ (8004c84 <vTaskSwitchContext+0xb4>)
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0e3      	beq.n	8004bf4 <vTaskSwitchContext+0x24>
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a13      	ldr	r2, [pc, #76]	@ (8004c84 <vTaskSwitchContext+0xb4>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d104      	bne.n	8004c5c <vTaskSwitchContext+0x8c>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	605a      	str	r2, [r3, #4]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a09      	ldr	r2, [pc, #36]	@ (8004c88 <vTaskSwitchContext+0xb8>)
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4a06      	ldr	r2, [pc, #24]	@ (8004c80 <vTaskSwitchContext+0xb0>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6013      	str	r3, [r2, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc80      	pop	{r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000e00 	.word	0x20000e00
 8004c7c:	20000dec 	.word	0x20000dec
 8004c80:	20000de0 	.word	0x20000de0
 8004c84:	20000908 	.word	0x20000908
 8004c88:	20000904 	.word	0x20000904

08004c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	60fb      	str	r3, [r7, #12]
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <vTaskPlaceOnEventList+0x48>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3318      	adds	r3, #24
 8004cba:	4619      	mov	r1, r3
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fe fe7b 	bl	80039b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	6838      	ldr	r0, [r7, #0]
 8004cc6:	f000 fa85 	bl	80051d4 <prvAddCurrentTaskToDelayedList>
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000904 	.word	0x20000904

08004cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	617b      	str	r3, [r7, #20]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d02:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3318      	adds	r3, #24
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7fe fe31 	bl	8003972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	68b8      	ldr	r0, [r7, #8]
 8004d20:	f000 fa58 	bl	80051d4 <prvAddCurrentTaskToDelayedList>
	}
 8004d24:	bf00      	nop
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000904 	.word	0x20000904

08004d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	60fb      	str	r3, [r7, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3318      	adds	r3, #24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fe60 	bl	8003a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <xTaskRemoveFromEventList+0xb0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11d      	bne.n	8004dac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe fe57 	bl	8003a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4b19      	ldr	r3, [pc, #100]	@ (8004de4 <xTaskRemoveFromEventList+0xb4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d903      	bls.n	8004d8e <xTaskRemoveFromEventList+0x5e>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a16      	ldr	r2, [pc, #88]	@ (8004de4 <xTaskRemoveFromEventList+0xb4>)
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <xTaskRemoveFromEventList+0xb8>)
 8004d9c:	441a      	add	r2, r3
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f7fe fde4 	bl	8003972 <vListInsertEnd>
 8004daa:	e005      	b.n	8004db8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3318      	adds	r3, #24
 8004db0:	4619      	mov	r1, r3
 8004db2:	480e      	ldr	r0, [pc, #56]	@ (8004dec <xTaskRemoveFromEventList+0xbc>)
 8004db4:	f7fe fddd 	bl	8003972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <xTaskRemoveFromEventList+0xc0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d905      	bls.n	8004dd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <xTaskRemoveFromEventList+0xc4>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e001      	b.n	8004dd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004dd6:	697b      	ldr	r3, [r7, #20]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000e00 	.word	0x20000e00
 8004de4:	20000de0 	.word	0x20000de0
 8004de8:	20000908 	.word	0x20000908
 8004dec:	20000d98 	.word	0x20000d98
 8004df0:	20000904 	.word	0x20000904
 8004df4:	20000dec 	.word	0x20000dec

08004df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <vTaskInternalSetTimeOutState+0x24>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <vTaskInternalSetTimeOutState+0x28>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000df0 	.word	0x20000df0
 8004e20:	20000ddc 	.word	0x20000ddc

08004e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	613b      	str	r3, [r7, #16]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60fb      	str	r3, [r7, #12]
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e6a:	f000 fe17 	bl	8005a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <xTaskCheckForTimeOut+0xc0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d102      	bne.n	8004e8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e023      	b.n	8004ed6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <xTaskCheckForTimeOut+0xc4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d007      	beq.n	8004eaa <xTaskCheckForTimeOut+0x86>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e015      	b.n	8004ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d20b      	bcs.n	8004ecc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad2      	subs	r2, r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ff99 	bl	8004df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e004      	b.n	8004ed6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ed6:	f000 fe11 	bl	8005afc <vPortExitCritical>

	return xReturn;
 8004eda:	69fb      	ldr	r3, [r7, #28]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000ddc 	.word	0x20000ddc
 8004ee8:	20000df0 	.word	0x20000df0

08004eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	@ (8004f00 <vTaskMissedYield+0x14>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000dec 	.word	0x20000dec

08004f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f0c:	f000 f852 	bl	8004fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <prvIdleTask+0x28>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d9f9      	bls.n	8004f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f18:	4b05      	ldr	r3, [pc, #20]	@ (8004f30 <prvIdleTask+0x2c>)
 8004f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f28:	e7f0      	b.n	8004f0c <prvIdleTask+0x8>
 8004f2a:	bf00      	nop
 8004f2c:	20000908 	.word	0x20000908
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	e00c      	b.n	8004f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4a12      	ldr	r2, [pc, #72]	@ (8004f94 <prvInitialiseTaskLists+0x60>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fce4 	bl	800391c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3301      	adds	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b37      	cmp	r3, #55	@ 0x37
 8004f5e:	d9ef      	bls.n	8004f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f60:	480d      	ldr	r0, [pc, #52]	@ (8004f98 <prvInitialiseTaskLists+0x64>)
 8004f62:	f7fe fcdb 	bl	800391c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f66:	480d      	ldr	r0, [pc, #52]	@ (8004f9c <prvInitialiseTaskLists+0x68>)
 8004f68:	f7fe fcd8 	bl	800391c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f6c:	480c      	ldr	r0, [pc, #48]	@ (8004fa0 <prvInitialiseTaskLists+0x6c>)
 8004f6e:	f7fe fcd5 	bl	800391c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f72:	480c      	ldr	r0, [pc, #48]	@ (8004fa4 <prvInitialiseTaskLists+0x70>)
 8004f74:	f7fe fcd2 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f78:	480b      	ldr	r0, [pc, #44]	@ (8004fa8 <prvInitialiseTaskLists+0x74>)
 8004f7a:	f7fe fccf 	bl	800391c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <prvInitialiseTaskLists+0x78>)
 8004f80:	4a05      	ldr	r2, [pc, #20]	@ (8004f98 <prvInitialiseTaskLists+0x64>)
 8004f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f84:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <prvInitialiseTaskLists+0x7c>)
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <prvInitialiseTaskLists+0x68>)
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000908 	.word	0x20000908
 8004f98:	20000d68 	.word	0x20000d68
 8004f9c:	20000d7c 	.word	0x20000d7c
 8004fa0:	20000d98 	.word	0x20000d98
 8004fa4:	20000dac 	.word	0x20000dac
 8004fa8:	20000dc4 	.word	0x20000dc4
 8004fac:	20000d90 	.word	0x20000d90
 8004fb0:	20000d94 	.word	0x20000d94

08004fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fba:	e019      	b.n	8004ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004fbc:	f000 fd6e 	bl	8005a9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fc0:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <prvCheckTasksWaitingTermination+0x50>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fd2b 	bl	8003a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <prvCheckTasksWaitingTermination+0x54>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005008 <prvCheckTasksWaitingTermination+0x54>)
 8004fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <prvCheckTasksWaitingTermination+0x58>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800500c <prvCheckTasksWaitingTermination+0x58>)
 8004fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fe6:	f000 fd89 	bl	8005afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f810 	bl	8005010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <prvCheckTasksWaitingTermination+0x58>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e1      	bne.n	8004fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000dac 	.word	0x20000dac
 8005008:	20000dd8 	.word	0x20000dd8
 800500c:	20000dc0 	.word	0x20000dc0

08005010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	4618      	mov	r0, r3
 8005028:	f000 ff02 	bl	8005e30 <vPortFree>
				vPortFree( pxTCB );
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 feff 	bl	8005e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005032:	e019      	b.n	8005068 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800503a:	2b01      	cmp	r3, #1
 800503c:	d103      	bne.n	8005046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fef6 	bl	8005e30 <vPortFree>
	}
 8005044:	e010      	b.n	8005068 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800504c:	2b02      	cmp	r3, #2
 800504e:	d00b      	beq.n	8005068 <prvDeleteTCB+0x58>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <prvDeleteTCB+0x54>
	}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <prvResetNextTaskUnblockTime+0x40>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <prvResetNextTaskUnblockTime+0x14>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <prvResetNextTaskUnblockTime+0x16>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <prvResetNextTaskUnblockTime+0x44>)
 800508c:	f04f 32ff 	mov.w	r2, #4294967295
 8005090:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005092:	e008      	b.n	80050a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <prvResetNextTaskUnblockTime+0x40>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4a04      	ldr	r2, [pc, #16]	@ (80050b4 <prvResetNextTaskUnblockTime+0x44>)
 80050a4:	6013      	str	r3, [r2, #0]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr
 80050b0:	20000d90 	.word	0x20000d90
 80050b4:	20000df8 	.word	0x20000df8

080050b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <xTaskGetSchedulerState+0x34>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050c6:	2301      	movs	r3, #1
 80050c8:	607b      	str	r3, [r7, #4]
 80050ca:	e008      	b.n	80050de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050cc:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <xTaskGetSchedulerState+0x38>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050d4:	2302      	movs	r3, #2
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	e001      	b.n	80050de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050de:	687b      	ldr	r3, [r7, #4]
	}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000de4 	.word	0x20000de4
 80050f0:	20000e00 	.word	0x20000e00

080050f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d058      	beq.n	80051bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800510a:	4b2f      	ldr	r3, [pc, #188]	@ (80051c8 <xTaskPriorityDisinherit+0xd4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	429a      	cmp	r2, r3
 8005112:	d00b      	beq.n	800512c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60bb      	str	r3, [r7, #8]
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515e:	429a      	cmp	r2, r3
 8005160:	d02c      	beq.n	80051bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d128      	bne.n	80051bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fc5a 	bl	8003a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518c:	4b0f      	ldr	r3, [pc, #60]	@ (80051cc <xTaskPriorityDisinherit+0xd8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d903      	bls.n	800519c <xTaskPriorityDisinherit+0xa8>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	4a0c      	ldr	r2, [pc, #48]	@ (80051cc <xTaskPriorityDisinherit+0xd8>)
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4a09      	ldr	r2, [pc, #36]	@ (80051d0 <xTaskPriorityDisinherit+0xdc>)
 80051aa:	441a      	add	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fe fbdd 	bl	8003972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051b8:	2301      	movs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051bc:	697b      	ldr	r3, [r7, #20]
	}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	20000904 	.word	0x20000904
 80051cc:	20000de0 	.word	0x20000de0
 80051d0:	20000908 	.word	0x20000908

080051d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051de:	4b21      	ldr	r3, [pc, #132]	@ (8005264 <prvAddCurrentTaskToDelayedList+0x90>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051e4:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x94>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fc1c 	bl	8003a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d10a      	bne.n	800520e <prvAddCurrentTaskToDelayedList+0x3a>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x94>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4819      	ldr	r0, [pc, #100]	@ (800526c <prvAddCurrentTaskToDelayedList+0x98>)
 8005208:	f7fe fbb3 	bl	8003972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800520c:	e026      	b.n	800525c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005216:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x94>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	429a      	cmp	r2, r3
 8005224:	d209      	bcs.n	800523a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005226:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x94>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fe fbc0 	bl	80039b8 <vListInsert>
}
 8005238:	e010      	b.n	800525c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800523a:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <prvAddCurrentTaskToDelayedList+0x94>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	f7fe fbb6 	bl	80039b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800524c:	4b0a      	ldr	r3, [pc, #40]	@ (8005278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	429a      	cmp	r2, r3
 8005254:	d202      	bcs.n	800525c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005256:	4a08      	ldr	r2, [pc, #32]	@ (8005278 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000ddc 	.word	0x20000ddc
 8005268:	20000904 	.word	0x20000904
 800526c:	20000dc4 	.word	0x20000dc4
 8005270:	20000d94 	.word	0x20000d94
 8005274:	20000d90 	.word	0x20000d90
 8005278:	20000df8 	.word	0x20000df8

0800527c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005286:	f000 fad9 	bl	800583c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800528a:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <xTimerCreateTimerTask+0x84>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d021      	beq.n	80052d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800529a:	1d3a      	adds	r2, r7, #4
 800529c:	f107 0108 	add.w	r1, r7, #8
 80052a0:	f107 030c 	add.w	r3, r7, #12
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fb1f 	bl	80038e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	9202      	str	r2, [sp, #8]
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	2302      	movs	r3, #2
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	460a      	mov	r2, r1
 80052bc:	4911      	ldr	r1, [pc, #68]	@ (8005304 <xTimerCreateTimerTask+0x88>)
 80052be:	4812      	ldr	r0, [pc, #72]	@ (8005308 <xTimerCreateTimerTask+0x8c>)
 80052c0:	f7ff f8d2 	bl	8004468 <xTaskCreateStatic>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <xTimerCreateTimerTask+0x90>)
 80052c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <xTimerCreateTimerTask+0x90>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052d2:	2301      	movs	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	613b      	str	r3, [r7, #16]
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052f4:	697b      	ldr	r3, [r7, #20]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000e34 	.word	0x20000e34
 8005304:	08006a38 	.word	0x08006a38
 8005308:	08005431 	.word	0x08005431
 800530c:	20000e38 	.word	0x20000e38

08005310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08a      	sub	sp, #40	@ 0x28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <xTimerGenericCommand+0x30>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	623b      	str	r3, [r7, #32]
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005340:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <xTimerGenericCommand+0x98>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02a      	beq.n	800539e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b05      	cmp	r3, #5
 8005358:	dc18      	bgt.n	800538c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800535a:	f7ff fead 	bl	80050b8 <xTaskGetSchedulerState>
 800535e:	4603      	mov	r3, r0
 8005360:	2b02      	cmp	r3, #2
 8005362:	d109      	bne.n	8005378 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <xTimerGenericCommand+0x98>)
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	f107 0110 	add.w	r1, r7, #16
 800536c:	2300      	movs	r3, #0
 800536e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005370:	f7fe fc8e 	bl	8003c90 <xQueueGenericSend>
 8005374:	6278      	str	r0, [r7, #36]	@ 0x24
 8005376:	e012      	b.n	800539e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <xTimerGenericCommand+0x98>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	f107 0110 	add.w	r1, r7, #16
 8005380:	2300      	movs	r3, #0
 8005382:	2200      	movs	r2, #0
 8005384:	f7fe fc84 	bl	8003c90 <xQueueGenericSend>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24
 800538a:	e008      	b.n	800539e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800538c:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <xTimerGenericCommand+0x98>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	f107 0110 	add.w	r1, r7, #16
 8005394:	2300      	movs	r3, #0
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	f7fe fd7c 	bl	8003e94 <xQueueGenericSendFromISR>
 800539c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000e34 	.word	0x20000e34

080053ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053b6:	4b1d      	ldr	r3, [pc, #116]	@ (800542c <prvProcessExpiredTimer+0x80>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fb2f 	bl	8003a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d123      	bne.n	800541a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	18d1      	adds	r1, r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	6978      	ldr	r0, [r7, #20]
 80053e0:	f000 f8cc 	bl	800557c <prvInsertTimerInActiveList>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053ea:	2300      	movs	r3, #0
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	2300      	movs	r3, #0
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	2100      	movs	r1, #0
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	f7ff ff8b 	bl	8005310 <xTimerGenericCommand>
 80053fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60fb      	str	r3, [r7, #12]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	4798      	blx	r3
}
 8005422:	bf00      	nop
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000e2c 	.word	0x20000e2c

08005430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f859 	bl	80054f4 <prvGetNextExpireTime>
 8005442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4619      	mov	r1, r3
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f805 	bl	8005458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800544e:	f000 f8d7 	bl	8005600 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005452:	bf00      	nop
 8005454:	e7f0      	b.n	8005438 <prvTimerTask+0x8>
	...

08005458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005462:	f7ff fa3b 	bl	80048dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f866 	bl	800553c <prvSampleTimeNow>
 8005470:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d130      	bne.n	80054da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <prvProcessTimerOrBlockTask+0x3c>
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	429a      	cmp	r2, r3
 8005484:	d806      	bhi.n	8005494 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005486:	f7ff fa37 	bl	80048f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ff8d 	bl	80053ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005492:	e024      	b.n	80054de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800549a:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <prvProcessTimerOrBlockTask+0x90>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80054ac:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <prvProcessTimerOrBlockTask+0x94>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	f7fe ffa1 	bl	8004400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054be:	f7ff fa1b 	bl	80048f8 <xTaskResumeAll>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054c8:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <prvProcessTimerOrBlockTask+0x98>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
}
 80054d8:	e001      	b.n	80054de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054da:	f7ff fa0d 	bl	80048f8 <xTaskResumeAll>
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000e30 	.word	0x20000e30
 80054ec:	20000e34 	.word	0x20000e34
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <prvGetNextExpireTime+0x44>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800551a:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <prvGetNextExpireTime+0x44>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e001      	b.n	800552a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000e2c 	.word	0x20000e2c

0800553c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005544:	f7ff fa76 	bl	8004a34 <xTaskGetTickCount>
 8005548:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800554a:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <prvSampleTimeNow+0x3c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d205      	bcs.n	8005560 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005554:	f000 f910 	bl	8005778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e002      	b.n	8005566 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005566:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <prvSampleTimeNow+0x3c>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20000e3c 	.word	0x20000e3c

0800557c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d812      	bhi.n	80055c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e01b      	b.n	80055ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80055b6:	4b10      	ldr	r3, [pc, #64]	@ (80055f8 <prvInsertTimerInActiveList+0x7c>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7fe f9f9 	bl	80039b8 <vListInsert>
 80055c6:	e012      	b.n	80055ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d206      	bcs.n	80055de <prvInsertTimerInActiveList+0x62>
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e007      	b.n	80055ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055de:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <prvInsertTimerInActiveList+0x80>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fe f9e5 	bl	80039b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055ee:	697b      	ldr	r3, [r7, #20]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000e30 	.word	0x20000e30
 80055fc:	20000e2c 	.word	0x20000e2c

08005600 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	@ 0x38
 8005604:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005606:	e0a5      	b.n	8005754 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	da19      	bge.n	8005642 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800560e:	1d3b      	adds	r3, r7, #4
 8005610:	3304      	adds	r3, #4
 8005612:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	61fb      	str	r3, [r7, #28]
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	e7fd      	b.n	800562e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005638:	6850      	ldr	r0, [r2, #4]
 800563a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563c:	6892      	ldr	r2, [r2, #8]
 800563e:	4611      	mov	r1, r2
 8005640:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f2c0 8085 	blt.w	8005754 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	3304      	adds	r3, #4
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe f9e4 	bl	8003a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005660:	463b      	mov	r3, r7
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff ff6a 	bl	800553c <prvSampleTimeNow>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b09      	cmp	r3, #9
 800566e:	d86c      	bhi.n	800574a <prvProcessReceivedCommands+0x14a>
 8005670:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <prvProcessReceivedCommands+0x78>)
 8005672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005676:	bf00      	nop
 8005678:	080056a1 	.word	0x080056a1
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a1 	.word	0x080056a1
 8005684:	0800574b 	.word	0x0800574b
 8005688:	080056ff 	.word	0x080056ff
 800568c:	08005739 	.word	0x08005739
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056a1 	.word	0x080056a1
 8005698:	0800574b 	.word	0x0800574b
 800569c:	080056ff 	.word	0x080056ff
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	18d1      	adds	r1, r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056ae:	f7ff ff65 	bl	800557c <prvInsertTimerInActiveList>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d04a      	beq.n	800574e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d142      	bne.n	800574e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	441a      	add	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	2100      	movs	r1, #0
 80056d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056da:	f7ff fe19 	bl	8005310 <xTimerGenericCommand>
 80056de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d133      	bne.n	800574e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	61bb      	str	r3, [r7, #24]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10b      	bne.n	8005724 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	617b      	str	r3, [r7, #20]
}
 800571e:	bf00      	nop
 8005720:	bf00      	nop
 8005722:	e7fd      	b.n	8005720 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	18d1      	adds	r1, r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005732:	f7ff ff23 	bl	800557c <prvInsertTimerInActiveList>
					break;
 8005736:	e00d      	b.n	8005754 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800573e:	2b00      	cmp	r3, #0
 8005740:	d107      	bne.n	8005752 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005744:	f000 fb74 	bl	8005e30 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005748:	e003      	b.n	8005752 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <prvProcessReceivedCommands+0x154>
					break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <prvProcessReceivedCommands+0x154>
					break;
 8005752:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005754:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <prvProcessReceivedCommands+0x174>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	1d39      	adds	r1, r7, #4
 800575a:	2200      	movs	r2, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fc35 	bl	8003fcc <xQueueReceive>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f47f af4f 	bne.w	8005608 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	3730      	adds	r7, #48	@ 0x30
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000e34 	.word	0x20000e34

08005778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800577e:	e046      	b.n	800580e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005780:	4b2c      	ldr	r3, [pc, #176]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800578a:	4b2a      	ldr	r3, [pc, #168]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe f945 	bl	8003a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d12f      	bne.n	800580e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d90e      	bls.n	80057de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057cc:	4b19      	ldr	r3, [pc, #100]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f7fe f8ee 	bl	80039b8 <vListInsert>
 80057dc:	e017      	b.n	800580e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057de:	2300      	movs	r3, #0
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	2300      	movs	r3, #0
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	2100      	movs	r1, #0
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fd91 	bl	8005310 <xTimerGenericCommand>
 80057ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <prvSwitchTimerLists+0x96>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1b3      	bne.n	8005780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005818:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <prvSwitchTimerLists+0xc0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a04      	ldr	r2, [pc, #16]	@ (8005834 <prvSwitchTimerLists+0xbc>)
 8005824:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005826:	4a04      	ldr	r2, [pc, #16]	@ (8005838 <prvSwitchTimerLists+0xc0>)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	6013      	str	r3, [r2, #0]
}
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000e2c 	.word	0x20000e2c
 8005838:	20000e30 	.word	0x20000e30

0800583c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005842:	f000 f92b 	bl	8005a9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005846:	4b15      	ldr	r3, [pc, #84]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d120      	bne.n	8005890 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800584e:	4814      	ldr	r0, [pc, #80]	@ (80058a0 <prvCheckForValidListAndQueue+0x64>)
 8005850:	f7fe f864 	bl	800391c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005854:	4813      	ldr	r0, [pc, #76]	@ (80058a4 <prvCheckForValidListAndQueue+0x68>)
 8005856:	f7fe f861 	bl	800391c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800585a:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <prvCheckForValidListAndQueue+0x6c>)
 800585c:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <prvCheckForValidListAndQueue+0x64>)
 800585e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <prvCheckForValidListAndQueue+0x70>)
 8005862:	4a10      	ldr	r2, [pc, #64]	@ (80058a4 <prvCheckForValidListAndQueue+0x68>)
 8005864:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4b11      	ldr	r3, [pc, #68]	@ (80058b0 <prvCheckForValidListAndQueue+0x74>)
 800586c:	4a11      	ldr	r2, [pc, #68]	@ (80058b4 <prvCheckForValidListAndQueue+0x78>)
 800586e:	2110      	movs	r1, #16
 8005870:	200a      	movs	r0, #10
 8005872:	f7fe f96d 	bl	8003b50 <xQueueGenericCreateStatic>
 8005876:	4603      	mov	r3, r0
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 800587a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800587c:	4b07      	ldr	r3, [pc, #28]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <prvCheckForValidListAndQueue+0x60>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	490b      	ldr	r1, [pc, #44]	@ (80058b8 <prvCheckForValidListAndQueue+0x7c>)
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fd90 	bl	80043b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005890:	f000 f934 	bl	8005afc <vPortExitCritical>
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000e34 	.word	0x20000e34
 80058a0:	20000e04 	.word	0x20000e04
 80058a4:	20000e18 	.word	0x20000e18
 80058a8:	20000e2c 	.word	0x20000e2c
 80058ac:	20000e30 	.word	0x20000e30
 80058b0:	20000ee0 	.word	0x20000ee0
 80058b4:	20000e40 	.word	0x20000e40
 80058b8:	08006a40 	.word	0x08006a40

080058bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b04      	subs	r3, #4
 80058cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3b04      	subs	r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b04      	subs	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058ec:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <pxPortInitialiseStack+0x54>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b14      	subs	r3, #20
 80058f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b20      	subs	r3, #32
 8005902:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	08005915 	.word	0x08005915

08005914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800591a:	2300      	movs	r3, #0
 800591c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800591e:	4b12      	ldr	r3, [pc, #72]	@ (8005968 <prvTaskExitError+0x54>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d00b      	beq.n	8005940 <prvTaskExitError+0x2c>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	60fb      	str	r3, [r7, #12]
}
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <prvTaskExitError+0x28>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60bb      	str	r3, [r7, #8]
}
 8005952:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005954:	bf00      	nop
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0fc      	beq.n	8005956 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	2000000c 	.word	0x2000000c
 800596c:	00000000 	.word	0x00000000

08005970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005970:	4b07      	ldr	r3, [pc, #28]	@ (8005990 <pxCurrentTCBConst2>)
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	6808      	ldr	r0, [r1, #0]
 8005976:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800597a:	f380 8809 	msr	PSP, r0
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f380 8811 	msr	BASEPRI, r0
 800598a:	f04e 0e0d 	orr.w	lr, lr, #13
 800598e:	4770      	bx	lr

08005990 <pxCurrentTCBConst2>:
 8005990:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005994:	bf00      	nop
 8005996:	bf00      	nop

08005998 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005998:	4806      	ldr	r0, [pc, #24]	@ (80059b4 <prvPortStartFirstTask+0x1c>)
 800599a:	6800      	ldr	r0, [r0, #0]
 800599c:	6800      	ldr	r0, [r0, #0]
 800599e:	f380 8808 	msr	MSP, r0
 80059a2:	b662      	cpsie	i
 80059a4:	b661      	cpsie	f
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	df00      	svc	0
 80059b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059b2:	bf00      	nop
 80059b4:	e000ed08 	.word	0xe000ed08

080059b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059be:	4b32      	ldr	r3, [pc, #200]	@ (8005a88 <xPortStartScheduler+0xd0>)
 80059c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	22ff      	movs	r2, #255	@ 0xff
 80059ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a8c <xPortStartScheduler+0xd4>)
 80059e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a90 <xPortStartScheduler+0xd8>)
 80059e8:	2207      	movs	r2, #7
 80059ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ec:	e009      	b.n	8005a02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80059ee:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <xPortStartScheduler+0xd8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <xPortStartScheduler+0xd8>)
 80059f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b80      	cmp	r3, #128	@ 0x80
 8005a0c:	d0ef      	beq.n	80059ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <xPortStartScheduler+0xd8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1c3 0307 	rsb	r3, r3, #7
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d00b      	beq.n	8005a32 <xPortStartScheduler+0x7a>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60bb      	str	r3, [r7, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a32:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <xPortStartScheduler+0xd8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <xPortStartScheduler+0xd8>)
 8005a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <xPortStartScheduler+0xd8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005a44:	4a12      	ldr	r2, [pc, #72]	@ (8005a90 <xPortStartScheduler+0xd8>)
 8005a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <xPortStartScheduler+0xdc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a0f      	ldr	r2, [pc, #60]	@ (8005a94 <xPortStartScheduler+0xdc>)
 8005a56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <xPortStartScheduler+0xdc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <xPortStartScheduler+0xdc>)
 8005a62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a68:	f000 f8b8 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <xPortStartScheduler+0xe0>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a72:	f7ff ff91 	bl	8005998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a76:	f7ff f8ab 	bl	8004bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8005a7a:	f7ff ff4b 	bl	8005914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	e000e400 	.word	0xe000e400
 8005a8c:	20000f30 	.word	0x20000f30
 8005a90:	20000f34 	.word	0x20000f34
 8005a94:	e000ed20 	.word	0xe000ed20
 8005a98:	2000000c 	.word	0x2000000c

08005a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	607b      	str	r3, [r7, #4]
}
 8005ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8005af4 <vPortEnterCritical+0x58>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	4a0d      	ldr	r2, [pc, #52]	@ (8005af4 <vPortEnterCritical+0x58>)
 8005abe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8005af4 <vPortEnterCritical+0x58>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d110      	bne.n	8005aea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <vPortEnterCritical+0x5c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <vPortEnterCritical+0x4e>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	603b      	str	r3, [r7, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <vPortEnterCritical+0x4a>
	}
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr
 8005af4:	2000000c 	.word	0x2000000c
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <vPortExitCritical+0x26>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b2c:	4b07      	ldr	r3, [pc, #28]	@ (8005b4c <vPortExitCritical+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <vPortExitCritical+0x44>
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	2000000c 	.word	0x2000000c

08005b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b50:	f3ef 8009 	mrs	r0, PSP
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <pxCurrentTCBConst>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b6a:	f380 8811 	msr	BASEPRI, r0
 8005b6e:	f7ff f82f 	bl	8004bd0 <vTaskSwitchContext>
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8811 	msr	BASEPRI, r0
 8005b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b7e:	6819      	ldr	r1, [r3, #0]
 8005b80:	6808      	ldr	r0, [r1, #0]
 8005b82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b86:	f380 8809 	msr	PSP, r0
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	4770      	bx	lr

08005b90 <pxCurrentTCBConst>:
 8005b90:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7fe ff4d 	bl	8004a50 <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <SysTick_Handler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <vPortSetupTimerInterrupt+0x30>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a09      	ldr	r2, [pc, #36]	@ (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a08      	ldr	r2, [pc, #32]	@ (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b03      	ldr	r3, [pc, #12]	@ (8005c0c <vPortSetupTimerInterrupt+0x30>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	e000e010 	.word	0xe000e010
 8005c10:	e000e018 	.word	0xe000e018
 8005c14:	20000000 	.word	0x20000000
 8005c18:	10624dd3 	.word	0x10624dd3
 8005c1c:	e000e014 	.word	0xe000e014

08005c20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c26:	f3ef 8305 	mrs	r3, IPSR
 8005c2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d915      	bls.n	8005c5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c32:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <vPortValidateInterruptPriority+0x70>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c3c:	4b15      	ldr	r3, [pc, #84]	@ (8005c94 <vPortValidateInterruptPriority+0x74>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	7afa      	ldrb	r2, [r7, #11]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d20b      	bcs.n	8005c5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	607b      	str	r3, [r7, #4]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <vPortValidateInterruptPriority+0x78>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <vPortValidateInterruptPriority+0x7c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d90b      	bls.n	8005c86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	603b      	str	r3, [r7, #0]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <vPortValidateInterruptPriority+0x62>
	}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	e000e3f0 	.word	0xe000e3f0
 8005c94:	20000f30 	.word	0x20000f30
 8005c98:	e000ed0c 	.word	0xe000ed0c
 8005c9c:	20000f34 	.word	0x20000f34

08005ca0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	@ 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cac:	f7fe fe16 	bl	80048dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8005e1c <pvPortMalloc+0x17c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cb8:	f000 f916 	bl	8005ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cbc:	4b58      	ldr	r3, [pc, #352]	@ (8005e20 <pvPortMalloc+0x180>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f040 8090 	bne.w	8005dea <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01e      	beq.n	8005d0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d015      	beq.n	8005d0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f023 0307 	bic.w	r3, r3, #7
 8005ce8:	3308      	adds	r3, #8
 8005cea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <pvPortMalloc+0x6e>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	617b      	str	r3, [r7, #20]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d06a      	beq.n	8005dea <pvPortMalloc+0x14a>
 8005d14:	4b43      	ldr	r3, [pc, #268]	@ (8005e24 <pvPortMalloc+0x184>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d865      	bhi.n	8005dea <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d1e:	4b42      	ldr	r3, [pc, #264]	@ (8005e28 <pvPortMalloc+0x188>)
 8005d20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d22:	4b41      	ldr	r3, [pc, #260]	@ (8005e28 <pvPortMalloc+0x188>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d28:	e004      	b.n	8005d34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d903      	bls.n	8005d46 <pvPortMalloc+0xa6>
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f1      	bne.n	8005d2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d46:	4b35      	ldr	r3, [pc, #212]	@ (8005e1c <pvPortMalloc+0x17c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d04c      	beq.n	8005dea <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2208      	movs	r2, #8
 8005d56:	4413      	add	r3, r2
 8005d58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	1ad2      	subs	r2, r2, r3
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d920      	bls.n	8005db4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <pvPortMalloc+0xfc>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dae:	69b8      	ldr	r0, [r7, #24]
 8005db0:	f000 f8fc 	bl	8005fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005db4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e24 <pvPortMalloc+0x184>)
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	4a19      	ldr	r2, [pc, #100]	@ (8005e24 <pvPortMalloc+0x184>)
 8005dc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dc2:	4b18      	ldr	r3, [pc, #96]	@ (8005e24 <pvPortMalloc+0x184>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <pvPortMalloc+0x18c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d203      	bcs.n	8005dd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dce:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <pvPortMalloc+0x184>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <pvPortMalloc+0x18c>)
 8005dd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <pvPortMalloc+0x180>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dea:	f7fe fd85 	bl	80048f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <pvPortMalloc+0x170>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60fb      	str	r3, [r7, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <pvPortMalloc+0x16c>
	return pvReturn;
 8005e10:	69fb      	ldr	r3, [r7, #28]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3728      	adds	r7, #40	@ 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20001b40 	.word	0x20001b40
 8005e20:	20001b4c 	.word	0x20001b4c
 8005e24:	20001b44 	.word	0x20001b44
 8005e28:	20001b38 	.word	0x20001b38
 8005e2c:	20001b48 	.word	0x20001b48

08005e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d04a      	beq.n	8005ed8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e42:	2308      	movs	r3, #8
 8005e44:	425b      	negs	r3, r3
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <vPortFree+0xb0>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <vPortFree+0x46>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60fb      	str	r3, [r7, #12]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <vPortFree+0x66>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60bb      	str	r3, [r7, #8]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <vPortFree+0xb0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d019      	beq.n	8005ed8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d115      	bne.n	8005ed8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <vPortFree+0xb0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ebc:	f7fe fd0e 	bl	80048dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4b07      	ldr	r3, [pc, #28]	@ (8005ee4 <vPortFree+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4413      	add	r3, r2
 8005eca:	4a06      	ldr	r2, [pc, #24]	@ (8005ee4 <vPortFree+0xb4>)
 8005ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ece:	6938      	ldr	r0, [r7, #16]
 8005ed0:	f000 f86c 	bl	8005fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ed4:	f7fe fd10 	bl	80048f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ed8:	bf00      	nop
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20001b4c 	.word	0x20001b4c
 8005ee4:	20001b44 	.word	0x20001b44

08005ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ef4:	4b27      	ldr	r3, [pc, #156]	@ (8005f94 <prvHeapInit+0xac>)
 8005ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3307      	adds	r3, #7
 8005f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <prvHeapInit+0xac>)
 8005f18:	4413      	add	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <prvHeapInit+0xb0>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f26:	4b1c      	ldr	r3, [pc, #112]	@ (8005f98 <prvHeapInit+0xb0>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4413      	add	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f34:	2208      	movs	r2, #8
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0307 	bic.w	r3, r3, #7
 8005f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a15      	ldr	r2, [pc, #84]	@ (8005f9c <prvHeapInit+0xb4>)
 8005f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f4a:	4b14      	ldr	r3, [pc, #80]	@ (8005f9c <prvHeapInit+0xb4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f52:	4b12      	ldr	r3, [pc, #72]	@ (8005f9c <prvHeapInit+0xb4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f68:	4b0c      	ldr	r3, [pc, #48]	@ (8005f9c <prvHeapInit+0xb4>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <prvHeapInit+0xb8>)
 8005f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a09      	ldr	r2, [pc, #36]	@ (8005fa4 <prvHeapInit+0xbc>)
 8005f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f80:	4b09      	ldr	r3, [pc, #36]	@ (8005fa8 <prvHeapInit+0xc0>)
 8005f82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000f38 	.word	0x20000f38
 8005f98:	20001b38 	.word	0x20001b38
 8005f9c:	20001b40 	.word	0x20001b40
 8005fa0:	20001b48 	.word	0x20001b48
 8005fa4:	20001b44 	.word	0x20001b44
 8005fa8:	20001b4c 	.word	0x20001b4c

08005fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fb4:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <prvInsertBlockIntoFreeList+0xa8>)
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e002      	b.n	8005fc0 <prvInsertBlockIntoFreeList+0x14>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d8f7      	bhi.n	8005fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d108      	bne.n	8005fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	441a      	add	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d118      	bne.n	8006034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b14      	ldr	r3, [pc, #80]	@ (8006058 <prvInsertBlockIntoFreeList+0xac>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d00d      	beq.n	800602a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e008      	b.n	800603c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800602a:	4b0b      	ldr	r3, [pc, #44]	@ (8006058 <prvInsertBlockIntoFreeList+0xac>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e003      	b.n	800603c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d002      	beq.n	800604a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	20001b38 	.word	0x20001b38
 8006058:	20001b40 	.word	0x20001b40

0800605c <std>:
 800605c:	2300      	movs	r3, #0
 800605e:	b510      	push	{r4, lr}
 8006060:	4604      	mov	r4, r0
 8006062:	e9c0 3300 	strd	r3, r3, [r0]
 8006066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800606a:	6083      	str	r3, [r0, #8]
 800606c:	8181      	strh	r1, [r0, #12]
 800606e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006070:	81c2      	strh	r2, [r0, #14]
 8006072:	6183      	str	r3, [r0, #24]
 8006074:	4619      	mov	r1, r3
 8006076:	2208      	movs	r2, #8
 8006078:	305c      	adds	r0, #92	@ 0x5c
 800607a:	f000 f9e7 	bl	800644c <memset>
 800607e:	4b0d      	ldr	r3, [pc, #52]	@ (80060b4 <std+0x58>)
 8006080:	6224      	str	r4, [r4, #32]
 8006082:	6263      	str	r3, [r4, #36]	@ 0x24
 8006084:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <std+0x5c>)
 8006086:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006088:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <std+0x60>)
 800608a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800608c:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <std+0x64>)
 800608e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006090:	4b0c      	ldr	r3, [pc, #48]	@ (80060c4 <std+0x68>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d006      	beq.n	80060a4 <std+0x48>
 8006096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800609a:	4294      	cmp	r4, r2
 800609c:	d002      	beq.n	80060a4 <std+0x48>
 800609e:	33d0      	adds	r3, #208	@ 0xd0
 80060a0:	429c      	cmp	r4, r3
 80060a2:	d105      	bne.n	80060b0 <std+0x54>
 80060a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ac:	f000 ba46 	b.w	800653c <__retarget_lock_init_recursive>
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	bf00      	nop
 80060b4:	0800629d 	.word	0x0800629d
 80060b8:	080062bf 	.word	0x080062bf
 80060bc:	080062f7 	.word	0x080062f7
 80060c0:	0800631b 	.word	0x0800631b
 80060c4:	20001b50 	.word	0x20001b50

080060c8 <stdio_exit_handler>:
 80060c8:	4a02      	ldr	r2, [pc, #8]	@ (80060d4 <stdio_exit_handler+0xc>)
 80060ca:	4903      	ldr	r1, [pc, #12]	@ (80060d8 <stdio_exit_handler+0x10>)
 80060cc:	4803      	ldr	r0, [pc, #12]	@ (80060dc <stdio_exit_handler+0x14>)
 80060ce:	f000 b869 	b.w	80061a4 <_fwalk_sglue>
 80060d2:	bf00      	nop
 80060d4:	20000010 	.word	0x20000010
 80060d8:	0800684d 	.word	0x0800684d
 80060dc:	20000020 	.word	0x20000020

080060e0 <cleanup_stdio>:
 80060e0:	6841      	ldr	r1, [r0, #4]
 80060e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <cleanup_stdio+0x34>)
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4299      	cmp	r1, r3
 80060e8:	4604      	mov	r4, r0
 80060ea:	d001      	beq.n	80060f0 <cleanup_stdio+0x10>
 80060ec:	f000 fbae 	bl	800684c <_fflush_r>
 80060f0:	68a1      	ldr	r1, [r4, #8]
 80060f2:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <cleanup_stdio+0x38>)
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d002      	beq.n	80060fe <cleanup_stdio+0x1e>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fba7 	bl	800684c <_fflush_r>
 80060fe:	68e1      	ldr	r1, [r4, #12]
 8006100:	4b06      	ldr	r3, [pc, #24]	@ (800611c <cleanup_stdio+0x3c>)
 8006102:	4299      	cmp	r1, r3
 8006104:	d004      	beq.n	8006110 <cleanup_stdio+0x30>
 8006106:	4620      	mov	r0, r4
 8006108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610c:	f000 bb9e 	b.w	800684c <_fflush_r>
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop
 8006114:	20001b50 	.word	0x20001b50
 8006118:	20001bb8 	.word	0x20001bb8
 800611c:	20001c20 	.word	0x20001c20

08006120 <global_stdio_init.part.0>:
 8006120:	b510      	push	{r4, lr}
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <global_stdio_init.part.0+0x30>)
 8006124:	4c0b      	ldr	r4, [pc, #44]	@ (8006154 <global_stdio_init.part.0+0x34>)
 8006126:	4a0c      	ldr	r2, [pc, #48]	@ (8006158 <global_stdio_init.part.0+0x38>)
 8006128:	4620      	mov	r0, r4
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	2104      	movs	r1, #4
 800612e:	2200      	movs	r2, #0
 8006130:	f7ff ff94 	bl	800605c <std>
 8006134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006138:	2201      	movs	r2, #1
 800613a:	2109      	movs	r1, #9
 800613c:	f7ff ff8e 	bl	800605c <std>
 8006140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006144:	2202      	movs	r2, #2
 8006146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800614a:	2112      	movs	r1, #18
 800614c:	f7ff bf86 	b.w	800605c <std>
 8006150:	20001c88 	.word	0x20001c88
 8006154:	20001b50 	.word	0x20001b50
 8006158:	080060c9 	.word	0x080060c9

0800615c <__sfp_lock_acquire>:
 800615c:	4801      	ldr	r0, [pc, #4]	@ (8006164 <__sfp_lock_acquire+0x8>)
 800615e:	f000 b9ee 	b.w	800653e <__retarget_lock_acquire_recursive>
 8006162:	bf00      	nop
 8006164:	20001c91 	.word	0x20001c91

08006168 <__sfp_lock_release>:
 8006168:	4801      	ldr	r0, [pc, #4]	@ (8006170 <__sfp_lock_release+0x8>)
 800616a:	f000 b9e9 	b.w	8006540 <__retarget_lock_release_recursive>
 800616e:	bf00      	nop
 8006170:	20001c91 	.word	0x20001c91

08006174 <__sinit>:
 8006174:	b510      	push	{r4, lr}
 8006176:	4604      	mov	r4, r0
 8006178:	f7ff fff0 	bl	800615c <__sfp_lock_acquire>
 800617c:	6a23      	ldr	r3, [r4, #32]
 800617e:	b11b      	cbz	r3, 8006188 <__sinit+0x14>
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	f7ff bff0 	b.w	8006168 <__sfp_lock_release>
 8006188:	4b04      	ldr	r3, [pc, #16]	@ (800619c <__sinit+0x28>)
 800618a:	6223      	str	r3, [r4, #32]
 800618c:	4b04      	ldr	r3, [pc, #16]	@ (80061a0 <__sinit+0x2c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f5      	bne.n	8006180 <__sinit+0xc>
 8006194:	f7ff ffc4 	bl	8006120 <global_stdio_init.part.0>
 8006198:	e7f2      	b.n	8006180 <__sinit+0xc>
 800619a:	bf00      	nop
 800619c:	080060e1 	.word	0x080060e1
 80061a0:	20001c88 	.word	0x20001c88

080061a4 <_fwalk_sglue>:
 80061a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a8:	4607      	mov	r7, r0
 80061aa:	4688      	mov	r8, r1
 80061ac:	4614      	mov	r4, r2
 80061ae:	2600      	movs	r6, #0
 80061b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b4:	f1b9 0901 	subs.w	r9, r9, #1
 80061b8:	d505      	bpl.n	80061c6 <_fwalk_sglue+0x22>
 80061ba:	6824      	ldr	r4, [r4, #0]
 80061bc:	2c00      	cmp	r4, #0
 80061be:	d1f7      	bne.n	80061b0 <_fwalk_sglue+0xc>
 80061c0:	4630      	mov	r0, r6
 80061c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d907      	bls.n	80061dc <_fwalk_sglue+0x38>
 80061cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d0:	3301      	adds	r3, #1
 80061d2:	d003      	beq.n	80061dc <_fwalk_sglue+0x38>
 80061d4:	4629      	mov	r1, r5
 80061d6:	4638      	mov	r0, r7
 80061d8:	47c0      	blx	r8
 80061da:	4306      	orrs	r6, r0
 80061dc:	3568      	adds	r5, #104	@ 0x68
 80061de:	e7e9      	b.n	80061b4 <_fwalk_sglue+0x10>

080061e0 <_puts_r>:
 80061e0:	6a03      	ldr	r3, [r0, #32]
 80061e2:	b570      	push	{r4, r5, r6, lr}
 80061e4:	4605      	mov	r5, r0
 80061e6:	460e      	mov	r6, r1
 80061e8:	6884      	ldr	r4, [r0, #8]
 80061ea:	b90b      	cbnz	r3, 80061f0 <_puts_r+0x10>
 80061ec:	f7ff ffc2 	bl	8006174 <__sinit>
 80061f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061f2:	07db      	lsls	r3, r3, #31
 80061f4:	d405      	bmi.n	8006202 <_puts_r+0x22>
 80061f6:	89a3      	ldrh	r3, [r4, #12]
 80061f8:	0598      	lsls	r0, r3, #22
 80061fa:	d402      	bmi.n	8006202 <_puts_r+0x22>
 80061fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061fe:	f000 f99e 	bl	800653e <__retarget_lock_acquire_recursive>
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	0719      	lsls	r1, r3, #28
 8006206:	d502      	bpl.n	800620e <_puts_r+0x2e>
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d135      	bne.n	800627a <_puts_r+0x9a>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f8c5 	bl	80063a0 <__swsetup_r>
 8006216:	b380      	cbz	r0, 800627a <_puts_r+0x9a>
 8006218:	f04f 35ff 	mov.w	r5, #4294967295
 800621c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800621e:	07da      	lsls	r2, r3, #31
 8006220:	d405      	bmi.n	800622e <_puts_r+0x4e>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	059b      	lsls	r3, r3, #22
 8006226:	d402      	bmi.n	800622e <_puts_r+0x4e>
 8006228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800622a:	f000 f989 	bl	8006540 <__retarget_lock_release_recursive>
 800622e:	4628      	mov	r0, r5
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	2b00      	cmp	r3, #0
 8006234:	da04      	bge.n	8006240 <_puts_r+0x60>
 8006236:	69a2      	ldr	r2, [r4, #24]
 8006238:	429a      	cmp	r2, r3
 800623a:	dc17      	bgt.n	800626c <_puts_r+0x8c>
 800623c:	290a      	cmp	r1, #10
 800623e:	d015      	beq.n	800626c <_puts_r+0x8c>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	6022      	str	r2, [r4, #0]
 8006246:	7019      	strb	r1, [r3, #0]
 8006248:	68a3      	ldr	r3, [r4, #8]
 800624a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800624e:	3b01      	subs	r3, #1
 8006250:	60a3      	str	r3, [r4, #8]
 8006252:	2900      	cmp	r1, #0
 8006254:	d1ed      	bne.n	8006232 <_puts_r+0x52>
 8006256:	2b00      	cmp	r3, #0
 8006258:	da11      	bge.n	800627e <_puts_r+0x9e>
 800625a:	4622      	mov	r2, r4
 800625c:	210a      	movs	r1, #10
 800625e:	4628      	mov	r0, r5
 8006260:	f000 f85f 	bl	8006322 <__swbuf_r>
 8006264:	3001      	adds	r0, #1
 8006266:	d0d7      	beq.n	8006218 <_puts_r+0x38>
 8006268:	250a      	movs	r5, #10
 800626a:	e7d7      	b.n	800621c <_puts_r+0x3c>
 800626c:	4622      	mov	r2, r4
 800626e:	4628      	mov	r0, r5
 8006270:	f000 f857 	bl	8006322 <__swbuf_r>
 8006274:	3001      	adds	r0, #1
 8006276:	d1e7      	bne.n	8006248 <_puts_r+0x68>
 8006278:	e7ce      	b.n	8006218 <_puts_r+0x38>
 800627a:	3e01      	subs	r6, #1
 800627c:	e7e4      	b.n	8006248 <_puts_r+0x68>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	220a      	movs	r2, #10
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	e7ee      	b.n	8006268 <_puts_r+0x88>
	...

0800628c <puts>:
 800628c:	4b02      	ldr	r3, [pc, #8]	@ (8006298 <puts+0xc>)
 800628e:	4601      	mov	r1, r0
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	f7ff bfa5 	b.w	80061e0 <_puts_r>
 8006296:	bf00      	nop
 8006298:	2000001c 	.word	0x2000001c

0800629c <__sread>:
 800629c:	b510      	push	{r4, lr}
 800629e:	460c      	mov	r4, r1
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	f000 f8fc 	bl	80064a0 <_read_r>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	bfab      	itete	ge
 80062ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80062ae:	89a3      	ldrhlt	r3, [r4, #12]
 80062b0:	181b      	addge	r3, r3, r0
 80062b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80062b6:	bfac      	ite	ge
 80062b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80062ba:	81a3      	strhlt	r3, [r4, #12]
 80062bc:	bd10      	pop	{r4, pc}

080062be <__swrite>:
 80062be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	461f      	mov	r7, r3
 80062c4:	898b      	ldrh	r3, [r1, #12]
 80062c6:	4605      	mov	r5, r0
 80062c8:	05db      	lsls	r3, r3, #23
 80062ca:	460c      	mov	r4, r1
 80062cc:	4616      	mov	r6, r2
 80062ce:	d505      	bpl.n	80062dc <__swrite+0x1e>
 80062d0:	2302      	movs	r3, #2
 80062d2:	2200      	movs	r2, #0
 80062d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d8:	f000 f8d0 	bl	800647c <_lseek_r>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	4632      	mov	r2, r6
 80062e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	4628      	mov	r0, r5
 80062e8:	463b      	mov	r3, r7
 80062ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062f2:	f000 b8e7 	b.w	80064c4 <_write_r>

080062f6 <__sseek>:
 80062f6:	b510      	push	{r4, lr}
 80062f8:	460c      	mov	r4, r1
 80062fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fe:	f000 f8bd 	bl	800647c <_lseek_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	bf15      	itete	ne
 8006308:	6560      	strne	r0, [r4, #84]	@ 0x54
 800630a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800630e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006312:	81a3      	strheq	r3, [r4, #12]
 8006314:	bf18      	it	ne
 8006316:	81a3      	strhne	r3, [r4, #12]
 8006318:	bd10      	pop	{r4, pc}

0800631a <__sclose>:
 800631a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631e:	f000 b89d 	b.w	800645c <_close_r>

08006322 <__swbuf_r>:
 8006322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006324:	460e      	mov	r6, r1
 8006326:	4614      	mov	r4, r2
 8006328:	4605      	mov	r5, r0
 800632a:	b118      	cbz	r0, 8006334 <__swbuf_r+0x12>
 800632c:	6a03      	ldr	r3, [r0, #32]
 800632e:	b90b      	cbnz	r3, 8006334 <__swbuf_r+0x12>
 8006330:	f7ff ff20 	bl	8006174 <__sinit>
 8006334:	69a3      	ldr	r3, [r4, #24]
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	071a      	lsls	r2, r3, #28
 800633c:	d501      	bpl.n	8006342 <__swbuf_r+0x20>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	b943      	cbnz	r3, 8006354 <__swbuf_r+0x32>
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f82b 	bl	80063a0 <__swsetup_r>
 800634a:	b118      	cbz	r0, 8006354 <__swbuf_r+0x32>
 800634c:	f04f 37ff 	mov.w	r7, #4294967295
 8006350:	4638      	mov	r0, r7
 8006352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	6922      	ldr	r2, [r4, #16]
 8006358:	b2f6      	uxtb	r6, r6
 800635a:	1a98      	subs	r0, r3, r2
 800635c:	6963      	ldr	r3, [r4, #20]
 800635e:	4637      	mov	r7, r6
 8006360:	4283      	cmp	r3, r0
 8006362:	dc05      	bgt.n	8006370 <__swbuf_r+0x4e>
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 fa70 	bl	800684c <_fflush_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	d1ed      	bne.n	800634c <__swbuf_r+0x2a>
 8006370:	68a3      	ldr	r3, [r4, #8]
 8006372:	3b01      	subs	r3, #1
 8006374:	60a3      	str	r3, [r4, #8]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	6022      	str	r2, [r4, #0]
 800637c:	701e      	strb	r6, [r3, #0]
 800637e:	6962      	ldr	r2, [r4, #20]
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	429a      	cmp	r2, r3
 8006384:	d004      	beq.n	8006390 <__swbuf_r+0x6e>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d5e1      	bpl.n	8006350 <__swbuf_r+0x2e>
 800638c:	2e0a      	cmp	r6, #10
 800638e:	d1df      	bne.n	8006350 <__swbuf_r+0x2e>
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	f000 fa5a 	bl	800684c <_fflush_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	d0d9      	beq.n	8006350 <__swbuf_r+0x2e>
 800639c:	e7d6      	b.n	800634c <__swbuf_r+0x2a>
	...

080063a0 <__swsetup_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4b29      	ldr	r3, [pc, #164]	@ (8006448 <__swsetup_r+0xa8>)
 80063a4:	4605      	mov	r5, r0
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	460c      	mov	r4, r1
 80063aa:	b118      	cbz	r0, 80063b4 <__swsetup_r+0x14>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <__swsetup_r+0x14>
 80063b0:	f7ff fee0 	bl	8006174 <__sinit>
 80063b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b8:	0719      	lsls	r1, r3, #28
 80063ba:	d422      	bmi.n	8006402 <__swsetup_r+0x62>
 80063bc:	06da      	lsls	r2, r3, #27
 80063be:	d407      	bmi.n	80063d0 <__swsetup_r+0x30>
 80063c0:	2209      	movs	r2, #9
 80063c2:	602a      	str	r2, [r5, #0]
 80063c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	e033      	b.n	8006438 <__swsetup_r+0x98>
 80063d0:	0758      	lsls	r0, r3, #29
 80063d2:	d512      	bpl.n	80063fa <__swsetup_r+0x5a>
 80063d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063d6:	b141      	cbz	r1, 80063ea <__swsetup_r+0x4a>
 80063d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063dc:	4299      	cmp	r1, r3
 80063de:	d002      	beq.n	80063e6 <__swsetup_r+0x46>
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f8bd 	bl	8006560 <_free_r>
 80063e6:	2300      	movs	r3, #0
 80063e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	2300      	movs	r3, #0
 80063f4:	6063      	str	r3, [r4, #4]
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f043 0308 	orr.w	r3, r3, #8
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	b94b      	cbnz	r3, 800641a <__swsetup_r+0x7a>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800640c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006410:	d003      	beq.n	800641a <__swsetup_r+0x7a>
 8006412:	4621      	mov	r1, r4
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fa66 	bl	80068e6 <__smakebuf_r>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	f013 0201 	ands.w	r2, r3, #1
 8006422:	d00a      	beq.n	800643a <__swsetup_r+0x9a>
 8006424:	2200      	movs	r2, #0
 8006426:	60a2      	str	r2, [r4, #8]
 8006428:	6962      	ldr	r2, [r4, #20]
 800642a:	4252      	negs	r2, r2
 800642c:	61a2      	str	r2, [r4, #24]
 800642e:	6922      	ldr	r2, [r4, #16]
 8006430:	b942      	cbnz	r2, 8006444 <__swsetup_r+0xa4>
 8006432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006436:	d1c5      	bne.n	80063c4 <__swsetup_r+0x24>
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	0799      	lsls	r1, r3, #30
 800643c:	bf58      	it	pl
 800643e:	6962      	ldrpl	r2, [r4, #20]
 8006440:	60a2      	str	r2, [r4, #8]
 8006442:	e7f4      	b.n	800642e <__swsetup_r+0x8e>
 8006444:	2000      	movs	r0, #0
 8006446:	e7f7      	b.n	8006438 <__swsetup_r+0x98>
 8006448:	2000001c 	.word	0x2000001c

0800644c <memset>:
 800644c:	4603      	mov	r3, r0
 800644e:	4402      	add	r2, r0
 8006450:	4293      	cmp	r3, r2
 8006452:	d100      	bne.n	8006456 <memset+0xa>
 8006454:	4770      	bx	lr
 8006456:	f803 1b01 	strb.w	r1, [r3], #1
 800645a:	e7f9      	b.n	8006450 <memset+0x4>

0800645c <_close_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	@ (8006478 <_close_r+0x1c>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fa fb61 	bl	8000b2e <_close>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_close_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_close_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20001c8c 	.word	0x20001c8c

0800647c <_lseek_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	2200      	movs	r2, #0
 8006486:	4d05      	ldr	r5, [pc, #20]	@ (800649c <_lseek_r+0x20>)
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	f7fa fb73 	bl	8000b76 <_lseek>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_lseek_r+0x1e>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_lseek_r+0x1e>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20001c8c 	.word	0x20001c8c

080064a0 <_read_r>:
 80064a0:	b538      	push	{r3, r4, r5, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	2200      	movs	r2, #0
 80064aa:	4d05      	ldr	r5, [pc, #20]	@ (80064c0 <_read_r+0x20>)
 80064ac:	602a      	str	r2, [r5, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f7fa fb04 	bl	8000abc <_read>
 80064b4:	1c43      	adds	r3, r0, #1
 80064b6:	d102      	bne.n	80064be <_read_r+0x1e>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	b103      	cbz	r3, 80064be <_read_r+0x1e>
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	bd38      	pop	{r3, r4, r5, pc}
 80064c0:	20001c8c 	.word	0x20001c8c

080064c4 <_write_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	4611      	mov	r1, r2
 80064cc:	2200      	movs	r2, #0
 80064ce:	4d05      	ldr	r5, [pc, #20]	@ (80064e4 <_write_r+0x20>)
 80064d0:	602a      	str	r2, [r5, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fa fb0f 	bl	8000af6 <_write>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_write_r+0x1e>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_write_r+0x1e>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	20001c8c 	.word	0x20001c8c

080064e8 <__errno>:
 80064e8:	4b01      	ldr	r3, [pc, #4]	@ (80064f0 <__errno+0x8>)
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	2000001c 	.word	0x2000001c

080064f4 <__libc_init_array>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	2600      	movs	r6, #0
 80064f8:	4d0c      	ldr	r5, [pc, #48]	@ (800652c <__libc_init_array+0x38>)
 80064fa:	4c0d      	ldr	r4, [pc, #52]	@ (8006530 <__libc_init_array+0x3c>)
 80064fc:	1b64      	subs	r4, r4, r5
 80064fe:	10a4      	asrs	r4, r4, #2
 8006500:	42a6      	cmp	r6, r4
 8006502:	d109      	bne.n	8006518 <__libc_init_array+0x24>
 8006504:	f000 fa5e 	bl	80069c4 <_init>
 8006508:	2600      	movs	r6, #0
 800650a:	4d0a      	ldr	r5, [pc, #40]	@ (8006534 <__libc_init_array+0x40>)
 800650c:	4c0a      	ldr	r4, [pc, #40]	@ (8006538 <__libc_init_array+0x44>)
 800650e:	1b64      	subs	r4, r4, r5
 8006510:	10a4      	asrs	r4, r4, #2
 8006512:	42a6      	cmp	r6, r4
 8006514:	d105      	bne.n	8006522 <__libc_init_array+0x2e>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	f855 3b04 	ldr.w	r3, [r5], #4
 800651c:	4798      	blx	r3
 800651e:	3601      	adds	r6, #1
 8006520:	e7ee      	b.n	8006500 <__libc_init_array+0xc>
 8006522:	f855 3b04 	ldr.w	r3, [r5], #4
 8006526:	4798      	blx	r3
 8006528:	3601      	adds	r6, #1
 800652a:	e7f2      	b.n	8006512 <__libc_init_array+0x1e>
 800652c:	08006abc 	.word	0x08006abc
 8006530:	08006abc 	.word	0x08006abc
 8006534:	08006abc 	.word	0x08006abc
 8006538:	08006ac0 	.word	0x08006ac0

0800653c <__retarget_lock_init_recursive>:
 800653c:	4770      	bx	lr

0800653e <__retarget_lock_acquire_recursive>:
 800653e:	4770      	bx	lr

08006540 <__retarget_lock_release_recursive>:
 8006540:	4770      	bx	lr

08006542 <memcpy>:
 8006542:	440a      	add	r2, r1
 8006544:	4291      	cmp	r1, r2
 8006546:	f100 33ff 	add.w	r3, r0, #4294967295
 800654a:	d100      	bne.n	800654e <memcpy+0xc>
 800654c:	4770      	bx	lr
 800654e:	b510      	push	{r4, lr}
 8006550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006554:	4291      	cmp	r1, r2
 8006556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800655a:	d1f9      	bne.n	8006550 <memcpy+0xe>
 800655c:	bd10      	pop	{r4, pc}
	...

08006560 <_free_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4605      	mov	r5, r0
 8006564:	2900      	cmp	r1, #0
 8006566:	d040      	beq.n	80065ea <_free_r+0x8a>
 8006568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656c:	1f0c      	subs	r4, r1, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	bfb8      	it	lt
 8006572:	18e4      	addlt	r4, r4, r3
 8006574:	f000 f8de 	bl	8006734 <__malloc_lock>
 8006578:	4a1c      	ldr	r2, [pc, #112]	@ (80065ec <_free_r+0x8c>)
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	b933      	cbnz	r3, 800658c <_free_r+0x2c>
 800657e:	6063      	str	r3, [r4, #4]
 8006580:	6014      	str	r4, [r2, #0]
 8006582:	4628      	mov	r0, r5
 8006584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006588:	f000 b8da 	b.w	8006740 <__malloc_unlock>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d908      	bls.n	80065a2 <_free_r+0x42>
 8006590:	6820      	ldr	r0, [r4, #0]
 8006592:	1821      	adds	r1, r4, r0
 8006594:	428b      	cmp	r3, r1
 8006596:	bf01      	itttt	eq
 8006598:	6819      	ldreq	r1, [r3, #0]
 800659a:	685b      	ldreq	r3, [r3, #4]
 800659c:	1809      	addeq	r1, r1, r0
 800659e:	6021      	streq	r1, [r4, #0]
 80065a0:	e7ed      	b.n	800657e <_free_r+0x1e>
 80065a2:	461a      	mov	r2, r3
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	b10b      	cbz	r3, 80065ac <_free_r+0x4c>
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d9fa      	bls.n	80065a2 <_free_r+0x42>
 80065ac:	6811      	ldr	r1, [r2, #0]
 80065ae:	1850      	adds	r0, r2, r1
 80065b0:	42a0      	cmp	r0, r4
 80065b2:	d10b      	bne.n	80065cc <_free_r+0x6c>
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	4401      	add	r1, r0
 80065b8:	1850      	adds	r0, r2, r1
 80065ba:	4283      	cmp	r3, r0
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	d1e0      	bne.n	8006582 <_free_r+0x22>
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4408      	add	r0, r1
 80065c6:	6010      	str	r0, [r2, #0]
 80065c8:	6053      	str	r3, [r2, #4]
 80065ca:	e7da      	b.n	8006582 <_free_r+0x22>
 80065cc:	d902      	bls.n	80065d4 <_free_r+0x74>
 80065ce:	230c      	movs	r3, #12
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	e7d6      	b.n	8006582 <_free_r+0x22>
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	1821      	adds	r1, r4, r0
 80065d8:	428b      	cmp	r3, r1
 80065da:	bf01      	itttt	eq
 80065dc:	6819      	ldreq	r1, [r3, #0]
 80065de:	685b      	ldreq	r3, [r3, #4]
 80065e0:	1809      	addeq	r1, r1, r0
 80065e2:	6021      	streq	r1, [r4, #0]
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	6054      	str	r4, [r2, #4]
 80065e8:	e7cb      	b.n	8006582 <_free_r+0x22>
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20001c98 	.word	0x20001c98

080065f0 <sbrk_aligned>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006630 <sbrk_aligned+0x40>)
 80065f4:	460c      	mov	r4, r1
 80065f6:	6831      	ldr	r1, [r6, #0]
 80065f8:	4605      	mov	r5, r0
 80065fa:	b911      	cbnz	r1, 8006602 <sbrk_aligned+0x12>
 80065fc:	f000 f9d2 	bl	80069a4 <_sbrk_r>
 8006600:	6030      	str	r0, [r6, #0]
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f9cd 	bl	80069a4 <_sbrk_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	d103      	bne.n	8006616 <sbrk_aligned+0x26>
 800660e:	f04f 34ff 	mov.w	r4, #4294967295
 8006612:	4620      	mov	r0, r4
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d0f8      	beq.n	8006612 <sbrk_aligned+0x22>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f9be 	bl	80069a4 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d1f2      	bne.n	8006612 <sbrk_aligned+0x22>
 800662c:	e7ef      	b.n	800660e <sbrk_aligned+0x1e>
 800662e:	bf00      	nop
 8006630:	20001c94 	.word	0x20001c94

08006634 <_malloc_r>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	1ccd      	adds	r5, r1, #3
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	2d00      	cmp	r5, #0
 8006648:	4606      	mov	r6, r0
 800664a:	db01      	blt.n	8006650 <_malloc_r+0x1c>
 800664c:	42a9      	cmp	r1, r5
 800664e:	d904      	bls.n	800665a <_malloc_r+0x26>
 8006650:	230c      	movs	r3, #12
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006730 <_malloc_r+0xfc>
 800665e:	f000 f869 	bl	8006734 <__malloc_lock>
 8006662:	f8d8 3000 	ldr.w	r3, [r8]
 8006666:	461c      	mov	r4, r3
 8006668:	bb44      	cbnz	r4, 80066bc <_malloc_r+0x88>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ffbf 	bl	80065f0 <sbrk_aligned>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	4604      	mov	r4, r0
 8006676:	d158      	bne.n	800672a <_malloc_r+0xf6>
 8006678:	f8d8 4000 	ldr.w	r4, [r8]
 800667c:	4627      	mov	r7, r4
 800667e:	2f00      	cmp	r7, #0
 8006680:	d143      	bne.n	800670a <_malloc_r+0xd6>
 8006682:	2c00      	cmp	r4, #0
 8006684:	d04b      	beq.n	800671e <_malloc_r+0xea>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	eb04 0903 	add.w	r9, r4, r3
 8006690:	f000 f988 	bl	80069a4 <_sbrk_r>
 8006694:	4581      	cmp	r9, r0
 8006696:	d142      	bne.n	800671e <_malloc_r+0xea>
 8006698:	6821      	ldr	r1, [r4, #0]
 800669a:	4630      	mov	r0, r6
 800669c:	1a6d      	subs	r5, r5, r1
 800669e:	4629      	mov	r1, r5
 80066a0:	f7ff ffa6 	bl	80065f0 <sbrk_aligned>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d03a      	beq.n	800671e <_malloc_r+0xea>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	442b      	add	r3, r5
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	f8d8 3000 	ldr.w	r3, [r8]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	bb62      	cbnz	r2, 8006710 <_malloc_r+0xdc>
 80066b6:	f8c8 7000 	str.w	r7, [r8]
 80066ba:	e00f      	b.n	80066dc <_malloc_r+0xa8>
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	1b52      	subs	r2, r2, r5
 80066c0:	d420      	bmi.n	8006704 <_malloc_r+0xd0>
 80066c2:	2a0b      	cmp	r2, #11
 80066c4:	d917      	bls.n	80066f6 <_malloc_r+0xc2>
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	6025      	str	r5, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	6059      	strne	r1, [r3, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	bf08      	it	eq
 80066d4:	f8c8 1000 	streq.w	r1, [r8]
 80066d8:	5162      	str	r2, [r4, r5]
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f82f 	bl	8006740 <__malloc_unlock>
 80066e2:	f104 000b 	add.w	r0, r4, #11
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	f020 0007 	bic.w	r0, r0, #7
 80066ec:	1ac2      	subs	r2, r0, r3
 80066ee:	bf1c      	itt	ne
 80066f0:	1a1b      	subne	r3, r3, r0
 80066f2:	50a3      	strne	r3, [r4, r2]
 80066f4:	e7af      	b.n	8006656 <_malloc_r+0x22>
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	bf0c      	ite	eq
 80066fc:	f8c8 2000 	streq.w	r2, [r8]
 8006700:	605a      	strne	r2, [r3, #4]
 8006702:	e7eb      	b.n	80066dc <_malloc_r+0xa8>
 8006704:	4623      	mov	r3, r4
 8006706:	6864      	ldr	r4, [r4, #4]
 8006708:	e7ae      	b.n	8006668 <_malloc_r+0x34>
 800670a:	463c      	mov	r4, r7
 800670c:	687f      	ldr	r7, [r7, #4]
 800670e:	e7b6      	b.n	800667e <_malloc_r+0x4a>
 8006710:	461a      	mov	r2, r3
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	42a3      	cmp	r3, r4
 8006716:	d1fb      	bne.n	8006710 <_malloc_r+0xdc>
 8006718:	2300      	movs	r3, #0
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	e7de      	b.n	80066dc <_malloc_r+0xa8>
 800671e:	230c      	movs	r3, #12
 8006720:	4630      	mov	r0, r6
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f000 f80c 	bl	8006740 <__malloc_unlock>
 8006728:	e794      	b.n	8006654 <_malloc_r+0x20>
 800672a:	6005      	str	r5, [r0, #0]
 800672c:	e7d6      	b.n	80066dc <_malloc_r+0xa8>
 800672e:	bf00      	nop
 8006730:	20001c98 	.word	0x20001c98

08006734 <__malloc_lock>:
 8006734:	4801      	ldr	r0, [pc, #4]	@ (800673c <__malloc_lock+0x8>)
 8006736:	f7ff bf02 	b.w	800653e <__retarget_lock_acquire_recursive>
 800673a:	bf00      	nop
 800673c:	20001c90 	.word	0x20001c90

08006740 <__malloc_unlock>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__malloc_unlock+0x8>)
 8006742:	f7ff befd 	b.w	8006540 <__retarget_lock_release_recursive>
 8006746:	bf00      	nop
 8006748:	20001c90 	.word	0x20001c90

0800674c <__sflush_r>:
 800674c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	0716      	lsls	r6, r2, #28
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	d454      	bmi.n	8006804 <__sflush_r+0xb8>
 800675a:	684b      	ldr	r3, [r1, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	dc02      	bgt.n	8006766 <__sflush_r+0x1a>
 8006760:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	dd48      	ble.n	80067f8 <__sflush_r+0xac>
 8006766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006768:	2e00      	cmp	r6, #0
 800676a:	d045      	beq.n	80067f8 <__sflush_r+0xac>
 800676c:	2300      	movs	r3, #0
 800676e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006772:	682f      	ldr	r7, [r5, #0]
 8006774:	6a21      	ldr	r1, [r4, #32]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	d030      	beq.n	80067dc <__sflush_r+0x90>
 800677a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	0759      	lsls	r1, r3, #29
 8006780:	d505      	bpl.n	800678e <__sflush_r+0x42>
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006788:	b10b      	cbz	r3, 800678e <__sflush_r+0x42>
 800678a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4628      	mov	r0, r5
 8006792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006794:	6a21      	ldr	r1, [r4, #32]
 8006796:	47b0      	blx	r6
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	d106      	bne.n	80067ac <__sflush_r+0x60>
 800679e:	6829      	ldr	r1, [r5, #0]
 80067a0:	291d      	cmp	r1, #29
 80067a2:	d82b      	bhi.n	80067fc <__sflush_r+0xb0>
 80067a4:	4a28      	ldr	r2, [pc, #160]	@ (8006848 <__sflush_r+0xfc>)
 80067a6:	410a      	asrs	r2, r1
 80067a8:	07d6      	lsls	r6, r2, #31
 80067aa:	d427      	bmi.n	80067fc <__sflush_r+0xb0>
 80067ac:	2200      	movs	r2, #0
 80067ae:	6062      	str	r2, [r4, #4]
 80067b0:	6922      	ldr	r2, [r4, #16]
 80067b2:	04d9      	lsls	r1, r3, #19
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	d504      	bpl.n	80067c2 <__sflush_r+0x76>
 80067b8:	1c42      	adds	r2, r0, #1
 80067ba:	d101      	bne.n	80067c0 <__sflush_r+0x74>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b903      	cbnz	r3, 80067c2 <__sflush_r+0x76>
 80067c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80067c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c4:	602f      	str	r7, [r5, #0]
 80067c6:	b1b9      	cbz	r1, 80067f8 <__sflush_r+0xac>
 80067c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <__sflush_r+0x8a>
 80067d0:	4628      	mov	r0, r5
 80067d2:	f7ff fec5 	bl	8006560 <_free_r>
 80067d6:	2300      	movs	r3, #0
 80067d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067da:	e00d      	b.n	80067f8 <__sflush_r+0xac>
 80067dc:	2301      	movs	r3, #1
 80067de:	4628      	mov	r0, r5
 80067e0:	47b0      	blx	r6
 80067e2:	4602      	mov	r2, r0
 80067e4:	1c50      	adds	r0, r2, #1
 80067e6:	d1c9      	bne.n	800677c <__sflush_r+0x30>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0c6      	beq.n	800677c <__sflush_r+0x30>
 80067ee:	2b1d      	cmp	r3, #29
 80067f0:	d001      	beq.n	80067f6 <__sflush_r+0xaa>
 80067f2:	2b16      	cmp	r3, #22
 80067f4:	d11d      	bne.n	8006832 <__sflush_r+0xe6>
 80067f6:	602f      	str	r7, [r5, #0]
 80067f8:	2000      	movs	r0, #0
 80067fa:	e021      	b.n	8006840 <__sflush_r+0xf4>
 80067fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006800:	b21b      	sxth	r3, r3
 8006802:	e01a      	b.n	800683a <__sflush_r+0xee>
 8006804:	690f      	ldr	r7, [r1, #16]
 8006806:	2f00      	cmp	r7, #0
 8006808:	d0f6      	beq.n	80067f8 <__sflush_r+0xac>
 800680a:	0793      	lsls	r3, r2, #30
 800680c:	bf18      	it	ne
 800680e:	2300      	movne	r3, #0
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	bf08      	it	eq
 8006814:	694b      	ldreq	r3, [r1, #20]
 8006816:	1bf6      	subs	r6, r6, r7
 8006818:	600f      	str	r7, [r1, #0]
 800681a:	608b      	str	r3, [r1, #8]
 800681c:	2e00      	cmp	r6, #0
 800681e:	ddeb      	ble.n	80067f8 <__sflush_r+0xac>
 8006820:	4633      	mov	r3, r6
 8006822:	463a      	mov	r2, r7
 8006824:	4628      	mov	r0, r5
 8006826:	6a21      	ldr	r1, [r4, #32]
 8006828:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800682c:	47e0      	blx	ip
 800682e:	2800      	cmp	r0, #0
 8006830:	dc07      	bgt.n	8006842 <__sflush_r+0xf6>
 8006832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	4407      	add	r7, r0
 8006844:	1a36      	subs	r6, r6, r0
 8006846:	e7e9      	b.n	800681c <__sflush_r+0xd0>
 8006848:	dfbffffe 	.word	0xdfbffffe

0800684c <_fflush_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b913      	cbnz	r3, 800685c <_fflush_r+0x10>
 8006856:	2500      	movs	r5, #0
 8006858:	4628      	mov	r0, r5
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	b118      	cbz	r0, 8006866 <_fflush_r+0x1a>
 800685e:	6a03      	ldr	r3, [r0, #32]
 8006860:	b90b      	cbnz	r3, 8006866 <_fflush_r+0x1a>
 8006862:	f7ff fc87 	bl	8006174 <__sinit>
 8006866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f3      	beq.n	8006856 <_fflush_r+0xa>
 800686e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006870:	07d0      	lsls	r0, r2, #31
 8006872:	d404      	bmi.n	800687e <_fflush_r+0x32>
 8006874:	0599      	lsls	r1, r3, #22
 8006876:	d402      	bmi.n	800687e <_fflush_r+0x32>
 8006878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800687a:	f7ff fe60 	bl	800653e <__retarget_lock_acquire_recursive>
 800687e:	4628      	mov	r0, r5
 8006880:	4621      	mov	r1, r4
 8006882:	f7ff ff63 	bl	800674c <__sflush_r>
 8006886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006888:	4605      	mov	r5, r0
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d4e4      	bmi.n	8006858 <_fflush_r+0xc>
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	059b      	lsls	r3, r3, #22
 8006892:	d4e1      	bmi.n	8006858 <_fflush_r+0xc>
 8006894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006896:	f7ff fe53 	bl	8006540 <__retarget_lock_release_recursive>
 800689a:	e7dd      	b.n	8006858 <_fflush_r+0xc>

0800689c <__swhatbuf_r>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	460c      	mov	r4, r1
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	4615      	mov	r5, r2
 80068a6:	2900      	cmp	r1, #0
 80068a8:	461e      	mov	r6, r3
 80068aa:	b096      	sub	sp, #88	@ 0x58
 80068ac:	da0c      	bge.n	80068c8 <__swhatbuf_r+0x2c>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	2100      	movs	r1, #0
 80068b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80068b6:	bf14      	ite	ne
 80068b8:	2340      	movne	r3, #64	@ 0x40
 80068ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80068be:	2000      	movs	r0, #0
 80068c0:	6031      	str	r1, [r6, #0]
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	b016      	add	sp, #88	@ 0x58
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	466a      	mov	r2, sp
 80068ca:	f000 f849 	bl	8006960 <_fstat_r>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	dbed      	blt.n	80068ae <__swhatbuf_r+0x12>
 80068d2:	9901      	ldr	r1, [sp, #4]
 80068d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80068d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80068dc:	4259      	negs	r1, r3
 80068de:	4159      	adcs	r1, r3
 80068e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068e4:	e7eb      	b.n	80068be <__swhatbuf_r+0x22>

080068e6 <__smakebuf_r>:
 80068e6:	898b      	ldrh	r3, [r1, #12]
 80068e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ea:	079d      	lsls	r5, r3, #30
 80068ec:	4606      	mov	r6, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	d507      	bpl.n	8006902 <__smakebuf_r+0x1c>
 80068f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	6123      	str	r3, [r4, #16]
 80068fa:	2301      	movs	r3, #1
 80068fc:	6163      	str	r3, [r4, #20]
 80068fe:	b003      	add	sp, #12
 8006900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006902:	466a      	mov	r2, sp
 8006904:	ab01      	add	r3, sp, #4
 8006906:	f7ff ffc9 	bl	800689c <__swhatbuf_r>
 800690a:	9f00      	ldr	r7, [sp, #0]
 800690c:	4605      	mov	r5, r0
 800690e:	4639      	mov	r1, r7
 8006910:	4630      	mov	r0, r6
 8006912:	f7ff fe8f 	bl	8006634 <_malloc_r>
 8006916:	b948      	cbnz	r0, 800692c <__smakebuf_r+0x46>
 8006918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d4ee      	bmi.n	80068fe <__smakebuf_r+0x18>
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	e7e2      	b.n	80068f2 <__smakebuf_r+0xc>
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	6020      	str	r0, [r4, #0]
 800693c:	b15b      	cbz	r3, 8006956 <__smakebuf_r+0x70>
 800693e:	4630      	mov	r0, r6
 8006940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006944:	f000 f81e 	bl	8006984 <_isatty_r>
 8006948:	b128      	cbz	r0, 8006956 <__smakebuf_r+0x70>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f023 0303 	bic.w	r3, r3, #3
 8006950:	f043 0301 	orr.w	r3, r3, #1
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	431d      	orrs	r5, r3
 800695a:	81a5      	strh	r5, [r4, #12]
 800695c:	e7cf      	b.n	80068fe <__smakebuf_r+0x18>
	...

08006960 <_fstat_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	2300      	movs	r3, #0
 8006964:	4d06      	ldr	r5, [pc, #24]	@ (8006980 <_fstat_r+0x20>)
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	4611      	mov	r1, r2
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	f7fa f8e9 	bl	8000b44 <_fstat>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d102      	bne.n	800697c <_fstat_r+0x1c>
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	b103      	cbz	r3, 800697c <_fstat_r+0x1c>
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	bf00      	nop
 8006980:	20001c8c 	.word	0x20001c8c

08006984 <_isatty_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	2300      	movs	r3, #0
 8006988:	4d05      	ldr	r5, [pc, #20]	@ (80069a0 <_isatty_r+0x1c>)
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa f8e7 	bl	8000b62 <_isatty>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_isatty_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_isatty_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	20001c8c 	.word	0x20001c8c

080069a4 <_sbrk_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	2300      	movs	r3, #0
 80069a8:	4d05      	ldr	r5, [pc, #20]	@ (80069c0 <_sbrk_r+0x1c>)
 80069aa:	4604      	mov	r4, r0
 80069ac:	4608      	mov	r0, r1
 80069ae:	602b      	str	r3, [r5, #0]
 80069b0:	f7fa f8ee 	bl	8000b90 <_sbrk>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_sbrk_r+0x1a>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_sbrk_r+0x1a>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20001c8c 	.word	0x20001c8c

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
