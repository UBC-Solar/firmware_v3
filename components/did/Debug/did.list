
did.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004144  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08004254  08004254  00005254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004460  08004460  00006134  2**0
                  CONTENTS
  4 .ARM          00000000  08004460  08004460  00006134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004460  08004460  00006134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004460  08004460  00005460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004464  08004464  00005464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08004468  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000134  0800459c  00006134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800459c  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a204  00000000  00000000  0000615d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cf  00000000  00000000  00010361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00012430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f7  00000000  00000000  00012fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018731  00000000  00000000  000138cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d34f  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8e4  00000000  00000000  0003934f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5c33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003114  00000000  00000000  000c5c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c8d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000134 	.word	0x20000134
 800012c:	00000000 	.word	0x00000000
 8000130:	0800423c 	.word	0x0800423c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000138 	.word	0x20000138
 800014c:	0800423c 	.word	0x0800423c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_f2iz>:
 8000af4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000afc:	d30f      	bcc.n	8000b1e <__aeabi_f2iz+0x2a>
 8000afe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_f2iz+0x30>
 8000b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b10:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b14:	fa23 f002 	lsr.w	r0, r3, r2
 8000b18:	bf18      	it	ne
 8000b1a:	4240      	negne	r0, r0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2iz+0x3a>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d105      	bne.n	8000b3a <__aeabi_f2iz+0x46>
 8000b2e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b32:	bf08      	it	eq
 8000b34:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_f2uiz>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	d20e      	bcs.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b44:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b48:	d30b      	bcc.n	8000b62 <__aeabi_f2uiz+0x22>
 8000b4a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b52:	d409      	bmi.n	8000b68 <__aeabi_f2uiz+0x28>
 8000b54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr
 8000b68:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b6c:	d101      	bne.n	8000b72 <__aeabi_f2uiz+0x32>
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	d102      	bne.n	8000b78 <__aeabi_f2uiz+0x38>
 8000b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <parse_can_message>:
 *  Function declarations
 */


void parse_can_message( uint8_t* CAN_rx_data, uint32_t CAN_ID )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	switch(CAN_ID)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f5b3 6fea 	cmp.w	r3, #1872	@ 0x750
 8000b90:	d06a      	beq.n	8000c68 <parse_can_message+0xe8>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f5b3 6fea 	cmp.w	r3, #1872	@ 0x750
 8000b98:	f200 818b 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f240 7202 	movw	r2, #1794	@ 0x702
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	f000 812c 	beq.w	8000e00 <parse_can_message+0x280>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f240 7202 	movw	r2, #1794	@ 0x702
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f200 817f 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f240 6225 	movw	r2, #1573	@ 0x625
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	f200 8179 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f240 6222 	movw	r2, #1570	@ 0x622
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d239      	bcs.n	8000c3e <parse_can_message+0xbe>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f240 5206 	movw	r2, #1286	@ 0x506
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	f000 8100 	beq.w	8000dd6 <parse_can_message+0x256>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	f240 5206 	movw	r2, #1286	@ 0x506
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	f200 8168 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f240 5203 	movw	r2, #1283	@ 0x503
 8000be8:	4293      	cmp	r3, r2
 8000bea:	f000 80a7 	beq.w	8000d3c <parse_can_message+0x1bc>
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	f240 5203 	movw	r2, #1283	@ 0x503
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	f200 815c 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8000c00:	f000 8113 	beq.w	8000e2a <parse_can_message+0x2aa>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8000c0a:	f200 8152 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f240 4204 	movw	r2, #1028	@ 0x404
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f000 80cb 	beq.w	8000db0 <parse_can_message+0x230>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f240 4204 	movw	r2, #1028	@ 0x404
 8000c20:	4293      	cmp	r3, r2
 8000c22:	f200 8146 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f240 4201 	movw	r2, #1025	@ 0x401
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d055      	beq.n	8000cdc <parse_can_message+0x15c>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f240 4203 	movw	r2, #1027	@ 0x403
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f000 80b0 	beq.w	8000d9c <parse_can_message+0x21c>
			SET_CYCLIC_DATA( data_pack_temperature, temp_pack_temperature.S8_value );
			break;

		
	}
}
 8000c3c:	e139      	b.n	8000eb2 <parse_can_message+0x332>
	switch(CAN_ID)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f2a3 6322 	subw	r3, r3, #1570	@ 0x622
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	f200 8134 	bhi.w	8000eb2 <parse_can_message+0x332>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <parse_can_message+0xd0>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000e6b 	.word	0x08000e6b
 8000c58:	08000cc9 	.word	0x08000cc9
 8000c5c:	08000e99 	.word	0x08000e99
			parse_warnings(CAN_rx_data);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fb9d 	bl	80013a0 <parse_warnings>
			break;
 8000c66:	e124      	b.n	8000eb2 <parse_can_message+0x332>
			temp_simulation_speed.bytes[0] = CAN_rx_data[0];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			temp_simulation_speed.bytes[1] = CAN_rx_data[1];
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			temp_simulation_speed.bytes[2] = CAN_rx_data[2];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			temp_simulation_speed.bytes[3] = CAN_rx_data[3];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	78db      	ldrb	r3, [r3, #3]
 8000c84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			temp_simulation_speed.float_value = round(MS_TO_MPH(temp_simulation_speed.float_value));
 8000c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc78 	bl	8000580 <__aeabi_f2d>
 8000c90:	a38b      	add	r3, pc, #556	@ (adr r3, 8000ec0 <parse_can_message+0x340>)
 8000c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c96:	f7ff fccb 	bl	8000630 <__aeabi_dmul>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 fa85 	bl	80041b0 <round>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fed1 	bl	8000a54 <__aeabi_d2f>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
			SET_CYCLIC_DATA( data_simulation_speed, temp_simulation_speed.float_value );
 8000cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb8:	4a85      	ldr	r2, [pc, #532]	@ (8000ed0 <parse_can_message+0x350>)
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	f001 fbc4 	bl	8002448 <HAL_GetTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a83      	ldr	r2, [pc, #524]	@ (8000ed0 <parse_can_message+0x350>)
 8000cc4:	6053      	str	r3, [r2, #4]
			break;
 8000cc6:	e0f4      	b.n	8000eb2 <parse_can_message+0x332>
			SET_CYCLIC_DATA( data_battery_SOC, CAN_rx_data[0] );
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	4b81      	ldr	r3, [pc, #516]	@ (8000ed4 <parse_can_message+0x354>)
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	f001 fbba 	bl	8002448 <HAL_GetTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a7f      	ldr	r2, [pc, #508]	@ (8000ed4 <parse_can_message+0x354>)
 8000cd8:	6053      	str	r3, [r2, #4]
			break;
 8000cda:	e0ea      	b.n	8000eb2 <parse_can_message+0x332>
			temp_target_velocity.bytes[0] = CAN_rx_data[0];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			temp_target_velocity.bytes[1] = CAN_rx_data[1];
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			temp_target_velocity.bytes[2] = CAN_rx_data[2];
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	789b      	ldrb	r3, [r3, #2]
 8000cf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			temp_target_velocity.bytes[3] = CAN_rx_data[3];
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	78db      	ldrb	r3, [r3, #3]
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			temp_target_velocity.float_value = round(MS_TO_MPH(temp_target_velocity.float_value));
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fc3e 	bl	8000580 <__aeabi_f2d>
 8000d04:	a36e      	add	r3, pc, #440	@ (adr r3, 8000ec0 <parse_can_message+0x340>)
 8000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0a:	f7ff fc91 	bl	8000630 <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f003 fa4b 	bl	80041b0 <round>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4619      	mov	r1, r3
 8000d22:	f7ff fe97 	bl	8000a54 <__aeabi_d2f>
 8000d26:	4603      	mov	r3, r0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
			SET_CYCLIC_DATA( data_target_velocity, temp_target_velocity.float_value );
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed8 <parse_can_message+0x358>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	f001 fb8a 	bl	8002448 <HAL_GetTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	4a68      	ldr	r2, [pc, #416]	@ (8000ed8 <parse_can_message+0x358>)
 8000d38:	6053      	str	r3, [r2, #4]
			break;
 8000d3a:	e0ba      	b.n	8000eb2 <parse_can_message+0x332>
			temp_vehicle_velocity.bytes[0] = CAN_rx_data[4];
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	f887 3020 	strb.w	r3, [r7, #32]
			temp_vehicle_velocity.bytes[1] = CAN_rx_data[5];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	795b      	ldrb	r3, [r3, #5]
 8000d48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			temp_vehicle_velocity.bytes[2] = CAN_rx_data[6];
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	799b      	ldrb	r3, [r3, #6]
 8000d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			temp_vehicle_velocity.bytes[3] = CAN_rx_data[7];
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	79db      	ldrb	r3, [r3, #7]
 8000d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			temp_vehicle_velocity.float_value = round(MS_TO_MPH(temp_vehicle_velocity.float_value));
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fc0e 	bl	8000580 <__aeabi_f2d>
 8000d64:	a356      	add	r3, pc, #344	@ (adr r3, 8000ec0 <parse_can_message+0x340>)
 8000d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6a:	f7ff fc61 	bl	8000630 <__aeabi_dmul>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f003 fa1b 	bl	80041b0 <round>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f7ff fe67 	bl	8000a54 <__aeabi_d2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	623b      	str	r3, [r7, #32]
			SET_CYCLIC_DATA( data_vehicle_velocity, temp_vehicle_velocity.float_value );
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	4a53      	ldr	r2, [pc, #332]	@ (8000edc <parse_can_message+0x35c>)
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	f001 fb5a 	bl	8002448 <HAL_GetTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a51      	ldr	r2, [pc, #324]	@ (8000edc <parse_can_message+0x35c>)
 8000d98:	6053      	str	r3, [r2, #4]
			break;
 8000d9a:	e08a      	b.n	8000eb2 <parse_can_message+0x332>
			SET_CYCLIC_DATA( data_MCB_drive_state, CAN_rx_data[0] );
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee0 <parse_can_message+0x360>)
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	f001 fb50 	bl	8002448 <HAL_GetTick>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee0 <parse_can_message+0x360>)
 8000dac:	6053      	str	r3, [r2, #4]
			break;
 8000dae:	e080      	b.n	8000eb2 <parse_can_message+0x332>
			uint8_t regen_enabled = GETBIT(CAN_rx_data[2], 1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3302      	adds	r3, #2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			SET_CYCLIC_DATA( data_MCB_regen_enabled, regen_enabled);
 8000dc2:	4a48      	ldr	r2, [pc, #288]	@ (8000ee4 <parse_can_message+0x364>)
 8000dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dc8:	7013      	strb	r3, [r2, #0]
 8000dca:	f001 fb3d 	bl	8002448 <HAL_GetTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a44      	ldr	r2, [pc, #272]	@ (8000ee4 <parse_can_message+0x364>)
 8000dd2:	6053      	str	r3, [r2, #4]
			break;
 8000dd4:	e06d      	b.n	8000eb2 <parse_can_message+0x332>
			temp_motor_current.bytes[0] = CAN_rx_data[0];
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	773b      	strb	r3, [r7, #28]
			temp_motor_current.bytes[1] = CAN_rx_data[1];
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	777b      	strb	r3, [r7, #29]
			temp_motor_current.bytes[2] = CAN_rx_data[2];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	789b      	ldrb	r3, [r3, #2]
 8000de6:	77bb      	strb	r3, [r7, #30]
			temp_motor_current.bytes[3] = CAN_rx_data[3];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	78db      	ldrb	r3, [r3, #3]
 8000dec:	77fb      	strb	r3, [r7, #31]
			SET_CYCLIC_DATA( data_motor_current, temp_motor_current.float_value );
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee8 <parse_can_message+0x368>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	f001 fb28 	bl	8002448 <HAL_GetTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee8 <parse_can_message+0x368>)
 8000dfc:	6053      	str	r3, [r2, #4]
			break;
 8000dfe:	e058      	b.n	8000eb2 <parse_can_message+0x332>
			temp_array_current.bytes[0] = CAN_rx_data[4];
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	763b      	strb	r3, [r7, #24]
			temp_array_current.bytes[1] = CAN_rx_data[5];
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	767b      	strb	r3, [r7, #25]
			temp_array_current.bytes[2] = CAN_rx_data[6];
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	799b      	ldrb	r3, [r3, #6]
 8000e10:	76bb      	strb	r3, [r7, #26]
			temp_array_current.bytes[3] = CAN_rx_data[7];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	79db      	ldrb	r3, [r3, #7]
 8000e16:	76fb      	strb	r3, [r7, #27]
			SET_CYCLIC_DATA( data_array_current, temp_array_current.float_value );
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	4a34      	ldr	r2, [pc, #208]	@ (8000eec <parse_can_message+0x36c>)
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	f001 fb13 	bl	8002448 <HAL_GetTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a31      	ldr	r2, [pc, #196]	@ (8000eec <parse_can_message+0x36c>)
 8000e26:	6053      	str	r3, [r2, #4]
			break;
 8000e28:	e043      	b.n	8000eb2 <parse_can_message+0x332>
			temp_pack_current.bytes[0] = CAN_rx_data[0];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	753b      	strb	r3, [r7, #20]
			temp_pack_current.bytes[1] = CAN_rx_data[1];
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	785b      	ldrb	r3, [r3, #1]
 8000e34:	757b      	strb	r3, [r7, #21]
			pack_current_float.float_value = temp_pack_current.U16_value / PACK_CURRENT_DIVISOR;
 8000e36:	8abb      	ldrh	r3, [r7, #20]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fb8f 	bl	800055c <__aeabi_i2d>
 8000e3e:	a322      	add	r3, pc, #136	@ (adr r3, 8000ec8 <parse_can_message+0x348>)
 8000e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e44:	f7ff fd1e 	bl	8000884 <__aeabi_ddiv>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fe00 	bl	8000a54 <__aeabi_d2f>
 8000e54:	4603      	mov	r3, r0
 8000e56:	613b      	str	r3, [r7, #16]
			SET_CYCLIC_DATA( data_pack_current, pack_current_float.float_value );
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <parse_can_message+0x370>)
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	f001 faf3 	bl	8002448 <HAL_GetTick>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a22      	ldr	r2, [pc, #136]	@ (8000ef0 <parse_can_message+0x370>)
 8000e66:	6053      	str	r3, [r2, #4]
			break;
 8000e68:	e023      	b.n	8000eb2 <parse_can_message+0x332>
			temp_pack_voltage.bytes[0] = CAN_rx_data[0];
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	733b      	strb	r3, [r7, #12]
			temp_pack_voltage.bytes[1] = CAN_rx_data[1];
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	737b      	strb	r3, [r7, #13]
			temp_pack_voltage.U16_value = temp_pack_voltage.U16_value / PACK_VOLTAGE_DIVISOR;
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <parse_can_message+0x374>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	81bb      	strh	r3, [r7, #12]
			SET_CYCLIC_DATA( data_pack_voltage, temp_pack_voltage.U16_value );
 8000e86:	89ba      	ldrh	r2, [r7, #12]
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <parse_can_message+0x378>)
 8000e8a:	801a      	strh	r2, [r3, #0]
 8000e8c:	f001 fadc 	bl	8002448 <HAL_GetTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <parse_can_message+0x378>)
 8000e94:	6053      	str	r3, [r2, #4]
			break;
 8000e96:	e00c      	b.n	8000eb2 <parse_can_message+0x332>
			temp_pack_temperature.byte = CAN_rx_data[3];
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	78db      	ldrb	r3, [r3, #3]
 8000e9c:	723b      	strb	r3, [r7, #8]
			SET_CYCLIC_DATA( data_pack_temperature, temp_pack_temperature.S8_value );
 8000e9e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <parse_can_message+0x37c>)
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	f001 facf 	bl	8002448 <HAL_GetTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a13      	ldr	r2, [pc, #76]	@ (8000efc <parse_can_message+0x37c>)
 8000eae:	6053      	str	r3, [r2, #4]
			break;
 8000eb0:	bf00      	nop
}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	@ 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	cc78e9f7 	.word	0xcc78e9f7
 8000ec4:	4001e540 	.word	0x4001e540
 8000ec8:	70a3d70a 	.word	0x70a3d70a
 8000ecc:	4050623d 	.word	0x4050623d
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	20000018 	.word	0x20000018
 8000edc:	20000024 	.word	0x20000024
 8000ee0:	20000030 	.word	0x20000030
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	20000048 	.word	0x20000048
 8000eec:	20000054 	.word	0x20000054
 8000ef0:	20000060 	.word	0x20000060
 8000ef4:	46046047 	.word	0x46046047
 8000ef8:	2000006c 	.word	0x2000006c
 8000efc:	20000078 	.word	0x20000078

08000f00 <update_DID_screen>:



void update_DID_screen()
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af02      	add	r7, sp, #8
	static uint32_t last_update_time = 0;
	if( last_update_time + DID_REFRESH_DELAY > HAL_GetTick() )
 8000f06:	4ba2      	ldr	r3, [pc, #648]	@ (8001190 <update_DID_screen+0x290>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8000f0e:	f001 fa9b 	bl	8002448 <HAL_GetTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	429c      	cmp	r4, r3
 8000f16:	f200 822b 	bhi.w	8001370 <update_DID_screen+0x470>
		return;
	last_update_time = HAL_GetTick();
 8000f1a:	f001 fa95 	bl	8002448 <HAL_GetTick>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a9b      	ldr	r2, [pc, #620]	@ (8001190 <update_DID_screen+0x290>)
 8000f22:	6013      	str	r3, [r2, #0]

	ClearScreen();
 8000f24:	f000 fba7 	bl	8001676 <ClearScreen>
	switch(current_page)
 8000f28:	4b9a      	ldr	r3, [pc, #616]	@ (8001194 <update_DID_screen+0x294>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	f200 8221 	bhi.w	8001374 <update_DID_screen+0x474>
 8000f32:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <update_DID_screen+0x38>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08001139 	.word	0x08001139
 8000f40:	08001263 	.word	0x08001263
 8000f44:	08001325 	.word	0x08001325
	{
		case PAGE_0:
			UpdateScreenTitles(PAGE_0);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fd35 	bl	80019b8 <UpdateScreenTitles>

			// Get pointers to cyclic data variables
			float* vehicle_velocity = GET_CYCLIC_DATA( data_vehicle_velocity );
 8000f4e:	4b92      	ldr	r3, [pc, #584]	@ (8001198 <update_DID_screen+0x298>)
 8000f50:	689c      	ldr	r4, [r3, #8]
 8000f52:	f001 fa79 	bl	8002448 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b8f      	ldr	r3, [pc, #572]	@ (8001198 <update_DID_screen+0x298>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	429c      	cmp	r4, r3
 8000f60:	d901      	bls.n	8000f66 <update_DID_screen+0x66>
 8000f62:	4b8d      	ldr	r3, [pc, #564]	@ (8001198 <update_DID_screen+0x298>)
 8000f64:	e000      	b.n	8000f68 <update_DID_screen+0x68>
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
			uint16_t* pack_voltage = GET_CYCLIC_DATA( data_pack_voltage );
 8000f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800119c <update_DID_screen+0x29c>)
 8000f6c:	689c      	ldr	r4, [r3, #8]
 8000f6e:	f001 fa6b 	bl	8002448 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	4b89      	ldr	r3, [pc, #548]	@ (800119c <update_DID_screen+0x29c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	429c      	cmp	r4, r3
 8000f7c:	d901      	bls.n	8000f82 <update_DID_screen+0x82>
 8000f7e:	4b87      	ldr	r3, [pc, #540]	@ (800119c <update_DID_screen+0x29c>)
 8000f80:	e000      	b.n	8000f84 <update_DID_screen+0x84>
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
//			uint8_t* battery_soc = GET_CYCLIC_DATA( data_battery_SOC );
			uint8_t* MCB_drive_state = GET_CYCLIC_DATA( data_MCB_drive_state );
 8000f86:	4b86      	ldr	r3, [pc, #536]	@ (80011a0 <update_DID_screen+0x2a0>)
 8000f88:	689c      	ldr	r4, [r3, #8]
 8000f8a:	f001 fa5d 	bl	8002448 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	4b83      	ldr	r3, [pc, #524]	@ (80011a0 <update_DID_screen+0x2a0>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	429c      	cmp	r4, r3
 8000f98:	d901      	bls.n	8000f9e <update_DID_screen+0x9e>
 8000f9a:	4b81      	ldr	r3, [pc, #516]	@ (80011a0 <update_DID_screen+0x2a0>)
 8000f9c:	e000      	b.n	8000fa0 <update_DID_screen+0xa0>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
			uint8_t* MCB_regen_enabled = GET_CYCLIC_DATA (data_MCB_regen_enabled);
 8000fa2:	4b80      	ldr	r3, [pc, #512]	@ (80011a4 <update_DID_screen+0x2a4>)
 8000fa4:	689c      	ldr	r4, [r3, #8]
 8000fa6:	f001 fa4f 	bl	8002448 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b7d      	ldr	r3, [pc, #500]	@ (80011a4 <update_DID_screen+0x2a4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	429c      	cmp	r4, r3
 8000fb4:	d901      	bls.n	8000fba <update_DID_screen+0xba>
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80011a4 <update_DID_screen+0x2a4>)
 8000fb8:	e000      	b.n	8000fbc <update_DID_screen+0xbc>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
//			float* simulation_speed = GET_CYCLIC_DATA( data_simulation_speed );
			float* pack_current = GET_CYCLIC_DATA( data_pack_current );
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80011a8 <update_DID_screen+0x2a8>)
 8000fc0:	689c      	ldr	r4, [r3, #8]
 8000fc2:	f001 fa41 	bl	8002448 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4b77      	ldr	r3, [pc, #476]	@ (80011a8 <update_DID_screen+0x2a8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	429c      	cmp	r4, r3
 8000fd0:	d901      	bls.n	8000fd6 <update_DID_screen+0xd6>
 8000fd2:	4b75      	ldr	r3, [pc, #468]	@ (80011a8 <update_DID_screen+0x2a8>)
 8000fd4:	e000      	b.n	8000fd8 <update_DID_screen+0xd8>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]

			// Vehicle Velocity
			if ( vehicle_velocity != NULL )
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00d      	beq.n	8000ffc <update_DID_screen+0xfc>
			{
				UpdateScreenParameter(SPEED_DATA_XPOS, SPEED_DATA_YPOS, (int32_t)(*vehicle_velocity), 0, FALSE);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fd85 	bl	8000af4 <__aeabi_f2iz>
 8000fea:	4602      	mov	r2, r0
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2012      	movs	r0, #18
 8000ff6:	f000 fd93 	bl	8001b20 <UpdateScreenParameter>
 8000ffa:	e004      	b.n	8001006 <update_DID_screen+0x106>
			}
			else
			{
				OutputString("---", SPEED_DATA_XPOS, SPEED_DATA_YPOS);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2112      	movs	r1, #18
 8001000:	486a      	ldr	r0, [pc, #424]	@ (80011ac <update_DID_screen+0x2ac>)
 8001002:	f000 fbbd 	bl	8001780 <OutputString>
			}

			// MCB drive state
			if ( MCB_drive_state != NULL )
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02d      	beq.n	8001068 <update_DID_screen+0x168>
			{
				if ( *MCB_drive_state == 0x01 ) 		
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d105      	bne.n	8001020 <update_DID_screen+0x120>
					OutputString("DRV", STATE_DATA_XPOS, STATE_DATA_YPOS); // DRIVE
 8001014:	2203      	movs	r2, #3
 8001016:	2115      	movs	r1, #21
 8001018:	4865      	ldr	r0, [pc, #404]	@ (80011b0 <update_DID_screen+0x2b0>)
 800101a:	f000 fbb1 	bl	8001780 <OutputString>
 800101e:	e028      	b.n	8001072 <update_DID_screen+0x172>
				else if (*MCB_drive_state == 0x02)   
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d105      	bne.n	8001034 <update_DID_screen+0x134>
					OutputString("CRS", STATE_DATA_XPOS, STATE_DATA_YPOS); // CRUISE
 8001028:	2203      	movs	r2, #3
 800102a:	2115      	movs	r1, #21
 800102c:	4861      	ldr	r0, [pc, #388]	@ (80011b4 <update_DID_screen+0x2b4>)
 800102e:	f000 fba7 	bl	8001780 <OutputString>
 8001032:	e01e      	b.n	8001072 <update_DID_screen+0x172>
				else if (*MCB_drive_state == 0x03)   
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d105      	bne.n	8001048 <update_DID_screen+0x148>
					OutputString("PRK", STATE_DATA_XPOS, STATE_DATA_YPOS); // PARK
 800103c:	2203      	movs	r2, #3
 800103e:	2115      	movs	r1, #21
 8001040:	485d      	ldr	r0, [pc, #372]	@ (80011b8 <update_DID_screen+0x2b8>)
 8001042:	f000 fb9d 	bl	8001780 <OutputString>
 8001046:	e014      	b.n	8001072 <update_DID_screen+0x172>
				else if (*MCB_drive_state == 0x04)  
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <update_DID_screen+0x15c>
					OutputString("REV", STATE_DATA_XPOS, STATE_DATA_YPOS); // REVERSE
 8001050:	2203      	movs	r2, #3
 8001052:	2115      	movs	r1, #21
 8001054:	4859      	ldr	r0, [pc, #356]	@ (80011bc <update_DID_screen+0x2bc>)
 8001056:	f000 fb93 	bl	8001780 <OutputString>
 800105a:	e00a      	b.n	8001072 <update_DID_screen+0x172>
				else   							
					OutputString("ERR", STATE_DATA_XPOS, STATE_DATA_YPOS); // INVALID (MCB should never send this)
 800105c:	2203      	movs	r2, #3
 800105e:	2115      	movs	r1, #21
 8001060:	4857      	ldr	r0, [pc, #348]	@ (80011c0 <update_DID_screen+0x2c0>)
 8001062:	f000 fb8d 	bl	8001780 <OutputString>
 8001066:	e004      	b.n	8001072 <update_DID_screen+0x172>
			}	
			else
			{
				OutputString("---", STATE_DATA_XPOS, STATE_DATA_YPOS);
 8001068:	2203      	movs	r2, #3
 800106a:	2115      	movs	r1, #21
 800106c:	484f      	ldr	r0, [pc, #316]	@ (80011ac <update_DID_screen+0x2ac>)
 800106e:	f000 fb87 	bl	8001780 <OutputString>
			}

			// Regen Enable
			if ( MCB_regen_enabled != NULL )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d019      	beq.n	80010ac <update_DID_screen+0x1ac>
			{
				if (*MCB_regen_enabled == ENABLED) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10a      	bne.n	8001096 <update_DID_screen+0x196>
					OutputString("   ", REGEN_DATA_XPOS, REGEN_DATA_YPOS);
 8001080:	2206      	movs	r2, #6
 8001082:	2115      	movs	r1, #21
 8001084:	484f      	ldr	r0, [pc, #316]	@ (80011c4 <update_DID_screen+0x2c4>)
 8001086:	f000 fb7b 	bl	8001780 <OutputString>
					OutputString("ON", REGEN_DATA_XPOS, REGEN_DATA_YPOS);
 800108a:	2206      	movs	r2, #6
 800108c:	2115      	movs	r1, #21
 800108e:	484e      	ldr	r0, [pc, #312]	@ (80011c8 <update_DID_screen+0x2c8>)
 8001090:	f000 fb76 	bl	8001780 <OutputString>
 8001094:	e00f      	b.n	80010b6 <update_DID_screen+0x1b6>
				} else {
					OutputString("   ", REGEN_DATA_XPOS, REGEN_DATA_YPOS);
 8001096:	2206      	movs	r2, #6
 8001098:	2115      	movs	r1, #21
 800109a:	484a      	ldr	r0, [pc, #296]	@ (80011c4 <update_DID_screen+0x2c4>)
 800109c:	f000 fb70 	bl	8001780 <OutputString>
					OutputString("OFF", REGEN_DATA_XPOS, REGEN_DATA_YPOS);
 80010a0:	2206      	movs	r2, #6
 80010a2:	2115      	movs	r1, #21
 80010a4:	4849      	ldr	r0, [pc, #292]	@ (80011cc <update_DID_screen+0x2cc>)
 80010a6:	f000 fb6b 	bl	8001780 <OutputString>
 80010aa:	e004      	b.n	80010b6 <update_DID_screen+0x1b6>
				}
			}
			else
			{
				OutputString("---", REGEN_DATA_XPOS, REGEN_DATA_YPOS);
 80010ac:	2206      	movs	r2, #6
 80010ae:	2115      	movs	r1, #21
 80010b0:	483e      	ldr	r0, [pc, #248]	@ (80011ac <update_DID_screen+0x2ac>)
 80010b2:	f000 fb65 	bl	8001780 <OutputString>
			}

			// Pack Voltage
			if( pack_voltage != NULL )
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00a      	beq.n	80010d2 <update_DID_screen+0x1d2>
			{
				UpdateScreenParameter(PACK_VOLT_DATA_XPOS, PACK_VOLT_DATA_YPOS, (uint32_t)(*pack_voltage), 0, FALSE);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2109      	movs	r1, #9
 80010ca:	2015      	movs	r0, #21
 80010cc:	f000 fd28 	bl	8001b20 <UpdateScreenParameter>
 80010d0:	e004      	b.n	80010dc <update_DID_screen+0x1dc>
			}
			else
			{
				OutputString("---", PACK_VOLT_DATA_XPOS, PACK_VOLT_DATA_YPOS);
 80010d2:	2209      	movs	r2, #9
 80010d4:	2115      	movs	r1, #21
 80010d6:	4835      	ldr	r0, [pc, #212]	@ (80011ac <update_DID_screen+0x2ac>)
 80010d8:	f000 fb52 	bl	8001780 <OutputString>
			}

			// Pack Current
			if ( pack_current != NULL )
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d024      	beq.n	800112c <update_DID_screen+0x22c>
			{
				// % 10 to get the decimal place.
				UpdateScreenParameter(PACK_CURRENT_DATA_XPOS, PACK_CURRENT_DATA_YPOS, (uint32_t)(*pack_current), ((uint8_t)((*pack_current) * 10) % 10), TRUE);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fd2a 	bl	8000b40 <__aeabi_f2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461c      	mov	r4, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4936      	ldr	r1, [pc, #216]	@ (80011d0 <update_DID_screen+0x2d0>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f82a 	bl	8000150 <__aeabi_fmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd1e 	bl	8000b40 <__aeabi_f2uiz>
 8001104:	4603      	mov	r3, r0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <update_DID_screen+0x2d4>)
 800110a:	fba3 1302 	umull	r1, r3, r3, r2
 800110e:	08d9      	lsrs	r1, r3, #3
 8001110:	460b      	mov	r3, r1
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2201      	movs	r2, #1
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	4622      	mov	r2, r4
 8001122:	210c      	movs	r1, #12
 8001124:	2012      	movs	r0, #18
 8001126:	f000 fcfb 	bl	8001b20 <UpdateScreenParameter>
			{
				// Using 4 dashes as the floating point requires more space.
				OutputString("----", PACK_CURRENT_DATA_XPOS, PACK_CURRENT_DATA_YPOS);
			}

			break;
 800112a:	e124      	b.n	8001376 <update_DID_screen+0x476>
				OutputString("----", PACK_CURRENT_DATA_XPOS, PACK_CURRENT_DATA_YPOS);
 800112c:	220c      	movs	r2, #12
 800112e:	2112      	movs	r1, #18
 8001130:	4829      	ldr	r0, [pc, #164]	@ (80011d8 <update_DID_screen+0x2d8>)
 8001132:	f000 fb25 	bl	8001780 <OutputString>
			break;
 8001136:	e11e      	b.n	8001376 <update_DID_screen+0x476>

		case PAGE_1:
			UpdateScreenTitles(PAGE_1);	// TODO: Cyclic data for warnings?
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fc3d 	bl	80019b8 <UpdateScreenTitles>
			if (recent_warnings[0]) { // Low Voltage Warning
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <update_DID_screen+0x2dc>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <update_DID_screen+0x25c>
				OutputString("     ", LV_WARN_DATA_XPOS, LV_WARN_DATA_YPOS); // Clear
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	4825      	ldr	r0, [pc, #148]	@ (80011e0 <update_DID_screen+0x2e0>)
 800114c:	f000 fb18 	bl	8001780 <OutputString>
				OutputString("YES", LV_WARN_DATA_XPOS, LV_WARN_DATA_YPOS); // Write "YES"
 8001150:	2200      	movs	r2, #0
 8001152:	2120      	movs	r1, #32
 8001154:	4823      	ldr	r0, [pc, #140]	@ (80011e4 <update_DID_screen+0x2e4>)
 8001156:	f000 fb13 	bl	8001780 <OutputString>
 800115a:	e009      	b.n	8001170 <update_DID_screen+0x270>
			} else {
				OutputString("     ", LV_WARN_DATA_XPOS, LV_WARN_DATA_YPOS); // Clear
 800115c:	2200      	movs	r2, #0
 800115e:	2120      	movs	r1, #32
 8001160:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <update_DID_screen+0x2e0>)
 8001162:	f000 fb0d 	bl	8001780 <OutputString>
				OutputString("---", LV_WARN_DATA_XPOS, LV_WARN_DATA_YPOS); // Write "---"
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	4810      	ldr	r0, [pc, #64]	@ (80011ac <update_DID_screen+0x2ac>)
 800116c:	f000 fb08 	bl	8001780 <OutputString>
			}
			if (recent_warnings[1]) { // High Voltage Warning
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <update_DID_screen+0x2dc>)
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d037      	beq.n	80011e8 <update_DID_screen+0x2e8>
				OutputString("     ", HV_WARN_DATA_XPOS, HV_WARN_DATA_YPOS); // Clear
 8001178:	2203      	movs	r2, #3
 800117a:	2120      	movs	r1, #32
 800117c:	4818      	ldr	r0, [pc, #96]	@ (80011e0 <update_DID_screen+0x2e0>)
 800117e:	f000 faff 	bl	8001780 <OutputString>
				OutputString("YES", HV_WARN_DATA_XPOS, HV_WARN_DATA_YPOS); // Write "YES"
 8001182:	2203      	movs	r2, #3
 8001184:	2120      	movs	r1, #32
 8001186:	4817      	ldr	r0, [pc, #92]	@ (80011e4 <update_DID_screen+0x2e4>)
 8001188:	f000 fafa 	bl	8001780 <OutputString>
 800118c:	e036      	b.n	80011fc <update_DID_screen+0x2fc>
 800118e:	bf00      	nop
 8001190:	20000168 	.word	0x20000168
 8001194:	20000150 	.word	0x20000150
 8001198:	20000024 	.word	0x20000024
 800119c:	2000006c 	.word	0x2000006c
 80011a0:	20000030 	.word	0x20000030
 80011a4:	2000003c 	.word	0x2000003c
 80011a8:	20000060 	.word	0x20000060
 80011ac:	08004254 	.word	0x08004254
 80011b0:	08004258 	.word	0x08004258
 80011b4:	0800425c 	.word	0x0800425c
 80011b8:	08004260 	.word	0x08004260
 80011bc:	08004264 	.word	0x08004264
 80011c0:	08004268 	.word	0x08004268
 80011c4:	0800426c 	.word	0x0800426c
 80011c8:	08004270 	.word	0x08004270
 80011cc:	08004274 	.word	0x08004274
 80011d0:	41200000 	.word	0x41200000
 80011d4:	cccccccd 	.word	0xcccccccd
 80011d8:	08004278 	.word	0x08004278
 80011dc:	20000154 	.word	0x20000154
 80011e0:	08004280 	.word	0x08004280
 80011e4:	08004288 	.word	0x08004288
			} else {
				OutputString("     ", HV_WARN_DATA_XPOS, HV_WARN_DATA_YPOS); // Clear
 80011e8:	2203      	movs	r2, #3
 80011ea:	2120      	movs	r1, #32
 80011ec:	4863      	ldr	r0, [pc, #396]	@ (800137c <update_DID_screen+0x47c>)
 80011ee:	f000 fac7 	bl	8001780 <OutputString>
				OutputString("---", HV_WARN_DATA_XPOS, HV_WARN_DATA_YPOS); // Write "---"
 80011f2:	2203      	movs	r2, #3
 80011f4:	2120      	movs	r1, #32
 80011f6:	4862      	ldr	r0, [pc, #392]	@ (8001380 <update_DID_screen+0x480>)
 80011f8:	f000 fac2 	bl	8001780 <OutputString>
			}
			if (recent_warnings[2]) { // Low Temperature Warning
 80011fc:	4b61      	ldr	r3, [pc, #388]	@ (8001384 <update_DID_screen+0x484>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00a      	beq.n	800121a <update_DID_screen+0x31a>
				OutputString("     ", LT_WARN_DATA_XPOS, LT_WARN_DATA_YPOS); // Clear
 8001204:	2206      	movs	r2, #6
 8001206:	2120      	movs	r1, #32
 8001208:	485c      	ldr	r0, [pc, #368]	@ (800137c <update_DID_screen+0x47c>)
 800120a:	f000 fab9 	bl	8001780 <OutputString>
				OutputString("YES", LT_WARN_DATA_XPOS, LT_WARN_DATA_YPOS); // Write "YES"
 800120e:	2206      	movs	r2, #6
 8001210:	2120      	movs	r1, #32
 8001212:	485d      	ldr	r0, [pc, #372]	@ (8001388 <update_DID_screen+0x488>)
 8001214:	f000 fab4 	bl	8001780 <OutputString>
 8001218:	e009      	b.n	800122e <update_DID_screen+0x32e>
			} else {
				OutputString("     ", LT_WARN_DATA_XPOS, LT_WARN_DATA_YPOS); // Clear
 800121a:	2206      	movs	r2, #6
 800121c:	2120      	movs	r1, #32
 800121e:	4857      	ldr	r0, [pc, #348]	@ (800137c <update_DID_screen+0x47c>)
 8001220:	f000 faae 	bl	8001780 <OutputString>
				OutputString("---", LT_WARN_DATA_XPOS, LT_WARN_DATA_YPOS); // Write "---"
 8001224:	2206      	movs	r2, #6
 8001226:	2120      	movs	r1, #32
 8001228:	4855      	ldr	r0, [pc, #340]	@ (8001380 <update_DID_screen+0x480>)
 800122a:	f000 faa9 	bl	8001780 <OutputString>
			}
			if (recent_warnings[3]) { // High Temperature Warning
 800122e:	4b55      	ldr	r3, [pc, #340]	@ (8001384 <update_DID_screen+0x484>)
 8001230:	78db      	ldrb	r3, [r3, #3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <update_DID_screen+0x34c>
				OutputString("     ", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Clear
 8001236:	2209      	movs	r2, #9
 8001238:	2120      	movs	r1, #32
 800123a:	4850      	ldr	r0, [pc, #320]	@ (800137c <update_DID_screen+0x47c>)
 800123c:	f000 faa0 	bl	8001780 <OutputString>
				OutputString("YES", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Write "YES"
 8001240:	2209      	movs	r2, #9
 8001242:	2120      	movs	r1, #32
 8001244:	4850      	ldr	r0, [pc, #320]	@ (8001388 <update_DID_screen+0x488>)
 8001246:	f000 fa9b 	bl	8001780 <OutputString>
			} else {
				OutputString("     ", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Clear
				OutputString("---", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Write "---"
			}
			break;
 800124a:	e094      	b.n	8001376 <update_DID_screen+0x476>
				OutputString("     ", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Clear
 800124c:	2209      	movs	r2, #9
 800124e:	2120      	movs	r1, #32
 8001250:	484a      	ldr	r0, [pc, #296]	@ (800137c <update_DID_screen+0x47c>)
 8001252:	f000 fa95 	bl	8001780 <OutputString>
				OutputString("---", HT_WARN_DATA_XPOS, HT_WARN_DATA_YPOS); // Write "---"
 8001256:	2209      	movs	r2, #9
 8001258:	2120      	movs	r1, #32
 800125a:	4849      	ldr	r0, [pc, #292]	@ (8001380 <update_DID_screen+0x480>)
 800125c:	f000 fa90 	bl	8001780 <OutputString>
			break;
 8001260:	e089      	b.n	8001376 <update_DID_screen+0x476>

		case PAGE_2:
			UpdateScreenTitles(PAGE_2);
 8001262:	2002      	movs	r0, #2
 8001264:	f000 fba8 	bl	80019b8 <UpdateScreenTitles>
			// Get pointers to cyclic data variables
			float* motor_current = GET_CYCLIC_DATA( data_motor_current );
 8001268:	4b48      	ldr	r3, [pc, #288]	@ (800138c <update_DID_screen+0x48c>)
 800126a:	689c      	ldr	r4, [r3, #8]
 800126c:	f001 f8ec 	bl	8002448 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	4b46      	ldr	r3, [pc, #280]	@ (800138c <update_DID_screen+0x48c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	429c      	cmp	r4, r3
 800127a:	d901      	bls.n	8001280 <update_DID_screen+0x380>
 800127c:	4b43      	ldr	r3, [pc, #268]	@ (800138c <update_DID_screen+0x48c>)
 800127e:	e000      	b.n	8001282 <update_DID_screen+0x382>
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
			float* array_current = GET_CYCLIC_DATA( data_array_current );
 8001284:	4b42      	ldr	r3, [pc, #264]	@ (8001390 <update_DID_screen+0x490>)
 8001286:	689c      	ldr	r4, [r3, #8]
 8001288:	f001 f8de 	bl	8002448 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <update_DID_screen+0x490>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	429c      	cmp	r4, r3
 8001296:	d901      	bls.n	800129c <update_DID_screen+0x39c>
 8001298:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <update_DID_screen+0x490>)
 800129a:	e000      	b.n	800129e <update_DID_screen+0x39e>
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
//			uint16_t* pack_current = GET_CYCLIC_DATA( data_pack_current );

			// Motor Current
			if( motor_current != NULL )
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00d      	beq.n	80012c2 <update_DID_screen+0x3c2>
			{
				UpdateScreenParameter(MOTOR_CURRENT_DATA_XPOS, MOTOR_CURRENT_DATA_YPOS, (int32_t)(*motor_current), 0, FALSE);
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fc22 	bl	8000af4 <__aeabi_f2iz>
 80012b0:	4602      	mov	r2, r0
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 fc30 	bl	8001b20 <UpdateScreenParameter>
 80012c0:	e004      	b.n	80012cc <update_DID_screen+0x3cc>
			}
			else
			{
				OutputString("---", MOTOR_CURRENT_DATA_XPOS, MOTOR_CURRENT_DATA_YPOS);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	482e      	ldr	r0, [pc, #184]	@ (8001380 <update_DID_screen+0x480>)
 80012c8:	f000 fa5a 	bl	8001780 <OutputString>
			}

			// Array Current
			if ( array_current != NULL )
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d023      	beq.n	800131a <update_DID_screen+0x41a>
			{
				UpdateScreenParameter(ARRAY_CURRENT_DATA_XPOS, ARRAY_CURRENT_DATA_YPOS, (uint32_t)(*array_current), ((uint32_t) ((*array_current) * 10)) % 10, TRUE); // Float
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fc32 	bl	8000b40 <__aeabi_f2uiz>
 80012dc:	4603      	mov	r3, r0
 80012de:	461c      	mov	r4, r3
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	492b      	ldr	r1, [pc, #172]	@ (8001394 <update_DID_screen+0x494>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff32 	bl	8000150 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc26 	bl	8000b40 <__aeabi_f2uiz>
 80012f4:	4601      	mov	r1, r0
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <update_DID_screen+0x498>)
 80012f8:	fba3 2301 	umull	r2, r3, r3, r1
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	1aca      	subs	r2, r1, r3
 8001308:	b2d3      	uxtb	r3, r2
 800130a:	2201      	movs	r2, #1
 800130c:	9200      	str	r2, [sp, #0]
 800130e:	4622      	mov	r2, r4
 8001310:	2103      	movs	r1, #3
 8001312:	200f      	movs	r0, #15
 8001314:	f000 fc04 	bl	8001b20 <UpdateScreenParameter>
 8001318:	e004      	b.n	8001324 <update_DID_screen+0x424>
			}
			else
			{
				OutputString("---", ARRAY_CURRENT_DATA_XPOS, ARRAY_CURRENT_DATA_YPOS);
 800131a:	2203      	movs	r2, #3
 800131c:	210f      	movs	r1, #15
 800131e:	4818      	ldr	r0, [pc, #96]	@ (8001380 <update_DID_screen+0x480>)
 8001320:	f000 fa2e 	bl	8001780 <OutputString>
//				OutputString("---", PACK_CURRENT_DATA_XPOS, PACK_CURRENT_DATA_YPOS);
//			}
//			break;

			case PAGE_3:
				UpdateScreenTitles(PAGE_3);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 fb47 	bl	80019b8 <UpdateScreenTitles>
				// Get pointers to cyclic data variables
//				uint16_t* pack_voltage = GET_CYCLIC_DATA( data_pack_voltage );
				int8_t* pack_temperature = GET_CYCLIC_DATA( data_pack_temperature ); 
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <update_DID_screen+0x49c>)
 800132c:	689c      	ldr	r4, [r3, #8]
 800132e:	f001 f88b 	bl	8002448 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <update_DID_screen+0x49c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	429c      	cmp	r4, r3
 800133c:	d901      	bls.n	8001342 <update_DID_screen+0x442>
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <update_DID_screen+0x49c>)
 8001340:	e000      	b.n	8001344 <update_DID_screen+0x444>
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
//				{
//					OutputString("---", PACK_VOLT_DATA_XPOS, PACK_VOLT_DATA_YPOS);
//				}

				// Pack Temperature
				if( pack_temperature != NULL)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <update_DID_screen+0x464>
				{
					UpdateScreenParameter(PACK_TEMP_DATA_XPOS, PACK_TEMP_DATA_YPOS, (*pack_temperature), 0, FALSE); //displays the pack temperature
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f993 3000 	ldrsb.w	r3, [r3]
 8001352:	461a      	mov	r2, r3
 8001354:	2300      	movs	r3, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2100      	movs	r1, #0
 800135c:	200f      	movs	r0, #15
 800135e:	f000 fbdf 	bl	8001b20 <UpdateScreenParameter>
				}
				else
				{
					OutputString("---", PACK_TEMP_DATA_XPOS, PACK_TEMP_DATA_YPOS);
				}
				break;
 8001362:	e008      	b.n	8001376 <update_DID_screen+0x476>
					OutputString("---", PACK_TEMP_DATA_XPOS, PACK_TEMP_DATA_YPOS);
 8001364:	2200      	movs	r2, #0
 8001366:	210f      	movs	r1, #15
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <update_DID_screen+0x480>)
 800136a:	f000 fa09 	bl	8001780 <OutputString>
				break;
 800136e:	e002      	b.n	8001376 <update_DID_screen+0x476>
		return;
 8001370:	bf00      	nop
 8001372:	e000      	b.n	8001376 <update_DID_screen+0x476>

		default:
			break;
 8001374:	bf00      	nop
	}
}
 8001376:	3724      	adds	r7, #36	@ 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	08004280 	.word	0x08004280
 8001380:	08004254 	.word	0x08004254
 8001384:	20000154 	.word	0x20000154
 8001388:	08004288 	.word	0x08004288
 800138c:	20000048 	.word	0x20000048
 8001390:	20000054 	.word	0x20000054
 8001394:	41200000 	.word	0x41200000
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	20000078 	.word	0x20000078

080013a0 <parse_warnings>:
/**
 * Called when warning CAN message received
 * Updates recent_warnings array with latest warnings
 */
void parse_warnings(uint8_t* CAN_rx_data)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
			volt_out_of_range_fault, temp_out_of_range_fault, pack_balancing_active, LLIM_active,
			HLIM_active, charge_overtemp_trip, request_regen_turn_off, no_ecu_curr_message_received_warn,
			low_voltage_warning, high_voltage_warning, low_temperature_warning, high_temperature_warning;

	/* Byte 0 readings */
	temp_byte = CAN_rx_data[0]; // Contains bits 0-7, 7 6 5 4 3 2 1 0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	77fb      	strb	r3, [r7, #31]
	slave_board_comm_fault = GETBIT(temp_byte, 0);
 80013ae:	7ffb      	ldrb	r3, [r7, #31]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	77bb      	strb	r3, [r7, #30]
	bms_self_test_fault = GETBIT(temp_byte, 1);
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	085b      	lsrs	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	777b      	strb	r3, [r7, #29]
	overtemp_fault = GETBIT(temp_byte, 2);
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	773b      	strb	r3, [r7, #28]
	undervolt_fault = GETBIT(temp_byte, 3);
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	76fb      	strb	r3, [r7, #27]
	overvolt_fault = GETBIT(temp_byte, 4);
 80013da:	7ffb      	ldrb	r3, [r7, #31]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	76bb      	strb	r3, [r7, #26]
	isolation_loss_fault = GETBIT(temp_byte, 5);
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	767b      	strb	r3, [r7, #25]
	discharge_or_charge_overcurr_fault = GETBIT(temp_byte, 6);
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	099b      	lsrs	r3, r3, #6
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	763b      	strb	r3, [r7, #24]
	volt_out_of_range_fault = GETBIT(temp_byte, 7);
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	09db      	lsrs	r3, r3, #7
 8001402:	75fb      	strb	r3, [r7, #23]

	/* Byte 1 readings */
	temp_byte = CAN_rx_data[1]; // Contains bits 8-15, 15 14 13 12 11 10 9 8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	77fb      	strb	r3, [r7, #31]
	temp_out_of_range_fault = GETBIT(temp_byte, 0);
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	75bb      	strb	r3, [r7, #22]
	pack_balancing_active = GETBIT(temp_byte, 1);
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	757b      	strb	r3, [r7, #21]
	LLIM_active = GETBIT(temp_byte, 2);
 800141e:	7ffb      	ldrb	r3, [r7, #31]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	753b      	strb	r3, [r7, #20]
	HLIM_active = GETBIT(temp_byte, 3);
 800142a:	7ffb      	ldrb	r3, [r7, #31]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	74fb      	strb	r3, [r7, #19]
	charge_overtemp_trip = GETBIT(temp_byte, 4);
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	74bb      	strb	r3, [r7, #18]
	low_voltage_warning = GETBIT(temp_byte, 5);
 8001442:	7ffb      	ldrb	r3, [r7, #31]
 8001444:	095b      	lsrs	r3, r3, #5
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	747b      	strb	r3, [r7, #17]
	high_voltage_warning = GETBIT(temp_byte, 6);
 800144e:	7ffb      	ldrb	r3, [r7, #31]
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	743b      	strb	r3, [r7, #16]
	low_temperature_warning = GETBIT(temp_byte, 7);
 800145a:	7ffb      	ldrb	r3, [r7, #31]
 800145c:	09db      	lsrs	r3, r3, #7
 800145e:	73fb      	strb	r3, [r7, #15]

	/* Byte 2 readings */
	temp_byte = CAN_rx_data[2]; // Contains bits 16-23, 23 22 21 20 19 18 17 16
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	77fb      	strb	r3, [r7, #31]
	high_temperature_warning = GETBIT(temp_byte, 0);
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	73bb      	strb	r3, [r7, #14]
	request_regen_turn_off = GETBIT(temp_byte, 1);
 800146e:	7ffb      	ldrb	r3, [r7, #31]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	737b      	strb	r3, [r7, #13]
	no_ecu_curr_message_received_warn = GETBIT(temp_byte, 2);
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	733b      	strb	r3, [r7, #12]

	/* Update Warnings for Screen */
	recent_warnings[0] = low_voltage_warning;
 8001486:	4a32      	ldr	r2, [pc, #200]	@ (8001550 <parse_warnings+0x1b0>)
 8001488:	7c7b      	ldrb	r3, [r7, #17]
 800148a:	7013      	strb	r3, [r2, #0]
	recent_warnings[1] = high_voltage_warning;
 800148c:	4a30      	ldr	r2, [pc, #192]	@ (8001550 <parse_warnings+0x1b0>)
 800148e:	7c3b      	ldrb	r3, [r7, #16]
 8001490:	7053      	strb	r3, [r2, #1]
	recent_warnings[2] = low_temperature_warning;
 8001492:	4a2f      	ldr	r2, [pc, #188]	@ (8001550 <parse_warnings+0x1b0>)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	7093      	strb	r3, [r2, #2]
	recent_warnings[3] = high_temperature_warning;
 8001498:	4a2d      	ldr	r2, [pc, #180]	@ (8001550 <parse_warnings+0x1b0>)
 800149a:	7bbb      	ldrb	r3, [r7, #14]
 800149c:	70d3      	strb	r3, [r2, #3]

	/* Update Faults */
	recent_faults[0] = slave_board_comm_fault; // bms_comm_flt
 800149e:	4a2d      	ldr	r2, [pc, #180]	@ (8001554 <parse_warnings+0x1b4>)
 80014a0:	7fbb      	ldrb	r3, [r7, #30]
 80014a2:	7013      	strb	r3, [r2, #0]
	recent_faults[1] = bms_self_test_fault;
 80014a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001554 <parse_warnings+0x1b4>)
 80014a6:	7f7b      	ldrb	r3, [r7, #29]
 80014a8:	7053      	strb	r3, [r2, #1]
	recent_faults[2] = overtemp_fault;  // batt_ot
 80014aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <parse_warnings+0x1b4>)
 80014ac:	7f3b      	ldrb	r3, [r7, #28]
 80014ae:	7093      	strb	r3, [r2, #2]
	recent_faults[3] = undervolt_fault; // batt_uv
 80014b0:	4a28      	ldr	r2, [pc, #160]	@ (8001554 <parse_warnings+0x1b4>)
 80014b2:	7efb      	ldrb	r3, [r7, #27]
 80014b4:	70d3      	strb	r3, [r2, #3]
	recent_faults[4] = overvolt_fault; // batt_ov
 80014b6:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <parse_warnings+0x1b4>)
 80014b8:	7ebb      	ldrb	r3, [r7, #26]
 80014ba:	7113      	strb	r3, [r2, #4]
	recent_faults[5] = isolation_loss_fault;
 80014bc:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <parse_warnings+0x1b4>)
 80014be:	7e7b      	ldrb	r3, [r7, #25]
 80014c0:	7153      	strb	r3, [r2, #5]
	recent_faults[6] = discharge_or_charge_overcurr_fault; // dch_oc
 80014c2:	4a24      	ldr	r2, [pc, #144]	@ (8001554 <parse_warnings+0x1b4>)
 80014c4:	7e3b      	ldrb	r3, [r7, #24]
 80014c6:	7193      	strb	r3, [r2, #6]
	recent_faults[7] = volt_out_of_range_fault;
 80014c8:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <parse_warnings+0x1b4>)
 80014ca:	7dfb      	ldrb	r3, [r7, #23]
 80014cc:	71d3      	strb	r3, [r2, #7]
	recent_faults[8] = temp_out_of_range_fault;
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <parse_warnings+0x1b4>)
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	7213      	strb	r3, [r2, #8]
	recent_faults[9] = pack_balancing_active;
 80014d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001554 <parse_warnings+0x1b4>)
 80014d6:	7d7b      	ldrb	r3, [r7, #21]
 80014d8:	7253      	strb	r3, [r2, #9]
	recent_faults[10] = LLIM_active;
 80014da:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <parse_warnings+0x1b4>)
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	7293      	strb	r3, [r2, #10]
	recent_faults[11] = HLIM_active;
 80014e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <parse_warnings+0x1b4>)
 80014e2:	7cfb      	ldrb	r3, [r7, #19]
 80014e4:	72d3      	strb	r3, [r2, #11]
	recent_faults[12] = charge_overtemp_trip; // ch_oc
 80014e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <parse_warnings+0x1b4>)
 80014e8:	7cbb      	ldrb	r3, [r7, #18]
 80014ea:	7313      	strb	r3, [r2, #12]
	recent_faults[13] = request_regen_turn_off;
 80014ec:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <parse_warnings+0x1b4>)
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	7353      	strb	r3, [r2, #13]
	recent_faults[14] = no_ecu_curr_message_received_warn;
 80014f2:	4a18      	ldr	r2, [pc, #96]	@ (8001554 <parse_warnings+0x1b4>)
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
 80014f6:	7393      	strb	r3, [r2, #14]



	HAL_GPIO_WritePin(BMS_COMM_FLT_GPIO_Port, BMS_COMM_FLT_Pin, slave_board_comm_fault); // BMS communications fault
 80014f8:	7fbb      	ldrb	r3, [r7, #30]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2110      	movs	r1, #16
 80014fe:	4816      	ldr	r0, [pc, #88]	@ (8001558 <parse_warnings+0x1b8>)
 8001500:	f001 ffba 	bl	8003478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BATT_OT_GPIO_Port, BATT_OT_Pin, overtemp_fault); 					 // Battery over temperature fault
 8001504:	7f3b      	ldrb	r3, [r7, #28]
 8001506:	461a      	mov	r2, r3
 8001508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150c:	4812      	ldr	r0, [pc, #72]	@ (8001558 <parse_warnings+0x1b8>)
 800150e:	f001 ffb3 	bl	8003478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BATT_UV_GPIO_Port, BATT_UV_Pin, undervolt_fault); 				 // Battery under voltage fault
 8001512:	7efb      	ldrb	r3, [r7, #27]
 8001514:	461a      	mov	r2, r3
 8001516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151a:	480f      	ldr	r0, [pc, #60]	@ (8001558 <parse_warnings+0x1b8>)
 800151c:	f001 ffac 	bl	8003478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BATT_OV_GPIO_Port, BATT_OV_Pin, overvolt_fault); 					 // Battery over voltage fault
 8001520:	7ebb      	ldrb	r3, [r7, #26]
 8001522:	461a      	mov	r2, r3
 8001524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001528:	480b      	ldr	r0, [pc, #44]	@ (8001558 <parse_warnings+0x1b8>)
 800152a:	f001 ffa5 	bl	8003478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DCH_OC_GPIO_Port, DCH_OC_Pin, discharge_or_charge_overcurr_fault); // Discharging overcurrent fault
 800152e:	7e3b      	ldrb	r3, [r7, #24]
 8001530:	461a      	mov	r2, r3
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <parse_warnings+0x1b8>)
 8001536:	f001 ff9f 	bl	8003478 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CH_OC_GPIO_Port, CH_OC_Pin, charge_overtemp_trip); 				 // Charging overcurrent fault
 800153a:	7cbb      	ldrb	r3, [r7, #18]
 800153c:	461a      	mov	r2, r3
 800153e:	2140      	movs	r1, #64	@ 0x40
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <parse_warnings+0x1b8>)
 8001542:	f001 ff99 	bl	8003478 <HAL_GPIO_WritePin>
	// HAL_GPIO_WritePin(BATT_OV_GPIO_Port, BATT_OV_Pin, high_voltage_warning); 	    // Battery voltage upper limit fault

}
 8001546:	bf00      	nop
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000154 	.word	0x20000154
 8001554:	20000158 	.word	0x20000158
 8001558:	40010800 	.word	0x40010800

0800155c <DID_timeout>:

void DID_timeout()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    static uint8_t lastPage;
    static uint32_t lastPageTime;

    // If DID is on a page more than DID_PAGE_TIMEOUT ms, set current page to PAGE_0
	if( current_page != lastPage )
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <DID_timeout+0x4c>)
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <DID_timeout+0x50>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d009      	beq.n	8001580 <DID_timeout+0x24>
	{
		lastPage = current_page;
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <DID_timeout+0x4c>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <DID_timeout+0x50>)
 8001572:	701a      	strb	r2, [r3, #0]
		lastPageTime = HAL_GetTick();
 8001574:	f000 ff68 	bl	8002448 <HAL_GetTick>
 8001578:	4603      	mov	r3, r0
 800157a:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <DID_timeout+0x54>)
 800157c:	6013      	str	r3, [r2, #0]
	else if((HAL_GetTick() - lastPageTime) > DID_PAGE_TIMEOUT)
	{
		current_page = PAGE_0;
        lastPageTime = HAL_GetTick();
	}
}
 800157e:	e011      	b.n	80015a4 <DID_timeout+0x48>
	else if((HAL_GetTick() - lastPageTime) > DID_PAGE_TIMEOUT)
 8001580:	f000 ff62 	bl	8002448 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <DID_timeout+0x54>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001590:	4293      	cmp	r3, r2
 8001592:	d907      	bls.n	80015a4 <DID_timeout+0x48>
		current_page = PAGE_0;
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <DID_timeout+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
        lastPageTime = HAL_GetTick();
 800159a:	f000 ff55 	bl	8002448 <HAL_GetTick>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <DID_timeout+0x54>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000150 	.word	0x20000150
 80015ac:	2000016c 	.word	0x2000016c
 80015b0:	20000170 	.word	0x20000170

080015b4 <Delay>:
 * @Param counts: Number of milliseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void Delay(uint32_t counts)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t j;
	for (i = 0; i < counts; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e00c      	b.n	80015dc <Delay+0x28>
	{
		for(j = 0; j<16000; j++){}
 80015c2:	2300      	movs	r3, #0
 80015c4:	817b      	strh	r3, [r7, #10]
 80015c6:	e002      	b.n	80015ce <Delay+0x1a>
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	3301      	adds	r3, #1
 80015cc:	817b      	strh	r3, [r7, #10]
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80015d4:	d3f8      	bcc.n	80015c8 <Delay+0x14>
	for (i = 0; i < counts; i++)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3ee      	bcc.n	80015c2 <Delay+0xe>
	}

}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <MicrosecondDelay>:
 * @Param counts: Number of microseconds
 * Returns: nothing
 */
//TODO: Rewrite this function to use Timing Interrupts
void MicrosecondDelay(uint32_t counts)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint8_t j;

	for (i = 0; i < counts; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e00b      	b.n	8001616 <MicrosecondDelay+0x26>
	{
		for (j = 0; j<16; j++){}
 80015fe:	2300      	movs	r3, #0
 8001600:	72fb      	strb	r3, [r7, #11]
 8001602:	e002      	b.n	800160a <MicrosecondDelay+0x1a>
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	3301      	adds	r3, #1
 8001608:	72fb      	strb	r3, [r7, #11]
 800160a:	7afb      	ldrb	r3, [r7, #11]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d9f9      	bls.n	8001604 <MicrosecondDelay+0x14>
	for (i = 0; i < counts; i++)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	d3ef      	bcc.n	80015fe <MicrosecondDelay+0xe>
	}
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <MoveCursor>:
  * Moves cursor to the position on the screen determined by XY Coordinates
  * @Param x: x-coordinate
  * @Param y: y-coordinate
  */
void MoveCursor(uint8_t x, uint8_t y)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	460a      	mov	r2, r1
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	4613      	mov	r3, r2
 8001638:	71bb      	strb	r3, [r7, #6]
     * Row major:
     * 0 1 2 3 4
     * 5 6 7 8 9
     *
     */
    uint16_t offset = 40*y + x;
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	0092      	lsls	r2, r2, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	b29a      	uxth	r2, r3
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	81fb      	strh	r3, [r7, #14]

    TransmitCommand(0x46);
 8001650:	2046      	movs	r0, #70	@ 0x46
 8001652:	f000 fa9b 	bl	8001b8c <TransmitCommand>
    // The CSRW register is 2 bytes long, so the first parameter
    // is the first byte and the second parameter is the second
    // byte
    TransmitCommandParameter(offset&0xFF);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fab4 	bl	8001bc8 <TransmitCommandParameter>
    TransmitCommandParameter(offset >> 8);
 8001660:	89fb      	ldrh	r3, [r7, #14]
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	b29b      	uxth	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	f000 faad 	bl	8001bc8 <TransmitCommandParameter>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <ClearScreen>:

 /**
 * Purpose: Prints 1200 " " characters to clear the screen
 */
void ClearScreen()
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
    //Set cursor to start position
    MoveCursor(0, 0);
 800167c:	2100      	movs	r1, #0
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff ffd3 	bl	800162a <MoveCursor>

    //replace all characters with spaces
    TransmitCommand(0x42);
 8001684:	2042      	movs	r0, #66	@ 0x42
 8001686:	f000 fa81 	bl	8001b8c <TransmitCommand>
    for (uint16_t i = 0; i < 1200; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	e005      	b.n	800169c <ClearScreen+0x26>
    {
        TransmitCommandParameter(0x20);
 8001690:	2020      	movs	r0, #32
 8001692:	f000 fa99 	bl	8001bc8 <TransmitCommandParameter>
    for (uint16_t i = 0; i < 1200; i++)
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	3301      	adds	r3, #1
 800169a:	80fb      	strh	r3, [r7, #6]
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80016a2:	d3f5      	bcc.n	8001690 <ClearScreen+0x1a>
    }
    MoveCursor(0, 0);
 80016a4:	2100      	movs	r1, #0
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff ffbf 	bl	800162a <MoveCursor>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <SaveCharacterToRAM>:
  * @Param bitmap: An array of the bitmap of that particular subcharacter
  * @Param offset: Some offset number
  * Returns: nothing
  */
void SaveCharacterToRAM(uint8_t* bitmap, uint8_t offset)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
    TransmitCommand(0x46);
 80016c0:	2046      	movs	r0, #70	@ 0x46
 80016c2:	f000 fa63 	bl	8001b8c <TransmitCommand>
    TransmitCommandParameter(offset);
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fa7d 	bl	8001bc8 <TransmitCommandParameter>
    TransmitCommandParameter(0x48);
 80016ce:	2048      	movs	r0, #72	@ 0x48
 80016d0:	f000 fa7a 	bl	8001bc8 <TransmitCommandParameter>
    TransmitCommand(0x42);
 80016d4:	2042      	movs	r0, #66	@ 0x42
 80016d6:	f000 fa59 	bl	8001b8c <TransmitCommand>

    for (int i = 0; i < BYTEPERBITMAP; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	e009      	b.n	80016f4 <SaveCharacterToRAM+0x40>
    {
        TransmitCommandParameter(bitmap[i]);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fa6d 	bl	8001bc8 <TransmitCommandParameter>
    for (int i = 0; i < BYTEPERBITMAP; i++)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	ddf2      	ble.n	80016e0 <SaveCharacterToRAM+0x2c>
    }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <CharacterBitMaps>:

/**
 * Writes custom bitmaps to the LCD screen RAM
 */
void CharacterBitMaps(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b0c2      	sub	sp, #264	@ 0x108
 8001708:	af00      	add	r7, sp, #0
    uint8_t bitmap[16][BYTEPERBITMAP] = {{0x7E, 0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x7E},
 800170a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800170e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001712:	4a1a      	ldr	r2, [pc, #104]	@ (800177c <CharacterBitMaps+0x78>)
 8001714:	4618      	mov	r0, r3
 8001716:	4611      	mov	r1, r2
 8001718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171c:	461a      	mov	r2, r3
 800171e:	f002 fd39 	bl	8004194 <memcpy>
                                    {0x00, 0x62, 0x62, 0x62, 0x66, 0x66, 0x66, 0x6C, 0x6C, 0x6C, 0x70, 0x70, 0x70, 0x60, 0x60, 0x00},
                                    {0x00, 0x60, 0x60, 0x70, 0x70, 0x78, 0x6C, 0x6C, 0x6C, 0x66, 0x66, 0x66, 0x67, 0x67, 0x61, 0x00},
                                    {0x00, 0x46, 0x46, 0x46, 0x66, 0x66, 0x66, 0x36, 0x36, 0x36, 0x0E, 0x0E, 0x0E, 0x06, 0x06, 0x00},
                                    {0xC0, 0xE0, 0x60, 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x0C, 0x04, 0x06, 0x06, 0x06, 0x07, 0x03},
                                    {0x03, 0x07, 0x06, 0x06, 0x0C, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60, 0x60, 0xE0, 0xC0}};
    TransmitCommand(0x5C);
 8001722:	205c      	movs	r0, #92	@ 0x5c
 8001724:	f000 fa32 	bl	8001b8c <TransmitCommand>
    TransmitCommandParameter(0x00);
 8001728:	2000      	movs	r0, #0
 800172a:	f000 fa4d 	bl	8001bc8 <TransmitCommandParameter>
    TransmitCommandParameter(0x40);
 800172e:	2040      	movs	r0, #64	@ 0x40
 8001730:	f000 fa4a 	bl	8001bc8 <TransmitCommandParameter>
    TransmitCommand(0x4C);
 8001734:	204c      	movs	r0, #76	@ 0x4c
 8001736:	f000 fa29 	bl	8001b8c <TransmitCommand>

    for (uint8_t i = 0; i < 16; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8001740:	e011      	b.n	8001766 <CharacterBitMaps+0x62>
    {
        SaveCharacterToRAM(bitmap[i], i*BYTEPERBITMAP);
 8001742:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8001746:	1d3a      	adds	r2, r7, #4
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	441a      	add	r2, r3
 800174c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f7ff ffac 	bl	80016b4 <SaveCharacterToRAM>
    for (uint8_t i = 0; i < 16; i++)
 800175c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8001766:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800176a:	2b0f      	cmp	r3, #15
 800176c:	d9e9      	bls.n	8001742 <CharacterBitMaps+0x3e>
    }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800428c 	.word	0x0800428c

08001780 <OutputString>:
 * @Param starting_x: x-coordinate to write the string to
 * @Param starting_y: y-coordinate to write the string to
 * Returns: nothing
 */
void OutputString(char Str[], uint8_t starting_x, uint8_t starting_y)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
 800178c:	4613      	mov	r3, r2
 800178e:	70bb      	strb	r3, [r7, #2]
                        {0x82,0x86,0x80,0x81}, {0x86,0x83,0x20,0x89}, {0x80,0x81,0x84,0x85}, {0x80,0x81,0x20,0x89}, //6 7 8 9
                        {0x20,0x20,0x20,0x20}, {0x20,0x20,0x2E,0x20}, {0x2E,0x20,0x2E,0x20}, {0x87,0x87,0x86,0x86}, //SPACE, ., :, -
                        };

    uint8_t temp;
    uint8_t x = starting_x;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	73bb      	strb	r3, [r7, #14]

    TransmitCommand(0x4C);                                  //Set the cursor direction to "Right"
 8001794:	204c      	movs	r0, #76	@ 0x4c
 8001796:	f000 f9f9 	bl	8001b8c <TransmitCommand>

    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 800179a:	2300      	movs	r3, #0
 800179c:	737b      	strb	r3, [r7, #13]
 800179e:	e069      	b.n	8001874 <OutputString+0xf4>
    {
        MoveCursor(x, starting_y);
 80017a0:	78ba      	ldrb	r2, [r7, #2]
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff3f 	bl	800162a <MoveCursor>
        temp = (uint8_t) Str[c];
 80017ac:	7b7b      	ldrb	r3, [r7, #13]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	73fb      	strb	r3, [r7, #15]
        if (temp == 32)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d102      	bne.n	80017c2 <OutputString+0x42>
        {
            temp = 36;                  //if character is " "
 80017bc:	2324      	movs	r3, #36	@ 0x24
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e025      	b.n	800180e <OutputString+0x8e>
        }
        else if (temp == 58)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80017c6:	d102      	bne.n	80017ce <OutputString+0x4e>
        {
            temp = 38;                  //if character is ":"
 80017c8:	2326      	movs	r3, #38	@ 0x26
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e01f      	b.n	800180e <OutputString+0x8e>
        }
        else if (temp == 46)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80017d2:	d102      	bne.n	80017da <OutputString+0x5a>
        {
            temp = 37;                  //if character is "."
 80017d4:	2325      	movs	r3, #37	@ 0x25
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e019      	b.n	800180e <OutputString+0x8e>
        }
		else if (temp == 45)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80017de:	d102      	bne.n	80017e6 <OutputString+0x66>
		{
			temp = 39;	                //if character is "-"
 80017e0:	2327      	movs	r3, #39	@ 0x27
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e013      	b.n	800180e <OutputString+0x8e>
		}
        else if (temp <= 57)
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b39      	cmp	r3, #57	@ 0x39
 80017ea:	d803      	bhi.n	80017f4 <OutputString+0x74>
        {
            temp -= OFFSET_NUMERIC;     //if character is between "0" and "9"
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3b16      	subs	r3, #22
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e00c      	b.n	800180e <OutputString+0x8e>
        }
        else if (temp <= 90)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80017f8:	d803      	bhi.n	8001802 <OutputString+0x82>
        {
            temp -= OFFSET_CAPITAL;     //if character is between "A" and "Z"
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	3b41      	subs	r3, #65	@ 0x41
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e005      	b.n	800180e <OutputString+0x8e>
        }
        else if (temp <= 122)
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b7a      	cmp	r3, #122	@ 0x7a
 8001806:	d802      	bhi.n	800180e <OutputString+0x8e>
        {
            temp -= OFFSET_LOWCASE;     //if character is between "a" and "z"
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	3b61      	subs	r3, #97	@ 0x61
 800180c:	73fb      	strb	r3, [r7, #15]
        * |C D|
        *  - -
        * (4 subcharacters, in that order)     *
        ***********************************/

        TransmitCommand(0x42);                                  //print subcharacers A and B
 800180e:	2042      	movs	r0, #66	@ 0x42
 8001810:	f000 f9bc 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][0]);
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <OutputString+0x10c>)
 8001818:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f9d3 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][1]);
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <OutputString+0x10c>)
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f9cb 	bl	8001bc8 <TransmitCommandParameter>

        MoveCursor(x, starting_y + 1);
 8001832:	78bb      	ldrb	r3, [r7, #2]
 8001834:	3301      	adds	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fef4 	bl	800162a <MoveCursor>

        TransmitCommand(0x42);                                  //print the subcharacters C and D
 8001842:	2042      	movs	r0, #66	@ 0x42
 8001844:	f000 f9a2 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(LOOKUPTABLE[temp][2]);
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <OutputString+0x10c>)
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f9b8 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(LOOKUPTABLE[temp][3]);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <OutputString+0x10c>)
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f9b0 	bl	8001bc8 <TransmitCommandParameter>

        x += 3;
 8001868:	7bbb      	ldrb	r3, [r7, #14]
 800186a:	3303      	adds	r3, #3
 800186c:	73bb      	strb	r3, [r7, #14]
    for (uint8_t c = 0; c < Str[c] != '\0'; c++)
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	3301      	adds	r3, #1
 8001872:	737b      	strb	r3, [r7, #13]
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	7b7a      	ldrb	r2, [r7, #13]
 800187e:	429a      	cmp	r2, r3
 8001880:	d38e      	bcc.n	80017a0 <OutputString+0x20>
    }
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000084 	.word	0x20000084

08001890 <OutputPaddedInteger>:
 * @Param x: x-coordinate to write the character
 * @Param y: y-coordinate to write the character
 * Returns: nothing
 */
void OutputPaddedInteger(int32_t num, uint8_t dec, uint8_t decimal_en, uint8_t x, uint8_t y)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	70fb      	strb	r3, [r7, #3]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70bb      	strb	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	707b      	strb	r3, [r7, #1]
	uint8_t i;
    char str[5] = {' ',' ',' ',' ','\0'};
 80018aa:	4a3e      	ldr	r2, [pc, #248]	@ (80019a4 <OutputPaddedInteger+0x114>)
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b4:	6018      	str	r0, [r3, #0]
 80018b6:	3304      	adds	r3, #4
 80018b8:	7019      	strb	r1, [r3, #0]
	char decplace[2] = {' ', '\0'};
 80018ba:	2320      	movs	r3, #32
 80018bc:	81bb      	strh	r3, [r7, #12]

    if (num < 0)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da0c      	bge.n	80018de <OutputPaddedInteger+0x4e>
    {
    	if (num > -99) str[1] = '-'; // make negative closer to number if only 2 digits
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f113 0f62 	cmn.w	r3, #98	@ 0x62
 80018ca:	db02      	blt.n	80018d2 <OutputPaddedInteger+0x42>
 80018cc:	232d      	movs	r3, #45	@ 0x2d
 80018ce:	747b      	strb	r3, [r7, #17]
 80018d0:	e001      	b.n	80018d6 <OutputPaddedInteger+0x46>
    	else str[0] = '-';
 80018d2:	232d      	movs	r3, #45	@ 0x2d
 80018d4:	743b      	strb	r3, [r7, #16]
        num = -1 * num;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	425b      	negs	r3, r3
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	e004      	b.n	80018e8 <OutputPaddedInteger+0x58>
    }
	else if (num == 0)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <OutputPaddedInteger+0x58>
	{
		str[3] = '0';
 80018e4:	2330      	movs	r3, #48	@ 0x30
 80018e6:	74fb      	strb	r3, [r7, #19]
	}

	if (num > 999)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018ee:	db02      	blt.n	80018f6 <OutputPaddedInteger+0x66>
	{
		num = 999;
 80018f0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80018f4:	607b      	str	r3, [r7, #4]
	}

    for (i = 3; num != 0; i--)
 80018f6:	2303      	movs	r3, #3
 80018f8:	75fb      	strb	r3, [r7, #23]
 80018fa:	e01d      	b.n	8001938 <OutputPaddedInteger+0xa8>
    {
        str[i] = "0123456789"[num%10];
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <OutputPaddedInteger+0x118>)
 8001900:	fb83 2301 	smull	r2, r3, r3, r1
 8001904:	109a      	asrs	r2, r3, #2
 8001906:	17cb      	asrs	r3, r1, #31
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	1aca      	subs	r2, r1, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4925      	ldr	r1, [pc, #148]	@ (80019ac <OutputPaddedInteger+0x11c>)
 8001918:	5c8a      	ldrb	r2, [r1, r2]
 800191a:	3318      	adds	r3, #24
 800191c:	443b      	add	r3, r7
 800191e:	f803 2c08 	strb.w	r2, [r3, #-8]
        num = num/10;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <OutputPaddedInteger+0x118>)
 8001926:	fb82 1203 	smull	r1, r2, r2, r3
 800192a:	1092      	asrs	r2, r2, #2
 800192c:	17db      	asrs	r3, r3, #31
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	607b      	str	r3, [r7, #4]
    for (i = 3; num != 0; i--)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	3b01      	subs	r3, #1
 8001936:	75fb      	strb	r3, [r7, #23]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1de      	bne.n	80018fc <OutputPaddedInteger+0x6c>
    }

    OutputString(str, x, y);
 800193e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001942:	7879      	ldrb	r1, [r7, #1]
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff19 	bl	8001780 <OutputString>

    // If decimal_en = 0, skip decimal output
    if (!decimal_en) return;
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d022      	beq.n	800199a <OutputPaddedInteger+0x10a>

    //Output 1 decimal place
    OutputString("-", x + 12, y);
 8001954:	787b      	ldrb	r3, [r7, #1]
 8001956:	330c      	adds	r3, #12
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800195e:	4619      	mov	r1, r3
 8001960:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <OutputPaddedInteger+0x120>)
 8001962:	f7ff ff0d 	bl	8001780 <OutputString>

    dec = dec % 10;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <OutputPaddedInteger+0x124>)
 800196a:	fba3 1302 	umull	r1, r3, r3, r2
 800196e:	08d9      	lsrs	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	70fb      	strb	r3, [r7, #3]

    decplace[0] = "0123456789"[dec];
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <OutputPaddedInteger+0x11c>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	733b      	strb	r3, [r7, #12]
    OutputString(decplace, x + 15, y);
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	330f      	adds	r3, #15
 8001988:	b2d9      	uxtb	r1, r3
 800198a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fef4 	bl	8001780 <OutputString>
 8001998:	e000      	b.n	800199c <OutputPaddedInteger+0x10c>
    if (!decimal_en) return;
 800199a:	bf00      	nop
}
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08004390 	.word	0x08004390
 80019a8:	66666667 	.word	0x66666667
 80019ac:	08004398 	.word	0x08004398
 80019b0:	0800438c 	.word	0x0800438c
 80019b4:	cccccccd 	.word	0xcccccccd

080019b8 <UpdateScreenTitles>:

/**
 * Updates Screen Titles depending on current page number
 * @Param pageNum: The current page number
 */
void UpdateScreenTitles(uint8_t pageNum) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]


	switch(pageNum)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d87d      	bhi.n	8001ac4 <UpdateScreenTitles+0x10c>
 80019c8:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <UpdateScreenTitles+0x18>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	08001a33 	.word	0x08001a33
 80019d8:	08001a5d 	.word	0x08001a5d
 80019dc:	08001a9b 	.word	0x08001a9b
	{
		case PAGE_0:
			/* Titles */
			OutputString("SPEED", SPEED_XPOS, SPEED_YPOS);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	483b      	ldr	r0, [pc, #236]	@ (8001ad4 <UpdateScreenTitles+0x11c>)
 80019e6:	f7ff fecb 	bl	8001780 <OutputString>
//			OutputString("SOC", SOC_XPOS, SOC_YPOS);
			OutputString("STATE", STATE_XPOS, STATE_YPOS);
 80019ea:	2203      	movs	r2, #3
 80019ec:	2100      	movs	r1, #0
 80019ee:	483a      	ldr	r0, [pc, #232]	@ (8001ad8 <UpdateScreenTitles+0x120>)
 80019f0:	f7ff fec6 	bl	8001780 <OutputString>
			OutputString("REGEN", REGEN_XPOS, REGEN_YPOS);
 80019f4:	2206      	movs	r2, #6
 80019f6:	2100      	movs	r1, #0
 80019f8:	4838      	ldr	r0, [pc, #224]	@ (8001adc <UpdateScreenTitles+0x124>)
 80019fa:	f7ff fec1 	bl	8001780 <OutputString>
			OutputString("PACK V", PACK_VOLT_XPOS, PACK_VOLT_YPOS);
 80019fe:	2209      	movs	r2, #9
 8001a00:	2100      	movs	r1, #0
 8001a02:	4837      	ldr	r0, [pc, #220]	@ (8001ae0 <UpdateScreenTitles+0x128>)
 8001a04:	f7ff febc 	bl	8001780 <OutputString>
//            OutputString("TAR", TARGET_XPOS, TARGET_YPOS);
			OutputString("PACK C", PACK_CURRENT_XPOS, PACK_CURRENT_YPOS);
 8001a08:	220c      	movs	r2, #12
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4835      	ldr	r0, [pc, #212]	@ (8001ae4 <UpdateScreenTitles+0x12c>)
 8001a0e:	f7ff feb7 	bl	8001780 <OutputString>

			/* Units */
            //			OutputString("%", SOC_UNIT_XPOS, SOC_UNIT_YPOS);
//			OutputString("MPH", CRUISE_UNIT_XPOS, CRUISE_UNIT_YPOS);
			OutputString("MPH", SPEED_UNIT_XPOS, SPEED_UNIT_YPOS);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2120      	movs	r1, #32
 8001a16:	4834      	ldr	r0, [pc, #208]	@ (8001ae8 <UpdateScreenTitles+0x130>)
 8001a18:	f7ff feb2 	bl	8001780 <OutputString>
            OutputString("V", PACK_VOLT_UNIT_XPOS, PACK_VOLT_UNIT_YPOS);
 8001a1c:	2209      	movs	r2, #9
 8001a1e:	2125      	movs	r1, #37	@ 0x25
 8001a20:	4832      	ldr	r0, [pc, #200]	@ (8001aec <UpdateScreenTitles+0x134>)
 8001a22:	f7ff fead 	bl	8001780 <OutputString>
//            OutputString("MPH", TARGET_UNIT_XPOS, TARGET_UNIT_YPOS);
            OutputString("A", PACK_CURRENT_UNIT_XPOS, PACK_CURRENT_UNIT_YPOS);
 8001a26:	220c      	movs	r2, #12
 8001a28:	2125      	movs	r1, #37	@ 0x25
 8001a2a:	4831      	ldr	r0, [pc, #196]	@ (8001af0 <UpdateScreenTitles+0x138>)
 8001a2c:	f7ff fea8 	bl	8001780 <OutputString>
			break;
 8001a30:	e04b      	b.n	8001aca <UpdateScreenTitles+0x112>
		case PAGE_1:
			/* Titles */
			OutputString("LV WARN", LV_WARN_XPOS, LV_WARN_YPOS);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	482f      	ldr	r0, [pc, #188]	@ (8001af4 <UpdateScreenTitles+0x13c>)
 8001a38:	f7ff fea2 	bl	8001780 <OutputString>
			OutputString("HV WARN", HV_WARN_XPOS, HV_WARN_YPOS);
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	2100      	movs	r1, #0
 8001a40:	482d      	ldr	r0, [pc, #180]	@ (8001af8 <UpdateScreenTitles+0x140>)
 8001a42:	f7ff fe9d 	bl	8001780 <OutputString>
			OutputString("LT WARN", LT_WARN_XPOS, LT_WARN_YPOS);
 8001a46:	2206      	movs	r2, #6
 8001a48:	2100      	movs	r1, #0
 8001a4a:	482c      	ldr	r0, [pc, #176]	@ (8001afc <UpdateScreenTitles+0x144>)
 8001a4c:	f7ff fe98 	bl	8001780 <OutputString>
			OutputString("HT WARN", HT_WARN_XPOS, HT_WARN_YPOS);
 8001a50:	2209      	movs	r2, #9
 8001a52:	2100      	movs	r1, #0
 8001a54:	482a      	ldr	r0, [pc, #168]	@ (8001b00 <UpdateScreenTitles+0x148>)
 8001a56:	f7ff fe93 	bl	8001780 <OutputString>
			break;
 8001a5a:	e036      	b.n	8001aca <UpdateScreenTitles+0x112>
		case PAGE_2:
			/* Titles */
			OutputString("MTR C", MOTOR_CURRENT_XPOS, MOTOR_CURRENT_YPOS);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4828      	ldr	r0, [pc, #160]	@ (8001b04 <UpdateScreenTitles+0x14c>)
 8001a62:	f7ff fe8d 	bl	8001780 <OutputString>
			OutputString("ARR C", ARRAY_CURRENT_XPOS, ARRAY_CURRENT_YPOS);
 8001a66:	2203      	movs	r2, #3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4827      	ldr	r0, [pc, #156]	@ (8001b08 <UpdateScreenTitles+0x150>)
 8001a6c:	f7ff fe88 	bl	8001780 <OutputString>
			OutputString("PAK C", PACK_CURRENT_XPOS, PACK_CURRENT_YPOS);
 8001a70:	220c      	movs	r2, #12
 8001a72:	2100      	movs	r1, #0
 8001a74:	4825      	ldr	r0, [pc, #148]	@ (8001b0c <UpdateScreenTitles+0x154>)
 8001a76:	f7ff fe83 	bl	8001780 <OutputString>
			/* Units */
			OutputString("%", MOTOR_CURRENT_UNIT_XPOS, MOTOR_CURRENT_UNIT_YPOS);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2125      	movs	r1, #37	@ 0x25
 8001a7e:	4824      	ldr	r0, [pc, #144]	@ (8001b10 <UpdateScreenTitles+0x158>)
 8001a80:	f7ff fe7e 	bl	8001780 <OutputString>
			OutputString("A", ARRAY_CURRENT_UNIT_XPOS, ARRAY_CURRENT_UNIT_YPOS);
 8001a84:	2203      	movs	r2, #3
 8001a86:	2125      	movs	r1, #37	@ 0x25
 8001a88:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <UpdateScreenTitles+0x138>)
 8001a8a:	f7ff fe79 	bl	8001780 <OutputString>
			OutputString("%", PACK_CURRENT_UNIT_XPOS, PACK_CURRENT_UNIT_YPOS);
 8001a8e:	220c      	movs	r2, #12
 8001a90:	2125      	movs	r1, #37	@ 0x25
 8001a92:	481f      	ldr	r0, [pc, #124]	@ (8001b10 <UpdateScreenTitles+0x158>)
 8001a94:	f7ff fe74 	bl	8001780 <OutputString>
			break;
 8001a98:	e017      	b.n	8001aca <UpdateScreenTitles+0x112>
		case PAGE_3:
			/* Titles */
			OutputString("PK T", PACK_TEMP_XPOS, PACK_TEMP_YPOS);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	481d      	ldr	r0, [pc, #116]	@ (8001b14 <UpdateScreenTitles+0x15c>)
 8001aa0:	f7ff fe6e 	bl	8001780 <OutputString>
			OutputString("PK V", PACK_VOLT_XPOS, PACK_VOLT_YPOS);
 8001aa4:	2209      	movs	r2, #9
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	481b      	ldr	r0, [pc, #108]	@ (8001b18 <UpdateScreenTitles+0x160>)
 8001aaa:	f7ff fe69 	bl	8001780 <OutputString>

			/* Units */
			OutputString("C", PACK_TEMP_UNIT_XPOS, PACK_TEMP_UNIT_YPOS);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2125      	movs	r1, #37	@ 0x25
 8001ab2:	481a      	ldr	r0, [pc, #104]	@ (8001b1c <UpdateScreenTitles+0x164>)
 8001ab4:	f7ff fe64 	bl	8001780 <OutputString>
			OutputString("V", PACK_VOLT_UNIT_XPOS, PACK_VOLT_UNIT_XPOS);
 8001ab8:	2225      	movs	r2, #37	@ 0x25
 8001aba:	2125      	movs	r1, #37	@ 0x25
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <UpdateScreenTitles+0x134>)
 8001abe:	f7ff fe5f 	bl	8001780 <OutputString>

			break;
 8001ac2:	e002      	b.n	8001aca <UpdateScreenTitles+0x112>
		default:
			// Clear Screen
			ClearScreen();
 8001ac4:	f7ff fdd7 	bl	8001676 <ClearScreen>
			break;
 8001ac8:	bf00      	nop
	}
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	080043bc 	.word	0x080043bc
 8001ad8:	080043c4 	.word	0x080043c4
 8001adc:	080043cc 	.word	0x080043cc
 8001ae0:	080043d4 	.word	0x080043d4
 8001ae4:	080043dc 	.word	0x080043dc
 8001ae8:	080043e4 	.word	0x080043e4
 8001aec:	080043b0 	.word	0x080043b0
 8001af0:	080043ac 	.word	0x080043ac
 8001af4:	080043e8 	.word	0x080043e8
 8001af8:	080043f0 	.word	0x080043f0
 8001afc:	080043f8 	.word	0x080043f8
 8001b00:	08004400 	.word	0x08004400
 8001b04:	08004408 	.word	0x08004408
 8001b08:	08004410 	.word	0x08004410
 8001b0c:	08004418 	.word	0x08004418
 8001b10:	08004420 	.word	0x08004420
 8001b14:	08004424 	.word	0x08004424
 8001b18:	0800442c 	.word	0x0800442c
 8001b1c:	080043b4 	.word	0x080043b4

08001b20 <UpdateScreenParameter>:
 * @Param integerValue: The integer value of the parameter(Between -999 to 999)
 * @Param decValue: The decimal component of the parameter
 * @param decimal_en: 1 if decimal should be included; 0 otherwise.
 */
void UpdateScreenParameter(uint8_t x, uint8_t y, int32_t integerValue, uint8_t decValue, uint8_t decimal_en)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	603a      	str	r2, [r7, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	71bb      	strb	r3, [r7, #6]
 8001b32:	4613      	mov	r3, r2
 8001b34:	717b      	strb	r3, [r7, #5]
	//Clear a 6 x 2 rectangle to erase the previous number
	OutputString("     ", x, y);
 8001b36:	79ba      	ldrb	r2, [r7, #6]
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <UpdateScreenParameter+0x3c>)
 8001b3e:	f7ff fe1f 	bl	8001780 <OutputString>

	//Insert the new number
	OutputPaddedInteger(integerValue, decValue, decimal_en, x, y);
 8001b42:	79f8      	ldrb	r0, [r7, #7]
 8001b44:	7c3a      	ldrb	r2, [r7, #16]
 8001b46:	7979      	ldrb	r1, [r7, #5]
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	6838      	ldr	r0, [r7, #0]
 8001b50:	f7ff fe9e 	bl	8001890 <OutputPaddedInteger>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08004434 	.word	0x08004434

08001b60 <WriteByteToDataBus>:
 * Write a byte of data through C3 to C10(Data Buses)
 * @Param byte: 1 byte code
 * Returns: nothing
 */
void WriteByteToDataBus(uint8_t byte)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = byte << 3;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a06      	ldr	r2, [pc, #24]	@ (8001b88 <WriteByteToDataBus+0x28>)
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	6113      	str	r3, [r2, #16]
	GPIOC->BRR = ((uint8_t) (~byte)) << 3;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4a03      	ldr	r2, [pc, #12]	@ (8001b88 <WriteByteToDataBus+0x28>)
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	6153      	str	r3, [r2, #20]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40011000 	.word	0x40011000

08001b8c <TransmitCommand>:
 * Writes a byte of command code through ports C3 to C10(Data Buses)
 * @Param command_code: 1 byte command code
 * returns: nothing
 */
void TransmitCommand(uint8_t command_code)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	GPIOC->BSRR = 0x1UL << 0;					//SET C0 to HIGH
 8001b96:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <TransmitCommand+0x38>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	611a      	str	r2, [r3, #16]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <TransmitCommand+0x38>)
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(command_code);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ffdb 	bl	8001b60 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff fd20 	bl	80015f0 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <TransmitCommand+0x38>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff fd1a 	bl	80015f0 <MicrosecondDelay>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40011000 	.word	0x40011000

08001bc8 <TransmitCommandParameter>:
 * Writes a byte of parameter code through ports C3 to C10(Data Buses)
 * @Param parameter_code: 1 byte parameter code
 * returns: nothing
 */
void TransmitCommandParameter(uint8_t parameter_code)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	GPIOC->BRR = 0x1UL << 0;					//SET C0 to LOW
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <TransmitCommandParameter+0x38>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	615a      	str	r2, [r3, #20]
	GPIOC->BRR = 0x1UL << 1;					//SET C1 to LOW
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <TransmitCommandParameter+0x38>)
 8001bda:	2202      	movs	r2, #2
 8001bdc:	615a      	str	r2, [r3, #20]
	WriteByteToDataBus(parameter_code);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ffbd 	bl	8001b60 <WriteByteToDataBus>
	MicrosecondDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fd02 	bl	80015f0 <MicrosecondDelay>
	GPIOC->BSRR = 0x1UL << 1;					//SET C1 to HIGH
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <TransmitCommandParameter+0x38>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	611a      	str	r2, [r3, #16]
	MicrosecondDelay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fcfc 	bl	80015f0 <MicrosecondDelay>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40011000 	.word	0x40011000

08001c04 <ScreenSetup>:

/**
 * Initialise screen settings and character bit maps
 */
void ScreenSetup(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    // system setup (section 6-2-1 on raio datasheet)
    TransmitCommand(0x40);
 8001c08:	2040      	movs	r0, #64	@ 0x40
 8001c0a:	f7ff ffbf 	bl	8001b8c <TransmitCommand>
        Delay(5);
 8001c0e:	2005      	movs	r0, #5
 8001c10:	f7ff fcd0 	bl	80015b4 <Delay>
        // 0 0 IV 1 W/S M2 M1 M0
        TransmitCommandParameter(0x34);
 8001c14:	2034      	movs	r0, #52	@ 0x34
 8001c16:	f7ff ffd7 	bl	8001bc8 <TransmitCommandParameter>
        // WF 0 0 0 0 FX FX FX
        TransmitCommandParameter(0x87);
 8001c1a:	2087      	movs	r0, #135	@ 0x87
 8001c1c:	f7ff ffd4 	bl	8001bc8 <TransmitCommandParameter>
        // 0 0 0 0 FY FY FY FY
        TransmitCommandParameter(0xF);
 8001c20:	200f      	movs	r0, #15
 8001c22:	f7ff ffd1 	bl	8001bc8 <TransmitCommandParameter>
        // C/R (horizontal bytes per line)
        TransmitCommandParameter(39);
 8001c26:	2027      	movs	r0, #39	@ 0x27
 8001c28:	f7ff ffce 	bl	8001bc8 <TransmitCommandParameter>
        // TC/R (horizontal bytes per line, incl blanking)
        TransmitCommandParameter(47);
 8001c2c:	202f      	movs	r0, #47	@ 0x2f
 8001c2e:	f7ff ffcb 	bl	8001bc8 <TransmitCommandParameter>
        // L/F (lines per frame)
        TransmitCommandParameter(239);
 8001c32:	20ef      	movs	r0, #239	@ 0xef
 8001c34:	f7ff ffc8 	bl	8001bc8 <TransmitCommandParameter>
        // APL (horizontal address range, LSB)
        TransmitCommandParameter(40);
 8001c38:	2028      	movs	r0, #40	@ 0x28
 8001c3a:	f7ff ffc5 	bl	8001bc8 <TransmitCommandParameter>
        // APH (horizontal address range, MSB)
        TransmitCommandParameter(0);
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7ff ffc2 	bl	8001bc8 <TransmitCommandParameter>

    // scroll parameters
    TransmitCommand(0x44);
 8001c44:	2044      	movs	r0, #68	@ 0x44
 8001c46:	f7ff ffa1 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(0); // SAD 1L
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff ffbc 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 1H
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff ffb9 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL1
 8001c56:	20f0      	movs	r0, #240	@ 0xf0
 8001c58:	f7ff ffb6 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(176); // SAD 2L
 8001c5c:	20b0      	movs	r0, #176	@ 0xb0
 8001c5e:	f7ff ffb3 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(4); // SAD 2H
 8001c62:	2004      	movs	r0, #4
 8001c64:	f7ff ffb0 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(240); // SL2
 8001c68:	20f0      	movs	r0, #240	@ 0xf0
 8001c6a:	f7ff ffad 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3L
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff ffaa 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 3H
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff ffa7 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ffa4 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0); // SAD 4
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff ffa1 	bl	8001bc8 <TransmitCommandParameter>

	TransmitCommand(0x5B);
 8001c86:	205b      	movs	r0, #91	@ 0x5b
 8001c88:	f7ff ff80 	bl	8001b8c <TransmitCommand>
		TransmitCommandParameter(0);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ff9b 	bl	8001bc8 <TransmitCommandParameter>

    // set horizontal scroll position
    TransmitCommand(0x5A);
 8001c92:	205a      	movs	r0, #90	@ 0x5a
 8001c94:	f7ff ff7a 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(0);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff ff95 	bl	8001bc8 <TransmitCommandParameter>

    // set display overlay format
    TransmitCommand(0x5B);
 8001c9e:	205b      	movs	r0, #91	@ 0x5b
 8001ca0:	f7ff ff74 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(0);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ff8f 	bl	8001bc8 <TransmitCommandParameter>

    // turn off the display and configure cursor
    TransmitCommand(0x58);
 8001caa:	2058      	movs	r0, #88	@ 0x58
 8001cac:	f7ff ff6e 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(0x57);
 8001cb0:	2057      	movs	r0, #87	@ 0x57
 8001cb2:	f7ff ff89 	bl	8001bc8 <TransmitCommandParameter>

    // set cursor size & type
    TransmitCommand(0x5D);
 8001cb6:	205d      	movs	r0, #93	@ 0x5d
 8001cb8:	f7ff ff68 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(4);
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f7ff ff83 	bl	8001bc8 <TransmitCommandParameter>
        TransmitCommandParameter(0x84);
 8001cc2:	2084      	movs	r0, #132	@ 0x84
 8001cc4:	f7ff ff80 	bl	8001bc8 <TransmitCommandParameter>

    // set cursor direction
    TransmitCommand(0x4C);
 8001cc8:	204c      	movs	r0, #76	@ 0x4c
 8001cca:	f7ff ff5f 	bl	8001b8c <TransmitCommand>

    // turn on the display and configure cursor
    TransmitCommand(0x59);
 8001cce:	2059      	movs	r0, #89	@ 0x59
 8001cd0:	f7ff ff5c 	bl	8001b8c <TransmitCommand>
        TransmitCommandParameter(0x7);
 8001cd4:	2007      	movs	r0, #7
 8001cd6:	f7ff ff77 	bl	8001bc8 <TransmitCommandParameter>

    CharacterBitMaps();
 8001cda:	f7ff fd13 	bl	8001704 <CharacterBitMaps>
    ClearScreen();
 8001cde:	f7ff fcca 	bl	8001676 <ClearScreen>
//	DisplayScreen();

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup()
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	// Messages received by the DID (0x622,0x623,0x624,0x625,0x501,0x503,0x50B,0x400, 0x401, 0x403, 0x450, 0x750,0x702).

	// Filter for 0x500 and 401 IDs in list mode
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8001cec:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <CanFilterSetup+0x120>)
 8001cee:	f24a 0220 	movw	r2, #40992	@ 0xa020
 8001cf2:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x503 << 5);
 8001cf4:	4b44      	ldr	r3, [pc, #272]	@ (8001e08 <CanFilterSetup+0x120>)
 8001cf6:	f24a 0260 	movw	r2, #41056	@ 0xa060
 8001cfa:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x50B << 5);
 8001cfc:	4b42      	ldr	r3, [pc, #264]	@ (8001e08 <CanFilterSetup+0x120>)
 8001cfe:	f24a 1260 	movw	r2, #41312	@ 0xa160
 8001d02:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x750 << 5);
 8001d04:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d06:	f44f 426a 	mov.w	r2, #59904	@ 0xea00
 8001d0a:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDLIST;
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8001d24:	4b38      	ldr	r3, [pc, #224]	@ (8001e08 <CanFilterSetup+0x120>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	621a      	str	r2, [r3, #32]

    // Filter for 0x600 IDs in filter mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x622 << 5);
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d2c:	f24c 4240 	movw	r2, #50240	@ 0xc440
 8001d30:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x623 << 5);
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d34:	f24c 4260 	movw	r2, #50272	@ 0xc460
 8001d38:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x624 << 5);
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d3c:	f24c 4280 	movw	r2, #50304	@ 0xc480
 8001d40:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x625 << 5);
 8001d42:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d44:	f24c 42a0 	movw	r2, #50336	@ 0xc4a0
 8001d48:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8001d50:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8001d62:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <CanFilterSetup+0x124>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	621a      	str	r2, [r3, #32]

    // Filter for 0x400
    CAN_filter2.FilterIdHigh = (uint16_t) (0x400 << 5);
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d6e:	601a      	str	r2, [r3, #0]
    CAN_filter2.FilterMaskIdHigh = (uint16_t) (0x401<< 5);
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d72:	f248 0220 	movw	r2, #32800	@ 0x8020
 8001d76:	609a      	str	r2, [r3, #8]

    CAN_filter2.FilterIdLow = (uint16_t) (0x403 << 5);
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d7a:	f248 0260 	movw	r2, #32864	@ 0x8060
 8001d7e:	605a      	str	r2, [r3, #4]
    CAN_filter2.FilterMaskIdLow = (uint16_t) (0x450 << 5);
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d82:	f44f 420a 	mov.w	r2, #35328	@ 0x8a00
 8001d86:	60da      	str	r2, [r3, #12]

    CAN_filter2.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
    CAN_filter2.FilterBank = (uint32_t) 2;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d90:	2202      	movs	r2, #2
 8001d92:	615a      	str	r2, [r3, #20]
    CAN_filter2.FilterMode = CAN_FILTERMODE_IDLIST;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	619a      	str	r2, [r3, #24]
    CAN_filter2.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <CanFilterSetup+0x128>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
    CAN_filter2.FilterActivation = CAN_FILTER_ENABLE;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <CanFilterSetup+0x128>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	621a      	str	r2, [r3, #32]


    // Filter for 0x702

    CAN_filter3.FilterIdHigh = (uint16_t) (0x702 << 5);
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001da8:	f24e 0240 	movw	r2, #57408	@ 0xe040
 8001dac:	601a      	str	r2, [r3, #0]
    CAN_filter3.FilterMaskIdHigh = (uint16_t) (0x702<< 5);
 8001dae:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001db0:	f24e 0240 	movw	r2, #57408	@ 0xe040
 8001db4:	609a      	str	r2, [r3, #8]

	CAN_filter3.FilterIdLow = (uint16_t) (0x404 << 5);
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001db8:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001dbc:	605a      	str	r2, [r3, #4]
    CAN_filter3.FilterMaskIdLow = (uint16_t) (0x404 << 5);
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dc0:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001dc4:	60da      	str	r2, [r3, #12]

    CAN_filter3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
    CAN_filter3.FilterBank = (uint32_t) 3;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dce:	2203      	movs	r2, #3
 8001dd0:	615a      	str	r2, [r3, #20]
    CAN_filter3.FilterMode = CAN_FILTERMODE_IDLIST;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	619a      	str	r2, [r3, #24]
    CAN_filter3.FilterScale = CAN_FILTERSCALE_16BIT;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
    CAN_filter3.FilterActivation = CAN_FILTER_ENABLE;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	621a      	str	r2, [r3, #32]



	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001de4:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <CanFilterSetup+0x120>)
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <CanFilterSetup+0x130>)
 8001de8:	f000 fc33 	bl	8002652 <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8001dec:	4907      	ldr	r1, [pc, #28]	@ (8001e0c <CanFilterSetup+0x124>)
 8001dee:	480a      	ldr	r0, [pc, #40]	@ (8001e18 <CanFilterSetup+0x130>)
 8001df0:	f000 fc2f 	bl	8002652 <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter2);
 8001df4:	4906      	ldr	r1, [pc, #24]	@ (8001e10 <CanFilterSetup+0x128>)
 8001df6:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <CanFilterSetup+0x130>)
 8001df8:	f000 fc2b 	bl	8002652 <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter3);
 8001dfc:	4905      	ldr	r1, [pc, #20]	@ (8001e14 <CanFilterSetup+0x12c>)
 8001dfe:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <CanFilterSetup+0x130>)
 8001e00:	f000 fc27 	bl	8002652 <HAL_CAN_ConfigFilter>

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000019c 	.word	0x2000019c
 8001e0c:	200001c4 	.word	0x200001c4
 8001e10:	200001ec 	.word	0x200001ec
 8001e14:	20000214 	.word	0x20000214
 8001e18:	20000174 	.word	0x20000174

08001e1c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e22:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <MX_CAN_Init+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e28:	2204      	movs	r2, #4
 8001e2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e32:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e3a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001e3e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e46:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <MX_CAN_Init+0x64>)
 8001e6e:	f000 faf5 	bl	800245c <HAL_CAN_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001e78:	f000 f997 	bl	80021aa <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000174 	.word	0x20000174
 8001e84:	40006400 	.word	0x40006400

08001e88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	@ 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a29      	ldr	r2, [pc, #164]	@ (8001f48 <HAL_CAN_MspInit+0xc0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d14b      	bne.n	8001f40 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ea8:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001eae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	61d3      	str	r3, [r2, #28]
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_CAN_MspInit+0xc4>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4818      	ldr	r0, [pc, #96]	@ (8001f50 <HAL_CAN_MspInit+0xc8>)
 8001eee:	f001 f93f 	bl	8003170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4812      	ldr	r0, [pc, #72]	@ (8001f50 <HAL_CAN_MspInit+0xc8>)
 8001f08:	f001 f932 	bl	8003170 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_CAN_MspInit+0xcc>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_CAN_MspInit+0xcc>)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	2014      	movs	r0, #20
 8001f36:	f001 f8e4 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001f3a:	2014      	movs	r0, #20
 8001f3c:	f001 f8fd 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40006400 	.word	0x40006400
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010c00 	.word	0x40010c00
 8001f54:	40010000 	.word	0x40010000

08001f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a27      	ldr	r2, [pc, #156]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a21      	ldr	r2, [pc, #132]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <MX_GPIO_Init+0xb8>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001fba:	4816      	ldr	r0, [pc, #88]	@ (8002014 <MX_GPIO_Init+0xbc>)
 8001fbc:	f001 fa5c 	bl	8003478 <HAL_GPIO_WritePin>
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BATT_LO_Pin|BATT_HI_Pin|BMS_COMM_FLT_Pin|ONBOARD_LED_Pin
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f649 71f3 	movw	r1, #40947	@ 0x9ff3
 8001fc6:	4814      	ldr	r0, [pc, #80]	@ (8002018 <MX_GPIO_Init+0xc0>)
 8001fc8:	f001 fa56 	bl	8003478 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = A0_Pin|WR_Pin|RD_Pin|DB0_Pin
 8001fcc:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001fd0:	613b      	str	r3, [r7, #16]
                          |DB1_Pin|DB2_Pin|DB3_Pin|DB4_Pin
                          |DB5_Pin|DB6_Pin|DB7_Pin|CS_Pin
                          |RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480b      	ldr	r0, [pc, #44]	@ (8002014 <MX_GPIO_Init+0xbc>)
 8001fe6:	f001 f8c3 	bl	8003170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BATT_LO_Pin|BATT_HI_Pin|BMS_COMM_FLT_Pin|ONBOARD_LED_Pin
 8001fea:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001fee:	613b      	str	r3, [r7, #16]
                          |CH_OC_Pin|DCH_OC_Pin|BATT_OT_Pin|BATT_UV_Pin
                          |BATT_OV_Pin|MTR_OT_Pin|MTR_OC_Pin|MTR_FLT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_GPIO_Init+0xc0>)
 8002004:	f001 f8b4 	bl	8003170 <HAL_GPIO_Init>

}
 8002008:	bf00      	nop
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000
 8002014:	40011000 	.word	0x40011000
 8002018:	40010800 	.word	0x40010800

0800201c <InitLEDs>:

/**
 * Initialize Dashboard LED lights
 */
void InitLEDs(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= 0x1UL << 2; 		//Initialize clock for GPIOA, if it hasn't been initialized yet
 8002020:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <InitLEDs+0x68>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <InitLEDs+0x68>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6193      	str	r3, [r2, #24]
	GPIOA->CRL &= 0;
 800202c:	4b16      	ldr	r3, [pc, #88]	@ (8002088 <InitLEDs+0x6c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <InitLEDs+0x6c>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
	GPIOA->CRH &= 0;
 8002036:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <InitLEDs+0x6c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <InitLEDs+0x6c>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
	GPIOA->CRL |= 0x33330033UL;			//Set pins A1, A4, A5, A6, A7 to be Push-Pull Output, 50Mhz
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <InitLEDs+0x6c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <InitLEDs+0x6c>)
 8002046:	f043 534c 	orr.w	r3, r3, #855638016	@ 0x33000000
 800204a:	f043 1333 	orr.w	r3, r3, #3342387	@ 0x330033
 800204e:	6013      	str	r3, [r2, #0]
	GPIOA->CRH |= 0x30033333UL;			//SetBar pins A8, A9, A10 to be Push-Pull Output, 50Mhz
 8002050:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <InitLEDs+0x6c>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <InitLEDs+0x6c>)
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <InitLEDs+0x70>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

	RCC->APB2ENR |= 0x1;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <InitLEDs+0x68>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <InitLEDs+0x68>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6193      	str	r3, [r2, #24]
	AFIO->MAPR |= 0x2 << 24;
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <InitLEDs+0x74>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <InitLEDs+0x74>)
 800206e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002072:	6053      	str	r3, [r2, #4]
	//GPIOA->BSRR = 0xFFFF;

	//GPIOA->BSRR = 0x1 << 11;

	GPIOA->BRR = 0xFFFF;
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <InitLEDs+0x6c>)
 8002076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207a:	615a      	str	r2, [r3, #20]

}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000
 8002088:	40010800 	.word	0x40010800
 800208c:	30033333 	.word	0x30033333
 8002090:	40010000 	.word	0x40010000

08002094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800209a:	f000 f97d 	bl	8002398 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209e:	f000 f843 	bl	8002128 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a2:	f7ff ff59 	bl	8001f58 <MX_GPIO_Init>
  MX_CAN_Init();
 80020a6:	f7ff feb9 	bl	8001e1c <MX_CAN_Init>
  MX_TIM3_Init();
 80020aa:	f000 f8e3 	bl	8002274 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  CanFilterSetup();
 80020ae:	f7ff fe1b 	bl	8001ce8 <CanFilterSetup>
  HAL_CAN_Start(&hcan);
 80020b2:	481a      	ldr	r0, [pc, #104]	@ (800211c <main+0x88>)
 80020b4:	f000 fb96 	bl	80027e4 <HAL_CAN_Start>

  //Set Pin initial values
  GPIOC->BSRR = 0x1UL << 0;	 // C0 HIGH
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <main+0x8c>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	611a      	str	r2, [r3, #16]
  GPIOC->BSRR = 0x1UL << 1;	 // C1 HIGH
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <main+0x8c>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	611a      	str	r2, [r3, #16]
  GPIOC->BSRR = 0x1UL << 2;	 // C2 HIGH
 80020c4:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <main+0x8c>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
  GPIOC->BRR = 0x1UL << 11;	 // C11 LOW
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <main+0x8c>)
 80020cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020d0:	615a      	str	r2, [r3, #20]
  GPIOC->BSRR = 0x1UL << 12;   //C12 HIGH
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <main+0x8c>)
 80020d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020d8:	611a      	str	r2, [r3, #16]

  ScreenSetup();
 80020da:	f7ff fd93 	bl	8001c04 <ScreenSetup>

  // Check if this is required!
  InitLEDs();
 80020de:	f7ff ff9d 	bl	800201c <InitLEDs>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// / Parse received CAN message if available
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0 && HAL_OK == HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data))
 80020e2:	2100      	movs	r1, #0
 80020e4:	480d      	ldr	r0, [pc, #52]	@ (800211c <main+0x88>)
 80020e6:	f000 fce2 	bl	8002aae <HAL_CAN_GetRxFifoFillLevel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00f      	beq.n	8002110 <main+0x7c>
 80020f0:	463b      	mov	r3, r7
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <main+0x90>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	4809      	ldr	r0, [pc, #36]	@ (800211c <main+0x88>)
 80020f8:	f000 fbb8 	bl	800286c <HAL_CAN_GetRxMessage>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <main+0x7c>
	{
		parse_can_message( CAN_rx_data, CAN_rx_header.StdId );
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <main+0x90>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	463b      	mov	r3, r7
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fd38 	bl	8000b80 <parse_can_message>
	}

	// Check DID timeout
	DID_timeout();
 8002110:	f7ff fa24 	bl	800155c <DID_timeout>

	// Update DID LCD screen
	update_DID_screen();
 8002114:	f7fe fef4 	bl	8000f00 <update_DID_screen>
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0 && HAL_OK == HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data))
 8002118:	e7e3      	b.n	80020e2 <main+0x4e>
 800211a:	bf00      	nop
 800211c:	20000174 	.word	0x20000174
 8002120:	40011000 	.word	0x40011000
 8002124:	2000023c 	.word	0x2000023c

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b090      	sub	sp, #64	@ 0x40
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	2228      	movs	r2, #40	@ 0x28
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f800 	bl	800413c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800214e:	2301      	movs	r3, #1
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002152:	2310      	movs	r3, #16
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002156:	2302      	movs	r3, #2
 8002158:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800215e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	4618      	mov	r0, r3
 800216a:	f001 f99d 	bl	80034a8 <HAL_RCC_OscConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002174:	f000 f819 	bl	80021aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002178:	230f      	movs	r3, #15
 800217a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2102      	movs	r1, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f001 fc0a 	bl	80039ac <HAL_RCC_ClockConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800219e:	f000 f804 	bl	80021aa <Error_Handler>
  }
}
 80021a2:	bf00      	nop
 80021a4:	3740      	adds	r7, #64	@ 0x40
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ae:	b672      	cpsid	i
}
 80021b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b2:	bf00      	nop
 80021b4:	e7fd      	b.n	80021b2 <Error_Handler+0x8>
	...

080021b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021be:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_MspInit+0x40>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_MspInit+0x40>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_MspInit+0x40>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_MspInit+0x40>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <HAL_MspInit+0x40>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_MspInit+0x40>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <NMI_Handler+0x4>

08002204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <MemManage_Handler+0x4>

08002214 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <UsageFault_Handler+0x4>

08002224 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f8ea 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800225a:	f000 fc4f 	bl	8002afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000174 	.word	0x20000174

08002268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <MX_TIM3_Init+0x94>)
 8002292:	4a1e      	ldr	r2, [pc, #120]	@ (800230c <MX_TIM3_Init+0x98>)
 8002294:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <MX_TIM3_Init+0x94>)
 8002298:	224f      	movs	r2, #79	@ 0x4f
 800229a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <MX_TIM3_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022b6:	4814      	ldr	r0, [pc, #80]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022b8:	f001 fcd4 	bl	8003c64 <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80022c2:	f7ff ff72 	bl	80021aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022d4:	f001 fd15 	bl	8003d02 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80022de:	f7ff ff64 	bl	80021aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	@ (8002308 <MX_TIM3_Init+0x94>)
 80022f0:	f001 fec6 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f7ff ff56 	bl	80021aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000258 	.word	0x20000258
 800230c:	40000400 	.word	0x40000400

08002310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a09      	ldr	r2, [pc, #36]	@ (8002344 <HAL_TIM_Base_MspInit+0x34>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10b      	bne.n	800233a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_TIM_Base_MspInit+0x38>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a08      	ldr	r2, [pc, #32]	@ (8002348 <HAL_TIM_Base_MspInit+0x38>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	61d3      	str	r3, [r2, #28]
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_TIM_Base_MspInit+0x38>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40000400 	.word	0x40000400
 8002348:	40021000 	.word	0x40021000

0800234c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	@ (8002390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002372:	f7ff ff79 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f001 fee9 	bl	800414c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7ff fe8b 	bl	8002094 <main>
  bx lr
 800237e:	4770      	bx	lr
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002388:	08004468 	.word	0x08004468
  ldr r2, =_sbss
 800238c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002390:	200002a4 	.word	0x200002a4

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_Init+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	@ (80023c0 <HAL_Init+0x28>)
 80023a2:	f043 0310 	orr.w	r3, r3, #16
 80023a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 fe9f 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f808 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff ff00 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 feb7 	bl	8003156 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002400:	f000 fe7f 	bl	8003102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000128 	.word	0x20000128
 800241c:	20000130 	.word	0x20000130
 8002420:	2000012c 	.word	0x2000012c

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_IncTick+0x1c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_IncTick+0x20>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	@ (8002444 <HAL_IncTick+0x20>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000130 	.word	0x20000130
 8002444:	200002a0 	.word	0x200002a0

08002448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b02      	ldr	r3, [pc, #8]	@ (8002458 <HAL_GetTick+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	200002a0 	.word	0x200002a0

0800245c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0ed      	b.n	800264a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fd04 	bl	8001e88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002490:	f7ff ffda 	bl	8002448 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002496:	e012      	b.n	80024be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002498:	f7ff ffd6 	bl	8002448 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d90b      	bls.n	80024be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2205      	movs	r2, #5
 80024b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0c5      	b.n	800264a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0e5      	beq.n	8002498 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0202 	bic.w	r2, r2, #2
 80024da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024dc:	f7ff ffb4 	bl	8002448 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024e2:	e012      	b.n	800250a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e4:	f7ff ffb0 	bl	8002448 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b0a      	cmp	r3, #10
 80024f0:	d90b      	bls.n	800250a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2205      	movs	r2, #5
 8002502:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e09f      	b.n	800264a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1e5      	bne.n	80024e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7e1b      	ldrb	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d108      	bne.n	8002532 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e007      	b.n	8002542 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7e5b      	ldrb	r3, [r3, #25]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7e9b      	ldrb	r3, [r3, #26]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d108      	bne.n	8002586 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0220 	orr.w	r2, r2, #32
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e007      	b.n	8002596 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0220 	bic.w	r2, r2, #32
 8002594:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	7edb      	ldrb	r3, [r3, #27]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d108      	bne.n	80025b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0210 	bic.w	r2, r2, #16
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e007      	b.n	80025c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0210 	orr.w	r2, r2, #16
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7f1b      	ldrb	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d108      	bne.n	80025da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0208 	orr.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e007      	b.n	80025ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0208 	bic.w	r2, r2, #8
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7f5b      	ldrb	r3, [r3, #29]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d108      	bne.n	8002604 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0204 	orr.w	r2, r2, #4
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e007      	b.n	8002614 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	ea42 0103 	orr.w	r1, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002652:	b480      	push	{r7}
 8002654:	b087      	sub	sp, #28
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002668:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d003      	beq.n	8002678 <HAL_CAN_ConfigFilter+0x26>
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	2b02      	cmp	r3, #2
 8002674:	f040 80aa 	bne.w	80027cc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2201      	movs	r2, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d123      	bne.n	80026fa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	401a      	ands	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3248      	adds	r2, #72	@ 0x48
 80026da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026f0:	6979      	ldr	r1, [r7, #20]
 80026f2:	3348      	adds	r3, #72	@ 0x48
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d122      	bne.n	8002748 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002722:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3248      	adds	r2, #72	@ 0x48
 8002728:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800273e:	6979      	ldr	r1, [r7, #20]
 8002740:	3348      	adds	r3, #72	@ 0x48
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002762:	e007      	b.n	8002774 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800278e:	e007      	b.n	80027a0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80027be:	f023 0201 	bic.w	r2, r3, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e006      	b.n	80027da <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d12e      	bne.n	8002856 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002810:	f7ff fe1a 	bl	8002448 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002816:	e012      	b.n	800283e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7ff fe16 	bl	8002448 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90b      	bls.n	800283e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e012      	b.n	8002864 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e006      	b.n	8002864 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
  }
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002880:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d003      	beq.n	8002890 <HAL_CAN_GetRxMessage+0x24>
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b02      	cmp	r3, #2
 800288c:	f040 8103 	bne.w	8002a96 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10e      	bne.n	80028b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0f7      	b.n	8002aa4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0e8      	b.n	8002aa4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	331b      	adds	r3, #27
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0204 	and.w	r2, r3, #4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	331b      	adds	r3, #27
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0d5b      	lsrs	r3, r3, #21
 8002900:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e00b      	b.n	8002922 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	331b      	adds	r3, #27
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	4413      	add	r3, r2
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	08db      	lsrs	r3, r3, #3
 800291a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	331b      	adds	r3, #27
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0202 	and.w	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	331b      	adds	r3, #27
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2208      	movs	r2, #8
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e00b      	b.n	8002970 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	331b      	adds	r3, #27
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4413      	add	r3, r2
 8002964:	3304      	adds	r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	331b      	adds	r3, #27
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	331b      	adds	r3, #27
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	4413      	add	r3, r2
 80029c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0a1a      	lsrs	r2, r3, #8
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0c1a      	lsrs	r2, r3, #16
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	3302      	adds	r3, #2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e1a      	lsrs	r2, r3, #24
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	3303      	adds	r3, #3
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3304      	adds	r3, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0a1a      	lsrs	r2, r3, #8
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3305      	adds	r3, #5
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0c1a      	lsrs	r2, r3, #16
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3306      	adds	r3, #6
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e1a      	lsrs	r2, r3, #24
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	3307      	adds	r3, #7
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d108      	bne.n	8002a82 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	e007      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e006      	b.n	8002aa4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ac4:	7afb      	ldrb	r3, [r7, #11]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d002      	beq.n	8002ad0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d10f      	bne.n	8002af0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e005      	b.n	8002af0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07c      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d023      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f983 	bl	8002e6a <HAL_CAN_TxMailbox0CompleteCallback>
 8002b64:	e016      	b.n	8002b94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	e00c      	b.n	8002b94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8c:	e002      	b.n	8002b94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f986 	bl	8002ea0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f962 	bl	8002e7c <HAL_CAN_TxMailbox1CompleteCallback>
 8002bb8:	e016      	b.n	8002be8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bcc:	e00c      	b.n	8002be8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be0:	e002      	b.n	8002be8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f965 	bl	8002eb2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f941 	bl	8002e8e <HAL_CAN_TxMailbox2CompleteCallback>
 8002c0c:	e016      	b.n	8002c3c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d004      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e00c      	b.n	8002c3c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	e002      	b.n	8002c3c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f944 	bl	8002ec4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f933 	bl	8002ee8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f91b 	bl	8002ed6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f913 	bl	8002f0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8fb 	bl	8002efa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8fc 	bl	8002f1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8f4 	bl	8002f30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d07b      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d072      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d043      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03e      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dca:	2b60      	cmp	r3, #96	@ 0x60
 8002dcc:	d02b      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x32a>
 8002dce:	2b60      	cmp	r3, #96	@ 0x60
 8002dd0:	d82e      	bhi.n	8002e30 <HAL_CAN_IRQHandler+0x334>
 8002dd2:	2b50      	cmp	r3, #80	@ 0x50
 8002dd4:	d022      	beq.n	8002e1c <HAL_CAN_IRQHandler+0x320>
 8002dd6:	2b50      	cmp	r3, #80	@ 0x50
 8002dd8:	d82a      	bhi.n	8002e30 <HAL_CAN_IRQHandler+0x334>
 8002dda:	2b40      	cmp	r3, #64	@ 0x40
 8002ddc:	d019      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x316>
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d826      	bhi.n	8002e30 <HAL_CAN_IRQHandler+0x334>
 8002de2:	2b30      	cmp	r3, #48	@ 0x30
 8002de4:	d010      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x30c>
 8002de6:	2b30      	cmp	r3, #48	@ 0x30
 8002de8:	d822      	bhi.n	8002e30 <HAL_CAN_IRQHandler+0x334>
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d002      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x2f8>
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d005      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002df2:	e01d      	b.n	8002e30 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	f043 0308 	orr.w	r3, r3, #8
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002dfc:	e019      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	f043 0310 	orr.w	r3, r3, #16
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e06:	e014      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e10:	e00f      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e1a:	e00a      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e24:	e005      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002e2e:	e000      	b.n	8002e32 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002e40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f870 	bl	8002f42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e62:	bf00      	nop
 8002e64:	3728      	adds	r7, #40	@ 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f70:	4013      	ands	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f86:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <__NVIC_SetPriorityGrouping+0x44>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	60d3      	str	r3, [r2, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 0307 	and.w	r3, r3, #7
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0b      	blt.n	8002fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4906      	ldr	r1, [pc, #24]	@ (8002fec <__NVIC_EnableIRQ+0x34>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100

08002ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	@ (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	@ (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	2b04      	cmp	r3, #4
 8003060:	bf28      	it	cs
 8003062:	2304      	movcs	r3, #4
 8003064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3304      	adds	r3, #4
 800306a:	2b06      	cmp	r3, #6
 800306c:	d902      	bls.n	8003074 <NVIC_EncodePriority+0x30>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3b03      	subs	r3, #3
 8003072:	e000      	b.n	8003076 <NVIC_EncodePriority+0x32>
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	401a      	ands	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800308c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	43d9      	mvns	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	4313      	orrs	r3, r2
         );
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030cc:	f7ff ff90 	bl	8002ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff2d 	bl	8002f54 <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff42 	bl	8002f9c <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff90 	bl	8003044 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5f 	bl	8002ff0 <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff35 	bl	8002fb8 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003170:	b480      	push	{r7}
 8003172:	b08b      	sub	sp, #44	@ 0x2c
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	e169      	b.n	8003458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003184:	2201      	movs	r2, #1
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8158 	bne.w	8003452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a9a      	ldr	r2, [pc, #616]	@ (8003410 <HAL_GPIO_Init+0x2a0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d05e      	beq.n	800326a <HAL_GPIO_Init+0xfa>
 80031ac:	4a98      	ldr	r2, [pc, #608]	@ (8003410 <HAL_GPIO_Init+0x2a0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d875      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031b2:	4a98      	ldr	r2, [pc, #608]	@ (8003414 <HAL_GPIO_Init+0x2a4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d058      	beq.n	800326a <HAL_GPIO_Init+0xfa>
 80031b8:	4a96      	ldr	r2, [pc, #600]	@ (8003414 <HAL_GPIO_Init+0x2a4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d86f      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031be:	4a96      	ldr	r2, [pc, #600]	@ (8003418 <HAL_GPIO_Init+0x2a8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d052      	beq.n	800326a <HAL_GPIO_Init+0xfa>
 80031c4:	4a94      	ldr	r2, [pc, #592]	@ (8003418 <HAL_GPIO_Init+0x2a8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d869      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031ca:	4a94      	ldr	r2, [pc, #592]	@ (800341c <HAL_GPIO_Init+0x2ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04c      	beq.n	800326a <HAL_GPIO_Init+0xfa>
 80031d0:	4a92      	ldr	r2, [pc, #584]	@ (800341c <HAL_GPIO_Init+0x2ac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d863      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031d6:	4a92      	ldr	r2, [pc, #584]	@ (8003420 <HAL_GPIO_Init+0x2b0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d046      	beq.n	800326a <HAL_GPIO_Init+0xfa>
 80031dc:	4a90      	ldr	r2, [pc, #576]	@ (8003420 <HAL_GPIO_Init+0x2b0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d85d      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031e2:	2b12      	cmp	r3, #18
 80031e4:	d82a      	bhi.n	800323c <HAL_GPIO_Init+0xcc>
 80031e6:	2b12      	cmp	r3, #18
 80031e8:	d859      	bhi.n	800329e <HAL_GPIO_Init+0x12e>
 80031ea:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <HAL_GPIO_Init+0x80>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	0800326b 	.word	0x0800326b
 80031f4:	08003245 	.word	0x08003245
 80031f8:	08003257 	.word	0x08003257
 80031fc:	08003299 	.word	0x08003299
 8003200:	0800329f 	.word	0x0800329f
 8003204:	0800329f 	.word	0x0800329f
 8003208:	0800329f 	.word	0x0800329f
 800320c:	0800329f 	.word	0x0800329f
 8003210:	0800329f 	.word	0x0800329f
 8003214:	0800329f 	.word	0x0800329f
 8003218:	0800329f 	.word	0x0800329f
 800321c:	0800329f 	.word	0x0800329f
 8003220:	0800329f 	.word	0x0800329f
 8003224:	0800329f 	.word	0x0800329f
 8003228:	0800329f 	.word	0x0800329f
 800322c:	0800329f 	.word	0x0800329f
 8003230:	0800329f 	.word	0x0800329f
 8003234:	0800324d 	.word	0x0800324d
 8003238:	08003261 	.word	0x08003261
 800323c:	4a79      	ldr	r2, [pc, #484]	@ (8003424 <HAL_GPIO_Init+0x2b4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003242:	e02c      	b.n	800329e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	623b      	str	r3, [r7, #32]
          break;
 800324a:	e029      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	3304      	adds	r3, #4
 8003252:	623b      	str	r3, [r7, #32]
          break;
 8003254:	e024      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	3308      	adds	r3, #8
 800325c:	623b      	str	r3, [r7, #32]
          break;
 800325e:	e01f      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	330c      	adds	r3, #12
 8003266:	623b      	str	r3, [r7, #32]
          break;
 8003268:	e01a      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003272:	2304      	movs	r3, #4
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e013      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003280:	2308      	movs	r3, #8
 8003282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	611a      	str	r2, [r3, #16]
          break;
 800328a:	e009      	b.n	80032a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800328c:	2308      	movs	r3, #8
 800328e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	615a      	str	r2, [r3, #20]
          break;
 8003296:	e003      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
          break;
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x130>
          break;
 800329e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2bff      	cmp	r3, #255	@ 0xff
 80032a4:	d801      	bhi.n	80032aa <HAL_GPIO_Init+0x13a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_Init+0x13e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2bff      	cmp	r3, #255	@ 0xff
 80032b4:	d802      	bhi.n	80032bc <HAL_GPIO_Init+0x14c>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	e002      	b.n	80032c2 <HAL_GPIO_Init+0x152>
 80032bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032be:	3b08      	subs	r3, #8
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	210f      	movs	r1, #15
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	6a39      	ldr	r1, [r7, #32]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	431a      	orrs	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80b1 	beq.w	8003452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003428 <HAL_GPIO_Init+0x2b8>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003428 <HAL_GPIO_Init+0x2b8>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6193      	str	r3, [r2, #24]
 80032fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_GPIO_Init+0x2b8>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003308:	4a48      	ldr	r2, [pc, #288]	@ (800342c <HAL_GPIO_Init+0x2bc>)
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a40      	ldr	r2, [pc, #256]	@ (8003430 <HAL_GPIO_Init+0x2c0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_GPIO_Init+0x1ec>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3f      	ldr	r2, [pc, #252]	@ (8003434 <HAL_GPIO_Init+0x2c4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00d      	beq.n	8003358 <HAL_GPIO_Init+0x1e8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3e      	ldr	r2, [pc, #248]	@ (8003438 <HAL_GPIO_Init+0x2c8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <HAL_GPIO_Init+0x1e4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a3d      	ldr	r2, [pc, #244]	@ (800343c <HAL_GPIO_Init+0x2cc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_GPIO_Init+0x1e0>
 800334c:	2303      	movs	r3, #3
 800334e:	e006      	b.n	800335e <HAL_GPIO_Init+0x1ee>
 8003350:	2304      	movs	r3, #4
 8003352:	e004      	b.n	800335e <HAL_GPIO_Init+0x1ee>
 8003354:	2302      	movs	r3, #2
 8003356:	e002      	b.n	800335e <HAL_GPIO_Init+0x1ee>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_GPIO_Init+0x1ee>
 800335c:	2300      	movs	r3, #0
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	f002 0203 	and.w	r2, r2, #3
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	4093      	lsls	r3, r2
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800336e:	492f      	ldr	r1, [pc, #188]	@ (800342c <HAL_GPIO_Init+0x2bc>)
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003388:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	492c      	ldr	r1, [pc, #176]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003396:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	4928      	ldr	r1, [pc, #160]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033b0:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4922      	ldr	r1, [pc, #136]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033be:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	491e      	ldr	r1, [pc, #120]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033d8:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4918      	ldr	r1, [pc, #96]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4914      	ldr	r1, [pc, #80]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d021      	beq.n	8003444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	490e      	ldr	r1, [pc, #56]	@ (8003440 <HAL_GPIO_Init+0x2d0>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e021      	b.n	8003452 <HAL_GPIO_Init+0x2e2>
 800340e:	bf00      	nop
 8003410:	10320000 	.word	0x10320000
 8003414:	10310000 	.word	0x10310000
 8003418:	10220000 	.word	0x10220000
 800341c:	10210000 	.word	0x10210000
 8003420:	10120000 	.word	0x10120000
 8003424:	10110000 	.word	0x10110000
 8003428:	40021000 	.word	0x40021000
 800342c:	40010000 	.word	0x40010000
 8003430:	40010800 	.word	0x40010800
 8003434:	40010c00 	.word	0x40010c00
 8003438:	40011000 	.word	0x40011000
 800343c:	40011400 	.word	0x40011400
 8003440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003444:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <HAL_GPIO_Init+0x304>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	43db      	mvns	r3, r3
 800344c:	4909      	ldr	r1, [pc, #36]	@ (8003474 <HAL_GPIO_Init+0x304>)
 800344e:	4013      	ands	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	3301      	adds	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	f47f ae8e 	bne.w	8003184 <HAL_GPIO_Init+0x14>
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	372c      	adds	r7, #44	@ 0x2c
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr
 8003474:	40010400 	.word	0x40010400

08003478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
 8003484:	4613      	mov	r3, r2
 8003486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003488:	787b      	ldrb	r3, [r7, #1]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003494:	e003      	b.n	800349e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	041a      	lsls	r2, r3, #16
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e272      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8087 	beq.w	80035d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c8:	4b92      	ldr	r3, [pc, #584]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d00c      	beq.n	80034ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d112      	bne.n	8003506 <HAL_RCC_OscConfig+0x5e>
 80034e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d10b      	bne.n	8003506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ee:	4b89      	ldr	r3, [pc, #548]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d06c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x12c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d168      	bne.n	80035d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e24c      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x76>
 8003510:	4b80      	ldr	r3, [pc, #512]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a7f      	ldr	r2, [pc, #508]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e02e      	b.n	800357c <HAL_RCC_OscConfig+0xd4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x98>
 8003526:	4b7b      	ldr	r3, [pc, #492]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7a      	ldr	r2, [pc, #488]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b78      	ldr	r3, [pc, #480]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a77      	ldr	r2, [pc, #476]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xd4>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0xbc>
 800354a:	4b72      	ldr	r3, [pc, #456]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a71      	ldr	r2, [pc, #452]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6e      	ldr	r2, [pc, #440]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xd4>
 8003564:	4b6b      	ldr	r3, [pc, #428]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6a      	ldr	r2, [pc, #424]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b68      	ldr	r3, [pc, #416]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a67      	ldr	r2, [pc, #412]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe ff60 	bl	8002448 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe ff5c 	bl	8002448 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e200      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b5d      	ldr	r3, [pc, #372]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xe4>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe ff4c 	bl	8002448 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe ff48 	bl	8002448 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1ec      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x10c>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ee:	4b49      	ldr	r3, [pc, #292]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x18c>
 80035fa:	4b46      	ldr	r3, [pc, #280]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b43      	ldr	r3, [pc, #268]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x176>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1c0      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4939      	ldr	r1, [pc, #228]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e03a      	b.n	80036aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe ff01 	bl	8002448 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364a:	f7fe fefd 	bl	8002448 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1a1      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b2a      	ldr	r3, [pc, #168]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4927      	ldr	r1, [pc, #156]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367e:	4b26      	ldr	r3, [pc, #152]	@ (8003718 <HAL_RCC_OscConfig+0x270>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fee0 	bl	8002448 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe fedc 	bl	8002448 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e180      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03a      	beq.n	800372c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d019      	beq.n	80036f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b17      	ldr	r3, [pc, #92]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7fe fec0 	bl	8002448 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe febc 	bl	8002448 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e160      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b0d      	ldr	r3, [pc, #52]	@ (8003714 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ea:	2001      	movs	r0, #1
 80036ec:	f000 fa9c 	bl	8003c28 <RCC_Delay>
 80036f0:	e01c      	b.n	800372c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <HAL_RCC_OscConfig+0x274>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f8:	f7fe fea6 	bl	8002448 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fe:	e00f      	b.n	8003720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003700:	f7fe fea2 	bl	8002448 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d908      	bls.n	8003720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e146      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	42420000 	.word	0x42420000
 800371c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	4b92      	ldr	r3, [pc, #584]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e9      	bne.n	8003700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80a6 	beq.w	8003886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373e:	4b8b      	ldr	r3, [pc, #556]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4a87      	ldr	r2, [pc, #540]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003754:	61d3      	str	r3, [r2, #28]
 8003756:	4b85      	ldr	r3, [pc, #532]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003762:	2301      	movs	r3, #1
 8003764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003766:	4b82      	ldr	r3, [pc, #520]	@ (8003970 <HAL_RCC_OscConfig+0x4c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003772:	4b7f      	ldr	r3, [pc, #508]	@ (8003970 <HAL_RCC_OscConfig+0x4c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a7e      	ldr	r2, [pc, #504]	@ (8003970 <HAL_RCC_OscConfig+0x4c8>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fe fe63 	bl	8002448 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fe fe5f 	bl	8002448 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	@ 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e103      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b75      	ldr	r3, [pc, #468]	@ (8003970 <HAL_RCC_OscConfig+0x4c8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x312>
 80037ac:	4b6f      	ldr	r3, [pc, #444]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a6e      	ldr	r2, [pc, #440]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	e02d      	b.n	8003816 <HAL_RCC_OscConfig+0x36e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x334>
 80037c2:	4b6a      	ldr	r3, [pc, #424]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4a69      	ldr	r2, [pc, #420]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6213      	str	r3, [r2, #32]
 80037ce:	4b67      	ldr	r3, [pc, #412]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a66      	ldr	r2, [pc, #408]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	e01c      	b.n	8003816 <HAL_RCC_OscConfig+0x36e>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0x356>
 80037e4:	4b61      	ldr	r3, [pc, #388]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4a60      	ldr	r2, [pc, #384]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	6213      	str	r3, [r2, #32]
 80037f0:	4b5e      	ldr	r3, [pc, #376]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a5d      	ldr	r2, [pc, #372]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0x36e>
 80037fe:	4b5b      	ldr	r3, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4a5a      	ldr	r2, [pc, #360]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6213      	str	r3, [r2, #32]
 800380a:	4b58      	ldr	r3, [pc, #352]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a57      	ldr	r2, [pc, #348]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d015      	beq.n	800384a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fe fe13 	bl	8002448 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fe0f 	bl	8002448 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0b1      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCC_OscConfig+0x37e>
 8003848:	e014      	b.n	8003874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe fdfd 	bl	8002448 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fdf9 	bl	8002448 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e09b      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003868:	4b40      	ldr	r3, [pc, #256]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ee      	bne.n	8003852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b3c      	ldr	r3, [pc, #240]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4a3b      	ldr	r2, [pc, #236]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8087 	beq.w	800399e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003890:	4b36      	ldr	r3, [pc, #216]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d061      	beq.n	8003960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d146      	bne.n	8003932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a4:	4b33      	ldr	r3, [pc, #204]	@ (8003974 <HAL_RCC_OscConfig+0x4cc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe fdcd 	bl	8002448 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe fdc9 	bl	8002448 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e06d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c4:	4b29      	ldr	r3, [pc, #164]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d8:	d108      	bne.n	80038ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038da:	4b24      	ldr	r3, [pc, #144]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4921      	ldr	r1, [pc, #132]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ec:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a19      	ldr	r1, [r3, #32]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	430b      	orrs	r3, r1
 80038fe:	491b      	ldr	r1, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fd9d 	bl	8002448 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003912:	f7fe fd99 	bl	8002448 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x46a>
 8003930:	e035      	b.n	800399e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fd86 	bl	8002448 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fd82 	bl	8002448 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e026      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCC_OscConfig+0x4c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x498>
 800395e:	e01e      	b.n	800399e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e019      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
 8003974:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_OscConfig+0x500>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	429a      	cmp	r2, r3
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d0      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 0207 	bic.w	r2, r3, #7
 80039d6:	4965      	ldr	r1, [pc, #404]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b63      	ldr	r3, [pc, #396]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b59      	ldr	r3, [pc, #356]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a20:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a52      	ldr	r2, [pc, #328]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	494d      	ldr	r1, [pc, #308]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d040      	beq.n	8003acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b47      	ldr	r3, [pc, #284]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e073      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b39      	ldr	r3, [pc, #228]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4936      	ldr	r1, [pc, #216]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a9c:	f7fe fcd4 	bl	8002448 <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe fcd0 	bl	8002448 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e053      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b2d      	ldr	r3, [pc, #180]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003acc:	4b27      	ldr	r3, [pc, #156]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d210      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b24      	ldr	r3, [pc, #144]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0207 	bic.w	r2, r3, #7
 8003ae2:	4922      	ldr	r1, [pc, #136]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e032      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b19      	ldr	r3, [pc, #100]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4916      	ldr	r1, [pc, #88]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490e      	ldr	r1, [pc, #56]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3a:	f000 f821 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490a      	ldr	r1, [pc, #40]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a09      	ldr	r2, [pc, #36]	@ (8003b78 <HAL_RCC_ClockConfig+0x1cc>)
 8003b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b56:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_RCC_ClockConfig+0x1d0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fc32 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	0800443c 	.word	0x0800443c
 8003b78:	20000128 	.word	0x20000128
 8003b7c:	2000012c 	.word	0x2000012c

08003b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003bae:	e027      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb2:	613b      	str	r3, [r7, #16]
      break;
 8003bb4:	e027      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	0c9b      	lsrs	r3, r3, #18
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a17      	ldr	r2, [pc, #92]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0c5b      	lsrs	r3, r3, #17
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bda:	5cd3      	ldrb	r3, [r2, r3]
 8003bdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003be2:	fb03 f202 	mul.w	r2, r3, r2
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e004      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bf4:	fb02 f303 	mul.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	613b      	str	r3, [r7, #16]
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c02:	613b      	str	r3, [r7, #16]
      break;
 8003c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c06:	693b      	ldr	r3, [r7, #16]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40021000 	.word	0x40021000
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	0800444c 	.word	0x0800444c
 8003c20:	0800445c 	.word	0x0800445c
 8003c24:	003d0900 	.word	0x003d0900

08003c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <RCC_Delay+0x34>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <RCC_Delay+0x38>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0a5b      	lsrs	r3, r3, #9
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c44:	bf00      	nop
  }
  while (Delay --);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f9      	bne.n	8003c44 <RCC_Delay+0x1c>
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000128 	.word	0x20000128
 8003c60:	10624dd3 	.word	0x10624dd3

08003c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e041      	b.n	8003cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fb40 	bl	8002310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 f8f4 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_ConfigClockSource+0x1c>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e0b4      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x186>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	d03e      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xd4>
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	f200 8087 	bhi.w	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d64:	f000 8086 	beq.w	8003e74 <HAL_TIM_ConfigClockSource+0x172>
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6c:	d87f      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d6e:	2b70      	cmp	r3, #112	@ 0x70
 8003d70:	d01a      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0xa6>
 8003d72:	2b70      	cmp	r3, #112	@ 0x70
 8003d74:	d87b      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d76:	2b60      	cmp	r3, #96	@ 0x60
 8003d78:	d050      	beq.n	8003e1c <HAL_TIM_ConfigClockSource+0x11a>
 8003d7a:	2b60      	cmp	r3, #96	@ 0x60
 8003d7c:	d877      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d7e:	2b50      	cmp	r3, #80	@ 0x50
 8003d80:	d03c      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xfa>
 8003d82:	2b50      	cmp	r3, #80	@ 0x50
 8003d84:	d873      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d058      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x13a>
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d86f      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d8e:	2b30      	cmp	r3, #48	@ 0x30
 8003d90:	d064      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	d86b      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d060      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d867      	bhi.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d05c      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d05a      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x15a>
 8003da6:	e062      	b.n	8003e6e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	f000 f943 	bl	8004042 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
      break;
 8003dd4:	e04f      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de6:	f000 f92c 	bl	8004042 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e03c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f000 f8a3 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2150      	movs	r1, #80	@ 0x50
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f8fa 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003e1a:	e02c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f000 f8c1 	bl	8003fb0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2160      	movs	r1, #96	@ 0x60
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f8ea 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003e3a:	e01c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f000 f883 	bl	8003f54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2140      	movs	r1, #64	@ 0x40
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f8da 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e00c      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 f8d1 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e003      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
      break;
 8003e72:	e000      	b.n	8003e76 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a29      	ldr	r2, [pc, #164]	@ (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x30>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	@ (8003f4c <TIM_Base_SetConfig+0xbc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a18      	ldr	r2, [pc, #96]	@ (8003f50 <TIM_Base_SetConfig+0xc0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <TIM_Base_SetConfig+0xb8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800

08003f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 030a 	bic.w	r3, r3, #10
 8003f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	031b      	lsls	r3, r3, #12
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800405c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	431a      	orrs	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	609a      	str	r2, [r3, #8]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e046      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e4:	d009      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a10      	ldr	r2, [pc, #64]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <memset>:
 800413c:	4603      	mov	r3, r0
 800413e:	4402      	add	r2, r0
 8004140:	4293      	cmp	r3, r2
 8004142:	d100      	bne.n	8004146 <memset+0xa>
 8004144:	4770      	bx	lr
 8004146:	f803 1b01 	strb.w	r1, [r3], #1
 800414a:	e7f9      	b.n	8004140 <memset+0x4>

0800414c <__libc_init_array>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	2600      	movs	r6, #0
 8004150:	4d0c      	ldr	r5, [pc, #48]	@ (8004184 <__libc_init_array+0x38>)
 8004152:	4c0d      	ldr	r4, [pc, #52]	@ (8004188 <__libc_init_array+0x3c>)
 8004154:	1b64      	subs	r4, r4, r5
 8004156:	10a4      	asrs	r4, r4, #2
 8004158:	42a6      	cmp	r6, r4
 800415a:	d109      	bne.n	8004170 <__libc_init_array+0x24>
 800415c:	f000 f86e 	bl	800423c <_init>
 8004160:	2600      	movs	r6, #0
 8004162:	4d0a      	ldr	r5, [pc, #40]	@ (800418c <__libc_init_array+0x40>)
 8004164:	4c0a      	ldr	r4, [pc, #40]	@ (8004190 <__libc_init_array+0x44>)
 8004166:	1b64      	subs	r4, r4, r5
 8004168:	10a4      	asrs	r4, r4, #2
 800416a:	42a6      	cmp	r6, r4
 800416c:	d105      	bne.n	800417a <__libc_init_array+0x2e>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	f855 3b04 	ldr.w	r3, [r5], #4
 8004174:	4798      	blx	r3
 8004176:	3601      	adds	r6, #1
 8004178:	e7ee      	b.n	8004158 <__libc_init_array+0xc>
 800417a:	f855 3b04 	ldr.w	r3, [r5], #4
 800417e:	4798      	blx	r3
 8004180:	3601      	adds	r6, #1
 8004182:	e7f2      	b.n	800416a <__libc_init_array+0x1e>
 8004184:	08004460 	.word	0x08004460
 8004188:	08004460 	.word	0x08004460
 800418c:	08004460 	.word	0x08004460
 8004190:	08004464 	.word	0x08004464

08004194 <memcpy>:
 8004194:	440a      	add	r2, r1
 8004196:	4291      	cmp	r1, r2
 8004198:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800419c:	d100      	bne.n	80041a0 <memcpy+0xc>
 800419e:	4770      	bx	lr
 80041a0:	b510      	push	{r4, lr}
 80041a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a6:	4291      	cmp	r1, r2
 80041a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ac:	d1f9      	bne.n	80041a2 <memcpy+0xe>
 80041ae:	bd10      	pop	{r4, pc}

080041b0 <round>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80041b6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80041ba:	2a13      	cmp	r2, #19
 80041bc:	4604      	mov	r4, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	460b      	mov	r3, r1
 80041c2:	dc1a      	bgt.n	80041fa <round+0x4a>
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	da0b      	bge.n	80041e0 <round+0x30>
 80041c8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80041cc:	3201      	adds	r2, #1
 80041ce:	bf04      	itt	eq
 80041d0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80041d4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80041d8:	2200      	movs	r2, #0
 80041da:	461d      	mov	r5, r3
 80041dc:	4614      	mov	r4, r2
 80041de:	e016      	b.n	800420e <round+0x5e>
 80041e0:	4815      	ldr	r0, [pc, #84]	@ (8004238 <round+0x88>)
 80041e2:	4110      	asrs	r0, r2
 80041e4:	4001      	ands	r1, r0
 80041e6:	4321      	orrs	r1, r4
 80041e8:	d011      	beq.n	800420e <round+0x5e>
 80041ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80041ee:	fa41 f202 	asr.w	r2, r1, r2
 80041f2:	4413      	add	r3, r2
 80041f4:	ea23 0300 	bic.w	r3, r3, r0
 80041f8:	e7ee      	b.n	80041d8 <round+0x28>
 80041fa:	2a33      	cmp	r2, #51	@ 0x33
 80041fc:	dd0a      	ble.n	8004214 <round+0x64>
 80041fe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004202:	d104      	bne.n	800420e <round+0x5e>
 8004204:	4602      	mov	r2, r0
 8004206:	f7fc f85d 	bl	80002c4 <__adddf3>
 800420a:	4604      	mov	r4, r0
 800420c:	460d      	mov	r5, r1
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004218:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800421c:	40f8      	lsrs	r0, r7
 800421e:	4220      	tst	r0, r4
 8004220:	d0f5      	beq.n	800420e <round+0x5e>
 8004222:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004226:	2201      	movs	r2, #1
 8004228:	408a      	lsls	r2, r1
 800422a:	1912      	adds	r2, r2, r4
 800422c:	bf28      	it	cs
 800422e:	3301      	addcs	r3, #1
 8004230:	ea22 0200 	bic.w	r2, r2, r0
 8004234:	e7d1      	b.n	80041da <round+0x2a>
 8004236:	bf00      	nop
 8004238:	000fffff 	.word	0x000fffff

0800423c <_init>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr

08004248 <_fini>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr
