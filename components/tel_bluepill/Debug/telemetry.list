
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006aa8  08006aa8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006aa8  08006aa8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  20000074  08006b24  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002448  08006b24  00022448  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001934f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a55  00000000  00000000  000393ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e59  00000000  00000000  0003f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001733a  00000000  00000000  00059599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009602a  00000000  00000000  000708d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001068fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  00106950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080068f0 	.word	0x080068f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080068f0 	.word	0x080068f0

08000150 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000154:	4b23      	ldr	r3, [pc, #140]	; (80001e4 <CanFilterSetup+0x94>)
 8000156:	f24a 0220 	movw	r2, #40992	; 0xa020
 800015a:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 800015c:	4b21      	ldr	r3, [pc, #132]	; (80001e4 <CanFilterSetup+0x94>)
 800015e:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000162:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000164:	4b1f      	ldr	r3, [pc, #124]	; (80001e4 <CanFilterSetup+0x94>)
 8000166:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 800016a:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 800016c:	4b1d      	ldr	r3, [pc, #116]	; (80001e4 <CanFilterSetup+0x94>)
 800016e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000172:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000174:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <CanFilterSetup+0x94>)
 8000176:	2200      	movs	r2, #0
 8000178:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 800017a:	4b1a      	ldr	r3, [pc, #104]	; (80001e4 <CanFilterSetup+0x94>)
 800017c:	2200      	movs	r2, #0
 800017e:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000180:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <CanFilterSetup+0x94>)
 8000182:	2200      	movs	r2, #0
 8000184:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000186:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <CanFilterSetup+0x94>)
 8000188:	2200      	movs	r2, #0
 800018a:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 800018c:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <CanFilterSetup+0x94>)
 800018e:	2201      	movs	r2, #1
 8000190:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 8000192:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <CanFilterSetup+0x98>)
 8000194:	f24a 0240 	movw	r2, #41024	; 0xa040
 8000198:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <CanFilterSetup+0x98>)
 800019c:	f248 0220 	movw	r2, #32800	; 0x8020
 80001a0:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 80001a2:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <CanFilterSetup+0x98>)
 80001a4:	f248 0220 	movw	r2, #32800	; 0x8020
 80001a8:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 80001aa:	4b0f      	ldr	r3, [pc, #60]	; (80001e8 <CanFilterSetup+0x98>)
 80001ac:	f248 0220 	movw	r2, #32800	; 0x8020
 80001b0:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001b2:	4b0d      	ldr	r3, [pc, #52]	; (80001e8 <CanFilterSetup+0x98>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <CanFilterSetup+0x98>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 80001be:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <CanFilterSetup+0x98>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <CanFilterSetup+0x98>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <CanFilterSetup+0x98>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 80001d0:	4904      	ldr	r1, [pc, #16]	; (80001e4 <CanFilterSetup+0x94>)
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <CanFilterSetup+0x9c>)
 80001d4:	f000 fd5b 	bl	8000c8e <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 80001d8:	4903      	ldr	r1, [pc, #12]	; (80001e8 <CanFilterSetup+0x98>)
 80001da:	4804      	ldr	r0, [pc, #16]	; (80001ec <CanFilterSetup+0x9c>)
 80001dc:	f000 fd57 	bl	8000c8e <HAL_CAN_ConfigFilter>

}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000110 	.word	0x20000110
 80001e8:	20000138 	.word	0x20000138
 80001ec:	20000090 	.word	0x20000090

080001f0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <MX_CAN_Init+0x64>)
 80001f6:	4a18      	ldr	r2, [pc, #96]	; (8000258 <MX_CAN_Init+0x68>)
 80001f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <MX_CAN_Init+0x64>)
 80001fc:	2204      	movs	r2, #4
 80001fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000200:	4b14      	ldr	r3, [pc, #80]	; (8000254 <MX_CAN_Init+0x64>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000206:	4b13      	ldr	r3, [pc, #76]	; (8000254 <MX_CAN_Init+0x64>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_CAN_Init+0x64>)
 800020e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000212:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <MX_CAN_Init+0x64>)
 8000216:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800021a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800021c:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <MX_CAN_Init+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_CAN_Init+0x64>)
 8000224:	2200      	movs	r2, #0
 8000226:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <MX_CAN_Init+0x64>)
 800022a:	2200      	movs	r2, #0
 800022c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_CAN_Init+0x64>)
 8000230:	2200      	movs	r2, #0
 8000232:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <MX_CAN_Init+0x64>)
 8000242:	f000 fc29 	bl	8000a98 <HAL_CAN_Init>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800024c:	f000 fa80 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000090 	.word	0x20000090
 8000258:	40006400 	.word	0x40006400

0800025c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b08a      	sub	sp, #40	; 0x28
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a29      	ldr	r2, [pc, #164]	; (800031c <HAL_CAN_MspInit+0xc0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d14b      	bne.n	8000314 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4a27      	ldr	r2, [pc, #156]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 8000282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000286:	61d3      	str	r3, [r2, #28]
 8000288:	4b25      	ldr	r3, [pc, #148]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 800028a:	69db      	ldr	r3, [r3, #28]
 800028c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a21      	ldr	r2, [pc, #132]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <HAL_CAN_MspInit+0xc4>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	4619      	mov	r1, r3
 80002c0:	4818      	ldr	r0, [pc, #96]	; (8000324 <HAL_CAN_MspInit+0xc8>)
 80002c2:	f001 fb27 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80002c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002cc:	2302      	movs	r3, #2
 80002ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002d0:	2303      	movs	r3, #3
 80002d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	4619      	mov	r1, r3
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <HAL_CAN_MspInit+0xc8>)
 80002dc:	f001 fb1a 	bl	8001914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <HAL_CAN_MspInit+0xcc>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
 80002e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
 80002ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
 80002f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fc:	627b      	str	r3, [r7, #36]	; 0x24
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <HAL_CAN_MspInit+0xcc>)
 8000300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000302:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000304:	2200      	movs	r2, #0
 8000306:	2105      	movs	r1, #5
 8000308:	2014      	movs	r0, #20
 800030a:	f001 fa28 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800030e:	2014      	movs	r0, #20
 8000310:	f001 fa41 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000314:	bf00      	nop
 8000316:	3728      	adds	r7, #40	; 0x28
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40006400 	.word	0x40006400
 8000320:	40021000 	.word	0x40021000
 8000324:	40010c00 	.word	0x40010c00
 8000328:	40010000 	.word	0x40010000

0800032c <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_CAN_DeactivateNotification(hcan,
 8000334:	2102      	movs	r1, #2
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 ff13 	bl	8001162 <HAL_CAN_DeactivateNotification>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]
    CAN_IT_RX_FIFO0_MSG_PENDING);
    assert_param(status == HAL_OK);

    // osThreadFlagsClear(canReadMessagesTaskHandle);
    osThreadFlagsSet(readCANTaskHandle, CAN_READY);
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2101      	movs	r1, #1
 8000346:	4618      	mov	r0, r3
 8000348:	f003 f948 	bl	80035dc <osThreadFlagsSet>
}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200000b8 	.word	0x200000b8

08000358 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  canMessageQueueHandle = osMessageQueueNew(CAN_MESSAGE_QUEUE_SIZE, sizeof(CAN_msg_t), &canMessageQueue_attributes);
 800035c:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <MX_FREERTOS_Init+0x38>)
 800035e:	2124      	movs	r1, #36	; 0x24
 8000360:	200a      	movs	r0, #10
 8000362:	f003 fa2f 	bl	80037c4 <osMessageQueueNew>
 8000366:	4603      	mov	r3, r0
 8000368:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <MX_FREERTOS_Init+0x3c>)
 800036a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // kernelLEDTaskHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDTask_attributes);
  
  readCANTaskHandle = osThreadNew(readCANTask, NULL, &readCANTask_attributes);
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <MX_FREERTOS_Init+0x40>)
 800036e:	2100      	movs	r1, #0
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_FREERTOS_Init+0x44>)
 8000372:	f003 f857 	bl	8003424 <osThreadNew>
 8000376:	4603      	mov	r3, r0
 8000378:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <MX_FREERTOS_Init+0x48>)
 800037a:	6013      	str	r3, [r2, #0]
  transmitMessageTaskHandle = osThreadNew(transmitMessageTask, NULL, &transmitMessageTask_attributes);
 800037c:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <MX_FREERTOS_Init+0x4c>)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_FREERTOS_Init+0x50>)
 8000382:	f003 f84f 	bl	8003424 <osThreadNew>
 8000386:	4603      	mov	r3, r0
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <MX_FREERTOS_Init+0x54>)
 800038a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	08006a18 	.word	0x08006a18
 8000394:	200000c0 	.word	0x200000c0
 8000398:	080069d0 	.word	0x080069d0
 800039c:	080003b1 	.word	0x080003b1
 80003a0:	200000b8 	.word	0x200000b8
 80003a4:	080069f4 	.word	0x080069f4
 80003a8:	0800045d 	.word	0x0800045d
 80003ac:	200000bc 	.word	0x200000bc

080003b0 <readCANTask>:

    osDelay(KERNEL_LED_DELAY);
  }
}

__NO_RETURN void readCANTask(void *argument) {
 80003b0:	b5b0      	push	{r4, r5, r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  static HAL_StatusTypeDef rx_status;
  static CAN_msg_t current_can_message;

  while (1) {
    // wait for thread flags to be set
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 80003b8:	f04f 32ff 	mov.w	r2, #4294967295
 80003bc:	2101      	movs	r1, #1
 80003be:	2001      	movs	r0, #1
 80003c0:	f003 f96c 	bl	800369c <osThreadFlagsWait>

    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 80003c4:	2100      	movs	r1, #0
 80003c6:	481e      	ldr	r0, [pc, #120]	; (8000440 <readCANTask+0x90>)
 80003c8:	f000 fe7f 	bl	80010ca <HAL_CAN_GetRxFifoFillLevel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d030      	beq.n	8000434 <readCANTask+0x84>
      // there are multiple CAN IDs being passed through the filter, pull out the current message
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <readCANTask+0x94>)
 80003d4:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <readCANTask+0x98>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4819      	ldr	r0, [pc, #100]	; (8000440 <readCANTask+0x90>)
 80003da:	f000 fd65 	bl	8000ea8 <HAL_CAN_GetRxMessage>
 80003de:	4603      	mov	r3, r0
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <readCANTask+0x9c>)
 80003e4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 80003e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ea:	4819      	ldr	r0, [pc, #100]	; (8000450 <readCANTask+0xa0>)
 80003ec:	f001 fc2e 	bl	8001c4c <HAL_GPIO_TogglePin>

      // package into CAN_msg_t
      current_can_message.header = can_rx_header;
 80003f0:	4a18      	ldr	r2, [pc, #96]	; (8000454 <readCANTask+0xa4>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <readCANTask+0x98>)
 80003f4:	4614      	mov	r4, r2
 80003f6:	461d      	mov	r5, r3
 80003f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      for (uint8_t i=0; i<8; i++) {
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	e00a      	b.n	8000420 <readCANTask+0x70>
        current_can_message.data[i] = current_can_data[i];
 800040a:	7bfa      	ldrb	r2, [r7, #15]
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <readCANTask+0x94>)
 8000410:	5c89      	ldrb	r1, [r1, r2]
 8000412:	4a10      	ldr	r2, [pc, #64]	; (8000454 <readCANTask+0xa4>)
 8000414:	4413      	add	r3, r2
 8000416:	460a      	mov	r2, r1
 8000418:	771a      	strb	r2, [r3, #28]
      for (uint8_t i=0; i<8; i++) {
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	3301      	adds	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	2b07      	cmp	r3, #7
 8000424:	d9f1      	bls.n	800040a <readCANTask+0x5a>
      }

      // priority=0, timeout=0
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <readCANTask+0xa8>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	2200      	movs	r2, #0
 800042e:	4909      	ldr	r1, [pc, #36]	; (8000454 <readCANTask+0xa4>)
 8000430:	f003 fa4e 	bl	80038d0 <osMessageQueuePut>
    }

    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000434:	2102      	movs	r1, #2
 8000436:	4802      	ldr	r0, [pc, #8]	; (8000440 <readCANTask+0x90>)
 8000438:	f000 fe6e 	bl	8001118 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800043c:	e7bc      	b.n	80003b8 <readCANTask+0x8>
 800043e:	bf00      	nop
 8000440:	20000090 	.word	0x20000090
 8000444:	20000180 	.word	0x20000180
 8000448:	20000160 	.word	0x20000160
 800044c:	200000c4 	.word	0x200000c4
 8000450:	40011000 	.word	0x40011000
 8000454:	200000c8 	.word	0x200000c8
 8000458:	200000c0 	.word	0x200000c0

0800045c <transmitMessageTask>:

  }
}

__NO_RETURN void transmitMessageTask(void *argument) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  static CAN_msg_t can_message;
  osStatus_t queue_status;

  while (1) {
    // retrieve CAN message from queue
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 8000464:	4b31      	ldr	r3, [pc, #196]	; (800052c <transmitMessageTask+0xd0>)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f04f 33ff 	mov.w	r3, #4294967295
 800046c:	2200      	movs	r2, #0
 800046e:	4930      	ldr	r1, [pc, #192]	; (8000530 <transmitMessageTask+0xd4>)
 8000470:	f003 faa2 	bl	80039b8 <osMessageQueueGet>
 8000474:	61b8      	str	r0, [r7, #24]

    if (queue_status != osOK) {
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <transmitMessageTask+0x24>
        osThreadYield();
 800047c:	f003 f87c 	bl	8003578 <osThreadYield>
    }

    uint8_t c[1] = "D";
 8000480:	2344      	movs	r3, #68	; 0x44
 8000482:	753b      	strb	r3, [r7, #20]

    // TIMESTAMP: 8 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	77fb      	strb	r3, [r7, #31]
 8000488:	e00a      	b.n	80004a0 <transmitMessageTask+0x44>
      // send 'D' as placeholder
      HAL_UART_Transmit(&huart3, c, sizeof(c), 1000);
 800048a:	f107 0114 	add.w	r1, r7, #20
 800048e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000492:	2201      	movs	r2, #1
 8000494:	4827      	ldr	r0, [pc, #156]	; (8000534 <transmitMessageTask+0xd8>)
 8000496:	f002 fad4 	bl	8002a42 <HAL_UART_Transmit>
    for (uint8_t i=0; i<8; i++) {
 800049a:	7ffb      	ldrb	r3, [r7, #31]
 800049c:	3301      	adds	r3, #1
 800049e:	77fb      	strb	r3, [r7, #31]
 80004a0:	7ffb      	ldrb	r3, [r7, #31]
 80004a2:	2b07      	cmp	r3, #7
 80004a4:	d9f1      	bls.n	800048a <transmitMessageTask+0x2e>
    }

    // CAN ID: 4 ASCII characters
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 80004a6:	4b22      	ldr	r3, [pc, #136]	; (8000530 <transmitMessageTask+0xd4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	0a1b      	lsrs	r3, r3, #8
 80004ac:	75fb      	strb	r3, [r7, #23]
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <transmitMessageTask+0xd4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	75bb      	strb	r3, [r7, #22]

    sendChar(id_h);
 80004b4:	7dfb      	ldrb	r3, [r7, #23]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f840 	bl	800053c <sendChar>
    sendChar(id_l);
 80004bc:	7dbb      	ldrb	r3, [r7, #22]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f83c 	bl	800053c <sendChar>

    // CAN DATA: 16 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 80004c4:	2300      	movs	r3, #0
 80004c6:	77bb      	strb	r3, [r7, #30]
 80004c8:	e009      	b.n	80004de <transmitMessageTask+0x82>
      // can_stream[2+i] = 0xFFUL & (can_message.data[i]);
      sendChar(can_message.data[i]);
 80004ca:	7fbb      	ldrb	r3, [r7, #30]
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <transmitMessageTask+0xd4>)
 80004ce:	4413      	add	r3, r2
 80004d0:	7f1b      	ldrb	r3, [r3, #28]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f832 	bl	800053c <sendChar>
    for (uint8_t i=0; i<8; i++) {
 80004d8:	7fbb      	ldrb	r3, [r7, #30]
 80004da:	3301      	adds	r3, #1
 80004dc:	77bb      	strb	r3, [r7, #30]
 80004de:	7fbb      	ldrb	r3, [r7, #30]
 80004e0:	2b07      	cmp	r3, #7
 80004e2:	d9f2      	bls.n	80004ca <transmitMessageTask+0x6e>
    }

    // CAN DATA LENGTH: 1 ASCII character
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <transmitMessageTask+0xd4>)
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	f003 030f 	and.w	r3, r3, #15
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <transmitMessageTask+0xdc>)
 80004ee:	5cd3      	ldrb	r3, [r2, r3]
 80004f0:	74fb      	strb	r3, [r7, #19]
    HAL_UART_Transmit(&huart3, &length, 1, 1000);
 80004f2:	f107 0113 	add.w	r1, r7, #19
 80004f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fa:	2201      	movs	r2, #1
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <transmitMessageTask+0xd8>)
 80004fe:	f002 faa0 	bl	8002a42 <HAL_UART_Transmit>

    // NEW LINE: 1 ASCII character
    uint8_t newline[1] = "\n";
 8000502:	230a      	movs	r3, #10
 8000504:	743b      	strb	r3, [r7, #16]
    HAL_UART_Transmit(&huart3, newline, sizeof(newline), 1000);
 8000506:	f107 0110 	add.w	r1, r7, #16
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	2201      	movs	r2, #1
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <transmitMessageTask+0xd8>)
 8000512:	f002 fa96 	bl	8002a42 <HAL_UART_Transmit>

    // CARRIAGE RETURN: 1 ASCII character
    uint8_t carriage[1] = "\r";
 8000516:	230d      	movs	r3, #13
 8000518:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart3, carriage, sizeof(carriage), 1000);
 800051a:	f107 010c 	add.w	r1, r7, #12
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	2201      	movs	r2, #1
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <transmitMessageTask+0xd8>)
 8000526:	f002 fa8c 	bl	8002a42 <HAL_UART_Transmit>
  while (1) {
 800052a:	e79b      	b.n	8000464 <transmitMessageTask+0x8>
 800052c:	200000c0 	.word	0x200000c0
 8000530:	200000ec 	.word	0x200000ec
 8000534:	200001d0 	.word	0x200001d0
 8000538:	08006968 	.word	0x08006968

0800053c <sendChar>:
    osThreadExit();
  }
}

void sendChar(char c)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_tx_status;

  //Convert to ASCII
  uint8_t c_H = "0123456789ABCDEF"[(c >> 4) & 0xFUL];
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	091b      	lsrs	r3, r3, #4
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f003 030f 	and.w	r3, r3, #15
 8000550:	4a10      	ldr	r2, [pc, #64]	; (8000594 <sendChar+0x58>)
 8000552:	5cd3      	ldrb	r3, [r2, r3]
 8000554:	73bb      	strb	r3, [r7, #14]
  uint8_t c_L = "0123456789ABCDEF"[ c & 0xFUL];
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 030f 	and.w	r3, r3, #15
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <sendChar+0x58>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	737b      	strb	r3, [r7, #13]

  uart_tx_status = HAL_UART_Transmit(&huart3, &c_H, 1, 1000);
 8000562:	f107 010e 	add.w	r1, r7, #14
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	2201      	movs	r2, #1
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <sendChar+0x5c>)
 800056e:	f002 fa68 	bl	8002a42 <HAL_UART_Transmit>
 8000572:	4603      	mov	r3, r0
 8000574:	73fb      	strb	r3, [r7, #15]
  uart_tx_status = HAL_UART_Transmit(&huart3, &c_L, 1, 1000);
 8000576:	f107 010d 	add.w	r1, r7, #13
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	2201      	movs	r2, #1
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <sendChar+0x5c>)
 8000582:	f002 fa5e 	bl	8002a42 <HAL_UART_Transmit>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08006968 	.word	0x08006968
 8000598:	200001d0 	.word	0x200001d0

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a23      	ldr	r2, [pc, #140]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0308 	and.w	r3, r3, #8
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_GPIO_Init+0xac>)
 8000618:	f001 fb00 	bl	8001c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0xac>)
 8000636:	f001 f96d 	bl	8001914 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40011000 	.word	0x40011000

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000652:	2003      	movs	r0, #3
 8000654:	f001 f878 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 f9ec 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f820 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff9c 	bl	800059c <MX_GPIO_Init>
  MX_CAN_Init();
 8000664:	f7ff fdc4 	bl	80001f0 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8000668:	f000 f940 	bl	80008ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // <----- CAN set-up ------>
  CanFilterSetup();
 800066c:	f7ff fd70 	bl	8000150 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8000670:	4809      	ldr	r0, [pc, #36]	; (8000698 <main+0x4c>)
 8000672:	f000 fbd5 	bl	8000e20 <HAL_CAN_Start>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <main+0x50>)
 800067c:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800067e:	2102      	movs	r1, #2
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <main+0x4c>)
 8000682:	f000 fd49 	bl	8001118 <HAL_CAN_ActivateNotification>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800068a:	f002 fe65 	bl	8003358 <osKernelInitialize>
  MX_FREERTOS_Init();
 800068e:	f7ff fe63 	bl	8000358 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000692:	f002 fe93 	bl	80033bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0x4a>
 8000698:	20000090 	.word	0x20000090
 800069c:	2000017c 	.word	0x2000017c

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b090      	sub	sp, #64	; 0x40
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2228      	movs	r2, #40	; 0x28
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 f858 	bl	8006764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0318 	add.w	r3, r7, #24
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fac9 	bl	8001c80 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006f4:	f000 f82c 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2102      	movs	r1, #2
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fd36 	bl	8002184 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800071e:	f000 f817 	bl	8000750 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3740      	adds	r7, #64	; 0x40
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073e:	f000 f98f 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40012c00 	.word	0x40012c00

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_MspInit+0x68>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_MspInit+0x68>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x68>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x68>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_MspInit+0x68>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x68>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 ffe0 	bl	800175e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x6c>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x6c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2019      	movs	r0, #25
 80007e2:	f000 ffbc 	bl	800175e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007e6:	2019      	movs	r0, #25
 80007e8:	f000 ffd5 	bl	8001796 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_InitTick+0x9c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_InitTick+0x9c>)
 80007f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_InitTick+0x9c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fe32 	bl	8002478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000814:	f001 fe1c 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 8000818:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <HAL_InitTick+0xa0>)
 800081e:	fba2 2303 	umull	r2, r3, r2, r3
 8000822:	0c9b      	lsrs	r3, r3, #18
 8000824:	3b01      	subs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_InitTick+0xa4>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <HAL_InitTick+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_InitTick+0xa4>)
 8000830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000834:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_InitTick+0xa4>)
 8000838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_InitTick+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_InitTick+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_InitTick+0xa4>)
 800084a:	f001 fe63 	bl	8002514 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <HAL_InitTick+0xa4>)
 8000856:	f001 feb5 	bl	80025c4 <HAL_TIM_Base_Start_IT>
 800085a:	4603      	mov	r3, r0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3730      	adds	r7, #48	; 0x30
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20000188 	.word	0x20000188
 8000874:	40012c00 	.word	0x40012c00

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
	...

080008a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008aa:	f000 fc80 	bl	80011ae <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000090 	.word	0x20000090

080008b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM1_UP_IRQHandler+0x10>)
 80008be:	f001 fed3 	bl	8002668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000188 	.word	0x20000188

080008cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <USART3_IRQHandler+0x10>)
 80008d2:	f002 f949 	bl	8002b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001d0 	.word	0x200001d0

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART3_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 80008f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART3_UART_Init+0x4c>)
 8000924:	f002 f840 	bl	80029a8 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f7ff ff0f 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001d0 	.word	0x200001d0
 800093c:	40004800 	.word	0x40004800

08000940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_UART_MspInit+0x9c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d139      	bne.n	80009d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 8000966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096a:	61d3      	str	r3, [r2, #28]
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	480f      	ldr	r0, [pc, #60]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 80009a6:	f000 ffb5 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 80009c0:	f000 ffa8 	bl	8001914 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2105      	movs	r1, #5
 80009c8:	2027      	movs	r0, #39	; 0x27
 80009ca:	f000 fec8 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009ce:	2027      	movs	r0, #39	; 0x27
 80009d0:	f000 fee1 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40004800 	.word	0x40004800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ff67 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f005 fe73 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fe19 	bl	800064c <main>
  bx lr
 8000a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a24:	08006ab0 	.word	0x08006ab0
  ldr r2, =_sbss
 8000a28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a2c:	20002448 	.word	0x20002448

08000a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC1_2_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x28>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 fe7f 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f7ff febe 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fe84 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000214 	.word	0x20000214

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000214 	.word	0x20000214

08000a98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e0ed      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fbd0 	bl	800025c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000acc:	f7ff ffda 	bl	8000a84 <HAL_GetTick>
 8000ad0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad2:	e012      	b.n	8000afa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad4:	f7ff ffd6 	bl	8000a84 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d90b      	bls.n	8000afa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2205      	movs	r2, #5
 8000af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0c5      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0e5      	beq.n	8000ad4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0202 	bic.w	r2, r2, #2
 8000b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff ffb4 	bl	8000a84 <HAL_GetTick>
 8000b1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1e:	e012      	b.n	8000b46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b20:	f7ff ffb0 	bl	8000a84 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d90b      	bls.n	8000b46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e09f      	b.n	8000c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e5      	bne.n	8000b20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7e1b      	ldrb	r3, [r3, #24]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d108      	bne.n	8000b6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	e007      	b.n	8000b7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7e5b      	ldrb	r3, [r3, #25]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d108      	bne.n	8000b98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e007      	b.n	8000ba8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7e9b      	ldrb	r3, [r3, #26]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e007      	b.n	8000bd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0220 	bic.w	r2, r2, #32
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7edb      	ldrb	r3, [r3, #27]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d108      	bne.n	8000bec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0210 	bic.w	r2, r2, #16
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0210 	orr.w	r2, r2, #16
 8000bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7f1b      	ldrb	r3, [r3, #28]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0208 	orr.w	r2, r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e007      	b.n	8000c26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0208 	bic.w	r2, r2, #8
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7f5b      	ldrb	r3, [r3, #29]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0204 	orr.w	r2, r2, #4
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f022 0204 	bic.w	r2, r2, #4
 8000c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	ea42 0103 	orr.w	r1, r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b087      	sub	sp, #28
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca6:	7cfb      	ldrb	r3, [r7, #19]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d003      	beq.n	8000cb4 <HAL_CAN_ConfigFilter+0x26>
 8000cac:	7cfb      	ldrb	r3, [r7, #19]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	f040 80aa 	bne.w	8000e08 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cba:	f043 0201 	orr.w	r2, r3, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	f003 031f 	and.w	r3, r3, #31
 8000ccc:	2201      	movs	r2, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d123      	bne.n	8000d36 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3248      	adds	r2, #72	; 0x48
 8000d16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2c:	6979      	ldr	r1, [r7, #20]
 8000d2e:	3348      	adds	r3, #72	; 0x48
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
 8000d34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d122      	bne.n	8000d84 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3248      	adds	r2, #72	; 0x48
 8000d64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d7a:	6979      	ldr	r1, [r7, #20]
 8000d7c:	3348      	adds	r3, #72	; 0x48
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d9e:	e007      	b.n	8000db0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dca:	e007      	b.n	8000ddc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d107      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dfa:	f023 0201 	bic.w	r2, r3, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e006      	b.n	8000e16 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
  }
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d12e      	bne.n	8000e92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2202      	movs	r2, #2
 8000e38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fe1a 	bl	8000a84 <HAL_GetTick>
 8000e50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e52:	e012      	b.n	8000e7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e54:	f7ff fe16 	bl	8000a84 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d90b      	bls.n	8000e7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2205      	movs	r2, #5
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e012      	b.n	8000ea0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e5      	bne.n	8000e54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e006      	b.n	8000ea0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
  }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ebc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d003      	beq.n	8000ecc <HAL_CAN_GetRxMessage+0x24>
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	f040 80f3 	bne.w	80010b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10e      	bne.n	8000ef0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d116      	bne.n	8000f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e0e7      	b.n	80010c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0d8      	b.n	80010c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	331b      	adds	r3, #27
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0204 	and.w	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10c      	bne.n	8000f46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	331b      	adds	r3, #27
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0d5b      	lsrs	r3, r3, #21
 8000f3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e00b      	b.n	8000f5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	331b      	adds	r3, #27
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	331b      	adds	r3, #27
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0202 	and.w	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	331b      	adds	r3, #27
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	4413      	add	r3, r2
 8000f80:	3304      	adds	r3, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 020f 	and.w	r2, r3, #15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	331b      	adds	r3, #27
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	3304      	adds	r3, #4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	331b      	adds	r3, #27
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4413      	add	r3, r2
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0c1b      	lsrs	r3, r3, #16
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	0a1a      	lsrs	r2, r3, #8
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0c1a      	lsrs	r2, r3, #16
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3302      	adds	r3, #2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0e1a      	lsrs	r2, r3, #24
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3303      	adds	r3, #3
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	3304      	adds	r3, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0a1a      	lsrs	r2, r3, #8
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3305      	adds	r3, #5
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4413      	add	r3, r2
 800105c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0c1a      	lsrs	r2, r3, #16
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3306      	adds	r3, #6
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0e1a      	lsrs	r2, r3, #24
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3307      	adds	r3, #7
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d108      	bne.n	800109e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	e007      	b.n	80010ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0220 	orr.w	r2, r2, #32
 80010ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e006      	b.n	80010c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d002      	beq.n	80010ec <HAL_CAN_GetRxFifoFillLevel+0x22>
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d10f      	bne.n	800110c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e005      	b.n	800110c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001128:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d002      	beq.n	8001136 <HAL_CAN_ActivateNotification+0x1e>
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d109      	bne.n	800114a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6959      	ldr	r1, [r3, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	430a      	orrs	r2, r1
 8001144:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e006      	b.n	8001158 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
  }
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d002      	beq.n	8001180 <HAL_CAN_DeactivateNotification+0x1e>
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d10a      	bne.n	8001196 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6959      	ldr	r1, [r3, #20]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	43da      	mvns	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e006      	b.n	80011a4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b08a      	sub	sp, #40	; 0x28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d07c      	beq.n	80012ee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d023      	beq.n	8001246 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f983 	bl	800151c <HAL_CAN_TxMailbox0CompleteCallback>
 8001216:	e016      	b.n	8001246 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	e00c      	b.n	8001246 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d004      	beq.n	8001240 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
 800123e:	e002      	b.n	8001246 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f986 	bl	8001552 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d024      	beq.n	800129a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f962 	bl	800152e <HAL_CAN_TxMailbox1CompleteCallback>
 800126a:	e016      	b.n	800129a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	e00c      	b.n	800129a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	e002      	b.n	800129a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f965 	bl	8001564 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f941 	bl	8001540 <HAL_CAN_TxMailbox2CompleteCallback>
 80012be:	e016      	b.n	80012ee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	e00c      	b.n	80012ee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	e002      	b.n	80012ee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f944 	bl	8001576 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00c      	beq.n	8001312 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001308:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2210      	movs	r2, #16
 8001310:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2208      	movs	r2, #8
 800132c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f92a 	bl	8001588 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7fe ffed 	bl	800032c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00c      	beq.n	8001376 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2210      	movs	r2, #16
 8001374:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2208      	movs	r2, #8
 8001390:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f90a 	bl	80015ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8f2 	bl	800159a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2210      	movs	r2, #16
 80013d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f8f3 	bl	80015be <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2208      	movs	r2, #8
 80013f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f8eb 	bl	80015d0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d07b      	beq.n	80014fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d072      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001468:	2b00      	cmp	r3, #0
 800146a:	d043      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03e      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800147c:	2b60      	cmp	r3, #96	; 0x60
 800147e:	d02b      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x32a>
 8001480:	2b60      	cmp	r3, #96	; 0x60
 8001482:	d82e      	bhi.n	80014e2 <HAL_CAN_IRQHandler+0x334>
 8001484:	2b50      	cmp	r3, #80	; 0x50
 8001486:	d022      	beq.n	80014ce <HAL_CAN_IRQHandler+0x320>
 8001488:	2b50      	cmp	r3, #80	; 0x50
 800148a:	d82a      	bhi.n	80014e2 <HAL_CAN_IRQHandler+0x334>
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d019      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x316>
 8001490:	2b40      	cmp	r3, #64	; 0x40
 8001492:	d826      	bhi.n	80014e2 <HAL_CAN_IRQHandler+0x334>
 8001494:	2b30      	cmp	r3, #48	; 0x30
 8001496:	d010      	beq.n	80014ba <HAL_CAN_IRQHandler+0x30c>
 8001498:	2b30      	cmp	r3, #48	; 0x30
 800149a:	d822      	bhi.n	80014e2 <HAL_CAN_IRQHandler+0x334>
 800149c:	2b10      	cmp	r3, #16
 800149e:	d002      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x2f8>
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d005      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014a4:	e01d      	b.n	80014e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ae:	e019      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b8:	e014      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f043 0320 	orr.w	r3, r3, #32
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c2:	e00f      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014cc:	e00a      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d6:	e005      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014e0:	e000      	b.n	80014e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80014e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2204      	movs	r2, #4
 80014fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f867 	bl	80015e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <__NVIC_EnableIRQ+0x34>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff4f 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff64 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ffb2 	bl	80016e4 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff81 	bl	8001690 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff57 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2204      	movs	r2, #4
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e020      	b.n	800181c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 020e 	bic.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183a:	2b02      	cmp	r3, #2
 800183c:	d005      	beq.n	800184a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e051      	b.n	80018ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020e 	bic.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0201 	bic.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_DMA_Abort_IT+0xd0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d029      	beq.n	80018c8 <HAL_DMA_Abort_IT+0xa0>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_DMA_Abort_IT+0xd4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d022      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x9c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_DMA_Abort_IT+0xd8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d01a      	beq.n	80018be <HAL_DMA_Abort_IT+0x96>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_DMA_Abort_IT+0xdc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d012      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x90>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_DMA_Abort_IT+0xe0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d00a      	beq.n	80018b2 <HAL_DMA_Abort_IT+0x8a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_DMA_Abort_IT+0xe4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d102      	bne.n	80018ac <HAL_DMA_Abort_IT+0x84>
 80018a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018aa:	e00e      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	e00b      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b6:	e008      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	e005      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c2:	e002      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018c4:	2310      	movs	r3, #16
 80018c6:	e000      	b.n	80018ca <HAL_DMA_Abort_IT+0xa2>
 80018c8:	2301      	movs	r3, #1
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_DMA_Abort_IT+0xe8>)
 80018cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
    } 
  }
  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020008 	.word	0x40020008
 80018fc:	4002001c 	.word	0x4002001c
 8001900:	40020030 	.word	0x40020030
 8001904:	40020044 	.word	0x40020044
 8001908:	40020058 	.word	0x40020058
 800190c:	4002006c 	.word	0x4002006c
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e169      	b.n	8001bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001928:	2201      	movs	r2, #1
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8158 	bne.w	8001bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a9a      	ldr	r2, [pc, #616]	; (8001bb4 <HAL_GPIO_Init+0x2a0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d05e      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001950:	4a98      	ldr	r2, [pc, #608]	; (8001bb4 <HAL_GPIO_Init+0x2a0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d875      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001956:	4a98      	ldr	r2, [pc, #608]	; (8001bb8 <HAL_GPIO_Init+0x2a4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d058      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 800195c:	4a96      	ldr	r2, [pc, #600]	; (8001bb8 <HAL_GPIO_Init+0x2a4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d86f      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001962:	4a96      	ldr	r2, [pc, #600]	; (8001bbc <HAL_GPIO_Init+0x2a8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d052      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001968:	4a94      	ldr	r2, [pc, #592]	; (8001bbc <HAL_GPIO_Init+0x2a8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d869      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800196e:	4a94      	ldr	r2, [pc, #592]	; (8001bc0 <HAL_GPIO_Init+0x2ac>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d04c      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001974:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <HAL_GPIO_Init+0x2ac>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d863      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800197a:	4a92      	ldr	r2, [pc, #584]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d046      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001980:	4a90      	ldr	r2, [pc, #576]	; (8001bc4 <HAL_GPIO_Init+0x2b0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d85d      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d82a      	bhi.n	80019e0 <HAL_GPIO_Init+0xcc>
 800198a:	2b12      	cmp	r3, #18
 800198c:	d859      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_GPIO_Init+0x80>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	080019e9 	.word	0x080019e9
 800199c:	080019fb 	.word	0x080019fb
 80019a0:	08001a3d 	.word	0x08001a3d
 80019a4:	08001a43 	.word	0x08001a43
 80019a8:	08001a43 	.word	0x08001a43
 80019ac:	08001a43 	.word	0x08001a43
 80019b0:	08001a43 	.word	0x08001a43
 80019b4:	08001a43 	.word	0x08001a43
 80019b8:	08001a43 	.word	0x08001a43
 80019bc:	08001a43 	.word	0x08001a43
 80019c0:	08001a43 	.word	0x08001a43
 80019c4:	08001a43 	.word	0x08001a43
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a43 	.word	0x08001a43
 80019d0:	08001a43 	.word	0x08001a43
 80019d4:	08001a43 	.word	0x08001a43
 80019d8:	080019f1 	.word	0x080019f1
 80019dc:	08001a05 	.word	0x08001a05
 80019e0:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <HAL_GPIO_Init+0x2b4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e6:	e02c      	b.n	8001a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e029      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e024      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	3308      	adds	r3, #8
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e01f      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	330c      	adds	r3, #12
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e01a      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a16:	2304      	movs	r3, #4
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e013      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	611a      	str	r2, [r3, #16]
          break;
 8001a2e:	e009      	b.n	8001a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	615a      	str	r2, [r3, #20]
          break;
 8001a3a:	e003      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          break;
 8001a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2bff      	cmp	r3, #255	; 0xff
 8001a48:	d801      	bhi.n	8001a4e <HAL_GPIO_Init+0x13a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	e001      	b.n	8001a52 <HAL_GPIO_Init+0x13e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d802      	bhi.n	8001a60 <HAL_GPIO_Init+0x14c>
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x152>
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3b08      	subs	r3, #8
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80b1 	beq.w	8001bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x2b8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <HAL_GPIO_Init+0x2b8>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_GPIO_Init+0x2b8>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aac:	4a48      	ldr	r2, [pc, #288]	; (8001bd0 <HAL_GPIO_Init+0x2bc>)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a40      	ldr	r2, [pc, #256]	; (8001bd4 <HAL_GPIO_Init+0x2c0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_GPIO_Init+0x1ec>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a3f      	ldr	r2, [pc, #252]	; (8001bd8 <HAL_GPIO_Init+0x2c4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00d      	beq.n	8001afc <HAL_GPIO_Init+0x1e8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a3e      	ldr	r2, [pc, #248]	; (8001bdc <HAL_GPIO_Init+0x2c8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d007      	beq.n	8001af8 <HAL_GPIO_Init+0x1e4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a3d      	ldr	r2, [pc, #244]	; (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_GPIO_Init+0x1e0>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001af4:	2304      	movs	r3, #4
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001b00:	2300      	movs	r3, #0
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b12:	492f      	ldr	r1, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x2bc>)
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	492c      	ldr	r1, [pc, #176]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4928      	ldr	r1, [pc, #160]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4922      	ldr	r1, [pc, #136]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	491e      	ldr	r1, [pc, #120]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4918      	ldr	r1, [pc, #96]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4914      	ldr	r1, [pc, #80]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d021      	beq.n	8001be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	60cb      	str	r3, [r1, #12]
 8001bb0:	e021      	b.n	8001bf6 <HAL_GPIO_Init+0x2e2>
 8001bb2:	bf00      	nop
 8001bb4:	10320000 	.word	0x10320000
 8001bb8:	10310000 	.word	0x10310000
 8001bbc:	10220000 	.word	0x10220000
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	10120000 	.word	0x10120000
 8001bc8:	10110000 	.word	0x10110000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	4909      	ldr	r1, [pc, #36]	; (8001c18 <HAL_GPIO_Init+0x304>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	fa22 f303 	lsr.w	r3, r2, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f47f ae8e 	bne.w	8001928 <HAL_GPIO_Init+0x14>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	372c      	adds	r7, #44	; 0x2c
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	40010400 	.word	0x40010400

08001c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c2c:	787b      	ldrb	r3, [r7, #1]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	041a      	lsls	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	041a      	lsls	r2, r3, #16
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43d9      	mvns	r1, r3
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e272      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8087 	beq.w	8001dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b92      	ldr	r3, [pc, #584]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d112      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d06c      	beq.n	8001dac <HAL_RCC_OscConfig+0x12c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d168      	bne.n	8001dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e24c      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x76>
 8001ce8:	4b80      	ldr	r3, [pc, #512]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7f      	ldr	r2, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e02e      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x98>
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a77      	ldr	r2, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0xbc>
 8001d22:	4b72      	ldr	r3, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a71      	ldr	r2, [pc, #452]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6e      	ldr	r2, [pc, #440]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b68      	ldr	r3, [pc, #416]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a67      	ldr	r2, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe92 	bl	8000a84 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe fe8e 	bl	8000a84 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e200      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe4>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe7e 	bl	8000a84 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe7a 	bl	8000a84 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1ec      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x10c>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c0      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4939      	ldr	r1, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fe33 	bl	8000a84 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe fe2f 	bl	8000a84 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fe12 	bl	8000a84 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fe0e 	bl	8000a84 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e180      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fdf2 	bl	8000a84 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fdee 	bl	8000a84 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e160      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 fb08 	bl	80024d8 <RCC_Delay>
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fdd8 	bl	8000a84 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fdd4 	bl	8000a84 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d908      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e146      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420000 	.word	0x42420000
 8001ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e9      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a6 	beq.w	800205e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fd95 	bl	8000a84 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe fd91 	bl	8000a84 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e103      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b75      	ldr	r3, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x312>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e02d      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x334>
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x356>
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a5d      	ldr	r2, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fd45 	bl	8000a84 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fd41 	bl	8000a84 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0b1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x37e>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe fd2f 	bl	8000a84 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fd2b 	bl	8000a84 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e09b      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8087 	beq.w	8002176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d061      	beq.n	8002138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d146      	bne.n	800210a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fcff 	bl	8000a84 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fcfb 	bl	8000a84 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e06d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4921      	ldr	r1, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a19      	ldr	r1, [r3, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	430b      	orrs	r3, r1
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fccf 	bl	8000a84 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fccb 	bl	8000a84 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e03d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x46a>
 8002108:	e035      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0x4cc>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fcb8 	bl	8000a84 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fcb4 	bl	8000a84 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e026      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x498>
 8002136:	e01e      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e019      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x500>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fc06 	bl	8000a84 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fc02 	bl	8000a84 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fa4a 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	08006a30 	.word	0x08006a30
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b490      	push	{r4, r7}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCC_GetSysClockFreq+0xac>)
 8002360:	1d3c      	adds	r4, r7, #4
 8002362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002368:	f240 2301 	movw	r3, #513	; 0x201
 800236c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d002      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d003      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x46>
 8002396:	e02b      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 800239a:	623b      	str	r3, [r7, #32]
      break;
 800239c:	e02b      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	0c9b      	lsrs	r3, r3, #18
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3328      	adds	r3, #40	; 0x28
 80023a8:	443b      	add	r3, r7
 80023aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d012      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ba:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0c5b      	lsrs	r3, r3, #17
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	3328      	adds	r3, #40	; 0x28
 80023c6:	443b      	add	r3, r7
 80023c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4a0e      	ldr	r2, [pc, #56]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d2:	fb03 f202 	mul.w	r2, r3, r2
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	e004      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	623b      	str	r3, [r7, #32]
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023f2:	623b      	str	r3, [r7, #32]
      break;
 80023f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f6:	6a3b      	ldr	r3, [r7, #32]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc90      	pop	{r4, r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	080069a8 	.word	0x080069a8
 8002408:	40021000 	.word	0x40021000
 800240c:	007a1200 	.word	0x007a1200
 8002410:	003d0900 	.word	0x003d0900

08002414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <HAL_RCC_GetHCLKFreq+0x10>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000000 	.word	0x20000000

08002428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800242c:	f7ff fff2 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	4903      	ldr	r1, [pc, #12]	; (800244c <HAL_RCC_GetPCLK1Freq+0x24>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	08006a40 	.word	0x08006a40

08002450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002454:	f7ff ffde 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	0adb      	lsrs	r3, r3, #11
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	08006a40 	.word	0x08006a40

08002478 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	220f      	movs	r2, #15
 8002486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_RCC_GetClockConfig+0x58>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_RCC_GetClockConfig+0x58>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_GetClockConfig+0x58>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_RCC_GetClockConfig+0x58>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_GetClockConfig+0x5c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0207 	and.w	r2, r3, #7
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40022000 	.word	0x40022000

080024d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <RCC_Delay+0x34>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <RCC_Delay+0x38>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f4:	bf00      	nop
  }
  while (Delay --);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	60fa      	str	r2, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <RCC_Delay+0x1c>
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000000 	.word	0x20000000
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e041      	b.n	80025aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f839 	bl	80025b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f000 f9b4 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d001      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e03a      	b.n	8002652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIM_Base_Start_IT+0x98>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_TIM_Base_Start_IT+0x58>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d009      	beq.n	800261c <HAL_TIM_Base_Start_IT+0x58>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIM_Base_Start_IT+0x9c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_TIM_Base_Start_IT+0x58>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a13      	ldr	r2, [pc, #76]	; (8002664 <HAL_TIM_Base_Start_IT+0xa0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d111      	bne.n	8002640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b06      	cmp	r3, #6
 800262c:	d010      	beq.n	8002650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	e007      	b.n	8002650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800

08002668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d122      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0202 	mvn.w	r2, #2
 8002694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f8ed 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8e0 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f8ef 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d122      	bne.n	8002718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d11b      	bne.n	8002718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0204 	mvn.w	r2, #4
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8c3 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8b6 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8c5 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d122      	bne.n	800276c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b08      	cmp	r3, #8
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0208 	mvn.w	r2, #8
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2204      	movs	r2, #4
 8002742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f899 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f88c 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f89b 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b10      	cmp	r3, #16
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0210 	mvn.w	r2, #16
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2208      	movs	r2, #8
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f86f 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f862 	bl	8002878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f871 	bl	800289c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0201 	mvn.w	r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fd ffa0 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	2b80      	cmp	r3, #128	; 0x80
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8bf 	bl	8002996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f835 	bl	80028ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b20      	cmp	r3, #32
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b20      	cmp	r3, #32
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0220 	mvn.w	r2, #32
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f88a 	bl	8002984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a29      	ldr	r2, [pc, #164]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <TIM_Base_SetConfig+0xbc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <TIM_Base_SetConfig+0xc0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <TIM_Base_SetConfig+0xbc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a18      	ldr	r2, [pc, #96]	; (8002980 <TIM_Base_SetConfig+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e03f      	b.n	8002a3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fd ffb6 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2224      	movs	r2, #36	; 0x24
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fc25 	bl	800323c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b08a      	sub	sp, #40	; 0x28
 8002a46:	af02      	add	r7, sp, #8
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d17c      	bne.n	8002b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_UART_Transmit+0x2c>
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e075      	b.n	8002b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_UART_Transmit+0x3e>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e06e      	b.n	8002b5e <HAL_UART_Transmit+0x11c>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2221      	movs	r2, #33	; 0x21
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a96:	f7fd fff5 	bl	8000a84 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d108      	bne.n	8002ac4 <HAL_UART_Transmit+0x82>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e003      	b.n	8002acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ad4:	e02a      	b.n	8002b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fa11 	bl	8002f08 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e036      	b.n	8002b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e007      	b.n	8002b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1cf      	bne.n	8002ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f9e1 	bl	8002f08 <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e006      	b.n	8002b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_UART_IRQHandler+0x52>
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fa99 	bl	80030ea <UART_Receive_IT>
      return;
 8002bb8:	e17b      	b.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80b1 	beq.w	8002d24 <HAL_UART_IRQHandler+0x1bc>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_UART_IRQHandler+0x70>
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a6 	beq.w	8002d24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x90>
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_UART_IRQHandler+0xb0>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0202 	orr.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_UART_IRQHandler+0xd0>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00f      	beq.n	8002c62 <HAL_UART_IRQHandler+0xfa>
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_UART_IRQHandler+0xee>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f043 0208 	orr.w	r2, r3, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 811e 	beq.w	8002ea8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_UART_IRQHandler+0x11e>
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa32 	bl	80030ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <HAL_UART_IRQHandler+0x146>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d031      	beq.n	8002d12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f974 	bl	8002f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d023      	beq.n	8002d0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d013      	beq.n	8002d02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4a76      	ldr	r2, [pc, #472]	; (8002eb8 <HAL_UART_IRQHandler+0x350>)
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fd9e 	bl	8001828 <HAL_DMA_Abort_IT>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00e      	b.n	8002d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8ec 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e00a      	b.n	8002d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8e8 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	e006      	b.n	8002d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8e4 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d1e:	e0c3      	b.n	8002ea8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	bf00      	nop
    return;
 8002d22:	e0c1      	b.n	8002ea8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80a1 	bne.w	8002e70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 809b 	beq.w	8002e70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8095 	beq.w	8002e70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04e      	beq.n	8002e08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d74:	8a3b      	ldrh	r3, [r7, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8098 	beq.w	8002eac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d80:	8a3a      	ldrh	r2, [r7, #16]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f080 8092 	bcs.w	8002eac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8a3a      	ldrh	r2, [r7, #16]
 8002d8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d02b      	beq.n	8002df0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dc6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0210 	bic.w	r2, r2, #16
 8002de4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fce1 	bl	80017b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f876 	bl	8002ef2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e06:	e051      	b.n	8002eac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d047      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e20:	8a7b      	ldrh	r3, [r7, #18]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d044      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0210 	bic.w	r2, r2, #16
 8002e62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e64:	8a7b      	ldrh	r3, [r7, #18]
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f842 	bl	8002ef2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e6e:	e01f      	b.n	8002eb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_UART_IRQHandler+0x324>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8c9 	bl	800301c <UART_Transmit_IT>
    return;
 8002e8a:	e012      	b.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f90a 	bl	80030ba <UART_EndTransmit_IT>
    return;
 8002ea6:	e004      	b.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002eb0:	bf00      	nop
  }
}
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08002ff5 	.word	0x08002ff5

08002ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f18:	e02c      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f28:	f7fd fdac 	bl	8000a84 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d21d      	bcs.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e00f      	b.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d0c3      	beq.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ff66 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b21      	cmp	r3, #33	; 0x21
 800302e:	d13e      	bne.n	80030ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d114      	bne.n	8003064 <UART_Transmit_IT+0x48>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d110      	bne.n	8003064 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003056:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]
 8003062:	e008      	b.n	8003076 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	1c59      	adds	r1, r3, #1
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6211      	str	r1, [r2, #32]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4619      	mov	r1, r3
 8003084:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff feee 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b22      	cmp	r3, #34	; 0x22
 80030fc:	f040 8099 	bne.w	8003232 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003108:	d117      	bne.n	800313a <UART_Receive_IT+0x50>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d113      	bne.n	800313a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003128:	b29a      	uxth	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
 8003138:	e026      	b.n	8003188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d007      	beq.n	800315e <UART_Receive_IT+0x74>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <UART_Receive_IT+0x82>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e008      	b.n	800317e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003178:	b2da      	uxtb	r2, r3
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4619      	mov	r1, r3
 8003196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003198:	2b00      	cmp	r3, #0
 800319a:	d148      	bne.n	800322e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0220 	bic.w	r2, r2, #32
 80031aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d123      	bne.n	8003224 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0210 	bic.w	r2, r2, #16
 80031f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d10a      	bne.n	8003216 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fe68 	bl	8002ef2 <HAL_UARTEx_RxEventCallback>
 8003222:	e002      	b.n	800322a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fe52 	bl	8002ece <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e002      	b.n	8003234 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003276:	f023 030c 	bic.w	r3, r3, #12
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	430b      	orrs	r3, r1
 8003282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <UART_SetConfig+0x114>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d103      	bne.n	80032ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff f8d4 	bl	8002450 <HAL_RCC_GetPCLK2Freq>
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	e002      	b.n	80032b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7ff f8bc 	bl	8002428 <HAL_RCC_GetPCLK1Freq>
 80032b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c8:	4a22      	ldr	r2, [pc, #136]	; (8003354 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	0119      	lsls	r1, r3, #4
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <UART_SetConfig+0x118>)
 80032ea:	fba3 0302 	umull	r0, r3, r3, r2
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2064      	movs	r0, #100	; 0x64
 80032f2:	fb00 f303 	mul.w	r3, r0, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	3332      	adds	r3, #50	; 0x32
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <UART_SetConfig+0x118>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003308:	4419      	add	r1, r3
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <UART_SetConfig+0x118>)
 8003322:	fba3 0302 	umull	r0, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2064      	movs	r0, #100	; 0x64
 800332a:	fb00 f303 	mul.w	r3, r0, r3
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	3332      	adds	r3, #50	; 0x32
 8003334:	4a07      	ldr	r2, [pc, #28]	; (8003354 <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	440a      	add	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40013800 	.word	0x40013800
 8003354:	51eb851f 	.word	0x51eb851f

08003358 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800335e:	f3ef 8305 	mrs	r3, IPSR
 8003362:	60bb      	str	r3, [r7, #8]
  return(result);
 8003364:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10f      	bne.n	800338a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	607b      	str	r3, [r7, #4]
  return(result);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <osKernelInitialize+0x32>
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <osKernelInitialize+0x60>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d109      	bne.n	8003392 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800337e:	f3ef 8311 	mrs	r3, BASEPRI
 8003382:	603b      	str	r3, [r7, #0]
  return(result);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800338a:	f06f 0305 	mvn.w	r3, #5
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e00c      	b.n	80033ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <osKernelInitialize+0x60>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <osKernelInitialize+0x60>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e002      	b.n	80033ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000218 	.word	0x20000218

080033bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c2:	f3ef 8305 	mrs	r3, IPSR
 80033c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ce:	f3ef 8310 	mrs	r3, PRIMASK
 80033d2:	607b      	str	r3, [r7, #4]
  return(result);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <osKernelStart+0x32>
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <osKernelStart+0x64>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d109      	bne.n	80033f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033e2:	f3ef 8311 	mrs	r3, BASEPRI
 80033e6:	603b      	str	r3, [r7, #0]
  return(result);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80033ee:	f06f 0305 	mvn.w	r3, #5
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e00e      	b.n	8003414 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <osKernelStart+0x64>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d107      	bne.n	800340e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <osKernelStart+0x64>)
 8003400:	2202      	movs	r2, #2
 8003402:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003404:	f001 fb7e 	bl	8004b04 <vTaskStartScheduler>
      stat = osOK;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e002      	b.n	8003414 <osKernelStart+0x58>
    } else {
      stat = osError;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003414:	68fb      	ldr	r3, [r7, #12]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000218 	.word	0x20000218

08003424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b092      	sub	sp, #72	; 0x48
 8003428:	af04      	add	r7, sp, #16
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003434:	f3ef 8305 	mrs	r3, IPSR
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 8094 	bne.w	800356a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	623b      	str	r3, [r7, #32]
  return(result);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 808d 	bne.w	800356a <osThreadNew+0x146>
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <osThreadNew+0x150>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d106      	bne.n	8003466 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003458:	f3ef 8311 	mrs	r3, BASEPRI
 800345c:	61fb      	str	r3, [r7, #28]
  return(result);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 8082 	bne.w	800356a <osThreadNew+0x146>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d07e      	beq.n	800356a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003470:	2318      	movs	r3, #24
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003474:	2300      	movs	r3, #0
 8003476:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003478:	f107 031b 	add.w	r3, r7, #27
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d045      	beq.n	8003516 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <osThreadNew+0x74>
        name = attr->name;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <osThreadNew+0x9a>
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b38      	cmp	r3, #56	; 0x38
 80034b0:	d805      	bhi.n	80034be <osThreadNew+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <osThreadNew+0x9e>
        return (NULL);
 80034be:	2300      	movs	r3, #0
 80034c0:	e054      	b.n	800356c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00e      	beq.n	80034f8 <osThreadNew+0xd4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2bcb      	cmp	r3, #203	; 0xcb
 80034e0:	d90a      	bls.n	80034f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <osThreadNew+0xd4>
        mem = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	e010      	b.n	800351a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10c      	bne.n	800351a <osThreadNew+0xf6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d108      	bne.n	800351a <osThreadNew+0xf6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <osThreadNew+0xf6>
          mem = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
 8003514:	e001      	b.n	800351a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2b01      	cmp	r3, #1
 800351e:	d110      	bne.n	8003542 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003528:	9202      	str	r2, [sp, #8]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003534:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f001 f934 	bl	80047a4 <xTaskCreateStatic>
 800353c:	4603      	mov	r3, r0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e013      	b.n	800356a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d110      	bne.n	800356a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	b29a      	uxth	r2, r3
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f001 f97e 	bl	800485c <xTaskCreate>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <osThreadNew+0x146>
          hTask = NULL;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800356a:	697b      	ldr	r3, [r7, #20]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3738      	adds	r7, #56	; 0x38
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000218 	.word	0x20000218

08003578 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800357e:	f3ef 8305 	mrs	r3, IPSR
 8003582:	60bb      	str	r3, [r7, #8]
  return(result);
 8003584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800358a:	f3ef 8310 	mrs	r3, PRIMASK
 800358e:	607b      	str	r3, [r7, #4]
  return(result);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <osThreadYield+0x32>
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <osThreadYield+0x5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d109      	bne.n	80035b2 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800359e:	f3ef 8311 	mrs	r3, BASEPRI
 80035a2:	603b      	str	r3, [r7, #0]
  return(result);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <osThreadYield+0x3a>
    stat = osErrorISR;
 80035aa:	f06f 0305 	mvn.w	r3, #5
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e009      	b.n	80035c6 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <osThreadYield+0x60>)
 80035b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000218 	.word	0x20000218
 80035d8:	e000ed04 	.word	0xe000ed04

080035dc <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <osThreadFlagsSet+0x1a>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da03      	bge.n	80035fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80035f6:	f06f 0303 	mvn.w	r3, #3
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e045      	b.n	800368a <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003604:	f3ef 8305 	mrs	r3, IPSR
 8003608:	61bb      	str	r3, [r7, #24]
  return(result);
 800360a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10f      	bne.n	8003630 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	617b      	str	r3, [r7, #20]
  return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <osThreadFlagsSet+0x54>
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <osThreadFlagsSet+0xb8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d125      	bne.n	8003670 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003624:	f3ef 8311 	mrs	r3, BASEPRI
 8003628:	613b      	str	r3, [r7, #16]
  return(result);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01f      	beq.n	8003670 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2300      	movs	r3, #0
 800363c:	2201      	movs	r2, #1
 800363e:	6839      	ldr	r1, [r7, #0]
 8003640:	69f8      	ldr	r0, [r7, #28]
 8003642:	f002 f857 	bl	80056f4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	2200      	movs	r2, #0
 800364c:	9200      	str	r2, [sp, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	69f8      	ldr	r0, [r7, #28]
 8003654:	f002 f84e 	bl	80056f4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <osThreadFlagsSet+0xae>
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <osThreadFlagsSet+0xbc>)
 8003660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	e00c      	b.n	800368a <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8003670:	2300      	movs	r3, #0
 8003672:	2201      	movs	r2, #1
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	69f8      	ldr	r0, [r7, #28]
 8003678:	f001 ff92 	bl	80055a0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	2200      	movs	r2, #0
 8003682:	2100      	movs	r1, #0
 8003684:	69f8      	ldr	r0, [r7, #28]
 8003686:	f001 ff8b 	bl	80055a0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000218 	.word	0x20000218
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b08e      	sub	sp, #56	; 0x38
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a8:	f3ef 8305 	mrs	r3, IPSR
 80036ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80036ae:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10f      	bne.n	80036d4 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036b4:	f3ef 8310 	mrs	r3, PRIMASK
 80036b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <osThreadFlagsWait+0x38>
 80036c0:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <osThreadFlagsWait+0x124>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d109      	bne.n	80036dc <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036c8:	f3ef 8311 	mrs	r3, BASEPRI
 80036cc:	617b      	str	r3, [r7, #20]
  return(result);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80036d4:	f06f 0305 	mvn.w	r3, #5
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
 80036da:	e06b      	b.n	80037b4 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da03      	bge.n	80036ea <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80036e2:	f06f 0303 	mvn.w	r3, #3
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
 80036e8:	e064      	b.n	80037b4 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <osThreadFlagsWait+0x5e>
      clear = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
 80036f8:	e001      	b.n	80036fe <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8003706:	f001 fb19 	bl	8004d3c <xTaskGetTickCount>
 800370a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800370c:	f107 0210 	add.w	r2, r7, #16
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003714:	2000      	movs	r0, #0
 8003716:	f001 fee3 	bl	80054e0 <xTaskNotifyWait>
 800371a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b01      	cmp	r3, #1
 8003720:	d137      	bne.n	8003792 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8003722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4013      	ands	r3, r2
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372e:	4313      	orrs	r3, r2
 8003730:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	4013      	ands	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d032      	beq.n	80037ae <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800374e:	f06f 0302 	mvn.w	r3, #2
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003754:	e02e      	b.n	80037b4 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d128      	bne.n	80037b2 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8003766:	f06f 0302 	mvn.w	r3, #2
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800376c:	e022      	b.n	80037b4 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800376e:	f001 fae5 	bl	8004d3c <xTaskGetTickCount>
 8003772:	4602      	mov	r2, r0
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800377a:	6a3a      	ldr	r2, [r7, #32]
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <osThreadFlagsWait+0xec>
          tout  = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	e00e      	b.n	80037a6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8003788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003790:	e009      	b.n	80037a6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8003798:	f06f 0302 	mvn.w	r3, #2
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
 800379e:	e002      	b.n	80037a6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80037a0:	f06f 0301 	mvn.w	r3, #1
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1af      	bne.n	800370c <osThreadFlagsWait+0x70>
 80037ac:	e002      	b.n	80037b4 <osThreadFlagsWait+0x118>
            break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <osThreadFlagsWait+0x118>
            break;
 80037b2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3738      	adds	r7, #56	; 0x38
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000218 	.word	0x20000218

080037c4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08c      	sub	sp, #48	; 0x30
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d4:	f3ef 8305 	mrs	r3, IPSR
 80037d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80037da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d16f      	bne.n	80038c0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	617b      	str	r3, [r7, #20]
  return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d169      	bne.n	80038c0 <osMessageQueueNew+0xfc>
 80037ec:	4b37      	ldr	r3, [pc, #220]	; (80038cc <osMessageQueueNew+0x108>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d105      	bne.n	8003800 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f4:	f3ef 8311 	mrs	r3, BASEPRI
 80037f8:	613b      	str	r3, [r7, #16]
  return(result);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d15f      	bne.n	80038c0 <osMessageQueueNew+0xfc>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d05c      	beq.n	80038c0 <osMessageQueueNew+0xfc>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d059      	beq.n	80038c0 <osMessageQueueNew+0xfc>
    mem = -1;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d029      	beq.n	800386c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <osMessageQueueNew+0x82>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b4f      	cmp	r3, #79	; 0x4f
 8003826:	d90e      	bls.n	8003846 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <osMessageQueueNew+0x82>
        mem = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	623b      	str	r3, [r7, #32]
 8003844:	e014      	b.n	8003870 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d110      	bne.n	8003870 <osMessageQueueNew+0xac>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <osMessageQueueNew+0xac>
          mem = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
 800386a:	e001      	b.n	8003870 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10b      	bne.n	800388e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2100      	movs	r1, #0
 8003880:	9100      	str	r1, [sp, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fa53 	bl	8003d30 <xQueueGenericCreateStatic>
 800388a:	6278      	str	r0, [r7, #36]	; 0x24
 800388c:	e008      	b.n	80038a0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003894:	2200      	movs	r2, #0
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fac0 	bl	8003e1e <xQueueGenericCreate>
 800389e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e001      	b.n	80038b8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038bc:	f000 ff16 	bl	80046ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000218 	.word	0x20000218

080038d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e8:	f3ef 8305 	mrs	r3, IPSR
 80038ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80038ee:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f4:	f3ef 8310 	mrs	r3, PRIMASK
 80038f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d109      	bne.n	8003914 <osMessageQueuePut+0x44>
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <osMessageQueuePut+0xe0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d12e      	bne.n	8003966 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003908:	f3ef 8311 	mrs	r3, BASEPRI
 800390c:	617b      	str	r3, [r7, #20]
  return(result);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d028      	beq.n	8003966 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <osMessageQueuePut+0x56>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <osMessageQueuePut+0x56>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003926:	f06f 0303 	mvn.w	r3, #3
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800392c:	e039      	b.n	80039a2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003932:	f107 0210 	add.w	r2, r7, #16
 8003936:	2300      	movs	r3, #0
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	6a38      	ldr	r0, [r7, #32]
 800393c:	f000 fbce 	bl	80040dc <xQueueGenericSendFromISR>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d003      	beq.n	800394e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003946:	f06f 0302 	mvn.w	r3, #2
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800394c:	e029      	b.n	80039a2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d026      	beq.n	80039a2 <osMessageQueuePut+0xd2>
 8003954:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <osMessageQueuePut+0xe4>)
 8003956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003964:	e01d      	b.n	80039a2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <osMessageQueuePut+0xa2>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003972:	f06f 0303 	mvn.w	r3, #3
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	e014      	b.n	80039a4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800397a:	2300      	movs	r3, #0
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f000 faad 	bl	8003ee0 <xQueueGenericSend>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d00b      	beq.n	80039a4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003992:	f06f 0301 	mvn.w	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e004      	b.n	80039a4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800399a:	f06f 0302 	mvn.w	r3, #2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	e000      	b.n	80039a4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039a2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000218 	.word	0x20000218
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ce:	f3ef 8305 	mrs	r3, IPSR
 80039d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80039d4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039da:	f3ef 8310 	mrs	r3, PRIMASK
 80039de:	61bb      	str	r3, [r7, #24]
  return(result);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <osMessageQueueGet+0x42>
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <osMessageQueueGet+0xdc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d12e      	bne.n	8003a4c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039ee:	f3ef 8311 	mrs	r3, BASEPRI
 80039f2:	617b      	str	r3, [r7, #20]
  return(result);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d028      	beq.n	8003a4c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <osMessageQueueGet+0x54>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <osMessageQueueGet+0x54>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003a0c:	f06f 0303 	mvn.w	r3, #3
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a12:	e038      	b.n	8003a86 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003a18:	f107 0310 	add.w	r3, r7, #16
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	6a38      	ldr	r0, [r7, #32]
 8003a22:	f000 fcd3 	bl	80043cc <xQueueReceiveFromISR>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d003      	beq.n	8003a34 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003a2c:	f06f 0302 	mvn.w	r3, #2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a32:	e028      	b.n	8003a86 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d025      	beq.n	8003a86 <osMessageQueueGet+0xce>
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <osMessageQueueGet+0xe0>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a4a:	e01c      	b.n	8003a86 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <osMessageQueueGet+0xa0>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003a58:	f06f 0303 	mvn.w	r3, #3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e013      	b.n	8003a88 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	6a38      	ldr	r0, [r7, #32]
 8003a66:	f000 fbd1 	bl	800420c <xQueueReceive>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d00b      	beq.n	8003a88 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003a76:	f06f 0301 	mvn.w	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e004      	b.n	8003a88 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003a7e:	f06f 0302 	mvn.w	r3, #2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e000      	b.n	8003a88 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a86:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000218 	.word	0x20000218
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vApplicationGetIdleTaskMemory+0x28>)
 8003aac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	601a      	str	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	2000021c 	.word	0x2000021c
 8003ac8:	200002e8 	.word	0x200002e8

08003acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4a06      	ldr	r2, [pc, #24]	; (8003afc <vApplicationGetTimerTaskMemory+0x30>)
 8003ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200004e8 	.word	0x200004e8
 8003afc:	200005b4 	.word	0x200005b4

08003b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f103 0208 	add.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f103 0208 	add.w	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d103      	bne.n	8003bbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e00c      	b.n	8003bd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e002      	b.n	8003bca <vListInsert+0x2e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d2f6      	bcs.n	8003bc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6852      	ldr	r2, [r2, #4]
 8003c2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d103      	bne.n	8003c40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	1e5a      	subs	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
	...

08003c60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c8a:	f002 fa5f 	bl	800614c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	441a      	add	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d114      	bne.n	8003d0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 f9a5 	bl	800503c <xTaskRemoveFromEventList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <xQueueGenericReset+0xcc>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	e009      	b.n	8003d1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fef6 	bl	8003b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3324      	adds	r3, #36	; 0x24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fef1 	bl	8003b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d1e:	f002 fa45 	bl	80061ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d22:	2301      	movs	r3, #1
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	e000ed04 	.word	0xe000ed04

08003d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <xQueueGenericCreateStatic+0x52>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <xQueueGenericCreateStatic+0x56>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <xQueueGenericCreateStatic+0x58>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	623b      	str	r3, [r7, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <xQueueGenericCreateStatic+0x7e>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <xQueueGenericCreateStatic+0x82>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <xQueueGenericCreateStatic+0x84>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61fb      	str	r3, [r7, #28]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dce:	2350      	movs	r3, #80	; 0x50
 8003dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b50      	cmp	r3, #80	; 0x50
 8003dd6:	d00a      	beq.n	8003dee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	61bb      	str	r3, [r7, #24]
}
 8003dea:	bf00      	nop
 8003dec:	e7fe      	b.n	8003dec <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f843 	bl	8003e9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3730      	adds	r7, #48	; 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08a      	sub	sp, #40	; 0x28
 8003e22:	af02      	add	r7, sp, #8
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	613b      	str	r3, [r7, #16]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e004      	b.n	8003e5e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3350      	adds	r3, #80	; 0x50
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 fa72 	bl	800634c <pvPortMalloc>
 8003e68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00f      	beq.n	8003e90 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	3350      	adds	r3, #80	; 0x50
 8003e74:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f805 	bl	8003e9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e90:	69bb      	ldr	r3, [r7, #24]
	}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ec8:	2101      	movs	r1, #1
 8003eca:	69b8      	ldr	r0, [r7, #24]
 8003ecc:	f7ff fec8 	bl	8003c60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	; 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <xQueueGenericSend+0x32>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d103      	bne.n	8003f20 <xQueueGenericSend+0x40>
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <xQueueGenericSend+0x44>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <xQueueGenericSend+0x46>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <xQueueGenericSend+0x60>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d103      	bne.n	8003f4e <xQueueGenericSend+0x6e>
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <xQueueGenericSend+0x72>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <xQueueGenericSend+0x74>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xQueueGenericSend+0x8e>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	623b      	str	r3, [r7, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f6e:	f001 fa2b 	bl	80053c8 <xTaskGetSchedulerState>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <xQueueGenericSend+0x9e>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <xQueueGenericSend+0xa2>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <xQueueGenericSend+0xa4>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericSend+0xbe>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	61fb      	str	r3, [r7, #28]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f9e:	f002 f8d5 	bl	800614c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d302      	bcc.n	8003fb4 <xQueueGenericSend+0xd4>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d129      	bne.n	8004008 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fba:	f000 fa87 	bl	80044cc <prvCopyDataToQueue>
 8003fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f835 	bl	800503c <xTaskRemoveFromEventList>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <xQueueGenericSend+0x1f8>)
 8003fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	e00a      	b.n	8004000 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <xQueueGenericSend+0x1f8>)
 8003ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004000:	f002 f8d4 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 8004004:	2301      	movs	r3, #1
 8004006:	e063      	b.n	80040d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800400e:	f002 f8cd 	bl	80061ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
 8004014:	e05c      	b.n	80040d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4618      	mov	r0, r3
 8004022:	f001 f86f 	bl	8005104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402a:	f002 f8bf 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800402e:	f000 fdd9 	bl	8004be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004032:	f002 f88b 	bl	800614c <vPortEnterCritical>
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800403c:	b25b      	sxtb	r3, r3
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d103      	bne.n	800404c <xQueueGenericSend+0x16c>
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004052:	b25b      	sxtb	r3, r3
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <xQueueGenericSend+0x182>
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004062:	f002 f8a3 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004066:	1d3a      	adds	r2, r7, #4
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f85e 	bl	8005130 <xTaskCheckForTimeOut>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d124      	bne.n	80040c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800407a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407c:	f000 fb1e 	bl	80046bc <prvIsQueueFull>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	3310      	adds	r3, #16
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff84 	bl	8004f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004096:	f000 faa9 	bl	80045ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800409a:	f000 fdb1 	bl	8004c00 <xTaskResumeAll>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f47f af7c 	bne.w	8003f9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <xQueueGenericSend+0x1f8>)
 80040a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	e772      	b.n	8003f9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ba:	f000 fa97 	bl	80045ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040be:	f000 fd9f 	bl	8004c00 <xTaskResumeAll>
 80040c2:	e76c      	b.n	8003f9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c6:	f000 fa91 	bl	80045ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040ca:	f000 fd99 	bl	8004c00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040ce:	2300      	movs	r3, #0
		}
	}
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3738      	adds	r7, #56	; 0x38
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08e      	sub	sp, #56	; 0x38
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <xQueueGenericSendFromISR+0x3c>
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <xQueueGenericSendFromISR+0x40>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <xQueueGenericSendFromISR+0x42>
 800411c:	2300      	movs	r3, #0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	623b      	str	r3, [r7, #32]
}
 8004134:	bf00      	nop
 8004136:	e7fe      	b.n	8004136 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d103      	bne.n	8004146 <xQueueGenericSendFromISR+0x6a>
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <xQueueGenericSendFromISR+0x6e>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <xQueueGenericSendFromISR+0x70>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	61fb      	str	r3, [r7, #28]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004166:	f002 f8b3 	bl	80062d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800416a:	f3ef 8211 	mrs	r2, BASEPRI
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	61ba      	str	r2, [r7, #24]
 8004180:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004182:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <xQueueGenericSendFromISR+0xbc>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d12c      	bne.n	80041f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a8:	f000 f990 	bl	80044cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d112      	bne.n	80041dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d016      	beq.n	80041ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	3324      	adds	r3, #36	; 0x24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 ff3a 	bl	800503c <xTaskRemoveFromEventList>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e007      	b.n	80041ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041e0:	3301      	adds	r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	b25a      	sxtb	r2, r3
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041ec:	2301      	movs	r3, #1
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80041f0:	e001      	b.n	80041f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004200:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004204:	4618      	mov	r0, r3
 8004206:	3738      	adds	r7, #56	; 0x38
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <xQueueReceive+0x30>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	623b      	str	r3, [r7, #32]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <xQueueReceive+0x3e>
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <xQueueReceive+0x42>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <xQueueReceive+0x44>
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <xQueueReceive+0x5e>
	__asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	61fb      	str	r3, [r7, #28]
}
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800426a:	f001 f8ad 	bl	80053c8 <xTaskGetSchedulerState>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <xQueueReceive+0x6e>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <xQueueReceive+0x72>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <xQueueReceive+0x74>
 800427e:	2300      	movs	r3, #0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueReceive+0x8e>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61bb      	str	r3, [r7, #24]
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800429a:	f001 ff57 	bl	800614c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01f      	beq.n	80042ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ae:	f000 f977 	bl	80045a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00f      	beq.n	80042e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	3310      	adds	r3, #16
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 feb8 	bl	800503c <xTaskRemoveFromEventList>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d007      	beq.n	80042e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042d2:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <xQueueReceive+0x1bc>)
 80042d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042e2:	f001 ff63 	bl	80061ac <vPortExitCritical>
				return pdPASS;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e069      	b.n	80043be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d103      	bne.n	80042f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042f0:	f001 ff5c 	bl	80061ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e062      	b.n	80043be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042fe:	f107 0310 	add.w	r3, r7, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fefe 	bl	8005104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800430c:	f001 ff4e 	bl	80061ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004310:	f000 fc68 	bl	8004be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004314:	f001 ff1a 	bl	800614c <vPortEnterCritical>
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800431e:	b25b      	sxtb	r3, r3
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d103      	bne.n	800432e <xQueueReceive+0x122>
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004334:	b25b      	sxtb	r3, r3
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d103      	bne.n	8004344 <xQueueReceive+0x138>
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	f001 ff32 	bl	80061ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004348:	1d3a      	adds	r2, r7, #4
 800434a:	f107 0310 	add.w	r3, r7, #16
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 feed 	bl	8005130 <xTaskCheckForTimeOut>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d123      	bne.n	80043a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800435c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435e:	f000 f997 	bl	8004690 <prvIsQueueEmpty>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	3324      	adds	r3, #36	; 0x24
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fe13 	bl	8004f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004378:	f000 f938 	bl	80045ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800437c:	f000 fc40 	bl	8004c00 <xTaskResumeAll>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d189      	bne.n	800429a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <xQueueReceive+0x1bc>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	e780      	b.n	800429a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	f000 f927 	bl	80045ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800439e:	f000 fc2f 	bl	8004c00 <xTaskResumeAll>
 80043a2:	e77a      	b.n	800429a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a6:	f000 f921 	bl	80045ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043aa:	f000 fc29 	bl	8004c00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b0:	f000 f96e 	bl	8004690 <prvIsQueueEmpty>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f43f af6f 	beq.w	800429a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3730      	adds	r7, #48	; 0x30
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08e      	sub	sp, #56	; 0x38
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	623b      	str	r3, [r7, #32]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <xQueueReceiveFromISR+0x3a>
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <xQueueReceiveFromISR+0x3e>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <xQueueReceiveFromISR+0x40>
 800440a:	2300      	movs	r3, #0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	61fb      	str	r3, [r7, #28]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004426:	f001 ff53 	bl	80062d0 <vPortValidateInterruptPriority>
	__asm volatile
 800442a:	f3ef 8211 	mrs	r2, BASEPRI
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	61ba      	str	r2, [r7, #24]
 8004440:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004442:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02f      	beq.n	80044b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004460:	f000 f89e 	bl	80045a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800446c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d112      	bne.n	800449c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	3310      	adds	r3, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fdda 	bl	800503c <xTaskRemoveFromEventList>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e007      	b.n	80044ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800449c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044a0:	3301      	adds	r3, #1
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	b25a      	sxtb	r2, r3
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
 80044b0:	e001      	b.n	80044b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f383 8811 	msr	BASEPRI, r3
}
 80044c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3738      	adds	r7, #56	; 0x38
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d14d      	bne.n	800458e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ff84 	bl	8005404 <xTaskPriorityDisinherit>
 80044fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	e043      	b.n	800458e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d119      	bne.n	8004540 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6898      	ldr	r0, [r3, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	461a      	mov	r2, r3
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	f002 f916 	bl	8006748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d32b      	bcc.n	800458e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	e026      	b.n	800458e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68d8      	ldr	r0, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	461a      	mov	r2, r3
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	f002 f8fc 	bl	8006748 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	425b      	negs	r3, r3
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d207      	bcs.n	800457c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	425b      	negs	r3, r3
 8004576:	441a      	add	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d105      	bne.n	800458e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3b01      	subs	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004596:	697b      	ldr	r3, [r7, #20]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	441a      	add	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d303      	bcc.n	80045d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68d9      	ldr	r1, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	461a      	mov	r2, r3
 80045de:	6838      	ldr	r0, [r7, #0]
 80045e0:	f002 f8b2 	bl	8006748 <memcpy>
	}
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045f4:	f001 fdaa 	bl	800614c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004600:	e011      	b.n	8004626 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd14 	bl	800503c <xTaskRemoveFromEventList>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800461a:	f000 fdeb 	bl	80051f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	3b01      	subs	r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	dce9      	bgt.n	8004602 <prvUnlockQueue+0x16>
 800462e:	e000      	b.n	8004632 <prvUnlockQueue+0x46>
					break;
 8004630:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	22ff      	movs	r2, #255	; 0xff
 8004636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800463a:	f001 fdb7 	bl	80061ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800463e:	f001 fd85 	bl	800614c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004648:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800464a:	e011      	b.n	8004670 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3310      	adds	r3, #16
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fcef 	bl	800503c <xTaskRemoveFromEventList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004664:	f000 fdc6 	bl	80051f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	3b01      	subs	r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	dce9      	bgt.n	800464c <prvUnlockQueue+0x60>
 8004678:	e000      	b.n	800467c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800467a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004684:	f001 fd92 	bl	80061ac <vPortExitCritical>
}
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004698:	f001 fd58 	bl	800614c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e001      	b.n	80046ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046ae:	f001 fd7d 	bl	80061ac <vPortExitCritical>

	return xReturn;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c4:	f001 fd42 	bl	800614c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d102      	bne.n	80046da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e001      	b.n	80046de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046de:	f001 fd65 	bl	80061ac <vPortExitCritical>

	return xReturn;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e014      	b.n	8004726 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046fc:	4a0e      	ldr	r2, [pc, #56]	; (8004738 <vQueueAddToRegistry+0x4c>)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004708:	490b      	ldr	r1, [pc, #44]	; (8004738 <vQueueAddToRegistry+0x4c>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <vQueueAddToRegistry+0x4c>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800471e:	e006      	b.n	800472e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b07      	cmp	r3, #7
 800472a:	d9e7      	bls.n	80046fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	200009b4 	.word	0x200009b4

0800473c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800474c:	f001 fcfe 	bl	800614c <vPortEnterCritical>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004756:	b25b      	sxtb	r3, r3
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d103      	bne.n	8004766 <vQueueWaitForMessageRestricted+0x2a>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476c:	b25b      	sxtb	r3, r3
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d103      	bne.n	800477c <vQueueWaitForMessageRestricted+0x40>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	f001 fd16 	bl	80061ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	3324      	adds	r3, #36	; 0x24
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fc27 	bl	8004fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff ff28 	bl	80045ec <prvUnlockQueue>
	}
 800479c:	bf00      	nop
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af04      	add	r7, sp, #16
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	623b      	str	r3, [r7, #32]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xTaskCreateStatic+0x46>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	61fb      	str	r3, [r7, #28]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ea:	23cc      	movs	r3, #204	; 0xcc
 80047ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2bcc      	cmp	r3, #204	; 0xcc
 80047f2:	d00a      	beq.n	800480a <xTaskCreateStatic+0x66>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	61bb      	str	r3, [r7, #24]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01e      	beq.n	800484e <xTaskCreateStatic+0xaa>
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01b      	beq.n	800484e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800481e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	2202      	movs	r2, #2
 8004824:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004828:	2300      	movs	r3, #0
 800482a:	9303      	str	r3, [sp, #12]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f851 	bl	80048e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004848:	f000 f8ec 	bl	8004a24 <prvAddNewTaskToReadyList>
 800484c:	e001      	b.n	8004852 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004852:	697b      	ldr	r3, [r7, #20]
	}
 8004854:	4618      	mov	r0, r3
 8004856:	3728      	adds	r7, #40	; 0x28
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	; 0x30
 8004860:	af04      	add	r7, sp, #16
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f001 fd6b 	bl	800634c <pvPortMalloc>
 8004876:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800487e:	20cc      	movs	r0, #204	; 0xcc
 8004880:	f001 fd64 	bl	800634c <pvPortMalloc>
 8004884:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
 8004892:	e005      	b.n	80048a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004894:	6978      	ldr	r0, [r7, #20]
 8004896:	f001 fe1d 	bl	80064d4 <vPortFree>
 800489a:	e001      	b.n	80048a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	2300      	movs	r3, #0
 80048b2:	9303      	str	r3, [sp, #12]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	9302      	str	r3, [sp, #8]
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f80f 	bl	80048e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ca:	69f8      	ldr	r0, [r7, #28]
 80048cc:	f000 f8aa 	bl	8004a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048d0:	2301      	movs	r3, #1
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e002      	b.n	80048dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048d6:	f04f 33ff 	mov.w	r3, #4294967295
 80048da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048dc:	69bb      	ldr	r3, [r7, #24]
	}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	461a      	mov	r2, r3
 8004900:	21a5      	movs	r1, #165	; 0xa5
 8004902:	f001 ff2f 	bl	8006764 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004910:	3b01      	subs	r3, #1
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f023 0307 	bic.w	r3, r3, #7
 800491e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <prvInitialiseNewTask+0x58>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	617b      	str	r3, [r7, #20]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e012      	b.n	800496c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	7819      	ldrb	r1, [r3, #0]
 800494e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	4413      	add	r3, r2
 8004954:	3334      	adds	r3, #52	; 0x34
 8004956:	460a      	mov	r2, r1
 8004958:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b1f      	cmp	r3, #31
 8004970:	d9e9      	bls.n	8004946 <prvInitialiseNewTask+0x5e>
 8004972:	e000      	b.n	8004976 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004974:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	2b37      	cmp	r3, #55	; 0x37
 8004982:	d901      	bls.n	8004988 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004984:	2337      	movs	r3, #55	; 0x37
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004992:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	2200      	movs	r2, #0
 8004998:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff f8cd 	bl	8003b3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	3318      	adds	r3, #24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff f8c8 	bl	8003b3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	3364      	adds	r3, #100	; 0x64
 80049d8:	2260      	movs	r2, #96	; 0x60
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fec1 	bl	8006764 <memset>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <prvInitialiseNewTask+0x130>)
 80049e6:	669a      	str	r2, [r3, #104]	; 0x68
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <prvInitialiseNewTask+0x134>)
 80049ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <prvInitialiseNewTask+0x138>)
 80049f2:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	69b8      	ldr	r0, [r7, #24]
 80049fa:	f001 fab3 	bl	8005f64 <pxPortInitialiseStack>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a10:	bf00      	nop
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	08006a68 	.word	0x08006a68
 8004a1c:	08006a88 	.word	0x08006a88
 8004a20:	08006a48 	.word	0x08006a48

08004a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a2c:	f001 fb8e 	bl	800614c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4a2c      	ldr	r2, [pc, #176]	; (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a3a:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a42:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <prvAddNewTaskToReadyList+0xc4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d110      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a50:	f000 fbf4 	bl	800523c <prvInitialiseTaskLists>
 8004a54:	e00d      	b.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a56:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <prvAddNewTaskToReadyList+0xcc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a5e:	4b23      	ldr	r3, [pc, #140]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d802      	bhi.n	8004a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <prvAddNewTaskToReadyList+0xd4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d903      	bls.n	8004a98 <prvAddNewTaskToReadyList+0x74>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <prvAddNewTaskToReadyList+0xd4>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <prvAddNewTaskToReadyList+0xd8>)
 8004aa6:	441a      	add	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	f7ff f851 	bl	8003b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ab4:	f001 fb7a 	bl	80061ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ab8:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <prvAddNewTaskToReadyList+0xcc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <prvAddNewTaskToReadyList+0xc8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d207      	bcs.n	8004ade <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <prvAddNewTaskToReadyList+0xdc>)
 8004ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000ec8 	.word	0x20000ec8
 8004aec:	200009f4 	.word	0x200009f4
 8004af0:	20000ed4 	.word	0x20000ed4
 8004af4:	20000ee4 	.word	0x20000ee4
 8004af8:	20000ed0 	.word	0x20000ed0
 8004afc:	200009f8 	.word	0x200009f8
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b12:	463a      	mov	r2, r7
 8004b14:	1d39      	adds	r1, r7, #4
 8004b16:	f107 0308 	add.w	r3, r7, #8
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe ffbe 	bl	8003a9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	9202      	str	r2, [sp, #8]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	460a      	mov	r2, r1
 8004b32:	4924      	ldr	r1, [pc, #144]	; (8004bc4 <vTaskStartScheduler+0xc0>)
 8004b34:	4824      	ldr	r0, [pc, #144]	; (8004bc8 <vTaskStartScheduler+0xc4>)
 8004b36:	f7ff fe35 	bl	80047a4 <xTaskCreateStatic>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4a23      	ldr	r2, [pc, #140]	; (8004bcc <vTaskStartScheduler+0xc8>)
 8004b3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <vTaskStartScheduler+0xc8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e001      	b.n	8004b52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d102      	bne.n	8004b5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b58:	f000 fef2 	bl	8005940 <xTimerCreateTimerTask>
 8004b5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d11b      	bne.n	8004b9c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	613b      	str	r3, [r7, #16]
}
 8004b76:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <vTaskStartScheduler+0xcc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3364      	adds	r3, #100	; 0x64
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <vTaskStartScheduler+0xd0>)
 8004b80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <vTaskStartScheduler+0xd4>)
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295
 8004b88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <vTaskStartScheduler+0xd8>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b90:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <vTaskStartScheduler+0xdc>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b96:	f001 fa67 	bl	8006068 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b9a:	e00e      	b.n	8004bba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba2:	d10a      	bne.n	8004bba <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60fb      	str	r3, [r7, #12]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <vTaskStartScheduler+0xb4>
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	080069b8 	.word	0x080069b8
 8004bc8:	0800520d 	.word	0x0800520d
 8004bcc:	20000eec 	.word	0x20000eec
 8004bd0:	200009f4 	.word	0x200009f4
 8004bd4:	20000010 	.word	0x20000010
 8004bd8:	20000ee8 	.word	0x20000ee8
 8004bdc:	20000ed4 	.word	0x20000ed4
 8004be0:	20000ecc 	.word	0x20000ecc

08004be4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <vTaskSuspendAll+0x18>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <vTaskSuspendAll+0x18>)
 8004bf0:	6013      	str	r3, [r2, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000ef0 	.word	0x20000ef0

08004c00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c0e:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <xTaskResumeAll+0x118>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <xTaskResumeAll+0x2c>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	603b      	str	r3, [r7, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c2c:	f001 fa8e 	bl	800614c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c30:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <xTaskResumeAll+0x118>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4a38      	ldr	r2, [pc, #224]	; (8004d18 <xTaskResumeAll+0x118>)
 8004c38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <xTaskResumeAll+0x118>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d162      	bne.n	8004d08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c42:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <xTaskResumeAll+0x11c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d05e      	beq.n	8004d08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c4a:	e02f      	b.n	8004cac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c4c:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <xTaskResumeAll+0x120>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3318      	adds	r3, #24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe ffd7 	bl	8003c0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe ffd2 	bl	8003c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <xTaskResumeAll+0x124>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <xTaskResumeAll+0x7c>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <xTaskResumeAll+0x124>)
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <xTaskResumeAll+0x128>)
 8004c8a:	441a      	add	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f7fe ff5f 	bl	8003b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <xTaskResumeAll+0x12c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004ca6:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <xTaskResumeAll+0x130>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cac:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <xTaskResumeAll+0x120>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1cb      	bne.n	8004c4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cba:	f000 fb61 	bl	8005380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <xTaskResumeAll+0x134>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cca:	f000 f845 	bl	8004d58 <xTaskIncrementTick>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004cd4:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <xTaskResumeAll+0x130>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f1      	bne.n	8004cca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004ce6:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <xTaskResumeAll+0x134>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <xTaskResumeAll+0x130>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <xTaskResumeAll+0x138>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d08:	f001 fa50 	bl	80061ac <vPortExitCritical>

	return xAlreadyYielded;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000ef0 	.word	0x20000ef0
 8004d1c:	20000ec8 	.word	0x20000ec8
 8004d20:	20000e88 	.word	0x20000e88
 8004d24:	20000ed0 	.word	0x20000ed0
 8004d28:	200009f8 	.word	0x200009f8
 8004d2c:	200009f4 	.word	0x200009f4
 8004d30:	20000edc 	.word	0x20000edc
 8004d34:	20000ed8 	.word	0x20000ed8
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d42:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <xTaskGetTickCount+0x18>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d48:	687b      	ldr	r3, [r7, #4]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000ecc 	.word	0x20000ecc

08004d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d62:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <xTaskIncrementTick+0x150>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f040 808e 	bne.w	8004e88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d6c:	4b4f      	ldr	r3, [pc, #316]	; (8004eac <xTaskIncrementTick+0x154>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3301      	adds	r3, #1
 8004d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d74:	4a4d      	ldr	r2, [pc, #308]	; (8004eac <xTaskIncrementTick+0x154>)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d120      	bne.n	8004dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d80:	4b4b      	ldr	r3, [pc, #300]	; (8004eb0 <xTaskIncrementTick+0x158>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	603b      	str	r3, [r7, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <xTaskIncrementTick+0x46>
 8004da0:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <xTaskIncrementTick+0x158>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <xTaskIncrementTick+0x15c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a41      	ldr	r2, [pc, #260]	; (8004eb0 <xTaskIncrementTick+0x158>)
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4a41      	ldr	r2, [pc, #260]	; (8004eb4 <xTaskIncrementTick+0x15c>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b40      	ldr	r3, [pc, #256]	; (8004eb8 <xTaskIncrementTick+0x160>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <xTaskIncrementTick+0x160>)
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	f000 fadf 	bl	8005380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <xTaskIncrementTick+0x164>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d34e      	bcc.n	8004e6a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dcc:	4b38      	ldr	r3, [pc, #224]	; (8004eb0 <xTaskIncrementTick+0x158>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xTaskIncrementTick+0x82>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xTaskIncrementTick+0x84>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <xTaskIncrementTick+0x164>)
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	601a      	str	r2, [r3, #0]
					break;
 8004de8:	e03f      	b.n	8004e6a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dea:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <xTaskIncrementTick+0x158>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d203      	bcs.n	8004e0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e02:	4a2e      	ldr	r2, [pc, #184]	; (8004ebc <xTaskIncrementTick+0x164>)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6013      	str	r3, [r2, #0]
						break;
 8004e08:	e02f      	b.n	8004e6a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fefc 	bl	8003c0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3318      	adds	r3, #24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe fef3 	bl	8003c0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <xTaskIncrementTick+0x168>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d903      	bls.n	8004e3a <xTaskIncrementTick+0xe2>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <xTaskIncrementTick+0x168>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <xTaskIncrementTick+0x16c>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fe fe80 	bl	8003b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <xTaskIncrementTick+0x170>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3b3      	bcc.n	8004dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e68:	e7b0      	b.n	8004dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <xTaskIncrementTick+0x170>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	4914      	ldr	r1, [pc, #80]	; (8004ec4 <xTaskIncrementTick+0x16c>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d907      	bls.n	8004e92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e82:	2301      	movs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e004      	b.n	8004e92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e88:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <xTaskIncrementTick+0x174>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ecc <xTaskIncrementTick+0x174>)
 8004e90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <xTaskIncrementTick+0x178>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	20000ef0 	.word	0x20000ef0
 8004eac:	20000ecc 	.word	0x20000ecc
 8004eb0:	20000e80 	.word	0x20000e80
 8004eb4:	20000e84 	.word	0x20000e84
 8004eb8:	20000ee0 	.word	0x20000ee0
 8004ebc:	20000ee8 	.word	0x20000ee8
 8004ec0:	20000ed0 	.word	0x20000ed0
 8004ec4:	200009f8 	.word	0x200009f8
 8004ec8:	200009f4 	.word	0x200009f4
 8004ecc:	20000ed8 	.word	0x20000ed8
 8004ed0:	20000edc 	.word	0x20000edc

08004ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eda:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <vTaskSwitchContext+0xb0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <vTaskSwitchContext+0xb4>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ee8:	e046      	b.n	8004f78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <vTaskSwitchContext+0xb4>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <vTaskSwitchContext+0xb8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e010      	b.n	8004f1a <vTaskSwitchContext+0x46>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vTaskSwitchContext+0x40>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vTaskSwitchContext+0x3e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	491d      	ldr	r1, [pc, #116]	; (8004f90 <vTaskSwitchContext+0xbc>)
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0e4      	beq.n	8004ef8 <vTaskSwitchContext+0x24>
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <vTaskSwitchContext+0xbc>)
 8004f3a:	4413      	add	r3, r2
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d104      	bne.n	8004f5e <vTaskSwitchContext+0x8a>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <vTaskSwitchContext+0xc0>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <vTaskSwitchContext+0xb8>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <vTaskSwitchContext+0xc0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3364      	adds	r3, #100	; 0x64
 8004f74:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <vTaskSwitchContext+0xc4>)
 8004f76:	6013      	str	r3, [r2, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000ef0 	.word	0x20000ef0
 8004f88:	20000edc 	.word	0x20000edc
 8004f8c:	20000ed0 	.word	0x20000ed0
 8004f90:	200009f8 	.word	0x200009f8
 8004f94:	200009f4 	.word	0x200009f4
 8004f98:	20000010 	.word	0x20000010

08004f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <vTaskPlaceOnEventList+0x44>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3318      	adds	r3, #24
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe fde6 	bl	8003b9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f000 fc60 	bl	8005898 <prvAddCurrentTaskToDelayedList>
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	200009f4 	.word	0x200009f4

08004fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	617b      	str	r3, [r7, #20]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <vTaskPlaceOnEventListRestricted+0x54>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3318      	adds	r3, #24
 8005012:	4619      	mov	r1, r3
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7fe fd9e 	bl	8003b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
 8005024:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	68b8      	ldr	r0, [r7, #8]
 800502a:	f000 fc35 	bl	8005898 <prvAddCurrentTaskToDelayedList>
	}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200009f4 	.word	0x200009f4

0800503c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60fb      	str	r3, [r7, #12]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	3318      	adds	r3, #24
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe fdcd 	bl	8003c0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <xTaskRemoveFromEventList+0xb0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11d      	bne.n	80050b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fdc4 	bl	8003c0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	4b19      	ldr	r3, [pc, #100]	; (80050f0 <xTaskRemoveFromEventList+0xb4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d903      	bls.n	8005098 <xTaskRemoveFromEventList+0x5c>
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <xTaskRemoveFromEventList+0xb4>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <xTaskRemoveFromEventList+0xb8>)
 80050a6:	441a      	add	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fd51 	bl	8003b56 <vListInsertEnd>
 80050b4:	e005      	b.n	80050c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3318      	adds	r3, #24
 80050ba:	4619      	mov	r1, r3
 80050bc:	480e      	ldr	r0, [pc, #56]	; (80050f8 <xTaskRemoveFromEventList+0xbc>)
 80050be:	f7fe fd4a 	bl	8003b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <xTaskRemoveFromEventList+0xc0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d905      	bls.n	80050dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <xTaskRemoveFromEventList+0xc4>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e001      	b.n	80050e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80050e0:	697b      	ldr	r3, [r7, #20]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000ef0 	.word	0x20000ef0
 80050f0:	20000ed0 	.word	0x20000ed0
 80050f4:	200009f8 	.word	0x200009f8
 80050f8:	20000e88 	.word	0x20000e88
 80050fc:	200009f4 	.word	0x200009f4
 8005100:	20000edc 	.word	0x20000edc

08005104 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <vTaskInternalSetTimeOutState+0x24>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <vTaskInternalSetTimeOutState+0x28>)
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	605a      	str	r2, [r3, #4]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000ee0 	.word	0x20000ee0
 800512c:	20000ecc 	.word	0x20000ecc

08005130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	613b      	str	r3, [r7, #16]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60fb      	str	r3, [r7, #12]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005172:	f000 ffeb 	bl	800614c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <xTaskCheckForTimeOut+0xbc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d102      	bne.n	8005196 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	e023      	b.n	80051de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <xTaskCheckForTimeOut+0xc0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d007      	beq.n	80051b2 <xTaskCheckForTimeOut+0x82>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d302      	bcc.n	80051b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e015      	b.n	80051de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d20b      	bcs.n	80051d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff9b 	bl	8005104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e004      	b.n	80051de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051da:	2301      	movs	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051de:	f000 ffe5 	bl	80061ac <vPortExitCritical>

	return xReturn;
 80051e2:	69fb      	ldr	r3, [r7, #28]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000ecc 	.word	0x20000ecc
 80051f0:	20000ee0 	.word	0x20000ee0

080051f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <vTaskMissedYield+0x14>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000edc 	.word	0x20000edc

0800520c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005214:	f000 f852 	bl	80052bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <prvIdleTask+0x28>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d9f9      	bls.n	8005214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <prvIdleTask+0x2c>)
 8005222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005230:	e7f0      	b.n	8005214 <prvIdleTask+0x8>
 8005232:	bf00      	nop
 8005234:	200009f8 	.word	0x200009f8
 8005238:	e000ed04 	.word	0xe000ed04

0800523c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	e00c      	b.n	8005262 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4a12      	ldr	r2, [pc, #72]	; (800529c <prvInitialiseTaskLists+0x60>)
 8005254:	4413      	add	r3, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fc52 	bl	8003b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b37      	cmp	r3, #55	; 0x37
 8005266:	d9ef      	bls.n	8005248 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005268:	480d      	ldr	r0, [pc, #52]	; (80052a0 <prvInitialiseTaskLists+0x64>)
 800526a:	f7fe fc49 	bl	8003b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800526e:	480d      	ldr	r0, [pc, #52]	; (80052a4 <prvInitialiseTaskLists+0x68>)
 8005270:	f7fe fc46 	bl	8003b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005274:	480c      	ldr	r0, [pc, #48]	; (80052a8 <prvInitialiseTaskLists+0x6c>)
 8005276:	f7fe fc43 	bl	8003b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800527a:	480c      	ldr	r0, [pc, #48]	; (80052ac <prvInitialiseTaskLists+0x70>)
 800527c:	f7fe fc40 	bl	8003b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005280:	480b      	ldr	r0, [pc, #44]	; (80052b0 <prvInitialiseTaskLists+0x74>)
 8005282:	f7fe fc3d 	bl	8003b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <prvInitialiseTaskLists+0x78>)
 8005288:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <prvInitialiseTaskLists+0x64>)
 800528a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <prvInitialiseTaskLists+0x7c>)
 800528e:	4a05      	ldr	r2, [pc, #20]	; (80052a4 <prvInitialiseTaskLists+0x68>)
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200009f8 	.word	0x200009f8
 80052a0:	20000e58 	.word	0x20000e58
 80052a4:	20000e6c 	.word	0x20000e6c
 80052a8:	20000e88 	.word	0x20000e88
 80052ac:	20000e9c 	.word	0x20000e9c
 80052b0:	20000eb4 	.word	0x20000eb4
 80052b4:	20000e80 	.word	0x20000e80
 80052b8:	20000e84 	.word	0x20000e84

080052bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c2:	e019      	b.n	80052f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052c4:	f000 ff42 	bl	800614c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <prvCheckTasksWaitingTermination+0x50>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fc99 	bl	8003c0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <prvCheckTasksWaitingTermination+0x54>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3b01      	subs	r3, #1
 80052e0:	4a0b      	ldr	r2, [pc, #44]	; (8005310 <prvCheckTasksWaitingTermination+0x54>)
 80052e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <prvCheckTasksWaitingTermination+0x58>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	4a0a      	ldr	r2, [pc, #40]	; (8005314 <prvCheckTasksWaitingTermination+0x58>)
 80052ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052ee:	f000 ff5d 	bl	80061ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f810 	bl	8005318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <prvCheckTasksWaitingTermination+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e1      	bne.n	80052c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000e9c 	.word	0x20000e9c
 8005310:	20000ec8 	.word	0x20000ec8
 8005314:	20000eb0 	.word	0x20000eb0

08005318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3364      	adds	r3, #100	; 0x64
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fa33 	bl	8006790 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8005330:	2b00      	cmp	r3, #0
 8005332:	d108      	bne.n	8005346 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f8cb 	bl	80064d4 <vPortFree>
				vPortFree( pxTCB );
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f8c8 	bl	80064d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005344:	e018      	b.n	8005378 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800534c:	2b01      	cmp	r3, #1
 800534e:	d103      	bne.n	8005358 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 f8bf 	bl	80064d4 <vPortFree>
	}
 8005356:	e00f      	b.n	8005378 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800535e:	2b02      	cmp	r3, #2
 8005360:	d00a      	beq.n	8005378 <prvDeleteTCB+0x60>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60fb      	str	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <prvDeleteTCB+0x5e>
	}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <prvResetNextTaskUnblockTime+0x40>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <prvResetNextTaskUnblockTime+0x14>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <prvResetNextTaskUnblockTime+0x16>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <prvResetNextTaskUnblockTime+0x44>)
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053a2:	e008      	b.n	80053b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <prvResetNextTaskUnblockTime+0x40>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <prvResetNextTaskUnblockTime+0x44>)
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	20000e80 	.word	0x20000e80
 80053c4:	20000ee8 	.word	0x20000ee8

080053c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053ce:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <xTaskGetSchedulerState+0x34>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053d6:	2301      	movs	r3, #1
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	e008      	b.n	80053ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <xTaskGetSchedulerState+0x38>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053e4:	2302      	movs	r3, #2
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	e001      	b.n	80053ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053ee:	687b      	ldr	r3, [r7, #4]
	}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20000ed4 	.word	0x20000ed4
 8005400:	20000ef0 	.word	0x20000ef0

08005404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d056      	beq.n	80054c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800541a:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <xTaskPriorityDisinherit+0xd0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	429a      	cmp	r2, r3
 8005422:	d00a      	beq.n	800543a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	1e5a      	subs	r2, r3, #1
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	429a      	cmp	r2, r3
 800546c:	d02c      	beq.n	80054c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	2b00      	cmp	r3, #0
 8005474:	d128      	bne.n	80054c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	3304      	adds	r3, #4
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fbc6 	bl	8003c0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <xTaskPriorityDisinherit+0xd4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d903      	bls.n	80054a8 <xTaskPriorityDisinherit+0xa4>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	4a0c      	ldr	r2, [pc, #48]	; (80054d8 <xTaskPriorityDisinherit+0xd4>)
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <xTaskPriorityDisinherit+0xd8>)
 80054b6:	441a      	add	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7fe fb49 	bl	8003b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054c8:	697b      	ldr	r3, [r7, #20]
	}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200009f4 	.word	0x200009f4
 80054d8:	20000ed0 	.word	0x20000ed0
 80054dc:	200009f8 	.word	0x200009f8

080054e0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80054ee:	f000 fe2d 	bl	800614c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80054f2:	4b29      	ldr	r3, [pc, #164]	; (8005598 <xTaskNotifyWait+0xb8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d01c      	beq.n	800553a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <xTaskNotifyWait+0xb8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	43d2      	mvns	r2, r2
 800550c:	400a      	ands	r2, r1
 800550e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005512:	4b21      	ldr	r3, [pc, #132]	; (8005598 <xTaskNotifyWait+0xb8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005522:	2101      	movs	r1, #1
 8005524:	6838      	ldr	r0, [r7, #0]
 8005526:	f000 f9b7 	bl	8005898 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800552a:	4b1c      	ldr	r3, [pc, #112]	; (800559c <xTaskNotifyWait+0xbc>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800553a:	f000 fe37 	bl	80061ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800553e:	f000 fe05 	bl	800614c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <xTaskNotifyWait+0xb8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <xTaskNotifyWait+0xb8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d002      	beq.n	8005568 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e00a      	b.n	800557e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <xTaskNotifyWait+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	43d2      	mvns	r2, r2
 8005574:	400a      	ands	r2, r1
 8005576:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <xTaskNotifyWait+0xb8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 8005588:	f000 fe10 	bl	80061ac <vPortExitCritical>

		return xReturn;
 800558c:	697b      	ldr	r3, [r7, #20]
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200009f4 	.word	0x200009f4
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80055b0:	2301      	movs	r3, #1
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <xTaskGenericNotify+0x30>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61bb      	str	r3, [r7, #24]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80055d4:	f000 fdba 	bl	800614c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80055ee:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d82d      	bhi.n	800565a <xTaskGenericNotify+0xba>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <xTaskGenericNotify+0x64>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	0800565b 	.word	0x0800565b
 8005608:	08005619 	.word	0x08005619
 800560c:	0800562b 	.word	0x0800562b
 8005610:	0800563b 	.word	0x0800563b
 8005614:	08005645 	.word	0x08005645
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	431a      	orrs	r2, r3
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005628:	e017      	b.n	800565a <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005638:	e00f      	b.n	800565a <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8005642:	e00a      	b.n	800565a <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d004      	beq.n	8005654 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005652:	e001      	b.n	8005658 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8005654:	2300      	movs	r3, #0
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005658:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800565a:	7ffb      	ldrb	r3, [r7, #31]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d13a      	bne.n	80056d6 <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	3304      	adds	r3, #4
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fad1 	bl	8003c0c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <xTaskGenericNotify+0x144>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d903      	bls.n	800567e <xTaskGenericNotify+0xde>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	4a1a      	ldr	r2, [pc, #104]	; (80056e4 <xTaskGenericNotify+0x144>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <xTaskGenericNotify+0x148>)
 800568c:	441a      	add	r2, r3
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7fe fa5e 	bl	8003b56 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <xTaskGenericNotify+0x118>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	617b      	str	r3, [r7, #20]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <xTaskGenericNotify+0x14c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d907      	bls.n	80056d6 <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <xTaskGenericNotify+0x150>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80056d6:	f000 fd69 	bl	80061ac <vPortExitCritical>

		return xReturn;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	; 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000ed0 	.word	0x20000ed0
 80056e8:	200009f8 	.word	0x200009f8
 80056ec:	200009f4 	.word	0x200009f4
 80056f0:	e000ed04 	.word	0xe000ed04

080056f4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	; 0x38
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	4613      	mov	r3, r2
 8005702:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005704:	2301      	movs	r3, #1
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005724:	f000 fdd4 	bl	80062d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800572c:	f3ef 8211 	mrs	r2, BASEPRI
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	623a      	str	r2, [r7, #32]
 8005742:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005744:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	2202      	movs	r2, #2
 8005766:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b04      	cmp	r3, #4
 800576e:	d82f      	bhi.n	80057d0 <xTaskGenericNotifyFromISR+0xdc>
 8005770:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <xTaskGenericNotifyFromISR+0x84>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	080057d1 	.word	0x080057d1
 800577c:	0800578d 	.word	0x0800578d
 8005780:	0800579f 	.word	0x0800579f
 8005784:	080057af 	.word	0x080057af
 8005788:	080057b9 	.word	0x080057b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	431a      	orrs	r2, r3
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800579c:	e018      	b.n	80057d0 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80057ac:	e010      	b.n	80057d0 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 80057b6:	e00b      	b.n	80057d0 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80057b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d004      	beq.n	80057ca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80057c8:	e001      	b.n	80057ce <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80057ce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80057d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d147      	bne.n	8005868 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	61bb      	str	r3, [r7, #24]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f6:	4b22      	ldr	r3, [pc, #136]	; (8005880 <xTaskGenericNotifyFromISR+0x18c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11d      	bne.n	800583a <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3304      	adds	r3, #4
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe fa02 	bl	8003c0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4b1d      	ldr	r3, [pc, #116]	; (8005884 <xTaskGenericNotifyFromISR+0x190>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <xTaskGenericNotifyFromISR+0x128>
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <xTaskGenericNotifyFromISR+0x190>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <xTaskGenericNotifyFromISR+0x194>)
 800582a:	441a      	add	r2, r3
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe f98f 	bl	8003b56 <vListInsertEnd>
 8005838:	e005      	b.n	8005846 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3318      	adds	r3, #24
 800583e:	4619      	mov	r1, r3
 8005840:	4812      	ldr	r0, [pc, #72]	; (800588c <xTaskGenericNotifyFromISR+0x198>)
 8005842:	f7fe f988 	bl	8003b56 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4b11      	ldr	r3, [pc, #68]	; (8005890 <xTaskGenericNotifyFromISR+0x19c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	429a      	cmp	r2, r3
 8005852:	d909      	bls.n	8005868 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800585a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e002      	b.n	8005868 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <xTaskGenericNotifyFromISR+0x1a0>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f383 8811 	msr	BASEPRI, r3
}
 8005872:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005876:	4618      	mov	r0, r3
 8005878:	3738      	adds	r7, #56	; 0x38
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000ef0 	.word	0x20000ef0
 8005884:	20000ed0 	.word	0x20000ed0
 8005888:	200009f8 	.word	0x200009f8
 800588c:	20000e88 	.word	0x20000e88
 8005890:	200009f4 	.word	0x200009f4
 8005894:	20000edc 	.word	0x20000edc

08005898 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058a2:	4b21      	ldr	r3, [pc, #132]	; (8005928 <prvAddCurrentTaskToDelayedList+0x90>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <prvAddCurrentTaskToDelayedList+0x94>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe f9ac 	bl	8003c0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d10a      	bne.n	80058d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <prvAddCurrentTaskToDelayedList+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4819      	ldr	r0, [pc, #100]	; (8005930 <prvAddCurrentTaskToDelayedList+0x98>)
 80058cc:	f7fe f943 	bl	8003b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058d0:	e026      	b.n	8005920 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058da:	4b14      	ldr	r3, [pc, #80]	; (800592c <prvAddCurrentTaskToDelayedList+0x94>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d209      	bcs.n	80058fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <prvAddCurrentTaskToDelayedList+0x94>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe f950 	bl	8003b9c <vListInsert>
}
 80058fc:	e010      	b.n	8005920 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058fe:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvAddCurrentTaskToDelayedList+0x94>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f7fe f946 	bl	8003b9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d202      	bcs.n	8005920 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <prvAddCurrentTaskToDelayedList+0xa4>)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000ecc 	.word	0x20000ecc
 800592c:	200009f4 	.word	0x200009f4
 8005930:	20000eb4 	.word	0x20000eb4
 8005934:	20000e84 	.word	0x20000e84
 8005938:	20000e80 	.word	0x20000e80
 800593c:	20000ee8 	.word	0x20000ee8

08005940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800594a:	f000 facb 	bl	8005ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <xTimerCreateTimerTask+0x80>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d021      	beq.n	800599a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800595e:	1d3a      	adds	r2, r7, #4
 8005960:	f107 0108 	add.w	r1, r7, #8
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe f8af 	bl	8003acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	9202      	str	r2, [sp, #8]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	2302      	movs	r3, #2
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2300      	movs	r3, #0
 800597e:	460a      	mov	r2, r1
 8005980:	4910      	ldr	r1, [pc, #64]	; (80059c4 <xTimerCreateTimerTask+0x84>)
 8005982:	4811      	ldr	r0, [pc, #68]	; (80059c8 <xTimerCreateTimerTask+0x88>)
 8005984:	f7fe ff0e 	bl	80047a4 <xTaskCreateStatic>
 8005988:	4603      	mov	r3, r0
 800598a:	4a10      	ldr	r2, [pc, #64]	; (80059cc <xTimerCreateTimerTask+0x8c>)
 800598c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <xTimerCreateTimerTask+0x8c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005996:	2301      	movs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80059b6:	697b      	ldr	r3, [r7, #20]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000f24 	.word	0x20000f24
 80059c4:	080069c0 	.word	0x080069c0
 80059c8:	08005aed 	.word	0x08005aed
 80059cc:	20000f28 	.word	0x20000f28

080059d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	623b      	str	r3, [r7, #32]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <xTimerGenericCommand+0x98>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d02a      	beq.n	8005a5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b05      	cmp	r3, #5
 8005a16:	dc18      	bgt.n	8005a4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a18:	f7ff fcd6 	bl	80053c8 <xTaskGetSchedulerState>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d109      	bne.n	8005a36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <xTimerGenericCommand+0x98>)
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	f107 0110 	add.w	r1, r7, #16
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a2e:	f7fe fa57 	bl	8003ee0 <xQueueGenericSend>
 8005a32:	6278      	str	r0, [r7, #36]	; 0x24
 8005a34:	e012      	b.n	8005a5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <xTimerGenericCommand+0x98>)
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	f107 0110 	add.w	r1, r7, #16
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2200      	movs	r2, #0
 8005a42:	f7fe fa4d 	bl	8003ee0 <xQueueGenericSend>
 8005a46:	6278      	str	r0, [r7, #36]	; 0x24
 8005a48:	e008      	b.n	8005a5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <xTimerGenericCommand+0x98>)
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	f107 0110 	add.w	r1, r7, #16
 8005a52:	2300      	movs	r3, #0
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	f7fe fb41 	bl	80040dc <xQueueGenericSendFromISR>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000f24 	.word	0x20000f24

08005a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <prvProcessExpiredTimer+0x7c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe f8c1 	bl	8003c0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d122      	bne.n	8005ad8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	18d1      	adds	r1, r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f000 f8c8 	bl	8005c34 <prvInsertTimerInActiveList>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aaa:	2300      	movs	r3, #0
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	f7ff ff8b 	bl	80059d0 <xTimerGenericCommand>
 8005aba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	60fb      	str	r3, [r7, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	6978      	ldr	r0, [r7, #20]
 8005ade:	4798      	blx	r3
}
 8005ae0:	bf00      	nop
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000f1c 	.word	0x20000f1c

08005aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005af4:	f107 0308 	add.w	r3, r7, #8
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f857 	bl	8005bac <prvGetNextExpireTime>
 8005afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4619      	mov	r1, r3
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f803 	bl	8005b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b0a:	f000 f8d5 	bl	8005cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b0e:	e7f1      	b.n	8005af4 <prvTimerTask+0x8>

08005b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b1a:	f7ff f863 	bl	8004be4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f866 	bl	8005bf4 <prvSampleTimeNow>
 8005b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d130      	bne.n	8005b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <prvProcessTimerOrBlockTask+0x3c>
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d806      	bhi.n	8005b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b3e:	f7ff f85f 	bl	8004c00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff ff91 	bl	8005a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b4a:	e024      	b.n	8005b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <prvProcessTimerOrBlockTask+0x90>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <prvProcessTimerOrBlockTask+0x94>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7fe fde3 	bl	800473c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b76:	f7ff f843 	bl	8004c00 <xTaskResumeAll>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <prvProcessTimerOrBlockTask+0x98>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
}
 8005b90:	e001      	b.n	8005b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b92:	f7ff f835 	bl	8004c00 <xTaskResumeAll>
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000f20 	.word	0x20000f20
 8005ba4:	20000f24 	.word	0x20000f24
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <prvGetNextExpireTime+0x44>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d105      	bne.n	8005bde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <prvGetNextExpireTime+0x44>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e001      	b.n	8005be2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000f1c 	.word	0x20000f1c

08005bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bfc:	f7ff f89e 	bl	8004d3c <xTaskGetTickCount>
 8005c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <prvSampleTimeNow+0x3c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d205      	bcs.n	8005c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c0c:	f000 f908 	bl	8005e20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e002      	b.n	8005c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c1e:	4a04      	ldr	r2, [pc, #16]	; (8005c30 <prvSampleTimeNow+0x3c>)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000f2c 	.word	0x20000f2c

08005c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d812      	bhi.n	8005c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e01b      	b.n	8005ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <prvInsertTimerInActiveList+0x7c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fd ff8f 	bl	8003b9c <vListInsert>
 8005c7e:	e012      	b.n	8005ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d206      	bcs.n	8005c96 <prvInsertTimerInActiveList+0x62>
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e007      	b.n	8005ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <prvInsertTimerInActiveList+0x80>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f7fd ff7b 	bl	8003b9c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ca6:	697b      	ldr	r3, [r7, #20]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000f20 	.word	0x20000f20
 8005cb4:	20000f1c 	.word	0x20000f1c

08005cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cbe:	e09d      	b.n	8005dfc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da18      	bge.n	8005cf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	3304      	adds	r3, #4
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	61fb      	str	r3, [r7, #28]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cee:	6850      	ldr	r0, [r2, #4]
 8005cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf2:	6892      	ldr	r2, [r2, #8]
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db7d      	blt.n	8005dfa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fd ff7c 	bl	8003c0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d14:	463b      	mov	r3, r7
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff6c 	bl	8005bf4 <prvSampleTimeNow>
 8005d1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b09      	cmp	r3, #9
 8005d22:	d86b      	bhi.n	8005dfc <prvProcessReceivedCommands+0x144>
 8005d24:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <prvProcessReceivedCommands+0x74>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d55 	.word	0x08005d55
 8005d38:	08005dfd 	.word	0x08005dfd
 8005d3c:	08005db1 	.word	0x08005db1
 8005d40:	08005de9 	.word	0x08005de9
 8005d44:	08005d55 	.word	0x08005d55
 8005d48:	08005d55 	.word	0x08005d55
 8005d4c:	08005dfd 	.word	0x08005dfd
 8005d50:	08005db1 	.word	0x08005db1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	18d1      	adds	r1, r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d62:	f7ff ff67 	bl	8005c34 <prvInsertTimerInActiveList>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d047      	beq.n	8005dfc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d13f      	bne.n	8005dfc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	441a      	add	r2, r3
 8005d84:	2300      	movs	r3, #0
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8e:	f7ff fe1f 	bl	80059d0 <xTimerGenericCommand>
 8005d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d130      	bne.n	8005dfc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	61bb      	str	r3, [r7, #24]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	617b      	str	r3, [r7, #20]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	18d1      	adds	r1, r2, r3
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de2:	f7ff ff27 	bl	8005c34 <prvInsertTimerInActiveList>
					break;
 8005de6:	e009      	b.n	8005dfc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df4:	f000 fb6e 	bl	80064d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005df8:	e000      	b.n	8005dfc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005dfa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <prvProcessReceivedCommands+0x164>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	1d39      	adds	r1, r7, #4
 8005e02:	2200      	movs	r2, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fa01 	bl	800420c <xQueueReceive>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f af57 	bne.w	8005cc0 <prvProcessReceivedCommands+0x8>
	}
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	3730      	adds	r7, #48	; 0x30
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000f24 	.word	0x20000f24

08005e20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e26:	e045      	b.n	8005eb4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e32:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd fee3 	bl	8003c0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d12e      	bne.n	8005eb4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d90e      	bls.n	8005e86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e74:	4b19      	ldr	r3, [pc, #100]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fd fe8c 	bl	8003b9c <vListInsert>
 8005e84:	e016      	b.n	8005eb4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fd9d 	bl	80059d0 <xTimerGenericCommand>
 8005e96:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	603b      	str	r3, [r7, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1b4      	bne.n	8005e28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <prvSwitchTimerLists+0xbc>)
 8005eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <prvSwitchTimerLists+0xc0>)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6013      	str	r3, [r2, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000f1c 	.word	0x20000f1c
 8005ee0:	20000f20 	.word	0x20000f20

08005ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005eea:	f000 f92f 	bl	800614c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eee:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d120      	bne.n	8005f38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ef6:	4814      	ldr	r0, [pc, #80]	; (8005f48 <prvCheckForValidListAndQueue+0x64>)
 8005ef8:	f7fd fe02 	bl	8003b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005efc:	4813      	ldr	r0, [pc, #76]	; (8005f4c <prvCheckForValidListAndQueue+0x68>)
 8005efe:	f7fd fdff 	bl	8003b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <prvCheckForValidListAndQueue+0x6c>)
 8005f04:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <prvCheckForValidListAndQueue+0x64>)
 8005f06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <prvCheckForValidListAndQueue+0x70>)
 8005f0a:	4a10      	ldr	r2, [pc, #64]	; (8005f4c <prvCheckForValidListAndQueue+0x68>)
 8005f0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <prvCheckForValidListAndQueue+0x74>)
 8005f14:	4a11      	ldr	r2, [pc, #68]	; (8005f5c <prvCheckForValidListAndQueue+0x78>)
 8005f16:	2110      	movs	r1, #16
 8005f18:	200a      	movs	r0, #10
 8005f1a:	f7fd ff09 	bl	8003d30 <xQueueGenericCreateStatic>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005f22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	490b      	ldr	r1, [pc, #44]	; (8005f60 <prvCheckForValidListAndQueue+0x7c>)
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fbda 	bl	80046ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f38:	f000 f938 	bl	80061ac <vPortExitCritical>
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000f24 	.word	0x20000f24
 8005f48:	20000ef4 	.word	0x20000ef4
 8005f4c:	20000f08 	.word	0x20000f08
 8005f50:	20000f1c 	.word	0x20000f1c
 8005f54:	20000f20 	.word	0x20000f20
 8005f58:	20000fd0 	.word	0x20000fd0
 8005f5c:	20000f30 	.word	0x20000f30
 8005f60:	080069c8 	.word	0x080069c8

08005f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3b04      	subs	r3, #4
 8005f74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 0201 	bic.w	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <pxPortInitialiseStack+0x54>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b14      	subs	r3, #20
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b20      	subs	r3, #32
 8005faa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fac:	68fb      	ldr	r3, [r7, #12]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr
 8005fb8:	08005fbd 	.word	0x08005fbd

08005fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fc6:	4b12      	ldr	r3, [pc, #72]	; (8006010 <prvTaskExitError+0x54>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d00a      	beq.n	8005fe6 <prvTaskExitError+0x2a>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60fb      	str	r3, [r7, #12]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <prvTaskExitError+0x28>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60bb      	str	r3, [r7, #8]
}
 8005ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ffa:	bf00      	nop
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0fc      	beq.n	8005ffc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000000c 	.word	0x2000000c
	...

08006020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006020:	4b07      	ldr	r3, [pc, #28]	; (8006040 <pxCurrentTCBConst2>)
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	6808      	ldr	r0, [r1, #0]
 8006026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800602a:	f380 8809 	msr	PSP, r0
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	f04e 0e0d 	orr.w	lr, lr, #13
 800603e:	4770      	bx	lr

08006040 <pxCurrentTCBConst2>:
 8006040:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006048:	4806      	ldr	r0, [pc, #24]	; (8006064 <prvPortStartFirstTask+0x1c>)
 800604a:	6800      	ldr	r0, [r0, #0]
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	f380 8808 	msr	MSP, r0
 8006052:	b662      	cpsie	i
 8006054:	b661      	cpsie	f
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	df00      	svc	0
 8006060:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006062:	bf00      	nop
 8006064:	e000ed08 	.word	0xe000ed08

08006068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800606e:	4b32      	ldr	r3, [pc, #200]	; (8006138 <xPortStartScheduler+0xd0>)
 8006070:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006090:	b2da      	uxtb	r2, r3
 8006092:	4b2a      	ldr	r3, [pc, #168]	; (800613c <xPortStartScheduler+0xd4>)
 8006094:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <xPortStartScheduler+0xd8>)
 8006098:	2207      	movs	r2, #7
 800609a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800609c:	e009      	b.n	80060b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800609e:	4b28      	ldr	r3, [pc, #160]	; (8006140 <xPortStartScheduler+0xd8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	4a26      	ldr	r2, [pc, #152]	; (8006140 <xPortStartScheduler+0xd8>)
 80060a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d0ef      	beq.n	800609e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <xPortStartScheduler+0xd8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1c3 0307 	rsb	r3, r3, #7
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d00a      	beq.n	80060e0 <xPortStartScheduler+0x78>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	60bb      	str	r3, [r7, #8]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <xPortStartScheduler+0xd8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	4a16      	ldr	r2, [pc, #88]	; (8006140 <xPortStartScheduler+0xd8>)
 80060e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <xPortStartScheduler+0xd8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f2:	4a13      	ldr	r2, [pc, #76]	; (8006140 <xPortStartScheduler+0xd8>)
 80060f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <xPortStartScheduler+0xdc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a10      	ldr	r2, [pc, #64]	; (8006144 <xPortStartScheduler+0xdc>)
 8006104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <xPortStartScheduler+0xdc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <xPortStartScheduler+0xdc>)
 8006110:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006114:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006116:	f000 f8b9 	bl	800628c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <xPortStartScheduler+0xe0>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006120:	f7ff ff92 	bl	8006048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006124:	f7fe fed6 	bl	8004ed4 <vTaskSwitchContext>
	prvTaskExitError();
 8006128:	f7ff ff48 	bl	8005fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	e000e400 	.word	0xe000e400
 800613c:	20001020 	.word	0x20001020
 8006140:	20001024 	.word	0x20001024
 8006144:	e000ed20 	.word	0xe000ed20
 8006148:	2000000c 	.word	0x2000000c

0800614c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	607b      	str	r3, [r7, #4]
}
 8006164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <vPortEnterCritical+0x58>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	4a0d      	ldr	r2, [pc, #52]	; (80061a4 <vPortEnterCritical+0x58>)
 800616e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <vPortEnterCritical+0x58>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10f      	bne.n	8006198 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <vPortEnterCritical+0x5c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <vPortEnterCritical+0x4c>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	603b      	str	r3, [r7, #0]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <vPortEnterCritical+0x4a>
	}
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <vPortExitCritical+0x4c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <vPortExitCritical+0x24>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	607b      	str	r3, [r7, #4]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <vPortExitCritical+0x4c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <vPortExitCritical+0x4c>)
 80061d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vPortExitCritical+0x4c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <vPortExitCritical+0x42>
 80061e2:	2300      	movs	r3, #0
 80061e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f383 8811 	msr	BASEPRI, r3
}
 80061ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr
 80061f8:	2000000c 	.word	0x2000000c
 80061fc:	00000000 	.word	0x00000000

08006200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006200:	f3ef 8009 	mrs	r0, PSP
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <pxCurrentTCBConst>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006210:	6010      	str	r0, [r2, #0]
 8006212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800621a:	f380 8811 	msr	BASEPRI, r0
 800621e:	f7fe fe59 	bl	8004ed4 <vTaskSwitchContext>
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006236:	f380 8809 	msr	PSP, r0
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	4770      	bx	lr

08006240 <pxCurrentTCBConst>:
 8006240:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
}
 8006260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006262:	f7fe fd79 	bl	8004d58 <xTaskIncrementTick>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <SysTick_Handler+0x40>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f383 8811 	msr	BASEPRI, r3
}
 800627e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <vPortSetupTimerInterrupt+0x30>)
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <vPortSetupTimerInterrupt+0x34>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800629c:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <vPortSetupTimerInterrupt+0x38>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a09      	ldr	r2, [pc, #36]	; (80062c8 <vPortSetupTimerInterrupt+0x3c>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	4a08      	ldr	r2, [pc, #32]	; (80062cc <vPortSetupTimerInterrupt+0x40>)
 80062aa:	3b01      	subs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062ae:	4b03      	ldr	r3, [pc, #12]	; (80062bc <vPortSetupTimerInterrupt+0x30>)
 80062b0:	2207      	movs	r2, #7
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	e000e010 	.word	0xe000e010
 80062c0:	e000e018 	.word	0xe000e018
 80062c4:	20000000 	.word	0x20000000
 80062c8:	10624dd3 	.word	0x10624dd3
 80062cc:	e000e014 	.word	0xe000e014

080062d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062d6:	f3ef 8305 	mrs	r3, IPSR
 80062da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d914      	bls.n	800630c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062e2:	4a16      	ldr	r2, [pc, #88]	; (800633c <vPortValidateInterruptPriority+0x6c>)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062ec:	4b14      	ldr	r3, [pc, #80]	; (8006340 <vPortValidateInterruptPriority+0x70>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	7afa      	ldrb	r2, [r7, #11]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d20a      	bcs.n	800630c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	607b      	str	r3, [r7, #4]
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <vPortValidateInterruptPriority+0x74>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <vPortValidateInterruptPriority+0x78>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d90a      	bls.n	8006332 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	603b      	str	r3, [r7, #0]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <vPortValidateInterruptPriority+0x60>
	}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	e000e3f0 	.word	0xe000e3f0
 8006340:	20001020 	.word	0x20001020
 8006344:	e000ed0c 	.word	0xe000ed0c
 8006348:	20001024 	.word	0x20001024

0800634c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006358:	f7fe fc44 	bl	8004be4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800635c:	4b58      	ldr	r3, [pc, #352]	; (80064c0 <pvPortMalloc+0x174>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006364:	f000 f910 	bl	8006588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006368:	4b56      	ldr	r3, [pc, #344]	; (80064c4 <pvPortMalloc+0x178>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 808e 	bne.w	8006492 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01d      	beq.n	80063b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800637c:	2208      	movs	r2, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d014      	beq.n	80063b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f023 0307 	bic.w	r3, r3, #7
 8006394:	3308      	adds	r3, #8
 8006396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <pvPortMalloc+0x6c>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	617b      	str	r3, [r7, #20]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d069      	beq.n	8006492 <pvPortMalloc+0x146>
 80063be:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <pvPortMalloc+0x17c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d864      	bhi.n	8006492 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063c8:	4b40      	ldr	r3, [pc, #256]	; (80064cc <pvPortMalloc+0x180>)
 80063ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063cc:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <pvPortMalloc+0x180>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d2:	e004      	b.n	80063de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <pvPortMalloc+0xa4>
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f1      	bne.n	80063d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063f0:	4b33      	ldr	r3, [pc, #204]	; (80064c0 <pvPortMalloc+0x174>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d04b      	beq.n	8006492 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2208      	movs	r2, #8
 8006400:	4413      	add	r3, r2
 8006402:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	2308      	movs	r3, #8
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	429a      	cmp	r2, r3
 800641a:	d91f      	bls.n	800645c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <pvPortMalloc+0xf8>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	613b      	str	r3, [r7, #16]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006456:	69b8      	ldr	r0, [r7, #24]
 8006458:	f000 f8f8 	bl	800664c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800645c:	4b1a      	ldr	r3, [pc, #104]	; (80064c8 <pvPortMalloc+0x17c>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <pvPortMalloc+0x17c>)
 8006468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800646a:	4b17      	ldr	r3, [pc, #92]	; (80064c8 <pvPortMalloc+0x17c>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <pvPortMalloc+0x184>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d203      	bcs.n	800647e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <pvPortMalloc+0x17c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <pvPortMalloc+0x184>)
 800647c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <pvPortMalloc+0x178>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	431a      	orrs	r2, r3
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006492:	f7fe fbb5 	bl	8004c00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <pvPortMalloc+0x16a>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <pvPortMalloc+0x168>
	return pvReturn;
 80064b6:	69fb      	ldr	r3, [r7, #28]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3728      	adds	r7, #40	; 0x28
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20002430 	.word	0x20002430
 80064c4:	2000243c 	.word	0x2000243c
 80064c8:	20002434 	.word	0x20002434
 80064cc:	20002428 	.word	0x20002428
 80064d0:	20002438 	.word	0x20002438

080064d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d048      	beq.n	8006578 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064e6:	2308      	movs	r3, #8
 80064e8:	425b      	negs	r3, r3
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	4b21      	ldr	r3, [pc, #132]	; (8006580 <vPortFree+0xac>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vPortFree+0x44>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60fb      	str	r3, [r7, #12]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <vPortFree+0x62>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60bb      	str	r3, [r7, #8]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <vPortFree+0xac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d019      	beq.n	8006578 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d115      	bne.n	8006578 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <vPortFree+0xac>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	43db      	mvns	r3, r3
 8006556:	401a      	ands	r2, r3
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800655c:	f7fe fb42 	bl	8004be4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <vPortFree+0xb0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4413      	add	r3, r2
 800656a:	4a06      	ldr	r2, [pc, #24]	; (8006584 <vPortFree+0xb0>)
 800656c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656e:	6938      	ldr	r0, [r7, #16]
 8006570:	f000 f86c 	bl	800664c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006574:	f7fe fb44 	bl	8004c00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006578:	bf00      	nop
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	2000243c 	.word	0x2000243c
 8006584:	20002434 	.word	0x20002434

08006588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800658e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006594:	4b27      	ldr	r3, [pc, #156]	; (8006634 <prvHeapInit+0xac>)
 8006596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00c      	beq.n	80065bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3307      	adds	r3, #7
 80065a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <prvHeapInit+0xac>)
 80065b8:	4413      	add	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065c0:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <prvHeapInit+0xb0>)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065c6:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <prvHeapInit+0xb0>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065d4:	2208      	movs	r2, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0307 	bic.w	r3, r3, #7
 80065e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a15      	ldr	r2, [pc, #84]	; (800663c <prvHeapInit+0xb4>)
 80065e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065ea:	4b14      	ldr	r3, [pc, #80]	; (800663c <prvHeapInit+0xb4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065f2:	4b12      	ldr	r3, [pc, #72]	; (800663c <prvHeapInit+0xb4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <prvHeapInit+0xb4>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a0a      	ldr	r2, [pc, #40]	; (8006640 <prvHeapInit+0xb8>)
 8006616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a09      	ldr	r2, [pc, #36]	; (8006644 <prvHeapInit+0xbc>)
 800661e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <prvHeapInit+0xc0>)
 8006622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20001028 	.word	0x20001028
 8006638:	20002428 	.word	0x20002428
 800663c:	20002430 	.word	0x20002430
 8006640:	20002438 	.word	0x20002438
 8006644:	20002434 	.word	0x20002434
 8006648:	2000243c 	.word	0x2000243c

0800664c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006654:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <prvInsertBlockIntoFreeList+0xa8>)
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <prvInsertBlockIntoFreeList+0x14>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d8f7      	bhi.n	800665a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	4413      	add	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d108      	bne.n	800668e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d118      	bne.n	80066d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvInsertBlockIntoFreeList+0xac>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d00d      	beq.n	80066ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	441a      	add	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e008      	b.n	80066dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <prvInsertBlockIntoFreeList+0xac>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e003      	b.n	80066dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d002      	beq.n	80066ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ea:	bf00      	nop
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr
 80066f4:	20002428 	.word	0x20002428
 80066f8:	20002430 	.word	0x20002430

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	2600      	movs	r6, #0
 8006700:	4d0c      	ldr	r5, [pc, #48]	; (8006734 <__libc_init_array+0x38>)
 8006702:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006704:	1b64      	subs	r4, r4, r5
 8006706:	10a4      	asrs	r4, r4, #2
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	f000 f8f0 	bl	80068f0 <_init>
 8006710:	2600      	movs	r6, #0
 8006712:	4d0a      	ldr	r5, [pc, #40]	; (800673c <__libc_init_array+0x40>)
 8006714:	4c0a      	ldr	r4, [pc, #40]	; (8006740 <__libc_init_array+0x44>)
 8006716:	1b64      	subs	r4, r4, r5
 8006718:	10a4      	asrs	r4, r4, #2
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08006aa8 	.word	0x08006aa8
 8006738:	08006aa8 	.word	0x08006aa8
 800673c:	08006aa8 	.word	0x08006aa8
 8006740:	08006aac 	.word	0x08006aac

08006744 <__retarget_lock_acquire_recursive>:
 8006744:	4770      	bx	lr

08006746 <__retarget_lock_release_recursive>:
 8006746:	4770      	bx	lr

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	4291      	cmp	r1, r2
 800675c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <memset>:
 8006764:	4603      	mov	r3, r0
 8006766:	4402      	add	r2, r0
 8006768:	4293      	cmp	r3, r2
 800676a:	d100      	bne.n	800676e <memset+0xa>
 800676c:	4770      	bx	lr
 800676e:	f803 1b01 	strb.w	r1, [r3], #1
 8006772:	e7f9      	b.n	8006768 <memset+0x4>

08006774 <cleanup_glue>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	6809      	ldr	r1, [r1, #0]
 800677a:	4605      	mov	r5, r0
 800677c:	b109      	cbz	r1, 8006782 <cleanup_glue+0xe>
 800677e:	f7ff fff9 	bl	8006774 <cleanup_glue>
 8006782:	4621      	mov	r1, r4
 8006784:	4628      	mov	r0, r5
 8006786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800678a:	f000 b869 	b.w	8006860 <_free_r>
	...

08006790 <_reclaim_reent>:
 8006790:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <_reclaim_reent+0xb4>)
 8006792:	b570      	push	{r4, r5, r6, lr}
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4604      	mov	r4, r0
 8006798:	4283      	cmp	r3, r0
 800679a:	d051      	beq.n	8006840 <_reclaim_reent+0xb0>
 800679c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800679e:	b143      	cbz	r3, 80067b2 <_reclaim_reent+0x22>
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d14a      	bne.n	800683c <_reclaim_reent+0xac>
 80067a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	b111      	cbz	r1, 80067b2 <_reclaim_reent+0x22>
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 f857 	bl	8006860 <_free_r>
 80067b2:	6961      	ldr	r1, [r4, #20]
 80067b4:	b111      	cbz	r1, 80067bc <_reclaim_reent+0x2c>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f852 	bl	8006860 <_free_r>
 80067bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067be:	b111      	cbz	r1, 80067c6 <_reclaim_reent+0x36>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f84d 	bl	8006860 <_free_r>
 80067c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067c8:	b111      	cbz	r1, 80067d0 <_reclaim_reent+0x40>
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 f848 	bl	8006860 <_free_r>
 80067d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80067d2:	b111      	cbz	r1, 80067da <_reclaim_reent+0x4a>
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 f843 	bl	8006860 <_free_r>
 80067da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80067dc:	b111      	cbz	r1, 80067e4 <_reclaim_reent+0x54>
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 f83e 	bl	8006860 <_free_r>
 80067e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80067e6:	b111      	cbz	r1, 80067ee <_reclaim_reent+0x5e>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 f839 	bl	8006860 <_free_r>
 80067ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80067f0:	b111      	cbz	r1, 80067f8 <_reclaim_reent+0x68>
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 f834 	bl	8006860 <_free_r>
 80067f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fa:	b111      	cbz	r1, 8006802 <_reclaim_reent+0x72>
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 f82f 	bl	8006860 <_free_r>
 8006802:	69a3      	ldr	r3, [r4, #24]
 8006804:	b1e3      	cbz	r3, 8006840 <_reclaim_reent+0xb0>
 8006806:	4620      	mov	r0, r4
 8006808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800680a:	4798      	blx	r3
 800680c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800680e:	b1b9      	cbz	r1, 8006840 <_reclaim_reent+0xb0>
 8006810:	4620      	mov	r0, r4
 8006812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006816:	f7ff bfad 	b.w	8006774 <cleanup_glue>
 800681a:	5949      	ldr	r1, [r1, r5]
 800681c:	b941      	cbnz	r1, 8006830 <_reclaim_reent+0xa0>
 800681e:	3504      	adds	r5, #4
 8006820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006822:	2d80      	cmp	r5, #128	; 0x80
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	d1f8      	bne.n	800681a <_reclaim_reent+0x8a>
 8006828:	4620      	mov	r0, r4
 800682a:	f000 f819 	bl	8006860 <_free_r>
 800682e:	e7ba      	b.n	80067a6 <_reclaim_reent+0x16>
 8006830:	680e      	ldr	r6, [r1, #0]
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f814 	bl	8006860 <_free_r>
 8006838:	4631      	mov	r1, r6
 800683a:	e7ef      	b.n	800681c <_reclaim_reent+0x8c>
 800683c:	2500      	movs	r5, #0
 800683e:	e7ef      	b.n	8006820 <_reclaim_reent+0x90>
 8006840:	bd70      	pop	{r4, r5, r6, pc}
 8006842:	bf00      	nop
 8006844:	20000010 	.word	0x20000010

08006848 <__malloc_lock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_lock+0x8>)
 800684a:	f7ff bf7b 	b.w	8006744 <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	20002440 	.word	0x20002440

08006854 <__malloc_unlock>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__malloc_unlock+0x8>)
 8006856:	f7ff bf76 	b.w	8006746 <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	20002440 	.word	0x20002440

08006860 <_free_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4605      	mov	r5, r0
 8006864:	2900      	cmp	r1, #0
 8006866:	d040      	beq.n	80068ea <_free_r+0x8a>
 8006868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800686c:	1f0c      	subs	r4, r1, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	bfb8      	it	lt
 8006872:	18e4      	addlt	r4, r4, r3
 8006874:	f7ff ffe8 	bl	8006848 <__malloc_lock>
 8006878:	4a1c      	ldr	r2, [pc, #112]	; (80068ec <_free_r+0x8c>)
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	b933      	cbnz	r3, 800688c <_free_r+0x2c>
 800687e:	6063      	str	r3, [r4, #4]
 8006880:	6014      	str	r4, [r2, #0]
 8006882:	4628      	mov	r0, r5
 8006884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006888:	f7ff bfe4 	b.w	8006854 <__malloc_unlock>
 800688c:	42a3      	cmp	r3, r4
 800688e:	d908      	bls.n	80068a2 <_free_r+0x42>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	1821      	adds	r1, r4, r0
 8006894:	428b      	cmp	r3, r1
 8006896:	bf01      	itttt	eq
 8006898:	6819      	ldreq	r1, [r3, #0]
 800689a:	685b      	ldreq	r3, [r3, #4]
 800689c:	1809      	addeq	r1, r1, r0
 800689e:	6021      	streq	r1, [r4, #0]
 80068a0:	e7ed      	b.n	800687e <_free_r+0x1e>
 80068a2:	461a      	mov	r2, r3
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	b10b      	cbz	r3, 80068ac <_free_r+0x4c>
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d9fa      	bls.n	80068a2 <_free_r+0x42>
 80068ac:	6811      	ldr	r1, [r2, #0]
 80068ae:	1850      	adds	r0, r2, r1
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d10b      	bne.n	80068cc <_free_r+0x6c>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	4401      	add	r1, r0
 80068b8:	1850      	adds	r0, r2, r1
 80068ba:	4283      	cmp	r3, r0
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	d1e0      	bne.n	8006882 <_free_r+0x22>
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	4401      	add	r1, r0
 80068c6:	6011      	str	r1, [r2, #0]
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	e7da      	b.n	8006882 <_free_r+0x22>
 80068cc:	d902      	bls.n	80068d4 <_free_r+0x74>
 80068ce:	230c      	movs	r3, #12
 80068d0:	602b      	str	r3, [r5, #0]
 80068d2:	e7d6      	b.n	8006882 <_free_r+0x22>
 80068d4:	6820      	ldr	r0, [r4, #0]
 80068d6:	1821      	adds	r1, r4, r0
 80068d8:	428b      	cmp	r3, r1
 80068da:	bf01      	itttt	eq
 80068dc:	6819      	ldreq	r1, [r3, #0]
 80068de:	685b      	ldreq	r3, [r3, #4]
 80068e0:	1809      	addeq	r1, r1, r0
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6054      	str	r4, [r2, #4]
 80068e8:	e7cb      	b.n	8006882 <_free_r+0x22>
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	20002444 	.word	0x20002444

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
